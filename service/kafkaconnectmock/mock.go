// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/kafkaconnect/kafkaconnectiface (interfaces: KafkaConnectAPI)

// Package kafkaconnectmock is a generated GoMock package.
package kafkaconnectmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	kafkaconnect "github.com/aws/aws-sdk-go/service/kafkaconnect"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaConnectAPI is a mock of KafkaConnectAPI interface.
type MockKafkaConnectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConnectAPIMockRecorder
}

// MockKafkaConnectAPIMockRecorder is the mock recorder for MockKafkaConnectAPI.
type MockKafkaConnectAPIMockRecorder struct {
	mock *MockKafkaConnectAPI
}

// NewMockKafkaConnectAPI creates a new mock instance.
func NewMockKafkaConnectAPI(ctrl *gomock.Controller) *MockKafkaConnectAPI {
	mock := &MockKafkaConnectAPI{ctrl: ctrl}
	mock.recorder = &MockKafkaConnectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaConnectAPI) EXPECT() *MockKafkaConnectAPIMockRecorder {
	return m.recorder
}

// CreateConnector mocks base method.
func (m *MockKafkaConnectAPI) CreateConnector(arg0 *kafkaconnect.CreateConnectorInput) (*kafkaconnect.CreateConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnector", arg0)
	ret0, _ := ret[0].(*kafkaconnect.CreateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnector indicates an expected call of CreateConnector.
func (mr *MockKafkaConnectAPIMockRecorder) CreateConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnector", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateConnector), arg0)
}

// CreateConnectorRequest mocks base method.
func (m *MockKafkaConnectAPI) CreateConnectorRequest(arg0 *kafkaconnect.CreateConnectorInput) (*request.Request, *kafkaconnect.CreateConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.CreateConnectorOutput)
	return ret0, ret1
}

// CreateConnectorRequest indicates an expected call of CreateConnectorRequest.
func (mr *MockKafkaConnectAPIMockRecorder) CreateConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectorRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateConnectorRequest), arg0)
}

// CreateConnectorWithContext mocks base method.
func (m *MockKafkaConnectAPI) CreateConnectorWithContext(arg0 context.Context, arg1 *kafkaconnect.CreateConnectorInput, arg2 ...request.Option) (*kafkaconnect.CreateConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.CreateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectorWithContext indicates an expected call of CreateConnectorWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) CreateConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectorWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateConnectorWithContext), varargs...)
}

// CreateCustomPlugin mocks base method.
func (m *MockKafkaConnectAPI) CreateCustomPlugin(arg0 *kafkaconnect.CreateCustomPluginInput) (*kafkaconnect.CreateCustomPluginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomPlugin", arg0)
	ret0, _ := ret[0].(*kafkaconnect.CreateCustomPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomPlugin indicates an expected call of CreateCustomPlugin.
func (mr *MockKafkaConnectAPIMockRecorder) CreateCustomPlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomPlugin", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateCustomPlugin), arg0)
}

// CreateCustomPluginRequest mocks base method.
func (m *MockKafkaConnectAPI) CreateCustomPluginRequest(arg0 *kafkaconnect.CreateCustomPluginInput) (*request.Request, *kafkaconnect.CreateCustomPluginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomPluginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.CreateCustomPluginOutput)
	return ret0, ret1
}

// CreateCustomPluginRequest indicates an expected call of CreateCustomPluginRequest.
func (mr *MockKafkaConnectAPIMockRecorder) CreateCustomPluginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomPluginRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateCustomPluginRequest), arg0)
}

// CreateCustomPluginWithContext mocks base method.
func (m *MockKafkaConnectAPI) CreateCustomPluginWithContext(arg0 context.Context, arg1 *kafkaconnect.CreateCustomPluginInput, arg2 ...request.Option) (*kafkaconnect.CreateCustomPluginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomPluginWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.CreateCustomPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomPluginWithContext indicates an expected call of CreateCustomPluginWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) CreateCustomPluginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomPluginWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateCustomPluginWithContext), varargs...)
}

// CreateWorkerConfiguration mocks base method.
func (m *MockKafkaConnectAPI) CreateWorkerConfiguration(arg0 *kafkaconnect.CreateWorkerConfigurationInput) (*kafkaconnect.CreateWorkerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerConfiguration", arg0)
	ret0, _ := ret[0].(*kafkaconnect.CreateWorkerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerConfiguration indicates an expected call of CreateWorkerConfiguration.
func (mr *MockKafkaConnectAPIMockRecorder) CreateWorkerConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerConfiguration", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateWorkerConfiguration), arg0)
}

// CreateWorkerConfigurationRequest mocks base method.
func (m *MockKafkaConnectAPI) CreateWorkerConfigurationRequest(arg0 *kafkaconnect.CreateWorkerConfigurationInput) (*request.Request, *kafkaconnect.CreateWorkerConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.CreateWorkerConfigurationOutput)
	return ret0, ret1
}

// CreateWorkerConfigurationRequest indicates an expected call of CreateWorkerConfigurationRequest.
func (mr *MockKafkaConnectAPIMockRecorder) CreateWorkerConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerConfigurationRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateWorkerConfigurationRequest), arg0)
}

// CreateWorkerConfigurationWithContext mocks base method.
func (m *MockKafkaConnectAPI) CreateWorkerConfigurationWithContext(arg0 context.Context, arg1 *kafkaconnect.CreateWorkerConfigurationInput, arg2 ...request.Option) (*kafkaconnect.CreateWorkerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkerConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.CreateWorkerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerConfigurationWithContext indicates an expected call of CreateWorkerConfigurationWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) CreateWorkerConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerConfigurationWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).CreateWorkerConfigurationWithContext), varargs...)
}

// DeleteConnector mocks base method.
func (m *MockKafkaConnectAPI) DeleteConnector(arg0 *kafkaconnect.DeleteConnectorInput) (*kafkaconnect.DeleteConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnector", arg0)
	ret0, _ := ret[0].(*kafkaconnect.DeleteConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnector indicates an expected call of DeleteConnector.
func (mr *MockKafkaConnectAPIMockRecorder) DeleteConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnector", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DeleteConnector), arg0)
}

// DeleteConnectorRequest mocks base method.
func (m *MockKafkaConnectAPI) DeleteConnectorRequest(arg0 *kafkaconnect.DeleteConnectorInput) (*request.Request, *kafkaconnect.DeleteConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.DeleteConnectorOutput)
	return ret0, ret1
}

// DeleteConnectorRequest indicates an expected call of DeleteConnectorRequest.
func (mr *MockKafkaConnectAPIMockRecorder) DeleteConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectorRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DeleteConnectorRequest), arg0)
}

// DeleteConnectorWithContext mocks base method.
func (m *MockKafkaConnectAPI) DeleteConnectorWithContext(arg0 context.Context, arg1 *kafkaconnect.DeleteConnectorInput, arg2 ...request.Option) (*kafkaconnect.DeleteConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.DeleteConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectorWithContext indicates an expected call of DeleteConnectorWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) DeleteConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectorWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DeleteConnectorWithContext), varargs...)
}

// DeleteCustomPlugin mocks base method.
func (m *MockKafkaConnectAPI) DeleteCustomPlugin(arg0 *kafkaconnect.DeleteCustomPluginInput) (*kafkaconnect.DeleteCustomPluginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomPlugin", arg0)
	ret0, _ := ret[0].(*kafkaconnect.DeleteCustomPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomPlugin indicates an expected call of DeleteCustomPlugin.
func (mr *MockKafkaConnectAPIMockRecorder) DeleteCustomPlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomPlugin", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DeleteCustomPlugin), arg0)
}

// DeleteCustomPluginRequest mocks base method.
func (m *MockKafkaConnectAPI) DeleteCustomPluginRequest(arg0 *kafkaconnect.DeleteCustomPluginInput) (*request.Request, *kafkaconnect.DeleteCustomPluginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomPluginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.DeleteCustomPluginOutput)
	return ret0, ret1
}

// DeleteCustomPluginRequest indicates an expected call of DeleteCustomPluginRequest.
func (mr *MockKafkaConnectAPIMockRecorder) DeleteCustomPluginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomPluginRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DeleteCustomPluginRequest), arg0)
}

// DeleteCustomPluginWithContext mocks base method.
func (m *MockKafkaConnectAPI) DeleteCustomPluginWithContext(arg0 context.Context, arg1 *kafkaconnect.DeleteCustomPluginInput, arg2 ...request.Option) (*kafkaconnect.DeleteCustomPluginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomPluginWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.DeleteCustomPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomPluginWithContext indicates an expected call of DeleteCustomPluginWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) DeleteCustomPluginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomPluginWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DeleteCustomPluginWithContext), varargs...)
}

// DescribeConnector mocks base method.
func (m *MockKafkaConnectAPI) DescribeConnector(arg0 *kafkaconnect.DescribeConnectorInput) (*kafkaconnect.DescribeConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnector", arg0)
	ret0, _ := ret[0].(*kafkaconnect.DescribeConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnector indicates an expected call of DescribeConnector.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnector", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeConnector), arg0)
}

// DescribeConnectorRequest mocks base method.
func (m *MockKafkaConnectAPI) DescribeConnectorRequest(arg0 *kafkaconnect.DescribeConnectorInput) (*request.Request, *kafkaconnect.DescribeConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.DescribeConnectorOutput)
	return ret0, ret1
}

// DescribeConnectorRequest indicates an expected call of DescribeConnectorRequest.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectorRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeConnectorRequest), arg0)
}

// DescribeConnectorWithContext mocks base method.
func (m *MockKafkaConnectAPI) DescribeConnectorWithContext(arg0 context.Context, arg1 *kafkaconnect.DescribeConnectorInput, arg2 ...request.Option) (*kafkaconnect.DescribeConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.DescribeConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectorWithContext indicates an expected call of DescribeConnectorWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectorWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeConnectorWithContext), varargs...)
}

// DescribeCustomPlugin mocks base method.
func (m *MockKafkaConnectAPI) DescribeCustomPlugin(arg0 *kafkaconnect.DescribeCustomPluginInput) (*kafkaconnect.DescribeCustomPluginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomPlugin", arg0)
	ret0, _ := ret[0].(*kafkaconnect.DescribeCustomPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomPlugin indicates an expected call of DescribeCustomPlugin.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeCustomPlugin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomPlugin", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeCustomPlugin), arg0)
}

// DescribeCustomPluginRequest mocks base method.
func (m *MockKafkaConnectAPI) DescribeCustomPluginRequest(arg0 *kafkaconnect.DescribeCustomPluginInput) (*request.Request, *kafkaconnect.DescribeCustomPluginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomPluginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.DescribeCustomPluginOutput)
	return ret0, ret1
}

// DescribeCustomPluginRequest indicates an expected call of DescribeCustomPluginRequest.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeCustomPluginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomPluginRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeCustomPluginRequest), arg0)
}

// DescribeCustomPluginWithContext mocks base method.
func (m *MockKafkaConnectAPI) DescribeCustomPluginWithContext(arg0 context.Context, arg1 *kafkaconnect.DescribeCustomPluginInput, arg2 ...request.Option) (*kafkaconnect.DescribeCustomPluginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomPluginWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.DescribeCustomPluginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomPluginWithContext indicates an expected call of DescribeCustomPluginWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeCustomPluginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomPluginWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeCustomPluginWithContext), varargs...)
}

// DescribeWorkerConfiguration mocks base method.
func (m *MockKafkaConnectAPI) DescribeWorkerConfiguration(arg0 *kafkaconnect.DescribeWorkerConfigurationInput) (*kafkaconnect.DescribeWorkerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkerConfiguration", arg0)
	ret0, _ := ret[0].(*kafkaconnect.DescribeWorkerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkerConfiguration indicates an expected call of DescribeWorkerConfiguration.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeWorkerConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkerConfiguration", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeWorkerConfiguration), arg0)
}

// DescribeWorkerConfigurationRequest mocks base method.
func (m *MockKafkaConnectAPI) DescribeWorkerConfigurationRequest(arg0 *kafkaconnect.DescribeWorkerConfigurationInput) (*request.Request, *kafkaconnect.DescribeWorkerConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkerConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.DescribeWorkerConfigurationOutput)
	return ret0, ret1
}

// DescribeWorkerConfigurationRequest indicates an expected call of DescribeWorkerConfigurationRequest.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeWorkerConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkerConfigurationRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeWorkerConfigurationRequest), arg0)
}

// DescribeWorkerConfigurationWithContext mocks base method.
func (m *MockKafkaConnectAPI) DescribeWorkerConfigurationWithContext(arg0 context.Context, arg1 *kafkaconnect.DescribeWorkerConfigurationInput, arg2 ...request.Option) (*kafkaconnect.DescribeWorkerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkerConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.DescribeWorkerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkerConfigurationWithContext indicates an expected call of DescribeWorkerConfigurationWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) DescribeWorkerConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkerConfigurationWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).DescribeWorkerConfigurationWithContext), varargs...)
}

// ListConnectors mocks base method.
func (m *MockKafkaConnectAPI) ListConnectors(arg0 *kafkaconnect.ListConnectorsInput) (*kafkaconnect.ListConnectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", arg0)
	ret0, _ := ret[0].(*kafkaconnect.ListConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors.
func (mr *MockKafkaConnectAPIMockRecorder) ListConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListConnectors), arg0)
}

// ListConnectorsPages mocks base method.
func (m *MockKafkaConnectAPI) ListConnectorsPages(arg0 *kafkaconnect.ListConnectorsInput, arg1 func(*kafkaconnect.ListConnectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectorsPages indicates an expected call of ListConnectorsPages.
func (mr *MockKafkaConnectAPIMockRecorder) ListConnectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsPages", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListConnectorsPages), arg0, arg1)
}

// ListConnectorsPagesWithContext mocks base method.
func (m *MockKafkaConnectAPI) ListConnectorsPagesWithContext(arg0 context.Context, arg1 *kafkaconnect.ListConnectorsInput, arg2 func(*kafkaconnect.ListConnectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectorsPagesWithContext indicates an expected call of ListConnectorsPagesWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) ListConnectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsPagesWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListConnectorsPagesWithContext), varargs...)
}

// ListConnectorsRequest mocks base method.
func (m *MockKafkaConnectAPI) ListConnectorsRequest(arg0 *kafkaconnect.ListConnectorsInput) (*request.Request, *kafkaconnect.ListConnectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.ListConnectorsOutput)
	return ret0, ret1
}

// ListConnectorsRequest indicates an expected call of ListConnectorsRequest.
func (mr *MockKafkaConnectAPIMockRecorder) ListConnectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListConnectorsRequest), arg0)
}

// ListConnectorsWithContext mocks base method.
func (m *MockKafkaConnectAPI) ListConnectorsWithContext(arg0 context.Context, arg1 *kafkaconnect.ListConnectorsInput, arg2 ...request.Option) (*kafkaconnect.ListConnectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorsWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.ListConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorsWithContext indicates an expected call of ListConnectorsWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) ListConnectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListConnectorsWithContext), varargs...)
}

// ListCustomPlugins mocks base method.
func (m *MockKafkaConnectAPI) ListCustomPlugins(arg0 *kafkaconnect.ListCustomPluginsInput) (*kafkaconnect.ListCustomPluginsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomPlugins", arg0)
	ret0, _ := ret[0].(*kafkaconnect.ListCustomPluginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomPlugins indicates an expected call of ListCustomPlugins.
func (mr *MockKafkaConnectAPIMockRecorder) ListCustomPlugins(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomPlugins", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListCustomPlugins), arg0)
}

// ListCustomPluginsPages mocks base method.
func (m *MockKafkaConnectAPI) ListCustomPluginsPages(arg0 *kafkaconnect.ListCustomPluginsInput, arg1 func(*kafkaconnect.ListCustomPluginsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomPluginsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomPluginsPages indicates an expected call of ListCustomPluginsPages.
func (mr *MockKafkaConnectAPIMockRecorder) ListCustomPluginsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomPluginsPages", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListCustomPluginsPages), arg0, arg1)
}

// ListCustomPluginsPagesWithContext mocks base method.
func (m *MockKafkaConnectAPI) ListCustomPluginsPagesWithContext(arg0 context.Context, arg1 *kafkaconnect.ListCustomPluginsInput, arg2 func(*kafkaconnect.ListCustomPluginsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomPluginsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomPluginsPagesWithContext indicates an expected call of ListCustomPluginsPagesWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) ListCustomPluginsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomPluginsPagesWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListCustomPluginsPagesWithContext), varargs...)
}

// ListCustomPluginsRequest mocks base method.
func (m *MockKafkaConnectAPI) ListCustomPluginsRequest(arg0 *kafkaconnect.ListCustomPluginsInput) (*request.Request, *kafkaconnect.ListCustomPluginsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomPluginsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.ListCustomPluginsOutput)
	return ret0, ret1
}

// ListCustomPluginsRequest indicates an expected call of ListCustomPluginsRequest.
func (mr *MockKafkaConnectAPIMockRecorder) ListCustomPluginsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomPluginsRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListCustomPluginsRequest), arg0)
}

// ListCustomPluginsWithContext mocks base method.
func (m *MockKafkaConnectAPI) ListCustomPluginsWithContext(arg0 context.Context, arg1 *kafkaconnect.ListCustomPluginsInput, arg2 ...request.Option) (*kafkaconnect.ListCustomPluginsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomPluginsWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.ListCustomPluginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomPluginsWithContext indicates an expected call of ListCustomPluginsWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) ListCustomPluginsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomPluginsWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListCustomPluginsWithContext), varargs...)
}

// ListWorkerConfigurations mocks base method.
func (m *MockKafkaConnectAPI) ListWorkerConfigurations(arg0 *kafkaconnect.ListWorkerConfigurationsInput) (*kafkaconnect.ListWorkerConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerConfigurations", arg0)
	ret0, _ := ret[0].(*kafkaconnect.ListWorkerConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerConfigurations indicates an expected call of ListWorkerConfigurations.
func (mr *MockKafkaConnectAPIMockRecorder) ListWorkerConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerConfigurations", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListWorkerConfigurations), arg0)
}

// ListWorkerConfigurationsPages mocks base method.
func (m *MockKafkaConnectAPI) ListWorkerConfigurationsPages(arg0 *kafkaconnect.ListWorkerConfigurationsInput, arg1 func(*kafkaconnect.ListWorkerConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkerConfigurationsPages indicates an expected call of ListWorkerConfigurationsPages.
func (mr *MockKafkaConnectAPIMockRecorder) ListWorkerConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerConfigurationsPages", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListWorkerConfigurationsPages), arg0, arg1)
}

// ListWorkerConfigurationsPagesWithContext mocks base method.
func (m *MockKafkaConnectAPI) ListWorkerConfigurationsPagesWithContext(arg0 context.Context, arg1 *kafkaconnect.ListWorkerConfigurationsInput, arg2 func(*kafkaconnect.ListWorkerConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkerConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkerConfigurationsPagesWithContext indicates an expected call of ListWorkerConfigurationsPagesWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) ListWorkerConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerConfigurationsPagesWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListWorkerConfigurationsPagesWithContext), varargs...)
}

// ListWorkerConfigurationsRequest mocks base method.
func (m *MockKafkaConnectAPI) ListWorkerConfigurationsRequest(arg0 *kafkaconnect.ListWorkerConfigurationsInput) (*request.Request, *kafkaconnect.ListWorkerConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.ListWorkerConfigurationsOutput)
	return ret0, ret1
}

// ListWorkerConfigurationsRequest indicates an expected call of ListWorkerConfigurationsRequest.
func (mr *MockKafkaConnectAPIMockRecorder) ListWorkerConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerConfigurationsRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListWorkerConfigurationsRequest), arg0)
}

// ListWorkerConfigurationsWithContext mocks base method.
func (m *MockKafkaConnectAPI) ListWorkerConfigurationsWithContext(arg0 context.Context, arg1 *kafkaconnect.ListWorkerConfigurationsInput, arg2 ...request.Option) (*kafkaconnect.ListWorkerConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkerConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.ListWorkerConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerConfigurationsWithContext indicates an expected call of ListWorkerConfigurationsWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) ListWorkerConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerConfigurationsWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).ListWorkerConfigurationsWithContext), varargs...)
}

// UpdateConnector mocks base method.
func (m *MockKafkaConnectAPI) UpdateConnector(arg0 *kafkaconnect.UpdateConnectorInput) (*kafkaconnect.UpdateConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnector", arg0)
	ret0, _ := ret[0].(*kafkaconnect.UpdateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnector indicates an expected call of UpdateConnector.
func (mr *MockKafkaConnectAPIMockRecorder) UpdateConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnector", reflect.TypeOf((*MockKafkaConnectAPI)(nil).UpdateConnector), arg0)
}

// UpdateConnectorRequest mocks base method.
func (m *MockKafkaConnectAPI) UpdateConnectorRequest(arg0 *kafkaconnect.UpdateConnectorInput) (*request.Request, *kafkaconnect.UpdateConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafkaconnect.UpdateConnectorOutput)
	return ret0, ret1
}

// UpdateConnectorRequest indicates an expected call of UpdateConnectorRequest.
func (mr *MockKafkaConnectAPIMockRecorder) UpdateConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectorRequest", reflect.TypeOf((*MockKafkaConnectAPI)(nil).UpdateConnectorRequest), arg0)
}

// UpdateConnectorWithContext mocks base method.
func (m *MockKafkaConnectAPI) UpdateConnectorWithContext(arg0 context.Context, arg1 *kafkaconnect.UpdateConnectorInput, arg2 ...request.Option) (*kafkaconnect.UpdateConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*kafkaconnect.UpdateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectorWithContext indicates an expected call of UpdateConnectorWithContext.
func (mr *MockKafkaConnectAPIMockRecorder) UpdateConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectorWithContext", reflect.TypeOf((*MockKafkaConnectAPI)(nil).UpdateConnectorWithContext), varargs...)
}

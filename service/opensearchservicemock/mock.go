// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/opensearchservice/opensearchserviceiface (interfaces: OpenSearchServiceAPI)

// Package opensearchservicemock is a generated GoMock package.
package opensearchservicemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	opensearchservice "github.com/aws/aws-sdk-go/service/opensearchservice"
	gomock "github.com/golang/mock/gomock"
)

// MockOpenSearchServiceAPI is a mock of OpenSearchServiceAPI interface.
type MockOpenSearchServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSearchServiceAPIMockRecorder
}

// MockOpenSearchServiceAPIMockRecorder is the mock recorder for MockOpenSearchServiceAPI.
type MockOpenSearchServiceAPIMockRecorder struct {
	mock *MockOpenSearchServiceAPI
}

// NewMockOpenSearchServiceAPI creates a new mock instance.
func NewMockOpenSearchServiceAPI(ctrl *gomock.Controller) *MockOpenSearchServiceAPI {
	mock := &MockOpenSearchServiceAPI{ctrl: ctrl}
	mock.recorder = &MockOpenSearchServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenSearchServiceAPI) EXPECT() *MockOpenSearchServiceAPIMockRecorder {
	return m.recorder
}

// AcceptInboundConnection mocks base method.
func (m *MockOpenSearchServiceAPI) AcceptInboundConnection(arg0 *opensearchservice.AcceptInboundConnectionInput) (*opensearchservice.AcceptInboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInboundConnection", arg0)
	ret0, _ := ret[0].(*opensearchservice.AcceptInboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInboundConnection indicates an expected call of AcceptInboundConnection.
func (mr *MockOpenSearchServiceAPIMockRecorder) AcceptInboundConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInboundConnection", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AcceptInboundConnection), arg0)
}

// AcceptInboundConnectionRequest mocks base method.
func (m *MockOpenSearchServiceAPI) AcceptInboundConnectionRequest(arg0 *opensearchservice.AcceptInboundConnectionInput) (*request.Request, *opensearchservice.AcceptInboundConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInboundConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.AcceptInboundConnectionOutput)
	return ret0, ret1
}

// AcceptInboundConnectionRequest indicates an expected call of AcceptInboundConnectionRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) AcceptInboundConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInboundConnectionRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AcceptInboundConnectionRequest), arg0)
}

// AcceptInboundConnectionWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) AcceptInboundConnectionWithContext(arg0 context.Context, arg1 *opensearchservice.AcceptInboundConnectionInput, arg2 ...request.Option) (*opensearchservice.AcceptInboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptInboundConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.AcceptInboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInboundConnectionWithContext indicates an expected call of AcceptInboundConnectionWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) AcceptInboundConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInboundConnectionWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AcceptInboundConnectionWithContext), varargs...)
}

// AddTags mocks base method.
func (m *MockOpenSearchServiceAPI) AddTags(arg0 *opensearchservice.AddTagsInput) (*opensearchservice.AddTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTags", arg0)
	ret0, _ := ret[0].(*opensearchservice.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTags indicates an expected call of AddTags.
func (mr *MockOpenSearchServiceAPIMockRecorder) AddTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AddTags), arg0)
}

// AddTagsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) AddTagsRequest(arg0 *opensearchservice.AddTagsInput) (*request.Request, *opensearchservice.AddTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.AddTagsOutput)
	return ret0, ret1
}

// AddTagsRequest indicates an expected call of AddTagsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) AddTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AddTagsRequest), arg0)
}

// AddTagsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) AddTagsWithContext(arg0 context.Context, arg1 *opensearchservice.AddTagsInput, arg2 ...request.Option) (*opensearchservice.AddTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsWithContext indicates an expected call of AddTagsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) AddTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AddTagsWithContext), varargs...)
}

// AssociatePackage mocks base method.
func (m *MockOpenSearchServiceAPI) AssociatePackage(arg0 *opensearchservice.AssociatePackageInput) (*opensearchservice.AssociatePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePackage", arg0)
	ret0, _ := ret[0].(*opensearchservice.AssociatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePackage indicates an expected call of AssociatePackage.
func (mr *MockOpenSearchServiceAPIMockRecorder) AssociatePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePackage", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AssociatePackage), arg0)
}

// AssociatePackageRequest mocks base method.
func (m *MockOpenSearchServiceAPI) AssociatePackageRequest(arg0 *opensearchservice.AssociatePackageInput) (*request.Request, *opensearchservice.AssociatePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.AssociatePackageOutput)
	return ret0, ret1
}

// AssociatePackageRequest indicates an expected call of AssociatePackageRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) AssociatePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePackageRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AssociatePackageRequest), arg0)
}

// AssociatePackageWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) AssociatePackageWithContext(arg0 context.Context, arg1 *opensearchservice.AssociatePackageInput, arg2 ...request.Option) (*opensearchservice.AssociatePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociatePackageWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.AssociatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePackageWithContext indicates an expected call of AssociatePackageWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) AssociatePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePackageWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).AssociatePackageWithContext), varargs...)
}

// CancelServiceSoftwareUpdate mocks base method.
func (m *MockOpenSearchServiceAPI) CancelServiceSoftwareUpdate(arg0 *opensearchservice.CancelServiceSoftwareUpdateInput) (*opensearchservice.CancelServiceSoftwareUpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelServiceSoftwareUpdate", arg0)
	ret0, _ := ret[0].(*opensearchservice.CancelServiceSoftwareUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelServiceSoftwareUpdate indicates an expected call of CancelServiceSoftwareUpdate.
func (mr *MockOpenSearchServiceAPIMockRecorder) CancelServiceSoftwareUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServiceSoftwareUpdate", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CancelServiceSoftwareUpdate), arg0)
}

// CancelServiceSoftwareUpdateRequest mocks base method.
func (m *MockOpenSearchServiceAPI) CancelServiceSoftwareUpdateRequest(arg0 *opensearchservice.CancelServiceSoftwareUpdateInput) (*request.Request, *opensearchservice.CancelServiceSoftwareUpdateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelServiceSoftwareUpdateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.CancelServiceSoftwareUpdateOutput)
	return ret0, ret1
}

// CancelServiceSoftwareUpdateRequest indicates an expected call of CancelServiceSoftwareUpdateRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) CancelServiceSoftwareUpdateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServiceSoftwareUpdateRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CancelServiceSoftwareUpdateRequest), arg0)
}

// CancelServiceSoftwareUpdateWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) CancelServiceSoftwareUpdateWithContext(arg0 context.Context, arg1 *opensearchservice.CancelServiceSoftwareUpdateInput, arg2 ...request.Option) (*opensearchservice.CancelServiceSoftwareUpdateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelServiceSoftwareUpdateWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.CancelServiceSoftwareUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelServiceSoftwareUpdateWithContext indicates an expected call of CancelServiceSoftwareUpdateWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) CancelServiceSoftwareUpdateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelServiceSoftwareUpdateWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CancelServiceSoftwareUpdateWithContext), varargs...)
}

// CreateDomain mocks base method.
func (m *MockOpenSearchServiceAPI) CreateDomain(arg0 *opensearchservice.CreateDomainInput) (*opensearchservice.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(*opensearchservice.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreateDomain), arg0)
}

// CreateDomainRequest mocks base method.
func (m *MockOpenSearchServiceAPI) CreateDomainRequest(arg0 *opensearchservice.CreateDomainInput) (*request.Request, *opensearchservice.CreateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.CreateDomainOutput)
	return ret0, ret1
}

// CreateDomainRequest indicates an expected call of CreateDomainRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreateDomainRequest), arg0)
}

// CreateDomainWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) CreateDomainWithContext(arg0 context.Context, arg1 *opensearchservice.CreateDomainInput, arg2 ...request.Option) (*opensearchservice.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithContext indicates an expected call of CreateDomainWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreateDomainWithContext), varargs...)
}

// CreateOutboundConnection mocks base method.
func (m *MockOpenSearchServiceAPI) CreateOutboundConnection(arg0 *opensearchservice.CreateOutboundConnectionInput) (*opensearchservice.CreateOutboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutboundConnection", arg0)
	ret0, _ := ret[0].(*opensearchservice.CreateOutboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutboundConnection indicates an expected call of CreateOutboundConnection.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreateOutboundConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutboundConnection", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreateOutboundConnection), arg0)
}

// CreateOutboundConnectionRequest mocks base method.
func (m *MockOpenSearchServiceAPI) CreateOutboundConnectionRequest(arg0 *opensearchservice.CreateOutboundConnectionInput) (*request.Request, *opensearchservice.CreateOutboundConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutboundConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.CreateOutboundConnectionOutput)
	return ret0, ret1
}

// CreateOutboundConnectionRequest indicates an expected call of CreateOutboundConnectionRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreateOutboundConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutboundConnectionRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreateOutboundConnectionRequest), arg0)
}

// CreateOutboundConnectionWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) CreateOutboundConnectionWithContext(arg0 context.Context, arg1 *opensearchservice.CreateOutboundConnectionInput, arg2 ...request.Option) (*opensearchservice.CreateOutboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOutboundConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.CreateOutboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutboundConnectionWithContext indicates an expected call of CreateOutboundConnectionWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreateOutboundConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutboundConnectionWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreateOutboundConnectionWithContext), varargs...)
}

// CreatePackage mocks base method.
func (m *MockOpenSearchServiceAPI) CreatePackage(arg0 *opensearchservice.CreatePackageInput) (*opensearchservice.CreatePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", arg0)
	ret0, _ := ret[0].(*opensearchservice.CreatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreatePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreatePackage), arg0)
}

// CreatePackageRequest mocks base method.
func (m *MockOpenSearchServiceAPI) CreatePackageRequest(arg0 *opensearchservice.CreatePackageInput) (*request.Request, *opensearchservice.CreatePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.CreatePackageOutput)
	return ret0, ret1
}

// CreatePackageRequest indicates an expected call of CreatePackageRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreatePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreatePackageRequest), arg0)
}

// CreatePackageWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) CreatePackageWithContext(arg0 context.Context, arg1 *opensearchservice.CreatePackageInput, arg2 ...request.Option) (*opensearchservice.CreatePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePackageWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.CreatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageWithContext indicates an expected call of CreatePackageWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) CreatePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).CreatePackageWithContext), varargs...)
}

// DeleteDomain mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteDomain(arg0 *opensearchservice.DeleteDomainInput) (*opensearchservice.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0)
	ret0, _ := ret[0].(*opensearchservice.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomain indicates an expected call of DeleteDomain.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteDomain), arg0)
}

// DeleteDomainRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteDomainRequest(arg0 *opensearchservice.DeleteDomainInput) (*request.Request, *opensearchservice.DeleteDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DeleteDomainOutput)
	return ret0, ret1
}

// DeleteDomainRequest indicates an expected call of DeleteDomainRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteDomainRequest), arg0)
}

// DeleteDomainWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteDomainWithContext(arg0 context.Context, arg1 *opensearchservice.DeleteDomainInput, arg2 ...request.Option) (*opensearchservice.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainWithContext indicates an expected call of DeleteDomainWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteDomainWithContext), varargs...)
}

// DeleteInboundConnection mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteInboundConnection(arg0 *opensearchservice.DeleteInboundConnectionInput) (*opensearchservice.DeleteInboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInboundConnection", arg0)
	ret0, _ := ret[0].(*opensearchservice.DeleteInboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInboundConnection indicates an expected call of DeleteInboundConnection.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteInboundConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInboundConnection", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteInboundConnection), arg0)
}

// DeleteInboundConnectionRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteInboundConnectionRequest(arg0 *opensearchservice.DeleteInboundConnectionInput) (*request.Request, *opensearchservice.DeleteInboundConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInboundConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DeleteInboundConnectionOutput)
	return ret0, ret1
}

// DeleteInboundConnectionRequest indicates an expected call of DeleteInboundConnectionRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteInboundConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInboundConnectionRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteInboundConnectionRequest), arg0)
}

// DeleteInboundConnectionWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteInboundConnectionWithContext(arg0 context.Context, arg1 *opensearchservice.DeleteInboundConnectionInput, arg2 ...request.Option) (*opensearchservice.DeleteInboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInboundConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DeleteInboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInboundConnectionWithContext indicates an expected call of DeleteInboundConnectionWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteInboundConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInboundConnectionWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteInboundConnectionWithContext), varargs...)
}

// DeleteOutboundConnection mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteOutboundConnection(arg0 *opensearchservice.DeleteOutboundConnectionInput) (*opensearchservice.DeleteOutboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutboundConnection", arg0)
	ret0, _ := ret[0].(*opensearchservice.DeleteOutboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutboundConnection indicates an expected call of DeleteOutboundConnection.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteOutboundConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutboundConnection", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteOutboundConnection), arg0)
}

// DeleteOutboundConnectionRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteOutboundConnectionRequest(arg0 *opensearchservice.DeleteOutboundConnectionInput) (*request.Request, *opensearchservice.DeleteOutboundConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutboundConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DeleteOutboundConnectionOutput)
	return ret0, ret1
}

// DeleteOutboundConnectionRequest indicates an expected call of DeleteOutboundConnectionRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteOutboundConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutboundConnectionRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteOutboundConnectionRequest), arg0)
}

// DeleteOutboundConnectionWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DeleteOutboundConnectionWithContext(arg0 context.Context, arg1 *opensearchservice.DeleteOutboundConnectionInput, arg2 ...request.Option) (*opensearchservice.DeleteOutboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOutboundConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DeleteOutboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutboundConnectionWithContext indicates an expected call of DeleteOutboundConnectionWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeleteOutboundConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutboundConnectionWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeleteOutboundConnectionWithContext), varargs...)
}

// DeletePackage mocks base method.
func (m *MockOpenSearchServiceAPI) DeletePackage(arg0 *opensearchservice.DeletePackageInput) (*opensearchservice.DeletePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", arg0)
	ret0, _ := ret[0].(*opensearchservice.DeletePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeletePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeletePackage), arg0)
}

// DeletePackageRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DeletePackageRequest(arg0 *opensearchservice.DeletePackageInput) (*request.Request, *opensearchservice.DeletePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DeletePackageOutput)
	return ret0, ret1
}

// DeletePackageRequest indicates an expected call of DeletePackageRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeletePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackageRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeletePackageRequest), arg0)
}

// DeletePackageWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DeletePackageWithContext(arg0 context.Context, arg1 *opensearchservice.DeletePackageInput, arg2 ...request.Option) (*opensearchservice.DeletePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePackageWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DeletePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackageWithContext indicates an expected call of DeletePackageWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DeletePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackageWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DeletePackageWithContext), varargs...)
}

// DescribeDomain mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomain(arg0 *opensearchservice.DescribeDomainInput) (*opensearchservice.DescribeDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomain", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomain indicates an expected call of DescribeDomain.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomain", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomain), arg0)
}

// DescribeDomainAutoTunes mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainAutoTunes(arg0 *opensearchservice.DescribeDomainAutoTunesInput) (*opensearchservice.DescribeDomainAutoTunesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainAutoTunes", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainAutoTunesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainAutoTunes indicates an expected call of DescribeDomainAutoTunes.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainAutoTunes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainAutoTunes", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainAutoTunes), arg0)
}

// DescribeDomainAutoTunesPages mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainAutoTunesPages(arg0 *opensearchservice.DescribeDomainAutoTunesInput, arg1 func(*opensearchservice.DescribeDomainAutoTunesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainAutoTunesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDomainAutoTunesPages indicates an expected call of DescribeDomainAutoTunesPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainAutoTunesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainAutoTunesPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainAutoTunesPages), arg0, arg1)
}

// DescribeDomainAutoTunesPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainAutoTunesPagesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeDomainAutoTunesInput, arg2 func(*opensearchservice.DescribeDomainAutoTunesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainAutoTunesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDomainAutoTunesPagesWithContext indicates an expected call of DescribeDomainAutoTunesPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainAutoTunesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainAutoTunesPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainAutoTunesPagesWithContext), varargs...)
}

// DescribeDomainAutoTunesRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainAutoTunesRequest(arg0 *opensearchservice.DescribeDomainAutoTunesInput) (*request.Request, *opensearchservice.DescribeDomainAutoTunesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainAutoTunesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeDomainAutoTunesOutput)
	return ret0, ret1
}

// DescribeDomainAutoTunesRequest indicates an expected call of DescribeDomainAutoTunesRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainAutoTunesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainAutoTunesRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainAutoTunesRequest), arg0)
}

// DescribeDomainAutoTunesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainAutoTunesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeDomainAutoTunesInput, arg2 ...request.Option) (*opensearchservice.DescribeDomainAutoTunesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainAutoTunesWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainAutoTunesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainAutoTunesWithContext indicates an expected call of DescribeDomainAutoTunesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainAutoTunesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainAutoTunesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainAutoTunesWithContext), varargs...)
}

// DescribeDomainChangeProgress mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainChangeProgress(arg0 *opensearchservice.DescribeDomainChangeProgressInput) (*opensearchservice.DescribeDomainChangeProgressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainChangeProgress", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainChangeProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainChangeProgress indicates an expected call of DescribeDomainChangeProgress.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainChangeProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainChangeProgress", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainChangeProgress), arg0)
}

// DescribeDomainChangeProgressRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainChangeProgressRequest(arg0 *opensearchservice.DescribeDomainChangeProgressInput) (*request.Request, *opensearchservice.DescribeDomainChangeProgressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainChangeProgressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeDomainChangeProgressOutput)
	return ret0, ret1
}

// DescribeDomainChangeProgressRequest indicates an expected call of DescribeDomainChangeProgressRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainChangeProgressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainChangeProgressRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainChangeProgressRequest), arg0)
}

// DescribeDomainChangeProgressWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainChangeProgressWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeDomainChangeProgressInput, arg2 ...request.Option) (*opensearchservice.DescribeDomainChangeProgressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainChangeProgressWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainChangeProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainChangeProgressWithContext indicates an expected call of DescribeDomainChangeProgressWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainChangeProgressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainChangeProgressWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainChangeProgressWithContext), varargs...)
}

// DescribeDomainConfig mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainConfig(arg0 *opensearchservice.DescribeDomainConfigInput) (*opensearchservice.DescribeDomainConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainConfig", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainConfig indicates an expected call of DescribeDomainConfig.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainConfig", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainConfig), arg0)
}

// DescribeDomainConfigRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainConfigRequest(arg0 *opensearchservice.DescribeDomainConfigInput) (*request.Request, *opensearchservice.DescribeDomainConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeDomainConfigOutput)
	return ret0, ret1
}

// DescribeDomainConfigRequest indicates an expected call of DescribeDomainConfigRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainConfigRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainConfigRequest), arg0)
}

// DescribeDomainConfigWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainConfigWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeDomainConfigInput, arg2 ...request.Option) (*opensearchservice.DescribeDomainConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainConfigWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainConfigWithContext indicates an expected call of DescribeDomainConfigWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainConfigWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainConfigWithContext), varargs...)
}

// DescribeDomainRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainRequest(arg0 *opensearchservice.DescribeDomainInput) (*request.Request, *opensearchservice.DescribeDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeDomainOutput)
	return ret0, ret1
}

// DescribeDomainRequest indicates an expected call of DescribeDomainRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainRequest), arg0)
}

// DescribeDomainWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeDomainInput, arg2 ...request.Option) (*opensearchservice.DescribeDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainWithContext indicates an expected call of DescribeDomainWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainWithContext), varargs...)
}

// DescribeDomains mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomains(arg0 *opensearchservice.DescribeDomainsInput) (*opensearchservice.DescribeDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomains", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomains indicates an expected call of DescribeDomains.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomains", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomains), arg0)
}

// DescribeDomainsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainsRequest(arg0 *opensearchservice.DescribeDomainsInput) (*request.Request, *opensearchservice.DescribeDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeDomainsOutput)
	return ret0, ret1
}

// DescribeDomainsRequest indicates an expected call of DescribeDomainsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainsRequest), arg0)
}

// DescribeDomainsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeDomainsWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeDomainsInput, arg2 ...request.Option) (*opensearchservice.DescribeDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainsWithContext indicates an expected call of DescribeDomainsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeDomainsWithContext), varargs...)
}

// DescribeInboundConnections mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInboundConnections(arg0 *opensearchservice.DescribeInboundConnectionsInput) (*opensearchservice.DescribeInboundConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInboundConnections", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeInboundConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInboundConnections indicates an expected call of DescribeInboundConnections.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInboundConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInboundConnections", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInboundConnections), arg0)
}

// DescribeInboundConnectionsPages mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInboundConnectionsPages(arg0 *opensearchservice.DescribeInboundConnectionsInput, arg1 func(*opensearchservice.DescribeInboundConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInboundConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeInboundConnectionsPages indicates an expected call of DescribeInboundConnectionsPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInboundConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInboundConnectionsPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInboundConnectionsPages), arg0, arg1)
}

// DescribeInboundConnectionsPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInboundConnectionsPagesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeInboundConnectionsInput, arg2 func(*opensearchservice.DescribeInboundConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInboundConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeInboundConnectionsPagesWithContext indicates an expected call of DescribeInboundConnectionsPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInboundConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInboundConnectionsPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInboundConnectionsPagesWithContext), varargs...)
}

// DescribeInboundConnectionsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInboundConnectionsRequest(arg0 *opensearchservice.DescribeInboundConnectionsInput) (*request.Request, *opensearchservice.DescribeInboundConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInboundConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeInboundConnectionsOutput)
	return ret0, ret1
}

// DescribeInboundConnectionsRequest indicates an expected call of DescribeInboundConnectionsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInboundConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInboundConnectionsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInboundConnectionsRequest), arg0)
}

// DescribeInboundConnectionsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInboundConnectionsWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeInboundConnectionsInput, arg2 ...request.Option) (*opensearchservice.DescribeInboundConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInboundConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeInboundConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInboundConnectionsWithContext indicates an expected call of DescribeInboundConnectionsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInboundConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInboundConnectionsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInboundConnectionsWithContext), varargs...)
}

// DescribeInstanceTypeLimits mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInstanceTypeLimits(arg0 *opensearchservice.DescribeInstanceTypeLimitsInput) (*opensearchservice.DescribeInstanceTypeLimitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceTypeLimits", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeInstanceTypeLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceTypeLimits indicates an expected call of DescribeInstanceTypeLimits.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInstanceTypeLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceTypeLimits", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInstanceTypeLimits), arg0)
}

// DescribeInstanceTypeLimitsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInstanceTypeLimitsRequest(arg0 *opensearchservice.DescribeInstanceTypeLimitsInput) (*request.Request, *opensearchservice.DescribeInstanceTypeLimitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceTypeLimitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeInstanceTypeLimitsOutput)
	return ret0, ret1
}

// DescribeInstanceTypeLimitsRequest indicates an expected call of DescribeInstanceTypeLimitsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInstanceTypeLimitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceTypeLimitsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInstanceTypeLimitsRequest), arg0)
}

// DescribeInstanceTypeLimitsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeInstanceTypeLimitsWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeInstanceTypeLimitsInput, arg2 ...request.Option) (*opensearchservice.DescribeInstanceTypeLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceTypeLimitsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeInstanceTypeLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceTypeLimitsWithContext indicates an expected call of DescribeInstanceTypeLimitsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeInstanceTypeLimitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceTypeLimitsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeInstanceTypeLimitsWithContext), varargs...)
}

// DescribeOutboundConnections mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeOutboundConnections(arg0 *opensearchservice.DescribeOutboundConnectionsInput) (*opensearchservice.DescribeOutboundConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOutboundConnections", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeOutboundConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOutboundConnections indicates an expected call of DescribeOutboundConnections.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeOutboundConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOutboundConnections", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeOutboundConnections), arg0)
}

// DescribeOutboundConnectionsPages mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeOutboundConnectionsPages(arg0 *opensearchservice.DescribeOutboundConnectionsInput, arg1 func(*opensearchservice.DescribeOutboundConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOutboundConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOutboundConnectionsPages indicates an expected call of DescribeOutboundConnectionsPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeOutboundConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOutboundConnectionsPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeOutboundConnectionsPages), arg0, arg1)
}

// DescribeOutboundConnectionsPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeOutboundConnectionsPagesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeOutboundConnectionsInput, arg2 func(*opensearchservice.DescribeOutboundConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOutboundConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOutboundConnectionsPagesWithContext indicates an expected call of DescribeOutboundConnectionsPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeOutboundConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOutboundConnectionsPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeOutboundConnectionsPagesWithContext), varargs...)
}

// DescribeOutboundConnectionsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeOutboundConnectionsRequest(arg0 *opensearchservice.DescribeOutboundConnectionsInput) (*request.Request, *opensearchservice.DescribeOutboundConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOutboundConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeOutboundConnectionsOutput)
	return ret0, ret1
}

// DescribeOutboundConnectionsRequest indicates an expected call of DescribeOutboundConnectionsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeOutboundConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOutboundConnectionsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeOutboundConnectionsRequest), arg0)
}

// DescribeOutboundConnectionsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeOutboundConnectionsWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeOutboundConnectionsInput, arg2 ...request.Option) (*opensearchservice.DescribeOutboundConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOutboundConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeOutboundConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOutboundConnectionsWithContext indicates an expected call of DescribeOutboundConnectionsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeOutboundConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOutboundConnectionsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeOutboundConnectionsWithContext), varargs...)
}

// DescribePackages mocks base method.
func (m *MockOpenSearchServiceAPI) DescribePackages(arg0 *opensearchservice.DescribePackagesInput) (*opensearchservice.DescribePackagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackages", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribePackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackages indicates an expected call of DescribePackages.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribePackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribePackages), arg0)
}

// DescribePackagesPages mocks base method.
func (m *MockOpenSearchServiceAPI) DescribePackagesPages(arg0 *opensearchservice.DescribePackagesInput, arg1 func(*opensearchservice.DescribePackagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePackagesPages indicates an expected call of DescribePackagesPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribePackagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackagesPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribePackagesPages), arg0, arg1)
}

// DescribePackagesPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribePackagesPagesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribePackagesInput, arg2 func(*opensearchservice.DescribePackagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePackagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePackagesPagesWithContext indicates an expected call of DescribePackagesPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribePackagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackagesPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribePackagesPagesWithContext), varargs...)
}

// DescribePackagesRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribePackagesRequest(arg0 *opensearchservice.DescribePackagesInput) (*request.Request, *opensearchservice.DescribePackagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribePackagesOutput)
	return ret0, ret1
}

// DescribePackagesRequest indicates an expected call of DescribePackagesRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribePackagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackagesRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribePackagesRequest), arg0)
}

// DescribePackagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribePackagesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribePackagesInput, arg2 ...request.Option) (*opensearchservice.DescribePackagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePackagesWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribePackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackagesWithContext indicates an expected call of DescribePackagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribePackagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribePackagesWithContext), varargs...)
}

// DescribeReservedInstanceOfferings mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstanceOfferings(arg0 *opensearchservice.DescribeReservedInstanceOfferingsInput) (*opensearchservice.DescribeReservedInstanceOfferingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservedInstanceOfferings", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeReservedInstanceOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstanceOfferings indicates an expected call of DescribeReservedInstanceOfferings.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstanceOfferings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstanceOfferings", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstanceOfferings), arg0)
}

// DescribeReservedInstanceOfferingsPages mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstanceOfferingsPages(arg0 *opensearchservice.DescribeReservedInstanceOfferingsInput, arg1 func(*opensearchservice.DescribeReservedInstanceOfferingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservedInstanceOfferingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReservedInstanceOfferingsPages indicates an expected call of DescribeReservedInstanceOfferingsPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstanceOfferingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstanceOfferingsPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstanceOfferingsPages), arg0, arg1)
}

// DescribeReservedInstanceOfferingsPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstanceOfferingsPagesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeReservedInstanceOfferingsInput, arg2 func(*opensearchservice.DescribeReservedInstanceOfferingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstanceOfferingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReservedInstanceOfferingsPagesWithContext indicates an expected call of DescribeReservedInstanceOfferingsPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstanceOfferingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstanceOfferingsPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstanceOfferingsPagesWithContext), varargs...)
}

// DescribeReservedInstanceOfferingsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstanceOfferingsRequest(arg0 *opensearchservice.DescribeReservedInstanceOfferingsInput) (*request.Request, *opensearchservice.DescribeReservedInstanceOfferingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservedInstanceOfferingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeReservedInstanceOfferingsOutput)
	return ret0, ret1
}

// DescribeReservedInstanceOfferingsRequest indicates an expected call of DescribeReservedInstanceOfferingsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstanceOfferingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstanceOfferingsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstanceOfferingsRequest), arg0)
}

// DescribeReservedInstanceOfferingsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstanceOfferingsWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeReservedInstanceOfferingsInput, arg2 ...request.Option) (*opensearchservice.DescribeReservedInstanceOfferingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstanceOfferingsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeReservedInstanceOfferingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstanceOfferingsWithContext indicates an expected call of DescribeReservedInstanceOfferingsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstanceOfferingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstanceOfferingsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstanceOfferingsWithContext), varargs...)
}

// DescribeReservedInstances mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstances(arg0 *opensearchservice.DescribeReservedInstancesInput) (*opensearchservice.DescribeReservedInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservedInstances", arg0)
	ret0, _ := ret[0].(*opensearchservice.DescribeReservedInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstances indicates an expected call of DescribeReservedInstances.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstances", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstances), arg0)
}

// DescribeReservedInstancesPages mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstancesPages(arg0 *opensearchservice.DescribeReservedInstancesInput, arg1 func(*opensearchservice.DescribeReservedInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservedInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReservedInstancesPages indicates an expected call of DescribeReservedInstancesPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstancesPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstancesPages), arg0, arg1)
}

// DescribeReservedInstancesPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstancesPagesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeReservedInstancesInput, arg2 func(*opensearchservice.DescribeReservedInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReservedInstancesPagesWithContext indicates an expected call of DescribeReservedInstancesPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstancesPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstancesPagesWithContext), varargs...)
}

// DescribeReservedInstancesRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstancesRequest(arg0 *opensearchservice.DescribeReservedInstancesInput) (*request.Request, *opensearchservice.DescribeReservedInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReservedInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DescribeReservedInstancesOutput)
	return ret0, ret1
}

// DescribeReservedInstancesRequest indicates an expected call of DescribeReservedInstancesRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstancesRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstancesRequest), arg0)
}

// DescribeReservedInstancesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DescribeReservedInstancesWithContext(arg0 context.Context, arg1 *opensearchservice.DescribeReservedInstancesInput, arg2 ...request.Option) (*opensearchservice.DescribeReservedInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReservedInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DescribeReservedInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReservedInstancesWithContext indicates an expected call of DescribeReservedInstancesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DescribeReservedInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReservedInstancesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DescribeReservedInstancesWithContext), varargs...)
}

// DissociatePackage mocks base method.
func (m *MockOpenSearchServiceAPI) DissociatePackage(arg0 *opensearchservice.DissociatePackageInput) (*opensearchservice.DissociatePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DissociatePackage", arg0)
	ret0, _ := ret[0].(*opensearchservice.DissociatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DissociatePackage indicates an expected call of DissociatePackage.
func (mr *MockOpenSearchServiceAPIMockRecorder) DissociatePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociatePackage", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DissociatePackage), arg0)
}

// DissociatePackageRequest mocks base method.
func (m *MockOpenSearchServiceAPI) DissociatePackageRequest(arg0 *opensearchservice.DissociatePackageInput) (*request.Request, *opensearchservice.DissociatePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DissociatePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.DissociatePackageOutput)
	return ret0, ret1
}

// DissociatePackageRequest indicates an expected call of DissociatePackageRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) DissociatePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociatePackageRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DissociatePackageRequest), arg0)
}

// DissociatePackageWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) DissociatePackageWithContext(arg0 context.Context, arg1 *opensearchservice.DissociatePackageInput, arg2 ...request.Option) (*opensearchservice.DissociatePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DissociatePackageWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.DissociatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DissociatePackageWithContext indicates an expected call of DissociatePackageWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) DissociatePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociatePackageWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).DissociatePackageWithContext), varargs...)
}

// GetCompatibleVersions mocks base method.
func (m *MockOpenSearchServiceAPI) GetCompatibleVersions(arg0 *opensearchservice.GetCompatibleVersionsInput) (*opensearchservice.GetCompatibleVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompatibleVersions", arg0)
	ret0, _ := ret[0].(*opensearchservice.GetCompatibleVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibleVersions indicates an expected call of GetCompatibleVersions.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetCompatibleVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibleVersions", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetCompatibleVersions), arg0)
}

// GetCompatibleVersionsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) GetCompatibleVersionsRequest(arg0 *opensearchservice.GetCompatibleVersionsInput) (*request.Request, *opensearchservice.GetCompatibleVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompatibleVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.GetCompatibleVersionsOutput)
	return ret0, ret1
}

// GetCompatibleVersionsRequest indicates an expected call of GetCompatibleVersionsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetCompatibleVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibleVersionsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetCompatibleVersionsRequest), arg0)
}

// GetCompatibleVersionsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) GetCompatibleVersionsWithContext(arg0 context.Context, arg1 *opensearchservice.GetCompatibleVersionsInput, arg2 ...request.Option) (*opensearchservice.GetCompatibleVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompatibleVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.GetCompatibleVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibleVersionsWithContext indicates an expected call of GetCompatibleVersionsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetCompatibleVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibleVersionsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetCompatibleVersionsWithContext), varargs...)
}

// GetPackageVersionHistory mocks base method.
func (m *MockOpenSearchServiceAPI) GetPackageVersionHistory(arg0 *opensearchservice.GetPackageVersionHistoryInput) (*opensearchservice.GetPackageVersionHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersionHistory", arg0)
	ret0, _ := ret[0].(*opensearchservice.GetPackageVersionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersionHistory indicates an expected call of GetPackageVersionHistory.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetPackageVersionHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionHistory", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetPackageVersionHistory), arg0)
}

// GetPackageVersionHistoryPages mocks base method.
func (m *MockOpenSearchServiceAPI) GetPackageVersionHistoryPages(arg0 *opensearchservice.GetPackageVersionHistoryInput, arg1 func(*opensearchservice.GetPackageVersionHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersionHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPackageVersionHistoryPages indicates an expected call of GetPackageVersionHistoryPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetPackageVersionHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionHistoryPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetPackageVersionHistoryPages), arg0, arg1)
}

// GetPackageVersionHistoryPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) GetPackageVersionHistoryPagesWithContext(arg0 context.Context, arg1 *opensearchservice.GetPackageVersionHistoryInput, arg2 func(*opensearchservice.GetPackageVersionHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPackageVersionHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPackageVersionHistoryPagesWithContext indicates an expected call of GetPackageVersionHistoryPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetPackageVersionHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionHistoryPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetPackageVersionHistoryPagesWithContext), varargs...)
}

// GetPackageVersionHistoryRequest mocks base method.
func (m *MockOpenSearchServiceAPI) GetPackageVersionHistoryRequest(arg0 *opensearchservice.GetPackageVersionHistoryInput) (*request.Request, *opensearchservice.GetPackageVersionHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersionHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.GetPackageVersionHistoryOutput)
	return ret0, ret1
}

// GetPackageVersionHistoryRequest indicates an expected call of GetPackageVersionHistoryRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetPackageVersionHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionHistoryRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetPackageVersionHistoryRequest), arg0)
}

// GetPackageVersionHistoryWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) GetPackageVersionHistoryWithContext(arg0 context.Context, arg1 *opensearchservice.GetPackageVersionHistoryInput, arg2 ...request.Option) (*opensearchservice.GetPackageVersionHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPackageVersionHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.GetPackageVersionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersionHistoryWithContext indicates an expected call of GetPackageVersionHistoryWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetPackageVersionHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionHistoryWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetPackageVersionHistoryWithContext), varargs...)
}

// GetUpgradeHistory mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeHistory(arg0 *opensearchservice.GetUpgradeHistoryInput) (*opensearchservice.GetUpgradeHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeHistory", arg0)
	ret0, _ := ret[0].(*opensearchservice.GetUpgradeHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeHistory indicates an expected call of GetUpgradeHistory.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeHistory", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeHistory), arg0)
}

// GetUpgradeHistoryPages mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeHistoryPages(arg0 *opensearchservice.GetUpgradeHistoryInput, arg1 func(*opensearchservice.GetUpgradeHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUpgradeHistoryPages indicates an expected call of GetUpgradeHistoryPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeHistoryPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeHistoryPages), arg0, arg1)
}

// GetUpgradeHistoryPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeHistoryPagesWithContext(arg0 context.Context, arg1 *opensearchservice.GetUpgradeHistoryInput, arg2 func(*opensearchservice.GetUpgradeHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpgradeHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUpgradeHistoryPagesWithContext indicates an expected call of GetUpgradeHistoryPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeHistoryPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeHistoryPagesWithContext), varargs...)
}

// GetUpgradeHistoryRequest mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeHistoryRequest(arg0 *opensearchservice.GetUpgradeHistoryInput) (*request.Request, *opensearchservice.GetUpgradeHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.GetUpgradeHistoryOutput)
	return ret0, ret1
}

// GetUpgradeHistoryRequest indicates an expected call of GetUpgradeHistoryRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeHistoryRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeHistoryRequest), arg0)
}

// GetUpgradeHistoryWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeHistoryWithContext(arg0 context.Context, arg1 *opensearchservice.GetUpgradeHistoryInput, arg2 ...request.Option) (*opensearchservice.GetUpgradeHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpgradeHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.GetUpgradeHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeHistoryWithContext indicates an expected call of GetUpgradeHistoryWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeHistoryWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeHistoryWithContext), varargs...)
}

// GetUpgradeStatus mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeStatus(arg0 *opensearchservice.GetUpgradeStatusInput) (*opensearchservice.GetUpgradeStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeStatus", arg0)
	ret0, _ := ret[0].(*opensearchservice.GetUpgradeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeStatus indicates an expected call of GetUpgradeStatus.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeStatus", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeStatus), arg0)
}

// GetUpgradeStatusRequest mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeStatusRequest(arg0 *opensearchservice.GetUpgradeStatusInput) (*request.Request, *opensearchservice.GetUpgradeStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.GetUpgradeStatusOutput)
	return ret0, ret1
}

// GetUpgradeStatusRequest indicates an expected call of GetUpgradeStatusRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeStatusRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeStatusRequest), arg0)
}

// GetUpgradeStatusWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) GetUpgradeStatusWithContext(arg0 context.Context, arg1 *opensearchservice.GetUpgradeStatusInput, arg2 ...request.Option) (*opensearchservice.GetUpgradeStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpgradeStatusWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.GetUpgradeStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeStatusWithContext indicates an expected call of GetUpgradeStatusWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) GetUpgradeStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeStatusWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).GetUpgradeStatusWithContext), varargs...)
}

// ListDomainNames mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainNames(arg0 *opensearchservice.ListDomainNamesInput) (*opensearchservice.ListDomainNamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainNames", arg0)
	ret0, _ := ret[0].(*opensearchservice.ListDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainNames indicates an expected call of ListDomainNames.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainNames", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainNames), arg0)
}

// ListDomainNamesRequest mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainNamesRequest(arg0 *opensearchservice.ListDomainNamesInput) (*request.Request, *opensearchservice.ListDomainNamesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainNamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.ListDomainNamesOutput)
	return ret0, ret1
}

// ListDomainNamesRequest indicates an expected call of ListDomainNamesRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainNamesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainNamesRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainNamesRequest), arg0)
}

// ListDomainNamesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainNamesWithContext(arg0 context.Context, arg1 *opensearchservice.ListDomainNamesInput, arg2 ...request.Option) (*opensearchservice.ListDomainNamesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainNamesWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.ListDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainNamesWithContext indicates an expected call of ListDomainNamesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainNamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainNamesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainNamesWithContext), varargs...)
}

// ListDomainsForPackage mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainsForPackage(arg0 *opensearchservice.ListDomainsForPackageInput) (*opensearchservice.ListDomainsForPackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsForPackage", arg0)
	ret0, _ := ret[0].(*opensearchservice.ListDomainsForPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsForPackage indicates an expected call of ListDomainsForPackage.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainsForPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsForPackage", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainsForPackage), arg0)
}

// ListDomainsForPackagePages mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainsForPackagePages(arg0 *opensearchservice.ListDomainsForPackageInput, arg1 func(*opensearchservice.ListDomainsForPackageOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsForPackagePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsForPackagePages indicates an expected call of ListDomainsForPackagePages.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainsForPackagePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsForPackagePages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainsForPackagePages), arg0, arg1)
}

// ListDomainsForPackagePagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainsForPackagePagesWithContext(arg0 context.Context, arg1 *opensearchservice.ListDomainsForPackageInput, arg2 func(*opensearchservice.ListDomainsForPackageOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsForPackagePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsForPackagePagesWithContext indicates an expected call of ListDomainsForPackagePagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainsForPackagePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsForPackagePagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainsForPackagePagesWithContext), varargs...)
}

// ListDomainsForPackageRequest mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainsForPackageRequest(arg0 *opensearchservice.ListDomainsForPackageInput) (*request.Request, *opensearchservice.ListDomainsForPackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsForPackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.ListDomainsForPackageOutput)
	return ret0, ret1
}

// ListDomainsForPackageRequest indicates an expected call of ListDomainsForPackageRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainsForPackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsForPackageRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainsForPackageRequest), arg0)
}

// ListDomainsForPackageWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListDomainsForPackageWithContext(arg0 context.Context, arg1 *opensearchservice.ListDomainsForPackageInput, arg2 ...request.Option) (*opensearchservice.ListDomainsForPackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsForPackageWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.ListDomainsForPackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsForPackageWithContext indicates an expected call of ListDomainsForPackageWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListDomainsForPackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsForPackageWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListDomainsForPackageWithContext), varargs...)
}

// ListInstanceTypeDetails mocks base method.
func (m *MockOpenSearchServiceAPI) ListInstanceTypeDetails(arg0 *opensearchservice.ListInstanceTypeDetailsInput) (*opensearchservice.ListInstanceTypeDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceTypeDetails", arg0)
	ret0, _ := ret[0].(*opensearchservice.ListInstanceTypeDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceTypeDetails indicates an expected call of ListInstanceTypeDetails.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListInstanceTypeDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceTypeDetails", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListInstanceTypeDetails), arg0)
}

// ListInstanceTypeDetailsPages mocks base method.
func (m *MockOpenSearchServiceAPI) ListInstanceTypeDetailsPages(arg0 *opensearchservice.ListInstanceTypeDetailsInput, arg1 func(*opensearchservice.ListInstanceTypeDetailsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceTypeDetailsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstanceTypeDetailsPages indicates an expected call of ListInstanceTypeDetailsPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListInstanceTypeDetailsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceTypeDetailsPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListInstanceTypeDetailsPages), arg0, arg1)
}

// ListInstanceTypeDetailsPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListInstanceTypeDetailsPagesWithContext(arg0 context.Context, arg1 *opensearchservice.ListInstanceTypeDetailsInput, arg2 func(*opensearchservice.ListInstanceTypeDetailsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceTypeDetailsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstanceTypeDetailsPagesWithContext indicates an expected call of ListInstanceTypeDetailsPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListInstanceTypeDetailsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceTypeDetailsPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListInstanceTypeDetailsPagesWithContext), varargs...)
}

// ListInstanceTypeDetailsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) ListInstanceTypeDetailsRequest(arg0 *opensearchservice.ListInstanceTypeDetailsInput) (*request.Request, *opensearchservice.ListInstanceTypeDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceTypeDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.ListInstanceTypeDetailsOutput)
	return ret0, ret1
}

// ListInstanceTypeDetailsRequest indicates an expected call of ListInstanceTypeDetailsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListInstanceTypeDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceTypeDetailsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListInstanceTypeDetailsRequest), arg0)
}

// ListInstanceTypeDetailsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListInstanceTypeDetailsWithContext(arg0 context.Context, arg1 *opensearchservice.ListInstanceTypeDetailsInput, arg2 ...request.Option) (*opensearchservice.ListInstanceTypeDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceTypeDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.ListInstanceTypeDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceTypeDetailsWithContext indicates an expected call of ListInstanceTypeDetailsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListInstanceTypeDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceTypeDetailsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListInstanceTypeDetailsWithContext), varargs...)
}

// ListPackagesForDomain mocks base method.
func (m *MockOpenSearchServiceAPI) ListPackagesForDomain(arg0 *opensearchservice.ListPackagesForDomainInput) (*opensearchservice.ListPackagesForDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackagesForDomain", arg0)
	ret0, _ := ret[0].(*opensearchservice.ListPackagesForDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackagesForDomain indicates an expected call of ListPackagesForDomain.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListPackagesForDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesForDomain", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListPackagesForDomain), arg0)
}

// ListPackagesForDomainPages mocks base method.
func (m *MockOpenSearchServiceAPI) ListPackagesForDomainPages(arg0 *opensearchservice.ListPackagesForDomainInput, arg1 func(*opensearchservice.ListPackagesForDomainOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackagesForDomainPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPackagesForDomainPages indicates an expected call of ListPackagesForDomainPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListPackagesForDomainPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesForDomainPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListPackagesForDomainPages), arg0, arg1)
}

// ListPackagesForDomainPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListPackagesForDomainPagesWithContext(arg0 context.Context, arg1 *opensearchservice.ListPackagesForDomainInput, arg2 func(*opensearchservice.ListPackagesForDomainOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackagesForDomainPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPackagesForDomainPagesWithContext indicates an expected call of ListPackagesForDomainPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListPackagesForDomainPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesForDomainPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListPackagesForDomainPagesWithContext), varargs...)
}

// ListPackagesForDomainRequest mocks base method.
func (m *MockOpenSearchServiceAPI) ListPackagesForDomainRequest(arg0 *opensearchservice.ListPackagesForDomainInput) (*request.Request, *opensearchservice.ListPackagesForDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackagesForDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.ListPackagesForDomainOutput)
	return ret0, ret1
}

// ListPackagesForDomainRequest indicates an expected call of ListPackagesForDomainRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListPackagesForDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesForDomainRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListPackagesForDomainRequest), arg0)
}

// ListPackagesForDomainWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListPackagesForDomainWithContext(arg0 context.Context, arg1 *opensearchservice.ListPackagesForDomainInput, arg2 ...request.Option) (*opensearchservice.ListPackagesForDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackagesForDomainWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.ListPackagesForDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackagesForDomainWithContext indicates an expected call of ListPackagesForDomainWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListPackagesForDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesForDomainWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListPackagesForDomainWithContext), varargs...)
}

// ListTags mocks base method.
func (m *MockOpenSearchServiceAPI) ListTags(arg0 *opensearchservice.ListTagsInput) (*opensearchservice.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*opensearchservice.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListTags), arg0)
}

// ListTagsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) ListTagsRequest(arg0 *opensearchservice.ListTagsInput) (*request.Request, *opensearchservice.ListTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListTagsWithContext(arg0 context.Context, arg1 *opensearchservice.ListTagsInput, arg2 ...request.Option) (*opensearchservice.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListTagsWithContext), varargs...)
}

// ListVersions mocks base method.
func (m *MockOpenSearchServiceAPI) ListVersions(arg0 *opensearchservice.ListVersionsInput) (*opensearchservice.ListVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions", arg0)
	ret0, _ := ret[0].(*opensearchservice.ListVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListVersions), arg0)
}

// ListVersionsPages mocks base method.
func (m *MockOpenSearchServiceAPI) ListVersionsPages(arg0 *opensearchservice.ListVersionsInput, arg1 func(*opensearchservice.ListVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVersionsPages indicates an expected call of ListVersionsPages.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsPages", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListVersionsPages), arg0, arg1)
}

// ListVersionsPagesWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListVersionsPagesWithContext(arg0 context.Context, arg1 *opensearchservice.ListVersionsInput, arg2 func(*opensearchservice.ListVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVersionsPagesWithContext indicates an expected call of ListVersionsPagesWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsPagesWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListVersionsPagesWithContext), varargs...)
}

// ListVersionsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) ListVersionsRequest(arg0 *opensearchservice.ListVersionsInput) (*request.Request, *opensearchservice.ListVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.ListVersionsOutput)
	return ret0, ret1
}

// ListVersionsRequest indicates an expected call of ListVersionsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListVersionsRequest), arg0)
}

// ListVersionsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) ListVersionsWithContext(arg0 context.Context, arg1 *opensearchservice.ListVersionsInput, arg2 ...request.Option) (*opensearchservice.ListVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.ListVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersionsWithContext indicates an expected call of ListVersionsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) ListVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersionsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).ListVersionsWithContext), varargs...)
}

// PurchaseReservedInstanceOffering mocks base method.
func (m *MockOpenSearchServiceAPI) PurchaseReservedInstanceOffering(arg0 *opensearchservice.PurchaseReservedInstanceOfferingInput) (*opensearchservice.PurchaseReservedInstanceOfferingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseReservedInstanceOffering", arg0)
	ret0, _ := ret[0].(*opensearchservice.PurchaseReservedInstanceOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseReservedInstanceOffering indicates an expected call of PurchaseReservedInstanceOffering.
func (mr *MockOpenSearchServiceAPIMockRecorder) PurchaseReservedInstanceOffering(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseReservedInstanceOffering", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).PurchaseReservedInstanceOffering), arg0)
}

// PurchaseReservedInstanceOfferingRequest mocks base method.
func (m *MockOpenSearchServiceAPI) PurchaseReservedInstanceOfferingRequest(arg0 *opensearchservice.PurchaseReservedInstanceOfferingInput) (*request.Request, *opensearchservice.PurchaseReservedInstanceOfferingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseReservedInstanceOfferingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.PurchaseReservedInstanceOfferingOutput)
	return ret0, ret1
}

// PurchaseReservedInstanceOfferingRequest indicates an expected call of PurchaseReservedInstanceOfferingRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) PurchaseReservedInstanceOfferingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseReservedInstanceOfferingRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).PurchaseReservedInstanceOfferingRequest), arg0)
}

// PurchaseReservedInstanceOfferingWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) PurchaseReservedInstanceOfferingWithContext(arg0 context.Context, arg1 *opensearchservice.PurchaseReservedInstanceOfferingInput, arg2 ...request.Option) (*opensearchservice.PurchaseReservedInstanceOfferingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurchaseReservedInstanceOfferingWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.PurchaseReservedInstanceOfferingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseReservedInstanceOfferingWithContext indicates an expected call of PurchaseReservedInstanceOfferingWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) PurchaseReservedInstanceOfferingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseReservedInstanceOfferingWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).PurchaseReservedInstanceOfferingWithContext), varargs...)
}

// RejectInboundConnection mocks base method.
func (m *MockOpenSearchServiceAPI) RejectInboundConnection(arg0 *opensearchservice.RejectInboundConnectionInput) (*opensearchservice.RejectInboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInboundConnection", arg0)
	ret0, _ := ret[0].(*opensearchservice.RejectInboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInboundConnection indicates an expected call of RejectInboundConnection.
func (mr *MockOpenSearchServiceAPIMockRecorder) RejectInboundConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInboundConnection", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).RejectInboundConnection), arg0)
}

// RejectInboundConnectionRequest mocks base method.
func (m *MockOpenSearchServiceAPI) RejectInboundConnectionRequest(arg0 *opensearchservice.RejectInboundConnectionInput) (*request.Request, *opensearchservice.RejectInboundConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInboundConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.RejectInboundConnectionOutput)
	return ret0, ret1
}

// RejectInboundConnectionRequest indicates an expected call of RejectInboundConnectionRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) RejectInboundConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInboundConnectionRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).RejectInboundConnectionRequest), arg0)
}

// RejectInboundConnectionWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) RejectInboundConnectionWithContext(arg0 context.Context, arg1 *opensearchservice.RejectInboundConnectionInput, arg2 ...request.Option) (*opensearchservice.RejectInboundConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectInboundConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.RejectInboundConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInboundConnectionWithContext indicates an expected call of RejectInboundConnectionWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) RejectInboundConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInboundConnectionWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).RejectInboundConnectionWithContext), varargs...)
}

// RemoveTags mocks base method.
func (m *MockOpenSearchServiceAPI) RemoveTags(arg0 *opensearchservice.RemoveTagsInput) (*opensearchservice.RemoveTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTags", arg0)
	ret0, _ := ret[0].(*opensearchservice.RemoveTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTags indicates an expected call of RemoveTags.
func (mr *MockOpenSearchServiceAPIMockRecorder) RemoveTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTags", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).RemoveTags), arg0)
}

// RemoveTagsRequest mocks base method.
func (m *MockOpenSearchServiceAPI) RemoveTagsRequest(arg0 *opensearchservice.RemoveTagsInput) (*request.Request, *opensearchservice.RemoveTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.RemoveTagsOutput)
	return ret0, ret1
}

// RemoveTagsRequest indicates an expected call of RemoveTagsRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) RemoveTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).RemoveTagsRequest), arg0)
}

// RemoveTagsWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) RemoveTagsWithContext(arg0 context.Context, arg1 *opensearchservice.RemoveTagsInput, arg2 ...request.Option) (*opensearchservice.RemoveTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.RemoveTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsWithContext indicates an expected call of RemoveTagsWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) RemoveTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).RemoveTagsWithContext), varargs...)
}

// StartServiceSoftwareUpdate mocks base method.
func (m *MockOpenSearchServiceAPI) StartServiceSoftwareUpdate(arg0 *opensearchservice.StartServiceSoftwareUpdateInput) (*opensearchservice.StartServiceSoftwareUpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServiceSoftwareUpdate", arg0)
	ret0, _ := ret[0].(*opensearchservice.StartServiceSoftwareUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartServiceSoftwareUpdate indicates an expected call of StartServiceSoftwareUpdate.
func (mr *MockOpenSearchServiceAPIMockRecorder) StartServiceSoftwareUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServiceSoftwareUpdate", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).StartServiceSoftwareUpdate), arg0)
}

// StartServiceSoftwareUpdateRequest mocks base method.
func (m *MockOpenSearchServiceAPI) StartServiceSoftwareUpdateRequest(arg0 *opensearchservice.StartServiceSoftwareUpdateInput) (*request.Request, *opensearchservice.StartServiceSoftwareUpdateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServiceSoftwareUpdateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.StartServiceSoftwareUpdateOutput)
	return ret0, ret1
}

// StartServiceSoftwareUpdateRequest indicates an expected call of StartServiceSoftwareUpdateRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) StartServiceSoftwareUpdateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServiceSoftwareUpdateRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).StartServiceSoftwareUpdateRequest), arg0)
}

// StartServiceSoftwareUpdateWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) StartServiceSoftwareUpdateWithContext(arg0 context.Context, arg1 *opensearchservice.StartServiceSoftwareUpdateInput, arg2 ...request.Option) (*opensearchservice.StartServiceSoftwareUpdateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartServiceSoftwareUpdateWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.StartServiceSoftwareUpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartServiceSoftwareUpdateWithContext indicates an expected call of StartServiceSoftwareUpdateWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) StartServiceSoftwareUpdateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServiceSoftwareUpdateWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).StartServiceSoftwareUpdateWithContext), varargs...)
}

// UpdateDomainConfig mocks base method.
func (m *MockOpenSearchServiceAPI) UpdateDomainConfig(arg0 *opensearchservice.UpdateDomainConfigInput) (*opensearchservice.UpdateDomainConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainConfig", arg0)
	ret0, _ := ret[0].(*opensearchservice.UpdateDomainConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainConfig indicates an expected call of UpdateDomainConfig.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpdateDomainConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainConfig", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpdateDomainConfig), arg0)
}

// UpdateDomainConfigRequest mocks base method.
func (m *MockOpenSearchServiceAPI) UpdateDomainConfigRequest(arg0 *opensearchservice.UpdateDomainConfigInput) (*request.Request, *opensearchservice.UpdateDomainConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.UpdateDomainConfigOutput)
	return ret0, ret1
}

// UpdateDomainConfigRequest indicates an expected call of UpdateDomainConfigRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpdateDomainConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainConfigRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpdateDomainConfigRequest), arg0)
}

// UpdateDomainConfigWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) UpdateDomainConfigWithContext(arg0 context.Context, arg1 *opensearchservice.UpdateDomainConfigInput, arg2 ...request.Option) (*opensearchservice.UpdateDomainConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainConfigWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.UpdateDomainConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainConfigWithContext indicates an expected call of UpdateDomainConfigWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpdateDomainConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainConfigWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpdateDomainConfigWithContext), varargs...)
}

// UpdatePackage mocks base method.
func (m *MockOpenSearchServiceAPI) UpdatePackage(arg0 *opensearchservice.UpdatePackageInput) (*opensearchservice.UpdatePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackage", arg0)
	ret0, _ := ret[0].(*opensearchservice.UpdatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackage indicates an expected call of UpdatePackage.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpdatePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackage", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpdatePackage), arg0)
}

// UpdatePackageRequest mocks base method.
func (m *MockOpenSearchServiceAPI) UpdatePackageRequest(arg0 *opensearchservice.UpdatePackageInput) (*request.Request, *opensearchservice.UpdatePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.UpdatePackageOutput)
	return ret0, ret1
}

// UpdatePackageRequest indicates an expected call of UpdatePackageRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpdatePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackageRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpdatePackageRequest), arg0)
}

// UpdatePackageWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) UpdatePackageWithContext(arg0 context.Context, arg1 *opensearchservice.UpdatePackageInput, arg2 ...request.Option) (*opensearchservice.UpdatePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePackageWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.UpdatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackageWithContext indicates an expected call of UpdatePackageWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpdatePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackageWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpdatePackageWithContext), varargs...)
}

// UpgradeDomain mocks base method.
func (m *MockOpenSearchServiceAPI) UpgradeDomain(arg0 *opensearchservice.UpgradeDomainInput) (*opensearchservice.UpgradeDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeDomain", arg0)
	ret0, _ := ret[0].(*opensearchservice.UpgradeDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeDomain indicates an expected call of UpgradeDomain.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpgradeDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeDomain", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpgradeDomain), arg0)
}

// UpgradeDomainRequest mocks base method.
func (m *MockOpenSearchServiceAPI) UpgradeDomainRequest(arg0 *opensearchservice.UpgradeDomainInput) (*request.Request, *opensearchservice.UpgradeDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opensearchservice.UpgradeDomainOutput)
	return ret0, ret1
}

// UpgradeDomainRequest indicates an expected call of UpgradeDomainRequest.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpgradeDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeDomainRequest", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpgradeDomainRequest), arg0)
}

// UpgradeDomainWithContext mocks base method.
func (m *MockOpenSearchServiceAPI) UpgradeDomainWithContext(arg0 context.Context, arg1 *opensearchservice.UpgradeDomainInput, arg2 ...request.Option) (*opensearchservice.UpgradeDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeDomainWithContext", varargs...)
	ret0, _ := ret[0].(*opensearchservice.UpgradeDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeDomainWithContext indicates an expected call of UpgradeDomainWithContext.
func (mr *MockOpenSearchServiceAPIMockRecorder) UpgradeDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeDomainWithContext", reflect.TypeOf((*MockOpenSearchServiceAPI)(nil).UpgradeDomainWithContext), varargs...)
}

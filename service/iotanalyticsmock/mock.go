// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotanalytics/iotanalyticsiface (interfaces: IoTAnalyticsAPI)

// Package iotanalyticsmock is a generated GoMock package.
package iotanalyticsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	iotanalytics "github.com/aws/aws-sdk-go/service/iotanalytics"
	gomock "github.com/golang/mock/gomock"
)

// MockIoTAnalyticsAPI is a mock of IoTAnalyticsAPI interface.
type MockIoTAnalyticsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTAnalyticsAPIMockRecorder
}

// MockIoTAnalyticsAPIMockRecorder is the mock recorder for MockIoTAnalyticsAPI.
type MockIoTAnalyticsAPIMockRecorder struct {
	mock *MockIoTAnalyticsAPI
}

// NewMockIoTAnalyticsAPI creates a new mock instance.
func NewMockIoTAnalyticsAPI(ctrl *gomock.Controller) *MockIoTAnalyticsAPI {
	mock := &MockIoTAnalyticsAPI{ctrl: ctrl}
	mock.recorder = &MockIoTAnalyticsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoTAnalyticsAPI) EXPECT() *MockIoTAnalyticsAPIMockRecorder {
	return m.recorder
}

// BatchPutMessage mocks base method.
func (m *MockIoTAnalyticsAPI) BatchPutMessage(arg0 *iotanalytics.BatchPutMessageInput) (*iotanalytics.BatchPutMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutMessage", arg0)
	ret0, _ := ret[0].(*iotanalytics.BatchPutMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutMessage indicates an expected call of BatchPutMessage.
func (mr *MockIoTAnalyticsAPIMockRecorder) BatchPutMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutMessage", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).BatchPutMessage), arg0)
}

// BatchPutMessageRequest mocks base method.
func (m *MockIoTAnalyticsAPI) BatchPutMessageRequest(arg0 *iotanalytics.BatchPutMessageInput) (*request.Request, *iotanalytics.BatchPutMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.BatchPutMessageOutput)
	return ret0, ret1
}

// BatchPutMessageRequest indicates an expected call of BatchPutMessageRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) BatchPutMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutMessageRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).BatchPutMessageRequest), arg0)
}

// BatchPutMessageWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) BatchPutMessageWithContext(arg0 context.Context, arg1 *iotanalytics.BatchPutMessageInput, arg2 ...request.Option) (*iotanalytics.BatchPutMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutMessageWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.BatchPutMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutMessageWithContext indicates an expected call of BatchPutMessageWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) BatchPutMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutMessageWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).BatchPutMessageWithContext), varargs...)
}

// CancelPipelineReprocessing mocks base method.
func (m *MockIoTAnalyticsAPI) CancelPipelineReprocessing(arg0 *iotanalytics.CancelPipelineReprocessingInput) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPipelineReprocessing", arg0)
	ret0, _ := ret[0].(*iotanalytics.CancelPipelineReprocessingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelPipelineReprocessing indicates an expected call of CancelPipelineReprocessing.
func (mr *MockIoTAnalyticsAPIMockRecorder) CancelPipelineReprocessing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPipelineReprocessing", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CancelPipelineReprocessing), arg0)
}

// CancelPipelineReprocessingRequest mocks base method.
func (m *MockIoTAnalyticsAPI) CancelPipelineReprocessingRequest(arg0 *iotanalytics.CancelPipelineReprocessingInput) (*request.Request, *iotanalytics.CancelPipelineReprocessingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPipelineReprocessingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.CancelPipelineReprocessingOutput)
	return ret0, ret1
}

// CancelPipelineReprocessingRequest indicates an expected call of CancelPipelineReprocessingRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) CancelPipelineReprocessingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPipelineReprocessingRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CancelPipelineReprocessingRequest), arg0)
}

// CancelPipelineReprocessingWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) CancelPipelineReprocessingWithContext(arg0 context.Context, arg1 *iotanalytics.CancelPipelineReprocessingInput, arg2 ...request.Option) (*iotanalytics.CancelPipelineReprocessingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelPipelineReprocessingWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.CancelPipelineReprocessingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelPipelineReprocessingWithContext indicates an expected call of CancelPipelineReprocessingWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) CancelPipelineReprocessingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPipelineReprocessingWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CancelPipelineReprocessingWithContext), varargs...)
}

// CreateChannel mocks base method.
func (m *MockIoTAnalyticsAPI) CreateChannel(arg0 *iotanalytics.CreateChannelInput) (*iotanalytics.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*iotanalytics.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateChannel), arg0)
}

// CreateChannelRequest mocks base method.
func (m *MockIoTAnalyticsAPI) CreateChannelRequest(arg0 *iotanalytics.CreateChannelInput) (*request.Request, *iotanalytics.CreateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.CreateChannelOutput)
	return ret0, ret1
}

// CreateChannelRequest indicates an expected call of CreateChannelRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateChannelRequest), arg0)
}

// CreateChannelWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) CreateChannelWithContext(arg0 context.Context, arg1 *iotanalytics.CreateChannelInput, arg2 ...request.Option) (*iotanalytics.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelWithContext indicates an expected call of CreateChannelWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateChannelWithContext), varargs...)
}

// CreateDataset mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDataset(arg0 *iotanalytics.CreateDatasetInput) (*iotanalytics.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0)
	ret0, _ := ret[0].(*iotanalytics.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDataset), arg0)
}

// CreateDatasetContent mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatasetContent(arg0 *iotanalytics.CreateDatasetContentInput) (*iotanalytics.CreateDatasetContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetContent", arg0)
	ret0, _ := ret[0].(*iotanalytics.CreateDatasetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetContent indicates an expected call of CreateDatasetContent.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatasetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetContent", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatasetContent), arg0)
}

// CreateDatasetContentRequest mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatasetContentRequest(arg0 *iotanalytics.CreateDatasetContentInput) (*request.Request, *iotanalytics.CreateDatasetContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.CreateDatasetContentOutput)
	return ret0, ret1
}

// CreateDatasetContentRequest indicates an expected call of CreateDatasetContentRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatasetContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetContentRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatasetContentRequest), arg0)
}

// CreateDatasetContentWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatasetContentWithContext(arg0 context.Context, arg1 *iotanalytics.CreateDatasetContentInput, arg2 ...request.Option) (*iotanalytics.CreateDatasetContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetContentWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.CreateDatasetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetContentWithContext indicates an expected call of CreateDatasetContentWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatasetContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetContentWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatasetContentWithContext), varargs...)
}

// CreateDatasetRequest mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatasetRequest(arg0 *iotanalytics.CreateDatasetInput) (*request.Request, *iotanalytics.CreateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.CreateDatasetOutput)
	return ret0, ret1
}

// CreateDatasetRequest indicates an expected call of CreateDatasetRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatasetRequest), arg0)
}

// CreateDatasetWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatasetWithContext(arg0 context.Context, arg1 *iotanalytics.CreateDatasetInput, arg2 ...request.Option) (*iotanalytics.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetWithContext indicates an expected call of CreateDatasetWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatasetWithContext), varargs...)
}

// CreateDatastore mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatastore(arg0 *iotanalytics.CreateDatastoreInput) (*iotanalytics.CreateDatastoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatastore", arg0)
	ret0, _ := ret[0].(*iotanalytics.CreateDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatastore indicates an expected call of CreateDatastore.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatastore", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatastore), arg0)
}

// CreateDatastoreRequest mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatastoreRequest(arg0 *iotanalytics.CreateDatastoreInput) (*request.Request, *iotanalytics.CreateDatastoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatastoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.CreateDatastoreOutput)
	return ret0, ret1
}

// CreateDatastoreRequest indicates an expected call of CreateDatastoreRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatastoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatastoreRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatastoreRequest), arg0)
}

// CreateDatastoreWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) CreateDatastoreWithContext(arg0 context.Context, arg1 *iotanalytics.CreateDatastoreInput, arg2 ...request.Option) (*iotanalytics.CreateDatastoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatastoreWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.CreateDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatastoreWithContext indicates an expected call of CreateDatastoreWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreateDatastoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatastoreWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreateDatastoreWithContext), varargs...)
}

// CreatePipeline mocks base method.
func (m *MockIoTAnalyticsAPI) CreatePipeline(arg0 *iotanalytics.CreatePipelineInput) (*iotanalytics.CreatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", arg0)
	ret0, _ := ret[0].(*iotanalytics.CreatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreatePipeline), arg0)
}

// CreatePipelineRequest mocks base method.
func (m *MockIoTAnalyticsAPI) CreatePipelineRequest(arg0 *iotanalytics.CreatePipelineInput) (*request.Request, *iotanalytics.CreatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.CreatePipelineOutput)
	return ret0, ret1
}

// CreatePipelineRequest indicates an expected call of CreatePipelineRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreatePipelineRequest), arg0)
}

// CreatePipelineWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) CreatePipelineWithContext(arg0 context.Context, arg1 *iotanalytics.CreatePipelineInput, arg2 ...request.Option) (*iotanalytics.CreatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.CreatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipelineWithContext indicates an expected call of CreatePipelineWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) CreatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).CreatePipelineWithContext), varargs...)
}

// DeleteChannel mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteChannel(arg0 *iotanalytics.DeleteChannelInput) (*iotanalytics.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(*iotanalytics.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteChannel), arg0)
}

// DeleteChannelRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteChannelRequest(arg0 *iotanalytics.DeleteChannelInput) (*request.Request, *iotanalytics.DeleteChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DeleteChannelOutput)
	return ret0, ret1
}

// DeleteChannelRequest indicates an expected call of DeleteChannelRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteChannelRequest), arg0)
}

// DeleteChannelWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteChannelWithContext(arg0 context.Context, arg1 *iotanalytics.DeleteChannelInput, arg2 ...request.Option) (*iotanalytics.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelWithContext indicates an expected call of DeleteChannelWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteChannelWithContext), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDataset(arg0 *iotanalytics.DeleteDatasetInput) (*iotanalytics.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0)
	ret0, _ := ret[0].(*iotanalytics.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDataset), arg0)
}

// DeleteDatasetContent mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatasetContent(arg0 *iotanalytics.DeleteDatasetContentInput) (*iotanalytics.DeleteDatasetContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetContent", arg0)
	ret0, _ := ret[0].(*iotanalytics.DeleteDatasetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetContent indicates an expected call of DeleteDatasetContent.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatasetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetContent", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatasetContent), arg0)
}

// DeleteDatasetContentRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatasetContentRequest(arg0 *iotanalytics.DeleteDatasetContentInput) (*request.Request, *iotanalytics.DeleteDatasetContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DeleteDatasetContentOutput)
	return ret0, ret1
}

// DeleteDatasetContentRequest indicates an expected call of DeleteDatasetContentRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatasetContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetContentRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatasetContentRequest), arg0)
}

// DeleteDatasetContentWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatasetContentWithContext(arg0 context.Context, arg1 *iotanalytics.DeleteDatasetContentInput, arg2 ...request.Option) (*iotanalytics.DeleteDatasetContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetContentWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DeleteDatasetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetContentWithContext indicates an expected call of DeleteDatasetContentWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatasetContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetContentWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatasetContentWithContext), varargs...)
}

// DeleteDatasetRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatasetRequest(arg0 *iotanalytics.DeleteDatasetInput) (*request.Request, *iotanalytics.DeleteDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DeleteDatasetOutput)
	return ret0, ret1
}

// DeleteDatasetRequest indicates an expected call of DeleteDatasetRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatasetRequest), arg0)
}

// DeleteDatasetWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatasetWithContext(arg0 context.Context, arg1 *iotanalytics.DeleteDatasetInput, arg2 ...request.Option) (*iotanalytics.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetWithContext indicates an expected call of DeleteDatasetWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatasetWithContext), varargs...)
}

// DeleteDatastore mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatastore(arg0 *iotanalytics.DeleteDatastoreInput) (*iotanalytics.DeleteDatastoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatastore", arg0)
	ret0, _ := ret[0].(*iotanalytics.DeleteDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatastore indicates an expected call of DeleteDatastore.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastore", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatastore), arg0)
}

// DeleteDatastoreRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatastoreRequest(arg0 *iotanalytics.DeleteDatastoreInput) (*request.Request, *iotanalytics.DeleteDatastoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatastoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DeleteDatastoreOutput)
	return ret0, ret1
}

// DeleteDatastoreRequest indicates an expected call of DeleteDatastoreRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatastoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastoreRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatastoreRequest), arg0)
}

// DeleteDatastoreWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DeleteDatastoreWithContext(arg0 context.Context, arg1 *iotanalytics.DeleteDatastoreInput, arg2 ...request.Option) (*iotanalytics.DeleteDatastoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatastoreWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DeleteDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatastoreWithContext indicates an expected call of DeleteDatastoreWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeleteDatastoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastoreWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeleteDatastoreWithContext), varargs...)
}

// DeletePipeline mocks base method.
func (m *MockIoTAnalyticsAPI) DeletePipeline(arg0 *iotanalytics.DeletePipelineInput) (*iotanalytics.DeletePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", arg0)
	ret0, _ := ret[0].(*iotanalytics.DeletePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeletePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeletePipeline), arg0)
}

// DeletePipelineRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DeletePipelineRequest(arg0 *iotanalytics.DeletePipelineInput) (*request.Request, *iotanalytics.DeletePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DeletePipelineOutput)
	return ret0, ret1
}

// DeletePipelineRequest indicates an expected call of DeletePipelineRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeletePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeletePipelineRequest), arg0)
}

// DeletePipelineWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DeletePipelineWithContext(arg0 context.Context, arg1 *iotanalytics.DeletePipelineInput, arg2 ...request.Option) (*iotanalytics.DeletePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DeletePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipelineWithContext indicates an expected call of DeletePipelineWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DeletePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DeletePipelineWithContext), varargs...)
}

// DescribeChannel mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeChannel(arg0 *iotanalytics.DescribeChannelInput) (*iotanalytics.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannel", arg0)
	ret0, _ := ret[0].(*iotanalytics.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannel indicates an expected call of DescribeChannel.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannel", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeChannel), arg0)
}

// DescribeChannelRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeChannelRequest(arg0 *iotanalytics.DescribeChannelInput) (*request.Request, *iotanalytics.DescribeChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DescribeChannelOutput)
	return ret0, ret1
}

// DescribeChannelRequest indicates an expected call of DescribeChannelRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeChannelRequest), arg0)
}

// DescribeChannelWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeChannelWithContext(arg0 context.Context, arg1 *iotanalytics.DescribeChannelInput, arg2 ...request.Option) (*iotanalytics.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelWithContext indicates an expected call of DescribeChannelWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeChannelWithContext), varargs...)
}

// DescribeDataset mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeDataset(arg0 *iotanalytics.DescribeDatasetInput) (*iotanalytics.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataset", arg0)
	ret0, _ := ret[0].(*iotanalytics.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataset indicates an expected call of DescribeDataset.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataset", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeDataset), arg0)
}

// DescribeDatasetRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeDatasetRequest(arg0 *iotanalytics.DescribeDatasetInput) (*request.Request, *iotanalytics.DescribeDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DescribeDatasetOutput)
	return ret0, ret1
}

// DescribeDatasetRequest indicates an expected call of DescribeDatasetRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeDatasetRequest), arg0)
}

// DescribeDatasetWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeDatasetWithContext(arg0 context.Context, arg1 *iotanalytics.DescribeDatasetInput, arg2 ...request.Option) (*iotanalytics.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetWithContext indicates an expected call of DescribeDatasetWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeDatasetWithContext), varargs...)
}

// DescribeDatastore mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeDatastore(arg0 *iotanalytics.DescribeDatastoreInput) (*iotanalytics.DescribeDatastoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatastore", arg0)
	ret0, _ := ret[0].(*iotanalytics.DescribeDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatastore indicates an expected call of DescribeDatastore.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatastore", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeDatastore), arg0)
}

// DescribeDatastoreRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeDatastoreRequest(arg0 *iotanalytics.DescribeDatastoreInput) (*request.Request, *iotanalytics.DescribeDatastoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatastoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DescribeDatastoreOutput)
	return ret0, ret1
}

// DescribeDatastoreRequest indicates an expected call of DescribeDatastoreRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeDatastoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatastoreRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeDatastoreRequest), arg0)
}

// DescribeDatastoreWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeDatastoreWithContext(arg0 context.Context, arg1 *iotanalytics.DescribeDatastoreInput, arg2 ...request.Option) (*iotanalytics.DescribeDatastoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatastoreWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DescribeDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatastoreWithContext indicates an expected call of DescribeDatastoreWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeDatastoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatastoreWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeDatastoreWithContext), varargs...)
}

// DescribeLoggingOptions mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeLoggingOptions(arg0 *iotanalytics.DescribeLoggingOptionsInput) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotanalytics.DescribeLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingOptions indicates an expected call of DescribeLoggingOptions.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptions", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeLoggingOptions), arg0)
}

// DescribeLoggingOptionsRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeLoggingOptionsRequest(arg0 *iotanalytics.DescribeLoggingOptionsInput) (*request.Request, *iotanalytics.DescribeLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DescribeLoggingOptionsOutput)
	return ret0, ret1
}

// DescribeLoggingOptionsRequest indicates an expected call of DescribeLoggingOptionsRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptionsRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeLoggingOptionsRequest), arg0)
}

// DescribeLoggingOptionsWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DescribeLoggingOptionsWithContext(arg0 context.Context, arg1 *iotanalytics.DescribeLoggingOptionsInput, arg2 ...request.Option) (*iotanalytics.DescribeLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DescribeLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingOptionsWithContext indicates an expected call of DescribeLoggingOptionsWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribeLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptionsWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribeLoggingOptionsWithContext), varargs...)
}

// DescribePipeline mocks base method.
func (m *MockIoTAnalyticsAPI) DescribePipeline(arg0 *iotanalytics.DescribePipelineInput) (*iotanalytics.DescribePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePipeline", arg0)
	ret0, _ := ret[0].(*iotanalytics.DescribePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePipeline indicates an expected call of DescribePipeline.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipeline", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribePipeline), arg0)
}

// DescribePipelineRequest mocks base method.
func (m *MockIoTAnalyticsAPI) DescribePipelineRequest(arg0 *iotanalytics.DescribePipelineInput) (*request.Request, *iotanalytics.DescribePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.DescribePipelineOutput)
	return ret0, ret1
}

// DescribePipelineRequest indicates an expected call of DescribePipelineRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipelineRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribePipelineRequest), arg0)
}

// DescribePipelineWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) DescribePipelineWithContext(arg0 context.Context, arg1 *iotanalytics.DescribePipelineInput, arg2 ...request.Option) (*iotanalytics.DescribePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.DescribePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePipelineWithContext indicates an expected call of DescribePipelineWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) DescribePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipelineWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).DescribePipelineWithContext), varargs...)
}

// GetDatasetContent mocks base method.
func (m *MockIoTAnalyticsAPI) GetDatasetContent(arg0 *iotanalytics.GetDatasetContentInput) (*iotanalytics.GetDatasetContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetContent", arg0)
	ret0, _ := ret[0].(*iotanalytics.GetDatasetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetContent indicates an expected call of GetDatasetContent.
func (mr *MockIoTAnalyticsAPIMockRecorder) GetDatasetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetContent", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).GetDatasetContent), arg0)
}

// GetDatasetContentRequest mocks base method.
func (m *MockIoTAnalyticsAPI) GetDatasetContentRequest(arg0 *iotanalytics.GetDatasetContentInput) (*request.Request, *iotanalytics.GetDatasetContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.GetDatasetContentOutput)
	return ret0, ret1
}

// GetDatasetContentRequest indicates an expected call of GetDatasetContentRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) GetDatasetContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetContentRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).GetDatasetContentRequest), arg0)
}

// GetDatasetContentWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) GetDatasetContentWithContext(arg0 context.Context, arg1 *iotanalytics.GetDatasetContentInput, arg2 ...request.Option) (*iotanalytics.GetDatasetContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatasetContentWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.GetDatasetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetContentWithContext indicates an expected call of GetDatasetContentWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) GetDatasetContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetContentWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).GetDatasetContentWithContext), varargs...)
}

// ListChannels mocks base method.
func (m *MockIoTAnalyticsAPI) ListChannels(arg0 *iotanalytics.ListChannelsInput) (*iotanalytics.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", arg0)
	ret0, _ := ret[0].(*iotanalytics.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListChannels), arg0)
}

// ListChannelsPages mocks base method.
func (m *MockIoTAnalyticsAPI) ListChannelsPages(arg0 *iotanalytics.ListChannelsInput, arg1 func(*iotanalytics.ListChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPages indicates an expected call of ListChannelsPages.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPages", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListChannelsPages), arg0, arg1)
}

// ListChannelsPagesWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListChannelsPagesWithContext(arg0 context.Context, arg1 *iotanalytics.ListChannelsInput, arg2 func(*iotanalytics.ListChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPagesWithContext indicates an expected call of ListChannelsPagesWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPagesWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListChannelsPagesWithContext), varargs...)
}

// ListChannelsRequest mocks base method.
func (m *MockIoTAnalyticsAPI) ListChannelsRequest(arg0 *iotanalytics.ListChannelsInput) (*request.Request, *iotanalytics.ListChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.ListChannelsOutput)
	return ret0, ret1
}

// ListChannelsRequest indicates an expected call of ListChannelsRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListChannelsRequest), arg0)
}

// ListChannelsWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListChannelsWithContext(arg0 context.Context, arg1 *iotanalytics.ListChannelsInput, arg2 ...request.Option) (*iotanalytics.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsWithContext indicates an expected call of ListChannelsWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListChannelsWithContext), varargs...)
}

// ListDatasetContents mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetContents(arg0 *iotanalytics.ListDatasetContentsInput) (*iotanalytics.ListDatasetContentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetContents", arg0)
	ret0, _ := ret[0].(*iotanalytics.ListDatasetContentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetContents indicates an expected call of ListDatasetContents.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetContents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetContents", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetContents), arg0)
}

// ListDatasetContentsPages mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetContentsPages(arg0 *iotanalytics.ListDatasetContentsInput, arg1 func(*iotanalytics.ListDatasetContentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetContentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetContentsPages indicates an expected call of ListDatasetContentsPages.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetContentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetContentsPages", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetContentsPages), arg0, arg1)
}

// ListDatasetContentsPagesWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetContentsPagesWithContext(arg0 context.Context, arg1 *iotanalytics.ListDatasetContentsInput, arg2 func(*iotanalytics.ListDatasetContentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetContentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetContentsPagesWithContext indicates an expected call of ListDatasetContentsPagesWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetContentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetContentsPagesWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetContentsPagesWithContext), varargs...)
}

// ListDatasetContentsRequest mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetContentsRequest(arg0 *iotanalytics.ListDatasetContentsInput) (*request.Request, *iotanalytics.ListDatasetContentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetContentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.ListDatasetContentsOutput)
	return ret0, ret1
}

// ListDatasetContentsRequest indicates an expected call of ListDatasetContentsRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetContentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetContentsRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetContentsRequest), arg0)
}

// ListDatasetContentsWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetContentsWithContext(arg0 context.Context, arg1 *iotanalytics.ListDatasetContentsInput, arg2 ...request.Option) (*iotanalytics.ListDatasetContentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetContentsWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.ListDatasetContentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetContentsWithContext indicates an expected call of ListDatasetContentsWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetContentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetContentsWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetContentsWithContext), varargs...)
}

// ListDatasets mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasets(arg0 *iotanalytics.ListDatasetsInput) (*iotanalytics.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", arg0)
	ret0, _ := ret[0].(*iotanalytics.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasets), arg0)
}

// ListDatasetsPages mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetsPages(arg0 *iotanalytics.ListDatasetsInput, arg1 func(*iotanalytics.ListDatasetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPages indicates an expected call of ListDatasetsPages.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPages", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetsPages), arg0, arg1)
}

// ListDatasetsPagesWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetsPagesWithContext(arg0 context.Context, arg1 *iotanalytics.ListDatasetsInput, arg2 func(*iotanalytics.ListDatasetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPagesWithContext indicates an expected call of ListDatasetsPagesWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPagesWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetsPagesWithContext), varargs...)
}

// ListDatasetsRequest mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetsRequest(arg0 *iotanalytics.ListDatasetsInput) (*request.Request, *iotanalytics.ListDatasetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.ListDatasetsOutput)
	return ret0, ret1
}

// ListDatasetsRequest indicates an expected call of ListDatasetsRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetsRequest), arg0)
}

// ListDatasetsWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatasetsWithContext(arg0 context.Context, arg1 *iotanalytics.ListDatasetsInput, arg2 ...request.Option) (*iotanalytics.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetsWithContext indicates an expected call of ListDatasetsWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatasetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatasetsWithContext), varargs...)
}

// ListDatastores mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatastores(arg0 *iotanalytics.ListDatastoresInput) (*iotanalytics.ListDatastoresOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatastores", arg0)
	ret0, _ := ret[0].(*iotanalytics.ListDatastoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatastores indicates an expected call of ListDatastores.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatastores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastores", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatastores), arg0)
}

// ListDatastoresPages mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatastoresPages(arg0 *iotanalytics.ListDatastoresInput, arg1 func(*iotanalytics.ListDatastoresOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatastoresPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatastoresPages indicates an expected call of ListDatastoresPages.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatastoresPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresPages", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatastoresPages), arg0, arg1)
}

// ListDatastoresPagesWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatastoresPagesWithContext(arg0 context.Context, arg1 *iotanalytics.ListDatastoresInput, arg2 func(*iotanalytics.ListDatastoresOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatastoresPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatastoresPagesWithContext indicates an expected call of ListDatastoresPagesWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatastoresPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresPagesWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatastoresPagesWithContext), varargs...)
}

// ListDatastoresRequest mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatastoresRequest(arg0 *iotanalytics.ListDatastoresInput) (*request.Request, *iotanalytics.ListDatastoresOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatastoresRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.ListDatastoresOutput)
	return ret0, ret1
}

// ListDatastoresRequest indicates an expected call of ListDatastoresRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatastoresRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatastoresRequest), arg0)
}

// ListDatastoresWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListDatastoresWithContext(arg0 context.Context, arg1 *iotanalytics.ListDatastoresInput, arg2 ...request.Option) (*iotanalytics.ListDatastoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatastoresWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.ListDatastoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatastoresWithContext indicates an expected call of ListDatastoresWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListDatastoresWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatastoresWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListDatastoresWithContext), varargs...)
}

// ListPipelines mocks base method.
func (m *MockIoTAnalyticsAPI) ListPipelines(arg0 *iotanalytics.ListPipelinesInput) (*iotanalytics.ListPipelinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", arg0)
	ret0, _ := ret[0].(*iotanalytics.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListPipelines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListPipelines), arg0)
}

// ListPipelinesPages mocks base method.
func (m *MockIoTAnalyticsAPI) ListPipelinesPages(arg0 *iotanalytics.ListPipelinesInput, arg1 func(*iotanalytics.ListPipelinesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPipelinesPages indicates an expected call of ListPipelinesPages.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListPipelinesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesPages", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListPipelinesPages), arg0, arg1)
}

// ListPipelinesPagesWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListPipelinesPagesWithContext(arg0 context.Context, arg1 *iotanalytics.ListPipelinesInput, arg2 func(*iotanalytics.ListPipelinesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelinesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPipelinesPagesWithContext indicates an expected call of ListPipelinesPagesWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListPipelinesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesPagesWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListPipelinesPagesWithContext), varargs...)
}

// ListPipelinesRequest mocks base method.
func (m *MockIoTAnalyticsAPI) ListPipelinesRequest(arg0 *iotanalytics.ListPipelinesInput) (*request.Request, *iotanalytics.ListPipelinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.ListPipelinesOutput)
	return ret0, ret1
}

// ListPipelinesRequest indicates an expected call of ListPipelinesRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListPipelinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListPipelinesRequest), arg0)
}

// ListPipelinesWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListPipelinesWithContext(arg0 context.Context, arg1 *iotanalytics.ListPipelinesInput, arg2 ...request.Option) (*iotanalytics.ListPipelinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelinesWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelinesWithContext indicates an expected call of ListPipelinesWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListPipelinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListPipelinesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockIoTAnalyticsAPI) ListTagsForResource(arg0 *iotanalytics.ListTagsForResourceInput) (*iotanalytics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*iotanalytics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockIoTAnalyticsAPI) ListTagsForResourceRequest(arg0 *iotanalytics.ListTagsForResourceInput) (*request.Request, *iotanalytics.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *iotanalytics.ListTagsForResourceInput, arg2 ...request.Option) (*iotanalytics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutLoggingOptions mocks base method.
func (m *MockIoTAnalyticsAPI) PutLoggingOptions(arg0 *iotanalytics.PutLoggingOptionsInput) (*iotanalytics.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotanalytics.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptions indicates an expected call of PutLoggingOptions.
func (mr *MockIoTAnalyticsAPIMockRecorder) PutLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptions", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).PutLoggingOptions), arg0)
}

// PutLoggingOptionsRequest mocks base method.
func (m *MockIoTAnalyticsAPI) PutLoggingOptionsRequest(arg0 *iotanalytics.PutLoggingOptionsInput) (*request.Request, *iotanalytics.PutLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.PutLoggingOptionsOutput)
	return ret0, ret1
}

// PutLoggingOptionsRequest indicates an expected call of PutLoggingOptionsRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) PutLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).PutLoggingOptionsRequest), arg0)
}

// PutLoggingOptionsWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) PutLoggingOptionsWithContext(arg0 context.Context, arg1 *iotanalytics.PutLoggingOptionsInput, arg2 ...request.Option) (*iotanalytics.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptionsWithContext indicates an expected call of PutLoggingOptionsWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) PutLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).PutLoggingOptionsWithContext), varargs...)
}

// RunPipelineActivity mocks base method.
func (m *MockIoTAnalyticsAPI) RunPipelineActivity(arg0 *iotanalytics.RunPipelineActivityInput) (*iotanalytics.RunPipelineActivityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPipelineActivity", arg0)
	ret0, _ := ret[0].(*iotanalytics.RunPipelineActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPipelineActivity indicates an expected call of RunPipelineActivity.
func (mr *MockIoTAnalyticsAPIMockRecorder) RunPipelineActivity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPipelineActivity", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).RunPipelineActivity), arg0)
}

// RunPipelineActivityRequest mocks base method.
func (m *MockIoTAnalyticsAPI) RunPipelineActivityRequest(arg0 *iotanalytics.RunPipelineActivityInput) (*request.Request, *iotanalytics.RunPipelineActivityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPipelineActivityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.RunPipelineActivityOutput)
	return ret0, ret1
}

// RunPipelineActivityRequest indicates an expected call of RunPipelineActivityRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) RunPipelineActivityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPipelineActivityRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).RunPipelineActivityRequest), arg0)
}

// RunPipelineActivityWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) RunPipelineActivityWithContext(arg0 context.Context, arg1 *iotanalytics.RunPipelineActivityInput, arg2 ...request.Option) (*iotanalytics.RunPipelineActivityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunPipelineActivityWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.RunPipelineActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPipelineActivityWithContext indicates an expected call of RunPipelineActivityWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) RunPipelineActivityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPipelineActivityWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).RunPipelineActivityWithContext), varargs...)
}

// SampleChannelData mocks base method.
func (m *MockIoTAnalyticsAPI) SampleChannelData(arg0 *iotanalytics.SampleChannelDataInput) (*iotanalytics.SampleChannelDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleChannelData", arg0)
	ret0, _ := ret[0].(*iotanalytics.SampleChannelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SampleChannelData indicates an expected call of SampleChannelData.
func (mr *MockIoTAnalyticsAPIMockRecorder) SampleChannelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleChannelData", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).SampleChannelData), arg0)
}

// SampleChannelDataRequest mocks base method.
func (m *MockIoTAnalyticsAPI) SampleChannelDataRequest(arg0 *iotanalytics.SampleChannelDataInput) (*request.Request, *iotanalytics.SampleChannelDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleChannelDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.SampleChannelDataOutput)
	return ret0, ret1
}

// SampleChannelDataRequest indicates an expected call of SampleChannelDataRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) SampleChannelDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleChannelDataRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).SampleChannelDataRequest), arg0)
}

// SampleChannelDataWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) SampleChannelDataWithContext(arg0 context.Context, arg1 *iotanalytics.SampleChannelDataInput, arg2 ...request.Option) (*iotanalytics.SampleChannelDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SampleChannelDataWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.SampleChannelDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SampleChannelDataWithContext indicates an expected call of SampleChannelDataWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) SampleChannelDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleChannelDataWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).SampleChannelDataWithContext), varargs...)
}

// StartPipelineReprocessing mocks base method.
func (m *MockIoTAnalyticsAPI) StartPipelineReprocessing(arg0 *iotanalytics.StartPipelineReprocessingInput) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPipelineReprocessing", arg0)
	ret0, _ := ret[0].(*iotanalytics.StartPipelineReprocessingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPipelineReprocessing indicates an expected call of StartPipelineReprocessing.
func (mr *MockIoTAnalyticsAPIMockRecorder) StartPipelineReprocessing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipelineReprocessing", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).StartPipelineReprocessing), arg0)
}

// StartPipelineReprocessingRequest mocks base method.
func (m *MockIoTAnalyticsAPI) StartPipelineReprocessingRequest(arg0 *iotanalytics.StartPipelineReprocessingInput) (*request.Request, *iotanalytics.StartPipelineReprocessingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPipelineReprocessingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.StartPipelineReprocessingOutput)
	return ret0, ret1
}

// StartPipelineReprocessingRequest indicates an expected call of StartPipelineReprocessingRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) StartPipelineReprocessingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipelineReprocessingRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).StartPipelineReprocessingRequest), arg0)
}

// StartPipelineReprocessingWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) StartPipelineReprocessingWithContext(arg0 context.Context, arg1 *iotanalytics.StartPipelineReprocessingInput, arg2 ...request.Option) (*iotanalytics.StartPipelineReprocessingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartPipelineReprocessingWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.StartPipelineReprocessingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPipelineReprocessingWithContext indicates an expected call of StartPipelineReprocessingWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) StartPipelineReprocessingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPipelineReprocessingWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).StartPipelineReprocessingWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockIoTAnalyticsAPI) TagResource(arg0 *iotanalytics.TagResourceInput) (*iotanalytics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*iotanalytics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockIoTAnalyticsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockIoTAnalyticsAPI) TagResourceRequest(arg0 *iotanalytics.TagResourceInput) (*request.Request, *iotanalytics.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) TagResourceWithContext(arg0 context.Context, arg1 *iotanalytics.TagResourceInput, arg2 ...request.Option) (*iotanalytics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockIoTAnalyticsAPI) UntagResource(arg0 *iotanalytics.UntagResourceInput) (*iotanalytics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*iotanalytics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockIoTAnalyticsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockIoTAnalyticsAPI) UntagResourceRequest(arg0 *iotanalytics.UntagResourceInput) (*request.Request, *iotanalytics.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *iotanalytics.UntagResourceInput, arg2 ...request.Option) (*iotanalytics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateChannel mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateChannel(arg0 *iotanalytics.UpdateChannelInput) (*iotanalytics.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*iotanalytics.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateChannel), arg0)
}

// UpdateChannelRequest mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateChannelRequest(arg0 *iotanalytics.UpdateChannelInput) (*request.Request, *iotanalytics.UpdateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.UpdateChannelOutput)
	return ret0, ret1
}

// UpdateChannelRequest indicates an expected call of UpdateChannelRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateChannelRequest), arg0)
}

// UpdateChannelWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateChannelWithContext(arg0 context.Context, arg1 *iotanalytics.UpdateChannelInput, arg2 ...request.Option) (*iotanalytics.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelWithContext indicates an expected call of UpdateChannelWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateChannelWithContext), varargs...)
}

// UpdateDataset mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateDataset(arg0 *iotanalytics.UpdateDatasetInput) (*iotanalytics.UpdateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataset", arg0)
	ret0, _ := ret[0].(*iotanalytics.UpdateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateDataset), arg0)
}

// UpdateDatasetRequest mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateDatasetRequest(arg0 *iotanalytics.UpdateDatasetInput) (*request.Request, *iotanalytics.UpdateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.UpdateDatasetOutput)
	return ret0, ret1
}

// UpdateDatasetRequest indicates an expected call of UpdateDatasetRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateDatasetRequest), arg0)
}

// UpdateDatasetWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateDatasetWithContext(arg0 context.Context, arg1 *iotanalytics.UpdateDatasetInput, arg2 ...request.Option) (*iotanalytics.UpdateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.UpdateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetWithContext indicates an expected call of UpdateDatasetWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateDatasetWithContext), varargs...)
}

// UpdateDatastore mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateDatastore(arg0 *iotanalytics.UpdateDatastoreInput) (*iotanalytics.UpdateDatastoreOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatastore", arg0)
	ret0, _ := ret[0].(*iotanalytics.UpdateDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatastore indicates an expected call of UpdateDatastore.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateDatastore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatastore", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateDatastore), arg0)
}

// UpdateDatastoreRequest mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateDatastoreRequest(arg0 *iotanalytics.UpdateDatastoreInput) (*request.Request, *iotanalytics.UpdateDatastoreOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatastoreRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.UpdateDatastoreOutput)
	return ret0, ret1
}

// UpdateDatastoreRequest indicates an expected call of UpdateDatastoreRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateDatastoreRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatastoreRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateDatastoreRequest), arg0)
}

// UpdateDatastoreWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) UpdateDatastoreWithContext(arg0 context.Context, arg1 *iotanalytics.UpdateDatastoreInput, arg2 ...request.Option) (*iotanalytics.UpdateDatastoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatastoreWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.UpdateDatastoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatastoreWithContext indicates an expected call of UpdateDatastoreWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdateDatastoreWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatastoreWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdateDatastoreWithContext), varargs...)
}

// UpdatePipeline mocks base method.
func (m *MockIoTAnalyticsAPI) UpdatePipeline(arg0 *iotanalytics.UpdatePipelineInput) (*iotanalytics.UpdatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", arg0)
	ret0, _ := ret[0].(*iotanalytics.UpdatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipeline indicates an expected call of UpdatePipeline.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdatePipeline), arg0)
}

// UpdatePipelineRequest mocks base method.
func (m *MockIoTAnalyticsAPI) UpdatePipelineRequest(arg0 *iotanalytics.UpdatePipelineInput) (*request.Request, *iotanalytics.UpdatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotanalytics.UpdatePipelineOutput)
	return ret0, ret1
}

// UpdatePipelineRequest indicates an expected call of UpdatePipelineRequest.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineRequest", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdatePipelineRequest), arg0)
}

// UpdatePipelineWithContext mocks base method.
func (m *MockIoTAnalyticsAPI) UpdatePipelineWithContext(arg0 context.Context, arg1 *iotanalytics.UpdatePipelineInput, arg2 ...request.Option) (*iotanalytics.UpdatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*iotanalytics.UpdatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipelineWithContext indicates an expected call of UpdatePipelineWithContext.
func (mr *MockIoTAnalyticsAPIMockRecorder) UpdatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineWithContext", reflect.TypeOf((*MockIoTAnalyticsAPI)(nil).UpdatePipelineWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ivs/ivsiface (interfaces: IVSAPI)

// Package ivsmock is a generated GoMock package.
package ivsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	ivs "github.com/aws/aws-sdk-go/service/ivs"
	gomock "github.com/golang/mock/gomock"
)

// MockIVSAPI is a mock of IVSAPI interface.
type MockIVSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIVSAPIMockRecorder
}

// MockIVSAPIMockRecorder is the mock recorder for MockIVSAPI.
type MockIVSAPIMockRecorder struct {
	mock *MockIVSAPI
}

// NewMockIVSAPI creates a new mock instance.
func NewMockIVSAPI(ctrl *gomock.Controller) *MockIVSAPI {
	mock := &MockIVSAPI{ctrl: ctrl}
	mock.recorder = &MockIVSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVSAPI) EXPECT() *MockIVSAPIMockRecorder {
	return m.recorder
}

// BatchGetChannel mocks base method.
func (m *MockIVSAPI) BatchGetChannel(arg0 *ivs.BatchGetChannelInput) (*ivs.BatchGetChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetChannel", arg0)
	ret0, _ := ret[0].(*ivs.BatchGetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetChannel indicates an expected call of BatchGetChannel.
func (mr *MockIVSAPIMockRecorder) BatchGetChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetChannel", reflect.TypeOf((*MockIVSAPI)(nil).BatchGetChannel), arg0)
}

// BatchGetChannelRequest mocks base method.
func (m *MockIVSAPI) BatchGetChannelRequest(arg0 *ivs.BatchGetChannelInput) (*request.Request, *ivs.BatchGetChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.BatchGetChannelOutput)
	return ret0, ret1
}

// BatchGetChannelRequest indicates an expected call of BatchGetChannelRequest.
func (mr *MockIVSAPIMockRecorder) BatchGetChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetChannelRequest", reflect.TypeOf((*MockIVSAPI)(nil).BatchGetChannelRequest), arg0)
}

// BatchGetChannelWithContext mocks base method.
func (m *MockIVSAPI) BatchGetChannelWithContext(arg0 context.Context, arg1 *ivs.BatchGetChannelInput, arg2 ...request.Option) (*ivs.BatchGetChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.BatchGetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetChannelWithContext indicates an expected call of BatchGetChannelWithContext.
func (mr *MockIVSAPIMockRecorder) BatchGetChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetChannelWithContext", reflect.TypeOf((*MockIVSAPI)(nil).BatchGetChannelWithContext), varargs...)
}

// BatchGetStreamKey mocks base method.
func (m *MockIVSAPI) BatchGetStreamKey(arg0 *ivs.BatchGetStreamKeyInput) (*ivs.BatchGetStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetStreamKey", arg0)
	ret0, _ := ret[0].(*ivs.BatchGetStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetStreamKey indicates an expected call of BatchGetStreamKey.
func (mr *MockIVSAPIMockRecorder) BatchGetStreamKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetStreamKey", reflect.TypeOf((*MockIVSAPI)(nil).BatchGetStreamKey), arg0)
}

// BatchGetStreamKeyRequest mocks base method.
func (m *MockIVSAPI) BatchGetStreamKeyRequest(arg0 *ivs.BatchGetStreamKeyInput) (*request.Request, *ivs.BatchGetStreamKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetStreamKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.BatchGetStreamKeyOutput)
	return ret0, ret1
}

// BatchGetStreamKeyRequest indicates an expected call of BatchGetStreamKeyRequest.
func (mr *MockIVSAPIMockRecorder) BatchGetStreamKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetStreamKeyRequest", reflect.TypeOf((*MockIVSAPI)(nil).BatchGetStreamKeyRequest), arg0)
}

// BatchGetStreamKeyWithContext mocks base method.
func (m *MockIVSAPI) BatchGetStreamKeyWithContext(arg0 context.Context, arg1 *ivs.BatchGetStreamKeyInput, arg2 ...request.Option) (*ivs.BatchGetStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetStreamKeyWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.BatchGetStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetStreamKeyWithContext indicates an expected call of BatchGetStreamKeyWithContext.
func (mr *MockIVSAPIMockRecorder) BatchGetStreamKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetStreamKeyWithContext", reflect.TypeOf((*MockIVSAPI)(nil).BatchGetStreamKeyWithContext), varargs...)
}

// CreateChannel mocks base method.
func (m *MockIVSAPI) CreateChannel(arg0 *ivs.CreateChannelInput) (*ivs.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*ivs.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockIVSAPIMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockIVSAPI)(nil).CreateChannel), arg0)
}

// CreateChannelRequest mocks base method.
func (m *MockIVSAPI) CreateChannelRequest(arg0 *ivs.CreateChannelInput) (*request.Request, *ivs.CreateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.CreateChannelOutput)
	return ret0, ret1
}

// CreateChannelRequest indicates an expected call of CreateChannelRequest.
func (mr *MockIVSAPIMockRecorder) CreateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelRequest", reflect.TypeOf((*MockIVSAPI)(nil).CreateChannelRequest), arg0)
}

// CreateChannelWithContext mocks base method.
func (m *MockIVSAPI) CreateChannelWithContext(arg0 context.Context, arg1 *ivs.CreateChannelInput, arg2 ...request.Option) (*ivs.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelWithContext indicates an expected call of CreateChannelWithContext.
func (mr *MockIVSAPIMockRecorder) CreateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelWithContext", reflect.TypeOf((*MockIVSAPI)(nil).CreateChannelWithContext), varargs...)
}

// CreateRecordingConfiguration mocks base method.
func (m *MockIVSAPI) CreateRecordingConfiguration(arg0 *ivs.CreateRecordingConfigurationInput) (*ivs.CreateRecordingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecordingConfiguration", arg0)
	ret0, _ := ret[0].(*ivs.CreateRecordingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecordingConfiguration indicates an expected call of CreateRecordingConfiguration.
func (mr *MockIVSAPIMockRecorder) CreateRecordingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecordingConfiguration", reflect.TypeOf((*MockIVSAPI)(nil).CreateRecordingConfiguration), arg0)
}

// CreateRecordingConfigurationRequest mocks base method.
func (m *MockIVSAPI) CreateRecordingConfigurationRequest(arg0 *ivs.CreateRecordingConfigurationInput) (*request.Request, *ivs.CreateRecordingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecordingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.CreateRecordingConfigurationOutput)
	return ret0, ret1
}

// CreateRecordingConfigurationRequest indicates an expected call of CreateRecordingConfigurationRequest.
func (mr *MockIVSAPIMockRecorder) CreateRecordingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecordingConfigurationRequest", reflect.TypeOf((*MockIVSAPI)(nil).CreateRecordingConfigurationRequest), arg0)
}

// CreateRecordingConfigurationWithContext mocks base method.
func (m *MockIVSAPI) CreateRecordingConfigurationWithContext(arg0 context.Context, arg1 *ivs.CreateRecordingConfigurationInput, arg2 ...request.Option) (*ivs.CreateRecordingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecordingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.CreateRecordingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecordingConfigurationWithContext indicates an expected call of CreateRecordingConfigurationWithContext.
func (mr *MockIVSAPIMockRecorder) CreateRecordingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecordingConfigurationWithContext", reflect.TypeOf((*MockIVSAPI)(nil).CreateRecordingConfigurationWithContext), varargs...)
}

// CreateStreamKey mocks base method.
func (m *MockIVSAPI) CreateStreamKey(arg0 *ivs.CreateStreamKeyInput) (*ivs.CreateStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamKey", arg0)
	ret0, _ := ret[0].(*ivs.CreateStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamKey indicates an expected call of CreateStreamKey.
func (mr *MockIVSAPIMockRecorder) CreateStreamKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamKey", reflect.TypeOf((*MockIVSAPI)(nil).CreateStreamKey), arg0)
}

// CreateStreamKeyRequest mocks base method.
func (m *MockIVSAPI) CreateStreamKeyRequest(arg0 *ivs.CreateStreamKeyInput) (*request.Request, *ivs.CreateStreamKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.CreateStreamKeyOutput)
	return ret0, ret1
}

// CreateStreamKeyRequest indicates an expected call of CreateStreamKeyRequest.
func (mr *MockIVSAPIMockRecorder) CreateStreamKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamKeyRequest", reflect.TypeOf((*MockIVSAPI)(nil).CreateStreamKeyRequest), arg0)
}

// CreateStreamKeyWithContext mocks base method.
func (m *MockIVSAPI) CreateStreamKeyWithContext(arg0 context.Context, arg1 *ivs.CreateStreamKeyInput, arg2 ...request.Option) (*ivs.CreateStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamKeyWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.CreateStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamKeyWithContext indicates an expected call of CreateStreamKeyWithContext.
func (mr *MockIVSAPIMockRecorder) CreateStreamKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamKeyWithContext", reflect.TypeOf((*MockIVSAPI)(nil).CreateStreamKeyWithContext), varargs...)
}

// DeleteChannel mocks base method.
func (m *MockIVSAPI) DeleteChannel(arg0 *ivs.DeleteChannelInput) (*ivs.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(*ivs.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockIVSAPIMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockIVSAPI)(nil).DeleteChannel), arg0)
}

// DeleteChannelRequest mocks base method.
func (m *MockIVSAPI) DeleteChannelRequest(arg0 *ivs.DeleteChannelInput) (*request.Request, *ivs.DeleteChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.DeleteChannelOutput)
	return ret0, ret1
}

// DeleteChannelRequest indicates an expected call of DeleteChannelRequest.
func (mr *MockIVSAPIMockRecorder) DeleteChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelRequest", reflect.TypeOf((*MockIVSAPI)(nil).DeleteChannelRequest), arg0)
}

// DeleteChannelWithContext mocks base method.
func (m *MockIVSAPI) DeleteChannelWithContext(arg0 context.Context, arg1 *ivs.DeleteChannelInput, arg2 ...request.Option) (*ivs.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelWithContext indicates an expected call of DeleteChannelWithContext.
func (mr *MockIVSAPIMockRecorder) DeleteChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelWithContext", reflect.TypeOf((*MockIVSAPI)(nil).DeleteChannelWithContext), varargs...)
}

// DeletePlaybackKeyPair mocks base method.
func (m *MockIVSAPI) DeletePlaybackKeyPair(arg0 *ivs.DeletePlaybackKeyPairInput) (*ivs.DeletePlaybackKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaybackKeyPair", arg0)
	ret0, _ := ret[0].(*ivs.DeletePlaybackKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlaybackKeyPair indicates an expected call of DeletePlaybackKeyPair.
func (mr *MockIVSAPIMockRecorder) DeletePlaybackKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaybackKeyPair", reflect.TypeOf((*MockIVSAPI)(nil).DeletePlaybackKeyPair), arg0)
}

// DeletePlaybackKeyPairRequest mocks base method.
func (m *MockIVSAPI) DeletePlaybackKeyPairRequest(arg0 *ivs.DeletePlaybackKeyPairInput) (*request.Request, *ivs.DeletePlaybackKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaybackKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.DeletePlaybackKeyPairOutput)
	return ret0, ret1
}

// DeletePlaybackKeyPairRequest indicates an expected call of DeletePlaybackKeyPairRequest.
func (mr *MockIVSAPIMockRecorder) DeletePlaybackKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaybackKeyPairRequest", reflect.TypeOf((*MockIVSAPI)(nil).DeletePlaybackKeyPairRequest), arg0)
}

// DeletePlaybackKeyPairWithContext mocks base method.
func (m *MockIVSAPI) DeletePlaybackKeyPairWithContext(arg0 context.Context, arg1 *ivs.DeletePlaybackKeyPairInput, arg2 ...request.Option) (*ivs.DeletePlaybackKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePlaybackKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.DeletePlaybackKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlaybackKeyPairWithContext indicates an expected call of DeletePlaybackKeyPairWithContext.
func (mr *MockIVSAPIMockRecorder) DeletePlaybackKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaybackKeyPairWithContext", reflect.TypeOf((*MockIVSAPI)(nil).DeletePlaybackKeyPairWithContext), varargs...)
}

// DeleteRecordingConfiguration mocks base method.
func (m *MockIVSAPI) DeleteRecordingConfiguration(arg0 *ivs.DeleteRecordingConfigurationInput) (*ivs.DeleteRecordingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecordingConfiguration", arg0)
	ret0, _ := ret[0].(*ivs.DeleteRecordingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecordingConfiguration indicates an expected call of DeleteRecordingConfiguration.
func (mr *MockIVSAPIMockRecorder) DeleteRecordingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordingConfiguration", reflect.TypeOf((*MockIVSAPI)(nil).DeleteRecordingConfiguration), arg0)
}

// DeleteRecordingConfigurationRequest mocks base method.
func (m *MockIVSAPI) DeleteRecordingConfigurationRequest(arg0 *ivs.DeleteRecordingConfigurationInput) (*request.Request, *ivs.DeleteRecordingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecordingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.DeleteRecordingConfigurationOutput)
	return ret0, ret1
}

// DeleteRecordingConfigurationRequest indicates an expected call of DeleteRecordingConfigurationRequest.
func (mr *MockIVSAPIMockRecorder) DeleteRecordingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordingConfigurationRequest", reflect.TypeOf((*MockIVSAPI)(nil).DeleteRecordingConfigurationRequest), arg0)
}

// DeleteRecordingConfigurationWithContext mocks base method.
func (m *MockIVSAPI) DeleteRecordingConfigurationWithContext(arg0 context.Context, arg1 *ivs.DeleteRecordingConfigurationInput, arg2 ...request.Option) (*ivs.DeleteRecordingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecordingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.DeleteRecordingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecordingConfigurationWithContext indicates an expected call of DeleteRecordingConfigurationWithContext.
func (mr *MockIVSAPIMockRecorder) DeleteRecordingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordingConfigurationWithContext", reflect.TypeOf((*MockIVSAPI)(nil).DeleteRecordingConfigurationWithContext), varargs...)
}

// DeleteStreamKey mocks base method.
func (m *MockIVSAPI) DeleteStreamKey(arg0 *ivs.DeleteStreamKeyInput) (*ivs.DeleteStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamKey", arg0)
	ret0, _ := ret[0].(*ivs.DeleteStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamKey indicates an expected call of DeleteStreamKey.
func (mr *MockIVSAPIMockRecorder) DeleteStreamKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamKey", reflect.TypeOf((*MockIVSAPI)(nil).DeleteStreamKey), arg0)
}

// DeleteStreamKeyRequest mocks base method.
func (m *MockIVSAPI) DeleteStreamKeyRequest(arg0 *ivs.DeleteStreamKeyInput) (*request.Request, *ivs.DeleteStreamKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.DeleteStreamKeyOutput)
	return ret0, ret1
}

// DeleteStreamKeyRequest indicates an expected call of DeleteStreamKeyRequest.
func (mr *MockIVSAPIMockRecorder) DeleteStreamKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamKeyRequest", reflect.TypeOf((*MockIVSAPI)(nil).DeleteStreamKeyRequest), arg0)
}

// DeleteStreamKeyWithContext mocks base method.
func (m *MockIVSAPI) DeleteStreamKeyWithContext(arg0 context.Context, arg1 *ivs.DeleteStreamKeyInput, arg2 ...request.Option) (*ivs.DeleteStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStreamKeyWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.DeleteStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamKeyWithContext indicates an expected call of DeleteStreamKeyWithContext.
func (mr *MockIVSAPIMockRecorder) DeleteStreamKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamKeyWithContext", reflect.TypeOf((*MockIVSAPI)(nil).DeleteStreamKeyWithContext), varargs...)
}

// GetChannel mocks base method.
func (m *MockIVSAPI) GetChannel(arg0 *ivs.GetChannelInput) (*ivs.GetChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0)
	ret0, _ := ret[0].(*ivs.GetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockIVSAPIMockRecorder) GetChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockIVSAPI)(nil).GetChannel), arg0)
}

// GetChannelRequest mocks base method.
func (m *MockIVSAPI) GetChannelRequest(arg0 *ivs.GetChannelInput) (*request.Request, *ivs.GetChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.GetChannelOutput)
	return ret0, ret1
}

// GetChannelRequest indicates an expected call of GetChannelRequest.
func (mr *MockIVSAPIMockRecorder) GetChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelRequest", reflect.TypeOf((*MockIVSAPI)(nil).GetChannelRequest), arg0)
}

// GetChannelWithContext mocks base method.
func (m *MockIVSAPI) GetChannelWithContext(arg0 context.Context, arg1 *ivs.GetChannelInput, arg2 ...request.Option) (*ivs.GetChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.GetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelWithContext indicates an expected call of GetChannelWithContext.
func (mr *MockIVSAPIMockRecorder) GetChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelWithContext", reflect.TypeOf((*MockIVSAPI)(nil).GetChannelWithContext), varargs...)
}

// GetPlaybackKeyPair mocks base method.
func (m *MockIVSAPI) GetPlaybackKeyPair(arg0 *ivs.GetPlaybackKeyPairInput) (*ivs.GetPlaybackKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybackKeyPair", arg0)
	ret0, _ := ret[0].(*ivs.GetPlaybackKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybackKeyPair indicates an expected call of GetPlaybackKeyPair.
func (mr *MockIVSAPIMockRecorder) GetPlaybackKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybackKeyPair", reflect.TypeOf((*MockIVSAPI)(nil).GetPlaybackKeyPair), arg0)
}

// GetPlaybackKeyPairRequest mocks base method.
func (m *MockIVSAPI) GetPlaybackKeyPairRequest(arg0 *ivs.GetPlaybackKeyPairInput) (*request.Request, *ivs.GetPlaybackKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybackKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.GetPlaybackKeyPairOutput)
	return ret0, ret1
}

// GetPlaybackKeyPairRequest indicates an expected call of GetPlaybackKeyPairRequest.
func (mr *MockIVSAPIMockRecorder) GetPlaybackKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybackKeyPairRequest", reflect.TypeOf((*MockIVSAPI)(nil).GetPlaybackKeyPairRequest), arg0)
}

// GetPlaybackKeyPairWithContext mocks base method.
func (m *MockIVSAPI) GetPlaybackKeyPairWithContext(arg0 context.Context, arg1 *ivs.GetPlaybackKeyPairInput, arg2 ...request.Option) (*ivs.GetPlaybackKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlaybackKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.GetPlaybackKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybackKeyPairWithContext indicates an expected call of GetPlaybackKeyPairWithContext.
func (mr *MockIVSAPIMockRecorder) GetPlaybackKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybackKeyPairWithContext", reflect.TypeOf((*MockIVSAPI)(nil).GetPlaybackKeyPairWithContext), varargs...)
}

// GetRecordingConfiguration mocks base method.
func (m *MockIVSAPI) GetRecordingConfiguration(arg0 *ivs.GetRecordingConfigurationInput) (*ivs.GetRecordingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordingConfiguration", arg0)
	ret0, _ := ret[0].(*ivs.GetRecordingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordingConfiguration indicates an expected call of GetRecordingConfiguration.
func (mr *MockIVSAPIMockRecorder) GetRecordingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordingConfiguration", reflect.TypeOf((*MockIVSAPI)(nil).GetRecordingConfiguration), arg0)
}

// GetRecordingConfigurationRequest mocks base method.
func (m *MockIVSAPI) GetRecordingConfigurationRequest(arg0 *ivs.GetRecordingConfigurationInput) (*request.Request, *ivs.GetRecordingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.GetRecordingConfigurationOutput)
	return ret0, ret1
}

// GetRecordingConfigurationRequest indicates an expected call of GetRecordingConfigurationRequest.
func (mr *MockIVSAPIMockRecorder) GetRecordingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordingConfigurationRequest", reflect.TypeOf((*MockIVSAPI)(nil).GetRecordingConfigurationRequest), arg0)
}

// GetRecordingConfigurationWithContext mocks base method.
func (m *MockIVSAPI) GetRecordingConfigurationWithContext(arg0 context.Context, arg1 *ivs.GetRecordingConfigurationInput, arg2 ...request.Option) (*ivs.GetRecordingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecordingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.GetRecordingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordingConfigurationWithContext indicates an expected call of GetRecordingConfigurationWithContext.
func (mr *MockIVSAPIMockRecorder) GetRecordingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordingConfigurationWithContext", reflect.TypeOf((*MockIVSAPI)(nil).GetRecordingConfigurationWithContext), varargs...)
}

// GetStream mocks base method.
func (m *MockIVSAPI) GetStream(arg0 *ivs.GetStreamInput) (*ivs.GetStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream", arg0)
	ret0, _ := ret[0].(*ivs.GetStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStream indicates an expected call of GetStream.
func (mr *MockIVSAPIMockRecorder) GetStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockIVSAPI)(nil).GetStream), arg0)
}

// GetStreamKey mocks base method.
func (m *MockIVSAPI) GetStreamKey(arg0 *ivs.GetStreamKeyInput) (*ivs.GetStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamKey", arg0)
	ret0, _ := ret[0].(*ivs.GetStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamKey indicates an expected call of GetStreamKey.
func (mr *MockIVSAPIMockRecorder) GetStreamKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamKey", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamKey), arg0)
}

// GetStreamKeyRequest mocks base method.
func (m *MockIVSAPI) GetStreamKeyRequest(arg0 *ivs.GetStreamKeyInput) (*request.Request, *ivs.GetStreamKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.GetStreamKeyOutput)
	return ret0, ret1
}

// GetStreamKeyRequest indicates an expected call of GetStreamKeyRequest.
func (mr *MockIVSAPIMockRecorder) GetStreamKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamKeyRequest", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamKeyRequest), arg0)
}

// GetStreamKeyWithContext mocks base method.
func (m *MockIVSAPI) GetStreamKeyWithContext(arg0 context.Context, arg1 *ivs.GetStreamKeyInput, arg2 ...request.Option) (*ivs.GetStreamKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamKeyWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.GetStreamKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamKeyWithContext indicates an expected call of GetStreamKeyWithContext.
func (mr *MockIVSAPIMockRecorder) GetStreamKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamKeyWithContext", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamKeyWithContext), varargs...)
}

// GetStreamRequest mocks base method.
func (m *MockIVSAPI) GetStreamRequest(arg0 *ivs.GetStreamInput) (*request.Request, *ivs.GetStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.GetStreamOutput)
	return ret0, ret1
}

// GetStreamRequest indicates an expected call of GetStreamRequest.
func (mr *MockIVSAPIMockRecorder) GetStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamRequest", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamRequest), arg0)
}

// GetStreamSession mocks base method.
func (m *MockIVSAPI) GetStreamSession(arg0 *ivs.GetStreamSessionInput) (*ivs.GetStreamSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamSession", arg0)
	ret0, _ := ret[0].(*ivs.GetStreamSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamSession indicates an expected call of GetStreamSession.
func (mr *MockIVSAPIMockRecorder) GetStreamSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamSession", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamSession), arg0)
}

// GetStreamSessionRequest mocks base method.
func (m *MockIVSAPI) GetStreamSessionRequest(arg0 *ivs.GetStreamSessionInput) (*request.Request, *ivs.GetStreamSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.GetStreamSessionOutput)
	return ret0, ret1
}

// GetStreamSessionRequest indicates an expected call of GetStreamSessionRequest.
func (mr *MockIVSAPIMockRecorder) GetStreamSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamSessionRequest", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamSessionRequest), arg0)
}

// GetStreamSessionWithContext mocks base method.
func (m *MockIVSAPI) GetStreamSessionWithContext(arg0 context.Context, arg1 *ivs.GetStreamSessionInput, arg2 ...request.Option) (*ivs.GetStreamSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamSessionWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.GetStreamSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamSessionWithContext indicates an expected call of GetStreamSessionWithContext.
func (mr *MockIVSAPIMockRecorder) GetStreamSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamSessionWithContext", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamSessionWithContext), varargs...)
}

// GetStreamWithContext mocks base method.
func (m *MockIVSAPI) GetStreamWithContext(arg0 context.Context, arg1 *ivs.GetStreamInput, arg2 ...request.Option) (*ivs.GetStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.GetStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamWithContext indicates an expected call of GetStreamWithContext.
func (mr *MockIVSAPIMockRecorder) GetStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamWithContext", reflect.TypeOf((*MockIVSAPI)(nil).GetStreamWithContext), varargs...)
}

// ImportPlaybackKeyPair mocks base method.
func (m *MockIVSAPI) ImportPlaybackKeyPair(arg0 *ivs.ImportPlaybackKeyPairInput) (*ivs.ImportPlaybackKeyPairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPlaybackKeyPair", arg0)
	ret0, _ := ret[0].(*ivs.ImportPlaybackKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportPlaybackKeyPair indicates an expected call of ImportPlaybackKeyPair.
func (mr *MockIVSAPIMockRecorder) ImportPlaybackKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPlaybackKeyPair", reflect.TypeOf((*MockIVSAPI)(nil).ImportPlaybackKeyPair), arg0)
}

// ImportPlaybackKeyPairRequest mocks base method.
func (m *MockIVSAPI) ImportPlaybackKeyPairRequest(arg0 *ivs.ImportPlaybackKeyPairInput) (*request.Request, *ivs.ImportPlaybackKeyPairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPlaybackKeyPairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ImportPlaybackKeyPairOutput)
	return ret0, ret1
}

// ImportPlaybackKeyPairRequest indicates an expected call of ImportPlaybackKeyPairRequest.
func (mr *MockIVSAPIMockRecorder) ImportPlaybackKeyPairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPlaybackKeyPairRequest", reflect.TypeOf((*MockIVSAPI)(nil).ImportPlaybackKeyPairRequest), arg0)
}

// ImportPlaybackKeyPairWithContext mocks base method.
func (m *MockIVSAPI) ImportPlaybackKeyPairWithContext(arg0 context.Context, arg1 *ivs.ImportPlaybackKeyPairInput, arg2 ...request.Option) (*ivs.ImportPlaybackKeyPairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportPlaybackKeyPairWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ImportPlaybackKeyPairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportPlaybackKeyPairWithContext indicates an expected call of ImportPlaybackKeyPairWithContext.
func (mr *MockIVSAPIMockRecorder) ImportPlaybackKeyPairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPlaybackKeyPairWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ImportPlaybackKeyPairWithContext), varargs...)
}

// ListChannels mocks base method.
func (m *MockIVSAPI) ListChannels(arg0 *ivs.ListChannelsInput) (*ivs.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", arg0)
	ret0, _ := ret[0].(*ivs.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels.
func (mr *MockIVSAPIMockRecorder) ListChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockIVSAPI)(nil).ListChannels), arg0)
}

// ListChannelsPages mocks base method.
func (m *MockIVSAPI) ListChannelsPages(arg0 *ivs.ListChannelsInput, arg1 func(*ivs.ListChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPages indicates an expected call of ListChannelsPages.
func (mr *MockIVSAPIMockRecorder) ListChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPages", reflect.TypeOf((*MockIVSAPI)(nil).ListChannelsPages), arg0, arg1)
}

// ListChannelsPagesWithContext mocks base method.
func (m *MockIVSAPI) ListChannelsPagesWithContext(arg0 context.Context, arg1 *ivs.ListChannelsInput, arg2 func(*ivs.ListChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPagesWithContext indicates an expected call of ListChannelsPagesWithContext.
func (mr *MockIVSAPIMockRecorder) ListChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPagesWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListChannelsPagesWithContext), varargs...)
}

// ListChannelsRequest mocks base method.
func (m *MockIVSAPI) ListChannelsRequest(arg0 *ivs.ListChannelsInput) (*request.Request, *ivs.ListChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ListChannelsOutput)
	return ret0, ret1
}

// ListChannelsRequest indicates an expected call of ListChannelsRequest.
func (mr *MockIVSAPIMockRecorder) ListChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsRequest", reflect.TypeOf((*MockIVSAPI)(nil).ListChannelsRequest), arg0)
}

// ListChannelsWithContext mocks base method.
func (m *MockIVSAPI) ListChannelsWithContext(arg0 context.Context, arg1 *ivs.ListChannelsInput, arg2 ...request.Option) (*ivs.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsWithContext indicates an expected call of ListChannelsWithContext.
func (mr *MockIVSAPIMockRecorder) ListChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListChannelsWithContext), varargs...)
}

// ListPlaybackKeyPairs mocks base method.
func (m *MockIVSAPI) ListPlaybackKeyPairs(arg0 *ivs.ListPlaybackKeyPairsInput) (*ivs.ListPlaybackKeyPairsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaybackKeyPairs", arg0)
	ret0, _ := ret[0].(*ivs.ListPlaybackKeyPairsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaybackKeyPairs indicates an expected call of ListPlaybackKeyPairs.
func (mr *MockIVSAPIMockRecorder) ListPlaybackKeyPairs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackKeyPairs", reflect.TypeOf((*MockIVSAPI)(nil).ListPlaybackKeyPairs), arg0)
}

// ListPlaybackKeyPairsPages mocks base method.
func (m *MockIVSAPI) ListPlaybackKeyPairsPages(arg0 *ivs.ListPlaybackKeyPairsInput, arg1 func(*ivs.ListPlaybackKeyPairsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaybackKeyPairsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlaybackKeyPairsPages indicates an expected call of ListPlaybackKeyPairsPages.
func (mr *MockIVSAPIMockRecorder) ListPlaybackKeyPairsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackKeyPairsPages", reflect.TypeOf((*MockIVSAPI)(nil).ListPlaybackKeyPairsPages), arg0, arg1)
}

// ListPlaybackKeyPairsPagesWithContext mocks base method.
func (m *MockIVSAPI) ListPlaybackKeyPairsPagesWithContext(arg0 context.Context, arg1 *ivs.ListPlaybackKeyPairsInput, arg2 func(*ivs.ListPlaybackKeyPairsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlaybackKeyPairsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlaybackKeyPairsPagesWithContext indicates an expected call of ListPlaybackKeyPairsPagesWithContext.
func (mr *MockIVSAPIMockRecorder) ListPlaybackKeyPairsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackKeyPairsPagesWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListPlaybackKeyPairsPagesWithContext), varargs...)
}

// ListPlaybackKeyPairsRequest mocks base method.
func (m *MockIVSAPI) ListPlaybackKeyPairsRequest(arg0 *ivs.ListPlaybackKeyPairsInput) (*request.Request, *ivs.ListPlaybackKeyPairsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaybackKeyPairsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ListPlaybackKeyPairsOutput)
	return ret0, ret1
}

// ListPlaybackKeyPairsRequest indicates an expected call of ListPlaybackKeyPairsRequest.
func (mr *MockIVSAPIMockRecorder) ListPlaybackKeyPairsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackKeyPairsRequest", reflect.TypeOf((*MockIVSAPI)(nil).ListPlaybackKeyPairsRequest), arg0)
}

// ListPlaybackKeyPairsWithContext mocks base method.
func (m *MockIVSAPI) ListPlaybackKeyPairsWithContext(arg0 context.Context, arg1 *ivs.ListPlaybackKeyPairsInput, arg2 ...request.Option) (*ivs.ListPlaybackKeyPairsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlaybackKeyPairsWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ListPlaybackKeyPairsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaybackKeyPairsWithContext indicates an expected call of ListPlaybackKeyPairsWithContext.
func (mr *MockIVSAPIMockRecorder) ListPlaybackKeyPairsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackKeyPairsWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListPlaybackKeyPairsWithContext), varargs...)
}

// ListRecordingConfigurations mocks base method.
func (m *MockIVSAPI) ListRecordingConfigurations(arg0 *ivs.ListRecordingConfigurationsInput) (*ivs.ListRecordingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordingConfigurations", arg0)
	ret0, _ := ret[0].(*ivs.ListRecordingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordingConfigurations indicates an expected call of ListRecordingConfigurations.
func (mr *MockIVSAPIMockRecorder) ListRecordingConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordingConfigurations", reflect.TypeOf((*MockIVSAPI)(nil).ListRecordingConfigurations), arg0)
}

// ListRecordingConfigurationsPages mocks base method.
func (m *MockIVSAPI) ListRecordingConfigurationsPages(arg0 *ivs.ListRecordingConfigurationsInput, arg1 func(*ivs.ListRecordingConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordingConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecordingConfigurationsPages indicates an expected call of ListRecordingConfigurationsPages.
func (mr *MockIVSAPIMockRecorder) ListRecordingConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordingConfigurationsPages", reflect.TypeOf((*MockIVSAPI)(nil).ListRecordingConfigurationsPages), arg0, arg1)
}

// ListRecordingConfigurationsPagesWithContext mocks base method.
func (m *MockIVSAPI) ListRecordingConfigurationsPagesWithContext(arg0 context.Context, arg1 *ivs.ListRecordingConfigurationsInput, arg2 func(*ivs.ListRecordingConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecordingConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecordingConfigurationsPagesWithContext indicates an expected call of ListRecordingConfigurationsPagesWithContext.
func (mr *MockIVSAPIMockRecorder) ListRecordingConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordingConfigurationsPagesWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListRecordingConfigurationsPagesWithContext), varargs...)
}

// ListRecordingConfigurationsRequest mocks base method.
func (m *MockIVSAPI) ListRecordingConfigurationsRequest(arg0 *ivs.ListRecordingConfigurationsInput) (*request.Request, *ivs.ListRecordingConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordingConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ListRecordingConfigurationsOutput)
	return ret0, ret1
}

// ListRecordingConfigurationsRequest indicates an expected call of ListRecordingConfigurationsRequest.
func (mr *MockIVSAPIMockRecorder) ListRecordingConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordingConfigurationsRequest", reflect.TypeOf((*MockIVSAPI)(nil).ListRecordingConfigurationsRequest), arg0)
}

// ListRecordingConfigurationsWithContext mocks base method.
func (m *MockIVSAPI) ListRecordingConfigurationsWithContext(arg0 context.Context, arg1 *ivs.ListRecordingConfigurationsInput, arg2 ...request.Option) (*ivs.ListRecordingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecordingConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ListRecordingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordingConfigurationsWithContext indicates an expected call of ListRecordingConfigurationsWithContext.
func (mr *MockIVSAPIMockRecorder) ListRecordingConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordingConfigurationsWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListRecordingConfigurationsWithContext), varargs...)
}

// ListStreamKeys mocks base method.
func (m *MockIVSAPI) ListStreamKeys(arg0 *ivs.ListStreamKeysInput) (*ivs.ListStreamKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamKeys", arg0)
	ret0, _ := ret[0].(*ivs.ListStreamKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamKeys indicates an expected call of ListStreamKeys.
func (mr *MockIVSAPIMockRecorder) ListStreamKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamKeys", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamKeys), arg0)
}

// ListStreamKeysPages mocks base method.
func (m *MockIVSAPI) ListStreamKeysPages(arg0 *ivs.ListStreamKeysInput, arg1 func(*ivs.ListStreamKeysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamKeysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamKeysPages indicates an expected call of ListStreamKeysPages.
func (mr *MockIVSAPIMockRecorder) ListStreamKeysPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamKeysPages", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamKeysPages), arg0, arg1)
}

// ListStreamKeysPagesWithContext mocks base method.
func (m *MockIVSAPI) ListStreamKeysPagesWithContext(arg0 context.Context, arg1 *ivs.ListStreamKeysInput, arg2 func(*ivs.ListStreamKeysOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamKeysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamKeysPagesWithContext indicates an expected call of ListStreamKeysPagesWithContext.
func (mr *MockIVSAPIMockRecorder) ListStreamKeysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamKeysPagesWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamKeysPagesWithContext), varargs...)
}

// ListStreamKeysRequest mocks base method.
func (m *MockIVSAPI) ListStreamKeysRequest(arg0 *ivs.ListStreamKeysInput) (*request.Request, *ivs.ListStreamKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ListStreamKeysOutput)
	return ret0, ret1
}

// ListStreamKeysRequest indicates an expected call of ListStreamKeysRequest.
func (mr *MockIVSAPIMockRecorder) ListStreamKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamKeysRequest", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamKeysRequest), arg0)
}

// ListStreamKeysWithContext mocks base method.
func (m *MockIVSAPI) ListStreamKeysWithContext(arg0 context.Context, arg1 *ivs.ListStreamKeysInput, arg2 ...request.Option) (*ivs.ListStreamKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamKeysWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ListStreamKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamKeysWithContext indicates an expected call of ListStreamKeysWithContext.
func (mr *MockIVSAPIMockRecorder) ListStreamKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamKeysWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamKeysWithContext), varargs...)
}

// ListStreamSessions mocks base method.
func (m *MockIVSAPI) ListStreamSessions(arg0 *ivs.ListStreamSessionsInput) (*ivs.ListStreamSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamSessions", arg0)
	ret0, _ := ret[0].(*ivs.ListStreamSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamSessions indicates an expected call of ListStreamSessions.
func (mr *MockIVSAPIMockRecorder) ListStreamSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamSessions", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamSessions), arg0)
}

// ListStreamSessionsPages mocks base method.
func (m *MockIVSAPI) ListStreamSessionsPages(arg0 *ivs.ListStreamSessionsInput, arg1 func(*ivs.ListStreamSessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamSessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamSessionsPages indicates an expected call of ListStreamSessionsPages.
func (mr *MockIVSAPIMockRecorder) ListStreamSessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamSessionsPages", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamSessionsPages), arg0, arg1)
}

// ListStreamSessionsPagesWithContext mocks base method.
func (m *MockIVSAPI) ListStreamSessionsPagesWithContext(arg0 context.Context, arg1 *ivs.ListStreamSessionsInput, arg2 func(*ivs.ListStreamSessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamSessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamSessionsPagesWithContext indicates an expected call of ListStreamSessionsPagesWithContext.
func (mr *MockIVSAPIMockRecorder) ListStreamSessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamSessionsPagesWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamSessionsPagesWithContext), varargs...)
}

// ListStreamSessionsRequest mocks base method.
func (m *MockIVSAPI) ListStreamSessionsRequest(arg0 *ivs.ListStreamSessionsInput) (*request.Request, *ivs.ListStreamSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ListStreamSessionsOutput)
	return ret0, ret1
}

// ListStreamSessionsRequest indicates an expected call of ListStreamSessionsRequest.
func (mr *MockIVSAPIMockRecorder) ListStreamSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamSessionsRequest", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamSessionsRequest), arg0)
}

// ListStreamSessionsWithContext mocks base method.
func (m *MockIVSAPI) ListStreamSessionsWithContext(arg0 context.Context, arg1 *ivs.ListStreamSessionsInput, arg2 ...request.Option) (*ivs.ListStreamSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ListStreamSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamSessionsWithContext indicates an expected call of ListStreamSessionsWithContext.
func (mr *MockIVSAPIMockRecorder) ListStreamSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamSessionsWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamSessionsWithContext), varargs...)
}

// ListStreams mocks base method.
func (m *MockIVSAPI) ListStreams(arg0 *ivs.ListStreamsInput) (*ivs.ListStreamsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreams", arg0)
	ret0, _ := ret[0].(*ivs.ListStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreams indicates an expected call of ListStreams.
func (mr *MockIVSAPIMockRecorder) ListStreams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockIVSAPI)(nil).ListStreams), arg0)
}

// ListStreamsPages mocks base method.
func (m *MockIVSAPI) ListStreamsPages(arg0 *ivs.ListStreamsInput, arg1 func(*ivs.ListStreamsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamsPages indicates an expected call of ListStreamsPages.
func (mr *MockIVSAPIMockRecorder) ListStreamsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamsPages", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamsPages), arg0, arg1)
}

// ListStreamsPagesWithContext mocks base method.
func (m *MockIVSAPI) ListStreamsPagesWithContext(arg0 context.Context, arg1 *ivs.ListStreamsInput, arg2 func(*ivs.ListStreamsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamsPagesWithContext indicates an expected call of ListStreamsPagesWithContext.
func (mr *MockIVSAPIMockRecorder) ListStreamsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamsPagesWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamsPagesWithContext), varargs...)
}

// ListStreamsRequest mocks base method.
func (m *MockIVSAPI) ListStreamsRequest(arg0 *ivs.ListStreamsInput) (*request.Request, *ivs.ListStreamsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ListStreamsOutput)
	return ret0, ret1
}

// ListStreamsRequest indicates an expected call of ListStreamsRequest.
func (mr *MockIVSAPIMockRecorder) ListStreamsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamsRequest", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamsRequest), arg0)
}

// ListStreamsWithContext mocks base method.
func (m *MockIVSAPI) ListStreamsWithContext(arg0 context.Context, arg1 *ivs.ListStreamsInput, arg2 ...request.Option) (*ivs.ListStreamsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamsWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ListStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamsWithContext indicates an expected call of ListStreamsWithContext.
func (mr *MockIVSAPIMockRecorder) ListStreamsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamsWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListStreamsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockIVSAPI) ListTagsForResource(arg0 *ivs.ListTagsForResourceInput) (*ivs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*ivs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockIVSAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIVSAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockIVSAPI) ListTagsForResourceRequest(arg0 *ivs.ListTagsForResourceInput) (*request.Request, *ivs.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockIVSAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIVSAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockIVSAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *ivs.ListTagsForResourceInput, arg2 ...request.Option) (*ivs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockIVSAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIVSAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutMetadata mocks base method.
func (m *MockIVSAPI) PutMetadata(arg0 *ivs.PutMetadataInput) (*ivs.PutMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadata", arg0)
	ret0, _ := ret[0].(*ivs.PutMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetadata indicates an expected call of PutMetadata.
func (mr *MockIVSAPIMockRecorder) PutMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadata", reflect.TypeOf((*MockIVSAPI)(nil).PutMetadata), arg0)
}

// PutMetadataRequest mocks base method.
func (m *MockIVSAPI) PutMetadataRequest(arg0 *ivs.PutMetadataInput) (*request.Request, *ivs.PutMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.PutMetadataOutput)
	return ret0, ret1
}

// PutMetadataRequest indicates an expected call of PutMetadataRequest.
func (mr *MockIVSAPIMockRecorder) PutMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadataRequest", reflect.TypeOf((*MockIVSAPI)(nil).PutMetadataRequest), arg0)
}

// PutMetadataWithContext mocks base method.
func (m *MockIVSAPI) PutMetadataWithContext(arg0 context.Context, arg1 *ivs.PutMetadataInput, arg2 ...request.Option) (*ivs.PutMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.PutMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetadataWithContext indicates an expected call of PutMetadataWithContext.
func (mr *MockIVSAPIMockRecorder) PutMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadataWithContext", reflect.TypeOf((*MockIVSAPI)(nil).PutMetadataWithContext), varargs...)
}

// StopStream mocks base method.
func (m *MockIVSAPI) StopStream(arg0 *ivs.StopStreamInput) (*ivs.StopStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStream", arg0)
	ret0, _ := ret[0].(*ivs.StopStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStream indicates an expected call of StopStream.
func (mr *MockIVSAPIMockRecorder) StopStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStream", reflect.TypeOf((*MockIVSAPI)(nil).StopStream), arg0)
}

// StopStreamRequest mocks base method.
func (m *MockIVSAPI) StopStreamRequest(arg0 *ivs.StopStreamInput) (*request.Request, *ivs.StopStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.StopStreamOutput)
	return ret0, ret1
}

// StopStreamRequest indicates an expected call of StopStreamRequest.
func (mr *MockIVSAPIMockRecorder) StopStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStreamRequest", reflect.TypeOf((*MockIVSAPI)(nil).StopStreamRequest), arg0)
}

// StopStreamWithContext mocks base method.
func (m *MockIVSAPI) StopStreamWithContext(arg0 context.Context, arg1 *ivs.StopStreamInput, arg2 ...request.Option) (*ivs.StopStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopStreamWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.StopStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStreamWithContext indicates an expected call of StopStreamWithContext.
func (mr *MockIVSAPIMockRecorder) StopStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStreamWithContext", reflect.TypeOf((*MockIVSAPI)(nil).StopStreamWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockIVSAPI) TagResource(arg0 *ivs.TagResourceInput) (*ivs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ivs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockIVSAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIVSAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockIVSAPI) TagResourceRequest(arg0 *ivs.TagResourceInput) (*request.Request, *ivs.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockIVSAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIVSAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockIVSAPI) TagResourceWithContext(arg0 context.Context, arg1 *ivs.TagResourceInput, arg2 ...request.Option) (*ivs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockIVSAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIVSAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockIVSAPI) UntagResource(arg0 *ivs.UntagResourceInput) (*ivs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ivs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockIVSAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIVSAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockIVSAPI) UntagResourceRequest(arg0 *ivs.UntagResourceInput) (*request.Request, *ivs.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockIVSAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIVSAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockIVSAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ivs.UntagResourceInput, arg2 ...request.Option) (*ivs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockIVSAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIVSAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateChannel mocks base method.
func (m *MockIVSAPI) UpdateChannel(arg0 *ivs.UpdateChannelInput) (*ivs.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*ivs.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockIVSAPIMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockIVSAPI)(nil).UpdateChannel), arg0)
}

// UpdateChannelRequest mocks base method.
func (m *MockIVSAPI) UpdateChannelRequest(arg0 *ivs.UpdateChannelInput) (*request.Request, *ivs.UpdateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ivs.UpdateChannelOutput)
	return ret0, ret1
}

// UpdateChannelRequest indicates an expected call of UpdateChannelRequest.
func (mr *MockIVSAPIMockRecorder) UpdateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelRequest", reflect.TypeOf((*MockIVSAPI)(nil).UpdateChannelRequest), arg0)
}

// UpdateChannelWithContext mocks base method.
func (m *MockIVSAPI) UpdateChannelWithContext(arg0 context.Context, arg1 *ivs.UpdateChannelInput, arg2 ...request.Option) (*ivs.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ivs.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelWithContext indicates an expected call of UpdateChannelWithContext.
func (mr *MockIVSAPIMockRecorder) UpdateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelWithContext", reflect.TypeOf((*MockIVSAPI)(nil).UpdateChannelWithContext), varargs...)
}

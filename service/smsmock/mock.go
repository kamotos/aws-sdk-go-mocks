// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/sms/smsiface (interfaces: SMSAPI)

// Package smsmock is a generated GoMock package.
package smsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	sms "github.com/aws/aws-sdk-go/service/sms"
	gomock "github.com/golang/mock/gomock"
)

// MockSMSAPI is a mock of SMSAPI interface.
type MockSMSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSMSAPIMockRecorder
}

// MockSMSAPIMockRecorder is the mock recorder for MockSMSAPI.
type MockSMSAPIMockRecorder struct {
	mock *MockSMSAPI
}

// NewMockSMSAPI creates a new mock instance.
func NewMockSMSAPI(ctrl *gomock.Controller) *MockSMSAPI {
	mock := &MockSMSAPI{ctrl: ctrl}
	mock.recorder = &MockSMSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMSAPI) EXPECT() *MockSMSAPIMockRecorder {
	return m.recorder
}

// CreateApp mocks base method.
func (m *MockSMSAPI) CreateApp(arg0 *sms.CreateAppInput) (*sms.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", arg0)
	ret0, _ := ret[0].(*sms.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockSMSAPIMockRecorder) CreateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockSMSAPI)(nil).CreateApp), arg0)
}

// CreateAppRequest mocks base method.
func (m *MockSMSAPI) CreateAppRequest(arg0 *sms.CreateAppInput) (*request.Request, *sms.CreateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.CreateAppOutput)
	return ret0, ret1
}

// CreateAppRequest indicates an expected call of CreateAppRequest.
func (mr *MockSMSAPIMockRecorder) CreateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppRequest", reflect.TypeOf((*MockSMSAPI)(nil).CreateAppRequest), arg0)
}

// CreateAppWithContext mocks base method.
func (m *MockSMSAPI) CreateAppWithContext(arg0 context.Context, arg1 *sms.CreateAppInput, arg2 ...request.Option) (*sms.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppWithContext", varargs...)
	ret0, _ := ret[0].(*sms.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppWithContext indicates an expected call of CreateAppWithContext.
func (mr *MockSMSAPIMockRecorder) CreateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppWithContext", reflect.TypeOf((*MockSMSAPI)(nil).CreateAppWithContext), varargs...)
}

// CreateReplicationJob mocks base method.
func (m *MockSMSAPI) CreateReplicationJob(arg0 *sms.CreateReplicationJobInput) (*sms.CreateReplicationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationJob", arg0)
	ret0, _ := ret[0].(*sms.CreateReplicationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationJob indicates an expected call of CreateReplicationJob.
func (mr *MockSMSAPIMockRecorder) CreateReplicationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationJob", reflect.TypeOf((*MockSMSAPI)(nil).CreateReplicationJob), arg0)
}

// CreateReplicationJobRequest mocks base method.
func (m *MockSMSAPI) CreateReplicationJobRequest(arg0 *sms.CreateReplicationJobInput) (*request.Request, *sms.CreateReplicationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.CreateReplicationJobOutput)
	return ret0, ret1
}

// CreateReplicationJobRequest indicates an expected call of CreateReplicationJobRequest.
func (mr *MockSMSAPIMockRecorder) CreateReplicationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationJobRequest", reflect.TypeOf((*MockSMSAPI)(nil).CreateReplicationJobRequest), arg0)
}

// CreateReplicationJobWithContext mocks base method.
func (m *MockSMSAPI) CreateReplicationJobWithContext(arg0 context.Context, arg1 *sms.CreateReplicationJobInput, arg2 ...request.Option) (*sms.CreateReplicationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sms.CreateReplicationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationJobWithContext indicates an expected call of CreateReplicationJobWithContext.
func (mr *MockSMSAPIMockRecorder) CreateReplicationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationJobWithContext", reflect.TypeOf((*MockSMSAPI)(nil).CreateReplicationJobWithContext), varargs...)
}

// DeleteApp mocks base method.
func (m *MockSMSAPI) DeleteApp(arg0 *sms.DeleteAppInput) (*sms.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0)
	ret0, _ := ret[0].(*sms.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockSMSAPIMockRecorder) DeleteApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockSMSAPI)(nil).DeleteApp), arg0)
}

// DeleteAppLaunchConfiguration mocks base method.
func (m *MockSMSAPI) DeleteAppLaunchConfiguration(arg0 *sms.DeleteAppLaunchConfigurationInput) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*sms.DeleteAppLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppLaunchConfiguration indicates an expected call of DeleteAppLaunchConfiguration.
func (mr *MockSMSAPIMockRecorder) DeleteAppLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppLaunchConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppLaunchConfiguration), arg0)
}

// DeleteAppLaunchConfigurationRequest mocks base method.
func (m *MockSMSAPI) DeleteAppLaunchConfigurationRequest(arg0 *sms.DeleteAppLaunchConfigurationInput) (*request.Request, *sms.DeleteAppLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.DeleteAppLaunchConfigurationOutput)
	return ret0, ret1
}

// DeleteAppLaunchConfigurationRequest indicates an expected call of DeleteAppLaunchConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) DeleteAppLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppLaunchConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppLaunchConfigurationRequest), arg0)
}

// DeleteAppLaunchConfigurationWithContext mocks base method.
func (m *MockSMSAPI) DeleteAppLaunchConfigurationWithContext(arg0 context.Context, arg1 *sms.DeleteAppLaunchConfigurationInput, arg2 ...request.Option) (*sms.DeleteAppLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.DeleteAppLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppLaunchConfigurationWithContext indicates an expected call of DeleteAppLaunchConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) DeleteAppLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppLaunchConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppLaunchConfigurationWithContext), varargs...)
}

// DeleteAppReplicationConfiguration mocks base method.
func (m *MockSMSAPI) DeleteAppReplicationConfiguration(arg0 *sms.DeleteAppReplicationConfigurationInput) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*sms.DeleteAppReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppReplicationConfiguration indicates an expected call of DeleteAppReplicationConfiguration.
func (mr *MockSMSAPIMockRecorder) DeleteAppReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppReplicationConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppReplicationConfiguration), arg0)
}

// DeleteAppReplicationConfigurationRequest mocks base method.
func (m *MockSMSAPI) DeleteAppReplicationConfigurationRequest(arg0 *sms.DeleteAppReplicationConfigurationInput) (*request.Request, *sms.DeleteAppReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.DeleteAppReplicationConfigurationOutput)
	return ret0, ret1
}

// DeleteAppReplicationConfigurationRequest indicates an expected call of DeleteAppReplicationConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) DeleteAppReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppReplicationConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppReplicationConfigurationRequest), arg0)
}

// DeleteAppReplicationConfigurationWithContext mocks base method.
func (m *MockSMSAPI) DeleteAppReplicationConfigurationWithContext(arg0 context.Context, arg1 *sms.DeleteAppReplicationConfigurationInput, arg2 ...request.Option) (*sms.DeleteAppReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.DeleteAppReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppReplicationConfigurationWithContext indicates an expected call of DeleteAppReplicationConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) DeleteAppReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppReplicationConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppReplicationConfigurationWithContext), varargs...)
}

// DeleteAppRequest mocks base method.
func (m *MockSMSAPI) DeleteAppRequest(arg0 *sms.DeleteAppInput) (*request.Request, *sms.DeleteAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.DeleteAppOutput)
	return ret0, ret1
}

// DeleteAppRequest indicates an expected call of DeleteAppRequest.
func (mr *MockSMSAPIMockRecorder) DeleteAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppRequest", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppRequest), arg0)
}

// DeleteAppValidationConfiguration mocks base method.
func (m *MockSMSAPI) DeleteAppValidationConfiguration(arg0 *sms.DeleteAppValidationConfigurationInput) (*sms.DeleteAppValidationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppValidationConfiguration", arg0)
	ret0, _ := ret[0].(*sms.DeleteAppValidationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppValidationConfiguration indicates an expected call of DeleteAppValidationConfiguration.
func (mr *MockSMSAPIMockRecorder) DeleteAppValidationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppValidationConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppValidationConfiguration), arg0)
}

// DeleteAppValidationConfigurationRequest mocks base method.
func (m *MockSMSAPI) DeleteAppValidationConfigurationRequest(arg0 *sms.DeleteAppValidationConfigurationInput) (*request.Request, *sms.DeleteAppValidationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppValidationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.DeleteAppValidationConfigurationOutput)
	return ret0, ret1
}

// DeleteAppValidationConfigurationRequest indicates an expected call of DeleteAppValidationConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) DeleteAppValidationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppValidationConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppValidationConfigurationRequest), arg0)
}

// DeleteAppValidationConfigurationWithContext mocks base method.
func (m *MockSMSAPI) DeleteAppValidationConfigurationWithContext(arg0 context.Context, arg1 *sms.DeleteAppValidationConfigurationInput, arg2 ...request.Option) (*sms.DeleteAppValidationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppValidationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.DeleteAppValidationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppValidationConfigurationWithContext indicates an expected call of DeleteAppValidationConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) DeleteAppValidationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppValidationConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppValidationConfigurationWithContext), varargs...)
}

// DeleteAppWithContext mocks base method.
func (m *MockSMSAPI) DeleteAppWithContext(arg0 context.Context, arg1 *sms.DeleteAppInput, arg2 ...request.Option) (*sms.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppWithContext", varargs...)
	ret0, _ := ret[0].(*sms.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppWithContext indicates an expected call of DeleteAppWithContext.
func (mr *MockSMSAPIMockRecorder) DeleteAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppWithContext", reflect.TypeOf((*MockSMSAPI)(nil).DeleteAppWithContext), varargs...)
}

// DeleteReplicationJob mocks base method.
func (m *MockSMSAPI) DeleteReplicationJob(arg0 *sms.DeleteReplicationJobInput) (*sms.DeleteReplicationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationJob", arg0)
	ret0, _ := ret[0].(*sms.DeleteReplicationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationJob indicates an expected call of DeleteReplicationJob.
func (mr *MockSMSAPIMockRecorder) DeleteReplicationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationJob", reflect.TypeOf((*MockSMSAPI)(nil).DeleteReplicationJob), arg0)
}

// DeleteReplicationJobRequest mocks base method.
func (m *MockSMSAPI) DeleteReplicationJobRequest(arg0 *sms.DeleteReplicationJobInput) (*request.Request, *sms.DeleteReplicationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.DeleteReplicationJobOutput)
	return ret0, ret1
}

// DeleteReplicationJobRequest indicates an expected call of DeleteReplicationJobRequest.
func (mr *MockSMSAPIMockRecorder) DeleteReplicationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationJobRequest", reflect.TypeOf((*MockSMSAPI)(nil).DeleteReplicationJobRequest), arg0)
}

// DeleteReplicationJobWithContext mocks base method.
func (m *MockSMSAPI) DeleteReplicationJobWithContext(arg0 context.Context, arg1 *sms.DeleteReplicationJobInput, arg2 ...request.Option) (*sms.DeleteReplicationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sms.DeleteReplicationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationJobWithContext indicates an expected call of DeleteReplicationJobWithContext.
func (mr *MockSMSAPIMockRecorder) DeleteReplicationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationJobWithContext", reflect.TypeOf((*MockSMSAPI)(nil).DeleteReplicationJobWithContext), varargs...)
}

// DeleteServerCatalog mocks base method.
func (m *MockSMSAPI) DeleteServerCatalog(arg0 *sms.DeleteServerCatalogInput) (*sms.DeleteServerCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerCatalog", arg0)
	ret0, _ := ret[0].(*sms.DeleteServerCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServerCatalog indicates an expected call of DeleteServerCatalog.
func (mr *MockSMSAPIMockRecorder) DeleteServerCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerCatalog", reflect.TypeOf((*MockSMSAPI)(nil).DeleteServerCatalog), arg0)
}

// DeleteServerCatalogRequest mocks base method.
func (m *MockSMSAPI) DeleteServerCatalogRequest(arg0 *sms.DeleteServerCatalogInput) (*request.Request, *sms.DeleteServerCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.DeleteServerCatalogOutput)
	return ret0, ret1
}

// DeleteServerCatalogRequest indicates an expected call of DeleteServerCatalogRequest.
func (mr *MockSMSAPIMockRecorder) DeleteServerCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerCatalogRequest", reflect.TypeOf((*MockSMSAPI)(nil).DeleteServerCatalogRequest), arg0)
}

// DeleteServerCatalogWithContext mocks base method.
func (m *MockSMSAPI) DeleteServerCatalogWithContext(arg0 context.Context, arg1 *sms.DeleteServerCatalogInput, arg2 ...request.Option) (*sms.DeleteServerCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServerCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*sms.DeleteServerCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServerCatalogWithContext indicates an expected call of DeleteServerCatalogWithContext.
func (mr *MockSMSAPIMockRecorder) DeleteServerCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerCatalogWithContext", reflect.TypeOf((*MockSMSAPI)(nil).DeleteServerCatalogWithContext), varargs...)
}

// DisassociateConnector mocks base method.
func (m *MockSMSAPI) DisassociateConnector(arg0 *sms.DisassociateConnectorInput) (*sms.DisassociateConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateConnector", arg0)
	ret0, _ := ret[0].(*sms.DisassociateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateConnector indicates an expected call of DisassociateConnector.
func (mr *MockSMSAPIMockRecorder) DisassociateConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnector", reflect.TypeOf((*MockSMSAPI)(nil).DisassociateConnector), arg0)
}

// DisassociateConnectorRequest mocks base method.
func (m *MockSMSAPI) DisassociateConnectorRequest(arg0 *sms.DisassociateConnectorInput) (*request.Request, *sms.DisassociateConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.DisassociateConnectorOutput)
	return ret0, ret1
}

// DisassociateConnectorRequest indicates an expected call of DisassociateConnectorRequest.
func (mr *MockSMSAPIMockRecorder) DisassociateConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectorRequest", reflect.TypeOf((*MockSMSAPI)(nil).DisassociateConnectorRequest), arg0)
}

// DisassociateConnectorWithContext mocks base method.
func (m *MockSMSAPI) DisassociateConnectorWithContext(arg0 context.Context, arg1 *sms.DisassociateConnectorInput, arg2 ...request.Option) (*sms.DisassociateConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*sms.DisassociateConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateConnectorWithContext indicates an expected call of DisassociateConnectorWithContext.
func (mr *MockSMSAPIMockRecorder) DisassociateConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectorWithContext", reflect.TypeOf((*MockSMSAPI)(nil).DisassociateConnectorWithContext), varargs...)
}

// GenerateChangeSet mocks base method.
func (m *MockSMSAPI) GenerateChangeSet(arg0 *sms.GenerateChangeSetInput) (*sms.GenerateChangeSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChangeSet", arg0)
	ret0, _ := ret[0].(*sms.GenerateChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChangeSet indicates an expected call of GenerateChangeSet.
func (mr *MockSMSAPIMockRecorder) GenerateChangeSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChangeSet", reflect.TypeOf((*MockSMSAPI)(nil).GenerateChangeSet), arg0)
}

// GenerateChangeSetRequest mocks base method.
func (m *MockSMSAPI) GenerateChangeSetRequest(arg0 *sms.GenerateChangeSetInput) (*request.Request, *sms.GenerateChangeSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChangeSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GenerateChangeSetOutput)
	return ret0, ret1
}

// GenerateChangeSetRequest indicates an expected call of GenerateChangeSetRequest.
func (mr *MockSMSAPIMockRecorder) GenerateChangeSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChangeSetRequest", reflect.TypeOf((*MockSMSAPI)(nil).GenerateChangeSetRequest), arg0)
}

// GenerateChangeSetWithContext mocks base method.
func (m *MockSMSAPI) GenerateChangeSetWithContext(arg0 context.Context, arg1 *sms.GenerateChangeSetInput, arg2 ...request.Option) (*sms.GenerateChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateChangeSetWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GenerateChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChangeSetWithContext indicates an expected call of GenerateChangeSetWithContext.
func (mr *MockSMSAPIMockRecorder) GenerateChangeSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChangeSetWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GenerateChangeSetWithContext), varargs...)
}

// GenerateTemplate mocks base method.
func (m *MockSMSAPI) GenerateTemplate(arg0 *sms.GenerateTemplateInput) (*sms.GenerateTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTemplate", arg0)
	ret0, _ := ret[0].(*sms.GenerateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTemplate indicates an expected call of GenerateTemplate.
func (mr *MockSMSAPIMockRecorder) GenerateTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTemplate", reflect.TypeOf((*MockSMSAPI)(nil).GenerateTemplate), arg0)
}

// GenerateTemplateRequest mocks base method.
func (m *MockSMSAPI) GenerateTemplateRequest(arg0 *sms.GenerateTemplateInput) (*request.Request, *sms.GenerateTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GenerateTemplateOutput)
	return ret0, ret1
}

// GenerateTemplateRequest indicates an expected call of GenerateTemplateRequest.
func (mr *MockSMSAPIMockRecorder) GenerateTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTemplateRequest", reflect.TypeOf((*MockSMSAPI)(nil).GenerateTemplateRequest), arg0)
}

// GenerateTemplateWithContext mocks base method.
func (m *MockSMSAPI) GenerateTemplateWithContext(arg0 context.Context, arg1 *sms.GenerateTemplateInput, arg2 ...request.Option) (*sms.GenerateTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GenerateTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTemplateWithContext indicates an expected call of GenerateTemplateWithContext.
func (mr *MockSMSAPIMockRecorder) GenerateTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTemplateWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GenerateTemplateWithContext), varargs...)
}

// GetApp mocks base method.
func (m *MockSMSAPI) GetApp(arg0 *sms.GetAppInput) (*sms.GetAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0)
	ret0, _ := ret[0].(*sms.GetAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockSMSAPIMockRecorder) GetApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockSMSAPI)(nil).GetApp), arg0)
}

// GetAppLaunchConfiguration mocks base method.
func (m *MockSMSAPI) GetAppLaunchConfiguration(arg0 *sms.GetAppLaunchConfigurationInput) (*sms.GetAppLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*sms.GetAppLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppLaunchConfiguration indicates an expected call of GetAppLaunchConfiguration.
func (mr *MockSMSAPIMockRecorder) GetAppLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppLaunchConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).GetAppLaunchConfiguration), arg0)
}

// GetAppLaunchConfigurationRequest mocks base method.
func (m *MockSMSAPI) GetAppLaunchConfigurationRequest(arg0 *sms.GetAppLaunchConfigurationInput) (*request.Request, *sms.GetAppLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetAppLaunchConfigurationOutput)
	return ret0, ret1
}

// GetAppLaunchConfigurationRequest indicates an expected call of GetAppLaunchConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) GetAppLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppLaunchConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetAppLaunchConfigurationRequest), arg0)
}

// GetAppLaunchConfigurationWithContext mocks base method.
func (m *MockSMSAPI) GetAppLaunchConfigurationWithContext(arg0 context.Context, arg1 *sms.GetAppLaunchConfigurationInput, arg2 ...request.Option) (*sms.GetAppLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetAppLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppLaunchConfigurationWithContext indicates an expected call of GetAppLaunchConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) GetAppLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppLaunchConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetAppLaunchConfigurationWithContext), varargs...)
}

// GetAppReplicationConfiguration mocks base method.
func (m *MockSMSAPI) GetAppReplicationConfiguration(arg0 *sms.GetAppReplicationConfigurationInput) (*sms.GetAppReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*sms.GetAppReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppReplicationConfiguration indicates an expected call of GetAppReplicationConfiguration.
func (mr *MockSMSAPIMockRecorder) GetAppReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppReplicationConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).GetAppReplicationConfiguration), arg0)
}

// GetAppReplicationConfigurationRequest mocks base method.
func (m *MockSMSAPI) GetAppReplicationConfigurationRequest(arg0 *sms.GetAppReplicationConfigurationInput) (*request.Request, *sms.GetAppReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetAppReplicationConfigurationOutput)
	return ret0, ret1
}

// GetAppReplicationConfigurationRequest indicates an expected call of GetAppReplicationConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) GetAppReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppReplicationConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetAppReplicationConfigurationRequest), arg0)
}

// GetAppReplicationConfigurationWithContext mocks base method.
func (m *MockSMSAPI) GetAppReplicationConfigurationWithContext(arg0 context.Context, arg1 *sms.GetAppReplicationConfigurationInput, arg2 ...request.Option) (*sms.GetAppReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetAppReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppReplicationConfigurationWithContext indicates an expected call of GetAppReplicationConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) GetAppReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppReplicationConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetAppReplicationConfigurationWithContext), varargs...)
}

// GetAppRequest mocks base method.
func (m *MockSMSAPI) GetAppRequest(arg0 *sms.GetAppInput) (*request.Request, *sms.GetAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetAppOutput)
	return ret0, ret1
}

// GetAppRequest indicates an expected call of GetAppRequest.
func (mr *MockSMSAPIMockRecorder) GetAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetAppRequest), arg0)
}

// GetAppValidationConfiguration mocks base method.
func (m *MockSMSAPI) GetAppValidationConfiguration(arg0 *sms.GetAppValidationConfigurationInput) (*sms.GetAppValidationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppValidationConfiguration", arg0)
	ret0, _ := ret[0].(*sms.GetAppValidationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppValidationConfiguration indicates an expected call of GetAppValidationConfiguration.
func (mr *MockSMSAPIMockRecorder) GetAppValidationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppValidationConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).GetAppValidationConfiguration), arg0)
}

// GetAppValidationConfigurationRequest mocks base method.
func (m *MockSMSAPI) GetAppValidationConfigurationRequest(arg0 *sms.GetAppValidationConfigurationInput) (*request.Request, *sms.GetAppValidationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppValidationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetAppValidationConfigurationOutput)
	return ret0, ret1
}

// GetAppValidationConfigurationRequest indicates an expected call of GetAppValidationConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) GetAppValidationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppValidationConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetAppValidationConfigurationRequest), arg0)
}

// GetAppValidationConfigurationWithContext mocks base method.
func (m *MockSMSAPI) GetAppValidationConfigurationWithContext(arg0 context.Context, arg1 *sms.GetAppValidationConfigurationInput, arg2 ...request.Option) (*sms.GetAppValidationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppValidationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetAppValidationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppValidationConfigurationWithContext indicates an expected call of GetAppValidationConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) GetAppValidationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppValidationConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetAppValidationConfigurationWithContext), varargs...)
}

// GetAppValidationOutput mocks base method.
func (m *MockSMSAPI) GetAppValidationOutput(arg0 *sms.GetAppValidationOutputInput) (*sms.GetAppValidationOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppValidationOutput", arg0)
	ret0, _ := ret[0].(*sms.GetAppValidationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppValidationOutput indicates an expected call of GetAppValidationOutput.
func (mr *MockSMSAPIMockRecorder) GetAppValidationOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppValidationOutput", reflect.TypeOf((*MockSMSAPI)(nil).GetAppValidationOutput), arg0)
}

// GetAppValidationOutputRequest mocks base method.
func (m *MockSMSAPI) GetAppValidationOutputRequest(arg0 *sms.GetAppValidationOutputInput) (*request.Request, *sms.GetAppValidationOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppValidationOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetAppValidationOutputOutput)
	return ret0, ret1
}

// GetAppValidationOutputRequest indicates an expected call of GetAppValidationOutputRequest.
func (mr *MockSMSAPIMockRecorder) GetAppValidationOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppValidationOutputRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetAppValidationOutputRequest), arg0)
}

// GetAppValidationOutputWithContext mocks base method.
func (m *MockSMSAPI) GetAppValidationOutputWithContext(arg0 context.Context, arg1 *sms.GetAppValidationOutputInput, arg2 ...request.Option) (*sms.GetAppValidationOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppValidationOutputWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetAppValidationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppValidationOutputWithContext indicates an expected call of GetAppValidationOutputWithContext.
func (mr *MockSMSAPIMockRecorder) GetAppValidationOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppValidationOutputWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetAppValidationOutputWithContext), varargs...)
}

// GetAppWithContext mocks base method.
func (m *MockSMSAPI) GetAppWithContext(arg0 context.Context, arg1 *sms.GetAppInput, arg2 ...request.Option) (*sms.GetAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppWithContext indicates an expected call of GetAppWithContext.
func (mr *MockSMSAPIMockRecorder) GetAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetAppWithContext), varargs...)
}

// GetConnectors mocks base method.
func (m *MockSMSAPI) GetConnectors(arg0 *sms.GetConnectorsInput) (*sms.GetConnectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectors", arg0)
	ret0, _ := ret[0].(*sms.GetConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectors indicates an expected call of GetConnectors.
func (mr *MockSMSAPIMockRecorder) GetConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectors", reflect.TypeOf((*MockSMSAPI)(nil).GetConnectors), arg0)
}

// GetConnectorsPages mocks base method.
func (m *MockSMSAPI) GetConnectorsPages(arg0 *sms.GetConnectorsInput, arg1 func(*sms.GetConnectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectorsPages indicates an expected call of GetConnectorsPages.
func (mr *MockSMSAPIMockRecorder) GetConnectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorsPages", reflect.TypeOf((*MockSMSAPI)(nil).GetConnectorsPages), arg0, arg1)
}

// GetConnectorsPagesWithContext mocks base method.
func (m *MockSMSAPI) GetConnectorsPagesWithContext(arg0 context.Context, arg1 *sms.GetConnectorsInput, arg2 func(*sms.GetConnectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectorsPagesWithContext indicates an expected call of GetConnectorsPagesWithContext.
func (mr *MockSMSAPIMockRecorder) GetConnectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorsPagesWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetConnectorsPagesWithContext), varargs...)
}

// GetConnectorsRequest mocks base method.
func (m *MockSMSAPI) GetConnectorsRequest(arg0 *sms.GetConnectorsInput) (*request.Request, *sms.GetConnectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetConnectorsOutput)
	return ret0, ret1
}

// GetConnectorsRequest indicates an expected call of GetConnectorsRequest.
func (mr *MockSMSAPIMockRecorder) GetConnectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorsRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetConnectorsRequest), arg0)
}

// GetConnectorsWithContext mocks base method.
func (m *MockSMSAPI) GetConnectorsWithContext(arg0 context.Context, arg1 *sms.GetConnectorsInput, arg2 ...request.Option) (*sms.GetConnectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorsWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorsWithContext indicates an expected call of GetConnectorsWithContext.
func (mr *MockSMSAPIMockRecorder) GetConnectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorsWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetConnectorsWithContext), varargs...)
}

// GetReplicationJobs mocks base method.
func (m *MockSMSAPI) GetReplicationJobs(arg0 *sms.GetReplicationJobsInput) (*sms.GetReplicationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationJobs", arg0)
	ret0, _ := ret[0].(*sms.GetReplicationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationJobs indicates an expected call of GetReplicationJobs.
func (mr *MockSMSAPIMockRecorder) GetReplicationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationJobs", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationJobs), arg0)
}

// GetReplicationJobsPages mocks base method.
func (m *MockSMSAPI) GetReplicationJobsPages(arg0 *sms.GetReplicationJobsInput, arg1 func(*sms.GetReplicationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReplicationJobsPages indicates an expected call of GetReplicationJobsPages.
func (mr *MockSMSAPIMockRecorder) GetReplicationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationJobsPages", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationJobsPages), arg0, arg1)
}

// GetReplicationJobsPagesWithContext mocks base method.
func (m *MockSMSAPI) GetReplicationJobsPagesWithContext(arg0 context.Context, arg1 *sms.GetReplicationJobsInput, arg2 func(*sms.GetReplicationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReplicationJobsPagesWithContext indicates an expected call of GetReplicationJobsPagesWithContext.
func (mr *MockSMSAPIMockRecorder) GetReplicationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationJobsPagesWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationJobsPagesWithContext), varargs...)
}

// GetReplicationJobsRequest mocks base method.
func (m *MockSMSAPI) GetReplicationJobsRequest(arg0 *sms.GetReplicationJobsInput) (*request.Request, *sms.GetReplicationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetReplicationJobsOutput)
	return ret0, ret1
}

// GetReplicationJobsRequest indicates an expected call of GetReplicationJobsRequest.
func (mr *MockSMSAPIMockRecorder) GetReplicationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationJobsRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationJobsRequest), arg0)
}

// GetReplicationJobsWithContext mocks base method.
func (m *MockSMSAPI) GetReplicationJobsWithContext(arg0 context.Context, arg1 *sms.GetReplicationJobsInput, arg2 ...request.Option) (*sms.GetReplicationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetReplicationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationJobsWithContext indicates an expected call of GetReplicationJobsWithContext.
func (mr *MockSMSAPIMockRecorder) GetReplicationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationJobsWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationJobsWithContext), varargs...)
}

// GetReplicationRuns mocks base method.
func (m *MockSMSAPI) GetReplicationRuns(arg0 *sms.GetReplicationRunsInput) (*sms.GetReplicationRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationRuns", arg0)
	ret0, _ := ret[0].(*sms.GetReplicationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationRuns indicates an expected call of GetReplicationRuns.
func (mr *MockSMSAPIMockRecorder) GetReplicationRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationRuns", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationRuns), arg0)
}

// GetReplicationRunsPages mocks base method.
func (m *MockSMSAPI) GetReplicationRunsPages(arg0 *sms.GetReplicationRunsInput, arg1 func(*sms.GetReplicationRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReplicationRunsPages indicates an expected call of GetReplicationRunsPages.
func (mr *MockSMSAPIMockRecorder) GetReplicationRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationRunsPages", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationRunsPages), arg0, arg1)
}

// GetReplicationRunsPagesWithContext mocks base method.
func (m *MockSMSAPI) GetReplicationRunsPagesWithContext(arg0 context.Context, arg1 *sms.GetReplicationRunsInput, arg2 func(*sms.GetReplicationRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReplicationRunsPagesWithContext indicates an expected call of GetReplicationRunsPagesWithContext.
func (mr *MockSMSAPIMockRecorder) GetReplicationRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationRunsPagesWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationRunsPagesWithContext), varargs...)
}

// GetReplicationRunsRequest mocks base method.
func (m *MockSMSAPI) GetReplicationRunsRequest(arg0 *sms.GetReplicationRunsInput) (*request.Request, *sms.GetReplicationRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetReplicationRunsOutput)
	return ret0, ret1
}

// GetReplicationRunsRequest indicates an expected call of GetReplicationRunsRequest.
func (mr *MockSMSAPIMockRecorder) GetReplicationRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationRunsRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationRunsRequest), arg0)
}

// GetReplicationRunsWithContext mocks base method.
func (m *MockSMSAPI) GetReplicationRunsWithContext(arg0 context.Context, arg1 *sms.GetReplicationRunsInput, arg2 ...request.Option) (*sms.GetReplicationRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationRunsWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetReplicationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationRunsWithContext indicates an expected call of GetReplicationRunsWithContext.
func (mr *MockSMSAPIMockRecorder) GetReplicationRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationRunsWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetReplicationRunsWithContext), varargs...)
}

// GetServers mocks base method.
func (m *MockSMSAPI) GetServers(arg0 *sms.GetServersInput) (*sms.GetServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers", arg0)
	ret0, _ := ret[0].(*sms.GetServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers.
func (mr *MockSMSAPIMockRecorder) GetServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockSMSAPI)(nil).GetServers), arg0)
}

// GetServersPages mocks base method.
func (m *MockSMSAPI) GetServersPages(arg0 *sms.GetServersInput, arg1 func(*sms.GetServersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetServersPages indicates an expected call of GetServersPages.
func (mr *MockSMSAPIMockRecorder) GetServersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersPages", reflect.TypeOf((*MockSMSAPI)(nil).GetServersPages), arg0, arg1)
}

// GetServersPagesWithContext mocks base method.
func (m *MockSMSAPI) GetServersPagesWithContext(arg0 context.Context, arg1 *sms.GetServersInput, arg2 func(*sms.GetServersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetServersPagesWithContext indicates an expected call of GetServersPagesWithContext.
func (mr *MockSMSAPIMockRecorder) GetServersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersPagesWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetServersPagesWithContext), varargs...)
}

// GetServersRequest mocks base method.
func (m *MockSMSAPI) GetServersRequest(arg0 *sms.GetServersInput) (*request.Request, *sms.GetServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.GetServersOutput)
	return ret0, ret1
}

// GetServersRequest indicates an expected call of GetServersRequest.
func (mr *MockSMSAPIMockRecorder) GetServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersRequest", reflect.TypeOf((*MockSMSAPI)(nil).GetServersRequest), arg0)
}

// GetServersWithContext mocks base method.
func (m *MockSMSAPI) GetServersWithContext(arg0 context.Context, arg1 *sms.GetServersInput, arg2 ...request.Option) (*sms.GetServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServersWithContext", varargs...)
	ret0, _ := ret[0].(*sms.GetServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServersWithContext indicates an expected call of GetServersWithContext.
func (mr *MockSMSAPIMockRecorder) GetServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersWithContext", reflect.TypeOf((*MockSMSAPI)(nil).GetServersWithContext), varargs...)
}

// ImportAppCatalog mocks base method.
func (m *MockSMSAPI) ImportAppCatalog(arg0 *sms.ImportAppCatalogInput) (*sms.ImportAppCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAppCatalog", arg0)
	ret0, _ := ret[0].(*sms.ImportAppCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAppCatalog indicates an expected call of ImportAppCatalog.
func (mr *MockSMSAPIMockRecorder) ImportAppCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAppCatalog", reflect.TypeOf((*MockSMSAPI)(nil).ImportAppCatalog), arg0)
}

// ImportAppCatalogRequest mocks base method.
func (m *MockSMSAPI) ImportAppCatalogRequest(arg0 *sms.ImportAppCatalogInput) (*request.Request, *sms.ImportAppCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAppCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.ImportAppCatalogOutput)
	return ret0, ret1
}

// ImportAppCatalogRequest indicates an expected call of ImportAppCatalogRequest.
func (mr *MockSMSAPIMockRecorder) ImportAppCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAppCatalogRequest", reflect.TypeOf((*MockSMSAPI)(nil).ImportAppCatalogRequest), arg0)
}

// ImportAppCatalogWithContext mocks base method.
func (m *MockSMSAPI) ImportAppCatalogWithContext(arg0 context.Context, arg1 *sms.ImportAppCatalogInput, arg2 ...request.Option) (*sms.ImportAppCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportAppCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*sms.ImportAppCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAppCatalogWithContext indicates an expected call of ImportAppCatalogWithContext.
func (mr *MockSMSAPIMockRecorder) ImportAppCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAppCatalogWithContext", reflect.TypeOf((*MockSMSAPI)(nil).ImportAppCatalogWithContext), varargs...)
}

// ImportServerCatalog mocks base method.
func (m *MockSMSAPI) ImportServerCatalog(arg0 *sms.ImportServerCatalogInput) (*sms.ImportServerCatalogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportServerCatalog", arg0)
	ret0, _ := ret[0].(*sms.ImportServerCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportServerCatalog indicates an expected call of ImportServerCatalog.
func (mr *MockSMSAPIMockRecorder) ImportServerCatalog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportServerCatalog", reflect.TypeOf((*MockSMSAPI)(nil).ImportServerCatalog), arg0)
}

// ImportServerCatalogRequest mocks base method.
func (m *MockSMSAPI) ImportServerCatalogRequest(arg0 *sms.ImportServerCatalogInput) (*request.Request, *sms.ImportServerCatalogOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportServerCatalogRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.ImportServerCatalogOutput)
	return ret0, ret1
}

// ImportServerCatalogRequest indicates an expected call of ImportServerCatalogRequest.
func (mr *MockSMSAPIMockRecorder) ImportServerCatalogRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportServerCatalogRequest", reflect.TypeOf((*MockSMSAPI)(nil).ImportServerCatalogRequest), arg0)
}

// ImportServerCatalogWithContext mocks base method.
func (m *MockSMSAPI) ImportServerCatalogWithContext(arg0 context.Context, arg1 *sms.ImportServerCatalogInput, arg2 ...request.Option) (*sms.ImportServerCatalogOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportServerCatalogWithContext", varargs...)
	ret0, _ := ret[0].(*sms.ImportServerCatalogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportServerCatalogWithContext indicates an expected call of ImportServerCatalogWithContext.
func (mr *MockSMSAPIMockRecorder) ImportServerCatalogWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportServerCatalogWithContext", reflect.TypeOf((*MockSMSAPI)(nil).ImportServerCatalogWithContext), varargs...)
}

// LaunchApp mocks base method.
func (m *MockSMSAPI) LaunchApp(arg0 *sms.LaunchAppInput) (*sms.LaunchAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchApp", arg0)
	ret0, _ := ret[0].(*sms.LaunchAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchApp indicates an expected call of LaunchApp.
func (mr *MockSMSAPIMockRecorder) LaunchApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchApp", reflect.TypeOf((*MockSMSAPI)(nil).LaunchApp), arg0)
}

// LaunchAppRequest mocks base method.
func (m *MockSMSAPI) LaunchAppRequest(arg0 *sms.LaunchAppInput) (*request.Request, *sms.LaunchAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.LaunchAppOutput)
	return ret0, ret1
}

// LaunchAppRequest indicates an expected call of LaunchAppRequest.
func (mr *MockSMSAPIMockRecorder) LaunchAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchAppRequest", reflect.TypeOf((*MockSMSAPI)(nil).LaunchAppRequest), arg0)
}

// LaunchAppWithContext mocks base method.
func (m *MockSMSAPI) LaunchAppWithContext(arg0 context.Context, arg1 *sms.LaunchAppInput, arg2 ...request.Option) (*sms.LaunchAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LaunchAppWithContext", varargs...)
	ret0, _ := ret[0].(*sms.LaunchAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchAppWithContext indicates an expected call of LaunchAppWithContext.
func (mr *MockSMSAPIMockRecorder) LaunchAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchAppWithContext", reflect.TypeOf((*MockSMSAPI)(nil).LaunchAppWithContext), varargs...)
}

// ListApps mocks base method.
func (m *MockSMSAPI) ListApps(arg0 *sms.ListAppsInput) (*sms.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0)
	ret0, _ := ret[0].(*sms.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps.
func (mr *MockSMSAPIMockRecorder) ListApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockSMSAPI)(nil).ListApps), arg0)
}

// ListAppsRequest mocks base method.
func (m *MockSMSAPI) ListAppsRequest(arg0 *sms.ListAppsInput) (*request.Request, *sms.ListAppsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.ListAppsOutput)
	return ret0, ret1
}

// ListAppsRequest indicates an expected call of ListAppsRequest.
func (mr *MockSMSAPIMockRecorder) ListAppsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsRequest", reflect.TypeOf((*MockSMSAPI)(nil).ListAppsRequest), arg0)
}

// ListAppsWithContext mocks base method.
func (m *MockSMSAPI) ListAppsWithContext(arg0 context.Context, arg1 *sms.ListAppsInput, arg2 ...request.Option) (*sms.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppsWithContext", varargs...)
	ret0, _ := ret[0].(*sms.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsWithContext indicates an expected call of ListAppsWithContext.
func (mr *MockSMSAPIMockRecorder) ListAppsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsWithContext", reflect.TypeOf((*MockSMSAPI)(nil).ListAppsWithContext), varargs...)
}

// NotifyAppValidationOutput mocks base method.
func (m *MockSMSAPI) NotifyAppValidationOutput(arg0 *sms.NotifyAppValidationOutputInput) (*sms.NotifyAppValidationOutputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAppValidationOutput", arg0)
	ret0, _ := ret[0].(*sms.NotifyAppValidationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyAppValidationOutput indicates an expected call of NotifyAppValidationOutput.
func (mr *MockSMSAPIMockRecorder) NotifyAppValidationOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAppValidationOutput", reflect.TypeOf((*MockSMSAPI)(nil).NotifyAppValidationOutput), arg0)
}

// NotifyAppValidationOutputRequest mocks base method.
func (m *MockSMSAPI) NotifyAppValidationOutputRequest(arg0 *sms.NotifyAppValidationOutputInput) (*request.Request, *sms.NotifyAppValidationOutputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAppValidationOutputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.NotifyAppValidationOutputOutput)
	return ret0, ret1
}

// NotifyAppValidationOutputRequest indicates an expected call of NotifyAppValidationOutputRequest.
func (mr *MockSMSAPIMockRecorder) NotifyAppValidationOutputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAppValidationOutputRequest", reflect.TypeOf((*MockSMSAPI)(nil).NotifyAppValidationOutputRequest), arg0)
}

// NotifyAppValidationOutputWithContext mocks base method.
func (m *MockSMSAPI) NotifyAppValidationOutputWithContext(arg0 context.Context, arg1 *sms.NotifyAppValidationOutputInput, arg2 ...request.Option) (*sms.NotifyAppValidationOutputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyAppValidationOutputWithContext", varargs...)
	ret0, _ := ret[0].(*sms.NotifyAppValidationOutputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyAppValidationOutputWithContext indicates an expected call of NotifyAppValidationOutputWithContext.
func (mr *MockSMSAPIMockRecorder) NotifyAppValidationOutputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAppValidationOutputWithContext", reflect.TypeOf((*MockSMSAPI)(nil).NotifyAppValidationOutputWithContext), varargs...)
}

// PutAppLaunchConfiguration mocks base method.
func (m *MockSMSAPI) PutAppLaunchConfiguration(arg0 *sms.PutAppLaunchConfigurationInput) (*sms.PutAppLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*sms.PutAppLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppLaunchConfiguration indicates an expected call of PutAppLaunchConfiguration.
func (mr *MockSMSAPIMockRecorder) PutAppLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppLaunchConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).PutAppLaunchConfiguration), arg0)
}

// PutAppLaunchConfigurationRequest mocks base method.
func (m *MockSMSAPI) PutAppLaunchConfigurationRequest(arg0 *sms.PutAppLaunchConfigurationInput) (*request.Request, *sms.PutAppLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.PutAppLaunchConfigurationOutput)
	return ret0, ret1
}

// PutAppLaunchConfigurationRequest indicates an expected call of PutAppLaunchConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) PutAppLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppLaunchConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).PutAppLaunchConfigurationRequest), arg0)
}

// PutAppLaunchConfigurationWithContext mocks base method.
func (m *MockSMSAPI) PutAppLaunchConfigurationWithContext(arg0 context.Context, arg1 *sms.PutAppLaunchConfigurationInput, arg2 ...request.Option) (*sms.PutAppLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAppLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.PutAppLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppLaunchConfigurationWithContext indicates an expected call of PutAppLaunchConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) PutAppLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppLaunchConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).PutAppLaunchConfigurationWithContext), varargs...)
}

// PutAppReplicationConfiguration mocks base method.
func (m *MockSMSAPI) PutAppReplicationConfiguration(arg0 *sms.PutAppReplicationConfigurationInput) (*sms.PutAppReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*sms.PutAppReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppReplicationConfiguration indicates an expected call of PutAppReplicationConfiguration.
func (mr *MockSMSAPIMockRecorder) PutAppReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppReplicationConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).PutAppReplicationConfiguration), arg0)
}

// PutAppReplicationConfigurationRequest mocks base method.
func (m *MockSMSAPI) PutAppReplicationConfigurationRequest(arg0 *sms.PutAppReplicationConfigurationInput) (*request.Request, *sms.PutAppReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.PutAppReplicationConfigurationOutput)
	return ret0, ret1
}

// PutAppReplicationConfigurationRequest indicates an expected call of PutAppReplicationConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) PutAppReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppReplicationConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).PutAppReplicationConfigurationRequest), arg0)
}

// PutAppReplicationConfigurationWithContext mocks base method.
func (m *MockSMSAPI) PutAppReplicationConfigurationWithContext(arg0 context.Context, arg1 *sms.PutAppReplicationConfigurationInput, arg2 ...request.Option) (*sms.PutAppReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAppReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.PutAppReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppReplicationConfigurationWithContext indicates an expected call of PutAppReplicationConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) PutAppReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppReplicationConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).PutAppReplicationConfigurationWithContext), varargs...)
}

// PutAppValidationConfiguration mocks base method.
func (m *MockSMSAPI) PutAppValidationConfiguration(arg0 *sms.PutAppValidationConfigurationInput) (*sms.PutAppValidationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppValidationConfiguration", arg0)
	ret0, _ := ret[0].(*sms.PutAppValidationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppValidationConfiguration indicates an expected call of PutAppValidationConfiguration.
func (mr *MockSMSAPIMockRecorder) PutAppValidationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppValidationConfiguration", reflect.TypeOf((*MockSMSAPI)(nil).PutAppValidationConfiguration), arg0)
}

// PutAppValidationConfigurationRequest mocks base method.
func (m *MockSMSAPI) PutAppValidationConfigurationRequest(arg0 *sms.PutAppValidationConfigurationInput) (*request.Request, *sms.PutAppValidationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppValidationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.PutAppValidationConfigurationOutput)
	return ret0, ret1
}

// PutAppValidationConfigurationRequest indicates an expected call of PutAppValidationConfigurationRequest.
func (mr *MockSMSAPIMockRecorder) PutAppValidationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppValidationConfigurationRequest", reflect.TypeOf((*MockSMSAPI)(nil).PutAppValidationConfigurationRequest), arg0)
}

// PutAppValidationConfigurationWithContext mocks base method.
func (m *MockSMSAPI) PutAppValidationConfigurationWithContext(arg0 context.Context, arg1 *sms.PutAppValidationConfigurationInput, arg2 ...request.Option) (*sms.PutAppValidationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAppValidationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.PutAppValidationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppValidationConfigurationWithContext indicates an expected call of PutAppValidationConfigurationWithContext.
func (mr *MockSMSAPIMockRecorder) PutAppValidationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppValidationConfigurationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).PutAppValidationConfigurationWithContext), varargs...)
}

// StartAppReplication mocks base method.
func (m *MockSMSAPI) StartAppReplication(arg0 *sms.StartAppReplicationInput) (*sms.StartAppReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppReplication", arg0)
	ret0, _ := ret[0].(*sms.StartAppReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAppReplication indicates an expected call of StartAppReplication.
func (mr *MockSMSAPIMockRecorder) StartAppReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppReplication", reflect.TypeOf((*MockSMSAPI)(nil).StartAppReplication), arg0)
}

// StartAppReplicationRequest mocks base method.
func (m *MockSMSAPI) StartAppReplicationRequest(arg0 *sms.StartAppReplicationInput) (*request.Request, *sms.StartAppReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.StartAppReplicationOutput)
	return ret0, ret1
}

// StartAppReplicationRequest indicates an expected call of StartAppReplicationRequest.
func (mr *MockSMSAPIMockRecorder) StartAppReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppReplicationRequest", reflect.TypeOf((*MockSMSAPI)(nil).StartAppReplicationRequest), arg0)
}

// StartAppReplicationWithContext mocks base method.
func (m *MockSMSAPI) StartAppReplicationWithContext(arg0 context.Context, arg1 *sms.StartAppReplicationInput, arg2 ...request.Option) (*sms.StartAppReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAppReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.StartAppReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAppReplicationWithContext indicates an expected call of StartAppReplicationWithContext.
func (mr *MockSMSAPIMockRecorder) StartAppReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppReplicationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).StartAppReplicationWithContext), varargs...)
}

// StartOnDemandAppReplication mocks base method.
func (m *MockSMSAPI) StartOnDemandAppReplication(arg0 *sms.StartOnDemandAppReplicationInput) (*sms.StartOnDemandAppReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOnDemandAppReplication", arg0)
	ret0, _ := ret[0].(*sms.StartOnDemandAppReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOnDemandAppReplication indicates an expected call of StartOnDemandAppReplication.
func (mr *MockSMSAPIMockRecorder) StartOnDemandAppReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOnDemandAppReplication", reflect.TypeOf((*MockSMSAPI)(nil).StartOnDemandAppReplication), arg0)
}

// StartOnDemandAppReplicationRequest mocks base method.
func (m *MockSMSAPI) StartOnDemandAppReplicationRequest(arg0 *sms.StartOnDemandAppReplicationInput) (*request.Request, *sms.StartOnDemandAppReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOnDemandAppReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.StartOnDemandAppReplicationOutput)
	return ret0, ret1
}

// StartOnDemandAppReplicationRequest indicates an expected call of StartOnDemandAppReplicationRequest.
func (mr *MockSMSAPIMockRecorder) StartOnDemandAppReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOnDemandAppReplicationRequest", reflect.TypeOf((*MockSMSAPI)(nil).StartOnDemandAppReplicationRequest), arg0)
}

// StartOnDemandAppReplicationWithContext mocks base method.
func (m *MockSMSAPI) StartOnDemandAppReplicationWithContext(arg0 context.Context, arg1 *sms.StartOnDemandAppReplicationInput, arg2 ...request.Option) (*sms.StartOnDemandAppReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartOnDemandAppReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.StartOnDemandAppReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOnDemandAppReplicationWithContext indicates an expected call of StartOnDemandAppReplicationWithContext.
func (mr *MockSMSAPIMockRecorder) StartOnDemandAppReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOnDemandAppReplicationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).StartOnDemandAppReplicationWithContext), varargs...)
}

// StartOnDemandReplicationRun mocks base method.
func (m *MockSMSAPI) StartOnDemandReplicationRun(arg0 *sms.StartOnDemandReplicationRunInput) (*sms.StartOnDemandReplicationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOnDemandReplicationRun", arg0)
	ret0, _ := ret[0].(*sms.StartOnDemandReplicationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOnDemandReplicationRun indicates an expected call of StartOnDemandReplicationRun.
func (mr *MockSMSAPIMockRecorder) StartOnDemandReplicationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOnDemandReplicationRun", reflect.TypeOf((*MockSMSAPI)(nil).StartOnDemandReplicationRun), arg0)
}

// StartOnDemandReplicationRunRequest mocks base method.
func (m *MockSMSAPI) StartOnDemandReplicationRunRequest(arg0 *sms.StartOnDemandReplicationRunInput) (*request.Request, *sms.StartOnDemandReplicationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOnDemandReplicationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.StartOnDemandReplicationRunOutput)
	return ret0, ret1
}

// StartOnDemandReplicationRunRequest indicates an expected call of StartOnDemandReplicationRunRequest.
func (mr *MockSMSAPIMockRecorder) StartOnDemandReplicationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOnDemandReplicationRunRequest", reflect.TypeOf((*MockSMSAPI)(nil).StartOnDemandReplicationRunRequest), arg0)
}

// StartOnDemandReplicationRunWithContext mocks base method.
func (m *MockSMSAPI) StartOnDemandReplicationRunWithContext(arg0 context.Context, arg1 *sms.StartOnDemandReplicationRunInput, arg2 ...request.Option) (*sms.StartOnDemandReplicationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartOnDemandReplicationRunWithContext", varargs...)
	ret0, _ := ret[0].(*sms.StartOnDemandReplicationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOnDemandReplicationRunWithContext indicates an expected call of StartOnDemandReplicationRunWithContext.
func (mr *MockSMSAPIMockRecorder) StartOnDemandReplicationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOnDemandReplicationRunWithContext", reflect.TypeOf((*MockSMSAPI)(nil).StartOnDemandReplicationRunWithContext), varargs...)
}

// StopAppReplication mocks base method.
func (m *MockSMSAPI) StopAppReplication(arg0 *sms.StopAppReplicationInput) (*sms.StopAppReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAppReplication", arg0)
	ret0, _ := ret[0].(*sms.StopAppReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAppReplication indicates an expected call of StopAppReplication.
func (mr *MockSMSAPIMockRecorder) StopAppReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppReplication", reflect.TypeOf((*MockSMSAPI)(nil).StopAppReplication), arg0)
}

// StopAppReplicationRequest mocks base method.
func (m *MockSMSAPI) StopAppReplicationRequest(arg0 *sms.StopAppReplicationInput) (*request.Request, *sms.StopAppReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAppReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.StopAppReplicationOutput)
	return ret0, ret1
}

// StopAppReplicationRequest indicates an expected call of StopAppReplicationRequest.
func (mr *MockSMSAPIMockRecorder) StopAppReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppReplicationRequest", reflect.TypeOf((*MockSMSAPI)(nil).StopAppReplicationRequest), arg0)
}

// StopAppReplicationWithContext mocks base method.
func (m *MockSMSAPI) StopAppReplicationWithContext(arg0 context.Context, arg1 *sms.StopAppReplicationInput, arg2 ...request.Option) (*sms.StopAppReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopAppReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*sms.StopAppReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAppReplicationWithContext indicates an expected call of StopAppReplicationWithContext.
func (mr *MockSMSAPIMockRecorder) StopAppReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppReplicationWithContext", reflect.TypeOf((*MockSMSAPI)(nil).StopAppReplicationWithContext), varargs...)
}

// TerminateApp mocks base method.
func (m *MockSMSAPI) TerminateApp(arg0 *sms.TerminateAppInput) (*sms.TerminateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateApp", arg0)
	ret0, _ := ret[0].(*sms.TerminateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateApp indicates an expected call of TerminateApp.
func (mr *MockSMSAPIMockRecorder) TerminateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateApp", reflect.TypeOf((*MockSMSAPI)(nil).TerminateApp), arg0)
}

// TerminateAppRequest mocks base method.
func (m *MockSMSAPI) TerminateAppRequest(arg0 *sms.TerminateAppInput) (*request.Request, *sms.TerminateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.TerminateAppOutput)
	return ret0, ret1
}

// TerminateAppRequest indicates an expected call of TerminateAppRequest.
func (mr *MockSMSAPIMockRecorder) TerminateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateAppRequest", reflect.TypeOf((*MockSMSAPI)(nil).TerminateAppRequest), arg0)
}

// TerminateAppWithContext mocks base method.
func (m *MockSMSAPI) TerminateAppWithContext(arg0 context.Context, arg1 *sms.TerminateAppInput, arg2 ...request.Option) (*sms.TerminateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateAppWithContext", varargs...)
	ret0, _ := ret[0].(*sms.TerminateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateAppWithContext indicates an expected call of TerminateAppWithContext.
func (mr *MockSMSAPIMockRecorder) TerminateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateAppWithContext", reflect.TypeOf((*MockSMSAPI)(nil).TerminateAppWithContext), varargs...)
}

// UpdateApp mocks base method.
func (m *MockSMSAPI) UpdateApp(arg0 *sms.UpdateAppInput) (*sms.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0)
	ret0, _ := ret[0].(*sms.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockSMSAPIMockRecorder) UpdateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockSMSAPI)(nil).UpdateApp), arg0)
}

// UpdateAppRequest mocks base method.
func (m *MockSMSAPI) UpdateAppRequest(arg0 *sms.UpdateAppInput) (*request.Request, *sms.UpdateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.UpdateAppOutput)
	return ret0, ret1
}

// UpdateAppRequest indicates an expected call of UpdateAppRequest.
func (mr *MockSMSAPIMockRecorder) UpdateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppRequest", reflect.TypeOf((*MockSMSAPI)(nil).UpdateAppRequest), arg0)
}

// UpdateAppWithContext mocks base method.
func (m *MockSMSAPI) UpdateAppWithContext(arg0 context.Context, arg1 *sms.UpdateAppInput, arg2 ...request.Option) (*sms.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppWithContext", varargs...)
	ret0, _ := ret[0].(*sms.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppWithContext indicates an expected call of UpdateAppWithContext.
func (mr *MockSMSAPIMockRecorder) UpdateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppWithContext", reflect.TypeOf((*MockSMSAPI)(nil).UpdateAppWithContext), varargs...)
}

// UpdateReplicationJob mocks base method.
func (m *MockSMSAPI) UpdateReplicationJob(arg0 *sms.UpdateReplicationJobInput) (*sms.UpdateReplicationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationJob", arg0)
	ret0, _ := ret[0].(*sms.UpdateReplicationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationJob indicates an expected call of UpdateReplicationJob.
func (mr *MockSMSAPIMockRecorder) UpdateReplicationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationJob", reflect.TypeOf((*MockSMSAPI)(nil).UpdateReplicationJob), arg0)
}

// UpdateReplicationJobRequest mocks base method.
func (m *MockSMSAPI) UpdateReplicationJobRequest(arg0 *sms.UpdateReplicationJobInput) (*request.Request, *sms.UpdateReplicationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sms.UpdateReplicationJobOutput)
	return ret0, ret1
}

// UpdateReplicationJobRequest indicates an expected call of UpdateReplicationJobRequest.
func (mr *MockSMSAPIMockRecorder) UpdateReplicationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationJobRequest", reflect.TypeOf((*MockSMSAPI)(nil).UpdateReplicationJobRequest), arg0)
}

// UpdateReplicationJobWithContext mocks base method.
func (m *MockSMSAPI) UpdateReplicationJobWithContext(arg0 context.Context, arg1 *sms.UpdateReplicationJobInput, arg2 ...request.Option) (*sms.UpdateReplicationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationJobWithContext", varargs...)
	ret0, _ := ret[0].(*sms.UpdateReplicationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationJobWithContext indicates an expected call of UpdateReplicationJobWithContext.
func (mr *MockSMSAPIMockRecorder) UpdateReplicationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationJobWithContext", reflect.TypeOf((*MockSMSAPI)(nil).UpdateReplicationJobWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/resourcegroups/resourcegroupsiface (interfaces: ResourceGroupsAPI)

// Package resourcegroupsmock is a generated GoMock package.
package resourcegroupsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	resourcegroups "github.com/aws/aws-sdk-go/service/resourcegroups"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResourceGroupsAPI is a mock of ResourceGroupsAPI interface
type MockResourceGroupsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockResourceGroupsAPIMockRecorder
}

// MockResourceGroupsAPIMockRecorder is the mock recorder for MockResourceGroupsAPI
type MockResourceGroupsAPIMockRecorder struct {
	mock *MockResourceGroupsAPI
}

// NewMockResourceGroupsAPI creates a new mock instance
func NewMockResourceGroupsAPI(ctrl *gomock.Controller) *MockResourceGroupsAPI {
	mock := &MockResourceGroupsAPI{ctrl: ctrl}
	mock.recorder = &MockResourceGroupsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceGroupsAPI) EXPECT() *MockResourceGroupsAPIMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method
func (m *MockResourceGroupsAPI) CreateGroup(arg0 *resourcegroups.CreateGroupInput) (*resourcegroups.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(*resourcegroups.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockResourceGroupsAPIMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockResourceGroupsAPI)(nil).CreateGroup), arg0)
}

// CreateGroupRequest mocks base method
func (m *MockResourceGroupsAPI) CreateGroupRequest(arg0 *resourcegroups.CreateGroupInput) (*request.Request, *resourcegroups.CreateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.CreateGroupOutput)
	return ret0, ret1
}

// CreateGroupRequest indicates an expected call of CreateGroupRequest
func (mr *MockResourceGroupsAPIMockRecorder) CreateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).CreateGroupRequest), arg0)
}

// CreateGroupWithContext mocks base method
func (m *MockResourceGroupsAPI) CreateGroupWithContext(arg0 context.Context, arg1 *resourcegroups.CreateGroupInput, arg2 ...request.Option) (*resourcegroups.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupWithContext indicates an expected call of CreateGroupWithContext
func (mr *MockResourceGroupsAPIMockRecorder) CreateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).CreateGroupWithContext), varargs...)
}

// DeleteGroup mocks base method
func (m *MockResourceGroupsAPI) DeleteGroup(arg0 *resourcegroups.DeleteGroupInput) (*resourcegroups.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(*resourcegroups.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockResourceGroupsAPIMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockResourceGroupsAPI)(nil).DeleteGroup), arg0)
}

// DeleteGroupRequest mocks base method
func (m *MockResourceGroupsAPI) DeleteGroupRequest(arg0 *resourcegroups.DeleteGroupInput) (*request.Request, *resourcegroups.DeleteGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.DeleteGroupOutput)
	return ret0, ret1
}

// DeleteGroupRequest indicates an expected call of DeleteGroupRequest
func (mr *MockResourceGroupsAPIMockRecorder) DeleteGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).DeleteGroupRequest), arg0)
}

// DeleteGroupWithContext mocks base method
func (m *MockResourceGroupsAPI) DeleteGroupWithContext(arg0 context.Context, arg1 *resourcegroups.DeleteGroupInput, arg2 ...request.Option) (*resourcegroups.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWithContext indicates an expected call of DeleteGroupWithContext
func (mr *MockResourceGroupsAPIMockRecorder) DeleteGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).DeleteGroupWithContext), varargs...)
}

// GetGroup mocks base method
func (m *MockResourceGroupsAPI) GetGroup(arg0 *resourcegroups.GetGroupInput) (*resourcegroups.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0)
	ret0, _ := ret[0].(*resourcegroups.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockResourceGroupsAPIMockRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroup), arg0)
}

// GetGroupConfiguration mocks base method
func (m *MockResourceGroupsAPI) GetGroupConfiguration(arg0 *resourcegroups.GetGroupConfigurationInput) (*resourcegroups.GetGroupConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupConfiguration", arg0)
	ret0, _ := ret[0].(*resourcegroups.GetGroupConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupConfiguration indicates an expected call of GetGroupConfiguration
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupConfiguration", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupConfiguration), arg0)
}

// GetGroupConfigurationRequest mocks base method
func (m *MockResourceGroupsAPI) GetGroupConfigurationRequest(arg0 *resourcegroups.GetGroupConfigurationInput) (*request.Request, *resourcegroups.GetGroupConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.GetGroupConfigurationOutput)
	return ret0, ret1
}

// GetGroupConfigurationRequest indicates an expected call of GetGroupConfigurationRequest
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupConfigurationRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupConfigurationRequest), arg0)
}

// GetGroupConfigurationWithContext mocks base method
func (m *MockResourceGroupsAPI) GetGroupConfigurationWithContext(arg0 context.Context, arg1 *resourcegroups.GetGroupConfigurationInput, arg2 ...request.Option) (*resourcegroups.GetGroupConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.GetGroupConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupConfigurationWithContext indicates an expected call of GetGroupConfigurationWithContext
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupConfigurationWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupConfigurationWithContext), varargs...)
}

// GetGroupQuery mocks base method
func (m *MockResourceGroupsAPI) GetGroupQuery(arg0 *resourcegroups.GetGroupQueryInput) (*resourcegroups.GetGroupQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupQuery", arg0)
	ret0, _ := ret[0].(*resourcegroups.GetGroupQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupQuery indicates an expected call of GetGroupQuery
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupQuery", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupQuery), arg0)
}

// GetGroupQueryRequest mocks base method
func (m *MockResourceGroupsAPI) GetGroupQueryRequest(arg0 *resourcegroups.GetGroupQueryInput) (*request.Request, *resourcegroups.GetGroupQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.GetGroupQueryOutput)
	return ret0, ret1
}

// GetGroupQueryRequest indicates an expected call of GetGroupQueryRequest
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupQueryRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupQueryRequest), arg0)
}

// GetGroupQueryWithContext mocks base method
func (m *MockResourceGroupsAPI) GetGroupQueryWithContext(arg0 context.Context, arg1 *resourcegroups.GetGroupQueryInput, arg2 ...request.Option) (*resourcegroups.GetGroupQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupQueryWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.GetGroupQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupQueryWithContext indicates an expected call of GetGroupQueryWithContext
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupQueryWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupQueryWithContext), varargs...)
}

// GetGroupRequest mocks base method
func (m *MockResourceGroupsAPI) GetGroupRequest(arg0 *resourcegroups.GetGroupInput) (*request.Request, *resourcegroups.GetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.GetGroupOutput)
	return ret0, ret1
}

// GetGroupRequest indicates an expected call of GetGroupRequest
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupRequest), arg0)
}

// GetGroupWithContext mocks base method
func (m *MockResourceGroupsAPI) GetGroupWithContext(arg0 context.Context, arg1 *resourcegroups.GetGroupInput, arg2 ...request.Option) (*resourcegroups.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupWithContext indicates an expected call of GetGroupWithContext
func (mr *MockResourceGroupsAPIMockRecorder) GetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetGroupWithContext), varargs...)
}

// GetTags mocks base method
func (m *MockResourceGroupsAPI) GetTags(arg0 *resourcegroups.GetTagsInput) (*resourcegroups.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0)
	ret0, _ := ret[0].(*resourcegroups.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags
func (mr *MockResourceGroupsAPIMockRecorder) GetTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetTags), arg0)
}

// GetTagsRequest mocks base method
func (m *MockResourceGroupsAPI) GetTagsRequest(arg0 *resourcegroups.GetTagsInput) (*request.Request, *resourcegroups.GetTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.GetTagsOutput)
	return ret0, ret1
}

// GetTagsRequest indicates an expected call of GetTagsRequest
func (mr *MockResourceGroupsAPIMockRecorder) GetTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetTagsRequest), arg0)
}

// GetTagsWithContext mocks base method
func (m *MockResourceGroupsAPI) GetTagsWithContext(arg0 context.Context, arg1 *resourcegroups.GetTagsInput, arg2 ...request.Option) (*resourcegroups.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagsWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsWithContext indicates an expected call of GetTagsWithContext
func (mr *MockResourceGroupsAPIMockRecorder) GetTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GetTagsWithContext), varargs...)
}

// GroupResources mocks base method
func (m *MockResourceGroupsAPI) GroupResources(arg0 *resourcegroups.GroupResourcesInput) (*resourcegroups.GroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupResources", arg0)
	ret0, _ := ret[0].(*resourcegroups.GroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupResources indicates an expected call of GroupResources
func (mr *MockResourceGroupsAPIMockRecorder) GroupResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupResources", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GroupResources), arg0)
}

// GroupResourcesRequest mocks base method
func (m *MockResourceGroupsAPI) GroupResourcesRequest(arg0 *resourcegroups.GroupResourcesInput) (*request.Request, *resourcegroups.GroupResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.GroupResourcesOutput)
	return ret0, ret1
}

// GroupResourcesRequest indicates an expected call of GroupResourcesRequest
func (mr *MockResourceGroupsAPIMockRecorder) GroupResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupResourcesRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GroupResourcesRequest), arg0)
}

// GroupResourcesWithContext mocks base method
func (m *MockResourceGroupsAPI) GroupResourcesWithContext(arg0 context.Context, arg1 *resourcegroups.GroupResourcesInput, arg2 ...request.Option) (*resourcegroups.GroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GroupResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.GroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupResourcesWithContext indicates an expected call of GroupResourcesWithContext
func (mr *MockResourceGroupsAPIMockRecorder) GroupResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupResourcesWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).GroupResourcesWithContext), varargs...)
}

// ListGroupResources mocks base method
func (m *MockResourceGroupsAPI) ListGroupResources(arg0 *resourcegroups.ListGroupResourcesInput) (*resourcegroups.ListGroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupResources", arg0)
	ret0, _ := ret[0].(*resourcegroups.ListGroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupResources indicates an expected call of ListGroupResources
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResources", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupResources), arg0)
}

// ListGroupResourcesPages mocks base method
func (m *MockResourceGroupsAPI) ListGroupResourcesPages(arg0 *resourcegroups.ListGroupResourcesInput, arg1 func(*resourcegroups.ListGroupResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupResourcesPages indicates an expected call of ListGroupResourcesPages
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesPages", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupResourcesPages), arg0, arg1)
}

// ListGroupResourcesPagesWithContext mocks base method
func (m *MockResourceGroupsAPI) ListGroupResourcesPagesWithContext(arg0 context.Context, arg1 *resourcegroups.ListGroupResourcesInput, arg2 func(*resourcegroups.ListGroupResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupResourcesPagesWithContext indicates an expected call of ListGroupResourcesPagesWithContext
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesPagesWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupResourcesPagesWithContext), varargs...)
}

// ListGroupResourcesRequest mocks base method
func (m *MockResourceGroupsAPI) ListGroupResourcesRequest(arg0 *resourcegroups.ListGroupResourcesInput) (*request.Request, *resourcegroups.ListGroupResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.ListGroupResourcesOutput)
	return ret0, ret1
}

// ListGroupResourcesRequest indicates an expected call of ListGroupResourcesRequest
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupResourcesRequest), arg0)
}

// ListGroupResourcesWithContext mocks base method
func (m *MockResourceGroupsAPI) ListGroupResourcesWithContext(arg0 context.Context, arg1 *resourcegroups.ListGroupResourcesInput, arg2 ...request.Option) (*resourcegroups.ListGroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.ListGroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupResourcesWithContext indicates an expected call of ListGroupResourcesWithContext
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupResourcesWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupResourcesWithContext), varargs...)
}

// ListGroups mocks base method
func (m *MockResourceGroupsAPI) ListGroups(arg0 *resourcegroups.ListGroupsInput) (*resourcegroups.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", arg0)
	ret0, _ := ret[0].(*resourcegroups.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockResourceGroupsAPIMockRecorder) ListGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroups), arg0)
}

// ListGroupsPages mocks base method
func (m *MockResourceGroupsAPI) ListGroupsPages(arg0 *resourcegroups.ListGroupsInput, arg1 func(*resourcegroups.ListGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPages indicates an expected call of ListGroupsPages
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPages", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupsPages), arg0, arg1)
}

// ListGroupsPagesWithContext mocks base method
func (m *MockResourceGroupsAPI) ListGroupsPagesWithContext(arg0 context.Context, arg1 *resourcegroups.ListGroupsInput, arg2 func(*resourcegroups.ListGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPagesWithContext indicates an expected call of ListGroupsPagesWithContext
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPagesWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupsPagesWithContext), varargs...)
}

// ListGroupsRequest mocks base method
func (m *MockResourceGroupsAPI) ListGroupsRequest(arg0 *resourcegroups.ListGroupsInput) (*request.Request, *resourcegroups.ListGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.ListGroupsOutput)
	return ret0, ret1
}

// ListGroupsRequest indicates an expected call of ListGroupsRequest
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupsRequest), arg0)
}

// ListGroupsWithContext mocks base method
func (m *MockResourceGroupsAPI) ListGroupsWithContext(arg0 context.Context, arg1 *resourcegroups.ListGroupsInput, arg2 ...request.Option) (*resourcegroups.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupsWithContext indicates an expected call of ListGroupsWithContext
func (mr *MockResourceGroupsAPIMockRecorder) ListGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).ListGroupsWithContext), varargs...)
}

// PutGroupConfiguration mocks base method
func (m *MockResourceGroupsAPI) PutGroupConfiguration(arg0 *resourcegroups.PutGroupConfigurationInput) (*resourcegroups.PutGroupConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGroupConfiguration", arg0)
	ret0, _ := ret[0].(*resourcegroups.PutGroupConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGroupConfiguration indicates an expected call of PutGroupConfiguration
func (mr *MockResourceGroupsAPIMockRecorder) PutGroupConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGroupConfiguration", reflect.TypeOf((*MockResourceGroupsAPI)(nil).PutGroupConfiguration), arg0)
}

// PutGroupConfigurationRequest mocks base method
func (m *MockResourceGroupsAPI) PutGroupConfigurationRequest(arg0 *resourcegroups.PutGroupConfigurationInput) (*request.Request, *resourcegroups.PutGroupConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGroupConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.PutGroupConfigurationOutput)
	return ret0, ret1
}

// PutGroupConfigurationRequest indicates an expected call of PutGroupConfigurationRequest
func (mr *MockResourceGroupsAPIMockRecorder) PutGroupConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGroupConfigurationRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).PutGroupConfigurationRequest), arg0)
}

// PutGroupConfigurationWithContext mocks base method
func (m *MockResourceGroupsAPI) PutGroupConfigurationWithContext(arg0 context.Context, arg1 *resourcegroups.PutGroupConfigurationInput, arg2 ...request.Option) (*resourcegroups.PutGroupConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutGroupConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.PutGroupConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGroupConfigurationWithContext indicates an expected call of PutGroupConfigurationWithContext
func (mr *MockResourceGroupsAPIMockRecorder) PutGroupConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGroupConfigurationWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).PutGroupConfigurationWithContext), varargs...)
}

// SearchResources mocks base method
func (m *MockResourceGroupsAPI) SearchResources(arg0 *resourcegroups.SearchResourcesInput) (*resourcegroups.SearchResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResources", arg0)
	ret0, _ := ret[0].(*resourcegroups.SearchResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResources indicates an expected call of SearchResources
func (mr *MockResourceGroupsAPIMockRecorder) SearchResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResources", reflect.TypeOf((*MockResourceGroupsAPI)(nil).SearchResources), arg0)
}

// SearchResourcesPages mocks base method
func (m *MockResourceGroupsAPI) SearchResourcesPages(arg0 *resourcegroups.SearchResourcesInput, arg1 func(*resourcegroups.SearchResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchResourcesPages indicates an expected call of SearchResourcesPages
func (mr *MockResourceGroupsAPIMockRecorder) SearchResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourcesPages", reflect.TypeOf((*MockResourceGroupsAPI)(nil).SearchResourcesPages), arg0, arg1)
}

// SearchResourcesPagesWithContext mocks base method
func (m *MockResourceGroupsAPI) SearchResourcesPagesWithContext(arg0 context.Context, arg1 *resourcegroups.SearchResourcesInput, arg2 func(*resourcegroups.SearchResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchResourcesPagesWithContext indicates an expected call of SearchResourcesPagesWithContext
func (mr *MockResourceGroupsAPIMockRecorder) SearchResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourcesPagesWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).SearchResourcesPagesWithContext), varargs...)
}

// SearchResourcesRequest mocks base method
func (m *MockResourceGroupsAPI) SearchResourcesRequest(arg0 *resourcegroups.SearchResourcesInput) (*request.Request, *resourcegroups.SearchResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.SearchResourcesOutput)
	return ret0, ret1
}

// SearchResourcesRequest indicates an expected call of SearchResourcesRequest
func (mr *MockResourceGroupsAPIMockRecorder) SearchResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourcesRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).SearchResourcesRequest), arg0)
}

// SearchResourcesWithContext mocks base method
func (m *MockResourceGroupsAPI) SearchResourcesWithContext(arg0 context.Context, arg1 *resourcegroups.SearchResourcesInput, arg2 ...request.Option) (*resourcegroups.SearchResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.SearchResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResourcesWithContext indicates an expected call of SearchResourcesWithContext
func (mr *MockResourceGroupsAPIMockRecorder) SearchResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourcesWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).SearchResourcesWithContext), varargs...)
}

// Tag mocks base method
func (m *MockResourceGroupsAPI) Tag(arg0 *resourcegroups.TagInput) (*resourcegroups.TagOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", arg0)
	ret0, _ := ret[0].(*resourcegroups.TagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag
func (mr *MockResourceGroupsAPIMockRecorder) Tag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockResourceGroupsAPI)(nil).Tag), arg0)
}

// TagRequest mocks base method
func (m *MockResourceGroupsAPI) TagRequest(arg0 *resourcegroups.TagInput) (*request.Request, *resourcegroups.TagOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.TagOutput)
	return ret0, ret1
}

// TagRequest indicates an expected call of TagRequest
func (mr *MockResourceGroupsAPIMockRecorder) TagRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).TagRequest), arg0)
}

// TagWithContext mocks base method
func (m *MockResourceGroupsAPI) TagWithContext(arg0 context.Context, arg1 *resourcegroups.TagInput, arg2 ...request.Option) (*resourcegroups.TagOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.TagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagWithContext indicates an expected call of TagWithContext
func (mr *MockResourceGroupsAPIMockRecorder) TagWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).TagWithContext), varargs...)
}

// UngroupResources mocks base method
func (m *MockResourceGroupsAPI) UngroupResources(arg0 *resourcegroups.UngroupResourcesInput) (*resourcegroups.UngroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UngroupResources", arg0)
	ret0, _ := ret[0].(*resourcegroups.UngroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UngroupResources indicates an expected call of UngroupResources
func (mr *MockResourceGroupsAPIMockRecorder) UngroupResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UngroupResources", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UngroupResources), arg0)
}

// UngroupResourcesRequest mocks base method
func (m *MockResourceGroupsAPI) UngroupResourcesRequest(arg0 *resourcegroups.UngroupResourcesInput) (*request.Request, *resourcegroups.UngroupResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UngroupResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.UngroupResourcesOutput)
	return ret0, ret1
}

// UngroupResourcesRequest indicates an expected call of UngroupResourcesRequest
func (mr *MockResourceGroupsAPIMockRecorder) UngroupResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UngroupResourcesRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UngroupResourcesRequest), arg0)
}

// UngroupResourcesWithContext mocks base method
func (m *MockResourceGroupsAPI) UngroupResourcesWithContext(arg0 context.Context, arg1 *resourcegroups.UngroupResourcesInput, arg2 ...request.Option) (*resourcegroups.UngroupResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UngroupResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.UngroupResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UngroupResourcesWithContext indicates an expected call of UngroupResourcesWithContext
func (mr *MockResourceGroupsAPIMockRecorder) UngroupResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UngroupResourcesWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UngroupResourcesWithContext), varargs...)
}

// Untag mocks base method
func (m *MockResourceGroupsAPI) Untag(arg0 *resourcegroups.UntagInput) (*resourcegroups.UntagOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Untag", arg0)
	ret0, _ := ret[0].(*resourcegroups.UntagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Untag indicates an expected call of Untag
func (mr *MockResourceGroupsAPIMockRecorder) Untag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untag", reflect.TypeOf((*MockResourceGroupsAPI)(nil).Untag), arg0)
}

// UntagRequest mocks base method
func (m *MockResourceGroupsAPI) UntagRequest(arg0 *resourcegroups.UntagInput) (*request.Request, *resourcegroups.UntagOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.UntagOutput)
	return ret0, ret1
}

// UntagRequest indicates an expected call of UntagRequest
func (mr *MockResourceGroupsAPIMockRecorder) UntagRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UntagRequest), arg0)
}

// UntagWithContext mocks base method
func (m *MockResourceGroupsAPI) UntagWithContext(arg0 context.Context, arg1 *resourcegroups.UntagInput, arg2 ...request.Option) (*resourcegroups.UntagOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.UntagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagWithContext indicates an expected call of UntagWithContext
func (mr *MockResourceGroupsAPIMockRecorder) UntagWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UntagWithContext), varargs...)
}

// UpdateGroup mocks base method
func (m *MockResourceGroupsAPI) UpdateGroup(arg0 *resourcegroups.UpdateGroupInput) (*resourcegroups.UpdateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0)
	ret0, _ := ret[0].(*resourcegroups.UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockResourceGroupsAPIMockRecorder) UpdateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UpdateGroup), arg0)
}

// UpdateGroupQuery mocks base method
func (m *MockResourceGroupsAPI) UpdateGroupQuery(arg0 *resourcegroups.UpdateGroupQueryInput) (*resourcegroups.UpdateGroupQueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupQuery", arg0)
	ret0, _ := ret[0].(*resourcegroups.UpdateGroupQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupQuery indicates an expected call of UpdateGroupQuery
func (mr *MockResourceGroupsAPIMockRecorder) UpdateGroupQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupQuery", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UpdateGroupQuery), arg0)
}

// UpdateGroupQueryRequest mocks base method
func (m *MockResourceGroupsAPI) UpdateGroupQueryRequest(arg0 *resourcegroups.UpdateGroupQueryInput) (*request.Request, *resourcegroups.UpdateGroupQueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupQueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.UpdateGroupQueryOutput)
	return ret0, ret1
}

// UpdateGroupQueryRequest indicates an expected call of UpdateGroupQueryRequest
func (mr *MockResourceGroupsAPIMockRecorder) UpdateGroupQueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupQueryRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UpdateGroupQueryRequest), arg0)
}

// UpdateGroupQueryWithContext mocks base method
func (m *MockResourceGroupsAPI) UpdateGroupQueryWithContext(arg0 context.Context, arg1 *resourcegroups.UpdateGroupQueryInput, arg2 ...request.Option) (*resourcegroups.UpdateGroupQueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupQueryWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.UpdateGroupQueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupQueryWithContext indicates an expected call of UpdateGroupQueryWithContext
func (mr *MockResourceGroupsAPIMockRecorder) UpdateGroupQueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupQueryWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UpdateGroupQueryWithContext), varargs...)
}

// UpdateGroupRequest mocks base method
func (m *MockResourceGroupsAPI) UpdateGroupRequest(arg0 *resourcegroups.UpdateGroupInput) (*request.Request, *resourcegroups.UpdateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resourcegroups.UpdateGroupOutput)
	return ret0, ret1
}

// UpdateGroupRequest indicates an expected call of UpdateGroupRequest
func (mr *MockResourceGroupsAPIMockRecorder) UpdateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupRequest", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UpdateGroupRequest), arg0)
}

// UpdateGroupWithContext mocks base method
func (m *MockResourceGroupsAPI) UpdateGroupWithContext(arg0 context.Context, arg1 *resourcegroups.UpdateGroupInput, arg2 ...request.Option) (*resourcegroups.UpdateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*resourcegroups.UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupWithContext indicates an expected call of UpdateGroupWithContext
func (mr *MockResourceGroupsAPIMockRecorder) UpdateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupWithContext", reflect.TypeOf((*MockResourceGroupsAPI)(nil).UpdateGroupWithContext), varargs...)
}

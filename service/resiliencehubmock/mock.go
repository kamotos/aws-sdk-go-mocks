// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/resiliencehub/resiliencehubiface (interfaces: ResilienceHubAPI)

// Package resiliencehubmock is a generated GoMock package.
package resiliencehubmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	resiliencehub "github.com/aws/aws-sdk-go/service/resiliencehub"
	gomock "github.com/golang/mock/gomock"
)

// MockResilienceHubAPI is a mock of ResilienceHubAPI interface.
type MockResilienceHubAPI struct {
	ctrl     *gomock.Controller
	recorder *MockResilienceHubAPIMockRecorder
}

// MockResilienceHubAPIMockRecorder is the mock recorder for MockResilienceHubAPI.
type MockResilienceHubAPIMockRecorder struct {
	mock *MockResilienceHubAPI
}

// NewMockResilienceHubAPI creates a new mock instance.
func NewMockResilienceHubAPI(ctrl *gomock.Controller) *MockResilienceHubAPI {
	mock := &MockResilienceHubAPI{ctrl: ctrl}
	mock.recorder = &MockResilienceHubAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResilienceHubAPI) EXPECT() *MockResilienceHubAPIMockRecorder {
	return m.recorder
}

// AddDraftAppVersionResourceMappings mocks base method.
func (m *MockResilienceHubAPI) AddDraftAppVersionResourceMappings(arg0 *resiliencehub.AddDraftAppVersionResourceMappingsInput) (*resiliencehub.AddDraftAppVersionResourceMappingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDraftAppVersionResourceMappings", arg0)
	ret0, _ := ret[0].(*resiliencehub.AddDraftAppVersionResourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDraftAppVersionResourceMappings indicates an expected call of AddDraftAppVersionResourceMappings.
func (mr *MockResilienceHubAPIMockRecorder) AddDraftAppVersionResourceMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDraftAppVersionResourceMappings", reflect.TypeOf((*MockResilienceHubAPI)(nil).AddDraftAppVersionResourceMappings), arg0)
}

// AddDraftAppVersionResourceMappingsRequest mocks base method.
func (m *MockResilienceHubAPI) AddDraftAppVersionResourceMappingsRequest(arg0 *resiliencehub.AddDraftAppVersionResourceMappingsInput) (*request.Request, *resiliencehub.AddDraftAppVersionResourceMappingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDraftAppVersionResourceMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.AddDraftAppVersionResourceMappingsOutput)
	return ret0, ret1
}

// AddDraftAppVersionResourceMappingsRequest indicates an expected call of AddDraftAppVersionResourceMappingsRequest.
func (mr *MockResilienceHubAPIMockRecorder) AddDraftAppVersionResourceMappingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDraftAppVersionResourceMappingsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).AddDraftAppVersionResourceMappingsRequest), arg0)
}

// AddDraftAppVersionResourceMappingsWithContext mocks base method.
func (m *MockResilienceHubAPI) AddDraftAppVersionResourceMappingsWithContext(arg0 context.Context, arg1 *resiliencehub.AddDraftAppVersionResourceMappingsInput, arg2 ...request.Option) (*resiliencehub.AddDraftAppVersionResourceMappingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDraftAppVersionResourceMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.AddDraftAppVersionResourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDraftAppVersionResourceMappingsWithContext indicates an expected call of AddDraftAppVersionResourceMappingsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) AddDraftAppVersionResourceMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDraftAppVersionResourceMappingsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).AddDraftAppVersionResourceMappingsWithContext), varargs...)
}

// CreateApp mocks base method.
func (m *MockResilienceHubAPI) CreateApp(arg0 *resiliencehub.CreateAppInput) (*resiliencehub.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", arg0)
	ret0, _ := ret[0].(*resiliencehub.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockResilienceHubAPIMockRecorder) CreateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateApp), arg0)
}

// CreateAppRequest mocks base method.
func (m *MockResilienceHubAPI) CreateAppRequest(arg0 *resiliencehub.CreateAppInput) (*request.Request, *resiliencehub.CreateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.CreateAppOutput)
	return ret0, ret1
}

// CreateAppRequest indicates an expected call of CreateAppRequest.
func (mr *MockResilienceHubAPIMockRecorder) CreateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateAppRequest), arg0)
}

// CreateAppWithContext mocks base method.
func (m *MockResilienceHubAPI) CreateAppWithContext(arg0 context.Context, arg1 *resiliencehub.CreateAppInput, arg2 ...request.Option) (*resiliencehub.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppWithContext indicates an expected call of CreateAppWithContext.
func (mr *MockResilienceHubAPIMockRecorder) CreateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateAppWithContext), varargs...)
}

// CreateRecommendationTemplate mocks base method.
func (m *MockResilienceHubAPI) CreateRecommendationTemplate(arg0 *resiliencehub.CreateRecommendationTemplateInput) (*resiliencehub.CreateRecommendationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecommendationTemplate", arg0)
	ret0, _ := ret[0].(*resiliencehub.CreateRecommendationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecommendationTemplate indicates an expected call of CreateRecommendationTemplate.
func (mr *MockResilienceHubAPIMockRecorder) CreateRecommendationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommendationTemplate", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateRecommendationTemplate), arg0)
}

// CreateRecommendationTemplateRequest mocks base method.
func (m *MockResilienceHubAPI) CreateRecommendationTemplateRequest(arg0 *resiliencehub.CreateRecommendationTemplateInput) (*request.Request, *resiliencehub.CreateRecommendationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecommendationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.CreateRecommendationTemplateOutput)
	return ret0, ret1
}

// CreateRecommendationTemplateRequest indicates an expected call of CreateRecommendationTemplateRequest.
func (mr *MockResilienceHubAPIMockRecorder) CreateRecommendationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommendationTemplateRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateRecommendationTemplateRequest), arg0)
}

// CreateRecommendationTemplateWithContext mocks base method.
func (m *MockResilienceHubAPI) CreateRecommendationTemplateWithContext(arg0 context.Context, arg1 *resiliencehub.CreateRecommendationTemplateInput, arg2 ...request.Option) (*resiliencehub.CreateRecommendationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecommendationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.CreateRecommendationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecommendationTemplateWithContext indicates an expected call of CreateRecommendationTemplateWithContext.
func (mr *MockResilienceHubAPIMockRecorder) CreateRecommendationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommendationTemplateWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateRecommendationTemplateWithContext), varargs...)
}

// CreateResiliencyPolicy mocks base method.
func (m *MockResilienceHubAPI) CreateResiliencyPolicy(arg0 *resiliencehub.CreateResiliencyPolicyInput) (*resiliencehub.CreateResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResiliencyPolicy", arg0)
	ret0, _ := ret[0].(*resiliencehub.CreateResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResiliencyPolicy indicates an expected call of CreateResiliencyPolicy.
func (mr *MockResilienceHubAPIMockRecorder) CreateResiliencyPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResiliencyPolicy", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateResiliencyPolicy), arg0)
}

// CreateResiliencyPolicyRequest mocks base method.
func (m *MockResilienceHubAPI) CreateResiliencyPolicyRequest(arg0 *resiliencehub.CreateResiliencyPolicyInput) (*request.Request, *resiliencehub.CreateResiliencyPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResiliencyPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.CreateResiliencyPolicyOutput)
	return ret0, ret1
}

// CreateResiliencyPolicyRequest indicates an expected call of CreateResiliencyPolicyRequest.
func (mr *MockResilienceHubAPIMockRecorder) CreateResiliencyPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResiliencyPolicyRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateResiliencyPolicyRequest), arg0)
}

// CreateResiliencyPolicyWithContext mocks base method.
func (m *MockResilienceHubAPI) CreateResiliencyPolicyWithContext(arg0 context.Context, arg1 *resiliencehub.CreateResiliencyPolicyInput, arg2 ...request.Option) (*resiliencehub.CreateResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResiliencyPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.CreateResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResiliencyPolicyWithContext indicates an expected call of CreateResiliencyPolicyWithContext.
func (mr *MockResilienceHubAPIMockRecorder) CreateResiliencyPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResiliencyPolicyWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).CreateResiliencyPolicyWithContext), varargs...)
}

// DeleteApp mocks base method.
func (m *MockResilienceHubAPI) DeleteApp(arg0 *resiliencehub.DeleteAppInput) (*resiliencehub.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0)
	ret0, _ := ret[0].(*resiliencehub.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockResilienceHubAPIMockRecorder) DeleteApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteApp), arg0)
}

// DeleteAppAssessment mocks base method.
func (m *MockResilienceHubAPI) DeleteAppAssessment(arg0 *resiliencehub.DeleteAppAssessmentInput) (*resiliencehub.DeleteAppAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppAssessment", arg0)
	ret0, _ := ret[0].(*resiliencehub.DeleteAppAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppAssessment indicates an expected call of DeleteAppAssessment.
func (mr *MockResilienceHubAPIMockRecorder) DeleteAppAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppAssessment", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteAppAssessment), arg0)
}

// DeleteAppAssessmentRequest mocks base method.
func (m *MockResilienceHubAPI) DeleteAppAssessmentRequest(arg0 *resiliencehub.DeleteAppAssessmentInput) (*request.Request, *resiliencehub.DeleteAppAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DeleteAppAssessmentOutput)
	return ret0, ret1
}

// DeleteAppAssessmentRequest indicates an expected call of DeleteAppAssessmentRequest.
func (mr *MockResilienceHubAPIMockRecorder) DeleteAppAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppAssessmentRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteAppAssessmentRequest), arg0)
}

// DeleteAppAssessmentWithContext mocks base method.
func (m *MockResilienceHubAPI) DeleteAppAssessmentWithContext(arg0 context.Context, arg1 *resiliencehub.DeleteAppAssessmentInput, arg2 ...request.Option) (*resiliencehub.DeleteAppAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DeleteAppAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppAssessmentWithContext indicates an expected call of DeleteAppAssessmentWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DeleteAppAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppAssessmentWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteAppAssessmentWithContext), varargs...)
}

// DeleteAppRequest mocks base method.
func (m *MockResilienceHubAPI) DeleteAppRequest(arg0 *resiliencehub.DeleteAppInput) (*request.Request, *resiliencehub.DeleteAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DeleteAppOutput)
	return ret0, ret1
}

// DeleteAppRequest indicates an expected call of DeleteAppRequest.
func (mr *MockResilienceHubAPIMockRecorder) DeleteAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteAppRequest), arg0)
}

// DeleteAppWithContext mocks base method.
func (m *MockResilienceHubAPI) DeleteAppWithContext(arg0 context.Context, arg1 *resiliencehub.DeleteAppInput, arg2 ...request.Option) (*resiliencehub.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppWithContext indicates an expected call of DeleteAppWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DeleteAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteAppWithContext), varargs...)
}

// DeleteRecommendationTemplate mocks base method.
func (m *MockResilienceHubAPI) DeleteRecommendationTemplate(arg0 *resiliencehub.DeleteRecommendationTemplateInput) (*resiliencehub.DeleteRecommendationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommendationTemplate", arg0)
	ret0, _ := ret[0].(*resiliencehub.DeleteRecommendationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecommendationTemplate indicates an expected call of DeleteRecommendationTemplate.
func (mr *MockResilienceHubAPIMockRecorder) DeleteRecommendationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationTemplate", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteRecommendationTemplate), arg0)
}

// DeleteRecommendationTemplateRequest mocks base method.
func (m *MockResilienceHubAPI) DeleteRecommendationTemplateRequest(arg0 *resiliencehub.DeleteRecommendationTemplateInput) (*request.Request, *resiliencehub.DeleteRecommendationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommendationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DeleteRecommendationTemplateOutput)
	return ret0, ret1
}

// DeleteRecommendationTemplateRequest indicates an expected call of DeleteRecommendationTemplateRequest.
func (mr *MockResilienceHubAPIMockRecorder) DeleteRecommendationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationTemplateRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteRecommendationTemplateRequest), arg0)
}

// DeleteRecommendationTemplateWithContext mocks base method.
func (m *MockResilienceHubAPI) DeleteRecommendationTemplateWithContext(arg0 context.Context, arg1 *resiliencehub.DeleteRecommendationTemplateInput, arg2 ...request.Option) (*resiliencehub.DeleteRecommendationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecommendationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DeleteRecommendationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecommendationTemplateWithContext indicates an expected call of DeleteRecommendationTemplateWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DeleteRecommendationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationTemplateWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteRecommendationTemplateWithContext), varargs...)
}

// DeleteResiliencyPolicy mocks base method.
func (m *MockResilienceHubAPI) DeleteResiliencyPolicy(arg0 *resiliencehub.DeleteResiliencyPolicyInput) (*resiliencehub.DeleteResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResiliencyPolicy", arg0)
	ret0, _ := ret[0].(*resiliencehub.DeleteResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResiliencyPolicy indicates an expected call of DeleteResiliencyPolicy.
func (mr *MockResilienceHubAPIMockRecorder) DeleteResiliencyPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResiliencyPolicy", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteResiliencyPolicy), arg0)
}

// DeleteResiliencyPolicyRequest mocks base method.
func (m *MockResilienceHubAPI) DeleteResiliencyPolicyRequest(arg0 *resiliencehub.DeleteResiliencyPolicyInput) (*request.Request, *resiliencehub.DeleteResiliencyPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResiliencyPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DeleteResiliencyPolicyOutput)
	return ret0, ret1
}

// DeleteResiliencyPolicyRequest indicates an expected call of DeleteResiliencyPolicyRequest.
func (mr *MockResilienceHubAPIMockRecorder) DeleteResiliencyPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResiliencyPolicyRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteResiliencyPolicyRequest), arg0)
}

// DeleteResiliencyPolicyWithContext mocks base method.
func (m *MockResilienceHubAPI) DeleteResiliencyPolicyWithContext(arg0 context.Context, arg1 *resiliencehub.DeleteResiliencyPolicyInput, arg2 ...request.Option) (*resiliencehub.DeleteResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResiliencyPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DeleteResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResiliencyPolicyWithContext indicates an expected call of DeleteResiliencyPolicyWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DeleteResiliencyPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResiliencyPolicyWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DeleteResiliencyPolicyWithContext), varargs...)
}

// DescribeApp mocks base method.
func (m *MockResilienceHubAPI) DescribeApp(arg0 *resiliencehub.DescribeAppInput) (*resiliencehub.DescribeAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApp", arg0)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApp indicates an expected call of DescribeApp.
func (mr *MockResilienceHubAPIMockRecorder) DescribeApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApp", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeApp), arg0)
}

// DescribeAppAssessment mocks base method.
func (m *MockResilienceHubAPI) DescribeAppAssessment(arg0 *resiliencehub.DescribeAppAssessmentInput) (*resiliencehub.DescribeAppAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppAssessment", arg0)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppAssessment indicates an expected call of DescribeAppAssessment.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppAssessment", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppAssessment), arg0)
}

// DescribeAppAssessmentRequest mocks base method.
func (m *MockResilienceHubAPI) DescribeAppAssessmentRequest(arg0 *resiliencehub.DescribeAppAssessmentInput) (*request.Request, *resiliencehub.DescribeAppAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DescribeAppAssessmentOutput)
	return ret0, ret1
}

// DescribeAppAssessmentRequest indicates an expected call of DescribeAppAssessmentRequest.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppAssessmentRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppAssessmentRequest), arg0)
}

// DescribeAppAssessmentWithContext mocks base method.
func (m *MockResilienceHubAPI) DescribeAppAssessmentWithContext(arg0 context.Context, arg1 *resiliencehub.DescribeAppAssessmentInput, arg2 ...request.Option) (*resiliencehub.DescribeAppAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppAssessmentWithContext indicates an expected call of DescribeAppAssessmentWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppAssessmentWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppAssessmentWithContext), varargs...)
}

// DescribeAppRequest mocks base method.
func (m *MockResilienceHubAPI) DescribeAppRequest(arg0 *resiliencehub.DescribeAppInput) (*request.Request, *resiliencehub.DescribeAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DescribeAppOutput)
	return ret0, ret1
}

// DescribeAppRequest indicates an expected call of DescribeAppRequest.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppRequest), arg0)
}

// DescribeAppVersionResourcesResolutionStatus mocks base method.
func (m *MockResilienceHubAPI) DescribeAppVersionResourcesResolutionStatus(arg0 *resiliencehub.DescribeAppVersionResourcesResolutionStatusInput) (*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppVersionResourcesResolutionStatus", arg0)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppVersionResourcesResolutionStatus indicates an expected call of DescribeAppVersionResourcesResolutionStatus.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppVersionResourcesResolutionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppVersionResourcesResolutionStatus", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppVersionResourcesResolutionStatus), arg0)
}

// DescribeAppVersionResourcesResolutionStatusRequest mocks base method.
func (m *MockResilienceHubAPI) DescribeAppVersionResourcesResolutionStatusRequest(arg0 *resiliencehub.DescribeAppVersionResourcesResolutionStatusInput) (*request.Request, *resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppVersionResourcesResolutionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput)
	return ret0, ret1
}

// DescribeAppVersionResourcesResolutionStatusRequest indicates an expected call of DescribeAppVersionResourcesResolutionStatusRequest.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppVersionResourcesResolutionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppVersionResourcesResolutionStatusRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppVersionResourcesResolutionStatusRequest), arg0)
}

// DescribeAppVersionResourcesResolutionStatusWithContext mocks base method.
func (m *MockResilienceHubAPI) DescribeAppVersionResourcesResolutionStatusWithContext(arg0 context.Context, arg1 *resiliencehub.DescribeAppVersionResourcesResolutionStatusInput, arg2 ...request.Option) (*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppVersionResourcesResolutionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppVersionResourcesResolutionStatusWithContext indicates an expected call of DescribeAppVersionResourcesResolutionStatusWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppVersionResourcesResolutionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppVersionResourcesResolutionStatusWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppVersionResourcesResolutionStatusWithContext), varargs...)
}

// DescribeAppVersionTemplate mocks base method.
func (m *MockResilienceHubAPI) DescribeAppVersionTemplate(arg0 *resiliencehub.DescribeAppVersionTemplateInput) (*resiliencehub.DescribeAppVersionTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppVersionTemplate", arg0)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppVersionTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppVersionTemplate indicates an expected call of DescribeAppVersionTemplate.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppVersionTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppVersionTemplate", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppVersionTemplate), arg0)
}

// DescribeAppVersionTemplateRequest mocks base method.
func (m *MockResilienceHubAPI) DescribeAppVersionTemplateRequest(arg0 *resiliencehub.DescribeAppVersionTemplateInput) (*request.Request, *resiliencehub.DescribeAppVersionTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppVersionTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DescribeAppVersionTemplateOutput)
	return ret0, ret1
}

// DescribeAppVersionTemplateRequest indicates an expected call of DescribeAppVersionTemplateRequest.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppVersionTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppVersionTemplateRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppVersionTemplateRequest), arg0)
}

// DescribeAppVersionTemplateWithContext mocks base method.
func (m *MockResilienceHubAPI) DescribeAppVersionTemplateWithContext(arg0 context.Context, arg1 *resiliencehub.DescribeAppVersionTemplateInput, arg2 ...request.Option) (*resiliencehub.DescribeAppVersionTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppVersionTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppVersionTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppVersionTemplateWithContext indicates an expected call of DescribeAppVersionTemplateWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppVersionTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppVersionTemplateWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppVersionTemplateWithContext), varargs...)
}

// DescribeAppWithContext mocks base method.
func (m *MockResilienceHubAPI) DescribeAppWithContext(arg0 context.Context, arg1 *resiliencehub.DescribeAppInput, arg2 ...request.Option) (*resiliencehub.DescribeAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DescribeAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppWithContext indicates an expected call of DescribeAppWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DescribeAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeAppWithContext), varargs...)
}

// DescribeDraftAppVersionResourcesImportStatus mocks base method.
func (m *MockResilienceHubAPI) DescribeDraftAppVersionResourcesImportStatus(arg0 *resiliencehub.DescribeDraftAppVersionResourcesImportStatusInput) (*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDraftAppVersionResourcesImportStatus", arg0)
	ret0, _ := ret[0].(*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDraftAppVersionResourcesImportStatus indicates an expected call of DescribeDraftAppVersionResourcesImportStatus.
func (mr *MockResilienceHubAPIMockRecorder) DescribeDraftAppVersionResourcesImportStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDraftAppVersionResourcesImportStatus", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeDraftAppVersionResourcesImportStatus), arg0)
}

// DescribeDraftAppVersionResourcesImportStatusRequest mocks base method.
func (m *MockResilienceHubAPI) DescribeDraftAppVersionResourcesImportStatusRequest(arg0 *resiliencehub.DescribeDraftAppVersionResourcesImportStatusInput) (*request.Request, *resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDraftAppVersionResourcesImportStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput)
	return ret0, ret1
}

// DescribeDraftAppVersionResourcesImportStatusRequest indicates an expected call of DescribeDraftAppVersionResourcesImportStatusRequest.
func (mr *MockResilienceHubAPIMockRecorder) DescribeDraftAppVersionResourcesImportStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDraftAppVersionResourcesImportStatusRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeDraftAppVersionResourcesImportStatusRequest), arg0)
}

// DescribeDraftAppVersionResourcesImportStatusWithContext mocks base method.
func (m *MockResilienceHubAPI) DescribeDraftAppVersionResourcesImportStatusWithContext(arg0 context.Context, arg1 *resiliencehub.DescribeDraftAppVersionResourcesImportStatusInput, arg2 ...request.Option) (*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDraftAppVersionResourcesImportStatusWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDraftAppVersionResourcesImportStatusWithContext indicates an expected call of DescribeDraftAppVersionResourcesImportStatusWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DescribeDraftAppVersionResourcesImportStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDraftAppVersionResourcesImportStatusWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeDraftAppVersionResourcesImportStatusWithContext), varargs...)
}

// DescribeResiliencyPolicy mocks base method.
func (m *MockResilienceHubAPI) DescribeResiliencyPolicy(arg0 *resiliencehub.DescribeResiliencyPolicyInput) (*resiliencehub.DescribeResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResiliencyPolicy", arg0)
	ret0, _ := ret[0].(*resiliencehub.DescribeResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResiliencyPolicy indicates an expected call of DescribeResiliencyPolicy.
func (mr *MockResilienceHubAPIMockRecorder) DescribeResiliencyPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResiliencyPolicy", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeResiliencyPolicy), arg0)
}

// DescribeResiliencyPolicyRequest mocks base method.
func (m *MockResilienceHubAPI) DescribeResiliencyPolicyRequest(arg0 *resiliencehub.DescribeResiliencyPolicyInput) (*request.Request, *resiliencehub.DescribeResiliencyPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResiliencyPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.DescribeResiliencyPolicyOutput)
	return ret0, ret1
}

// DescribeResiliencyPolicyRequest indicates an expected call of DescribeResiliencyPolicyRequest.
func (mr *MockResilienceHubAPIMockRecorder) DescribeResiliencyPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResiliencyPolicyRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeResiliencyPolicyRequest), arg0)
}

// DescribeResiliencyPolicyWithContext mocks base method.
func (m *MockResilienceHubAPI) DescribeResiliencyPolicyWithContext(arg0 context.Context, arg1 *resiliencehub.DescribeResiliencyPolicyInput, arg2 ...request.Option) (*resiliencehub.DescribeResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResiliencyPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.DescribeResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResiliencyPolicyWithContext indicates an expected call of DescribeResiliencyPolicyWithContext.
func (mr *MockResilienceHubAPIMockRecorder) DescribeResiliencyPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResiliencyPolicyWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).DescribeResiliencyPolicyWithContext), varargs...)
}

// ImportResourcesToDraftAppVersion mocks base method.
func (m *MockResilienceHubAPI) ImportResourcesToDraftAppVersion(arg0 *resiliencehub.ImportResourcesToDraftAppVersionInput) (*resiliencehub.ImportResourcesToDraftAppVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportResourcesToDraftAppVersion", arg0)
	ret0, _ := ret[0].(*resiliencehub.ImportResourcesToDraftAppVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportResourcesToDraftAppVersion indicates an expected call of ImportResourcesToDraftAppVersion.
func (mr *MockResilienceHubAPIMockRecorder) ImportResourcesToDraftAppVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportResourcesToDraftAppVersion", reflect.TypeOf((*MockResilienceHubAPI)(nil).ImportResourcesToDraftAppVersion), arg0)
}

// ImportResourcesToDraftAppVersionRequest mocks base method.
func (m *MockResilienceHubAPI) ImportResourcesToDraftAppVersionRequest(arg0 *resiliencehub.ImportResourcesToDraftAppVersionInput) (*request.Request, *resiliencehub.ImportResourcesToDraftAppVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportResourcesToDraftAppVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ImportResourcesToDraftAppVersionOutput)
	return ret0, ret1
}

// ImportResourcesToDraftAppVersionRequest indicates an expected call of ImportResourcesToDraftAppVersionRequest.
func (mr *MockResilienceHubAPIMockRecorder) ImportResourcesToDraftAppVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportResourcesToDraftAppVersionRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ImportResourcesToDraftAppVersionRequest), arg0)
}

// ImportResourcesToDraftAppVersionWithContext mocks base method.
func (m *MockResilienceHubAPI) ImportResourcesToDraftAppVersionWithContext(arg0 context.Context, arg1 *resiliencehub.ImportResourcesToDraftAppVersionInput, arg2 ...request.Option) (*resiliencehub.ImportResourcesToDraftAppVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportResourcesToDraftAppVersionWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ImportResourcesToDraftAppVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportResourcesToDraftAppVersionWithContext indicates an expected call of ImportResourcesToDraftAppVersionWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ImportResourcesToDraftAppVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportResourcesToDraftAppVersionWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ImportResourcesToDraftAppVersionWithContext), varargs...)
}

// ListAlarmRecommendations mocks base method.
func (m *MockResilienceHubAPI) ListAlarmRecommendations(arg0 *resiliencehub.ListAlarmRecommendationsInput) (*resiliencehub.ListAlarmRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlarmRecommendations", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAlarmRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlarmRecommendations indicates an expected call of ListAlarmRecommendations.
func (mr *MockResilienceHubAPIMockRecorder) ListAlarmRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlarmRecommendations", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAlarmRecommendations), arg0)
}

// ListAlarmRecommendationsPages mocks base method.
func (m *MockResilienceHubAPI) ListAlarmRecommendationsPages(arg0 *resiliencehub.ListAlarmRecommendationsInput, arg1 func(*resiliencehub.ListAlarmRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlarmRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAlarmRecommendationsPages indicates an expected call of ListAlarmRecommendationsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAlarmRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlarmRecommendationsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAlarmRecommendationsPages), arg0, arg1)
}

// ListAlarmRecommendationsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAlarmRecommendationsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAlarmRecommendationsInput, arg2 func(*resiliencehub.ListAlarmRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAlarmRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAlarmRecommendationsPagesWithContext indicates an expected call of ListAlarmRecommendationsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAlarmRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlarmRecommendationsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAlarmRecommendationsPagesWithContext), varargs...)
}

// ListAlarmRecommendationsRequest mocks base method.
func (m *MockResilienceHubAPI) ListAlarmRecommendationsRequest(arg0 *resiliencehub.ListAlarmRecommendationsInput) (*request.Request, *resiliencehub.ListAlarmRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlarmRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAlarmRecommendationsOutput)
	return ret0, ret1
}

// ListAlarmRecommendationsRequest indicates an expected call of ListAlarmRecommendationsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAlarmRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlarmRecommendationsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAlarmRecommendationsRequest), arg0)
}

// ListAlarmRecommendationsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAlarmRecommendationsWithContext(arg0 context.Context, arg1 *resiliencehub.ListAlarmRecommendationsInput, arg2 ...request.Option) (*resiliencehub.ListAlarmRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAlarmRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAlarmRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlarmRecommendationsWithContext indicates an expected call of ListAlarmRecommendationsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAlarmRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlarmRecommendationsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAlarmRecommendationsWithContext), varargs...)
}

// ListAppAssessments mocks base method.
func (m *MockResilienceHubAPI) ListAppAssessments(arg0 *resiliencehub.ListAppAssessmentsInput) (*resiliencehub.ListAppAssessmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppAssessments", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAppAssessmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppAssessments indicates an expected call of ListAppAssessments.
func (mr *MockResilienceHubAPIMockRecorder) ListAppAssessments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAssessments", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppAssessments), arg0)
}

// ListAppAssessmentsPages mocks base method.
func (m *MockResilienceHubAPI) ListAppAssessmentsPages(arg0 *resiliencehub.ListAppAssessmentsInput, arg1 func(*resiliencehub.ListAppAssessmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppAssessmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppAssessmentsPages indicates an expected call of ListAppAssessmentsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAppAssessmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAssessmentsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppAssessmentsPages), arg0, arg1)
}

// ListAppAssessmentsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppAssessmentsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppAssessmentsInput, arg2 func(*resiliencehub.ListAppAssessmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppAssessmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppAssessmentsPagesWithContext indicates an expected call of ListAppAssessmentsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppAssessmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAssessmentsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppAssessmentsPagesWithContext), varargs...)
}

// ListAppAssessmentsRequest mocks base method.
func (m *MockResilienceHubAPI) ListAppAssessmentsRequest(arg0 *resiliencehub.ListAppAssessmentsInput) (*request.Request, *resiliencehub.ListAppAssessmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppAssessmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAppAssessmentsOutput)
	return ret0, ret1
}

// ListAppAssessmentsRequest indicates an expected call of ListAppAssessmentsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAppAssessmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAssessmentsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppAssessmentsRequest), arg0)
}

// ListAppAssessmentsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppAssessmentsWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppAssessmentsInput, arg2 ...request.Option) (*resiliencehub.ListAppAssessmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppAssessmentsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAppAssessmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppAssessmentsWithContext indicates an expected call of ListAppAssessmentsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppAssessmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppAssessmentsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppAssessmentsWithContext), varargs...)
}

// ListAppComponentCompliances mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentCompliances(arg0 *resiliencehub.ListAppComponentCompliancesInput) (*resiliencehub.ListAppComponentCompliancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppComponentCompliances", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAppComponentCompliancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppComponentCompliances indicates an expected call of ListAppComponentCompliances.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentCompliances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentCompliances", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentCompliances), arg0)
}

// ListAppComponentCompliancesPages mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentCompliancesPages(arg0 *resiliencehub.ListAppComponentCompliancesInput, arg1 func(*resiliencehub.ListAppComponentCompliancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppComponentCompliancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppComponentCompliancesPages indicates an expected call of ListAppComponentCompliancesPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentCompliancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentCompliancesPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentCompliancesPages), arg0, arg1)
}

// ListAppComponentCompliancesPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentCompliancesPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppComponentCompliancesInput, arg2 func(*resiliencehub.ListAppComponentCompliancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppComponentCompliancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppComponentCompliancesPagesWithContext indicates an expected call of ListAppComponentCompliancesPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentCompliancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentCompliancesPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentCompliancesPagesWithContext), varargs...)
}

// ListAppComponentCompliancesRequest mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentCompliancesRequest(arg0 *resiliencehub.ListAppComponentCompliancesInput) (*request.Request, *resiliencehub.ListAppComponentCompliancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppComponentCompliancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAppComponentCompliancesOutput)
	return ret0, ret1
}

// ListAppComponentCompliancesRequest indicates an expected call of ListAppComponentCompliancesRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentCompliancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentCompliancesRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentCompliancesRequest), arg0)
}

// ListAppComponentCompliancesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentCompliancesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppComponentCompliancesInput, arg2 ...request.Option) (*resiliencehub.ListAppComponentCompliancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppComponentCompliancesWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAppComponentCompliancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppComponentCompliancesWithContext indicates an expected call of ListAppComponentCompliancesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentCompliancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentCompliancesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentCompliancesWithContext), varargs...)
}

// ListAppComponentRecommendations mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentRecommendations(arg0 *resiliencehub.ListAppComponentRecommendationsInput) (*resiliencehub.ListAppComponentRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppComponentRecommendations", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAppComponentRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppComponentRecommendations indicates an expected call of ListAppComponentRecommendations.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentRecommendations", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentRecommendations), arg0)
}

// ListAppComponentRecommendationsPages mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentRecommendationsPages(arg0 *resiliencehub.ListAppComponentRecommendationsInput, arg1 func(*resiliencehub.ListAppComponentRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppComponentRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppComponentRecommendationsPages indicates an expected call of ListAppComponentRecommendationsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentRecommendationsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentRecommendationsPages), arg0, arg1)
}

// ListAppComponentRecommendationsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentRecommendationsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppComponentRecommendationsInput, arg2 func(*resiliencehub.ListAppComponentRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppComponentRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppComponentRecommendationsPagesWithContext indicates an expected call of ListAppComponentRecommendationsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentRecommendationsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentRecommendationsPagesWithContext), varargs...)
}

// ListAppComponentRecommendationsRequest mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentRecommendationsRequest(arg0 *resiliencehub.ListAppComponentRecommendationsInput) (*request.Request, *resiliencehub.ListAppComponentRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppComponentRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAppComponentRecommendationsOutput)
	return ret0, ret1
}

// ListAppComponentRecommendationsRequest indicates an expected call of ListAppComponentRecommendationsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentRecommendationsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentRecommendationsRequest), arg0)
}

// ListAppComponentRecommendationsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppComponentRecommendationsWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppComponentRecommendationsInput, arg2 ...request.Option) (*resiliencehub.ListAppComponentRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppComponentRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAppComponentRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppComponentRecommendationsWithContext indicates an expected call of ListAppComponentRecommendationsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppComponentRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppComponentRecommendationsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppComponentRecommendationsWithContext), varargs...)
}

// ListAppVersionResourceMappings mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourceMappings(arg0 *resiliencehub.ListAppVersionResourceMappingsInput) (*resiliencehub.ListAppVersionResourceMappingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionResourceMappings", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAppVersionResourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersionResourceMappings indicates an expected call of ListAppVersionResourceMappings.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourceMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourceMappings", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourceMappings), arg0)
}

// ListAppVersionResourceMappingsPages mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourceMappingsPages(arg0 *resiliencehub.ListAppVersionResourceMappingsInput, arg1 func(*resiliencehub.ListAppVersionResourceMappingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionResourceMappingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppVersionResourceMappingsPages indicates an expected call of ListAppVersionResourceMappingsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourceMappingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourceMappingsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourceMappingsPages), arg0, arg1)
}

// ListAppVersionResourceMappingsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourceMappingsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppVersionResourceMappingsInput, arg2 func(*resiliencehub.ListAppVersionResourceMappingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppVersionResourceMappingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppVersionResourceMappingsPagesWithContext indicates an expected call of ListAppVersionResourceMappingsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourceMappingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourceMappingsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourceMappingsPagesWithContext), varargs...)
}

// ListAppVersionResourceMappingsRequest mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourceMappingsRequest(arg0 *resiliencehub.ListAppVersionResourceMappingsInput) (*request.Request, *resiliencehub.ListAppVersionResourceMappingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionResourceMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAppVersionResourceMappingsOutput)
	return ret0, ret1
}

// ListAppVersionResourceMappingsRequest indicates an expected call of ListAppVersionResourceMappingsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourceMappingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourceMappingsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourceMappingsRequest), arg0)
}

// ListAppVersionResourceMappingsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourceMappingsWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppVersionResourceMappingsInput, arg2 ...request.Option) (*resiliencehub.ListAppVersionResourceMappingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppVersionResourceMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAppVersionResourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersionResourceMappingsWithContext indicates an expected call of ListAppVersionResourceMappingsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourceMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourceMappingsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourceMappingsWithContext), varargs...)
}

// ListAppVersionResources mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResources(arg0 *resiliencehub.ListAppVersionResourcesInput) (*resiliencehub.ListAppVersionResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionResources", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAppVersionResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersionResources indicates an expected call of ListAppVersionResources.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResources", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResources), arg0)
}

// ListAppVersionResourcesPages mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourcesPages(arg0 *resiliencehub.ListAppVersionResourcesInput, arg1 func(*resiliencehub.ListAppVersionResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppVersionResourcesPages indicates an expected call of ListAppVersionResourcesPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourcesPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourcesPages), arg0, arg1)
}

// ListAppVersionResourcesPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourcesPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppVersionResourcesInput, arg2 func(*resiliencehub.ListAppVersionResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppVersionResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppVersionResourcesPagesWithContext indicates an expected call of ListAppVersionResourcesPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourcesPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourcesPagesWithContext), varargs...)
}

// ListAppVersionResourcesRequest mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourcesRequest(arg0 *resiliencehub.ListAppVersionResourcesInput) (*request.Request, *resiliencehub.ListAppVersionResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAppVersionResourcesOutput)
	return ret0, ret1
}

// ListAppVersionResourcesRequest indicates an expected call of ListAppVersionResourcesRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourcesRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourcesRequest), arg0)
}

// ListAppVersionResourcesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionResourcesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppVersionResourcesInput, arg2 ...request.Option) (*resiliencehub.ListAppVersionResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppVersionResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAppVersionResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersionResourcesWithContext indicates an expected call of ListAppVersionResourcesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionResourcesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionResourcesWithContext), varargs...)
}

// ListAppVersions mocks base method.
func (m *MockResilienceHubAPI) ListAppVersions(arg0 *resiliencehub.ListAppVersionsInput) (*resiliencehub.ListAppVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersions", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAppVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersions indicates an expected call of ListAppVersions.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersions", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersions), arg0)
}

// ListAppVersionsPages mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionsPages(arg0 *resiliencehub.ListAppVersionsInput, arg1 func(*resiliencehub.ListAppVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppVersionsPages indicates an expected call of ListAppVersionsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionsPages), arg0, arg1)
}

// ListAppVersionsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppVersionsInput, arg2 func(*resiliencehub.ListAppVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppVersionsPagesWithContext indicates an expected call of ListAppVersionsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionsPagesWithContext), varargs...)
}

// ListAppVersionsRequest mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionsRequest(arg0 *resiliencehub.ListAppVersionsInput) (*request.Request, *resiliencehub.ListAppVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAppVersionsOutput)
	return ret0, ret1
}

// ListAppVersionsRequest indicates an expected call of ListAppVersionsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionsRequest), arg0)
}

// ListAppVersionsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppVersionsWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppVersionsInput, arg2 ...request.Option) (*resiliencehub.ListAppVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAppVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersionsWithContext indicates an expected call of ListAppVersionsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppVersionsWithContext), varargs...)
}

// ListApps mocks base method.
func (m *MockResilienceHubAPI) ListApps(arg0 *resiliencehub.ListAppsInput) (*resiliencehub.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps.
func (mr *MockResilienceHubAPIMockRecorder) ListApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListApps), arg0)
}

// ListAppsPages mocks base method.
func (m *MockResilienceHubAPI) ListAppsPages(arg0 *resiliencehub.ListAppsInput, arg1 func(*resiliencehub.ListAppsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppsPages indicates an expected call of ListAppsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListAppsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppsPages), arg0, arg1)
}

// ListAppsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppsInput, arg2 func(*resiliencehub.ListAppsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppsPagesWithContext indicates an expected call of ListAppsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppsPagesWithContext), varargs...)
}

// ListAppsRequest mocks base method.
func (m *MockResilienceHubAPI) ListAppsRequest(arg0 *resiliencehub.ListAppsInput) (*request.Request, *resiliencehub.ListAppsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListAppsOutput)
	return ret0, ret1
}

// ListAppsRequest indicates an expected call of ListAppsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListAppsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppsRequest), arg0)
}

// ListAppsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListAppsWithContext(arg0 context.Context, arg1 *resiliencehub.ListAppsInput, arg2 ...request.Option) (*resiliencehub.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsWithContext indicates an expected call of ListAppsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListAppsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListAppsWithContext), varargs...)
}

// ListRecommendationTemplates mocks base method.
func (m *MockResilienceHubAPI) ListRecommendationTemplates(arg0 *resiliencehub.ListRecommendationTemplatesInput) (*resiliencehub.ListRecommendationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationTemplates", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListRecommendationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationTemplates indicates an expected call of ListRecommendationTemplates.
func (mr *MockResilienceHubAPIMockRecorder) ListRecommendationTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationTemplates", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListRecommendationTemplates), arg0)
}

// ListRecommendationTemplatesPages mocks base method.
func (m *MockResilienceHubAPI) ListRecommendationTemplatesPages(arg0 *resiliencehub.ListRecommendationTemplatesInput, arg1 func(*resiliencehub.ListRecommendationTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationTemplatesPages indicates an expected call of ListRecommendationTemplatesPages.
func (mr *MockResilienceHubAPIMockRecorder) ListRecommendationTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationTemplatesPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListRecommendationTemplatesPages), arg0, arg1)
}

// ListRecommendationTemplatesPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListRecommendationTemplatesPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListRecommendationTemplatesInput, arg2 func(*resiliencehub.ListRecommendationTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendationTemplatesPagesWithContext indicates an expected call of ListRecommendationTemplatesPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListRecommendationTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationTemplatesPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListRecommendationTemplatesPagesWithContext), varargs...)
}

// ListRecommendationTemplatesRequest mocks base method.
func (m *MockResilienceHubAPI) ListRecommendationTemplatesRequest(arg0 *resiliencehub.ListRecommendationTemplatesInput) (*request.Request, *resiliencehub.ListRecommendationTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendationTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListRecommendationTemplatesOutput)
	return ret0, ret1
}

// ListRecommendationTemplatesRequest indicates an expected call of ListRecommendationTemplatesRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListRecommendationTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationTemplatesRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListRecommendationTemplatesRequest), arg0)
}

// ListRecommendationTemplatesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListRecommendationTemplatesWithContext(arg0 context.Context, arg1 *resiliencehub.ListRecommendationTemplatesInput, arg2 ...request.Option) (*resiliencehub.ListRecommendationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendationTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListRecommendationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendationTemplatesWithContext indicates an expected call of ListRecommendationTemplatesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListRecommendationTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendationTemplatesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListRecommendationTemplatesWithContext), varargs...)
}

// ListResiliencyPolicies mocks base method.
func (m *MockResilienceHubAPI) ListResiliencyPolicies(arg0 *resiliencehub.ListResiliencyPoliciesInput) (*resiliencehub.ListResiliencyPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResiliencyPolicies", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListResiliencyPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResiliencyPolicies indicates an expected call of ListResiliencyPolicies.
func (mr *MockResilienceHubAPIMockRecorder) ListResiliencyPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResiliencyPolicies", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListResiliencyPolicies), arg0)
}

// ListResiliencyPoliciesPages mocks base method.
func (m *MockResilienceHubAPI) ListResiliencyPoliciesPages(arg0 *resiliencehub.ListResiliencyPoliciesInput, arg1 func(*resiliencehub.ListResiliencyPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResiliencyPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResiliencyPoliciesPages indicates an expected call of ListResiliencyPoliciesPages.
func (mr *MockResilienceHubAPIMockRecorder) ListResiliencyPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResiliencyPoliciesPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListResiliencyPoliciesPages), arg0, arg1)
}

// ListResiliencyPoliciesPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListResiliencyPoliciesPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListResiliencyPoliciesInput, arg2 func(*resiliencehub.ListResiliencyPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResiliencyPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResiliencyPoliciesPagesWithContext indicates an expected call of ListResiliencyPoliciesPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListResiliencyPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResiliencyPoliciesPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListResiliencyPoliciesPagesWithContext), varargs...)
}

// ListResiliencyPoliciesRequest mocks base method.
func (m *MockResilienceHubAPI) ListResiliencyPoliciesRequest(arg0 *resiliencehub.ListResiliencyPoliciesInput) (*request.Request, *resiliencehub.ListResiliencyPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResiliencyPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListResiliencyPoliciesOutput)
	return ret0, ret1
}

// ListResiliencyPoliciesRequest indicates an expected call of ListResiliencyPoliciesRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListResiliencyPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResiliencyPoliciesRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListResiliencyPoliciesRequest), arg0)
}

// ListResiliencyPoliciesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListResiliencyPoliciesWithContext(arg0 context.Context, arg1 *resiliencehub.ListResiliencyPoliciesInput, arg2 ...request.Option) (*resiliencehub.ListResiliencyPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResiliencyPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListResiliencyPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResiliencyPoliciesWithContext indicates an expected call of ListResiliencyPoliciesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListResiliencyPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResiliencyPoliciesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListResiliencyPoliciesWithContext), varargs...)
}

// ListSopRecommendations mocks base method.
func (m *MockResilienceHubAPI) ListSopRecommendations(arg0 *resiliencehub.ListSopRecommendationsInput) (*resiliencehub.ListSopRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSopRecommendations", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListSopRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSopRecommendations indicates an expected call of ListSopRecommendations.
func (mr *MockResilienceHubAPIMockRecorder) ListSopRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSopRecommendations", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSopRecommendations), arg0)
}

// ListSopRecommendationsPages mocks base method.
func (m *MockResilienceHubAPI) ListSopRecommendationsPages(arg0 *resiliencehub.ListSopRecommendationsInput, arg1 func(*resiliencehub.ListSopRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSopRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSopRecommendationsPages indicates an expected call of ListSopRecommendationsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListSopRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSopRecommendationsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSopRecommendationsPages), arg0, arg1)
}

// ListSopRecommendationsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListSopRecommendationsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListSopRecommendationsInput, arg2 func(*resiliencehub.ListSopRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSopRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSopRecommendationsPagesWithContext indicates an expected call of ListSopRecommendationsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListSopRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSopRecommendationsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSopRecommendationsPagesWithContext), varargs...)
}

// ListSopRecommendationsRequest mocks base method.
func (m *MockResilienceHubAPI) ListSopRecommendationsRequest(arg0 *resiliencehub.ListSopRecommendationsInput) (*request.Request, *resiliencehub.ListSopRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSopRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListSopRecommendationsOutput)
	return ret0, ret1
}

// ListSopRecommendationsRequest indicates an expected call of ListSopRecommendationsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListSopRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSopRecommendationsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSopRecommendationsRequest), arg0)
}

// ListSopRecommendationsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListSopRecommendationsWithContext(arg0 context.Context, arg1 *resiliencehub.ListSopRecommendationsInput, arg2 ...request.Option) (*resiliencehub.ListSopRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSopRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListSopRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSopRecommendationsWithContext indicates an expected call of ListSopRecommendationsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListSopRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSopRecommendationsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSopRecommendationsWithContext), varargs...)
}

// ListSuggestedResiliencyPolicies mocks base method.
func (m *MockResilienceHubAPI) ListSuggestedResiliencyPolicies(arg0 *resiliencehub.ListSuggestedResiliencyPoliciesInput) (*resiliencehub.ListSuggestedResiliencyPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuggestedResiliencyPolicies", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListSuggestedResiliencyPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuggestedResiliencyPolicies indicates an expected call of ListSuggestedResiliencyPolicies.
func (mr *MockResilienceHubAPIMockRecorder) ListSuggestedResiliencyPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuggestedResiliencyPolicies", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSuggestedResiliencyPolicies), arg0)
}

// ListSuggestedResiliencyPoliciesPages mocks base method.
func (m *MockResilienceHubAPI) ListSuggestedResiliencyPoliciesPages(arg0 *resiliencehub.ListSuggestedResiliencyPoliciesInput, arg1 func(*resiliencehub.ListSuggestedResiliencyPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuggestedResiliencyPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuggestedResiliencyPoliciesPages indicates an expected call of ListSuggestedResiliencyPoliciesPages.
func (mr *MockResilienceHubAPIMockRecorder) ListSuggestedResiliencyPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuggestedResiliencyPoliciesPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSuggestedResiliencyPoliciesPages), arg0, arg1)
}

// ListSuggestedResiliencyPoliciesPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListSuggestedResiliencyPoliciesPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListSuggestedResiliencyPoliciesInput, arg2 func(*resiliencehub.ListSuggestedResiliencyPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuggestedResiliencyPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuggestedResiliencyPoliciesPagesWithContext indicates an expected call of ListSuggestedResiliencyPoliciesPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListSuggestedResiliencyPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuggestedResiliencyPoliciesPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSuggestedResiliencyPoliciesPagesWithContext), varargs...)
}

// ListSuggestedResiliencyPoliciesRequest mocks base method.
func (m *MockResilienceHubAPI) ListSuggestedResiliencyPoliciesRequest(arg0 *resiliencehub.ListSuggestedResiliencyPoliciesInput) (*request.Request, *resiliencehub.ListSuggestedResiliencyPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuggestedResiliencyPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListSuggestedResiliencyPoliciesOutput)
	return ret0, ret1
}

// ListSuggestedResiliencyPoliciesRequest indicates an expected call of ListSuggestedResiliencyPoliciesRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListSuggestedResiliencyPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuggestedResiliencyPoliciesRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSuggestedResiliencyPoliciesRequest), arg0)
}

// ListSuggestedResiliencyPoliciesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListSuggestedResiliencyPoliciesWithContext(arg0 context.Context, arg1 *resiliencehub.ListSuggestedResiliencyPoliciesInput, arg2 ...request.Option) (*resiliencehub.ListSuggestedResiliencyPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuggestedResiliencyPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListSuggestedResiliencyPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuggestedResiliencyPoliciesWithContext indicates an expected call of ListSuggestedResiliencyPoliciesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListSuggestedResiliencyPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuggestedResiliencyPoliciesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListSuggestedResiliencyPoliciesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockResilienceHubAPI) ListTagsForResource(arg0 *resiliencehub.ListTagsForResourceInput) (*resiliencehub.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockResilienceHubAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockResilienceHubAPI) ListTagsForResourceRequest(arg0 *resiliencehub.ListTagsForResourceInput) (*request.Request, *resiliencehub.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockResilienceHubAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *resiliencehub.ListTagsForResourceInput, arg2 ...request.Option) (*resiliencehub.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTestRecommendations mocks base method.
func (m *MockResilienceHubAPI) ListTestRecommendations(arg0 *resiliencehub.ListTestRecommendationsInput) (*resiliencehub.ListTestRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestRecommendations", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListTestRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestRecommendations indicates an expected call of ListTestRecommendations.
func (mr *MockResilienceHubAPIMockRecorder) ListTestRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestRecommendations", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTestRecommendations), arg0)
}

// ListTestRecommendationsPages mocks base method.
func (m *MockResilienceHubAPI) ListTestRecommendationsPages(arg0 *resiliencehub.ListTestRecommendationsInput, arg1 func(*resiliencehub.ListTestRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTestRecommendationsPages indicates an expected call of ListTestRecommendationsPages.
func (mr *MockResilienceHubAPIMockRecorder) ListTestRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestRecommendationsPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTestRecommendationsPages), arg0, arg1)
}

// ListTestRecommendationsPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListTestRecommendationsPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListTestRecommendationsInput, arg2 func(*resiliencehub.ListTestRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTestRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTestRecommendationsPagesWithContext indicates an expected call of ListTestRecommendationsPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListTestRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestRecommendationsPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTestRecommendationsPagesWithContext), varargs...)
}

// ListTestRecommendationsRequest mocks base method.
func (m *MockResilienceHubAPI) ListTestRecommendationsRequest(arg0 *resiliencehub.ListTestRecommendationsInput) (*request.Request, *resiliencehub.ListTestRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListTestRecommendationsOutput)
	return ret0, ret1
}

// ListTestRecommendationsRequest indicates an expected call of ListTestRecommendationsRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListTestRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestRecommendationsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTestRecommendationsRequest), arg0)
}

// ListTestRecommendationsWithContext mocks base method.
func (m *MockResilienceHubAPI) ListTestRecommendationsWithContext(arg0 context.Context, arg1 *resiliencehub.ListTestRecommendationsInput, arg2 ...request.Option) (*resiliencehub.ListTestRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTestRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListTestRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestRecommendationsWithContext indicates an expected call of ListTestRecommendationsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListTestRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestRecommendationsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListTestRecommendationsWithContext), varargs...)
}

// ListUnsupportedAppVersionResources mocks base method.
func (m *MockResilienceHubAPI) ListUnsupportedAppVersionResources(arg0 *resiliencehub.ListUnsupportedAppVersionResourcesInput) (*resiliencehub.ListUnsupportedAppVersionResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnsupportedAppVersionResources", arg0)
	ret0, _ := ret[0].(*resiliencehub.ListUnsupportedAppVersionResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnsupportedAppVersionResources indicates an expected call of ListUnsupportedAppVersionResources.
func (mr *MockResilienceHubAPIMockRecorder) ListUnsupportedAppVersionResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnsupportedAppVersionResources", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListUnsupportedAppVersionResources), arg0)
}

// ListUnsupportedAppVersionResourcesPages mocks base method.
func (m *MockResilienceHubAPI) ListUnsupportedAppVersionResourcesPages(arg0 *resiliencehub.ListUnsupportedAppVersionResourcesInput, arg1 func(*resiliencehub.ListUnsupportedAppVersionResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnsupportedAppVersionResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUnsupportedAppVersionResourcesPages indicates an expected call of ListUnsupportedAppVersionResourcesPages.
func (mr *MockResilienceHubAPIMockRecorder) ListUnsupportedAppVersionResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnsupportedAppVersionResourcesPages", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListUnsupportedAppVersionResourcesPages), arg0, arg1)
}

// ListUnsupportedAppVersionResourcesPagesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListUnsupportedAppVersionResourcesPagesWithContext(arg0 context.Context, arg1 *resiliencehub.ListUnsupportedAppVersionResourcesInput, arg2 func(*resiliencehub.ListUnsupportedAppVersionResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUnsupportedAppVersionResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUnsupportedAppVersionResourcesPagesWithContext indicates an expected call of ListUnsupportedAppVersionResourcesPagesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListUnsupportedAppVersionResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnsupportedAppVersionResourcesPagesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListUnsupportedAppVersionResourcesPagesWithContext), varargs...)
}

// ListUnsupportedAppVersionResourcesRequest mocks base method.
func (m *MockResilienceHubAPI) ListUnsupportedAppVersionResourcesRequest(arg0 *resiliencehub.ListUnsupportedAppVersionResourcesInput) (*request.Request, *resiliencehub.ListUnsupportedAppVersionResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnsupportedAppVersionResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ListUnsupportedAppVersionResourcesOutput)
	return ret0, ret1
}

// ListUnsupportedAppVersionResourcesRequest indicates an expected call of ListUnsupportedAppVersionResourcesRequest.
func (mr *MockResilienceHubAPIMockRecorder) ListUnsupportedAppVersionResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnsupportedAppVersionResourcesRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListUnsupportedAppVersionResourcesRequest), arg0)
}

// ListUnsupportedAppVersionResourcesWithContext mocks base method.
func (m *MockResilienceHubAPI) ListUnsupportedAppVersionResourcesWithContext(arg0 context.Context, arg1 *resiliencehub.ListUnsupportedAppVersionResourcesInput, arg2 ...request.Option) (*resiliencehub.ListUnsupportedAppVersionResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUnsupportedAppVersionResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ListUnsupportedAppVersionResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnsupportedAppVersionResourcesWithContext indicates an expected call of ListUnsupportedAppVersionResourcesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ListUnsupportedAppVersionResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnsupportedAppVersionResourcesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ListUnsupportedAppVersionResourcesWithContext), varargs...)
}

// PublishAppVersion mocks base method.
func (m *MockResilienceHubAPI) PublishAppVersion(arg0 *resiliencehub.PublishAppVersionInput) (*resiliencehub.PublishAppVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAppVersion", arg0)
	ret0, _ := ret[0].(*resiliencehub.PublishAppVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAppVersion indicates an expected call of PublishAppVersion.
func (mr *MockResilienceHubAPIMockRecorder) PublishAppVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAppVersion", reflect.TypeOf((*MockResilienceHubAPI)(nil).PublishAppVersion), arg0)
}

// PublishAppVersionRequest mocks base method.
func (m *MockResilienceHubAPI) PublishAppVersionRequest(arg0 *resiliencehub.PublishAppVersionInput) (*request.Request, *resiliencehub.PublishAppVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAppVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.PublishAppVersionOutput)
	return ret0, ret1
}

// PublishAppVersionRequest indicates an expected call of PublishAppVersionRequest.
func (mr *MockResilienceHubAPIMockRecorder) PublishAppVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAppVersionRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).PublishAppVersionRequest), arg0)
}

// PublishAppVersionWithContext mocks base method.
func (m *MockResilienceHubAPI) PublishAppVersionWithContext(arg0 context.Context, arg1 *resiliencehub.PublishAppVersionInput, arg2 ...request.Option) (*resiliencehub.PublishAppVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAppVersionWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.PublishAppVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAppVersionWithContext indicates an expected call of PublishAppVersionWithContext.
func (mr *MockResilienceHubAPIMockRecorder) PublishAppVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAppVersionWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).PublishAppVersionWithContext), varargs...)
}

// PutDraftAppVersionTemplate mocks base method.
func (m *MockResilienceHubAPI) PutDraftAppVersionTemplate(arg0 *resiliencehub.PutDraftAppVersionTemplateInput) (*resiliencehub.PutDraftAppVersionTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDraftAppVersionTemplate", arg0)
	ret0, _ := ret[0].(*resiliencehub.PutDraftAppVersionTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDraftAppVersionTemplate indicates an expected call of PutDraftAppVersionTemplate.
func (mr *MockResilienceHubAPIMockRecorder) PutDraftAppVersionTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDraftAppVersionTemplate", reflect.TypeOf((*MockResilienceHubAPI)(nil).PutDraftAppVersionTemplate), arg0)
}

// PutDraftAppVersionTemplateRequest mocks base method.
func (m *MockResilienceHubAPI) PutDraftAppVersionTemplateRequest(arg0 *resiliencehub.PutDraftAppVersionTemplateInput) (*request.Request, *resiliencehub.PutDraftAppVersionTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDraftAppVersionTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.PutDraftAppVersionTemplateOutput)
	return ret0, ret1
}

// PutDraftAppVersionTemplateRequest indicates an expected call of PutDraftAppVersionTemplateRequest.
func (mr *MockResilienceHubAPIMockRecorder) PutDraftAppVersionTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDraftAppVersionTemplateRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).PutDraftAppVersionTemplateRequest), arg0)
}

// PutDraftAppVersionTemplateWithContext mocks base method.
func (m *MockResilienceHubAPI) PutDraftAppVersionTemplateWithContext(arg0 context.Context, arg1 *resiliencehub.PutDraftAppVersionTemplateInput, arg2 ...request.Option) (*resiliencehub.PutDraftAppVersionTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDraftAppVersionTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.PutDraftAppVersionTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDraftAppVersionTemplateWithContext indicates an expected call of PutDraftAppVersionTemplateWithContext.
func (mr *MockResilienceHubAPIMockRecorder) PutDraftAppVersionTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDraftAppVersionTemplateWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).PutDraftAppVersionTemplateWithContext), varargs...)
}

// RemoveDraftAppVersionResourceMappings mocks base method.
func (m *MockResilienceHubAPI) RemoveDraftAppVersionResourceMappings(arg0 *resiliencehub.RemoveDraftAppVersionResourceMappingsInput) (*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDraftAppVersionResourceMappings", arg0)
	ret0, _ := ret[0].(*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDraftAppVersionResourceMappings indicates an expected call of RemoveDraftAppVersionResourceMappings.
func (mr *MockResilienceHubAPIMockRecorder) RemoveDraftAppVersionResourceMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDraftAppVersionResourceMappings", reflect.TypeOf((*MockResilienceHubAPI)(nil).RemoveDraftAppVersionResourceMappings), arg0)
}

// RemoveDraftAppVersionResourceMappingsRequest mocks base method.
func (m *MockResilienceHubAPI) RemoveDraftAppVersionResourceMappingsRequest(arg0 *resiliencehub.RemoveDraftAppVersionResourceMappingsInput) (*request.Request, *resiliencehub.RemoveDraftAppVersionResourceMappingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDraftAppVersionResourceMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput)
	return ret0, ret1
}

// RemoveDraftAppVersionResourceMappingsRequest indicates an expected call of RemoveDraftAppVersionResourceMappingsRequest.
func (mr *MockResilienceHubAPIMockRecorder) RemoveDraftAppVersionResourceMappingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDraftAppVersionResourceMappingsRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).RemoveDraftAppVersionResourceMappingsRequest), arg0)
}

// RemoveDraftAppVersionResourceMappingsWithContext mocks base method.
func (m *MockResilienceHubAPI) RemoveDraftAppVersionResourceMappingsWithContext(arg0 context.Context, arg1 *resiliencehub.RemoveDraftAppVersionResourceMappingsInput, arg2 ...request.Option) (*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveDraftAppVersionResourceMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDraftAppVersionResourceMappingsWithContext indicates an expected call of RemoveDraftAppVersionResourceMappingsWithContext.
func (mr *MockResilienceHubAPIMockRecorder) RemoveDraftAppVersionResourceMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDraftAppVersionResourceMappingsWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).RemoveDraftAppVersionResourceMappingsWithContext), varargs...)
}

// ResolveAppVersionResources mocks base method.
func (m *MockResilienceHubAPI) ResolveAppVersionResources(arg0 *resiliencehub.ResolveAppVersionResourcesInput) (*resiliencehub.ResolveAppVersionResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAppVersionResources", arg0)
	ret0, _ := ret[0].(*resiliencehub.ResolveAppVersionResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveAppVersionResources indicates an expected call of ResolveAppVersionResources.
func (mr *MockResilienceHubAPIMockRecorder) ResolveAppVersionResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAppVersionResources", reflect.TypeOf((*MockResilienceHubAPI)(nil).ResolveAppVersionResources), arg0)
}

// ResolveAppVersionResourcesRequest mocks base method.
func (m *MockResilienceHubAPI) ResolveAppVersionResourcesRequest(arg0 *resiliencehub.ResolveAppVersionResourcesInput) (*request.Request, *resiliencehub.ResolveAppVersionResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAppVersionResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.ResolveAppVersionResourcesOutput)
	return ret0, ret1
}

// ResolveAppVersionResourcesRequest indicates an expected call of ResolveAppVersionResourcesRequest.
func (mr *MockResilienceHubAPIMockRecorder) ResolveAppVersionResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAppVersionResourcesRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).ResolveAppVersionResourcesRequest), arg0)
}

// ResolveAppVersionResourcesWithContext mocks base method.
func (m *MockResilienceHubAPI) ResolveAppVersionResourcesWithContext(arg0 context.Context, arg1 *resiliencehub.ResolveAppVersionResourcesInput, arg2 ...request.Option) (*resiliencehub.ResolveAppVersionResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResolveAppVersionResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.ResolveAppVersionResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveAppVersionResourcesWithContext indicates an expected call of ResolveAppVersionResourcesWithContext.
func (mr *MockResilienceHubAPIMockRecorder) ResolveAppVersionResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAppVersionResourcesWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).ResolveAppVersionResourcesWithContext), varargs...)
}

// StartAppAssessment mocks base method.
func (m *MockResilienceHubAPI) StartAppAssessment(arg0 *resiliencehub.StartAppAssessmentInput) (*resiliencehub.StartAppAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppAssessment", arg0)
	ret0, _ := ret[0].(*resiliencehub.StartAppAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAppAssessment indicates an expected call of StartAppAssessment.
func (mr *MockResilienceHubAPIMockRecorder) StartAppAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppAssessment", reflect.TypeOf((*MockResilienceHubAPI)(nil).StartAppAssessment), arg0)
}

// StartAppAssessmentRequest mocks base method.
func (m *MockResilienceHubAPI) StartAppAssessmentRequest(arg0 *resiliencehub.StartAppAssessmentInput) (*request.Request, *resiliencehub.StartAppAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAppAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.StartAppAssessmentOutput)
	return ret0, ret1
}

// StartAppAssessmentRequest indicates an expected call of StartAppAssessmentRequest.
func (mr *MockResilienceHubAPIMockRecorder) StartAppAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppAssessmentRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).StartAppAssessmentRequest), arg0)
}

// StartAppAssessmentWithContext mocks base method.
func (m *MockResilienceHubAPI) StartAppAssessmentWithContext(arg0 context.Context, arg1 *resiliencehub.StartAppAssessmentInput, arg2 ...request.Option) (*resiliencehub.StartAppAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAppAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.StartAppAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAppAssessmentWithContext indicates an expected call of StartAppAssessmentWithContext.
func (mr *MockResilienceHubAPIMockRecorder) StartAppAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAppAssessmentWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).StartAppAssessmentWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockResilienceHubAPI) TagResource(arg0 *resiliencehub.TagResourceInput) (*resiliencehub.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*resiliencehub.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockResilienceHubAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockResilienceHubAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockResilienceHubAPI) TagResourceRequest(arg0 *resiliencehub.TagResourceInput) (*request.Request, *resiliencehub.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockResilienceHubAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockResilienceHubAPI) TagResourceWithContext(arg0 context.Context, arg1 *resiliencehub.TagResourceInput, arg2 ...request.Option) (*resiliencehub.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockResilienceHubAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockResilienceHubAPI) UntagResource(arg0 *resiliencehub.UntagResourceInput) (*resiliencehub.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*resiliencehub.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockResilienceHubAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockResilienceHubAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockResilienceHubAPI) UntagResourceRequest(arg0 *resiliencehub.UntagResourceInput) (*request.Request, *resiliencehub.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockResilienceHubAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockResilienceHubAPI) UntagResourceWithContext(arg0 context.Context, arg1 *resiliencehub.UntagResourceInput, arg2 ...request.Option) (*resiliencehub.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockResilienceHubAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApp mocks base method.
func (m *MockResilienceHubAPI) UpdateApp(arg0 *resiliencehub.UpdateAppInput) (*resiliencehub.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0)
	ret0, _ := ret[0].(*resiliencehub.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockResilienceHubAPIMockRecorder) UpdateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockResilienceHubAPI)(nil).UpdateApp), arg0)
}

// UpdateAppRequest mocks base method.
func (m *MockResilienceHubAPI) UpdateAppRequest(arg0 *resiliencehub.UpdateAppInput) (*request.Request, *resiliencehub.UpdateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.UpdateAppOutput)
	return ret0, ret1
}

// UpdateAppRequest indicates an expected call of UpdateAppRequest.
func (mr *MockResilienceHubAPIMockRecorder) UpdateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).UpdateAppRequest), arg0)
}

// UpdateAppWithContext mocks base method.
func (m *MockResilienceHubAPI) UpdateAppWithContext(arg0 context.Context, arg1 *resiliencehub.UpdateAppInput, arg2 ...request.Option) (*resiliencehub.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppWithContext indicates an expected call of UpdateAppWithContext.
func (mr *MockResilienceHubAPIMockRecorder) UpdateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).UpdateAppWithContext), varargs...)
}

// UpdateResiliencyPolicy mocks base method.
func (m *MockResilienceHubAPI) UpdateResiliencyPolicy(arg0 *resiliencehub.UpdateResiliencyPolicyInput) (*resiliencehub.UpdateResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResiliencyPolicy", arg0)
	ret0, _ := ret[0].(*resiliencehub.UpdateResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResiliencyPolicy indicates an expected call of UpdateResiliencyPolicy.
func (mr *MockResilienceHubAPIMockRecorder) UpdateResiliencyPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResiliencyPolicy", reflect.TypeOf((*MockResilienceHubAPI)(nil).UpdateResiliencyPolicy), arg0)
}

// UpdateResiliencyPolicyRequest mocks base method.
func (m *MockResilienceHubAPI) UpdateResiliencyPolicyRequest(arg0 *resiliencehub.UpdateResiliencyPolicyInput) (*request.Request, *resiliencehub.UpdateResiliencyPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResiliencyPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*resiliencehub.UpdateResiliencyPolicyOutput)
	return ret0, ret1
}

// UpdateResiliencyPolicyRequest indicates an expected call of UpdateResiliencyPolicyRequest.
func (mr *MockResilienceHubAPIMockRecorder) UpdateResiliencyPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResiliencyPolicyRequest", reflect.TypeOf((*MockResilienceHubAPI)(nil).UpdateResiliencyPolicyRequest), arg0)
}

// UpdateResiliencyPolicyWithContext mocks base method.
func (m *MockResilienceHubAPI) UpdateResiliencyPolicyWithContext(arg0 context.Context, arg1 *resiliencehub.UpdateResiliencyPolicyInput, arg2 ...request.Option) (*resiliencehub.UpdateResiliencyPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResiliencyPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*resiliencehub.UpdateResiliencyPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResiliencyPolicyWithContext indicates an expected call of UpdateResiliencyPolicyWithContext.
func (mr *MockResilienceHubAPIMockRecorder) UpdateResiliencyPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResiliencyPolicyWithContext", reflect.TypeOf((*MockResilienceHubAPI)(nil).UpdateResiliencyPolicyWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/route53resolver/route53resolveriface (interfaces: Route53ResolverAPI)

// Package route53resolvermock is a generated GoMock package.
package route53resolvermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	route53resolver "github.com/aws/aws-sdk-go/service/route53resolver"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRoute53ResolverAPI is a mock of Route53ResolverAPI interface
type MockRoute53ResolverAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53ResolverAPIMockRecorder
}

// MockRoute53ResolverAPIMockRecorder is the mock recorder for MockRoute53ResolverAPI
type MockRoute53ResolverAPIMockRecorder struct {
	mock *MockRoute53ResolverAPI
}

// NewMockRoute53ResolverAPI creates a new mock instance
func NewMockRoute53ResolverAPI(ctrl *gomock.Controller) *MockRoute53ResolverAPI {
	mock := &MockRoute53ResolverAPI{ctrl: ctrl}
	mock.recorder = &MockRoute53ResolverAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoute53ResolverAPI) EXPECT() *MockRoute53ResolverAPIMockRecorder {
	return m.recorder
}

// AssociateResolverEndpointIpAddress mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverEndpointIpAddress(arg0 *route53resolver.AssociateResolverEndpointIpAddressInput) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResolverEndpointIpAddress", arg0)
	ret0, _ := ret[0].(*route53resolver.AssociateResolverEndpointIpAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResolverEndpointIpAddress indicates an expected call of AssociateResolverEndpointIpAddress
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverEndpointIpAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverEndpointIpAddress", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverEndpointIpAddress), arg0)
}

// AssociateResolverEndpointIpAddressRequest mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverEndpointIpAddressRequest(arg0 *route53resolver.AssociateResolverEndpointIpAddressInput) (*request.Request, *route53resolver.AssociateResolverEndpointIpAddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResolverEndpointIpAddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.AssociateResolverEndpointIpAddressOutput)
	return ret0, ret1
}

// AssociateResolverEndpointIpAddressRequest indicates an expected call of AssociateResolverEndpointIpAddressRequest
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverEndpointIpAddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverEndpointIpAddressRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverEndpointIpAddressRequest), arg0)
}

// AssociateResolverEndpointIpAddressWithContext mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverEndpointIpAddressWithContext(arg0 context.Context, arg1 *route53resolver.AssociateResolverEndpointIpAddressInput, arg2 ...request.Option) (*route53resolver.AssociateResolverEndpointIpAddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateResolverEndpointIpAddressWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.AssociateResolverEndpointIpAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResolverEndpointIpAddressWithContext indicates an expected call of AssociateResolverEndpointIpAddressWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverEndpointIpAddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverEndpointIpAddressWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverEndpointIpAddressWithContext), varargs...)
}

// AssociateResolverQueryLogConfig mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverQueryLogConfig(arg0 *route53resolver.AssociateResolverQueryLogConfigInput) (*route53resolver.AssociateResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResolverQueryLogConfig", arg0)
	ret0, _ := ret[0].(*route53resolver.AssociateResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResolverQueryLogConfig indicates an expected call of AssociateResolverQueryLogConfig
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverQueryLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverQueryLogConfig", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverQueryLogConfig), arg0)
}

// AssociateResolverQueryLogConfigRequest mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverQueryLogConfigRequest(arg0 *route53resolver.AssociateResolverQueryLogConfigInput) (*request.Request, *route53resolver.AssociateResolverQueryLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResolverQueryLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.AssociateResolverQueryLogConfigOutput)
	return ret0, ret1
}

// AssociateResolverQueryLogConfigRequest indicates an expected call of AssociateResolverQueryLogConfigRequest
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverQueryLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverQueryLogConfigRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverQueryLogConfigRequest), arg0)
}

// AssociateResolverQueryLogConfigWithContext mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverQueryLogConfigWithContext(arg0 context.Context, arg1 *route53resolver.AssociateResolverQueryLogConfigInput, arg2 ...request.Option) (*route53resolver.AssociateResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateResolverQueryLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.AssociateResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResolverQueryLogConfigWithContext indicates an expected call of AssociateResolverQueryLogConfigWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverQueryLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverQueryLogConfigWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverQueryLogConfigWithContext), varargs...)
}

// AssociateResolverRule mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverRule(arg0 *route53resolver.AssociateResolverRuleInput) (*route53resolver.AssociateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResolverRule", arg0)
	ret0, _ := ret[0].(*route53resolver.AssociateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResolverRule indicates an expected call of AssociateResolverRule
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverRule", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverRule), arg0)
}

// AssociateResolverRuleRequest mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverRuleRequest(arg0 *route53resolver.AssociateResolverRuleInput) (*request.Request, *route53resolver.AssociateResolverRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResolverRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.AssociateResolverRuleOutput)
	return ret0, ret1
}

// AssociateResolverRuleRequest indicates an expected call of AssociateResolverRuleRequest
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverRuleRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverRuleRequest), arg0)
}

// AssociateResolverRuleWithContext mocks base method
func (m *MockRoute53ResolverAPI) AssociateResolverRuleWithContext(arg0 context.Context, arg1 *route53resolver.AssociateResolverRuleInput, arg2 ...request.Option) (*route53resolver.AssociateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateResolverRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.AssociateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResolverRuleWithContext indicates an expected call of AssociateResolverRuleWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) AssociateResolverRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResolverRuleWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).AssociateResolverRuleWithContext), varargs...)
}

// CreateResolverEndpoint mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverEndpoint(arg0 *route53resolver.CreateResolverEndpointInput) (*route53resolver.CreateResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResolverEndpoint", arg0)
	ret0, _ := ret[0].(*route53resolver.CreateResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResolverEndpoint indicates an expected call of CreateResolverEndpoint
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverEndpoint", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverEndpoint), arg0)
}

// CreateResolverEndpointRequest mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverEndpointRequest(arg0 *route53resolver.CreateResolverEndpointInput) (*request.Request, *route53resolver.CreateResolverEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResolverEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.CreateResolverEndpointOutput)
	return ret0, ret1
}

// CreateResolverEndpointRequest indicates an expected call of CreateResolverEndpointRequest
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverEndpointRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverEndpointRequest), arg0)
}

// CreateResolverEndpointWithContext mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverEndpointWithContext(arg0 context.Context, arg1 *route53resolver.CreateResolverEndpointInput, arg2 ...request.Option) (*route53resolver.CreateResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResolverEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.CreateResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResolverEndpointWithContext indicates an expected call of CreateResolverEndpointWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverEndpointWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverEndpointWithContext), varargs...)
}

// CreateResolverQueryLogConfig mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverQueryLogConfig(arg0 *route53resolver.CreateResolverQueryLogConfigInput) (*route53resolver.CreateResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResolverQueryLogConfig", arg0)
	ret0, _ := ret[0].(*route53resolver.CreateResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResolverQueryLogConfig indicates an expected call of CreateResolverQueryLogConfig
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverQueryLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverQueryLogConfig", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverQueryLogConfig), arg0)
}

// CreateResolverQueryLogConfigRequest mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverQueryLogConfigRequest(arg0 *route53resolver.CreateResolverQueryLogConfigInput) (*request.Request, *route53resolver.CreateResolverQueryLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResolverQueryLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.CreateResolverQueryLogConfigOutput)
	return ret0, ret1
}

// CreateResolverQueryLogConfigRequest indicates an expected call of CreateResolverQueryLogConfigRequest
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverQueryLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverQueryLogConfigRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverQueryLogConfigRequest), arg0)
}

// CreateResolverQueryLogConfigWithContext mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverQueryLogConfigWithContext(arg0 context.Context, arg1 *route53resolver.CreateResolverQueryLogConfigInput, arg2 ...request.Option) (*route53resolver.CreateResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResolverQueryLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.CreateResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResolverQueryLogConfigWithContext indicates an expected call of CreateResolverQueryLogConfigWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverQueryLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverQueryLogConfigWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverQueryLogConfigWithContext), varargs...)
}

// CreateResolverRule mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverRule(arg0 *route53resolver.CreateResolverRuleInput) (*route53resolver.CreateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResolverRule", arg0)
	ret0, _ := ret[0].(*route53resolver.CreateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResolverRule indicates an expected call of CreateResolverRule
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverRule", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverRule), arg0)
}

// CreateResolverRuleRequest mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverRuleRequest(arg0 *route53resolver.CreateResolverRuleInput) (*request.Request, *route53resolver.CreateResolverRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResolverRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.CreateResolverRuleOutput)
	return ret0, ret1
}

// CreateResolverRuleRequest indicates an expected call of CreateResolverRuleRequest
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverRuleRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverRuleRequest), arg0)
}

// CreateResolverRuleWithContext mocks base method
func (m *MockRoute53ResolverAPI) CreateResolverRuleWithContext(arg0 context.Context, arg1 *route53resolver.CreateResolverRuleInput, arg2 ...request.Option) (*route53resolver.CreateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResolverRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.CreateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResolverRuleWithContext indicates an expected call of CreateResolverRuleWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) CreateResolverRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolverRuleWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).CreateResolverRuleWithContext), varargs...)
}

// DeleteResolverEndpoint mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverEndpoint(arg0 *route53resolver.DeleteResolverEndpointInput) (*route53resolver.DeleteResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResolverEndpoint", arg0)
	ret0, _ := ret[0].(*route53resolver.DeleteResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResolverEndpoint indicates an expected call of DeleteResolverEndpoint
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverEndpoint", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverEndpoint), arg0)
}

// DeleteResolverEndpointRequest mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverEndpointRequest(arg0 *route53resolver.DeleteResolverEndpointInput) (*request.Request, *route53resolver.DeleteResolverEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResolverEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.DeleteResolverEndpointOutput)
	return ret0, ret1
}

// DeleteResolverEndpointRequest indicates an expected call of DeleteResolverEndpointRequest
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverEndpointRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverEndpointRequest), arg0)
}

// DeleteResolverEndpointWithContext mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverEndpointWithContext(arg0 context.Context, arg1 *route53resolver.DeleteResolverEndpointInput, arg2 ...request.Option) (*route53resolver.DeleteResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResolverEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.DeleteResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResolverEndpointWithContext indicates an expected call of DeleteResolverEndpointWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverEndpointWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverEndpointWithContext), varargs...)
}

// DeleteResolverQueryLogConfig mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverQueryLogConfig(arg0 *route53resolver.DeleteResolverQueryLogConfigInput) (*route53resolver.DeleteResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResolverQueryLogConfig", arg0)
	ret0, _ := ret[0].(*route53resolver.DeleteResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResolverQueryLogConfig indicates an expected call of DeleteResolverQueryLogConfig
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverQueryLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverQueryLogConfig", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverQueryLogConfig), arg0)
}

// DeleteResolverQueryLogConfigRequest mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverQueryLogConfigRequest(arg0 *route53resolver.DeleteResolverQueryLogConfigInput) (*request.Request, *route53resolver.DeleteResolverQueryLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResolverQueryLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.DeleteResolverQueryLogConfigOutput)
	return ret0, ret1
}

// DeleteResolverQueryLogConfigRequest indicates an expected call of DeleteResolverQueryLogConfigRequest
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverQueryLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverQueryLogConfigRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverQueryLogConfigRequest), arg0)
}

// DeleteResolverQueryLogConfigWithContext mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverQueryLogConfigWithContext(arg0 context.Context, arg1 *route53resolver.DeleteResolverQueryLogConfigInput, arg2 ...request.Option) (*route53resolver.DeleteResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResolverQueryLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.DeleteResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResolverQueryLogConfigWithContext indicates an expected call of DeleteResolverQueryLogConfigWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverQueryLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverQueryLogConfigWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverQueryLogConfigWithContext), varargs...)
}

// DeleteResolverRule mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverRule(arg0 *route53resolver.DeleteResolverRuleInput) (*route53resolver.DeleteResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResolverRule", arg0)
	ret0, _ := ret[0].(*route53resolver.DeleteResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResolverRule indicates an expected call of DeleteResolverRule
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverRule", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverRule), arg0)
}

// DeleteResolverRuleRequest mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverRuleRequest(arg0 *route53resolver.DeleteResolverRuleInput) (*request.Request, *route53resolver.DeleteResolverRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResolverRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.DeleteResolverRuleOutput)
	return ret0, ret1
}

// DeleteResolverRuleRequest indicates an expected call of DeleteResolverRuleRequest
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverRuleRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverRuleRequest), arg0)
}

// DeleteResolverRuleWithContext mocks base method
func (m *MockRoute53ResolverAPI) DeleteResolverRuleWithContext(arg0 context.Context, arg1 *route53resolver.DeleteResolverRuleInput, arg2 ...request.Option) (*route53resolver.DeleteResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResolverRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.DeleteResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResolverRuleWithContext indicates an expected call of DeleteResolverRuleWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) DeleteResolverRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolverRuleWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DeleteResolverRuleWithContext), varargs...)
}

// DisassociateResolverEndpointIpAddress mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverEndpointIpAddress(arg0 *route53resolver.DisassociateResolverEndpointIpAddressInput) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResolverEndpointIpAddress", arg0)
	ret0, _ := ret[0].(*route53resolver.DisassociateResolverEndpointIpAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResolverEndpointIpAddress indicates an expected call of DisassociateResolverEndpointIpAddress
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverEndpointIpAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverEndpointIpAddress", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverEndpointIpAddress), arg0)
}

// DisassociateResolverEndpointIpAddressRequest mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverEndpointIpAddressRequest(arg0 *route53resolver.DisassociateResolverEndpointIpAddressInput) (*request.Request, *route53resolver.DisassociateResolverEndpointIpAddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResolverEndpointIpAddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.DisassociateResolverEndpointIpAddressOutput)
	return ret0, ret1
}

// DisassociateResolverEndpointIpAddressRequest indicates an expected call of DisassociateResolverEndpointIpAddressRequest
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverEndpointIpAddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverEndpointIpAddressRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverEndpointIpAddressRequest), arg0)
}

// DisassociateResolverEndpointIpAddressWithContext mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverEndpointIpAddressWithContext(arg0 context.Context, arg1 *route53resolver.DisassociateResolverEndpointIpAddressInput, arg2 ...request.Option) (*route53resolver.DisassociateResolverEndpointIpAddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateResolverEndpointIpAddressWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.DisassociateResolverEndpointIpAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResolverEndpointIpAddressWithContext indicates an expected call of DisassociateResolverEndpointIpAddressWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverEndpointIpAddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverEndpointIpAddressWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverEndpointIpAddressWithContext), varargs...)
}

// DisassociateResolverQueryLogConfig mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverQueryLogConfig(arg0 *route53resolver.DisassociateResolverQueryLogConfigInput) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResolverQueryLogConfig", arg0)
	ret0, _ := ret[0].(*route53resolver.DisassociateResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResolverQueryLogConfig indicates an expected call of DisassociateResolverQueryLogConfig
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverQueryLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverQueryLogConfig", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverQueryLogConfig), arg0)
}

// DisassociateResolverQueryLogConfigRequest mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverQueryLogConfigRequest(arg0 *route53resolver.DisassociateResolverQueryLogConfigInput) (*request.Request, *route53resolver.DisassociateResolverQueryLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResolverQueryLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.DisassociateResolverQueryLogConfigOutput)
	return ret0, ret1
}

// DisassociateResolverQueryLogConfigRequest indicates an expected call of DisassociateResolverQueryLogConfigRequest
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverQueryLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverQueryLogConfigRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverQueryLogConfigRequest), arg0)
}

// DisassociateResolverQueryLogConfigWithContext mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverQueryLogConfigWithContext(arg0 context.Context, arg1 *route53resolver.DisassociateResolverQueryLogConfigInput, arg2 ...request.Option) (*route53resolver.DisassociateResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateResolverQueryLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.DisassociateResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResolverQueryLogConfigWithContext indicates an expected call of DisassociateResolverQueryLogConfigWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverQueryLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverQueryLogConfigWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverQueryLogConfigWithContext), varargs...)
}

// DisassociateResolverRule mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverRule(arg0 *route53resolver.DisassociateResolverRuleInput) (*route53resolver.DisassociateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResolverRule", arg0)
	ret0, _ := ret[0].(*route53resolver.DisassociateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResolverRule indicates an expected call of DisassociateResolverRule
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverRule", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverRule), arg0)
}

// DisassociateResolverRuleRequest mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverRuleRequest(arg0 *route53resolver.DisassociateResolverRuleInput) (*request.Request, *route53resolver.DisassociateResolverRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResolverRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.DisassociateResolverRuleOutput)
	return ret0, ret1
}

// DisassociateResolverRuleRequest indicates an expected call of DisassociateResolverRuleRequest
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverRuleRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverRuleRequest), arg0)
}

// DisassociateResolverRuleWithContext mocks base method
func (m *MockRoute53ResolverAPI) DisassociateResolverRuleWithContext(arg0 context.Context, arg1 *route53resolver.DisassociateResolverRuleInput, arg2 ...request.Option) (*route53resolver.DisassociateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateResolverRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.DisassociateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResolverRuleWithContext indicates an expected call of DisassociateResolverRuleWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) DisassociateResolverRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResolverRuleWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).DisassociateResolverRuleWithContext), varargs...)
}

// GetResolverDnssecConfig mocks base method
func (m *MockRoute53ResolverAPI) GetResolverDnssecConfig(arg0 *route53resolver.GetResolverDnssecConfigInput) (*route53resolver.GetResolverDnssecConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverDnssecConfig", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverDnssecConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverDnssecConfig indicates an expected call of GetResolverDnssecConfig
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverDnssecConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverDnssecConfig", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverDnssecConfig), arg0)
}

// GetResolverDnssecConfigRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverDnssecConfigRequest(arg0 *route53resolver.GetResolverDnssecConfigInput) (*request.Request, *route53resolver.GetResolverDnssecConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverDnssecConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverDnssecConfigOutput)
	return ret0, ret1
}

// GetResolverDnssecConfigRequest indicates an expected call of GetResolverDnssecConfigRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverDnssecConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverDnssecConfigRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverDnssecConfigRequest), arg0)
}

// GetResolverDnssecConfigWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverDnssecConfigWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverDnssecConfigInput, arg2 ...request.Option) (*route53resolver.GetResolverDnssecConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverDnssecConfigWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverDnssecConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverDnssecConfigWithContext indicates an expected call of GetResolverDnssecConfigWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverDnssecConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverDnssecConfigWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverDnssecConfigWithContext), varargs...)
}

// GetResolverEndpoint mocks base method
func (m *MockRoute53ResolverAPI) GetResolverEndpoint(arg0 *route53resolver.GetResolverEndpointInput) (*route53resolver.GetResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverEndpoint", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverEndpoint indicates an expected call of GetResolverEndpoint
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverEndpoint", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverEndpoint), arg0)
}

// GetResolverEndpointRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverEndpointRequest(arg0 *route53resolver.GetResolverEndpointInput) (*request.Request, *route53resolver.GetResolverEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverEndpointOutput)
	return ret0, ret1
}

// GetResolverEndpointRequest indicates an expected call of GetResolverEndpointRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverEndpointRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverEndpointRequest), arg0)
}

// GetResolverEndpointWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverEndpointWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverEndpointInput, arg2 ...request.Option) (*route53resolver.GetResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverEndpointWithContext indicates an expected call of GetResolverEndpointWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverEndpointWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverEndpointWithContext), varargs...)
}

// GetResolverQueryLogConfig mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfig(arg0 *route53resolver.GetResolverQueryLogConfigInput) (*route53resolver.GetResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfig", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfig indicates an expected call of GetResolverQueryLogConfig
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfig", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfig), arg0)
}

// GetResolverQueryLogConfigAssociation mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigAssociation(arg0 *route53resolver.GetResolverQueryLogConfigAssociationInput) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigAssociation", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfigAssociation indicates an expected call of GetResolverQueryLogConfigAssociation
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigAssociation", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigAssociation), arg0)
}

// GetResolverQueryLogConfigAssociationRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigAssociationRequest(arg0 *route53resolver.GetResolverQueryLogConfigAssociationInput) (*request.Request, *route53resolver.GetResolverQueryLogConfigAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverQueryLogConfigAssociationOutput)
	return ret0, ret1
}

// GetResolverQueryLogConfigAssociationRequest indicates an expected call of GetResolverQueryLogConfigAssociationRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigAssociationRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigAssociationRequest), arg0)
}

// GetResolverQueryLogConfigAssociationWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigAssociationWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverQueryLogConfigAssociationInput, arg2 ...request.Option) (*route53resolver.GetResolverQueryLogConfigAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfigAssociationWithContext indicates an expected call of GetResolverQueryLogConfigAssociationWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigAssociationWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigAssociationWithContext), varargs...)
}

// GetResolverQueryLogConfigPolicy mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigPolicy(arg0 *route53resolver.GetResolverQueryLogConfigPolicyInput) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigPolicy", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfigPolicy indicates an expected call of GetResolverQueryLogConfigPolicy
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigPolicy", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigPolicy), arg0)
}

// GetResolverQueryLogConfigPolicyRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigPolicyRequest(arg0 *route53resolver.GetResolverQueryLogConfigPolicyInput) (*request.Request, *route53resolver.GetResolverQueryLogConfigPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverQueryLogConfigPolicyOutput)
	return ret0, ret1
}

// GetResolverQueryLogConfigPolicyRequest indicates an expected call of GetResolverQueryLogConfigPolicyRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigPolicyRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigPolicyRequest), arg0)
}

// GetResolverQueryLogConfigPolicyWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigPolicyWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverQueryLogConfigPolicyInput, arg2 ...request.Option) (*route53resolver.GetResolverQueryLogConfigPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfigPolicyWithContext indicates an expected call of GetResolverQueryLogConfigPolicyWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigPolicyWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigPolicyWithContext), varargs...)
}

// GetResolverQueryLogConfigRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigRequest(arg0 *route53resolver.GetResolverQueryLogConfigInput) (*request.Request, *route53resolver.GetResolverQueryLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverQueryLogConfigOutput)
	return ret0, ret1
}

// GetResolverQueryLogConfigRequest indicates an expected call of GetResolverQueryLogConfigRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigRequest), arg0)
}

// GetResolverQueryLogConfigWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverQueryLogConfigWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverQueryLogConfigInput, arg2 ...request.Option) (*route53resolver.GetResolverQueryLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverQueryLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverQueryLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverQueryLogConfigWithContext indicates an expected call of GetResolverQueryLogConfigWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverQueryLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverQueryLogConfigWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverQueryLogConfigWithContext), varargs...)
}

// GetResolverRule mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRule(arg0 *route53resolver.GetResolverRuleInput) (*route53resolver.GetResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverRule", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRule indicates an expected call of GetResolverRule
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRule", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRule), arg0)
}

// GetResolverRuleAssociation mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRuleAssociation(arg0 *route53resolver.GetResolverRuleAssociationInput) (*route53resolver.GetResolverRuleAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverRuleAssociation", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverRuleAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRuleAssociation indicates an expected call of GetResolverRuleAssociation
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRuleAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRuleAssociation", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRuleAssociation), arg0)
}

// GetResolverRuleAssociationRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRuleAssociationRequest(arg0 *route53resolver.GetResolverRuleAssociationInput) (*request.Request, *route53resolver.GetResolverRuleAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverRuleAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverRuleAssociationOutput)
	return ret0, ret1
}

// GetResolverRuleAssociationRequest indicates an expected call of GetResolverRuleAssociationRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRuleAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRuleAssociationRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRuleAssociationRequest), arg0)
}

// GetResolverRuleAssociationWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRuleAssociationWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverRuleAssociationInput, arg2 ...request.Option) (*route53resolver.GetResolverRuleAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverRuleAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverRuleAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRuleAssociationWithContext indicates an expected call of GetResolverRuleAssociationWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRuleAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRuleAssociationWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRuleAssociationWithContext), varargs...)
}

// GetResolverRulePolicy mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRulePolicy(arg0 *route53resolver.GetResolverRulePolicyInput) (*route53resolver.GetResolverRulePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverRulePolicy", arg0)
	ret0, _ := ret[0].(*route53resolver.GetResolverRulePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRulePolicy indicates an expected call of GetResolverRulePolicy
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRulePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRulePolicy", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRulePolicy), arg0)
}

// GetResolverRulePolicyRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRulePolicyRequest(arg0 *route53resolver.GetResolverRulePolicyInput) (*request.Request, *route53resolver.GetResolverRulePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverRulePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverRulePolicyOutput)
	return ret0, ret1
}

// GetResolverRulePolicyRequest indicates an expected call of GetResolverRulePolicyRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRulePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRulePolicyRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRulePolicyRequest), arg0)
}

// GetResolverRulePolicyWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRulePolicyWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverRulePolicyInput, arg2 ...request.Option) (*route53resolver.GetResolverRulePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverRulePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverRulePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRulePolicyWithContext indicates an expected call of GetResolverRulePolicyWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRulePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRulePolicyWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRulePolicyWithContext), varargs...)
}

// GetResolverRuleRequest mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRuleRequest(arg0 *route53resolver.GetResolverRuleInput) (*request.Request, *route53resolver.GetResolverRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolverRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.GetResolverRuleOutput)
	return ret0, ret1
}

// GetResolverRuleRequest indicates an expected call of GetResolverRuleRequest
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRuleRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRuleRequest), arg0)
}

// GetResolverRuleWithContext mocks base method
func (m *MockRoute53ResolverAPI) GetResolverRuleWithContext(arg0 context.Context, arg1 *route53resolver.GetResolverRuleInput, arg2 ...request.Option) (*route53resolver.GetResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResolverRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.GetResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResolverRuleWithContext indicates an expected call of GetResolverRuleWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) GetResolverRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolverRuleWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).GetResolverRuleWithContext), varargs...)
}

// ListResolverDnssecConfigs mocks base method
func (m *MockRoute53ResolverAPI) ListResolverDnssecConfigs(arg0 *route53resolver.ListResolverDnssecConfigsInput) (*route53resolver.ListResolverDnssecConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverDnssecConfigs", arg0)
	ret0, _ := ret[0].(*route53resolver.ListResolverDnssecConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverDnssecConfigs indicates an expected call of ListResolverDnssecConfigs
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverDnssecConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverDnssecConfigs", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverDnssecConfigs), arg0)
}

// ListResolverDnssecConfigsPages mocks base method
func (m *MockRoute53ResolverAPI) ListResolverDnssecConfigsPages(arg0 *route53resolver.ListResolverDnssecConfigsInput, arg1 func(*route53resolver.ListResolverDnssecConfigsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverDnssecConfigsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverDnssecConfigsPages indicates an expected call of ListResolverDnssecConfigsPages
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverDnssecConfigsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverDnssecConfigsPages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverDnssecConfigsPages), arg0, arg1)
}

// ListResolverDnssecConfigsPagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverDnssecConfigsPagesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverDnssecConfigsInput, arg2 func(*route53resolver.ListResolverDnssecConfigsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverDnssecConfigsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverDnssecConfigsPagesWithContext indicates an expected call of ListResolverDnssecConfigsPagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverDnssecConfigsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverDnssecConfigsPagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverDnssecConfigsPagesWithContext), varargs...)
}

// ListResolverDnssecConfigsRequest mocks base method
func (m *MockRoute53ResolverAPI) ListResolverDnssecConfigsRequest(arg0 *route53resolver.ListResolverDnssecConfigsInput) (*request.Request, *route53resolver.ListResolverDnssecConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverDnssecConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListResolverDnssecConfigsOutput)
	return ret0, ret1
}

// ListResolverDnssecConfigsRequest indicates an expected call of ListResolverDnssecConfigsRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverDnssecConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverDnssecConfigsRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverDnssecConfigsRequest), arg0)
}

// ListResolverDnssecConfigsWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverDnssecConfigsWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverDnssecConfigsInput, arg2 ...request.Option) (*route53resolver.ListResolverDnssecConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverDnssecConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverDnssecConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverDnssecConfigsWithContext indicates an expected call of ListResolverDnssecConfigsWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverDnssecConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverDnssecConfigsWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverDnssecConfigsWithContext), varargs...)
}

// ListResolverEndpointIpAddresses mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointIpAddresses(arg0 *route53resolver.ListResolverEndpointIpAddressesInput) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverEndpointIpAddresses", arg0)
	ret0, _ := ret[0].(*route53resolver.ListResolverEndpointIpAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverEndpointIpAddresses indicates an expected call of ListResolverEndpointIpAddresses
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointIpAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointIpAddresses", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointIpAddresses), arg0)
}

// ListResolverEndpointIpAddressesPages mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointIpAddressesPages(arg0 *route53resolver.ListResolverEndpointIpAddressesInput, arg1 func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverEndpointIpAddressesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverEndpointIpAddressesPages indicates an expected call of ListResolverEndpointIpAddressesPages
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointIpAddressesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointIpAddressesPages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointIpAddressesPages), arg0, arg1)
}

// ListResolverEndpointIpAddressesPagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointIpAddressesPagesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverEndpointIpAddressesInput, arg2 func(*route53resolver.ListResolverEndpointIpAddressesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverEndpointIpAddressesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverEndpointIpAddressesPagesWithContext indicates an expected call of ListResolverEndpointIpAddressesPagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointIpAddressesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointIpAddressesPagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointIpAddressesPagesWithContext), varargs...)
}

// ListResolverEndpointIpAddressesRequest mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointIpAddressesRequest(arg0 *route53resolver.ListResolverEndpointIpAddressesInput) (*request.Request, *route53resolver.ListResolverEndpointIpAddressesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverEndpointIpAddressesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListResolverEndpointIpAddressesOutput)
	return ret0, ret1
}

// ListResolverEndpointIpAddressesRequest indicates an expected call of ListResolverEndpointIpAddressesRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointIpAddressesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointIpAddressesRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointIpAddressesRequest), arg0)
}

// ListResolverEndpointIpAddressesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointIpAddressesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverEndpointIpAddressesInput, arg2 ...request.Option) (*route53resolver.ListResolverEndpointIpAddressesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverEndpointIpAddressesWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverEndpointIpAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverEndpointIpAddressesWithContext indicates an expected call of ListResolverEndpointIpAddressesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointIpAddressesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointIpAddressesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointIpAddressesWithContext), varargs...)
}

// ListResolverEndpoints mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpoints(arg0 *route53resolver.ListResolverEndpointsInput) (*route53resolver.ListResolverEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverEndpoints", arg0)
	ret0, _ := ret[0].(*route53resolver.ListResolverEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverEndpoints indicates an expected call of ListResolverEndpoints
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpoints", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpoints), arg0)
}

// ListResolverEndpointsPages mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointsPages(arg0 *route53resolver.ListResolverEndpointsInput, arg1 func(*route53resolver.ListResolverEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverEndpointsPages indicates an expected call of ListResolverEndpointsPages
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointsPages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointsPages), arg0, arg1)
}

// ListResolverEndpointsPagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointsPagesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverEndpointsInput, arg2 func(*route53resolver.ListResolverEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverEndpointsPagesWithContext indicates an expected call of ListResolverEndpointsPagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointsPagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointsPagesWithContext), varargs...)
}

// ListResolverEndpointsRequest mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointsRequest(arg0 *route53resolver.ListResolverEndpointsInput) (*request.Request, *route53resolver.ListResolverEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListResolverEndpointsOutput)
	return ret0, ret1
}

// ListResolverEndpointsRequest indicates an expected call of ListResolverEndpointsRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointsRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointsRequest), arg0)
}

// ListResolverEndpointsWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverEndpointsWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverEndpointsInput, arg2 ...request.Option) (*route53resolver.ListResolverEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverEndpointsWithContext indicates an expected call of ListResolverEndpointsWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverEndpointsWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverEndpointsWithContext), varargs...)
}

// ListResolverQueryLogConfigAssociations mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigAssociations(arg0 *route53resolver.ListResolverQueryLogConfigAssociationsInput) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigAssociations", arg0)
	ret0, _ := ret[0].(*route53resolver.ListResolverQueryLogConfigAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverQueryLogConfigAssociations indicates an expected call of ListResolverQueryLogConfigAssociations
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigAssociations", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigAssociations), arg0)
}

// ListResolverQueryLogConfigAssociationsPages mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigAssociationsPages(arg0 *route53resolver.ListResolverQueryLogConfigAssociationsInput, arg1 func(*route53resolver.ListResolverQueryLogConfigAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverQueryLogConfigAssociationsPages indicates an expected call of ListResolverQueryLogConfigAssociationsPages
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigAssociationsPages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigAssociationsPages), arg0, arg1)
}

// ListResolverQueryLogConfigAssociationsPagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigAssociationsPagesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverQueryLogConfigAssociationsInput, arg2 func(*route53resolver.ListResolverQueryLogConfigAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverQueryLogConfigAssociationsPagesWithContext indicates an expected call of ListResolverQueryLogConfigAssociationsPagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigAssociationsPagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigAssociationsPagesWithContext), varargs...)
}

// ListResolverQueryLogConfigAssociationsRequest mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigAssociationsRequest(arg0 *route53resolver.ListResolverQueryLogConfigAssociationsInput) (*request.Request, *route53resolver.ListResolverQueryLogConfigAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListResolverQueryLogConfigAssociationsOutput)
	return ret0, ret1
}

// ListResolverQueryLogConfigAssociationsRequest indicates an expected call of ListResolverQueryLogConfigAssociationsRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigAssociationsRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigAssociationsRequest), arg0)
}

// ListResolverQueryLogConfigAssociationsWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigAssociationsWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverQueryLogConfigAssociationsInput, arg2 ...request.Option) (*route53resolver.ListResolverQueryLogConfigAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverQueryLogConfigAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverQueryLogConfigAssociationsWithContext indicates an expected call of ListResolverQueryLogConfigAssociationsWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigAssociationsWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigAssociationsWithContext), varargs...)
}

// ListResolverQueryLogConfigs mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigs(arg0 *route53resolver.ListResolverQueryLogConfigsInput) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigs", arg0)
	ret0, _ := ret[0].(*route53resolver.ListResolverQueryLogConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverQueryLogConfigs indicates an expected call of ListResolverQueryLogConfigs
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigs", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigs), arg0)
}

// ListResolverQueryLogConfigsPages mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigsPages(arg0 *route53resolver.ListResolverQueryLogConfigsInput, arg1 func(*route53resolver.ListResolverQueryLogConfigsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverQueryLogConfigsPages indicates an expected call of ListResolverQueryLogConfigsPages
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigsPages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigsPages), arg0, arg1)
}

// ListResolverQueryLogConfigsPagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigsPagesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverQueryLogConfigsInput, arg2 func(*route53resolver.ListResolverQueryLogConfigsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverQueryLogConfigsPagesWithContext indicates an expected call of ListResolverQueryLogConfigsPagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigsPagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigsPagesWithContext), varargs...)
}

// ListResolverQueryLogConfigsRequest mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigsRequest(arg0 *route53resolver.ListResolverQueryLogConfigsInput) (*request.Request, *route53resolver.ListResolverQueryLogConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListResolverQueryLogConfigsOutput)
	return ret0, ret1
}

// ListResolverQueryLogConfigsRequest indicates an expected call of ListResolverQueryLogConfigsRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigsRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigsRequest), arg0)
}

// ListResolverQueryLogConfigsWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverQueryLogConfigsWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverQueryLogConfigsInput, arg2 ...request.Option) (*route53resolver.ListResolverQueryLogConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverQueryLogConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverQueryLogConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverQueryLogConfigsWithContext indicates an expected call of ListResolverQueryLogConfigsWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverQueryLogConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverQueryLogConfigsWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverQueryLogConfigsWithContext), varargs...)
}

// ListResolverRuleAssociations mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRuleAssociations(arg0 *route53resolver.ListResolverRuleAssociationsInput) (*route53resolver.ListResolverRuleAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverRuleAssociations", arg0)
	ret0, _ := ret[0].(*route53resolver.ListResolverRuleAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverRuleAssociations indicates an expected call of ListResolverRuleAssociations
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRuleAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRuleAssociations", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRuleAssociations), arg0)
}

// ListResolverRuleAssociationsPages mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRuleAssociationsPages(arg0 *route53resolver.ListResolverRuleAssociationsInput, arg1 func(*route53resolver.ListResolverRuleAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverRuleAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverRuleAssociationsPages indicates an expected call of ListResolverRuleAssociationsPages
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRuleAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRuleAssociationsPages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRuleAssociationsPages), arg0, arg1)
}

// ListResolverRuleAssociationsPagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRuleAssociationsPagesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverRuleAssociationsInput, arg2 func(*route53resolver.ListResolverRuleAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverRuleAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverRuleAssociationsPagesWithContext indicates an expected call of ListResolverRuleAssociationsPagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRuleAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRuleAssociationsPagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRuleAssociationsPagesWithContext), varargs...)
}

// ListResolverRuleAssociationsRequest mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRuleAssociationsRequest(arg0 *route53resolver.ListResolverRuleAssociationsInput) (*request.Request, *route53resolver.ListResolverRuleAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverRuleAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListResolverRuleAssociationsOutput)
	return ret0, ret1
}

// ListResolverRuleAssociationsRequest indicates an expected call of ListResolverRuleAssociationsRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRuleAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRuleAssociationsRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRuleAssociationsRequest), arg0)
}

// ListResolverRuleAssociationsWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRuleAssociationsWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverRuleAssociationsInput, arg2 ...request.Option) (*route53resolver.ListResolverRuleAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverRuleAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverRuleAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverRuleAssociationsWithContext indicates an expected call of ListResolverRuleAssociationsWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRuleAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRuleAssociationsWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRuleAssociationsWithContext), varargs...)
}

// ListResolverRules mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRules(arg0 *route53resolver.ListResolverRulesInput) (*route53resolver.ListResolverRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverRules", arg0)
	ret0, _ := ret[0].(*route53resolver.ListResolverRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverRules indicates an expected call of ListResolverRules
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRules", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRules), arg0)
}

// ListResolverRulesPages mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRulesPages(arg0 *route53resolver.ListResolverRulesInput, arg1 func(*route53resolver.ListResolverRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverRulesPages indicates an expected call of ListResolverRulesPages
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRulesPages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRulesPages), arg0, arg1)
}

// ListResolverRulesPagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRulesPagesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverRulesInput, arg2 func(*route53resolver.ListResolverRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResolverRulesPagesWithContext indicates an expected call of ListResolverRulesPagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRulesPagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRulesPagesWithContext), varargs...)
}

// ListResolverRulesRequest mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRulesRequest(arg0 *route53resolver.ListResolverRulesInput) (*request.Request, *route53resolver.ListResolverRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResolverRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListResolverRulesOutput)
	return ret0, ret1
}

// ListResolverRulesRequest indicates an expected call of ListResolverRulesRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRulesRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRulesRequest), arg0)
}

// ListResolverRulesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListResolverRulesWithContext(arg0 context.Context, arg1 *route53resolver.ListResolverRulesInput, arg2 ...request.Option) (*route53resolver.ListResolverRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResolverRulesWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListResolverRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResolverRulesWithContext indicates an expected call of ListResolverRulesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListResolverRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResolverRulesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListResolverRulesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockRoute53ResolverAPI) ListTagsForResource(arg0 *route53resolver.ListTagsForResourceInput) (*route53resolver.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*route53resolver.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockRoute53ResolverAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method
func (m *MockRoute53ResolverAPI) ListTagsForResourcePages(arg0 *route53resolver.ListTagsForResourceInput, arg1 func(*route53resolver.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages
func (mr *MockRoute53ResolverAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *route53resolver.ListTagsForResourceInput, arg2 func(*route53resolver.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockRoute53ResolverAPI) ListTagsForResourceRequest(arg0 *route53resolver.ListTagsForResourceInput) (*request.Request, *route53resolver.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockRoute53ResolverAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockRoute53ResolverAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *route53resolver.ListTagsForResourceInput, arg2 ...request.Option) (*route53resolver.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutResolverQueryLogConfigPolicy mocks base method
func (m *MockRoute53ResolverAPI) PutResolverQueryLogConfigPolicy(arg0 *route53resolver.PutResolverQueryLogConfigPolicyInput) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResolverQueryLogConfigPolicy", arg0)
	ret0, _ := ret[0].(*route53resolver.PutResolverQueryLogConfigPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResolverQueryLogConfigPolicy indicates an expected call of PutResolverQueryLogConfigPolicy
func (mr *MockRoute53ResolverAPIMockRecorder) PutResolverQueryLogConfigPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResolverQueryLogConfigPolicy", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).PutResolverQueryLogConfigPolicy), arg0)
}

// PutResolverQueryLogConfigPolicyRequest mocks base method
func (m *MockRoute53ResolverAPI) PutResolverQueryLogConfigPolicyRequest(arg0 *route53resolver.PutResolverQueryLogConfigPolicyInput) (*request.Request, *route53resolver.PutResolverQueryLogConfigPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResolverQueryLogConfigPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.PutResolverQueryLogConfigPolicyOutput)
	return ret0, ret1
}

// PutResolverQueryLogConfigPolicyRequest indicates an expected call of PutResolverQueryLogConfigPolicyRequest
func (mr *MockRoute53ResolverAPIMockRecorder) PutResolverQueryLogConfigPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResolverQueryLogConfigPolicyRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).PutResolverQueryLogConfigPolicyRequest), arg0)
}

// PutResolverQueryLogConfigPolicyWithContext mocks base method
func (m *MockRoute53ResolverAPI) PutResolverQueryLogConfigPolicyWithContext(arg0 context.Context, arg1 *route53resolver.PutResolverQueryLogConfigPolicyInput, arg2 ...request.Option) (*route53resolver.PutResolverQueryLogConfigPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResolverQueryLogConfigPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.PutResolverQueryLogConfigPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResolverQueryLogConfigPolicyWithContext indicates an expected call of PutResolverQueryLogConfigPolicyWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) PutResolverQueryLogConfigPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResolverQueryLogConfigPolicyWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).PutResolverQueryLogConfigPolicyWithContext), varargs...)
}

// PutResolverRulePolicy mocks base method
func (m *MockRoute53ResolverAPI) PutResolverRulePolicy(arg0 *route53resolver.PutResolverRulePolicyInput) (*route53resolver.PutResolverRulePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResolverRulePolicy", arg0)
	ret0, _ := ret[0].(*route53resolver.PutResolverRulePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResolverRulePolicy indicates an expected call of PutResolverRulePolicy
func (mr *MockRoute53ResolverAPIMockRecorder) PutResolverRulePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResolverRulePolicy", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).PutResolverRulePolicy), arg0)
}

// PutResolverRulePolicyRequest mocks base method
func (m *MockRoute53ResolverAPI) PutResolverRulePolicyRequest(arg0 *route53resolver.PutResolverRulePolicyInput) (*request.Request, *route53resolver.PutResolverRulePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResolverRulePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.PutResolverRulePolicyOutput)
	return ret0, ret1
}

// PutResolverRulePolicyRequest indicates an expected call of PutResolverRulePolicyRequest
func (mr *MockRoute53ResolverAPIMockRecorder) PutResolverRulePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResolverRulePolicyRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).PutResolverRulePolicyRequest), arg0)
}

// PutResolverRulePolicyWithContext mocks base method
func (m *MockRoute53ResolverAPI) PutResolverRulePolicyWithContext(arg0 context.Context, arg1 *route53resolver.PutResolverRulePolicyInput, arg2 ...request.Option) (*route53resolver.PutResolverRulePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResolverRulePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.PutResolverRulePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResolverRulePolicyWithContext indicates an expected call of PutResolverRulePolicyWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) PutResolverRulePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResolverRulePolicyWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).PutResolverRulePolicyWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockRoute53ResolverAPI) TagResource(arg0 *route53resolver.TagResourceInput) (*route53resolver.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*route53resolver.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockRoute53ResolverAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockRoute53ResolverAPI) TagResourceRequest(arg0 *route53resolver.TagResourceInput) (*request.Request, *route53resolver.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockRoute53ResolverAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockRoute53ResolverAPI) TagResourceWithContext(arg0 context.Context, arg1 *route53resolver.TagResourceInput, arg2 ...request.Option) (*route53resolver.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockRoute53ResolverAPI) UntagResource(arg0 *route53resolver.UntagResourceInput) (*route53resolver.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*route53resolver.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockRoute53ResolverAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockRoute53ResolverAPI) UntagResourceRequest(arg0 *route53resolver.UntagResourceInput) (*request.Request, *route53resolver.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockRoute53ResolverAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockRoute53ResolverAPI) UntagResourceWithContext(arg0 context.Context, arg1 *route53resolver.UntagResourceInput, arg2 ...request.Option) (*route53resolver.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateResolverDnssecConfig mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverDnssecConfig(arg0 *route53resolver.UpdateResolverDnssecConfigInput) (*route53resolver.UpdateResolverDnssecConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResolverDnssecConfig", arg0)
	ret0, _ := ret[0].(*route53resolver.UpdateResolverDnssecConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResolverDnssecConfig indicates an expected call of UpdateResolverDnssecConfig
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverDnssecConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverDnssecConfig", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverDnssecConfig), arg0)
}

// UpdateResolverDnssecConfigRequest mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverDnssecConfigRequest(arg0 *route53resolver.UpdateResolverDnssecConfigInput) (*request.Request, *route53resolver.UpdateResolverDnssecConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResolverDnssecConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.UpdateResolverDnssecConfigOutput)
	return ret0, ret1
}

// UpdateResolverDnssecConfigRequest indicates an expected call of UpdateResolverDnssecConfigRequest
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverDnssecConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverDnssecConfigRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverDnssecConfigRequest), arg0)
}

// UpdateResolverDnssecConfigWithContext mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverDnssecConfigWithContext(arg0 context.Context, arg1 *route53resolver.UpdateResolverDnssecConfigInput, arg2 ...request.Option) (*route53resolver.UpdateResolverDnssecConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResolverDnssecConfigWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.UpdateResolverDnssecConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResolverDnssecConfigWithContext indicates an expected call of UpdateResolverDnssecConfigWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverDnssecConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverDnssecConfigWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverDnssecConfigWithContext), varargs...)
}

// UpdateResolverEndpoint mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverEndpoint(arg0 *route53resolver.UpdateResolverEndpointInput) (*route53resolver.UpdateResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResolverEndpoint", arg0)
	ret0, _ := ret[0].(*route53resolver.UpdateResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResolverEndpoint indicates an expected call of UpdateResolverEndpoint
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverEndpoint", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverEndpoint), arg0)
}

// UpdateResolverEndpointRequest mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverEndpointRequest(arg0 *route53resolver.UpdateResolverEndpointInput) (*request.Request, *route53resolver.UpdateResolverEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResolverEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.UpdateResolverEndpointOutput)
	return ret0, ret1
}

// UpdateResolverEndpointRequest indicates an expected call of UpdateResolverEndpointRequest
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverEndpointRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverEndpointRequest), arg0)
}

// UpdateResolverEndpointWithContext mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverEndpointWithContext(arg0 context.Context, arg1 *route53resolver.UpdateResolverEndpointInput, arg2 ...request.Option) (*route53resolver.UpdateResolverEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResolverEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.UpdateResolverEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResolverEndpointWithContext indicates an expected call of UpdateResolverEndpointWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverEndpointWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverEndpointWithContext), varargs...)
}

// UpdateResolverRule mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverRule(arg0 *route53resolver.UpdateResolverRuleInput) (*route53resolver.UpdateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResolverRule", arg0)
	ret0, _ := ret[0].(*route53resolver.UpdateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResolverRule indicates an expected call of UpdateResolverRule
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverRule", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverRule), arg0)
}

// UpdateResolverRuleRequest mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverRuleRequest(arg0 *route53resolver.UpdateResolverRuleInput) (*request.Request, *route53resolver.UpdateResolverRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResolverRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53resolver.UpdateResolverRuleOutput)
	return ret0, ret1
}

// UpdateResolverRuleRequest indicates an expected call of UpdateResolverRuleRequest
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverRuleRequest", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverRuleRequest), arg0)
}

// UpdateResolverRuleWithContext mocks base method
func (m *MockRoute53ResolverAPI) UpdateResolverRuleWithContext(arg0 context.Context, arg1 *route53resolver.UpdateResolverRuleInput, arg2 ...request.Option) (*route53resolver.UpdateResolverRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResolverRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53resolver.UpdateResolverRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResolverRuleWithContext indicates an expected call of UpdateResolverRuleWithContext
func (mr *MockRoute53ResolverAPIMockRecorder) UpdateResolverRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResolverRuleWithContext", reflect.TypeOf((*MockRoute53ResolverAPI)(nil).UpdateResolverRuleWithContext), varargs...)
}

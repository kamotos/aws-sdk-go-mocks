// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/connect/connectiface (interfaces: ConnectAPI)

// Package connectmock is a generated GoMock package.
package connectmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	connect "github.com/aws/aws-sdk-go/service/connect"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConnectAPI is a mock of ConnectAPI interface
type MockConnectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectAPIMockRecorder
}

// MockConnectAPIMockRecorder is the mock recorder for MockConnectAPI
type MockConnectAPIMockRecorder struct {
	mock *MockConnectAPI
}

// NewMockConnectAPI creates a new mock instance
func NewMockConnectAPI(ctrl *gomock.Controller) *MockConnectAPI {
	mock := &MockConnectAPI{ctrl: ctrl}
	mock.recorder = &MockConnectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectAPI) EXPECT() *MockConnectAPIMockRecorder {
	return m.recorder
}

// AssociateApprovedOrigin mocks base method
func (m *MockConnectAPI) AssociateApprovedOrigin(arg0 *connect.AssociateApprovedOriginInput) (*connect.AssociateApprovedOriginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateApprovedOrigin", arg0)
	ret0, _ := ret[0].(*connect.AssociateApprovedOriginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateApprovedOrigin indicates an expected call of AssociateApprovedOrigin
func (mr *MockConnectAPIMockRecorder) AssociateApprovedOrigin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateApprovedOrigin", reflect.TypeOf((*MockConnectAPI)(nil).AssociateApprovedOrigin), arg0)
}

// AssociateApprovedOriginRequest mocks base method
func (m *MockConnectAPI) AssociateApprovedOriginRequest(arg0 *connect.AssociateApprovedOriginInput) (*request.Request, *connect.AssociateApprovedOriginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateApprovedOriginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.AssociateApprovedOriginOutput)
	return ret0, ret1
}

// AssociateApprovedOriginRequest indicates an expected call of AssociateApprovedOriginRequest
func (mr *MockConnectAPIMockRecorder) AssociateApprovedOriginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateApprovedOriginRequest", reflect.TypeOf((*MockConnectAPI)(nil).AssociateApprovedOriginRequest), arg0)
}

// AssociateApprovedOriginWithContext mocks base method
func (m *MockConnectAPI) AssociateApprovedOriginWithContext(arg0 context.Context, arg1 *connect.AssociateApprovedOriginInput, arg2 ...request.Option) (*connect.AssociateApprovedOriginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateApprovedOriginWithContext", varargs...)
	ret0, _ := ret[0].(*connect.AssociateApprovedOriginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateApprovedOriginWithContext indicates an expected call of AssociateApprovedOriginWithContext
func (mr *MockConnectAPIMockRecorder) AssociateApprovedOriginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateApprovedOriginWithContext", reflect.TypeOf((*MockConnectAPI)(nil).AssociateApprovedOriginWithContext), varargs...)
}

// AssociateInstanceStorageConfig mocks base method
func (m *MockConnectAPI) AssociateInstanceStorageConfig(arg0 *connect.AssociateInstanceStorageConfigInput) (*connect.AssociateInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateInstanceStorageConfig", arg0)
	ret0, _ := ret[0].(*connect.AssociateInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateInstanceStorageConfig indicates an expected call of AssociateInstanceStorageConfig
func (mr *MockConnectAPIMockRecorder) AssociateInstanceStorageConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateInstanceStorageConfig", reflect.TypeOf((*MockConnectAPI)(nil).AssociateInstanceStorageConfig), arg0)
}

// AssociateInstanceStorageConfigRequest mocks base method
func (m *MockConnectAPI) AssociateInstanceStorageConfigRequest(arg0 *connect.AssociateInstanceStorageConfigInput) (*request.Request, *connect.AssociateInstanceStorageConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateInstanceStorageConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.AssociateInstanceStorageConfigOutput)
	return ret0, ret1
}

// AssociateInstanceStorageConfigRequest indicates an expected call of AssociateInstanceStorageConfigRequest
func (mr *MockConnectAPIMockRecorder) AssociateInstanceStorageConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateInstanceStorageConfigRequest", reflect.TypeOf((*MockConnectAPI)(nil).AssociateInstanceStorageConfigRequest), arg0)
}

// AssociateInstanceStorageConfigWithContext mocks base method
func (m *MockConnectAPI) AssociateInstanceStorageConfigWithContext(arg0 context.Context, arg1 *connect.AssociateInstanceStorageConfigInput, arg2 ...request.Option) (*connect.AssociateInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateInstanceStorageConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connect.AssociateInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateInstanceStorageConfigWithContext indicates an expected call of AssociateInstanceStorageConfigWithContext
func (mr *MockConnectAPIMockRecorder) AssociateInstanceStorageConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateInstanceStorageConfigWithContext", reflect.TypeOf((*MockConnectAPI)(nil).AssociateInstanceStorageConfigWithContext), varargs...)
}

// AssociateLambdaFunction mocks base method
func (m *MockConnectAPI) AssociateLambdaFunction(arg0 *connect.AssociateLambdaFunctionInput) (*connect.AssociateLambdaFunctionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLambdaFunction", arg0)
	ret0, _ := ret[0].(*connect.AssociateLambdaFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLambdaFunction indicates an expected call of AssociateLambdaFunction
func (mr *MockConnectAPIMockRecorder) AssociateLambdaFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLambdaFunction", reflect.TypeOf((*MockConnectAPI)(nil).AssociateLambdaFunction), arg0)
}

// AssociateLambdaFunctionRequest mocks base method
func (m *MockConnectAPI) AssociateLambdaFunctionRequest(arg0 *connect.AssociateLambdaFunctionInput) (*request.Request, *connect.AssociateLambdaFunctionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLambdaFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.AssociateLambdaFunctionOutput)
	return ret0, ret1
}

// AssociateLambdaFunctionRequest indicates an expected call of AssociateLambdaFunctionRequest
func (mr *MockConnectAPIMockRecorder) AssociateLambdaFunctionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLambdaFunctionRequest", reflect.TypeOf((*MockConnectAPI)(nil).AssociateLambdaFunctionRequest), arg0)
}

// AssociateLambdaFunctionWithContext mocks base method
func (m *MockConnectAPI) AssociateLambdaFunctionWithContext(arg0 context.Context, arg1 *connect.AssociateLambdaFunctionInput, arg2 ...request.Option) (*connect.AssociateLambdaFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLambdaFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*connect.AssociateLambdaFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLambdaFunctionWithContext indicates an expected call of AssociateLambdaFunctionWithContext
func (mr *MockConnectAPIMockRecorder) AssociateLambdaFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLambdaFunctionWithContext", reflect.TypeOf((*MockConnectAPI)(nil).AssociateLambdaFunctionWithContext), varargs...)
}

// AssociateLexBot mocks base method
func (m *MockConnectAPI) AssociateLexBot(arg0 *connect.AssociateLexBotInput) (*connect.AssociateLexBotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLexBot", arg0)
	ret0, _ := ret[0].(*connect.AssociateLexBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLexBot indicates an expected call of AssociateLexBot
func (mr *MockConnectAPIMockRecorder) AssociateLexBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLexBot", reflect.TypeOf((*MockConnectAPI)(nil).AssociateLexBot), arg0)
}

// AssociateLexBotRequest mocks base method
func (m *MockConnectAPI) AssociateLexBotRequest(arg0 *connect.AssociateLexBotInput) (*request.Request, *connect.AssociateLexBotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLexBotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.AssociateLexBotOutput)
	return ret0, ret1
}

// AssociateLexBotRequest indicates an expected call of AssociateLexBotRequest
func (mr *MockConnectAPIMockRecorder) AssociateLexBotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLexBotRequest", reflect.TypeOf((*MockConnectAPI)(nil).AssociateLexBotRequest), arg0)
}

// AssociateLexBotWithContext mocks base method
func (m *MockConnectAPI) AssociateLexBotWithContext(arg0 context.Context, arg1 *connect.AssociateLexBotInput, arg2 ...request.Option) (*connect.AssociateLexBotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLexBotWithContext", varargs...)
	ret0, _ := ret[0].(*connect.AssociateLexBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLexBotWithContext indicates an expected call of AssociateLexBotWithContext
func (mr *MockConnectAPIMockRecorder) AssociateLexBotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLexBotWithContext", reflect.TypeOf((*MockConnectAPI)(nil).AssociateLexBotWithContext), varargs...)
}

// AssociateRoutingProfileQueues mocks base method
func (m *MockConnectAPI) AssociateRoutingProfileQueues(arg0 *connect.AssociateRoutingProfileQueuesInput) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.AssociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateRoutingProfileQueues indicates an expected call of AssociateRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) AssociateRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).AssociateRoutingProfileQueues), arg0)
}

// AssociateRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) AssociateRoutingProfileQueuesRequest(arg0 *connect.AssociateRoutingProfileQueuesInput) (*request.Request, *connect.AssociateRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.AssociateRoutingProfileQueuesOutput)
	return ret0, ret1
}

// AssociateRoutingProfileQueuesRequest indicates an expected call of AssociateRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) AssociateRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).AssociateRoutingProfileQueuesRequest), arg0)
}

// AssociateRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) AssociateRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.AssociateRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.AssociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateRoutingProfileQueuesWithContext indicates an expected call of AssociateRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) AssociateRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).AssociateRoutingProfileQueuesWithContext), varargs...)
}

// AssociateSecurityKey mocks base method
func (m *MockConnectAPI) AssociateSecurityKey(arg0 *connect.AssociateSecurityKeyInput) (*connect.AssociateSecurityKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateSecurityKey", arg0)
	ret0, _ := ret[0].(*connect.AssociateSecurityKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateSecurityKey indicates an expected call of AssociateSecurityKey
func (mr *MockConnectAPIMockRecorder) AssociateSecurityKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSecurityKey", reflect.TypeOf((*MockConnectAPI)(nil).AssociateSecurityKey), arg0)
}

// AssociateSecurityKeyRequest mocks base method
func (m *MockConnectAPI) AssociateSecurityKeyRequest(arg0 *connect.AssociateSecurityKeyInput) (*request.Request, *connect.AssociateSecurityKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateSecurityKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.AssociateSecurityKeyOutput)
	return ret0, ret1
}

// AssociateSecurityKeyRequest indicates an expected call of AssociateSecurityKeyRequest
func (mr *MockConnectAPIMockRecorder) AssociateSecurityKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSecurityKeyRequest", reflect.TypeOf((*MockConnectAPI)(nil).AssociateSecurityKeyRequest), arg0)
}

// AssociateSecurityKeyWithContext mocks base method
func (m *MockConnectAPI) AssociateSecurityKeyWithContext(arg0 context.Context, arg1 *connect.AssociateSecurityKeyInput, arg2 ...request.Option) (*connect.AssociateSecurityKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateSecurityKeyWithContext", varargs...)
	ret0, _ := ret[0].(*connect.AssociateSecurityKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateSecurityKeyWithContext indicates an expected call of AssociateSecurityKeyWithContext
func (mr *MockConnectAPIMockRecorder) AssociateSecurityKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateSecurityKeyWithContext", reflect.TypeOf((*MockConnectAPI)(nil).AssociateSecurityKeyWithContext), varargs...)
}

// CreateContactFlow mocks base method
func (m *MockConnectAPI) CreateContactFlow(arg0 *connect.CreateContactFlowInput) (*connect.CreateContactFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactFlow", arg0)
	ret0, _ := ret[0].(*connect.CreateContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactFlow indicates an expected call of CreateContactFlow
func (mr *MockConnectAPIMockRecorder) CreateContactFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactFlow", reflect.TypeOf((*MockConnectAPI)(nil).CreateContactFlow), arg0)
}

// CreateContactFlowRequest mocks base method
func (m *MockConnectAPI) CreateContactFlowRequest(arg0 *connect.CreateContactFlowInput) (*request.Request, *connect.CreateContactFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateContactFlowOutput)
	return ret0, ret1
}

// CreateContactFlowRequest indicates an expected call of CreateContactFlowRequest
func (mr *MockConnectAPIMockRecorder) CreateContactFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactFlowRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateContactFlowRequest), arg0)
}

// CreateContactFlowWithContext mocks base method
func (m *MockConnectAPI) CreateContactFlowWithContext(arg0 context.Context, arg1 *connect.CreateContactFlowInput, arg2 ...request.Option) (*connect.CreateContactFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContactFlowWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactFlowWithContext indicates an expected call of CreateContactFlowWithContext
func (mr *MockConnectAPIMockRecorder) CreateContactFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactFlowWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateContactFlowWithContext), varargs...)
}

// CreateInstance mocks base method
func (m *MockConnectAPI) CreateInstance(arg0 *connect.CreateInstanceInput) (*connect.CreateInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(*connect.CreateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockConnectAPIMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockConnectAPI)(nil).CreateInstance), arg0)
}

// CreateInstanceRequest mocks base method
func (m *MockConnectAPI) CreateInstanceRequest(arg0 *connect.CreateInstanceInput) (*request.Request, *connect.CreateInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateInstanceOutput)
	return ret0, ret1
}

// CreateInstanceRequest indicates an expected call of CreateInstanceRequest
func (mr *MockConnectAPIMockRecorder) CreateInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateInstanceRequest), arg0)
}

// CreateInstanceWithContext mocks base method
func (m *MockConnectAPI) CreateInstanceWithContext(arg0 context.Context, arg1 *connect.CreateInstanceInput, arg2 ...request.Option) (*connect.CreateInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceWithContext indicates an expected call of CreateInstanceWithContext
func (mr *MockConnectAPIMockRecorder) CreateInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateInstanceWithContext), varargs...)
}

// CreateIntegrationAssociation mocks base method
func (m *MockConnectAPI) CreateIntegrationAssociation(arg0 *connect.CreateIntegrationAssociationInput) (*connect.CreateIntegrationAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegrationAssociation", arg0)
	ret0, _ := ret[0].(*connect.CreateIntegrationAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntegrationAssociation indicates an expected call of CreateIntegrationAssociation
func (mr *MockConnectAPIMockRecorder) CreateIntegrationAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationAssociation", reflect.TypeOf((*MockConnectAPI)(nil).CreateIntegrationAssociation), arg0)
}

// CreateIntegrationAssociationRequest mocks base method
func (m *MockConnectAPI) CreateIntegrationAssociationRequest(arg0 *connect.CreateIntegrationAssociationInput) (*request.Request, *connect.CreateIntegrationAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegrationAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateIntegrationAssociationOutput)
	return ret0, ret1
}

// CreateIntegrationAssociationRequest indicates an expected call of CreateIntegrationAssociationRequest
func (mr *MockConnectAPIMockRecorder) CreateIntegrationAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationAssociationRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateIntegrationAssociationRequest), arg0)
}

// CreateIntegrationAssociationWithContext mocks base method
func (m *MockConnectAPI) CreateIntegrationAssociationWithContext(arg0 context.Context, arg1 *connect.CreateIntegrationAssociationInput, arg2 ...request.Option) (*connect.CreateIntegrationAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIntegrationAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateIntegrationAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntegrationAssociationWithContext indicates an expected call of CreateIntegrationAssociationWithContext
func (mr *MockConnectAPIMockRecorder) CreateIntegrationAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationAssociationWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateIntegrationAssociationWithContext), varargs...)
}

// CreateQuickConnect mocks base method
func (m *MockConnectAPI) CreateQuickConnect(arg0 *connect.CreateQuickConnectInput) (*connect.CreateQuickConnectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuickConnect", arg0)
	ret0, _ := ret[0].(*connect.CreateQuickConnectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuickConnect indicates an expected call of CreateQuickConnect
func (mr *MockConnectAPIMockRecorder) CreateQuickConnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuickConnect", reflect.TypeOf((*MockConnectAPI)(nil).CreateQuickConnect), arg0)
}

// CreateQuickConnectRequest mocks base method
func (m *MockConnectAPI) CreateQuickConnectRequest(arg0 *connect.CreateQuickConnectInput) (*request.Request, *connect.CreateQuickConnectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuickConnectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateQuickConnectOutput)
	return ret0, ret1
}

// CreateQuickConnectRequest indicates an expected call of CreateQuickConnectRequest
func (mr *MockConnectAPIMockRecorder) CreateQuickConnectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuickConnectRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateQuickConnectRequest), arg0)
}

// CreateQuickConnectWithContext mocks base method
func (m *MockConnectAPI) CreateQuickConnectWithContext(arg0 context.Context, arg1 *connect.CreateQuickConnectInput, arg2 ...request.Option) (*connect.CreateQuickConnectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQuickConnectWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateQuickConnectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuickConnectWithContext indicates an expected call of CreateQuickConnectWithContext
func (mr *MockConnectAPIMockRecorder) CreateQuickConnectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuickConnectWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateQuickConnectWithContext), varargs...)
}

// CreateRoutingProfile mocks base method
func (m *MockConnectAPI) CreateRoutingProfile(arg0 *connect.CreateRoutingProfileInput) (*connect.CreateRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingProfile", arg0)
	ret0, _ := ret[0].(*connect.CreateRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutingProfile indicates an expected call of CreateRoutingProfile
func (mr *MockConnectAPIMockRecorder) CreateRoutingProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingProfile", reflect.TypeOf((*MockConnectAPI)(nil).CreateRoutingProfile), arg0)
}

// CreateRoutingProfileRequest mocks base method
func (m *MockConnectAPI) CreateRoutingProfileRequest(arg0 *connect.CreateRoutingProfileInput) (*request.Request, *connect.CreateRoutingProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateRoutingProfileOutput)
	return ret0, ret1
}

// CreateRoutingProfileRequest indicates an expected call of CreateRoutingProfileRequest
func (mr *MockConnectAPIMockRecorder) CreateRoutingProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingProfileRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateRoutingProfileRequest), arg0)
}

// CreateRoutingProfileWithContext mocks base method
func (m *MockConnectAPI) CreateRoutingProfileWithContext(arg0 context.Context, arg1 *connect.CreateRoutingProfileInput, arg2 ...request.Option) (*connect.CreateRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoutingProfileWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutingProfileWithContext indicates an expected call of CreateRoutingProfileWithContext
func (mr *MockConnectAPIMockRecorder) CreateRoutingProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingProfileWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateRoutingProfileWithContext), varargs...)
}

// CreateUseCase mocks base method
func (m *MockConnectAPI) CreateUseCase(arg0 *connect.CreateUseCaseInput) (*connect.CreateUseCaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUseCase", arg0)
	ret0, _ := ret[0].(*connect.CreateUseCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUseCase indicates an expected call of CreateUseCase
func (mr *MockConnectAPIMockRecorder) CreateUseCase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUseCase", reflect.TypeOf((*MockConnectAPI)(nil).CreateUseCase), arg0)
}

// CreateUseCaseRequest mocks base method
func (m *MockConnectAPI) CreateUseCaseRequest(arg0 *connect.CreateUseCaseInput) (*request.Request, *connect.CreateUseCaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUseCaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateUseCaseOutput)
	return ret0, ret1
}

// CreateUseCaseRequest indicates an expected call of CreateUseCaseRequest
func (mr *MockConnectAPIMockRecorder) CreateUseCaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUseCaseRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateUseCaseRequest), arg0)
}

// CreateUseCaseWithContext mocks base method
func (m *MockConnectAPI) CreateUseCaseWithContext(arg0 context.Context, arg1 *connect.CreateUseCaseInput, arg2 ...request.Option) (*connect.CreateUseCaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUseCaseWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateUseCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUseCaseWithContext indicates an expected call of CreateUseCaseWithContext
func (mr *MockConnectAPIMockRecorder) CreateUseCaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUseCaseWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateUseCaseWithContext), varargs...)
}

// CreateUser mocks base method
func (m *MockConnectAPI) CreateUser(arg0 *connect.CreateUserInput) (*connect.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*connect.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockConnectAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockConnectAPI)(nil).CreateUser), arg0)
}

// CreateUserHierarchyGroup mocks base method
func (m *MockConnectAPI) CreateUserHierarchyGroup(arg0 *connect.CreateUserHierarchyGroupInput) (*connect.CreateUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserHierarchyGroup", arg0)
	ret0, _ := ret[0].(*connect.CreateUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserHierarchyGroup indicates an expected call of CreateUserHierarchyGroup
func (mr *MockConnectAPIMockRecorder) CreateUserHierarchyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserHierarchyGroup", reflect.TypeOf((*MockConnectAPI)(nil).CreateUserHierarchyGroup), arg0)
}

// CreateUserHierarchyGroupRequest mocks base method
func (m *MockConnectAPI) CreateUserHierarchyGroupRequest(arg0 *connect.CreateUserHierarchyGroupInput) (*request.Request, *connect.CreateUserHierarchyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserHierarchyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateUserHierarchyGroupOutput)
	return ret0, ret1
}

// CreateUserHierarchyGroupRequest indicates an expected call of CreateUserHierarchyGroupRequest
func (mr *MockConnectAPIMockRecorder) CreateUserHierarchyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserHierarchyGroupRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateUserHierarchyGroupRequest), arg0)
}

// CreateUserHierarchyGroupWithContext mocks base method
func (m *MockConnectAPI) CreateUserHierarchyGroupWithContext(arg0 context.Context, arg1 *connect.CreateUserHierarchyGroupInput, arg2 ...request.Option) (*connect.CreateUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserHierarchyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserHierarchyGroupWithContext indicates an expected call of CreateUserHierarchyGroupWithContext
func (mr *MockConnectAPIMockRecorder) CreateUserHierarchyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserHierarchyGroupWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateUserHierarchyGroupWithContext), varargs...)
}

// CreateUserRequest mocks base method
func (m *MockConnectAPI) CreateUserRequest(arg0 *connect.CreateUserInput) (*request.Request, *connect.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest
func (mr *MockConnectAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockConnectAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method
func (m *MockConnectAPI) CreateUserWithContext(arg0 context.Context, arg1 *connect.CreateUserInput, arg2 ...request.Option) (*connect.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*connect.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext
func (mr *MockConnectAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockConnectAPI)(nil).CreateUserWithContext), varargs...)
}

// DeleteInstance mocks base method
func (m *MockConnectAPI) DeleteInstance(arg0 *connect.DeleteInstanceInput) (*connect.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(*connect.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockConnectAPIMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockConnectAPI)(nil).DeleteInstance), arg0)
}

// DeleteInstanceRequest mocks base method
func (m *MockConnectAPI) DeleteInstanceRequest(arg0 *connect.DeleteInstanceInput) (*request.Request, *connect.DeleteInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DeleteInstanceOutput)
	return ret0, ret1
}

// DeleteInstanceRequest indicates an expected call of DeleteInstanceRequest
func (mr *MockConnectAPIMockRecorder) DeleteInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceRequest", reflect.TypeOf((*MockConnectAPI)(nil).DeleteInstanceRequest), arg0)
}

// DeleteInstanceWithContext mocks base method
func (m *MockConnectAPI) DeleteInstanceWithContext(arg0 context.Context, arg1 *connect.DeleteInstanceInput, arg2 ...request.Option) (*connect.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceWithContext indicates an expected call of DeleteInstanceWithContext
func (mr *MockConnectAPIMockRecorder) DeleteInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DeleteInstanceWithContext), varargs...)
}

// DeleteIntegrationAssociation mocks base method
func (m *MockConnectAPI) DeleteIntegrationAssociation(arg0 *connect.DeleteIntegrationAssociationInput) (*connect.DeleteIntegrationAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegrationAssociation", arg0)
	ret0, _ := ret[0].(*connect.DeleteIntegrationAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationAssociation indicates an expected call of DeleteIntegrationAssociation
func (mr *MockConnectAPIMockRecorder) DeleteIntegrationAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationAssociation", reflect.TypeOf((*MockConnectAPI)(nil).DeleteIntegrationAssociation), arg0)
}

// DeleteIntegrationAssociationRequest mocks base method
func (m *MockConnectAPI) DeleteIntegrationAssociationRequest(arg0 *connect.DeleteIntegrationAssociationInput) (*request.Request, *connect.DeleteIntegrationAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegrationAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DeleteIntegrationAssociationOutput)
	return ret0, ret1
}

// DeleteIntegrationAssociationRequest indicates an expected call of DeleteIntegrationAssociationRequest
func (mr *MockConnectAPIMockRecorder) DeleteIntegrationAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationAssociationRequest", reflect.TypeOf((*MockConnectAPI)(nil).DeleteIntegrationAssociationRequest), arg0)
}

// DeleteIntegrationAssociationWithContext mocks base method
func (m *MockConnectAPI) DeleteIntegrationAssociationWithContext(arg0 context.Context, arg1 *connect.DeleteIntegrationAssociationInput, arg2 ...request.Option) (*connect.DeleteIntegrationAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntegrationAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DeleteIntegrationAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationAssociationWithContext indicates an expected call of DeleteIntegrationAssociationWithContext
func (mr *MockConnectAPIMockRecorder) DeleteIntegrationAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationAssociationWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DeleteIntegrationAssociationWithContext), varargs...)
}

// DeleteQuickConnect mocks base method
func (m *MockConnectAPI) DeleteQuickConnect(arg0 *connect.DeleteQuickConnectInput) (*connect.DeleteQuickConnectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuickConnect", arg0)
	ret0, _ := ret[0].(*connect.DeleteQuickConnectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuickConnect indicates an expected call of DeleteQuickConnect
func (mr *MockConnectAPIMockRecorder) DeleteQuickConnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuickConnect", reflect.TypeOf((*MockConnectAPI)(nil).DeleteQuickConnect), arg0)
}

// DeleteQuickConnectRequest mocks base method
func (m *MockConnectAPI) DeleteQuickConnectRequest(arg0 *connect.DeleteQuickConnectInput) (*request.Request, *connect.DeleteQuickConnectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuickConnectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DeleteQuickConnectOutput)
	return ret0, ret1
}

// DeleteQuickConnectRequest indicates an expected call of DeleteQuickConnectRequest
func (mr *MockConnectAPIMockRecorder) DeleteQuickConnectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuickConnectRequest", reflect.TypeOf((*MockConnectAPI)(nil).DeleteQuickConnectRequest), arg0)
}

// DeleteQuickConnectWithContext mocks base method
func (m *MockConnectAPI) DeleteQuickConnectWithContext(arg0 context.Context, arg1 *connect.DeleteQuickConnectInput, arg2 ...request.Option) (*connect.DeleteQuickConnectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQuickConnectWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DeleteQuickConnectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuickConnectWithContext indicates an expected call of DeleteQuickConnectWithContext
func (mr *MockConnectAPIMockRecorder) DeleteQuickConnectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuickConnectWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DeleteQuickConnectWithContext), varargs...)
}

// DeleteUseCase mocks base method
func (m *MockConnectAPI) DeleteUseCase(arg0 *connect.DeleteUseCaseInput) (*connect.DeleteUseCaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUseCase", arg0)
	ret0, _ := ret[0].(*connect.DeleteUseCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUseCase indicates an expected call of DeleteUseCase
func (mr *MockConnectAPIMockRecorder) DeleteUseCase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUseCase", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUseCase), arg0)
}

// DeleteUseCaseRequest mocks base method
func (m *MockConnectAPI) DeleteUseCaseRequest(arg0 *connect.DeleteUseCaseInput) (*request.Request, *connect.DeleteUseCaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUseCaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DeleteUseCaseOutput)
	return ret0, ret1
}

// DeleteUseCaseRequest indicates an expected call of DeleteUseCaseRequest
func (mr *MockConnectAPIMockRecorder) DeleteUseCaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUseCaseRequest", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUseCaseRequest), arg0)
}

// DeleteUseCaseWithContext mocks base method
func (m *MockConnectAPI) DeleteUseCaseWithContext(arg0 context.Context, arg1 *connect.DeleteUseCaseInput, arg2 ...request.Option) (*connect.DeleteUseCaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUseCaseWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DeleteUseCaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUseCaseWithContext indicates an expected call of DeleteUseCaseWithContext
func (mr *MockConnectAPIMockRecorder) DeleteUseCaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUseCaseWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUseCaseWithContext), varargs...)
}

// DeleteUser mocks base method
func (m *MockConnectAPI) DeleteUser(arg0 *connect.DeleteUserInput) (*connect.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*connect.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockConnectAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUser), arg0)
}

// DeleteUserHierarchyGroup mocks base method
func (m *MockConnectAPI) DeleteUserHierarchyGroup(arg0 *connect.DeleteUserHierarchyGroupInput) (*connect.DeleteUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserHierarchyGroup", arg0)
	ret0, _ := ret[0].(*connect.DeleteUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserHierarchyGroup indicates an expected call of DeleteUserHierarchyGroup
func (mr *MockConnectAPIMockRecorder) DeleteUserHierarchyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserHierarchyGroup", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUserHierarchyGroup), arg0)
}

// DeleteUserHierarchyGroupRequest mocks base method
func (m *MockConnectAPI) DeleteUserHierarchyGroupRequest(arg0 *connect.DeleteUserHierarchyGroupInput) (*request.Request, *connect.DeleteUserHierarchyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserHierarchyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DeleteUserHierarchyGroupOutput)
	return ret0, ret1
}

// DeleteUserHierarchyGroupRequest indicates an expected call of DeleteUserHierarchyGroupRequest
func (mr *MockConnectAPIMockRecorder) DeleteUserHierarchyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserHierarchyGroupRequest", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUserHierarchyGroupRequest), arg0)
}

// DeleteUserHierarchyGroupWithContext mocks base method
func (m *MockConnectAPI) DeleteUserHierarchyGroupWithContext(arg0 context.Context, arg1 *connect.DeleteUserHierarchyGroupInput, arg2 ...request.Option) (*connect.DeleteUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserHierarchyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DeleteUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserHierarchyGroupWithContext indicates an expected call of DeleteUserHierarchyGroupWithContext
func (mr *MockConnectAPIMockRecorder) DeleteUserHierarchyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserHierarchyGroupWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUserHierarchyGroupWithContext), varargs...)
}

// DeleteUserRequest mocks base method
func (m *MockConnectAPI) DeleteUserRequest(arg0 *connect.DeleteUserInput) (*request.Request, *connect.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest
func (mr *MockConnectAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method
func (m *MockConnectAPI) DeleteUserWithContext(arg0 context.Context, arg1 *connect.DeleteUserInput, arg2 ...request.Option) (*connect.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext
func (mr *MockConnectAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DeleteUserWithContext), varargs...)
}

// DescribeContactFlow mocks base method
func (m *MockConnectAPI) DescribeContactFlow(arg0 *connect.DescribeContactFlowInput) (*connect.DescribeContactFlowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContactFlow", arg0)
	ret0, _ := ret[0].(*connect.DescribeContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContactFlow indicates an expected call of DescribeContactFlow
func (mr *MockConnectAPIMockRecorder) DescribeContactFlow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContactFlow", reflect.TypeOf((*MockConnectAPI)(nil).DescribeContactFlow), arg0)
}

// DescribeContactFlowRequest mocks base method
func (m *MockConnectAPI) DescribeContactFlowRequest(arg0 *connect.DescribeContactFlowInput) (*request.Request, *connect.DescribeContactFlowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContactFlowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeContactFlowOutput)
	return ret0, ret1
}

// DescribeContactFlowRequest indicates an expected call of DescribeContactFlowRequest
func (mr *MockConnectAPIMockRecorder) DescribeContactFlowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContactFlowRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeContactFlowRequest), arg0)
}

// DescribeContactFlowWithContext mocks base method
func (m *MockConnectAPI) DescribeContactFlowWithContext(arg0 context.Context, arg1 *connect.DescribeContactFlowInput, arg2 ...request.Option) (*connect.DescribeContactFlowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeContactFlowWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeContactFlowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContactFlowWithContext indicates an expected call of DescribeContactFlowWithContext
func (mr *MockConnectAPIMockRecorder) DescribeContactFlowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContactFlowWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeContactFlowWithContext), varargs...)
}

// DescribeInstance mocks base method
func (m *MockConnectAPI) DescribeInstance(arg0 *connect.DescribeInstanceInput) (*connect.DescribeInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstance", arg0)
	ret0, _ := ret[0].(*connect.DescribeInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstance indicates an expected call of DescribeInstance
func (mr *MockConnectAPIMockRecorder) DescribeInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstance", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstance), arg0)
}

// DescribeInstanceAttribute mocks base method
func (m *MockConnectAPI) DescribeInstanceAttribute(arg0 *connect.DescribeInstanceAttributeInput) (*connect.DescribeInstanceAttributeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAttribute", arg0)
	ret0, _ := ret[0].(*connect.DescribeInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAttribute indicates an expected call of DescribeInstanceAttribute
func (mr *MockConnectAPIMockRecorder) DescribeInstanceAttribute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAttribute", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceAttribute), arg0)
}

// DescribeInstanceAttributeRequest mocks base method
func (m *MockConnectAPI) DescribeInstanceAttributeRequest(arg0 *connect.DescribeInstanceAttributeInput) (*request.Request, *connect.DescribeInstanceAttributeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceAttributeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeInstanceAttributeOutput)
	return ret0, ret1
}

// DescribeInstanceAttributeRequest indicates an expected call of DescribeInstanceAttributeRequest
func (mr *MockConnectAPIMockRecorder) DescribeInstanceAttributeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAttributeRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceAttributeRequest), arg0)
}

// DescribeInstanceAttributeWithContext mocks base method
func (m *MockConnectAPI) DescribeInstanceAttributeWithContext(arg0 context.Context, arg1 *connect.DescribeInstanceAttributeInput, arg2 ...request.Option) (*connect.DescribeInstanceAttributeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceAttributeWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceAttributeWithContext indicates an expected call of DescribeInstanceAttributeWithContext
func (mr *MockConnectAPIMockRecorder) DescribeInstanceAttributeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceAttributeWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceAttributeWithContext), varargs...)
}

// DescribeInstanceRequest mocks base method
func (m *MockConnectAPI) DescribeInstanceRequest(arg0 *connect.DescribeInstanceInput) (*request.Request, *connect.DescribeInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeInstanceOutput)
	return ret0, ret1
}

// DescribeInstanceRequest indicates an expected call of DescribeInstanceRequest
func (mr *MockConnectAPIMockRecorder) DescribeInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceRequest), arg0)
}

// DescribeInstanceStorageConfig mocks base method
func (m *MockConnectAPI) DescribeInstanceStorageConfig(arg0 *connect.DescribeInstanceStorageConfigInput) (*connect.DescribeInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceStorageConfig", arg0)
	ret0, _ := ret[0].(*connect.DescribeInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceStorageConfig indicates an expected call of DescribeInstanceStorageConfig
func (mr *MockConnectAPIMockRecorder) DescribeInstanceStorageConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceStorageConfig", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceStorageConfig), arg0)
}

// DescribeInstanceStorageConfigRequest mocks base method
func (m *MockConnectAPI) DescribeInstanceStorageConfigRequest(arg0 *connect.DescribeInstanceStorageConfigInput) (*request.Request, *connect.DescribeInstanceStorageConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstanceStorageConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeInstanceStorageConfigOutput)
	return ret0, ret1
}

// DescribeInstanceStorageConfigRequest indicates an expected call of DescribeInstanceStorageConfigRequest
func (mr *MockConnectAPIMockRecorder) DescribeInstanceStorageConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceStorageConfigRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceStorageConfigRequest), arg0)
}

// DescribeInstanceStorageConfigWithContext mocks base method
func (m *MockConnectAPI) DescribeInstanceStorageConfigWithContext(arg0 context.Context, arg1 *connect.DescribeInstanceStorageConfigInput, arg2 ...request.Option) (*connect.DescribeInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceStorageConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceStorageConfigWithContext indicates an expected call of DescribeInstanceStorageConfigWithContext
func (mr *MockConnectAPIMockRecorder) DescribeInstanceStorageConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceStorageConfigWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceStorageConfigWithContext), varargs...)
}

// DescribeInstanceWithContext mocks base method
func (m *MockConnectAPI) DescribeInstanceWithContext(arg0 context.Context, arg1 *connect.DescribeInstanceInput, arg2 ...request.Option) (*connect.DescribeInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstanceWithContext indicates an expected call of DescribeInstanceWithContext
func (mr *MockConnectAPIMockRecorder) DescribeInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstanceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeInstanceWithContext), varargs...)
}

// DescribeQuickConnect mocks base method
func (m *MockConnectAPI) DescribeQuickConnect(arg0 *connect.DescribeQuickConnectInput) (*connect.DescribeQuickConnectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeQuickConnect", arg0)
	ret0, _ := ret[0].(*connect.DescribeQuickConnectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeQuickConnect indicates an expected call of DescribeQuickConnect
func (mr *MockConnectAPIMockRecorder) DescribeQuickConnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeQuickConnect", reflect.TypeOf((*MockConnectAPI)(nil).DescribeQuickConnect), arg0)
}

// DescribeQuickConnectRequest mocks base method
func (m *MockConnectAPI) DescribeQuickConnectRequest(arg0 *connect.DescribeQuickConnectInput) (*request.Request, *connect.DescribeQuickConnectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeQuickConnectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeQuickConnectOutput)
	return ret0, ret1
}

// DescribeQuickConnectRequest indicates an expected call of DescribeQuickConnectRequest
func (mr *MockConnectAPIMockRecorder) DescribeQuickConnectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeQuickConnectRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeQuickConnectRequest), arg0)
}

// DescribeQuickConnectWithContext mocks base method
func (m *MockConnectAPI) DescribeQuickConnectWithContext(arg0 context.Context, arg1 *connect.DescribeQuickConnectInput, arg2 ...request.Option) (*connect.DescribeQuickConnectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeQuickConnectWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeQuickConnectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeQuickConnectWithContext indicates an expected call of DescribeQuickConnectWithContext
func (mr *MockConnectAPIMockRecorder) DescribeQuickConnectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeQuickConnectWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeQuickConnectWithContext), varargs...)
}

// DescribeRoutingProfile mocks base method
func (m *MockConnectAPI) DescribeRoutingProfile(arg0 *connect.DescribeRoutingProfileInput) (*connect.DescribeRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoutingProfile", arg0)
	ret0, _ := ret[0].(*connect.DescribeRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoutingProfile indicates an expected call of DescribeRoutingProfile
func (mr *MockConnectAPIMockRecorder) DescribeRoutingProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingProfile", reflect.TypeOf((*MockConnectAPI)(nil).DescribeRoutingProfile), arg0)
}

// DescribeRoutingProfileRequest mocks base method
func (m *MockConnectAPI) DescribeRoutingProfileRequest(arg0 *connect.DescribeRoutingProfileInput) (*request.Request, *connect.DescribeRoutingProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoutingProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeRoutingProfileOutput)
	return ret0, ret1
}

// DescribeRoutingProfileRequest indicates an expected call of DescribeRoutingProfileRequest
func (mr *MockConnectAPIMockRecorder) DescribeRoutingProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingProfileRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeRoutingProfileRequest), arg0)
}

// DescribeRoutingProfileWithContext mocks base method
func (m *MockConnectAPI) DescribeRoutingProfileWithContext(arg0 context.Context, arg1 *connect.DescribeRoutingProfileInput, arg2 ...request.Option) (*connect.DescribeRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRoutingProfileWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoutingProfileWithContext indicates an expected call of DescribeRoutingProfileWithContext
func (mr *MockConnectAPIMockRecorder) DescribeRoutingProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingProfileWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeRoutingProfileWithContext), varargs...)
}

// DescribeUser mocks base method
func (m *MockConnectAPI) DescribeUser(arg0 *connect.DescribeUserInput) (*connect.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUser", arg0)
	ret0, _ := ret[0].(*connect.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUser indicates an expected call of DescribeUser
func (mr *MockConnectAPIMockRecorder) DescribeUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUser", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUser), arg0)
}

// DescribeUserHierarchyGroup mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyGroup(arg0 *connect.DescribeUserHierarchyGroupInput) (*connect.DescribeUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyGroup", arg0)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyGroup indicates an expected call of DescribeUserHierarchyGroup
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyGroup", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyGroup), arg0)
}

// DescribeUserHierarchyGroupRequest mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyGroupRequest(arg0 *connect.DescribeUserHierarchyGroupInput) (*request.Request, *connect.DescribeUserHierarchyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeUserHierarchyGroupOutput)
	return ret0, ret1
}

// DescribeUserHierarchyGroupRequest indicates an expected call of DescribeUserHierarchyGroupRequest
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyGroupRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyGroupRequest), arg0)
}

// DescribeUserHierarchyGroupWithContext mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyGroupWithContext(arg0 context.Context, arg1 *connect.DescribeUserHierarchyGroupInput, arg2 ...request.Option) (*connect.DescribeUserHierarchyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserHierarchyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyGroupWithContext indicates an expected call of DescribeUserHierarchyGroupWithContext
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyGroupWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyGroupWithContext), varargs...)
}

// DescribeUserHierarchyStructure mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyStructure(arg0 *connect.DescribeUserHierarchyStructureInput) (*connect.DescribeUserHierarchyStructureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyStructure", arg0)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyStructureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyStructure indicates an expected call of DescribeUserHierarchyStructure
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyStructure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyStructure", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyStructure), arg0)
}

// DescribeUserHierarchyStructureRequest mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyStructureRequest(arg0 *connect.DescribeUserHierarchyStructureInput) (*request.Request, *connect.DescribeUserHierarchyStructureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserHierarchyStructureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeUserHierarchyStructureOutput)
	return ret0, ret1
}

// DescribeUserHierarchyStructureRequest indicates an expected call of DescribeUserHierarchyStructureRequest
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyStructureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyStructureRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyStructureRequest), arg0)
}

// DescribeUserHierarchyStructureWithContext mocks base method
func (m *MockConnectAPI) DescribeUserHierarchyStructureWithContext(arg0 context.Context, arg1 *connect.DescribeUserHierarchyStructureInput, arg2 ...request.Option) (*connect.DescribeUserHierarchyStructureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserHierarchyStructureWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeUserHierarchyStructureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserHierarchyStructureWithContext indicates an expected call of DescribeUserHierarchyStructureWithContext
func (mr *MockConnectAPIMockRecorder) DescribeUserHierarchyStructureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserHierarchyStructureWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserHierarchyStructureWithContext), varargs...)
}

// DescribeUserRequest mocks base method
func (m *MockConnectAPI) DescribeUserRequest(arg0 *connect.DescribeUserInput) (*request.Request, *connect.DescribeUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DescribeUserOutput)
	return ret0, ret1
}

// DescribeUserRequest indicates an expected call of DescribeUserRequest
func (mr *MockConnectAPIMockRecorder) DescribeUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserRequest", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserRequest), arg0)
}

// DescribeUserWithContext mocks base method
func (m *MockConnectAPI) DescribeUserWithContext(arg0 context.Context, arg1 *connect.DescribeUserInput, arg2 ...request.Option) (*connect.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserWithContext indicates an expected call of DescribeUserWithContext
func (mr *MockConnectAPIMockRecorder) DescribeUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DescribeUserWithContext), varargs...)
}

// DisassociateApprovedOrigin mocks base method
func (m *MockConnectAPI) DisassociateApprovedOrigin(arg0 *connect.DisassociateApprovedOriginInput) (*connect.DisassociateApprovedOriginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateApprovedOrigin", arg0)
	ret0, _ := ret[0].(*connect.DisassociateApprovedOriginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateApprovedOrigin indicates an expected call of DisassociateApprovedOrigin
func (mr *MockConnectAPIMockRecorder) DisassociateApprovedOrigin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateApprovedOrigin", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateApprovedOrigin), arg0)
}

// DisassociateApprovedOriginRequest mocks base method
func (m *MockConnectAPI) DisassociateApprovedOriginRequest(arg0 *connect.DisassociateApprovedOriginInput) (*request.Request, *connect.DisassociateApprovedOriginOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateApprovedOriginRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DisassociateApprovedOriginOutput)
	return ret0, ret1
}

// DisassociateApprovedOriginRequest indicates an expected call of DisassociateApprovedOriginRequest
func (mr *MockConnectAPIMockRecorder) DisassociateApprovedOriginRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateApprovedOriginRequest", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateApprovedOriginRequest), arg0)
}

// DisassociateApprovedOriginWithContext mocks base method
func (m *MockConnectAPI) DisassociateApprovedOriginWithContext(arg0 context.Context, arg1 *connect.DisassociateApprovedOriginInput, arg2 ...request.Option) (*connect.DisassociateApprovedOriginOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateApprovedOriginWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DisassociateApprovedOriginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateApprovedOriginWithContext indicates an expected call of DisassociateApprovedOriginWithContext
func (mr *MockConnectAPIMockRecorder) DisassociateApprovedOriginWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateApprovedOriginWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateApprovedOriginWithContext), varargs...)
}

// DisassociateInstanceStorageConfig mocks base method
func (m *MockConnectAPI) DisassociateInstanceStorageConfig(arg0 *connect.DisassociateInstanceStorageConfigInput) (*connect.DisassociateInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateInstanceStorageConfig", arg0)
	ret0, _ := ret[0].(*connect.DisassociateInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateInstanceStorageConfig indicates an expected call of DisassociateInstanceStorageConfig
func (mr *MockConnectAPIMockRecorder) DisassociateInstanceStorageConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateInstanceStorageConfig", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateInstanceStorageConfig), arg0)
}

// DisassociateInstanceStorageConfigRequest mocks base method
func (m *MockConnectAPI) DisassociateInstanceStorageConfigRequest(arg0 *connect.DisassociateInstanceStorageConfigInput) (*request.Request, *connect.DisassociateInstanceStorageConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateInstanceStorageConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DisassociateInstanceStorageConfigOutput)
	return ret0, ret1
}

// DisassociateInstanceStorageConfigRequest indicates an expected call of DisassociateInstanceStorageConfigRequest
func (mr *MockConnectAPIMockRecorder) DisassociateInstanceStorageConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateInstanceStorageConfigRequest", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateInstanceStorageConfigRequest), arg0)
}

// DisassociateInstanceStorageConfigWithContext mocks base method
func (m *MockConnectAPI) DisassociateInstanceStorageConfigWithContext(arg0 context.Context, arg1 *connect.DisassociateInstanceStorageConfigInput, arg2 ...request.Option) (*connect.DisassociateInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateInstanceStorageConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DisassociateInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateInstanceStorageConfigWithContext indicates an expected call of DisassociateInstanceStorageConfigWithContext
func (mr *MockConnectAPIMockRecorder) DisassociateInstanceStorageConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateInstanceStorageConfigWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateInstanceStorageConfigWithContext), varargs...)
}

// DisassociateLambdaFunction mocks base method
func (m *MockConnectAPI) DisassociateLambdaFunction(arg0 *connect.DisassociateLambdaFunctionInput) (*connect.DisassociateLambdaFunctionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLambdaFunction", arg0)
	ret0, _ := ret[0].(*connect.DisassociateLambdaFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLambdaFunction indicates an expected call of DisassociateLambdaFunction
func (mr *MockConnectAPIMockRecorder) DisassociateLambdaFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLambdaFunction", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateLambdaFunction), arg0)
}

// DisassociateLambdaFunctionRequest mocks base method
func (m *MockConnectAPI) DisassociateLambdaFunctionRequest(arg0 *connect.DisassociateLambdaFunctionInput) (*request.Request, *connect.DisassociateLambdaFunctionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLambdaFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DisassociateLambdaFunctionOutput)
	return ret0, ret1
}

// DisassociateLambdaFunctionRequest indicates an expected call of DisassociateLambdaFunctionRequest
func (mr *MockConnectAPIMockRecorder) DisassociateLambdaFunctionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLambdaFunctionRequest", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateLambdaFunctionRequest), arg0)
}

// DisassociateLambdaFunctionWithContext mocks base method
func (m *MockConnectAPI) DisassociateLambdaFunctionWithContext(arg0 context.Context, arg1 *connect.DisassociateLambdaFunctionInput, arg2 ...request.Option) (*connect.DisassociateLambdaFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLambdaFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DisassociateLambdaFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLambdaFunctionWithContext indicates an expected call of DisassociateLambdaFunctionWithContext
func (mr *MockConnectAPIMockRecorder) DisassociateLambdaFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLambdaFunctionWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateLambdaFunctionWithContext), varargs...)
}

// DisassociateLexBot mocks base method
func (m *MockConnectAPI) DisassociateLexBot(arg0 *connect.DisassociateLexBotInput) (*connect.DisassociateLexBotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLexBot", arg0)
	ret0, _ := ret[0].(*connect.DisassociateLexBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLexBot indicates an expected call of DisassociateLexBot
func (mr *MockConnectAPIMockRecorder) DisassociateLexBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLexBot", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateLexBot), arg0)
}

// DisassociateLexBotRequest mocks base method
func (m *MockConnectAPI) DisassociateLexBotRequest(arg0 *connect.DisassociateLexBotInput) (*request.Request, *connect.DisassociateLexBotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLexBotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DisassociateLexBotOutput)
	return ret0, ret1
}

// DisassociateLexBotRequest indicates an expected call of DisassociateLexBotRequest
func (mr *MockConnectAPIMockRecorder) DisassociateLexBotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLexBotRequest", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateLexBotRequest), arg0)
}

// DisassociateLexBotWithContext mocks base method
func (m *MockConnectAPI) DisassociateLexBotWithContext(arg0 context.Context, arg1 *connect.DisassociateLexBotInput, arg2 ...request.Option) (*connect.DisassociateLexBotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLexBotWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DisassociateLexBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLexBotWithContext indicates an expected call of DisassociateLexBotWithContext
func (mr *MockConnectAPIMockRecorder) DisassociateLexBotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLexBotWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateLexBotWithContext), varargs...)
}

// DisassociateRoutingProfileQueues mocks base method
func (m *MockConnectAPI) DisassociateRoutingProfileQueues(arg0 *connect.DisassociateRoutingProfileQueuesInput) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.DisassociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRoutingProfileQueues indicates an expected call of DisassociateRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) DisassociateRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateRoutingProfileQueues), arg0)
}

// DisassociateRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) DisassociateRoutingProfileQueuesRequest(arg0 *connect.DisassociateRoutingProfileQueuesInput) (*request.Request, *connect.DisassociateRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DisassociateRoutingProfileQueuesOutput)
	return ret0, ret1
}

// DisassociateRoutingProfileQueuesRequest indicates an expected call of DisassociateRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) DisassociateRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateRoutingProfileQueuesRequest), arg0)
}

// DisassociateRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) DisassociateRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.DisassociateRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DisassociateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateRoutingProfileQueuesWithContext indicates an expected call of DisassociateRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) DisassociateRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateRoutingProfileQueuesWithContext), varargs...)
}

// DisassociateSecurityKey mocks base method
func (m *MockConnectAPI) DisassociateSecurityKey(arg0 *connect.DisassociateSecurityKeyInput) (*connect.DisassociateSecurityKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateSecurityKey", arg0)
	ret0, _ := ret[0].(*connect.DisassociateSecurityKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateSecurityKey indicates an expected call of DisassociateSecurityKey
func (mr *MockConnectAPIMockRecorder) DisassociateSecurityKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateSecurityKey", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateSecurityKey), arg0)
}

// DisassociateSecurityKeyRequest mocks base method
func (m *MockConnectAPI) DisassociateSecurityKeyRequest(arg0 *connect.DisassociateSecurityKeyInput) (*request.Request, *connect.DisassociateSecurityKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateSecurityKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.DisassociateSecurityKeyOutput)
	return ret0, ret1
}

// DisassociateSecurityKeyRequest indicates an expected call of DisassociateSecurityKeyRequest
func (mr *MockConnectAPIMockRecorder) DisassociateSecurityKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateSecurityKeyRequest", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateSecurityKeyRequest), arg0)
}

// DisassociateSecurityKeyWithContext mocks base method
func (m *MockConnectAPI) DisassociateSecurityKeyWithContext(arg0 context.Context, arg1 *connect.DisassociateSecurityKeyInput, arg2 ...request.Option) (*connect.DisassociateSecurityKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateSecurityKeyWithContext", varargs...)
	ret0, _ := ret[0].(*connect.DisassociateSecurityKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateSecurityKeyWithContext indicates an expected call of DisassociateSecurityKeyWithContext
func (mr *MockConnectAPIMockRecorder) DisassociateSecurityKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateSecurityKeyWithContext", reflect.TypeOf((*MockConnectAPI)(nil).DisassociateSecurityKeyWithContext), varargs...)
}

// GetContactAttributes mocks base method
func (m *MockConnectAPI) GetContactAttributes(arg0 *connect.GetContactAttributesInput) (*connect.GetContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactAttributes", arg0)
	ret0, _ := ret[0].(*connect.GetContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactAttributes indicates an expected call of GetContactAttributes
func (mr *MockConnectAPIMockRecorder) GetContactAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactAttributes", reflect.TypeOf((*MockConnectAPI)(nil).GetContactAttributes), arg0)
}

// GetContactAttributesRequest mocks base method
func (m *MockConnectAPI) GetContactAttributesRequest(arg0 *connect.GetContactAttributesInput) (*request.Request, *connect.GetContactAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetContactAttributesOutput)
	return ret0, ret1
}

// GetContactAttributesRequest indicates an expected call of GetContactAttributesRequest
func (mr *MockConnectAPIMockRecorder) GetContactAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactAttributesRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetContactAttributesRequest), arg0)
}

// GetContactAttributesWithContext mocks base method
func (m *MockConnectAPI) GetContactAttributesWithContext(arg0 context.Context, arg1 *connect.GetContactAttributesInput, arg2 ...request.Option) (*connect.GetContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactAttributesWithContext indicates an expected call of GetContactAttributesWithContext
func (mr *MockConnectAPIMockRecorder) GetContactAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactAttributesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetContactAttributesWithContext), varargs...)
}

// GetCurrentMetricData mocks base method
func (m *MockConnectAPI) GetCurrentMetricData(arg0 *connect.GetCurrentMetricDataInput) (*connect.GetCurrentMetricDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMetricData", arg0)
	ret0, _ := ret[0].(*connect.GetCurrentMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMetricData indicates an expected call of GetCurrentMetricData
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricData", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricData), arg0)
}

// GetCurrentMetricDataPages mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataPages(arg0 *connect.GetCurrentMetricDataInput, arg1 func(*connect.GetCurrentMetricDataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMetricDataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCurrentMetricDataPages indicates an expected call of GetCurrentMetricDataPages
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataPages", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataPages), arg0, arg1)
}

// GetCurrentMetricDataPagesWithContext mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataPagesWithContext(arg0 context.Context, arg1 *connect.GetCurrentMetricDataInput, arg2 func(*connect.GetCurrentMetricDataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentMetricDataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCurrentMetricDataPagesWithContext indicates an expected call of GetCurrentMetricDataPagesWithContext
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataPagesWithContext), varargs...)
}

// GetCurrentMetricDataRequest mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataRequest(arg0 *connect.GetCurrentMetricDataInput) (*request.Request, *connect.GetCurrentMetricDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetCurrentMetricDataOutput)
	return ret0, ret1
}

// GetCurrentMetricDataRequest indicates an expected call of GetCurrentMetricDataRequest
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataRequest), arg0)
}

// GetCurrentMetricDataWithContext mocks base method
func (m *MockConnectAPI) GetCurrentMetricDataWithContext(arg0 context.Context, arg1 *connect.GetCurrentMetricDataInput, arg2 ...request.Option) (*connect.GetCurrentMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetCurrentMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMetricDataWithContext indicates an expected call of GetCurrentMetricDataWithContext
func (mr *MockConnectAPIMockRecorder) GetCurrentMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMetricDataWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetCurrentMetricDataWithContext), varargs...)
}

// GetFederationToken mocks base method
func (m *MockConnectAPI) GetFederationToken(arg0 *connect.GetFederationTokenInput) (*connect.GetFederationTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederationToken", arg0)
	ret0, _ := ret[0].(*connect.GetFederationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederationToken indicates an expected call of GetFederationToken
func (mr *MockConnectAPIMockRecorder) GetFederationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederationToken", reflect.TypeOf((*MockConnectAPI)(nil).GetFederationToken), arg0)
}

// GetFederationTokenRequest mocks base method
func (m *MockConnectAPI) GetFederationTokenRequest(arg0 *connect.GetFederationTokenInput) (*request.Request, *connect.GetFederationTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFederationTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetFederationTokenOutput)
	return ret0, ret1
}

// GetFederationTokenRequest indicates an expected call of GetFederationTokenRequest
func (mr *MockConnectAPIMockRecorder) GetFederationTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederationTokenRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetFederationTokenRequest), arg0)
}

// GetFederationTokenWithContext mocks base method
func (m *MockConnectAPI) GetFederationTokenWithContext(arg0 context.Context, arg1 *connect.GetFederationTokenInput, arg2 ...request.Option) (*connect.GetFederationTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFederationTokenWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetFederationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFederationTokenWithContext indicates an expected call of GetFederationTokenWithContext
func (mr *MockConnectAPIMockRecorder) GetFederationTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFederationTokenWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetFederationTokenWithContext), varargs...)
}

// GetMetricData mocks base method
func (m *MockConnectAPI) GetMetricData(arg0 *connect.GetMetricDataInput) (*connect.GetMetricDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricData", arg0)
	ret0, _ := ret[0].(*connect.GetMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricData indicates an expected call of GetMetricData
func (mr *MockConnectAPIMockRecorder) GetMetricData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricData", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricData), arg0)
}

// GetMetricDataPages mocks base method
func (m *MockConnectAPI) GetMetricDataPages(arg0 *connect.GetMetricDataInput, arg1 func(*connect.GetMetricDataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricDataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMetricDataPages indicates an expected call of GetMetricDataPages
func (mr *MockConnectAPIMockRecorder) GetMetricDataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataPages", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataPages), arg0, arg1)
}

// GetMetricDataPagesWithContext mocks base method
func (m *MockConnectAPI) GetMetricDataPagesWithContext(arg0 context.Context, arg1 *connect.GetMetricDataInput, arg2 func(*connect.GetMetricDataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricDataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMetricDataPagesWithContext indicates an expected call of GetMetricDataPagesWithContext
func (mr *MockConnectAPIMockRecorder) GetMetricDataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataPagesWithContext), varargs...)
}

// GetMetricDataRequest mocks base method
func (m *MockConnectAPI) GetMetricDataRequest(arg0 *connect.GetMetricDataInput) (*request.Request, *connect.GetMetricDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.GetMetricDataOutput)
	return ret0, ret1
}

// GetMetricDataRequest indicates an expected call of GetMetricDataRequest
func (mr *MockConnectAPIMockRecorder) GetMetricDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataRequest", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataRequest), arg0)
}

// GetMetricDataWithContext mocks base method
func (m *MockConnectAPI) GetMetricDataWithContext(arg0 context.Context, arg1 *connect.GetMetricDataInput, arg2 ...request.Option) (*connect.GetMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*connect.GetMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricDataWithContext indicates an expected call of GetMetricDataWithContext
func (mr *MockConnectAPIMockRecorder) GetMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDataWithContext", reflect.TypeOf((*MockConnectAPI)(nil).GetMetricDataWithContext), varargs...)
}

// ListApprovedOrigins mocks base method
func (m *MockConnectAPI) ListApprovedOrigins(arg0 *connect.ListApprovedOriginsInput) (*connect.ListApprovedOriginsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApprovedOrigins", arg0)
	ret0, _ := ret[0].(*connect.ListApprovedOriginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApprovedOrigins indicates an expected call of ListApprovedOrigins
func (mr *MockConnectAPIMockRecorder) ListApprovedOrigins(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApprovedOrigins", reflect.TypeOf((*MockConnectAPI)(nil).ListApprovedOrigins), arg0)
}

// ListApprovedOriginsPages mocks base method
func (m *MockConnectAPI) ListApprovedOriginsPages(arg0 *connect.ListApprovedOriginsInput, arg1 func(*connect.ListApprovedOriginsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApprovedOriginsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApprovedOriginsPages indicates an expected call of ListApprovedOriginsPages
func (mr *MockConnectAPIMockRecorder) ListApprovedOriginsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApprovedOriginsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListApprovedOriginsPages), arg0, arg1)
}

// ListApprovedOriginsPagesWithContext mocks base method
func (m *MockConnectAPI) ListApprovedOriginsPagesWithContext(arg0 context.Context, arg1 *connect.ListApprovedOriginsInput, arg2 func(*connect.ListApprovedOriginsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApprovedOriginsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApprovedOriginsPagesWithContext indicates an expected call of ListApprovedOriginsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListApprovedOriginsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApprovedOriginsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListApprovedOriginsPagesWithContext), varargs...)
}

// ListApprovedOriginsRequest mocks base method
func (m *MockConnectAPI) ListApprovedOriginsRequest(arg0 *connect.ListApprovedOriginsInput) (*request.Request, *connect.ListApprovedOriginsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApprovedOriginsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListApprovedOriginsOutput)
	return ret0, ret1
}

// ListApprovedOriginsRequest indicates an expected call of ListApprovedOriginsRequest
func (mr *MockConnectAPIMockRecorder) ListApprovedOriginsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApprovedOriginsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListApprovedOriginsRequest), arg0)
}

// ListApprovedOriginsWithContext mocks base method
func (m *MockConnectAPI) ListApprovedOriginsWithContext(arg0 context.Context, arg1 *connect.ListApprovedOriginsInput, arg2 ...request.Option) (*connect.ListApprovedOriginsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApprovedOriginsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListApprovedOriginsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApprovedOriginsWithContext indicates an expected call of ListApprovedOriginsWithContext
func (mr *MockConnectAPIMockRecorder) ListApprovedOriginsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApprovedOriginsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListApprovedOriginsWithContext), varargs...)
}

// ListContactFlows mocks base method
func (m *MockConnectAPI) ListContactFlows(arg0 *connect.ListContactFlowsInput) (*connect.ListContactFlowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactFlows", arg0)
	ret0, _ := ret[0].(*connect.ListContactFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactFlows indicates an expected call of ListContactFlows
func (mr *MockConnectAPIMockRecorder) ListContactFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlows", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlows), arg0)
}

// ListContactFlowsPages mocks base method
func (m *MockConnectAPI) ListContactFlowsPages(arg0 *connect.ListContactFlowsInput, arg1 func(*connect.ListContactFlowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactFlowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactFlowsPages indicates an expected call of ListContactFlowsPages
func (mr *MockConnectAPIMockRecorder) ListContactFlowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsPages), arg0, arg1)
}

// ListContactFlowsPagesWithContext mocks base method
func (m *MockConnectAPI) ListContactFlowsPagesWithContext(arg0 context.Context, arg1 *connect.ListContactFlowsInput, arg2 func(*connect.ListContactFlowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactFlowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactFlowsPagesWithContext indicates an expected call of ListContactFlowsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListContactFlowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsPagesWithContext), varargs...)
}

// ListContactFlowsRequest mocks base method
func (m *MockConnectAPI) ListContactFlowsRequest(arg0 *connect.ListContactFlowsInput) (*request.Request, *connect.ListContactFlowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactFlowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListContactFlowsOutput)
	return ret0, ret1
}

// ListContactFlowsRequest indicates an expected call of ListContactFlowsRequest
func (mr *MockConnectAPIMockRecorder) ListContactFlowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsRequest), arg0)
}

// ListContactFlowsWithContext mocks base method
func (m *MockConnectAPI) ListContactFlowsWithContext(arg0 context.Context, arg1 *connect.ListContactFlowsInput, arg2 ...request.Option) (*connect.ListContactFlowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactFlowsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListContactFlowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactFlowsWithContext indicates an expected call of ListContactFlowsWithContext
func (mr *MockConnectAPIMockRecorder) ListContactFlowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactFlowsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListContactFlowsWithContext), varargs...)
}

// ListHoursOfOperations mocks base method
func (m *MockConnectAPI) ListHoursOfOperations(arg0 *connect.ListHoursOfOperationsInput) (*connect.ListHoursOfOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoursOfOperations", arg0)
	ret0, _ := ret[0].(*connect.ListHoursOfOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHoursOfOperations indicates an expected call of ListHoursOfOperations
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperations", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperations), arg0)
}

// ListHoursOfOperationsPages mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsPages(arg0 *connect.ListHoursOfOperationsInput, arg1 func(*connect.ListHoursOfOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoursOfOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHoursOfOperationsPages indicates an expected call of ListHoursOfOperationsPages
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsPages), arg0, arg1)
}

// ListHoursOfOperationsPagesWithContext mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsPagesWithContext(arg0 context.Context, arg1 *connect.ListHoursOfOperationsInput, arg2 func(*connect.ListHoursOfOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHoursOfOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHoursOfOperationsPagesWithContext indicates an expected call of ListHoursOfOperationsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsPagesWithContext), varargs...)
}

// ListHoursOfOperationsRequest mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsRequest(arg0 *connect.ListHoursOfOperationsInput) (*request.Request, *connect.ListHoursOfOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHoursOfOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListHoursOfOperationsOutput)
	return ret0, ret1
}

// ListHoursOfOperationsRequest indicates an expected call of ListHoursOfOperationsRequest
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsRequest), arg0)
}

// ListHoursOfOperationsWithContext mocks base method
func (m *MockConnectAPI) ListHoursOfOperationsWithContext(arg0 context.Context, arg1 *connect.ListHoursOfOperationsInput, arg2 ...request.Option) (*connect.ListHoursOfOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHoursOfOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListHoursOfOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHoursOfOperationsWithContext indicates an expected call of ListHoursOfOperationsWithContext
func (mr *MockConnectAPIMockRecorder) ListHoursOfOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHoursOfOperationsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListHoursOfOperationsWithContext), varargs...)
}

// ListInstanceAttributes mocks base method
func (m *MockConnectAPI) ListInstanceAttributes(arg0 *connect.ListInstanceAttributesInput) (*connect.ListInstanceAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceAttributes", arg0)
	ret0, _ := ret[0].(*connect.ListInstanceAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceAttributes indicates an expected call of ListInstanceAttributes
func (mr *MockConnectAPIMockRecorder) ListInstanceAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceAttributes", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceAttributes), arg0)
}

// ListInstanceAttributesPages mocks base method
func (m *MockConnectAPI) ListInstanceAttributesPages(arg0 *connect.ListInstanceAttributesInput, arg1 func(*connect.ListInstanceAttributesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceAttributesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstanceAttributesPages indicates an expected call of ListInstanceAttributesPages
func (mr *MockConnectAPIMockRecorder) ListInstanceAttributesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceAttributesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceAttributesPages), arg0, arg1)
}

// ListInstanceAttributesPagesWithContext mocks base method
func (m *MockConnectAPI) ListInstanceAttributesPagesWithContext(arg0 context.Context, arg1 *connect.ListInstanceAttributesInput, arg2 func(*connect.ListInstanceAttributesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceAttributesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstanceAttributesPagesWithContext indicates an expected call of ListInstanceAttributesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListInstanceAttributesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceAttributesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceAttributesPagesWithContext), varargs...)
}

// ListInstanceAttributesRequest mocks base method
func (m *MockConnectAPI) ListInstanceAttributesRequest(arg0 *connect.ListInstanceAttributesInput) (*request.Request, *connect.ListInstanceAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListInstanceAttributesOutput)
	return ret0, ret1
}

// ListInstanceAttributesRequest indicates an expected call of ListInstanceAttributesRequest
func (mr *MockConnectAPIMockRecorder) ListInstanceAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceAttributesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceAttributesRequest), arg0)
}

// ListInstanceAttributesWithContext mocks base method
func (m *MockConnectAPI) ListInstanceAttributesWithContext(arg0 context.Context, arg1 *connect.ListInstanceAttributesInput, arg2 ...request.Option) (*connect.ListInstanceAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListInstanceAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceAttributesWithContext indicates an expected call of ListInstanceAttributesWithContext
func (mr *MockConnectAPIMockRecorder) ListInstanceAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceAttributesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceAttributesWithContext), varargs...)
}

// ListInstanceStorageConfigs mocks base method
func (m *MockConnectAPI) ListInstanceStorageConfigs(arg0 *connect.ListInstanceStorageConfigsInput) (*connect.ListInstanceStorageConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceStorageConfigs", arg0)
	ret0, _ := ret[0].(*connect.ListInstanceStorageConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceStorageConfigs indicates an expected call of ListInstanceStorageConfigs
func (mr *MockConnectAPIMockRecorder) ListInstanceStorageConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceStorageConfigs", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceStorageConfigs), arg0)
}

// ListInstanceStorageConfigsPages mocks base method
func (m *MockConnectAPI) ListInstanceStorageConfigsPages(arg0 *connect.ListInstanceStorageConfigsInput, arg1 func(*connect.ListInstanceStorageConfigsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceStorageConfigsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstanceStorageConfigsPages indicates an expected call of ListInstanceStorageConfigsPages
func (mr *MockConnectAPIMockRecorder) ListInstanceStorageConfigsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceStorageConfigsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceStorageConfigsPages), arg0, arg1)
}

// ListInstanceStorageConfigsPagesWithContext mocks base method
func (m *MockConnectAPI) ListInstanceStorageConfigsPagesWithContext(arg0 context.Context, arg1 *connect.ListInstanceStorageConfigsInput, arg2 func(*connect.ListInstanceStorageConfigsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceStorageConfigsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstanceStorageConfigsPagesWithContext indicates an expected call of ListInstanceStorageConfigsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListInstanceStorageConfigsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceStorageConfigsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceStorageConfigsPagesWithContext), varargs...)
}

// ListInstanceStorageConfigsRequest mocks base method
func (m *MockConnectAPI) ListInstanceStorageConfigsRequest(arg0 *connect.ListInstanceStorageConfigsInput) (*request.Request, *connect.ListInstanceStorageConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceStorageConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListInstanceStorageConfigsOutput)
	return ret0, ret1
}

// ListInstanceStorageConfigsRequest indicates an expected call of ListInstanceStorageConfigsRequest
func (mr *MockConnectAPIMockRecorder) ListInstanceStorageConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceStorageConfigsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceStorageConfigsRequest), arg0)
}

// ListInstanceStorageConfigsWithContext mocks base method
func (m *MockConnectAPI) ListInstanceStorageConfigsWithContext(arg0 context.Context, arg1 *connect.ListInstanceStorageConfigsInput, arg2 ...request.Option) (*connect.ListInstanceStorageConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstanceStorageConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListInstanceStorageConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceStorageConfigsWithContext indicates an expected call of ListInstanceStorageConfigsWithContext
func (mr *MockConnectAPIMockRecorder) ListInstanceStorageConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceStorageConfigsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListInstanceStorageConfigsWithContext), varargs...)
}

// ListInstances mocks base method
func (m *MockConnectAPI) ListInstances(arg0 *connect.ListInstancesInput) (*connect.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0)
	ret0, _ := ret[0].(*connect.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances
func (mr *MockConnectAPIMockRecorder) ListInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockConnectAPI)(nil).ListInstances), arg0)
}

// ListInstancesPages mocks base method
func (m *MockConnectAPI) ListInstancesPages(arg0 *connect.ListInstancesInput, arg1 func(*connect.ListInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPages indicates an expected call of ListInstancesPages
func (mr *MockConnectAPIMockRecorder) ListInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListInstancesPages), arg0, arg1)
}

// ListInstancesPagesWithContext mocks base method
func (m *MockConnectAPI) ListInstancesPagesWithContext(arg0 context.Context, arg1 *connect.ListInstancesInput, arg2 func(*connect.ListInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInstancesPagesWithContext indicates an expected call of ListInstancesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListInstancesPagesWithContext), varargs...)
}

// ListInstancesRequest mocks base method
func (m *MockConnectAPI) ListInstancesRequest(arg0 *connect.ListInstancesInput) (*request.Request, *connect.ListInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListInstancesOutput)
	return ret0, ret1
}

// ListInstancesRequest indicates an expected call of ListInstancesRequest
func (mr *MockConnectAPIMockRecorder) ListInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListInstancesRequest), arg0)
}

// ListInstancesWithContext mocks base method
func (m *MockConnectAPI) ListInstancesWithContext(arg0 context.Context, arg1 *connect.ListInstancesInput, arg2 ...request.Option) (*connect.ListInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstancesWithContext indicates an expected call of ListInstancesWithContext
func (mr *MockConnectAPIMockRecorder) ListInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListInstancesWithContext), varargs...)
}

// ListIntegrationAssociations mocks base method
func (m *MockConnectAPI) ListIntegrationAssociations(arg0 *connect.ListIntegrationAssociationsInput) (*connect.ListIntegrationAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntegrationAssociations", arg0)
	ret0, _ := ret[0].(*connect.ListIntegrationAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntegrationAssociations indicates an expected call of ListIntegrationAssociations
func (mr *MockConnectAPIMockRecorder) ListIntegrationAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrationAssociations", reflect.TypeOf((*MockConnectAPI)(nil).ListIntegrationAssociations), arg0)
}

// ListIntegrationAssociationsPages mocks base method
func (m *MockConnectAPI) ListIntegrationAssociationsPages(arg0 *connect.ListIntegrationAssociationsInput, arg1 func(*connect.ListIntegrationAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntegrationAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIntegrationAssociationsPages indicates an expected call of ListIntegrationAssociationsPages
func (mr *MockConnectAPIMockRecorder) ListIntegrationAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrationAssociationsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListIntegrationAssociationsPages), arg0, arg1)
}

// ListIntegrationAssociationsPagesWithContext mocks base method
func (m *MockConnectAPI) ListIntegrationAssociationsPagesWithContext(arg0 context.Context, arg1 *connect.ListIntegrationAssociationsInput, arg2 func(*connect.ListIntegrationAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIntegrationAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIntegrationAssociationsPagesWithContext indicates an expected call of ListIntegrationAssociationsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListIntegrationAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrationAssociationsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListIntegrationAssociationsPagesWithContext), varargs...)
}

// ListIntegrationAssociationsRequest mocks base method
func (m *MockConnectAPI) ListIntegrationAssociationsRequest(arg0 *connect.ListIntegrationAssociationsInput) (*request.Request, *connect.ListIntegrationAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntegrationAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListIntegrationAssociationsOutput)
	return ret0, ret1
}

// ListIntegrationAssociationsRequest indicates an expected call of ListIntegrationAssociationsRequest
func (mr *MockConnectAPIMockRecorder) ListIntegrationAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrationAssociationsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListIntegrationAssociationsRequest), arg0)
}

// ListIntegrationAssociationsWithContext mocks base method
func (m *MockConnectAPI) ListIntegrationAssociationsWithContext(arg0 context.Context, arg1 *connect.ListIntegrationAssociationsInput, arg2 ...request.Option) (*connect.ListIntegrationAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIntegrationAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListIntegrationAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntegrationAssociationsWithContext indicates an expected call of ListIntegrationAssociationsWithContext
func (mr *MockConnectAPIMockRecorder) ListIntegrationAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegrationAssociationsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListIntegrationAssociationsWithContext), varargs...)
}

// ListLambdaFunctions mocks base method
func (m *MockConnectAPI) ListLambdaFunctions(arg0 *connect.ListLambdaFunctionsInput) (*connect.ListLambdaFunctionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLambdaFunctions", arg0)
	ret0, _ := ret[0].(*connect.ListLambdaFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLambdaFunctions indicates an expected call of ListLambdaFunctions
func (mr *MockConnectAPIMockRecorder) ListLambdaFunctions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLambdaFunctions", reflect.TypeOf((*MockConnectAPI)(nil).ListLambdaFunctions), arg0)
}

// ListLambdaFunctionsPages mocks base method
func (m *MockConnectAPI) ListLambdaFunctionsPages(arg0 *connect.ListLambdaFunctionsInput, arg1 func(*connect.ListLambdaFunctionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLambdaFunctionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLambdaFunctionsPages indicates an expected call of ListLambdaFunctionsPages
func (mr *MockConnectAPIMockRecorder) ListLambdaFunctionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLambdaFunctionsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListLambdaFunctionsPages), arg0, arg1)
}

// ListLambdaFunctionsPagesWithContext mocks base method
func (m *MockConnectAPI) ListLambdaFunctionsPagesWithContext(arg0 context.Context, arg1 *connect.ListLambdaFunctionsInput, arg2 func(*connect.ListLambdaFunctionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLambdaFunctionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLambdaFunctionsPagesWithContext indicates an expected call of ListLambdaFunctionsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListLambdaFunctionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLambdaFunctionsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListLambdaFunctionsPagesWithContext), varargs...)
}

// ListLambdaFunctionsRequest mocks base method
func (m *MockConnectAPI) ListLambdaFunctionsRequest(arg0 *connect.ListLambdaFunctionsInput) (*request.Request, *connect.ListLambdaFunctionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLambdaFunctionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListLambdaFunctionsOutput)
	return ret0, ret1
}

// ListLambdaFunctionsRequest indicates an expected call of ListLambdaFunctionsRequest
func (mr *MockConnectAPIMockRecorder) ListLambdaFunctionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLambdaFunctionsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListLambdaFunctionsRequest), arg0)
}

// ListLambdaFunctionsWithContext mocks base method
func (m *MockConnectAPI) ListLambdaFunctionsWithContext(arg0 context.Context, arg1 *connect.ListLambdaFunctionsInput, arg2 ...request.Option) (*connect.ListLambdaFunctionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLambdaFunctionsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListLambdaFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLambdaFunctionsWithContext indicates an expected call of ListLambdaFunctionsWithContext
func (mr *MockConnectAPIMockRecorder) ListLambdaFunctionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLambdaFunctionsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListLambdaFunctionsWithContext), varargs...)
}

// ListLexBots mocks base method
func (m *MockConnectAPI) ListLexBots(arg0 *connect.ListLexBotsInput) (*connect.ListLexBotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLexBots", arg0)
	ret0, _ := ret[0].(*connect.ListLexBotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLexBots indicates an expected call of ListLexBots
func (mr *MockConnectAPIMockRecorder) ListLexBots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLexBots", reflect.TypeOf((*MockConnectAPI)(nil).ListLexBots), arg0)
}

// ListLexBotsPages mocks base method
func (m *MockConnectAPI) ListLexBotsPages(arg0 *connect.ListLexBotsInput, arg1 func(*connect.ListLexBotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLexBotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLexBotsPages indicates an expected call of ListLexBotsPages
func (mr *MockConnectAPIMockRecorder) ListLexBotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLexBotsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListLexBotsPages), arg0, arg1)
}

// ListLexBotsPagesWithContext mocks base method
func (m *MockConnectAPI) ListLexBotsPagesWithContext(arg0 context.Context, arg1 *connect.ListLexBotsInput, arg2 func(*connect.ListLexBotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLexBotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLexBotsPagesWithContext indicates an expected call of ListLexBotsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListLexBotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLexBotsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListLexBotsPagesWithContext), varargs...)
}

// ListLexBotsRequest mocks base method
func (m *MockConnectAPI) ListLexBotsRequest(arg0 *connect.ListLexBotsInput) (*request.Request, *connect.ListLexBotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLexBotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListLexBotsOutput)
	return ret0, ret1
}

// ListLexBotsRequest indicates an expected call of ListLexBotsRequest
func (mr *MockConnectAPIMockRecorder) ListLexBotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLexBotsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListLexBotsRequest), arg0)
}

// ListLexBotsWithContext mocks base method
func (m *MockConnectAPI) ListLexBotsWithContext(arg0 context.Context, arg1 *connect.ListLexBotsInput, arg2 ...request.Option) (*connect.ListLexBotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLexBotsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListLexBotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLexBotsWithContext indicates an expected call of ListLexBotsWithContext
func (mr *MockConnectAPIMockRecorder) ListLexBotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLexBotsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListLexBotsWithContext), varargs...)
}

// ListPhoneNumbers mocks base method
func (m *MockConnectAPI) ListPhoneNumbers(arg0 *connect.ListPhoneNumbersInput) (*connect.ListPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbers", arg0)
	ret0, _ := ret[0].(*connect.ListPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbers indicates an expected call of ListPhoneNumbers
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbers", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbers), arg0)
}

// ListPhoneNumbersPages mocks base method
func (m *MockConnectAPI) ListPhoneNumbersPages(arg0 *connect.ListPhoneNumbersInput, arg1 func(*connect.ListPhoneNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersPages indicates an expected call of ListPhoneNumbersPages
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersPages", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersPages), arg0, arg1)
}

// ListPhoneNumbersPagesWithContext mocks base method
func (m *MockConnectAPI) ListPhoneNumbersPagesWithContext(arg0 context.Context, arg1 *connect.ListPhoneNumbersInput, arg2 func(*connect.ListPhoneNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPhoneNumbersPagesWithContext indicates an expected call of ListPhoneNumbersPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersPagesWithContext), varargs...)
}

// ListPhoneNumbersRequest mocks base method
func (m *MockConnectAPI) ListPhoneNumbersRequest(arg0 *connect.ListPhoneNumbersInput) (*request.Request, *connect.ListPhoneNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPhoneNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListPhoneNumbersOutput)
	return ret0, ret1
}

// ListPhoneNumbersRequest indicates an expected call of ListPhoneNumbersRequest
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersRequest), arg0)
}

// ListPhoneNumbersWithContext mocks base method
func (m *MockConnectAPI) ListPhoneNumbersWithContext(arg0 context.Context, arg1 *connect.ListPhoneNumbersInput, arg2 ...request.Option) (*connect.ListPhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPhoneNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListPhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPhoneNumbersWithContext indicates an expected call of ListPhoneNumbersWithContext
func (mr *MockConnectAPIMockRecorder) ListPhoneNumbersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPhoneNumbersWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPhoneNumbersWithContext), varargs...)
}

// ListPrompts mocks base method
func (m *MockConnectAPI) ListPrompts(arg0 *connect.ListPromptsInput) (*connect.ListPromptsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrompts", arg0)
	ret0, _ := ret[0].(*connect.ListPromptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrompts indicates an expected call of ListPrompts
func (mr *MockConnectAPIMockRecorder) ListPrompts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrompts", reflect.TypeOf((*MockConnectAPI)(nil).ListPrompts), arg0)
}

// ListPromptsPages mocks base method
func (m *MockConnectAPI) ListPromptsPages(arg0 *connect.ListPromptsInput, arg1 func(*connect.ListPromptsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPromptsPages indicates an expected call of ListPromptsPages
func (mr *MockConnectAPIMockRecorder) ListPromptsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsPages), arg0, arg1)
}

// ListPromptsPagesWithContext mocks base method
func (m *MockConnectAPI) ListPromptsPagesWithContext(arg0 context.Context, arg1 *connect.ListPromptsInput, arg2 func(*connect.ListPromptsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPromptsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPromptsPagesWithContext indicates an expected call of ListPromptsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListPromptsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsPagesWithContext), varargs...)
}

// ListPromptsRequest mocks base method
func (m *MockConnectAPI) ListPromptsRequest(arg0 *connect.ListPromptsInput) (*request.Request, *connect.ListPromptsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListPromptsOutput)
	return ret0, ret1
}

// ListPromptsRequest indicates an expected call of ListPromptsRequest
func (mr *MockConnectAPIMockRecorder) ListPromptsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsRequest), arg0)
}

// ListPromptsWithContext mocks base method
func (m *MockConnectAPI) ListPromptsWithContext(arg0 context.Context, arg1 *connect.ListPromptsInput, arg2 ...request.Option) (*connect.ListPromptsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPromptsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListPromptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromptsWithContext indicates an expected call of ListPromptsWithContext
func (mr *MockConnectAPIMockRecorder) ListPromptsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListPromptsWithContext), varargs...)
}

// ListQueues mocks base method
func (m *MockConnectAPI) ListQueues(arg0 *connect.ListQueuesInput) (*connect.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueues", arg0)
	ret0, _ := ret[0].(*connect.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueues indicates an expected call of ListQueues
func (mr *MockConnectAPIMockRecorder) ListQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueues", reflect.TypeOf((*MockConnectAPI)(nil).ListQueues), arg0)
}

// ListQueuesPages mocks base method
func (m *MockConnectAPI) ListQueuesPages(arg0 *connect.ListQueuesInput, arg1 func(*connect.ListQueuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPages indicates an expected call of ListQueuesPages
func (mr *MockConnectAPIMockRecorder) ListQueuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesPages), arg0, arg1)
}

// ListQueuesPagesWithContext mocks base method
func (m *MockConnectAPI) ListQueuesPagesWithContext(arg0 context.Context, arg1 *connect.ListQueuesInput, arg2 func(*connect.ListQueuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPagesWithContext indicates an expected call of ListQueuesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListQueuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesPagesWithContext), varargs...)
}

// ListQueuesRequest mocks base method
func (m *MockConnectAPI) ListQueuesRequest(arg0 *connect.ListQueuesInput) (*request.Request, *connect.ListQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListQueuesOutput)
	return ret0, ret1
}

// ListQueuesRequest indicates an expected call of ListQueuesRequest
func (mr *MockConnectAPIMockRecorder) ListQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesRequest), arg0)
}

// ListQueuesWithContext mocks base method
func (m *MockConnectAPI) ListQueuesWithContext(arg0 context.Context, arg1 *connect.ListQueuesInput, arg2 ...request.Option) (*connect.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueuesWithContext indicates an expected call of ListQueuesWithContext
func (mr *MockConnectAPIMockRecorder) ListQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListQueuesWithContext), varargs...)
}

// ListQuickConnects mocks base method
func (m *MockConnectAPI) ListQuickConnects(arg0 *connect.ListQuickConnectsInput) (*connect.ListQuickConnectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuickConnects", arg0)
	ret0, _ := ret[0].(*connect.ListQuickConnectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuickConnects indicates an expected call of ListQuickConnects
func (mr *MockConnectAPIMockRecorder) ListQuickConnects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickConnects", reflect.TypeOf((*MockConnectAPI)(nil).ListQuickConnects), arg0)
}

// ListQuickConnectsPages mocks base method
func (m *MockConnectAPI) ListQuickConnectsPages(arg0 *connect.ListQuickConnectsInput, arg1 func(*connect.ListQuickConnectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuickConnectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQuickConnectsPages indicates an expected call of ListQuickConnectsPages
func (mr *MockConnectAPIMockRecorder) ListQuickConnectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickConnectsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListQuickConnectsPages), arg0, arg1)
}

// ListQuickConnectsPagesWithContext mocks base method
func (m *MockConnectAPI) ListQuickConnectsPagesWithContext(arg0 context.Context, arg1 *connect.ListQuickConnectsInput, arg2 func(*connect.ListQuickConnectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQuickConnectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQuickConnectsPagesWithContext indicates an expected call of ListQuickConnectsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListQuickConnectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickConnectsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListQuickConnectsPagesWithContext), varargs...)
}

// ListQuickConnectsRequest mocks base method
func (m *MockConnectAPI) ListQuickConnectsRequest(arg0 *connect.ListQuickConnectsInput) (*request.Request, *connect.ListQuickConnectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuickConnectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListQuickConnectsOutput)
	return ret0, ret1
}

// ListQuickConnectsRequest indicates an expected call of ListQuickConnectsRequest
func (mr *MockConnectAPIMockRecorder) ListQuickConnectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickConnectsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListQuickConnectsRequest), arg0)
}

// ListQuickConnectsWithContext mocks base method
func (m *MockConnectAPI) ListQuickConnectsWithContext(arg0 context.Context, arg1 *connect.ListQuickConnectsInput, arg2 ...request.Option) (*connect.ListQuickConnectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQuickConnectsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListQuickConnectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuickConnectsWithContext indicates an expected call of ListQuickConnectsWithContext
func (mr *MockConnectAPIMockRecorder) ListQuickConnectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuickConnectsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListQuickConnectsWithContext), varargs...)
}

// ListRoutingProfileQueues mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueues(arg0 *connect.ListRoutingProfileQueuesInput) (*connect.ListRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.ListRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfileQueues indicates an expected call of ListRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueues), arg0)
}

// ListRoutingProfileQueuesPages mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesPages(arg0 *connect.ListRoutingProfileQueuesInput, arg1 func(*connect.ListRoutingProfileQueuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfileQueuesPages indicates an expected call of ListRoutingProfileQueuesPages
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesPages), arg0, arg1)
}

// ListRoutingProfileQueuesPagesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesPagesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfileQueuesInput, arg2 func(*connect.ListRoutingProfileQueuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfileQueuesPagesWithContext indicates an expected call of ListRoutingProfileQueuesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesPagesWithContext), varargs...)
}

// ListRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesRequest(arg0 *connect.ListRoutingProfileQueuesInput) (*request.Request, *connect.ListRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListRoutingProfileQueuesOutput)
	return ret0, ret1
}

// ListRoutingProfileQueuesRequest indicates an expected call of ListRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesRequest), arg0)
}

// ListRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.ListRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfileQueuesWithContext indicates an expected call of ListRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfileQueuesWithContext), varargs...)
}

// ListRoutingProfiles mocks base method
func (m *MockConnectAPI) ListRoutingProfiles(arg0 *connect.ListRoutingProfilesInput) (*connect.ListRoutingProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfiles", arg0)
	ret0, _ := ret[0].(*connect.ListRoutingProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfiles indicates an expected call of ListRoutingProfiles
func (mr *MockConnectAPIMockRecorder) ListRoutingProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfiles", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfiles), arg0)
}

// ListRoutingProfilesPages mocks base method
func (m *MockConnectAPI) ListRoutingProfilesPages(arg0 *connect.ListRoutingProfilesInput, arg1 func(*connect.ListRoutingProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfilesPages indicates an expected call of ListRoutingProfilesPages
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesPages), arg0, arg1)
}

// ListRoutingProfilesPagesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfilesPagesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfilesInput, arg2 func(*connect.ListRoutingProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingProfilesPagesWithContext indicates an expected call of ListRoutingProfilesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesPagesWithContext), varargs...)
}

// ListRoutingProfilesRequest mocks base method
func (m *MockConnectAPI) ListRoutingProfilesRequest(arg0 *connect.ListRoutingProfilesInput) (*request.Request, *connect.ListRoutingProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListRoutingProfilesOutput)
	return ret0, ret1
}

// ListRoutingProfilesRequest indicates an expected call of ListRoutingProfilesRequest
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesRequest), arg0)
}

// ListRoutingProfilesWithContext mocks base method
func (m *MockConnectAPI) ListRoutingProfilesWithContext(arg0 context.Context, arg1 *connect.ListRoutingProfilesInput, arg2 ...request.Option) (*connect.ListRoutingProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListRoutingProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingProfilesWithContext indicates an expected call of ListRoutingProfilesWithContext
func (mr *MockConnectAPIMockRecorder) ListRoutingProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingProfilesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListRoutingProfilesWithContext), varargs...)
}

// ListSecurityKeys mocks base method
func (m *MockConnectAPI) ListSecurityKeys(arg0 *connect.ListSecurityKeysInput) (*connect.ListSecurityKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityKeys", arg0)
	ret0, _ := ret[0].(*connect.ListSecurityKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityKeys indicates an expected call of ListSecurityKeys
func (mr *MockConnectAPIMockRecorder) ListSecurityKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityKeys", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityKeys), arg0)
}

// ListSecurityKeysPages mocks base method
func (m *MockConnectAPI) ListSecurityKeysPages(arg0 *connect.ListSecurityKeysInput, arg1 func(*connect.ListSecurityKeysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityKeysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityKeysPages indicates an expected call of ListSecurityKeysPages
func (mr *MockConnectAPIMockRecorder) ListSecurityKeysPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityKeysPages", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityKeysPages), arg0, arg1)
}

// ListSecurityKeysPagesWithContext mocks base method
func (m *MockConnectAPI) ListSecurityKeysPagesWithContext(arg0 context.Context, arg1 *connect.ListSecurityKeysInput, arg2 func(*connect.ListSecurityKeysOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityKeysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityKeysPagesWithContext indicates an expected call of ListSecurityKeysPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListSecurityKeysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityKeysPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityKeysPagesWithContext), varargs...)
}

// ListSecurityKeysRequest mocks base method
func (m *MockConnectAPI) ListSecurityKeysRequest(arg0 *connect.ListSecurityKeysInput) (*request.Request, *connect.ListSecurityKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListSecurityKeysOutput)
	return ret0, ret1
}

// ListSecurityKeysRequest indicates an expected call of ListSecurityKeysRequest
func (mr *MockConnectAPIMockRecorder) ListSecurityKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityKeysRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityKeysRequest), arg0)
}

// ListSecurityKeysWithContext mocks base method
func (m *MockConnectAPI) ListSecurityKeysWithContext(arg0 context.Context, arg1 *connect.ListSecurityKeysInput, arg2 ...request.Option) (*connect.ListSecurityKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityKeysWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListSecurityKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityKeysWithContext indicates an expected call of ListSecurityKeysWithContext
func (mr *MockConnectAPIMockRecorder) ListSecurityKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityKeysWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityKeysWithContext), varargs...)
}

// ListSecurityProfiles mocks base method
func (m *MockConnectAPI) ListSecurityProfiles(arg0 *connect.ListSecurityProfilesInput) (*connect.ListSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityProfiles", arg0)
	ret0, _ := ret[0].(*connect.ListSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProfiles indicates an expected call of ListSecurityProfiles
func (mr *MockConnectAPIMockRecorder) ListSecurityProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfiles", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfiles), arg0)
}

// ListSecurityProfilesPages mocks base method
func (m *MockConnectAPI) ListSecurityProfilesPages(arg0 *connect.ListSecurityProfilesInput, arg1 func(*connect.ListSecurityProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityProfilesPages indicates an expected call of ListSecurityProfilesPages
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesPages), arg0, arg1)
}

// ListSecurityProfilesPagesWithContext mocks base method
func (m *MockConnectAPI) ListSecurityProfilesPagesWithContext(arg0 context.Context, arg1 *connect.ListSecurityProfilesInput, arg2 func(*connect.ListSecurityProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityProfilesPagesWithContext indicates an expected call of ListSecurityProfilesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesPagesWithContext), varargs...)
}

// ListSecurityProfilesRequest mocks base method
func (m *MockConnectAPI) ListSecurityProfilesRequest(arg0 *connect.ListSecurityProfilesInput) (*request.Request, *connect.ListSecurityProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListSecurityProfilesOutput)
	return ret0, ret1
}

// ListSecurityProfilesRequest indicates an expected call of ListSecurityProfilesRequest
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesRequest), arg0)
}

// ListSecurityProfilesWithContext mocks base method
func (m *MockConnectAPI) ListSecurityProfilesWithContext(arg0 context.Context, arg1 *connect.ListSecurityProfilesInput, arg2 ...request.Option) (*connect.ListSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityProfilesWithContext indicates an expected call of ListSecurityProfilesWithContext
func (mr *MockConnectAPIMockRecorder) ListSecurityProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityProfilesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListSecurityProfilesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockConnectAPI) ListTagsForResource(arg0 *connect.ListTagsForResourceInput) (*connect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*connect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockConnectAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockConnectAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockConnectAPI) ListTagsForResourceRequest(arg0 *connect.ListTagsForResourceInput) (*request.Request, *connect.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockConnectAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockConnectAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *connect.ListTagsForResourceInput, arg2 ...request.Option) (*connect.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockConnectAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUseCases mocks base method
func (m *MockConnectAPI) ListUseCases(arg0 *connect.ListUseCasesInput) (*connect.ListUseCasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUseCases", arg0)
	ret0, _ := ret[0].(*connect.ListUseCasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUseCases indicates an expected call of ListUseCases
func (mr *MockConnectAPIMockRecorder) ListUseCases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUseCases", reflect.TypeOf((*MockConnectAPI)(nil).ListUseCases), arg0)
}

// ListUseCasesPages mocks base method
func (m *MockConnectAPI) ListUseCasesPages(arg0 *connect.ListUseCasesInput, arg1 func(*connect.ListUseCasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUseCasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUseCasesPages indicates an expected call of ListUseCasesPages
func (mr *MockConnectAPIMockRecorder) ListUseCasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUseCasesPages", reflect.TypeOf((*MockConnectAPI)(nil).ListUseCasesPages), arg0, arg1)
}

// ListUseCasesPagesWithContext mocks base method
func (m *MockConnectAPI) ListUseCasesPagesWithContext(arg0 context.Context, arg1 *connect.ListUseCasesInput, arg2 func(*connect.ListUseCasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUseCasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUseCasesPagesWithContext indicates an expected call of ListUseCasesPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListUseCasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUseCasesPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUseCasesPagesWithContext), varargs...)
}

// ListUseCasesRequest mocks base method
func (m *MockConnectAPI) ListUseCasesRequest(arg0 *connect.ListUseCasesInput) (*request.Request, *connect.ListUseCasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUseCasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListUseCasesOutput)
	return ret0, ret1
}

// ListUseCasesRequest indicates an expected call of ListUseCasesRequest
func (mr *MockConnectAPIMockRecorder) ListUseCasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUseCasesRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListUseCasesRequest), arg0)
}

// ListUseCasesWithContext mocks base method
func (m *MockConnectAPI) ListUseCasesWithContext(arg0 context.Context, arg1 *connect.ListUseCasesInput, arg2 ...request.Option) (*connect.ListUseCasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUseCasesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListUseCasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUseCasesWithContext indicates an expected call of ListUseCasesWithContext
func (mr *MockConnectAPIMockRecorder) ListUseCasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUseCasesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUseCasesWithContext), varargs...)
}

// ListUserHierarchyGroups mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroups(arg0 *connect.ListUserHierarchyGroupsInput) (*connect.ListUserHierarchyGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHierarchyGroups", arg0)
	ret0, _ := ret[0].(*connect.ListUserHierarchyGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserHierarchyGroups indicates an expected call of ListUserHierarchyGroups
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroups", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroups), arg0)
}

// ListUserHierarchyGroupsPages mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsPages(arg0 *connect.ListUserHierarchyGroupsInput, arg1 func(*connect.ListUserHierarchyGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserHierarchyGroupsPages indicates an expected call of ListUserHierarchyGroupsPages
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsPages", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsPages), arg0, arg1)
}

// ListUserHierarchyGroupsPagesWithContext mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsPagesWithContext(arg0 context.Context, arg1 *connect.ListUserHierarchyGroupsInput, arg2 func(*connect.ListUserHierarchyGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserHierarchyGroupsPagesWithContext indicates an expected call of ListUserHierarchyGroupsPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsPagesWithContext), varargs...)
}

// ListUserHierarchyGroupsRequest mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsRequest(arg0 *connect.ListUserHierarchyGroupsInput) (*request.Request, *connect.ListUserHierarchyGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListUserHierarchyGroupsOutput)
	return ret0, ret1
}

// ListUserHierarchyGroupsRequest indicates an expected call of ListUserHierarchyGroupsRequest
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsRequest), arg0)
}

// ListUserHierarchyGroupsWithContext mocks base method
func (m *MockConnectAPI) ListUserHierarchyGroupsWithContext(arg0 context.Context, arg1 *connect.ListUserHierarchyGroupsInput, arg2 ...request.Option) (*connect.ListUserHierarchyGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserHierarchyGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListUserHierarchyGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserHierarchyGroupsWithContext indicates an expected call of ListUserHierarchyGroupsWithContext
func (mr *MockConnectAPIMockRecorder) ListUserHierarchyGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHierarchyGroupsWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUserHierarchyGroupsWithContext), varargs...)
}

// ListUsers mocks base method
func (m *MockConnectAPI) ListUsers(arg0 *connect.ListUsersInput) (*connect.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*connect.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockConnectAPIMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockConnectAPI)(nil).ListUsers), arg0)
}

// ListUsersPages mocks base method
func (m *MockConnectAPI) ListUsersPages(arg0 *connect.ListUsersInput, arg1 func(*connect.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages
func (mr *MockConnectAPIMockRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersPages), arg0, arg1)
}

// ListUsersPagesWithContext mocks base method
func (m *MockConnectAPI) ListUsersPagesWithContext(arg0 context.Context, arg1 *connect.ListUsersInput, arg2 func(*connect.ListUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPagesWithContext indicates an expected call of ListUsersPagesWithContext
func (mr *MockConnectAPIMockRecorder) ListUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPagesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersPagesWithContext), varargs...)
}

// ListUsersRequest mocks base method
func (m *MockConnectAPI) ListUsersRequest(arg0 *connect.ListUsersInput) (*request.Request, *connect.ListUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ListUsersOutput)
	return ret0, ret1
}

// ListUsersRequest indicates an expected call of ListUsersRequest
func (mr *MockConnectAPIMockRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersRequest", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersRequest), arg0)
}

// ListUsersWithContext mocks base method
func (m *MockConnectAPI) ListUsersWithContext(arg0 context.Context, arg1 *connect.ListUsersInput, arg2 ...request.Option) (*connect.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithContext indicates an expected call of ListUsersWithContext
func (mr *MockConnectAPIMockRecorder) ListUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ListUsersWithContext), varargs...)
}

// ResumeContactRecording mocks base method
func (m *MockConnectAPI) ResumeContactRecording(arg0 *connect.ResumeContactRecordingInput) (*connect.ResumeContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeContactRecording", arg0)
	ret0, _ := ret[0].(*connect.ResumeContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeContactRecording indicates an expected call of ResumeContactRecording
func (mr *MockConnectAPIMockRecorder) ResumeContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).ResumeContactRecording), arg0)
}

// ResumeContactRecordingRequest mocks base method
func (m *MockConnectAPI) ResumeContactRecordingRequest(arg0 *connect.ResumeContactRecordingInput) (*request.Request, *connect.ResumeContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.ResumeContactRecordingOutput)
	return ret0, ret1
}

// ResumeContactRecordingRequest indicates an expected call of ResumeContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) ResumeContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).ResumeContactRecordingRequest), arg0)
}

// ResumeContactRecordingWithContext mocks base method
func (m *MockConnectAPI) ResumeContactRecordingWithContext(arg0 context.Context, arg1 *connect.ResumeContactRecordingInput, arg2 ...request.Option) (*connect.ResumeContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.ResumeContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeContactRecordingWithContext indicates an expected call of ResumeContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) ResumeContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).ResumeContactRecordingWithContext), varargs...)
}

// StartChatContact mocks base method
func (m *MockConnectAPI) StartChatContact(arg0 *connect.StartChatContactInput) (*connect.StartChatContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChatContact", arg0)
	ret0, _ := ret[0].(*connect.StartChatContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChatContact indicates an expected call of StartChatContact
func (mr *MockConnectAPIMockRecorder) StartChatContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChatContact", reflect.TypeOf((*MockConnectAPI)(nil).StartChatContact), arg0)
}

// StartChatContactRequest mocks base method
func (m *MockConnectAPI) StartChatContactRequest(arg0 *connect.StartChatContactInput) (*request.Request, *connect.StartChatContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChatContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartChatContactOutput)
	return ret0, ret1
}

// StartChatContactRequest indicates an expected call of StartChatContactRequest
func (mr *MockConnectAPIMockRecorder) StartChatContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChatContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartChatContactRequest), arg0)
}

// StartChatContactWithContext mocks base method
func (m *MockConnectAPI) StartChatContactWithContext(arg0 context.Context, arg1 *connect.StartChatContactInput, arg2 ...request.Option) (*connect.StartChatContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartChatContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartChatContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChatContactWithContext indicates an expected call of StartChatContactWithContext
func (mr *MockConnectAPIMockRecorder) StartChatContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChatContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartChatContactWithContext), varargs...)
}

// StartContactRecording mocks base method
func (m *MockConnectAPI) StartContactRecording(arg0 *connect.StartContactRecordingInput) (*connect.StartContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContactRecording", arg0)
	ret0, _ := ret[0].(*connect.StartContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContactRecording indicates an expected call of StartContactRecording
func (mr *MockConnectAPIMockRecorder) StartContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).StartContactRecording), arg0)
}

// StartContactRecordingRequest mocks base method
func (m *MockConnectAPI) StartContactRecordingRequest(arg0 *connect.StartContactRecordingInput) (*request.Request, *connect.StartContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartContactRecordingOutput)
	return ret0, ret1
}

// StartContactRecordingRequest indicates an expected call of StartContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) StartContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartContactRecordingRequest), arg0)
}

// StartContactRecordingWithContext mocks base method
func (m *MockConnectAPI) StartContactRecordingWithContext(arg0 context.Context, arg1 *connect.StartContactRecordingInput, arg2 ...request.Option) (*connect.StartContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContactRecordingWithContext indicates an expected call of StartContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) StartContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartContactRecordingWithContext), varargs...)
}

// StartOutboundVoiceContact mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContact(arg0 *connect.StartOutboundVoiceContactInput) (*connect.StartOutboundVoiceContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOutboundVoiceContact", arg0)
	ret0, _ := ret[0].(*connect.StartOutboundVoiceContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOutboundVoiceContact indicates an expected call of StartOutboundVoiceContact
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContact", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContact), arg0)
}

// StartOutboundVoiceContactRequest mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContactRequest(arg0 *connect.StartOutboundVoiceContactInput) (*request.Request, *connect.StartOutboundVoiceContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOutboundVoiceContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartOutboundVoiceContactOutput)
	return ret0, ret1
}

// StartOutboundVoiceContactRequest indicates an expected call of StartOutboundVoiceContactRequest
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContactRequest), arg0)
}

// StartOutboundVoiceContactWithContext mocks base method
func (m *MockConnectAPI) StartOutboundVoiceContactWithContext(arg0 context.Context, arg1 *connect.StartOutboundVoiceContactInput, arg2 ...request.Option) (*connect.StartOutboundVoiceContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartOutboundVoiceContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartOutboundVoiceContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOutboundVoiceContactWithContext indicates an expected call of StartOutboundVoiceContactWithContext
func (mr *MockConnectAPIMockRecorder) StartOutboundVoiceContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOutboundVoiceContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartOutboundVoiceContactWithContext), varargs...)
}

// StartTaskContact mocks base method
func (m *MockConnectAPI) StartTaskContact(arg0 *connect.StartTaskContactInput) (*connect.StartTaskContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTaskContact", arg0)
	ret0, _ := ret[0].(*connect.StartTaskContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTaskContact indicates an expected call of StartTaskContact
func (mr *MockConnectAPIMockRecorder) StartTaskContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTaskContact", reflect.TypeOf((*MockConnectAPI)(nil).StartTaskContact), arg0)
}

// StartTaskContactRequest mocks base method
func (m *MockConnectAPI) StartTaskContactRequest(arg0 *connect.StartTaskContactInput) (*request.Request, *connect.StartTaskContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTaskContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StartTaskContactOutput)
	return ret0, ret1
}

// StartTaskContactRequest indicates an expected call of StartTaskContactRequest
func (mr *MockConnectAPIMockRecorder) StartTaskContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTaskContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StartTaskContactRequest), arg0)
}

// StartTaskContactWithContext mocks base method
func (m *MockConnectAPI) StartTaskContactWithContext(arg0 context.Context, arg1 *connect.StartTaskContactInput, arg2 ...request.Option) (*connect.StartTaskContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTaskContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StartTaskContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTaskContactWithContext indicates an expected call of StartTaskContactWithContext
func (mr *MockConnectAPIMockRecorder) StartTaskContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTaskContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StartTaskContactWithContext), varargs...)
}

// StopContact mocks base method
func (m *MockConnectAPI) StopContact(arg0 *connect.StopContactInput) (*connect.StopContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContact", arg0)
	ret0, _ := ret[0].(*connect.StopContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContact indicates an expected call of StopContact
func (mr *MockConnectAPIMockRecorder) StopContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContact", reflect.TypeOf((*MockConnectAPI)(nil).StopContact), arg0)
}

// StopContactRecording mocks base method
func (m *MockConnectAPI) StopContactRecording(arg0 *connect.StopContactRecordingInput) (*connect.StopContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContactRecording", arg0)
	ret0, _ := ret[0].(*connect.StopContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContactRecording indicates an expected call of StopContactRecording
func (mr *MockConnectAPIMockRecorder) StopContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRecording), arg0)
}

// StopContactRecordingRequest mocks base method
func (m *MockConnectAPI) StopContactRecordingRequest(arg0 *connect.StopContactRecordingInput) (*request.Request, *connect.StopContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StopContactRecordingOutput)
	return ret0, ret1
}

// StopContactRecordingRequest indicates an expected call of StopContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) StopContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRecordingRequest), arg0)
}

// StopContactRecordingWithContext mocks base method
func (m *MockConnectAPI) StopContactRecordingWithContext(arg0 context.Context, arg1 *connect.StopContactRecordingInput, arg2 ...request.Option) (*connect.StopContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StopContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContactRecordingWithContext indicates an expected call of StopContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) StopContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRecordingWithContext), varargs...)
}

// StopContactRequest mocks base method
func (m *MockConnectAPI) StopContactRequest(arg0 *connect.StopContactInput) (*request.Request, *connect.StopContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.StopContactOutput)
	return ret0, ret1
}

// StopContactRequest indicates an expected call of StopContactRequest
func (mr *MockConnectAPIMockRecorder) StopContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactRequest", reflect.TypeOf((*MockConnectAPI)(nil).StopContactRequest), arg0)
}

// StopContactWithContext mocks base method
func (m *MockConnectAPI) StopContactWithContext(arg0 context.Context, arg1 *connect.StopContactInput, arg2 ...request.Option) (*connect.StopContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopContactWithContext", varargs...)
	ret0, _ := ret[0].(*connect.StopContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopContactWithContext indicates an expected call of StopContactWithContext
func (mr *MockConnectAPIMockRecorder) StopContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContactWithContext", reflect.TypeOf((*MockConnectAPI)(nil).StopContactWithContext), varargs...)
}

// SuspendContactRecording mocks base method
func (m *MockConnectAPI) SuspendContactRecording(arg0 *connect.SuspendContactRecordingInput) (*connect.SuspendContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendContactRecording", arg0)
	ret0, _ := ret[0].(*connect.SuspendContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendContactRecording indicates an expected call of SuspendContactRecording
func (mr *MockConnectAPIMockRecorder) SuspendContactRecording(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendContactRecording", reflect.TypeOf((*MockConnectAPI)(nil).SuspendContactRecording), arg0)
}

// SuspendContactRecordingRequest mocks base method
func (m *MockConnectAPI) SuspendContactRecordingRequest(arg0 *connect.SuspendContactRecordingInput) (*request.Request, *connect.SuspendContactRecordingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendContactRecordingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.SuspendContactRecordingOutput)
	return ret0, ret1
}

// SuspendContactRecordingRequest indicates an expected call of SuspendContactRecordingRequest
func (mr *MockConnectAPIMockRecorder) SuspendContactRecordingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendContactRecordingRequest", reflect.TypeOf((*MockConnectAPI)(nil).SuspendContactRecordingRequest), arg0)
}

// SuspendContactRecordingWithContext mocks base method
func (m *MockConnectAPI) SuspendContactRecordingWithContext(arg0 context.Context, arg1 *connect.SuspendContactRecordingInput, arg2 ...request.Option) (*connect.SuspendContactRecordingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SuspendContactRecordingWithContext", varargs...)
	ret0, _ := ret[0].(*connect.SuspendContactRecordingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendContactRecordingWithContext indicates an expected call of SuspendContactRecordingWithContext
func (mr *MockConnectAPIMockRecorder) SuspendContactRecordingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendContactRecordingWithContext", reflect.TypeOf((*MockConnectAPI)(nil).SuspendContactRecordingWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockConnectAPI) TagResource(arg0 *connect.TagResourceInput) (*connect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*connect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockConnectAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockConnectAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockConnectAPI) TagResourceRequest(arg0 *connect.TagResourceInput) (*request.Request, *connect.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockConnectAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockConnectAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockConnectAPI) TagResourceWithContext(arg0 context.Context, arg1 *connect.TagResourceInput, arg2 ...request.Option) (*connect.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockConnectAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockConnectAPI) UntagResource(arg0 *connect.UntagResourceInput) (*connect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*connect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockConnectAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockConnectAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockConnectAPI) UntagResourceRequest(arg0 *connect.UntagResourceInput) (*request.Request, *connect.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockConnectAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockConnectAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockConnectAPI) UntagResourceWithContext(arg0 context.Context, arg1 *connect.UntagResourceInput, arg2 ...request.Option) (*connect.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockConnectAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateContactAttributes mocks base method
func (m *MockConnectAPI) UpdateContactAttributes(arg0 *connect.UpdateContactAttributesInput) (*connect.UpdateContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactAttributes", arg0)
	ret0, _ := ret[0].(*connect.UpdateContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactAttributes indicates an expected call of UpdateContactAttributes
func (mr *MockConnectAPIMockRecorder) UpdateContactAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactAttributes", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactAttributes), arg0)
}

// UpdateContactAttributesRequest mocks base method
func (m *MockConnectAPI) UpdateContactAttributesRequest(arg0 *connect.UpdateContactAttributesInput) (*request.Request, *connect.UpdateContactAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateContactAttributesOutput)
	return ret0, ret1
}

// UpdateContactAttributesRequest indicates an expected call of UpdateContactAttributesRequest
func (mr *MockConnectAPIMockRecorder) UpdateContactAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactAttributesRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactAttributesRequest), arg0)
}

// UpdateContactAttributesWithContext mocks base method
func (m *MockConnectAPI) UpdateContactAttributesWithContext(arg0 context.Context, arg1 *connect.UpdateContactAttributesInput, arg2 ...request.Option) (*connect.UpdateContactAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateContactAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactAttributesWithContext indicates an expected call of UpdateContactAttributesWithContext
func (mr *MockConnectAPIMockRecorder) UpdateContactAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactAttributesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactAttributesWithContext), varargs...)
}

// UpdateContactFlowContent mocks base method
func (m *MockConnectAPI) UpdateContactFlowContent(arg0 *connect.UpdateContactFlowContentInput) (*connect.UpdateContactFlowContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowContent", arg0)
	ret0, _ := ret[0].(*connect.UpdateContactFlowContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowContent indicates an expected call of UpdateContactFlowContent
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowContent", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowContent), arg0)
}

// UpdateContactFlowContentRequest mocks base method
func (m *MockConnectAPI) UpdateContactFlowContentRequest(arg0 *connect.UpdateContactFlowContentInput) (*request.Request, *connect.UpdateContactFlowContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateContactFlowContentOutput)
	return ret0, ret1
}

// UpdateContactFlowContentRequest indicates an expected call of UpdateContactFlowContentRequest
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowContentRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowContentRequest), arg0)
}

// UpdateContactFlowContentWithContext mocks base method
func (m *MockConnectAPI) UpdateContactFlowContentWithContext(arg0 context.Context, arg1 *connect.UpdateContactFlowContentInput, arg2 ...request.Option) (*connect.UpdateContactFlowContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactFlowContentWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateContactFlowContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowContentWithContext indicates an expected call of UpdateContactFlowContentWithContext
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowContentWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowContentWithContext), varargs...)
}

// UpdateContactFlowName mocks base method
func (m *MockConnectAPI) UpdateContactFlowName(arg0 *connect.UpdateContactFlowNameInput) (*connect.UpdateContactFlowNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowName", arg0)
	ret0, _ := ret[0].(*connect.UpdateContactFlowNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowName indicates an expected call of UpdateContactFlowName
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowName", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowName), arg0)
}

// UpdateContactFlowNameRequest mocks base method
func (m *MockConnectAPI) UpdateContactFlowNameRequest(arg0 *connect.UpdateContactFlowNameInput) (*request.Request, *connect.UpdateContactFlowNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactFlowNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateContactFlowNameOutput)
	return ret0, ret1
}

// UpdateContactFlowNameRequest indicates an expected call of UpdateContactFlowNameRequest
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowNameRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowNameRequest), arg0)
}

// UpdateContactFlowNameWithContext mocks base method
func (m *MockConnectAPI) UpdateContactFlowNameWithContext(arg0 context.Context, arg1 *connect.UpdateContactFlowNameInput, arg2 ...request.Option) (*connect.UpdateContactFlowNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactFlowNameWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateContactFlowNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactFlowNameWithContext indicates an expected call of UpdateContactFlowNameWithContext
func (mr *MockConnectAPIMockRecorder) UpdateContactFlowNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactFlowNameWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateContactFlowNameWithContext), varargs...)
}

// UpdateInstanceAttribute mocks base method
func (m *MockConnectAPI) UpdateInstanceAttribute(arg0 *connect.UpdateInstanceAttributeInput) (*connect.UpdateInstanceAttributeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceAttribute", arg0)
	ret0, _ := ret[0].(*connect.UpdateInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceAttribute indicates an expected call of UpdateInstanceAttribute
func (mr *MockConnectAPIMockRecorder) UpdateInstanceAttribute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceAttribute", reflect.TypeOf((*MockConnectAPI)(nil).UpdateInstanceAttribute), arg0)
}

// UpdateInstanceAttributeRequest mocks base method
func (m *MockConnectAPI) UpdateInstanceAttributeRequest(arg0 *connect.UpdateInstanceAttributeInput) (*request.Request, *connect.UpdateInstanceAttributeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceAttributeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateInstanceAttributeOutput)
	return ret0, ret1
}

// UpdateInstanceAttributeRequest indicates an expected call of UpdateInstanceAttributeRequest
func (mr *MockConnectAPIMockRecorder) UpdateInstanceAttributeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceAttributeRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateInstanceAttributeRequest), arg0)
}

// UpdateInstanceAttributeWithContext mocks base method
func (m *MockConnectAPI) UpdateInstanceAttributeWithContext(arg0 context.Context, arg1 *connect.UpdateInstanceAttributeInput, arg2 ...request.Option) (*connect.UpdateInstanceAttributeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInstanceAttributeWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateInstanceAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceAttributeWithContext indicates an expected call of UpdateInstanceAttributeWithContext
func (mr *MockConnectAPIMockRecorder) UpdateInstanceAttributeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceAttributeWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateInstanceAttributeWithContext), varargs...)
}

// UpdateInstanceStorageConfig mocks base method
func (m *MockConnectAPI) UpdateInstanceStorageConfig(arg0 *connect.UpdateInstanceStorageConfigInput) (*connect.UpdateInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceStorageConfig", arg0)
	ret0, _ := ret[0].(*connect.UpdateInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceStorageConfig indicates an expected call of UpdateInstanceStorageConfig
func (mr *MockConnectAPIMockRecorder) UpdateInstanceStorageConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceStorageConfig", reflect.TypeOf((*MockConnectAPI)(nil).UpdateInstanceStorageConfig), arg0)
}

// UpdateInstanceStorageConfigRequest mocks base method
func (m *MockConnectAPI) UpdateInstanceStorageConfigRequest(arg0 *connect.UpdateInstanceStorageConfigInput) (*request.Request, *connect.UpdateInstanceStorageConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceStorageConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateInstanceStorageConfigOutput)
	return ret0, ret1
}

// UpdateInstanceStorageConfigRequest indicates an expected call of UpdateInstanceStorageConfigRequest
func (mr *MockConnectAPIMockRecorder) UpdateInstanceStorageConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceStorageConfigRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateInstanceStorageConfigRequest), arg0)
}

// UpdateInstanceStorageConfigWithContext mocks base method
func (m *MockConnectAPI) UpdateInstanceStorageConfigWithContext(arg0 context.Context, arg1 *connect.UpdateInstanceStorageConfigInput, arg2 ...request.Option) (*connect.UpdateInstanceStorageConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInstanceStorageConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateInstanceStorageConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceStorageConfigWithContext indicates an expected call of UpdateInstanceStorageConfigWithContext
func (mr *MockConnectAPIMockRecorder) UpdateInstanceStorageConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceStorageConfigWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateInstanceStorageConfigWithContext), varargs...)
}

// UpdateQuickConnectConfig mocks base method
func (m *MockConnectAPI) UpdateQuickConnectConfig(arg0 *connect.UpdateQuickConnectConfigInput) (*connect.UpdateQuickConnectConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuickConnectConfig", arg0)
	ret0, _ := ret[0].(*connect.UpdateQuickConnectConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuickConnectConfig indicates an expected call of UpdateQuickConnectConfig
func (mr *MockConnectAPIMockRecorder) UpdateQuickConnectConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickConnectConfig", reflect.TypeOf((*MockConnectAPI)(nil).UpdateQuickConnectConfig), arg0)
}

// UpdateQuickConnectConfigRequest mocks base method
func (m *MockConnectAPI) UpdateQuickConnectConfigRequest(arg0 *connect.UpdateQuickConnectConfigInput) (*request.Request, *connect.UpdateQuickConnectConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuickConnectConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateQuickConnectConfigOutput)
	return ret0, ret1
}

// UpdateQuickConnectConfigRequest indicates an expected call of UpdateQuickConnectConfigRequest
func (mr *MockConnectAPIMockRecorder) UpdateQuickConnectConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickConnectConfigRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateQuickConnectConfigRequest), arg0)
}

// UpdateQuickConnectConfigWithContext mocks base method
func (m *MockConnectAPI) UpdateQuickConnectConfigWithContext(arg0 context.Context, arg1 *connect.UpdateQuickConnectConfigInput, arg2 ...request.Option) (*connect.UpdateQuickConnectConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQuickConnectConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateQuickConnectConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuickConnectConfigWithContext indicates an expected call of UpdateQuickConnectConfigWithContext
func (mr *MockConnectAPIMockRecorder) UpdateQuickConnectConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickConnectConfigWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateQuickConnectConfigWithContext), varargs...)
}

// UpdateQuickConnectName mocks base method
func (m *MockConnectAPI) UpdateQuickConnectName(arg0 *connect.UpdateQuickConnectNameInput) (*connect.UpdateQuickConnectNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuickConnectName", arg0)
	ret0, _ := ret[0].(*connect.UpdateQuickConnectNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuickConnectName indicates an expected call of UpdateQuickConnectName
func (mr *MockConnectAPIMockRecorder) UpdateQuickConnectName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickConnectName", reflect.TypeOf((*MockConnectAPI)(nil).UpdateQuickConnectName), arg0)
}

// UpdateQuickConnectNameRequest mocks base method
func (m *MockConnectAPI) UpdateQuickConnectNameRequest(arg0 *connect.UpdateQuickConnectNameInput) (*request.Request, *connect.UpdateQuickConnectNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuickConnectNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateQuickConnectNameOutput)
	return ret0, ret1
}

// UpdateQuickConnectNameRequest indicates an expected call of UpdateQuickConnectNameRequest
func (mr *MockConnectAPIMockRecorder) UpdateQuickConnectNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickConnectNameRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateQuickConnectNameRequest), arg0)
}

// UpdateQuickConnectNameWithContext mocks base method
func (m *MockConnectAPI) UpdateQuickConnectNameWithContext(arg0 context.Context, arg1 *connect.UpdateQuickConnectNameInput, arg2 ...request.Option) (*connect.UpdateQuickConnectNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQuickConnectNameWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateQuickConnectNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuickConnectNameWithContext indicates an expected call of UpdateQuickConnectNameWithContext
func (mr *MockConnectAPIMockRecorder) UpdateQuickConnectNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuickConnectNameWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateQuickConnectNameWithContext), varargs...)
}

// UpdateRoutingProfileConcurrency mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileConcurrency(arg0 *connect.UpdateRoutingProfileConcurrencyInput) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileConcurrency", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileConcurrencyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileConcurrency indicates an expected call of UpdateRoutingProfileConcurrency
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileConcurrency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileConcurrency", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileConcurrency), arg0)
}

// UpdateRoutingProfileConcurrencyRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileConcurrencyRequest(arg0 *connect.UpdateRoutingProfileConcurrencyInput) (*request.Request, *connect.UpdateRoutingProfileConcurrencyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileConcurrencyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileConcurrencyOutput)
	return ret0, ret1
}

// UpdateRoutingProfileConcurrencyRequest indicates an expected call of UpdateRoutingProfileConcurrencyRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileConcurrencyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileConcurrencyRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileConcurrencyRequest), arg0)
}

// UpdateRoutingProfileConcurrencyWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileConcurrencyWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileConcurrencyInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileConcurrencyWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileConcurrencyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileConcurrencyWithContext indicates an expected call of UpdateRoutingProfileConcurrencyWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileConcurrencyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileConcurrencyWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileConcurrencyWithContext), varargs...)
}

// UpdateRoutingProfileDefaultOutboundQueue mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileDefaultOutboundQueue(arg0 *connect.UpdateRoutingProfileDefaultOutboundQueueInput) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileDefaultOutboundQueue", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileDefaultOutboundQueue indicates an expected call of UpdateRoutingProfileDefaultOutboundQueue
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileDefaultOutboundQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileDefaultOutboundQueue", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileDefaultOutboundQueue), arg0)
}

// UpdateRoutingProfileDefaultOutboundQueueRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileDefaultOutboundQueueRequest(arg0 *connect.UpdateRoutingProfileDefaultOutboundQueueInput) (*request.Request, *connect.UpdateRoutingProfileDefaultOutboundQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileDefaultOutboundQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)
	return ret0, ret1
}

// UpdateRoutingProfileDefaultOutboundQueueRequest indicates an expected call of UpdateRoutingProfileDefaultOutboundQueueRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileDefaultOutboundQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileDefaultOutboundQueueRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileDefaultOutboundQueueRequest), arg0)
}

// UpdateRoutingProfileDefaultOutboundQueueWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileDefaultOutboundQueueWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileDefaultOutboundQueueInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileDefaultOutboundQueueWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileDefaultOutboundQueueWithContext indicates an expected call of UpdateRoutingProfileDefaultOutboundQueueWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileDefaultOutboundQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileDefaultOutboundQueueWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileDefaultOutboundQueueWithContext), varargs...)
}

// UpdateRoutingProfileName mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileName(arg0 *connect.UpdateRoutingProfileNameInput) (*connect.UpdateRoutingProfileNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileName", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileName indicates an expected call of UpdateRoutingProfileName
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileName", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileName), arg0)
}

// UpdateRoutingProfileNameRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileNameRequest(arg0 *connect.UpdateRoutingProfileNameInput) (*request.Request, *connect.UpdateRoutingProfileNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileNameOutput)
	return ret0, ret1
}

// UpdateRoutingProfileNameRequest indicates an expected call of UpdateRoutingProfileNameRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileNameRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileNameRequest), arg0)
}

// UpdateRoutingProfileNameWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileNameWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileNameInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileNameWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileNameWithContext indicates an expected call of UpdateRoutingProfileNameWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileNameWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileNameWithContext), varargs...)
}

// UpdateRoutingProfileQueues mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileQueues(arg0 *connect.UpdateRoutingProfileQueuesInput) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileQueues", arg0)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileQueues indicates an expected call of UpdateRoutingProfileQueues
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileQueues", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileQueues), arg0)
}

// UpdateRoutingProfileQueuesRequest mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileQueuesRequest(arg0 *connect.UpdateRoutingProfileQueuesInput) (*request.Request, *connect.UpdateRoutingProfileQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingProfileQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateRoutingProfileQueuesOutput)
	return ret0, ret1
}

// UpdateRoutingProfileQueuesRequest indicates an expected call of UpdateRoutingProfileQueuesRequest
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileQueuesRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileQueuesRequest), arg0)
}

// UpdateRoutingProfileQueuesWithContext mocks base method
func (m *MockConnectAPI) UpdateRoutingProfileQueuesWithContext(arg0 context.Context, arg1 *connect.UpdateRoutingProfileQueuesInput, arg2 ...request.Option) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingProfileQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateRoutingProfileQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingProfileQueuesWithContext indicates an expected call of UpdateRoutingProfileQueuesWithContext
func (mr *MockConnectAPIMockRecorder) UpdateRoutingProfileQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingProfileQueuesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateRoutingProfileQueuesWithContext), varargs...)
}

// UpdateUserHierarchy mocks base method
func (m *MockConnectAPI) UpdateUserHierarchy(arg0 *connect.UpdateUserHierarchyInput) (*connect.UpdateUserHierarchyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchy", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchy indicates an expected call of UpdateUserHierarchy
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchy", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchy), arg0)
}

// UpdateUserHierarchyGroupName mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyGroupName(arg0 *connect.UpdateUserHierarchyGroupNameInput) (*connect.UpdateUserHierarchyGroupNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchyGroupName", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyGroupNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchyGroupName indicates an expected call of UpdateUserHierarchyGroupName
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyGroupName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyGroupName", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyGroupName), arg0)
}

// UpdateUserHierarchyGroupNameRequest mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyGroupNameRequest(arg0 *connect.UpdateUserHierarchyGroupNameInput) (*request.Request, *connect.UpdateUserHierarchyGroupNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchyGroupNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserHierarchyGroupNameOutput)
	return ret0, ret1
}

// UpdateUserHierarchyGroupNameRequest indicates an expected call of UpdateUserHierarchyGroupNameRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyGroupNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyGroupNameRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyGroupNameRequest), arg0)
}

// UpdateUserHierarchyGroupNameWithContext mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyGroupNameWithContext(arg0 context.Context, arg1 *connect.UpdateUserHierarchyGroupNameInput, arg2 ...request.Option) (*connect.UpdateUserHierarchyGroupNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserHierarchyGroupNameWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyGroupNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchyGroupNameWithContext indicates an expected call of UpdateUserHierarchyGroupNameWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyGroupNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyGroupNameWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyGroupNameWithContext), varargs...)
}

// UpdateUserHierarchyRequest mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyRequest(arg0 *connect.UpdateUserHierarchyInput) (*request.Request, *connect.UpdateUserHierarchyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserHierarchyOutput)
	return ret0, ret1
}

// UpdateUserHierarchyRequest indicates an expected call of UpdateUserHierarchyRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyRequest), arg0)
}

// UpdateUserHierarchyStructure mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyStructure(arg0 *connect.UpdateUserHierarchyStructureInput) (*connect.UpdateUserHierarchyStructureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchyStructure", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyStructureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchyStructure indicates an expected call of UpdateUserHierarchyStructure
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyStructure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyStructure", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyStructure), arg0)
}

// UpdateUserHierarchyStructureRequest mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyStructureRequest(arg0 *connect.UpdateUserHierarchyStructureInput) (*request.Request, *connect.UpdateUserHierarchyStructureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHierarchyStructureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserHierarchyStructureOutput)
	return ret0, ret1
}

// UpdateUserHierarchyStructureRequest indicates an expected call of UpdateUserHierarchyStructureRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyStructureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyStructureRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyStructureRequest), arg0)
}

// UpdateUserHierarchyStructureWithContext mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyStructureWithContext(arg0 context.Context, arg1 *connect.UpdateUserHierarchyStructureInput, arg2 ...request.Option) (*connect.UpdateUserHierarchyStructureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserHierarchyStructureWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyStructureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchyStructureWithContext indicates an expected call of UpdateUserHierarchyStructureWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyStructureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyStructureWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyStructureWithContext), varargs...)
}

// UpdateUserHierarchyWithContext mocks base method
func (m *MockConnectAPI) UpdateUserHierarchyWithContext(arg0 context.Context, arg1 *connect.UpdateUserHierarchyInput, arg2 ...request.Option) (*connect.UpdateUserHierarchyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserHierarchyWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserHierarchyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHierarchyWithContext indicates an expected call of UpdateUserHierarchyWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserHierarchyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHierarchyWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserHierarchyWithContext), varargs...)
}

// UpdateUserIdentityInfo mocks base method
func (m *MockConnectAPI) UpdateUserIdentityInfo(arg0 *connect.UpdateUserIdentityInfoInput) (*connect.UpdateUserIdentityInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserIdentityInfo", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserIdentityInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserIdentityInfo indicates an expected call of UpdateUserIdentityInfo
func (mr *MockConnectAPIMockRecorder) UpdateUserIdentityInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIdentityInfo", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserIdentityInfo), arg0)
}

// UpdateUserIdentityInfoRequest mocks base method
func (m *MockConnectAPI) UpdateUserIdentityInfoRequest(arg0 *connect.UpdateUserIdentityInfoInput) (*request.Request, *connect.UpdateUserIdentityInfoOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserIdentityInfoRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserIdentityInfoOutput)
	return ret0, ret1
}

// UpdateUserIdentityInfoRequest indicates an expected call of UpdateUserIdentityInfoRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserIdentityInfoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIdentityInfoRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserIdentityInfoRequest), arg0)
}

// UpdateUserIdentityInfoWithContext mocks base method
func (m *MockConnectAPI) UpdateUserIdentityInfoWithContext(arg0 context.Context, arg1 *connect.UpdateUserIdentityInfoInput, arg2 ...request.Option) (*connect.UpdateUserIdentityInfoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserIdentityInfoWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserIdentityInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserIdentityInfoWithContext indicates an expected call of UpdateUserIdentityInfoWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserIdentityInfoWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserIdentityInfoWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserIdentityInfoWithContext), varargs...)
}

// UpdateUserPhoneConfig mocks base method
func (m *MockConnectAPI) UpdateUserPhoneConfig(arg0 *connect.UpdateUserPhoneConfigInput) (*connect.UpdateUserPhoneConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhoneConfig", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserPhoneConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPhoneConfig indicates an expected call of UpdateUserPhoneConfig
func (mr *MockConnectAPIMockRecorder) UpdateUserPhoneConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhoneConfig", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserPhoneConfig), arg0)
}

// UpdateUserPhoneConfigRequest mocks base method
func (m *MockConnectAPI) UpdateUserPhoneConfigRequest(arg0 *connect.UpdateUserPhoneConfigInput) (*request.Request, *connect.UpdateUserPhoneConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPhoneConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserPhoneConfigOutput)
	return ret0, ret1
}

// UpdateUserPhoneConfigRequest indicates an expected call of UpdateUserPhoneConfigRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserPhoneConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhoneConfigRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserPhoneConfigRequest), arg0)
}

// UpdateUserPhoneConfigWithContext mocks base method
func (m *MockConnectAPI) UpdateUserPhoneConfigWithContext(arg0 context.Context, arg1 *connect.UpdateUserPhoneConfigInput, arg2 ...request.Option) (*connect.UpdateUserPhoneConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPhoneConfigWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserPhoneConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPhoneConfigWithContext indicates an expected call of UpdateUserPhoneConfigWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserPhoneConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPhoneConfigWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserPhoneConfigWithContext), varargs...)
}

// UpdateUserRoutingProfile mocks base method
func (m *MockConnectAPI) UpdateUserRoutingProfile(arg0 *connect.UpdateUserRoutingProfileInput) (*connect.UpdateUserRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoutingProfile", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRoutingProfile indicates an expected call of UpdateUserRoutingProfile
func (mr *MockConnectAPIMockRecorder) UpdateUserRoutingProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoutingProfile", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserRoutingProfile), arg0)
}

// UpdateUserRoutingProfileRequest mocks base method
func (m *MockConnectAPI) UpdateUserRoutingProfileRequest(arg0 *connect.UpdateUserRoutingProfileInput) (*request.Request, *connect.UpdateUserRoutingProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoutingProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserRoutingProfileOutput)
	return ret0, ret1
}

// UpdateUserRoutingProfileRequest indicates an expected call of UpdateUserRoutingProfileRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserRoutingProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoutingProfileRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserRoutingProfileRequest), arg0)
}

// UpdateUserRoutingProfileWithContext mocks base method
func (m *MockConnectAPI) UpdateUserRoutingProfileWithContext(arg0 context.Context, arg1 *connect.UpdateUserRoutingProfileInput, arg2 ...request.Option) (*connect.UpdateUserRoutingProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserRoutingProfileWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserRoutingProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRoutingProfileWithContext indicates an expected call of UpdateUserRoutingProfileWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserRoutingProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoutingProfileWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserRoutingProfileWithContext), varargs...)
}

// UpdateUserSecurityProfiles mocks base method
func (m *MockConnectAPI) UpdateUserSecurityProfiles(arg0 *connect.UpdateUserSecurityProfilesInput) (*connect.UpdateUserSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSecurityProfiles", arg0)
	ret0, _ := ret[0].(*connect.UpdateUserSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSecurityProfiles indicates an expected call of UpdateUserSecurityProfiles
func (mr *MockConnectAPIMockRecorder) UpdateUserSecurityProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecurityProfiles", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserSecurityProfiles), arg0)
}

// UpdateUserSecurityProfilesRequest mocks base method
func (m *MockConnectAPI) UpdateUserSecurityProfilesRequest(arg0 *connect.UpdateUserSecurityProfilesInput) (*request.Request, *connect.UpdateUserSecurityProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSecurityProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connect.UpdateUserSecurityProfilesOutput)
	return ret0, ret1
}

// UpdateUserSecurityProfilesRequest indicates an expected call of UpdateUserSecurityProfilesRequest
func (mr *MockConnectAPIMockRecorder) UpdateUserSecurityProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecurityProfilesRequest", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserSecurityProfilesRequest), arg0)
}

// UpdateUserSecurityProfilesWithContext mocks base method
func (m *MockConnectAPI) UpdateUserSecurityProfilesWithContext(arg0 context.Context, arg1 *connect.UpdateUserSecurityProfilesInput, arg2 ...request.Option) (*connect.UpdateUserSecurityProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserSecurityProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*connect.UpdateUserSecurityProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSecurityProfilesWithContext indicates an expected call of UpdateUserSecurityProfilesWithContext
func (mr *MockConnectAPIMockRecorder) UpdateUserSecurityProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecurityProfilesWithContext", reflect.TypeOf((*MockConnectAPI)(nil).UpdateUserSecurityProfilesWithContext), varargs...)
}

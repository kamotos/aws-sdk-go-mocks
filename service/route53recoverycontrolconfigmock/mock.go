// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/route53recoverycontrolconfig/route53recoverycontrolconfigiface (interfaces: Route53RecoveryControlConfigAPI)

// Package route53recoverycontrolconfigmock is a generated GoMock package.
package route53recoverycontrolconfigmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	route53recoverycontrolconfig "github.com/aws/aws-sdk-go/service/route53recoverycontrolconfig"
	gomock "github.com/golang/mock/gomock"
)

// MockRoute53RecoveryControlConfigAPI is a mock of Route53RecoveryControlConfigAPI interface.
type MockRoute53RecoveryControlConfigAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53RecoveryControlConfigAPIMockRecorder
}

// MockRoute53RecoveryControlConfigAPIMockRecorder is the mock recorder for MockRoute53RecoveryControlConfigAPI.
type MockRoute53RecoveryControlConfigAPIMockRecorder struct {
	mock *MockRoute53RecoveryControlConfigAPI
}

// NewMockRoute53RecoveryControlConfigAPI creates a new mock instance.
func NewMockRoute53RecoveryControlConfigAPI(ctrl *gomock.Controller) *MockRoute53RecoveryControlConfigAPI {
	mock := &MockRoute53RecoveryControlConfigAPI{ctrl: ctrl}
	mock.recorder = &MockRoute53RecoveryControlConfigAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute53RecoveryControlConfigAPI) EXPECT() *MockRoute53RecoveryControlConfigAPIMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateCluster(arg0 *route53recoverycontrolconfig.CreateClusterInput) (*route53recoverycontrolconfig.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateCluster), arg0)
}

// CreateClusterRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateClusterRequest(arg0 *route53recoverycontrolconfig.CreateClusterInput) (*request.Request, *route53recoverycontrolconfig.CreateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.CreateClusterOutput)
	return ret0, ret1
}

// CreateClusterRequest indicates an expected call of CreateClusterRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateClusterRequest), arg0)
}

// CreateClusterWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateClusterWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.CreateClusterInput, arg2 ...request.Option) (*route53recoverycontrolconfig.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterWithContext indicates an expected call of CreateClusterWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateClusterWithContext), varargs...)
}

// CreateControlPanel mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateControlPanel(arg0 *route53recoverycontrolconfig.CreateControlPanelInput) (*route53recoverycontrolconfig.CreateControlPanelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateControlPanel", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateControlPanel indicates an expected call of CreateControlPanel.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateControlPanel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateControlPanel", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateControlPanel), arg0)
}

// CreateControlPanelRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateControlPanelRequest(arg0 *route53recoverycontrolconfig.CreateControlPanelInput) (*request.Request, *route53recoverycontrolconfig.CreateControlPanelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateControlPanelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.CreateControlPanelOutput)
	return ret0, ret1
}

// CreateControlPanelRequest indicates an expected call of CreateControlPanelRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateControlPanelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateControlPanelRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateControlPanelRequest), arg0)
}

// CreateControlPanelWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateControlPanelWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.CreateControlPanelInput, arg2 ...request.Option) (*route53recoverycontrolconfig.CreateControlPanelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateControlPanelWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateControlPanelWithContext indicates an expected call of CreateControlPanelWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateControlPanelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateControlPanelWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateControlPanelWithContext), varargs...)
}

// CreateRoutingControl mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateRoutingControl(arg0 *route53recoverycontrolconfig.CreateRoutingControlInput) (*route53recoverycontrolconfig.CreateRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingControl", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutingControl indicates an expected call of CreateRoutingControl.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateRoutingControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingControl", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateRoutingControl), arg0)
}

// CreateRoutingControlRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateRoutingControlRequest(arg0 *route53recoverycontrolconfig.CreateRoutingControlInput) (*request.Request, *route53recoverycontrolconfig.CreateRoutingControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoutingControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.CreateRoutingControlOutput)
	return ret0, ret1
}

// CreateRoutingControlRequest indicates an expected call of CreateRoutingControlRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateRoutingControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingControlRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateRoutingControlRequest), arg0)
}

// CreateRoutingControlWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateRoutingControlWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.CreateRoutingControlInput, arg2 ...request.Option) (*route53recoverycontrolconfig.CreateRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoutingControlWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoutingControlWithContext indicates an expected call of CreateRoutingControlWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateRoutingControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoutingControlWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateRoutingControlWithContext), varargs...)
}

// CreateSafetyRule mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateSafetyRule(arg0 *route53recoverycontrolconfig.CreateSafetyRuleInput) (*route53recoverycontrolconfig.CreateSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSafetyRule", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSafetyRule indicates an expected call of CreateSafetyRule.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateSafetyRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSafetyRule", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateSafetyRule), arg0)
}

// CreateSafetyRuleRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateSafetyRuleRequest(arg0 *route53recoverycontrolconfig.CreateSafetyRuleInput) (*request.Request, *route53recoverycontrolconfig.CreateSafetyRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSafetyRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.CreateSafetyRuleOutput)
	return ret0, ret1
}

// CreateSafetyRuleRequest indicates an expected call of CreateSafetyRuleRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateSafetyRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSafetyRuleRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateSafetyRuleRequest), arg0)
}

// CreateSafetyRuleWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) CreateSafetyRuleWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.CreateSafetyRuleInput, arg2 ...request.Option) (*route53recoverycontrolconfig.CreateSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSafetyRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.CreateSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSafetyRuleWithContext indicates an expected call of CreateSafetyRuleWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) CreateSafetyRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSafetyRuleWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).CreateSafetyRuleWithContext), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteCluster(arg0 *route53recoverycontrolconfig.DeleteClusterInput) (*route53recoverycontrolconfig.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteCluster), arg0)
}

// DeleteClusterRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteClusterRequest(arg0 *route53recoverycontrolconfig.DeleteClusterInput) (*request.Request, *route53recoverycontrolconfig.DeleteClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DeleteClusterOutput)
	return ret0, ret1
}

// DeleteClusterRequest indicates an expected call of DeleteClusterRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteClusterRequest), arg0)
}

// DeleteClusterWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteClusterWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DeleteClusterInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterWithContext indicates an expected call of DeleteClusterWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteClusterWithContext), varargs...)
}

// DeleteControlPanel mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteControlPanel(arg0 *route53recoverycontrolconfig.DeleteControlPanelInput) (*route53recoverycontrolconfig.DeleteControlPanelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteControlPanel", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteControlPanel indicates an expected call of DeleteControlPanel.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteControlPanel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteControlPanel", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteControlPanel), arg0)
}

// DeleteControlPanelRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteControlPanelRequest(arg0 *route53recoverycontrolconfig.DeleteControlPanelInput) (*request.Request, *route53recoverycontrolconfig.DeleteControlPanelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteControlPanelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DeleteControlPanelOutput)
	return ret0, ret1
}

// DeleteControlPanelRequest indicates an expected call of DeleteControlPanelRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteControlPanelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteControlPanelRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteControlPanelRequest), arg0)
}

// DeleteControlPanelWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteControlPanelWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DeleteControlPanelInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DeleteControlPanelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteControlPanelWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteControlPanelWithContext indicates an expected call of DeleteControlPanelWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteControlPanelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteControlPanelWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteControlPanelWithContext), varargs...)
}

// DeleteRoutingControl mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteRoutingControl(arg0 *route53recoverycontrolconfig.DeleteRoutingControlInput) (*route53recoverycontrolconfig.DeleteRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutingControl", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoutingControl indicates an expected call of DeleteRoutingControl.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteRoutingControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutingControl", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteRoutingControl), arg0)
}

// DeleteRoutingControlRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteRoutingControlRequest(arg0 *route53recoverycontrolconfig.DeleteRoutingControlInput) (*request.Request, *route53recoverycontrolconfig.DeleteRoutingControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoutingControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DeleteRoutingControlOutput)
	return ret0, ret1
}

// DeleteRoutingControlRequest indicates an expected call of DeleteRoutingControlRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteRoutingControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutingControlRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteRoutingControlRequest), arg0)
}

// DeleteRoutingControlWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteRoutingControlWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DeleteRoutingControlInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DeleteRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoutingControlWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoutingControlWithContext indicates an expected call of DeleteRoutingControlWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteRoutingControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoutingControlWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteRoutingControlWithContext), varargs...)
}

// DeleteSafetyRule mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteSafetyRule(arg0 *route53recoverycontrolconfig.DeleteSafetyRuleInput) (*route53recoverycontrolconfig.DeleteSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSafetyRule", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSafetyRule indicates an expected call of DeleteSafetyRule.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteSafetyRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSafetyRule", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteSafetyRule), arg0)
}

// DeleteSafetyRuleRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteSafetyRuleRequest(arg0 *route53recoverycontrolconfig.DeleteSafetyRuleInput) (*request.Request, *route53recoverycontrolconfig.DeleteSafetyRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSafetyRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DeleteSafetyRuleOutput)
	return ret0, ret1
}

// DeleteSafetyRuleRequest indicates an expected call of DeleteSafetyRuleRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteSafetyRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSafetyRuleRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteSafetyRuleRequest), arg0)
}

// DeleteSafetyRuleWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DeleteSafetyRuleWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DeleteSafetyRuleInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DeleteSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSafetyRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DeleteSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSafetyRuleWithContext indicates an expected call of DeleteSafetyRuleWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DeleteSafetyRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSafetyRuleWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DeleteSafetyRuleWithContext), varargs...)
}

// DescribeCluster mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeCluster(arg0 *route53recoverycontrolconfig.DescribeClusterInput) (*route53recoverycontrolconfig.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCluster", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCluster indicates an expected call of DescribeCluster.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCluster", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeCluster), arg0)
}

// DescribeClusterRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeClusterRequest(arg0 *route53recoverycontrolconfig.DescribeClusterInput) (*request.Request, *route53recoverycontrolconfig.DescribeClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DescribeClusterOutput)
	return ret0, ret1
}

// DescribeClusterRequest indicates an expected call of DescribeClusterRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeClusterRequest), arg0)
}

// DescribeClusterWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeClusterWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeClusterInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterWithContext indicates an expected call of DescribeClusterWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeClusterWithContext), varargs...)
}

// DescribeControlPanel mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeControlPanel(arg0 *route53recoverycontrolconfig.DescribeControlPanelInput) (*route53recoverycontrolconfig.DescribeControlPanelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeControlPanel", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeControlPanel indicates an expected call of DescribeControlPanel.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeControlPanel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeControlPanel", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeControlPanel), arg0)
}

// DescribeControlPanelRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeControlPanelRequest(arg0 *route53recoverycontrolconfig.DescribeControlPanelInput) (*request.Request, *route53recoverycontrolconfig.DescribeControlPanelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeControlPanelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DescribeControlPanelOutput)
	return ret0, ret1
}

// DescribeControlPanelRequest indicates an expected call of DescribeControlPanelRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeControlPanelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeControlPanelRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeControlPanelRequest), arg0)
}

// DescribeControlPanelWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeControlPanelWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeControlPanelInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DescribeControlPanelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeControlPanelWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeControlPanelWithContext indicates an expected call of DescribeControlPanelWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeControlPanelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeControlPanelWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeControlPanelWithContext), varargs...)
}

// DescribeRoutingControl mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeRoutingControl(arg0 *route53recoverycontrolconfig.DescribeRoutingControlInput) (*route53recoverycontrolconfig.DescribeRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoutingControl", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoutingControl indicates an expected call of DescribeRoutingControl.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeRoutingControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingControl", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeRoutingControl), arg0)
}

// DescribeRoutingControlRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeRoutingControlRequest(arg0 *route53recoverycontrolconfig.DescribeRoutingControlInput) (*request.Request, *route53recoverycontrolconfig.DescribeRoutingControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRoutingControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DescribeRoutingControlOutput)
	return ret0, ret1
}

// DescribeRoutingControlRequest indicates an expected call of DescribeRoutingControlRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeRoutingControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingControlRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeRoutingControlRequest), arg0)
}

// DescribeRoutingControlWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeRoutingControlWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeRoutingControlInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DescribeRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRoutingControlWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRoutingControlWithContext indicates an expected call of DescribeRoutingControlWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeRoutingControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRoutingControlWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeRoutingControlWithContext), varargs...)
}

// DescribeSafetyRule mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeSafetyRule(arg0 *route53recoverycontrolconfig.DescribeSafetyRuleInput) (*route53recoverycontrolconfig.DescribeSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSafetyRule", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSafetyRule indicates an expected call of DescribeSafetyRule.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeSafetyRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSafetyRule", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeSafetyRule), arg0)
}

// DescribeSafetyRuleRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeSafetyRuleRequest(arg0 *route53recoverycontrolconfig.DescribeSafetyRuleInput) (*request.Request, *route53recoverycontrolconfig.DescribeSafetyRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSafetyRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.DescribeSafetyRuleOutput)
	return ret0, ret1
}

// DescribeSafetyRuleRequest indicates an expected call of DescribeSafetyRuleRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeSafetyRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSafetyRuleRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeSafetyRuleRequest), arg0)
}

// DescribeSafetyRuleWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) DescribeSafetyRuleWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeSafetyRuleInput, arg2 ...request.Option) (*route53recoverycontrolconfig.DescribeSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSafetyRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.DescribeSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSafetyRuleWithContext indicates an expected call of DescribeSafetyRuleWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) DescribeSafetyRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSafetyRuleWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).DescribeSafetyRuleWithContext), varargs...)
}

// ListAssociatedRoute53HealthChecks mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListAssociatedRoute53HealthChecks(arg0 *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput) (*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedRoute53HealthChecks", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedRoute53HealthChecks indicates an expected call of ListAssociatedRoute53HealthChecks.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListAssociatedRoute53HealthChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedRoute53HealthChecks", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListAssociatedRoute53HealthChecks), arg0)
}

// ListAssociatedRoute53HealthChecksPages mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListAssociatedRoute53HealthChecksPages(arg0 *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, arg1 func(*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedRoute53HealthChecksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedRoute53HealthChecksPages indicates an expected call of ListAssociatedRoute53HealthChecksPages.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListAssociatedRoute53HealthChecksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedRoute53HealthChecksPages", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListAssociatedRoute53HealthChecksPages), arg0, arg1)
}

// ListAssociatedRoute53HealthChecksPagesWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListAssociatedRoute53HealthChecksPagesWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, arg2 func(*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedRoute53HealthChecksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedRoute53HealthChecksPagesWithContext indicates an expected call of ListAssociatedRoute53HealthChecksPagesWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListAssociatedRoute53HealthChecksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedRoute53HealthChecksPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListAssociatedRoute53HealthChecksPagesWithContext), varargs...)
}

// ListAssociatedRoute53HealthChecksRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListAssociatedRoute53HealthChecksRequest(arg0 *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput) (*request.Request, *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedRoute53HealthChecksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput)
	return ret0, ret1
}

// ListAssociatedRoute53HealthChecksRequest indicates an expected call of ListAssociatedRoute53HealthChecksRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListAssociatedRoute53HealthChecksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedRoute53HealthChecksRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListAssociatedRoute53HealthChecksRequest), arg0)
}

// ListAssociatedRoute53HealthChecksWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListAssociatedRoute53HealthChecksWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, arg2 ...request.Option) (*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedRoute53HealthChecksWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedRoute53HealthChecksWithContext indicates an expected call of ListAssociatedRoute53HealthChecksWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListAssociatedRoute53HealthChecksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedRoute53HealthChecksWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListAssociatedRoute53HealthChecksWithContext), varargs...)
}

// ListClusters mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListClusters(arg0 *route53recoverycontrolconfig.ListClustersInput) (*route53recoverycontrolconfig.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListClusters), arg0)
}

// ListClustersPages mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListClustersPages(arg0 *route53recoverycontrolconfig.ListClustersInput, arg1 func(*route53recoverycontrolconfig.ListClustersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersPages indicates an expected call of ListClustersPages.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListClustersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersPages", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListClustersPages), arg0, arg1)
}

// ListClustersPagesWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListClustersPagesWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListClustersInput, arg2 func(*route53recoverycontrolconfig.ListClustersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersPagesWithContext indicates an expected call of ListClustersPagesWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListClustersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListClustersPagesWithContext), varargs...)
}

// ListClustersRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListClustersRequest(arg0 *route53recoverycontrolconfig.ListClustersInput) (*request.Request, *route53recoverycontrolconfig.ListClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.ListClustersOutput)
	return ret0, ret1
}

// ListClustersRequest indicates an expected call of ListClustersRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListClustersRequest), arg0)
}

// ListClustersWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListClustersWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListClustersInput, arg2 ...request.Option) (*route53recoverycontrolconfig.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersWithContext indicates an expected call of ListClustersWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListClustersWithContext), varargs...)
}

// ListControlPanels mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListControlPanels(arg0 *route53recoverycontrolconfig.ListControlPanelsInput) (*route53recoverycontrolconfig.ListControlPanelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlPanels", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListControlPanelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlPanels indicates an expected call of ListControlPanels.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListControlPanels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlPanels", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListControlPanels), arg0)
}

// ListControlPanelsPages mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListControlPanelsPages(arg0 *route53recoverycontrolconfig.ListControlPanelsInput, arg1 func(*route53recoverycontrolconfig.ListControlPanelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlPanelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlPanelsPages indicates an expected call of ListControlPanelsPages.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListControlPanelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlPanelsPages", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListControlPanelsPages), arg0, arg1)
}

// ListControlPanelsPagesWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListControlPanelsPagesWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListControlPanelsInput, arg2 func(*route53recoverycontrolconfig.ListControlPanelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlPanelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlPanelsPagesWithContext indicates an expected call of ListControlPanelsPagesWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListControlPanelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlPanelsPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListControlPanelsPagesWithContext), varargs...)
}

// ListControlPanelsRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListControlPanelsRequest(arg0 *route53recoverycontrolconfig.ListControlPanelsInput) (*request.Request, *route53recoverycontrolconfig.ListControlPanelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlPanelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.ListControlPanelsOutput)
	return ret0, ret1
}

// ListControlPanelsRequest indicates an expected call of ListControlPanelsRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListControlPanelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlPanelsRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListControlPanelsRequest), arg0)
}

// ListControlPanelsWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListControlPanelsWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListControlPanelsInput, arg2 ...request.Option) (*route53recoverycontrolconfig.ListControlPanelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlPanelsWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListControlPanelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlPanelsWithContext indicates an expected call of ListControlPanelsWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListControlPanelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlPanelsWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListControlPanelsWithContext), varargs...)
}

// ListRoutingControls mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListRoutingControls(arg0 *route53recoverycontrolconfig.ListRoutingControlsInput) (*route53recoverycontrolconfig.ListRoutingControlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingControls", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListRoutingControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingControls indicates an expected call of ListRoutingControls.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListRoutingControls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingControls", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListRoutingControls), arg0)
}

// ListRoutingControlsPages mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListRoutingControlsPages(arg0 *route53recoverycontrolconfig.ListRoutingControlsInput, arg1 func(*route53recoverycontrolconfig.ListRoutingControlsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingControlsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingControlsPages indicates an expected call of ListRoutingControlsPages.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListRoutingControlsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingControlsPages", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListRoutingControlsPages), arg0, arg1)
}

// ListRoutingControlsPagesWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListRoutingControlsPagesWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListRoutingControlsInput, arg2 func(*route53recoverycontrolconfig.ListRoutingControlsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingControlsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutingControlsPagesWithContext indicates an expected call of ListRoutingControlsPagesWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListRoutingControlsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingControlsPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListRoutingControlsPagesWithContext), varargs...)
}

// ListRoutingControlsRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListRoutingControlsRequest(arg0 *route53recoverycontrolconfig.ListRoutingControlsInput) (*request.Request, *route53recoverycontrolconfig.ListRoutingControlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutingControlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.ListRoutingControlsOutput)
	return ret0, ret1
}

// ListRoutingControlsRequest indicates an expected call of ListRoutingControlsRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListRoutingControlsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingControlsRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListRoutingControlsRequest), arg0)
}

// ListRoutingControlsWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListRoutingControlsWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListRoutingControlsInput, arg2 ...request.Option) (*route53recoverycontrolconfig.ListRoutingControlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutingControlsWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListRoutingControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutingControlsWithContext indicates an expected call of ListRoutingControlsWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListRoutingControlsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutingControlsWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListRoutingControlsWithContext), varargs...)
}

// ListSafetyRules mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListSafetyRules(arg0 *route53recoverycontrolconfig.ListSafetyRulesInput) (*route53recoverycontrolconfig.ListSafetyRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSafetyRules", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListSafetyRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSafetyRules indicates an expected call of ListSafetyRules.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListSafetyRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSafetyRules", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListSafetyRules), arg0)
}

// ListSafetyRulesPages mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListSafetyRulesPages(arg0 *route53recoverycontrolconfig.ListSafetyRulesInput, arg1 func(*route53recoverycontrolconfig.ListSafetyRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSafetyRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSafetyRulesPages indicates an expected call of ListSafetyRulesPages.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListSafetyRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSafetyRulesPages", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListSafetyRulesPages), arg0, arg1)
}

// ListSafetyRulesPagesWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListSafetyRulesPagesWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListSafetyRulesInput, arg2 func(*route53recoverycontrolconfig.ListSafetyRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSafetyRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSafetyRulesPagesWithContext indicates an expected call of ListSafetyRulesPagesWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListSafetyRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSafetyRulesPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListSafetyRulesPagesWithContext), varargs...)
}

// ListSafetyRulesRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListSafetyRulesRequest(arg0 *route53recoverycontrolconfig.ListSafetyRulesInput) (*request.Request, *route53recoverycontrolconfig.ListSafetyRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSafetyRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.ListSafetyRulesOutput)
	return ret0, ret1
}

// ListSafetyRulesRequest indicates an expected call of ListSafetyRulesRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListSafetyRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSafetyRulesRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListSafetyRulesRequest), arg0)
}

// ListSafetyRulesWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListSafetyRulesWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListSafetyRulesInput, arg2 ...request.Option) (*route53recoverycontrolconfig.ListSafetyRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSafetyRulesWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListSafetyRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSafetyRulesWithContext indicates an expected call of ListSafetyRulesWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListSafetyRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSafetyRulesWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListSafetyRulesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListTagsForResource(arg0 *route53recoverycontrolconfig.ListTagsForResourceInput) (*route53recoverycontrolconfig.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListTagsForResourceRequest(arg0 *route53recoverycontrolconfig.ListTagsForResourceInput) (*request.Request, *route53recoverycontrolconfig.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.ListTagsForResourceInput, arg2 ...request.Option) (*route53recoverycontrolconfig.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) TagResource(arg0 *route53recoverycontrolconfig.TagResourceInput) (*route53recoverycontrolconfig.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) TagResourceRequest(arg0 *route53recoverycontrolconfig.TagResourceInput) (*request.Request, *route53recoverycontrolconfig.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) TagResourceWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.TagResourceInput, arg2 ...request.Option) (*route53recoverycontrolconfig.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UntagResource(arg0 *route53recoverycontrolconfig.UntagResourceInput) (*route53recoverycontrolconfig.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UntagResourceRequest(arg0 *route53recoverycontrolconfig.UntagResourceInput) (*request.Request, *route53recoverycontrolconfig.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UntagResourceWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.UntagResourceInput, arg2 ...request.Option) (*route53recoverycontrolconfig.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateControlPanel mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateControlPanel(arg0 *route53recoverycontrolconfig.UpdateControlPanelInput) (*route53recoverycontrolconfig.UpdateControlPanelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateControlPanel", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UpdateControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateControlPanel indicates an expected call of UpdateControlPanel.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateControlPanel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControlPanel", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateControlPanel), arg0)
}

// UpdateControlPanelRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateControlPanelRequest(arg0 *route53recoverycontrolconfig.UpdateControlPanelInput) (*request.Request, *route53recoverycontrolconfig.UpdateControlPanelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateControlPanelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.UpdateControlPanelOutput)
	return ret0, ret1
}

// UpdateControlPanelRequest indicates an expected call of UpdateControlPanelRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateControlPanelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControlPanelRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateControlPanelRequest), arg0)
}

// UpdateControlPanelWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateControlPanelWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.UpdateControlPanelInput, arg2 ...request.Option) (*route53recoverycontrolconfig.UpdateControlPanelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateControlPanelWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UpdateControlPanelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateControlPanelWithContext indicates an expected call of UpdateControlPanelWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateControlPanelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControlPanelWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateControlPanelWithContext), varargs...)
}

// UpdateRoutingControl mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateRoutingControl(arg0 *route53recoverycontrolconfig.UpdateRoutingControlInput) (*route53recoverycontrolconfig.UpdateRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingControl", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UpdateRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingControl indicates an expected call of UpdateRoutingControl.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateRoutingControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingControl", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateRoutingControl), arg0)
}

// UpdateRoutingControlRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateRoutingControlRequest(arg0 *route53recoverycontrolconfig.UpdateRoutingControlInput) (*request.Request, *route53recoverycontrolconfig.UpdateRoutingControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutingControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.UpdateRoutingControlOutput)
	return ret0, ret1
}

// UpdateRoutingControlRequest indicates an expected call of UpdateRoutingControlRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateRoutingControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingControlRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateRoutingControlRequest), arg0)
}

// UpdateRoutingControlWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateRoutingControlWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.UpdateRoutingControlInput, arg2 ...request.Option) (*route53recoverycontrolconfig.UpdateRoutingControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoutingControlWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UpdateRoutingControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutingControlWithContext indicates an expected call of UpdateRoutingControlWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateRoutingControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutingControlWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateRoutingControlWithContext), varargs...)
}

// UpdateSafetyRule mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateSafetyRule(arg0 *route53recoverycontrolconfig.UpdateSafetyRuleInput) (*route53recoverycontrolconfig.UpdateSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSafetyRule", arg0)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UpdateSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSafetyRule indicates an expected call of UpdateSafetyRule.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateSafetyRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSafetyRule", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateSafetyRule), arg0)
}

// UpdateSafetyRuleRequest mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateSafetyRuleRequest(arg0 *route53recoverycontrolconfig.UpdateSafetyRuleInput) (*request.Request, *route53recoverycontrolconfig.UpdateSafetyRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSafetyRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoverycontrolconfig.UpdateSafetyRuleOutput)
	return ret0, ret1
}

// UpdateSafetyRuleRequest indicates an expected call of UpdateSafetyRuleRequest.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateSafetyRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSafetyRuleRequest", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateSafetyRuleRequest), arg0)
}

// UpdateSafetyRuleWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) UpdateSafetyRuleWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.UpdateSafetyRuleInput, arg2 ...request.Option) (*route53recoverycontrolconfig.UpdateSafetyRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSafetyRuleWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoverycontrolconfig.UpdateSafetyRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSafetyRuleWithContext indicates an expected call of UpdateSafetyRuleWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) UpdateSafetyRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSafetyRuleWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).UpdateSafetyRuleWithContext), varargs...)
}

// WaitUntilClusterCreated mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilClusterCreated(arg0 *route53recoverycontrolconfig.DescribeClusterInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilClusterCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilClusterCreated indicates an expected call of WaitUntilClusterCreated.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilClusterCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilClusterCreated", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilClusterCreated), arg0)
}

// WaitUntilClusterCreatedWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilClusterCreatedWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeClusterInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilClusterCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilClusterCreatedWithContext indicates an expected call of WaitUntilClusterCreatedWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilClusterCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilClusterCreatedWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilClusterCreatedWithContext), varargs...)
}

// WaitUntilClusterDeleted mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilClusterDeleted(arg0 *route53recoverycontrolconfig.DescribeClusterInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilClusterDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilClusterDeleted indicates an expected call of WaitUntilClusterDeleted.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilClusterDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilClusterDeleted", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilClusterDeleted), arg0)
}

// WaitUntilClusterDeletedWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilClusterDeletedWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeClusterInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilClusterDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilClusterDeletedWithContext indicates an expected call of WaitUntilClusterDeletedWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilClusterDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilClusterDeletedWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilClusterDeletedWithContext), varargs...)
}

// WaitUntilControlPanelCreated mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilControlPanelCreated(arg0 *route53recoverycontrolconfig.DescribeControlPanelInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilControlPanelCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilControlPanelCreated indicates an expected call of WaitUntilControlPanelCreated.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilControlPanelCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilControlPanelCreated", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilControlPanelCreated), arg0)
}

// WaitUntilControlPanelCreatedWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilControlPanelCreatedWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeControlPanelInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilControlPanelCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilControlPanelCreatedWithContext indicates an expected call of WaitUntilControlPanelCreatedWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilControlPanelCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilControlPanelCreatedWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilControlPanelCreatedWithContext), varargs...)
}

// WaitUntilControlPanelDeleted mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilControlPanelDeleted(arg0 *route53recoverycontrolconfig.DescribeControlPanelInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilControlPanelDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilControlPanelDeleted indicates an expected call of WaitUntilControlPanelDeleted.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilControlPanelDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilControlPanelDeleted", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilControlPanelDeleted), arg0)
}

// WaitUntilControlPanelDeletedWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilControlPanelDeletedWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeControlPanelInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilControlPanelDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilControlPanelDeletedWithContext indicates an expected call of WaitUntilControlPanelDeletedWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilControlPanelDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilControlPanelDeletedWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilControlPanelDeletedWithContext), varargs...)
}

// WaitUntilRoutingControlCreated mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilRoutingControlCreated(arg0 *route53recoverycontrolconfig.DescribeRoutingControlInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilRoutingControlCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRoutingControlCreated indicates an expected call of WaitUntilRoutingControlCreated.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilRoutingControlCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRoutingControlCreated", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilRoutingControlCreated), arg0)
}

// WaitUntilRoutingControlCreatedWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilRoutingControlCreatedWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeRoutingControlInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilRoutingControlCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRoutingControlCreatedWithContext indicates an expected call of WaitUntilRoutingControlCreatedWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilRoutingControlCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRoutingControlCreatedWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilRoutingControlCreatedWithContext), varargs...)
}

// WaitUntilRoutingControlDeleted mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilRoutingControlDeleted(arg0 *route53recoverycontrolconfig.DescribeRoutingControlInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilRoutingControlDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRoutingControlDeleted indicates an expected call of WaitUntilRoutingControlDeleted.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilRoutingControlDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRoutingControlDeleted", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilRoutingControlDeleted), arg0)
}

// WaitUntilRoutingControlDeletedWithContext mocks base method.
func (m *MockRoute53RecoveryControlConfigAPI) WaitUntilRoutingControlDeletedWithContext(arg0 context.Context, arg1 *route53recoverycontrolconfig.DescribeRoutingControlInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilRoutingControlDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilRoutingControlDeletedWithContext indicates an expected call of WaitUntilRoutingControlDeletedWithContext.
func (mr *MockRoute53RecoveryControlConfigAPIMockRecorder) WaitUntilRoutingControlDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilRoutingControlDeletedWithContext", reflect.TypeOf((*MockRoute53RecoveryControlConfigAPI)(nil).WaitUntilRoutingControlDeletedWithContext), varargs...)
}

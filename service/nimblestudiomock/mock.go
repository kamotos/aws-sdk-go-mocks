// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/nimblestudio/nimblestudioiface (interfaces: NimbleStudioAPI)

// Package nimblestudiomock is a generated GoMock package.
package nimblestudiomock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	nimblestudio "github.com/aws/aws-sdk-go/service/nimblestudio"
	gomock "github.com/golang/mock/gomock"
)

// MockNimbleStudioAPI is a mock of NimbleStudioAPI interface.
type MockNimbleStudioAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNimbleStudioAPIMockRecorder
}

// MockNimbleStudioAPIMockRecorder is the mock recorder for MockNimbleStudioAPI.
type MockNimbleStudioAPIMockRecorder struct {
	mock *MockNimbleStudioAPI
}

// NewMockNimbleStudioAPI creates a new mock instance.
func NewMockNimbleStudioAPI(ctrl *gomock.Controller) *MockNimbleStudioAPI {
	mock := &MockNimbleStudioAPI{ctrl: ctrl}
	mock.recorder = &MockNimbleStudioAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNimbleStudioAPI) EXPECT() *MockNimbleStudioAPIMockRecorder {
	return m.recorder
}

// AcceptEulas mocks base method.
func (m *MockNimbleStudioAPI) AcceptEulas(arg0 *nimblestudio.AcceptEulasInput) (*nimblestudio.AcceptEulasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptEulas", arg0)
	ret0, _ := ret[0].(*nimblestudio.AcceptEulasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptEulas indicates an expected call of AcceptEulas.
func (mr *MockNimbleStudioAPIMockRecorder) AcceptEulas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEulas", reflect.TypeOf((*MockNimbleStudioAPI)(nil).AcceptEulas), arg0)
}

// AcceptEulasRequest mocks base method.
func (m *MockNimbleStudioAPI) AcceptEulasRequest(arg0 *nimblestudio.AcceptEulasInput) (*request.Request, *nimblestudio.AcceptEulasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptEulasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.AcceptEulasOutput)
	return ret0, ret1
}

// AcceptEulasRequest indicates an expected call of AcceptEulasRequest.
func (mr *MockNimbleStudioAPIMockRecorder) AcceptEulasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEulasRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).AcceptEulasRequest), arg0)
}

// AcceptEulasWithContext mocks base method.
func (m *MockNimbleStudioAPI) AcceptEulasWithContext(arg0 context.Context, arg1 *nimblestudio.AcceptEulasInput, arg2 ...request.Option) (*nimblestudio.AcceptEulasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptEulasWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.AcceptEulasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptEulasWithContext indicates an expected call of AcceptEulasWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) AcceptEulasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEulasWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).AcceptEulasWithContext), varargs...)
}

// CreateLaunchProfile mocks base method.
func (m *MockNimbleStudioAPI) CreateLaunchProfile(arg0 *nimblestudio.CreateLaunchProfileInput) (*nimblestudio.CreateLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunchProfile", arg0)
	ret0, _ := ret[0].(*nimblestudio.CreateLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchProfile indicates an expected call of CreateLaunchProfile.
func (mr *MockNimbleStudioAPIMockRecorder) CreateLaunchProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchProfile", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateLaunchProfile), arg0)
}

// CreateLaunchProfileRequest mocks base method.
func (m *MockNimbleStudioAPI) CreateLaunchProfileRequest(arg0 *nimblestudio.CreateLaunchProfileInput) (*request.Request, *nimblestudio.CreateLaunchProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunchProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.CreateLaunchProfileOutput)
	return ret0, ret1
}

// CreateLaunchProfileRequest indicates an expected call of CreateLaunchProfileRequest.
func (mr *MockNimbleStudioAPIMockRecorder) CreateLaunchProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchProfileRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateLaunchProfileRequest), arg0)
}

// CreateLaunchProfileWithContext mocks base method.
func (m *MockNimbleStudioAPI) CreateLaunchProfileWithContext(arg0 context.Context, arg1 *nimblestudio.CreateLaunchProfileInput, arg2 ...request.Option) (*nimblestudio.CreateLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLaunchProfileWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.CreateLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchProfileWithContext indicates an expected call of CreateLaunchProfileWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) CreateLaunchProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchProfileWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateLaunchProfileWithContext), varargs...)
}

// CreateStreamingImage mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingImage(arg0 *nimblestudio.CreateStreamingImageInput) (*nimblestudio.CreateStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingImage", arg0)
	ret0, _ := ret[0].(*nimblestudio.CreateStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingImage indicates an expected call of CreateStreamingImage.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingImage", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingImage), arg0)
}

// CreateStreamingImageRequest mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingImageRequest(arg0 *nimblestudio.CreateStreamingImageInput) (*request.Request, *nimblestudio.CreateStreamingImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.CreateStreamingImageOutput)
	return ret0, ret1
}

// CreateStreamingImageRequest indicates an expected call of CreateStreamingImageRequest.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingImageRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingImageRequest), arg0)
}

// CreateStreamingImageWithContext mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingImageWithContext(arg0 context.Context, arg1 *nimblestudio.CreateStreamingImageInput, arg2 ...request.Option) (*nimblestudio.CreateStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingImageWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.CreateStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingImageWithContext indicates an expected call of CreateStreamingImageWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingImageWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingImageWithContext), varargs...)
}

// CreateStreamingSession mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingSession(arg0 *nimblestudio.CreateStreamingSessionInput) (*nimblestudio.CreateStreamingSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingSession", arg0)
	ret0, _ := ret[0].(*nimblestudio.CreateStreamingSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingSession indicates an expected call of CreateStreamingSession.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingSession", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingSession), arg0)
}

// CreateStreamingSessionRequest mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingSessionRequest(arg0 *nimblestudio.CreateStreamingSessionInput) (*request.Request, *nimblestudio.CreateStreamingSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.CreateStreamingSessionOutput)
	return ret0, ret1
}

// CreateStreamingSessionRequest indicates an expected call of CreateStreamingSessionRequest.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingSessionRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingSessionRequest), arg0)
}

// CreateStreamingSessionStream mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingSessionStream(arg0 *nimblestudio.CreateStreamingSessionStreamInput) (*nimblestudio.CreateStreamingSessionStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingSessionStream", arg0)
	ret0, _ := ret[0].(*nimblestudio.CreateStreamingSessionStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingSessionStream indicates an expected call of CreateStreamingSessionStream.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingSessionStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingSessionStream", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingSessionStream), arg0)
}

// CreateStreamingSessionStreamRequest mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingSessionStreamRequest(arg0 *nimblestudio.CreateStreamingSessionStreamInput) (*request.Request, *nimblestudio.CreateStreamingSessionStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingSessionStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.CreateStreamingSessionStreamOutput)
	return ret0, ret1
}

// CreateStreamingSessionStreamRequest indicates an expected call of CreateStreamingSessionStreamRequest.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingSessionStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingSessionStreamRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingSessionStreamRequest), arg0)
}

// CreateStreamingSessionStreamWithContext mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingSessionStreamWithContext(arg0 context.Context, arg1 *nimblestudio.CreateStreamingSessionStreamInput, arg2 ...request.Option) (*nimblestudio.CreateStreamingSessionStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingSessionStreamWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.CreateStreamingSessionStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingSessionStreamWithContext indicates an expected call of CreateStreamingSessionStreamWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingSessionStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingSessionStreamWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingSessionStreamWithContext), varargs...)
}

// CreateStreamingSessionWithContext mocks base method.
func (m *MockNimbleStudioAPI) CreateStreamingSessionWithContext(arg0 context.Context, arg1 *nimblestudio.CreateStreamingSessionInput, arg2 ...request.Option) (*nimblestudio.CreateStreamingSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingSessionWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.CreateStreamingSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingSessionWithContext indicates an expected call of CreateStreamingSessionWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStreamingSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingSessionWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStreamingSessionWithContext), varargs...)
}

// CreateStudio mocks base method.
func (m *MockNimbleStudioAPI) CreateStudio(arg0 *nimblestudio.CreateStudioInput) (*nimblestudio.CreateStudioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudio", arg0)
	ret0, _ := ret[0].(*nimblestudio.CreateStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudio indicates an expected call of CreateStudio.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStudio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudio", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStudio), arg0)
}

// CreateStudioComponent mocks base method.
func (m *MockNimbleStudioAPI) CreateStudioComponent(arg0 *nimblestudio.CreateStudioComponentInput) (*nimblestudio.CreateStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudioComponent", arg0)
	ret0, _ := ret[0].(*nimblestudio.CreateStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudioComponent indicates an expected call of CreateStudioComponent.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStudioComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudioComponent", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStudioComponent), arg0)
}

// CreateStudioComponentRequest mocks base method.
func (m *MockNimbleStudioAPI) CreateStudioComponentRequest(arg0 *nimblestudio.CreateStudioComponentInput) (*request.Request, *nimblestudio.CreateStudioComponentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudioComponentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.CreateStudioComponentOutput)
	return ret0, ret1
}

// CreateStudioComponentRequest indicates an expected call of CreateStudioComponentRequest.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStudioComponentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudioComponentRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStudioComponentRequest), arg0)
}

// CreateStudioComponentWithContext mocks base method.
func (m *MockNimbleStudioAPI) CreateStudioComponentWithContext(arg0 context.Context, arg1 *nimblestudio.CreateStudioComponentInput, arg2 ...request.Option) (*nimblestudio.CreateStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStudioComponentWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.CreateStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudioComponentWithContext indicates an expected call of CreateStudioComponentWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStudioComponentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudioComponentWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStudioComponentWithContext), varargs...)
}

// CreateStudioRequest mocks base method.
func (m *MockNimbleStudioAPI) CreateStudioRequest(arg0 *nimblestudio.CreateStudioInput) (*request.Request, *nimblestudio.CreateStudioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.CreateStudioOutput)
	return ret0, ret1
}

// CreateStudioRequest indicates an expected call of CreateStudioRequest.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStudioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudioRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStudioRequest), arg0)
}

// CreateStudioWithContext mocks base method.
func (m *MockNimbleStudioAPI) CreateStudioWithContext(arg0 context.Context, arg1 *nimblestudio.CreateStudioInput, arg2 ...request.Option) (*nimblestudio.CreateStudioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStudioWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.CreateStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudioWithContext indicates an expected call of CreateStudioWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) CreateStudioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudioWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).CreateStudioWithContext), varargs...)
}

// DeleteLaunchProfile mocks base method.
func (m *MockNimbleStudioAPI) DeleteLaunchProfile(arg0 *nimblestudio.DeleteLaunchProfileInput) (*nimblestudio.DeleteLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchProfile", arg0)
	ret0, _ := ret[0].(*nimblestudio.DeleteLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchProfile indicates an expected call of DeleteLaunchProfile.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteLaunchProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchProfile", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteLaunchProfile), arg0)
}

// DeleteLaunchProfileMember mocks base method.
func (m *MockNimbleStudioAPI) DeleteLaunchProfileMember(arg0 *nimblestudio.DeleteLaunchProfileMemberInput) (*nimblestudio.DeleteLaunchProfileMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchProfileMember", arg0)
	ret0, _ := ret[0].(*nimblestudio.DeleteLaunchProfileMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchProfileMember indicates an expected call of DeleteLaunchProfileMember.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteLaunchProfileMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchProfileMember", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteLaunchProfileMember), arg0)
}

// DeleteLaunchProfileMemberRequest mocks base method.
func (m *MockNimbleStudioAPI) DeleteLaunchProfileMemberRequest(arg0 *nimblestudio.DeleteLaunchProfileMemberInput) (*request.Request, *nimblestudio.DeleteLaunchProfileMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchProfileMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.DeleteLaunchProfileMemberOutput)
	return ret0, ret1
}

// DeleteLaunchProfileMemberRequest indicates an expected call of DeleteLaunchProfileMemberRequest.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteLaunchProfileMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchProfileMemberRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteLaunchProfileMemberRequest), arg0)
}

// DeleteLaunchProfileMemberWithContext mocks base method.
func (m *MockNimbleStudioAPI) DeleteLaunchProfileMemberWithContext(arg0 context.Context, arg1 *nimblestudio.DeleteLaunchProfileMemberInput, arg2 ...request.Option) (*nimblestudio.DeleteLaunchProfileMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLaunchProfileMemberWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.DeleteLaunchProfileMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchProfileMemberWithContext indicates an expected call of DeleteLaunchProfileMemberWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteLaunchProfileMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchProfileMemberWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteLaunchProfileMemberWithContext), varargs...)
}

// DeleteLaunchProfileRequest mocks base method.
func (m *MockNimbleStudioAPI) DeleteLaunchProfileRequest(arg0 *nimblestudio.DeleteLaunchProfileInput) (*request.Request, *nimblestudio.DeleteLaunchProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.DeleteLaunchProfileOutput)
	return ret0, ret1
}

// DeleteLaunchProfileRequest indicates an expected call of DeleteLaunchProfileRequest.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteLaunchProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchProfileRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteLaunchProfileRequest), arg0)
}

// DeleteLaunchProfileWithContext mocks base method.
func (m *MockNimbleStudioAPI) DeleteLaunchProfileWithContext(arg0 context.Context, arg1 *nimblestudio.DeleteLaunchProfileInput, arg2 ...request.Option) (*nimblestudio.DeleteLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLaunchProfileWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.DeleteLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchProfileWithContext indicates an expected call of DeleteLaunchProfileWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteLaunchProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchProfileWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteLaunchProfileWithContext), varargs...)
}

// DeleteStreamingImage mocks base method.
func (m *MockNimbleStudioAPI) DeleteStreamingImage(arg0 *nimblestudio.DeleteStreamingImageInput) (*nimblestudio.DeleteStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingImage", arg0)
	ret0, _ := ret[0].(*nimblestudio.DeleteStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingImage indicates an expected call of DeleteStreamingImage.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStreamingImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingImage", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStreamingImage), arg0)
}

// DeleteStreamingImageRequest mocks base method.
func (m *MockNimbleStudioAPI) DeleteStreamingImageRequest(arg0 *nimblestudio.DeleteStreamingImageInput) (*request.Request, *nimblestudio.DeleteStreamingImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.DeleteStreamingImageOutput)
	return ret0, ret1
}

// DeleteStreamingImageRequest indicates an expected call of DeleteStreamingImageRequest.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStreamingImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingImageRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStreamingImageRequest), arg0)
}

// DeleteStreamingImageWithContext mocks base method.
func (m *MockNimbleStudioAPI) DeleteStreamingImageWithContext(arg0 context.Context, arg1 *nimblestudio.DeleteStreamingImageInput, arg2 ...request.Option) (*nimblestudio.DeleteStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStreamingImageWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.DeleteStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingImageWithContext indicates an expected call of DeleteStreamingImageWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStreamingImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingImageWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStreamingImageWithContext), varargs...)
}

// DeleteStreamingSession mocks base method.
func (m *MockNimbleStudioAPI) DeleteStreamingSession(arg0 *nimblestudio.DeleteStreamingSessionInput) (*nimblestudio.DeleteStreamingSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingSession", arg0)
	ret0, _ := ret[0].(*nimblestudio.DeleteStreamingSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingSession indicates an expected call of DeleteStreamingSession.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStreamingSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingSession", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStreamingSession), arg0)
}

// DeleteStreamingSessionRequest mocks base method.
func (m *MockNimbleStudioAPI) DeleteStreamingSessionRequest(arg0 *nimblestudio.DeleteStreamingSessionInput) (*request.Request, *nimblestudio.DeleteStreamingSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.DeleteStreamingSessionOutput)
	return ret0, ret1
}

// DeleteStreamingSessionRequest indicates an expected call of DeleteStreamingSessionRequest.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStreamingSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingSessionRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStreamingSessionRequest), arg0)
}

// DeleteStreamingSessionWithContext mocks base method.
func (m *MockNimbleStudioAPI) DeleteStreamingSessionWithContext(arg0 context.Context, arg1 *nimblestudio.DeleteStreamingSessionInput, arg2 ...request.Option) (*nimblestudio.DeleteStreamingSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStreamingSessionWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.DeleteStreamingSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingSessionWithContext indicates an expected call of DeleteStreamingSessionWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStreamingSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingSessionWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStreamingSessionWithContext), varargs...)
}

// DeleteStudio mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudio(arg0 *nimblestudio.DeleteStudioInput) (*nimblestudio.DeleteStudioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudio", arg0)
	ret0, _ := ret[0].(*nimblestudio.DeleteStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudio indicates an expected call of DeleteStudio.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudio", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudio), arg0)
}

// DeleteStudioComponent mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioComponent(arg0 *nimblestudio.DeleteStudioComponentInput) (*nimblestudio.DeleteStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudioComponent", arg0)
	ret0, _ := ret[0].(*nimblestudio.DeleteStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudioComponent indicates an expected call of DeleteStudioComponent.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioComponent", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioComponent), arg0)
}

// DeleteStudioComponentRequest mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioComponentRequest(arg0 *nimblestudio.DeleteStudioComponentInput) (*request.Request, *nimblestudio.DeleteStudioComponentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudioComponentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.DeleteStudioComponentOutput)
	return ret0, ret1
}

// DeleteStudioComponentRequest indicates an expected call of DeleteStudioComponentRequest.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioComponentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioComponentRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioComponentRequest), arg0)
}

// DeleteStudioComponentWithContext mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioComponentWithContext(arg0 context.Context, arg1 *nimblestudio.DeleteStudioComponentInput, arg2 ...request.Option) (*nimblestudio.DeleteStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStudioComponentWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.DeleteStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudioComponentWithContext indicates an expected call of DeleteStudioComponentWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioComponentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioComponentWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioComponentWithContext), varargs...)
}

// DeleteStudioMember mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioMember(arg0 *nimblestudio.DeleteStudioMemberInput) (*nimblestudio.DeleteStudioMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudioMember", arg0)
	ret0, _ := ret[0].(*nimblestudio.DeleteStudioMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudioMember indicates an expected call of DeleteStudioMember.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioMember", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioMember), arg0)
}

// DeleteStudioMemberRequest mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioMemberRequest(arg0 *nimblestudio.DeleteStudioMemberInput) (*request.Request, *nimblestudio.DeleteStudioMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudioMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.DeleteStudioMemberOutput)
	return ret0, ret1
}

// DeleteStudioMemberRequest indicates an expected call of DeleteStudioMemberRequest.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioMemberRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioMemberRequest), arg0)
}

// DeleteStudioMemberWithContext mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioMemberWithContext(arg0 context.Context, arg1 *nimblestudio.DeleteStudioMemberInput, arg2 ...request.Option) (*nimblestudio.DeleteStudioMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStudioMemberWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.DeleteStudioMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudioMemberWithContext indicates an expected call of DeleteStudioMemberWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioMemberWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioMemberWithContext), varargs...)
}

// DeleteStudioRequest mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioRequest(arg0 *nimblestudio.DeleteStudioInput) (*request.Request, *nimblestudio.DeleteStudioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.DeleteStudioOutput)
	return ret0, ret1
}

// DeleteStudioRequest indicates an expected call of DeleteStudioRequest.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioRequest), arg0)
}

// DeleteStudioWithContext mocks base method.
func (m *MockNimbleStudioAPI) DeleteStudioWithContext(arg0 context.Context, arg1 *nimblestudio.DeleteStudioInput, arg2 ...request.Option) (*nimblestudio.DeleteStudioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStudioWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.DeleteStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudioWithContext indicates an expected call of DeleteStudioWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) DeleteStudioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudioWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).DeleteStudioWithContext), varargs...)
}

// GetEula mocks base method.
func (m *MockNimbleStudioAPI) GetEula(arg0 *nimblestudio.GetEulaInput) (*nimblestudio.GetEulaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEula", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetEulaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEula indicates an expected call of GetEula.
func (mr *MockNimbleStudioAPIMockRecorder) GetEula(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEula", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetEula), arg0)
}

// GetEulaRequest mocks base method.
func (m *MockNimbleStudioAPI) GetEulaRequest(arg0 *nimblestudio.GetEulaInput) (*request.Request, *nimblestudio.GetEulaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEulaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetEulaOutput)
	return ret0, ret1
}

// GetEulaRequest indicates an expected call of GetEulaRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetEulaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEulaRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetEulaRequest), arg0)
}

// GetEulaWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetEulaWithContext(arg0 context.Context, arg1 *nimblestudio.GetEulaInput, arg2 ...request.Option) (*nimblestudio.GetEulaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEulaWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetEulaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEulaWithContext indicates an expected call of GetEulaWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetEulaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEulaWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetEulaWithContext), varargs...)
}

// GetLaunchProfile mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfile(arg0 *nimblestudio.GetLaunchProfileInput) (*nimblestudio.GetLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfile", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfile indicates an expected call of GetLaunchProfile.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfile", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfile), arg0)
}

// GetLaunchProfileDetails mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileDetails(arg0 *nimblestudio.GetLaunchProfileDetailsInput) (*nimblestudio.GetLaunchProfileDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfileDetails", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfileDetails indicates an expected call of GetLaunchProfileDetails.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileDetails", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileDetails), arg0)
}

// GetLaunchProfileDetailsRequest mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileDetailsRequest(arg0 *nimblestudio.GetLaunchProfileDetailsInput) (*request.Request, *nimblestudio.GetLaunchProfileDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfileDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetLaunchProfileDetailsOutput)
	return ret0, ret1
}

// GetLaunchProfileDetailsRequest indicates an expected call of GetLaunchProfileDetailsRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileDetailsRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileDetailsRequest), arg0)
}

// GetLaunchProfileDetailsWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileDetailsWithContext(arg0 context.Context, arg1 *nimblestudio.GetLaunchProfileDetailsInput, arg2 ...request.Option) (*nimblestudio.GetLaunchProfileDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchProfileDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfileDetailsWithContext indicates an expected call of GetLaunchProfileDetailsWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileDetailsWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileDetailsWithContext), varargs...)
}

// GetLaunchProfileInitialization mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileInitialization(arg0 *nimblestudio.GetLaunchProfileInitializationInput) (*nimblestudio.GetLaunchProfileInitializationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfileInitialization", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileInitializationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfileInitialization indicates an expected call of GetLaunchProfileInitialization.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileInitialization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileInitialization", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileInitialization), arg0)
}

// GetLaunchProfileInitializationRequest mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileInitializationRequest(arg0 *nimblestudio.GetLaunchProfileInitializationInput) (*request.Request, *nimblestudio.GetLaunchProfileInitializationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfileInitializationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetLaunchProfileInitializationOutput)
	return ret0, ret1
}

// GetLaunchProfileInitializationRequest indicates an expected call of GetLaunchProfileInitializationRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileInitializationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileInitializationRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileInitializationRequest), arg0)
}

// GetLaunchProfileInitializationWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileInitializationWithContext(arg0 context.Context, arg1 *nimblestudio.GetLaunchProfileInitializationInput, arg2 ...request.Option) (*nimblestudio.GetLaunchProfileInitializationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchProfileInitializationWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileInitializationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfileInitializationWithContext indicates an expected call of GetLaunchProfileInitializationWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileInitializationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileInitializationWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileInitializationWithContext), varargs...)
}

// GetLaunchProfileMember mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileMember(arg0 *nimblestudio.GetLaunchProfileMemberInput) (*nimblestudio.GetLaunchProfileMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfileMember", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfileMember indicates an expected call of GetLaunchProfileMember.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileMember", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileMember), arg0)
}

// GetLaunchProfileMemberRequest mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileMemberRequest(arg0 *nimblestudio.GetLaunchProfileMemberInput) (*request.Request, *nimblestudio.GetLaunchProfileMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfileMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetLaunchProfileMemberOutput)
	return ret0, ret1
}

// GetLaunchProfileMemberRequest indicates an expected call of GetLaunchProfileMemberRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileMemberRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileMemberRequest), arg0)
}

// GetLaunchProfileMemberWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileMemberWithContext(arg0 context.Context, arg1 *nimblestudio.GetLaunchProfileMemberInput, arg2 ...request.Option) (*nimblestudio.GetLaunchProfileMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchProfileMemberWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfileMemberWithContext indicates an expected call of GetLaunchProfileMemberWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileMemberWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileMemberWithContext), varargs...)
}

// GetLaunchProfileRequest mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileRequest(arg0 *nimblestudio.GetLaunchProfileInput) (*request.Request, *nimblestudio.GetLaunchProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetLaunchProfileOutput)
	return ret0, ret1
}

// GetLaunchProfileRequest indicates an expected call of GetLaunchProfileRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileRequest), arg0)
}

// GetLaunchProfileWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetLaunchProfileWithContext(arg0 context.Context, arg1 *nimblestudio.GetLaunchProfileInput, arg2 ...request.Option) (*nimblestudio.GetLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchProfileWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchProfileWithContext indicates an expected call of GetLaunchProfileWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetLaunchProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchProfileWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetLaunchProfileWithContext), varargs...)
}

// GetStreamingImage mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingImage(arg0 *nimblestudio.GetStreamingImageInput) (*nimblestudio.GetStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingImage", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingImage indicates an expected call of GetStreamingImage.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingImage", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingImage), arg0)
}

// GetStreamingImageRequest mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingImageRequest(arg0 *nimblestudio.GetStreamingImageInput) (*request.Request, *nimblestudio.GetStreamingImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetStreamingImageOutput)
	return ret0, ret1
}

// GetStreamingImageRequest indicates an expected call of GetStreamingImageRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingImageRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingImageRequest), arg0)
}

// GetStreamingImageWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingImageWithContext(arg0 context.Context, arg1 *nimblestudio.GetStreamingImageInput, arg2 ...request.Option) (*nimblestudio.GetStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingImageWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingImageWithContext indicates an expected call of GetStreamingImageWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingImageWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingImageWithContext), varargs...)
}

// GetStreamingSession mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingSession(arg0 *nimblestudio.GetStreamingSessionInput) (*nimblestudio.GetStreamingSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingSession", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetStreamingSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingSession indicates an expected call of GetStreamingSession.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingSession", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingSession), arg0)
}

// GetStreamingSessionRequest mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingSessionRequest(arg0 *nimblestudio.GetStreamingSessionInput) (*request.Request, *nimblestudio.GetStreamingSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetStreamingSessionOutput)
	return ret0, ret1
}

// GetStreamingSessionRequest indicates an expected call of GetStreamingSessionRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingSessionRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingSessionRequest), arg0)
}

// GetStreamingSessionStream mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingSessionStream(arg0 *nimblestudio.GetStreamingSessionStreamInput) (*nimblestudio.GetStreamingSessionStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingSessionStream", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetStreamingSessionStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingSessionStream indicates an expected call of GetStreamingSessionStream.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingSessionStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingSessionStream", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingSessionStream), arg0)
}

// GetStreamingSessionStreamRequest mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingSessionStreamRequest(arg0 *nimblestudio.GetStreamingSessionStreamInput) (*request.Request, *nimblestudio.GetStreamingSessionStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingSessionStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetStreamingSessionStreamOutput)
	return ret0, ret1
}

// GetStreamingSessionStreamRequest indicates an expected call of GetStreamingSessionStreamRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingSessionStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingSessionStreamRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingSessionStreamRequest), arg0)
}

// GetStreamingSessionStreamWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingSessionStreamWithContext(arg0 context.Context, arg1 *nimblestudio.GetStreamingSessionStreamInput, arg2 ...request.Option) (*nimblestudio.GetStreamingSessionStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingSessionStreamWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetStreamingSessionStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingSessionStreamWithContext indicates an expected call of GetStreamingSessionStreamWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingSessionStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingSessionStreamWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingSessionStreamWithContext), varargs...)
}

// GetStreamingSessionWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetStreamingSessionWithContext(arg0 context.Context, arg1 *nimblestudio.GetStreamingSessionInput, arg2 ...request.Option) (*nimblestudio.GetStreamingSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingSessionWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetStreamingSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingSessionWithContext indicates an expected call of GetStreamingSessionWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetStreamingSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingSessionWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStreamingSessionWithContext), varargs...)
}

// GetStudio mocks base method.
func (m *MockNimbleStudioAPI) GetStudio(arg0 *nimblestudio.GetStudioInput) (*nimblestudio.GetStudioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudio", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudio indicates an expected call of GetStudio.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudio", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudio), arg0)
}

// GetStudioComponent mocks base method.
func (m *MockNimbleStudioAPI) GetStudioComponent(arg0 *nimblestudio.GetStudioComponentInput) (*nimblestudio.GetStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudioComponent", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudioComponent indicates an expected call of GetStudioComponent.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioComponent", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioComponent), arg0)
}

// GetStudioComponentRequest mocks base method.
func (m *MockNimbleStudioAPI) GetStudioComponentRequest(arg0 *nimblestudio.GetStudioComponentInput) (*request.Request, *nimblestudio.GetStudioComponentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudioComponentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetStudioComponentOutput)
	return ret0, ret1
}

// GetStudioComponentRequest indicates an expected call of GetStudioComponentRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioComponentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioComponentRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioComponentRequest), arg0)
}

// GetStudioComponentWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetStudioComponentWithContext(arg0 context.Context, arg1 *nimblestudio.GetStudioComponentInput, arg2 ...request.Option) (*nimblestudio.GetStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudioComponentWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudioComponentWithContext indicates an expected call of GetStudioComponentWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioComponentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioComponentWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioComponentWithContext), varargs...)
}

// GetStudioMember mocks base method.
func (m *MockNimbleStudioAPI) GetStudioMember(arg0 *nimblestudio.GetStudioMemberInput) (*nimblestudio.GetStudioMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudioMember", arg0)
	ret0, _ := ret[0].(*nimblestudio.GetStudioMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudioMember indicates an expected call of GetStudioMember.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioMember", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioMember), arg0)
}

// GetStudioMemberRequest mocks base method.
func (m *MockNimbleStudioAPI) GetStudioMemberRequest(arg0 *nimblestudio.GetStudioMemberInput) (*request.Request, *nimblestudio.GetStudioMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudioMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetStudioMemberOutput)
	return ret0, ret1
}

// GetStudioMemberRequest indicates an expected call of GetStudioMemberRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioMemberRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioMemberRequest), arg0)
}

// GetStudioMemberWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetStudioMemberWithContext(arg0 context.Context, arg1 *nimblestudio.GetStudioMemberInput, arg2 ...request.Option) (*nimblestudio.GetStudioMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudioMemberWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetStudioMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudioMemberWithContext indicates an expected call of GetStudioMemberWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioMemberWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioMemberWithContext), varargs...)
}

// GetStudioRequest mocks base method.
func (m *MockNimbleStudioAPI) GetStudioRequest(arg0 *nimblestudio.GetStudioInput) (*request.Request, *nimblestudio.GetStudioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.GetStudioOutput)
	return ret0, ret1
}

// GetStudioRequest indicates an expected call of GetStudioRequest.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioRequest), arg0)
}

// GetStudioWithContext mocks base method.
func (m *MockNimbleStudioAPI) GetStudioWithContext(arg0 context.Context, arg1 *nimblestudio.GetStudioInput, arg2 ...request.Option) (*nimblestudio.GetStudioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudioWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.GetStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudioWithContext indicates an expected call of GetStudioWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) GetStudioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudioWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).GetStudioWithContext), varargs...)
}

// ListEulaAcceptances mocks base method.
func (m *MockNimbleStudioAPI) ListEulaAcceptances(arg0 *nimblestudio.ListEulaAcceptancesInput) (*nimblestudio.ListEulaAcceptancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEulaAcceptances", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListEulaAcceptancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEulaAcceptances indicates an expected call of ListEulaAcceptances.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulaAcceptances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulaAcceptances", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulaAcceptances), arg0)
}

// ListEulaAcceptancesPages mocks base method.
func (m *MockNimbleStudioAPI) ListEulaAcceptancesPages(arg0 *nimblestudio.ListEulaAcceptancesInput, arg1 func(*nimblestudio.ListEulaAcceptancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEulaAcceptancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEulaAcceptancesPages indicates an expected call of ListEulaAcceptancesPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulaAcceptancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulaAcceptancesPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulaAcceptancesPages), arg0, arg1)
}

// ListEulaAcceptancesPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListEulaAcceptancesPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListEulaAcceptancesInput, arg2 func(*nimblestudio.ListEulaAcceptancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEulaAcceptancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEulaAcceptancesPagesWithContext indicates an expected call of ListEulaAcceptancesPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulaAcceptancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulaAcceptancesPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulaAcceptancesPagesWithContext), varargs...)
}

// ListEulaAcceptancesRequest mocks base method.
func (m *MockNimbleStudioAPI) ListEulaAcceptancesRequest(arg0 *nimblestudio.ListEulaAcceptancesInput) (*request.Request, *nimblestudio.ListEulaAcceptancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEulaAcceptancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListEulaAcceptancesOutput)
	return ret0, ret1
}

// ListEulaAcceptancesRequest indicates an expected call of ListEulaAcceptancesRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulaAcceptancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulaAcceptancesRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulaAcceptancesRequest), arg0)
}

// ListEulaAcceptancesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListEulaAcceptancesWithContext(arg0 context.Context, arg1 *nimblestudio.ListEulaAcceptancesInput, arg2 ...request.Option) (*nimblestudio.ListEulaAcceptancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEulaAcceptancesWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListEulaAcceptancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEulaAcceptancesWithContext indicates an expected call of ListEulaAcceptancesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulaAcceptancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulaAcceptancesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulaAcceptancesWithContext), varargs...)
}

// ListEulas mocks base method.
func (m *MockNimbleStudioAPI) ListEulas(arg0 *nimblestudio.ListEulasInput) (*nimblestudio.ListEulasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEulas", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListEulasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEulas indicates an expected call of ListEulas.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulas", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulas), arg0)
}

// ListEulasPages mocks base method.
func (m *MockNimbleStudioAPI) ListEulasPages(arg0 *nimblestudio.ListEulasInput, arg1 func(*nimblestudio.ListEulasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEulasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEulasPages indicates an expected call of ListEulasPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulasPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulasPages), arg0, arg1)
}

// ListEulasPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListEulasPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListEulasInput, arg2 func(*nimblestudio.ListEulasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEulasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEulasPagesWithContext indicates an expected call of ListEulasPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulasPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulasPagesWithContext), varargs...)
}

// ListEulasRequest mocks base method.
func (m *MockNimbleStudioAPI) ListEulasRequest(arg0 *nimblestudio.ListEulasInput) (*request.Request, *nimblestudio.ListEulasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEulasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListEulasOutput)
	return ret0, ret1
}

// ListEulasRequest indicates an expected call of ListEulasRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulasRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulasRequest), arg0)
}

// ListEulasWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListEulasWithContext(arg0 context.Context, arg1 *nimblestudio.ListEulasInput, arg2 ...request.Option) (*nimblestudio.ListEulasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEulasWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListEulasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEulasWithContext indicates an expected call of ListEulasWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListEulasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEulasWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListEulasWithContext), varargs...)
}

// ListLaunchProfileMembers mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfileMembers(arg0 *nimblestudio.ListLaunchProfileMembersInput) (*nimblestudio.ListLaunchProfileMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchProfileMembers", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListLaunchProfileMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchProfileMembers indicates an expected call of ListLaunchProfileMembers.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfileMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfileMembers", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfileMembers), arg0)
}

// ListLaunchProfileMembersPages mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfileMembersPages(arg0 *nimblestudio.ListLaunchProfileMembersInput, arg1 func(*nimblestudio.ListLaunchProfileMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchProfileMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchProfileMembersPages indicates an expected call of ListLaunchProfileMembersPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfileMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfileMembersPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfileMembersPages), arg0, arg1)
}

// ListLaunchProfileMembersPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfileMembersPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListLaunchProfileMembersInput, arg2 func(*nimblestudio.ListLaunchProfileMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchProfileMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchProfileMembersPagesWithContext indicates an expected call of ListLaunchProfileMembersPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfileMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfileMembersPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfileMembersPagesWithContext), varargs...)
}

// ListLaunchProfileMembersRequest mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfileMembersRequest(arg0 *nimblestudio.ListLaunchProfileMembersInput) (*request.Request, *nimblestudio.ListLaunchProfileMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchProfileMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListLaunchProfileMembersOutput)
	return ret0, ret1
}

// ListLaunchProfileMembersRequest indicates an expected call of ListLaunchProfileMembersRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfileMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfileMembersRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfileMembersRequest), arg0)
}

// ListLaunchProfileMembersWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfileMembersWithContext(arg0 context.Context, arg1 *nimblestudio.ListLaunchProfileMembersInput, arg2 ...request.Option) (*nimblestudio.ListLaunchProfileMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchProfileMembersWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListLaunchProfileMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchProfileMembersWithContext indicates an expected call of ListLaunchProfileMembersWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfileMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfileMembersWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfileMembersWithContext), varargs...)
}

// ListLaunchProfiles mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfiles(arg0 *nimblestudio.ListLaunchProfilesInput) (*nimblestudio.ListLaunchProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchProfiles", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListLaunchProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchProfiles indicates an expected call of ListLaunchProfiles.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfiles", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfiles), arg0)
}

// ListLaunchProfilesPages mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfilesPages(arg0 *nimblestudio.ListLaunchProfilesInput, arg1 func(*nimblestudio.ListLaunchProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchProfilesPages indicates an expected call of ListLaunchProfilesPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfilesPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfilesPages), arg0, arg1)
}

// ListLaunchProfilesPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfilesPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListLaunchProfilesInput, arg2 func(*nimblestudio.ListLaunchProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchProfilesPagesWithContext indicates an expected call of ListLaunchProfilesPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfilesPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfilesPagesWithContext), varargs...)
}

// ListLaunchProfilesRequest mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfilesRequest(arg0 *nimblestudio.ListLaunchProfilesInput) (*request.Request, *nimblestudio.ListLaunchProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListLaunchProfilesOutput)
	return ret0, ret1
}

// ListLaunchProfilesRequest indicates an expected call of ListLaunchProfilesRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfilesRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfilesRequest), arg0)
}

// ListLaunchProfilesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListLaunchProfilesWithContext(arg0 context.Context, arg1 *nimblestudio.ListLaunchProfilesInput, arg2 ...request.Option) (*nimblestudio.ListLaunchProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListLaunchProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchProfilesWithContext indicates an expected call of ListLaunchProfilesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListLaunchProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchProfilesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListLaunchProfilesWithContext), varargs...)
}

// ListStreamingImages mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingImages(arg0 *nimblestudio.ListStreamingImagesInput) (*nimblestudio.ListStreamingImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingImages", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListStreamingImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingImages indicates an expected call of ListStreamingImages.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingImages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingImages), arg0)
}

// ListStreamingImagesPages mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingImagesPages(arg0 *nimblestudio.ListStreamingImagesInput, arg1 func(*nimblestudio.ListStreamingImagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingImagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingImagesPages indicates an expected call of ListStreamingImagesPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingImagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingImagesPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingImagesPages), arg0, arg1)
}

// ListStreamingImagesPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingImagesPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListStreamingImagesInput, arg2 func(*nimblestudio.ListStreamingImagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingImagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingImagesPagesWithContext indicates an expected call of ListStreamingImagesPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingImagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingImagesPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingImagesPagesWithContext), varargs...)
}

// ListStreamingImagesRequest mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingImagesRequest(arg0 *nimblestudio.ListStreamingImagesInput) (*request.Request, *nimblestudio.ListStreamingImagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingImagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListStreamingImagesOutput)
	return ret0, ret1
}

// ListStreamingImagesRequest indicates an expected call of ListStreamingImagesRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingImagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingImagesRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingImagesRequest), arg0)
}

// ListStreamingImagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingImagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListStreamingImagesInput, arg2 ...request.Option) (*nimblestudio.ListStreamingImagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingImagesWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListStreamingImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingImagesWithContext indicates an expected call of ListStreamingImagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingImagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingImagesWithContext), varargs...)
}

// ListStreamingSessions mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingSessions(arg0 *nimblestudio.ListStreamingSessionsInput) (*nimblestudio.ListStreamingSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingSessions", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListStreamingSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingSessions indicates an expected call of ListStreamingSessions.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingSessions", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingSessions), arg0)
}

// ListStreamingSessionsPages mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingSessionsPages(arg0 *nimblestudio.ListStreamingSessionsInput, arg1 func(*nimblestudio.ListStreamingSessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingSessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingSessionsPages indicates an expected call of ListStreamingSessionsPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingSessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingSessionsPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingSessionsPages), arg0, arg1)
}

// ListStreamingSessionsPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingSessionsPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListStreamingSessionsInput, arg2 func(*nimblestudio.ListStreamingSessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingSessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingSessionsPagesWithContext indicates an expected call of ListStreamingSessionsPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingSessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingSessionsPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingSessionsPagesWithContext), varargs...)
}

// ListStreamingSessionsRequest mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingSessionsRequest(arg0 *nimblestudio.ListStreamingSessionsInput) (*request.Request, *nimblestudio.ListStreamingSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListStreamingSessionsOutput)
	return ret0, ret1
}

// ListStreamingSessionsRequest indicates an expected call of ListStreamingSessionsRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingSessionsRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingSessionsRequest), arg0)
}

// ListStreamingSessionsWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStreamingSessionsWithContext(arg0 context.Context, arg1 *nimblestudio.ListStreamingSessionsInput, arg2 ...request.Option) (*nimblestudio.ListStreamingSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListStreamingSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingSessionsWithContext indicates an expected call of ListStreamingSessionsWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStreamingSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingSessionsWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStreamingSessionsWithContext), varargs...)
}

// ListStudioComponents mocks base method.
func (m *MockNimbleStudioAPI) ListStudioComponents(arg0 *nimblestudio.ListStudioComponentsInput) (*nimblestudio.ListStudioComponentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudioComponents", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListStudioComponentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudioComponents indicates an expected call of ListStudioComponents.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioComponents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioComponents", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioComponents), arg0)
}

// ListStudioComponentsPages mocks base method.
func (m *MockNimbleStudioAPI) ListStudioComponentsPages(arg0 *nimblestudio.ListStudioComponentsInput, arg1 func(*nimblestudio.ListStudioComponentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudioComponentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStudioComponentsPages indicates an expected call of ListStudioComponentsPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioComponentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioComponentsPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioComponentsPages), arg0, arg1)
}

// ListStudioComponentsPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStudioComponentsPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListStudioComponentsInput, arg2 func(*nimblestudio.ListStudioComponentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudioComponentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStudioComponentsPagesWithContext indicates an expected call of ListStudioComponentsPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioComponentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioComponentsPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioComponentsPagesWithContext), varargs...)
}

// ListStudioComponentsRequest mocks base method.
func (m *MockNimbleStudioAPI) ListStudioComponentsRequest(arg0 *nimblestudio.ListStudioComponentsInput) (*request.Request, *nimblestudio.ListStudioComponentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudioComponentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListStudioComponentsOutput)
	return ret0, ret1
}

// ListStudioComponentsRequest indicates an expected call of ListStudioComponentsRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioComponentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioComponentsRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioComponentsRequest), arg0)
}

// ListStudioComponentsWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStudioComponentsWithContext(arg0 context.Context, arg1 *nimblestudio.ListStudioComponentsInput, arg2 ...request.Option) (*nimblestudio.ListStudioComponentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudioComponentsWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListStudioComponentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudioComponentsWithContext indicates an expected call of ListStudioComponentsWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioComponentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioComponentsWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioComponentsWithContext), varargs...)
}

// ListStudioMembers mocks base method.
func (m *MockNimbleStudioAPI) ListStudioMembers(arg0 *nimblestudio.ListStudioMembersInput) (*nimblestudio.ListStudioMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudioMembers", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListStudioMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudioMembers indicates an expected call of ListStudioMembers.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioMembers", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioMembers), arg0)
}

// ListStudioMembersPages mocks base method.
func (m *MockNimbleStudioAPI) ListStudioMembersPages(arg0 *nimblestudio.ListStudioMembersInput, arg1 func(*nimblestudio.ListStudioMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudioMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStudioMembersPages indicates an expected call of ListStudioMembersPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioMembersPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioMembersPages), arg0, arg1)
}

// ListStudioMembersPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStudioMembersPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListStudioMembersInput, arg2 func(*nimblestudio.ListStudioMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudioMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStudioMembersPagesWithContext indicates an expected call of ListStudioMembersPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioMembersPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioMembersPagesWithContext), varargs...)
}

// ListStudioMembersRequest mocks base method.
func (m *MockNimbleStudioAPI) ListStudioMembersRequest(arg0 *nimblestudio.ListStudioMembersInput) (*request.Request, *nimblestudio.ListStudioMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudioMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListStudioMembersOutput)
	return ret0, ret1
}

// ListStudioMembersRequest indicates an expected call of ListStudioMembersRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioMembersRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioMembersRequest), arg0)
}

// ListStudioMembersWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStudioMembersWithContext(arg0 context.Context, arg1 *nimblestudio.ListStudioMembersInput, arg2 ...request.Option) (*nimblestudio.ListStudioMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudioMembersWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListStudioMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudioMembersWithContext indicates an expected call of ListStudioMembersWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudioMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudioMembersWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudioMembersWithContext), varargs...)
}

// ListStudios mocks base method.
func (m *MockNimbleStudioAPI) ListStudios(arg0 *nimblestudio.ListStudiosInput) (*nimblestudio.ListStudiosOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudios", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListStudiosOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudios indicates an expected call of ListStudios.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudios(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudios", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudios), arg0)
}

// ListStudiosPages mocks base method.
func (m *MockNimbleStudioAPI) ListStudiosPages(arg0 *nimblestudio.ListStudiosInput, arg1 func(*nimblestudio.ListStudiosOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudiosPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStudiosPages indicates an expected call of ListStudiosPages.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudiosPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudiosPages", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudiosPages), arg0, arg1)
}

// ListStudiosPagesWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStudiosPagesWithContext(arg0 context.Context, arg1 *nimblestudio.ListStudiosInput, arg2 func(*nimblestudio.ListStudiosOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudiosPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStudiosPagesWithContext indicates an expected call of ListStudiosPagesWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudiosPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudiosPagesWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudiosPagesWithContext), varargs...)
}

// ListStudiosRequest mocks base method.
func (m *MockNimbleStudioAPI) ListStudiosRequest(arg0 *nimblestudio.ListStudiosInput) (*request.Request, *nimblestudio.ListStudiosOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudiosRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListStudiosOutput)
	return ret0, ret1
}

// ListStudiosRequest indicates an expected call of ListStudiosRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudiosRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudiosRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudiosRequest), arg0)
}

// ListStudiosWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListStudiosWithContext(arg0 context.Context, arg1 *nimblestudio.ListStudiosInput, arg2 ...request.Option) (*nimblestudio.ListStudiosOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStudiosWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListStudiosOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudiosWithContext indicates an expected call of ListStudiosWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListStudiosWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudiosWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListStudiosWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockNimbleStudioAPI) ListTagsForResource(arg0 *nimblestudio.ListTagsForResourceInput) (*nimblestudio.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*nimblestudio.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockNimbleStudioAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockNimbleStudioAPI) ListTagsForResourceRequest(arg0 *nimblestudio.ListTagsForResourceInput) (*request.Request, *nimblestudio.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockNimbleStudioAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockNimbleStudioAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *nimblestudio.ListTagsForResourceInput, arg2 ...request.Option) (*nimblestudio.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutLaunchProfileMembers mocks base method.
func (m *MockNimbleStudioAPI) PutLaunchProfileMembers(arg0 *nimblestudio.PutLaunchProfileMembersInput) (*nimblestudio.PutLaunchProfileMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLaunchProfileMembers", arg0)
	ret0, _ := ret[0].(*nimblestudio.PutLaunchProfileMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLaunchProfileMembers indicates an expected call of PutLaunchProfileMembers.
func (mr *MockNimbleStudioAPIMockRecorder) PutLaunchProfileMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLaunchProfileMembers", reflect.TypeOf((*MockNimbleStudioAPI)(nil).PutLaunchProfileMembers), arg0)
}

// PutLaunchProfileMembersRequest mocks base method.
func (m *MockNimbleStudioAPI) PutLaunchProfileMembersRequest(arg0 *nimblestudio.PutLaunchProfileMembersInput) (*request.Request, *nimblestudio.PutLaunchProfileMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLaunchProfileMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.PutLaunchProfileMembersOutput)
	return ret0, ret1
}

// PutLaunchProfileMembersRequest indicates an expected call of PutLaunchProfileMembersRequest.
func (mr *MockNimbleStudioAPIMockRecorder) PutLaunchProfileMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLaunchProfileMembersRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).PutLaunchProfileMembersRequest), arg0)
}

// PutLaunchProfileMembersWithContext mocks base method.
func (m *MockNimbleStudioAPI) PutLaunchProfileMembersWithContext(arg0 context.Context, arg1 *nimblestudio.PutLaunchProfileMembersInput, arg2 ...request.Option) (*nimblestudio.PutLaunchProfileMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLaunchProfileMembersWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.PutLaunchProfileMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLaunchProfileMembersWithContext indicates an expected call of PutLaunchProfileMembersWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) PutLaunchProfileMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLaunchProfileMembersWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).PutLaunchProfileMembersWithContext), varargs...)
}

// PutStudioMembers mocks base method.
func (m *MockNimbleStudioAPI) PutStudioMembers(arg0 *nimblestudio.PutStudioMembersInput) (*nimblestudio.PutStudioMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStudioMembers", arg0)
	ret0, _ := ret[0].(*nimblestudio.PutStudioMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStudioMembers indicates an expected call of PutStudioMembers.
func (mr *MockNimbleStudioAPIMockRecorder) PutStudioMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStudioMembers", reflect.TypeOf((*MockNimbleStudioAPI)(nil).PutStudioMembers), arg0)
}

// PutStudioMembersRequest mocks base method.
func (m *MockNimbleStudioAPI) PutStudioMembersRequest(arg0 *nimblestudio.PutStudioMembersInput) (*request.Request, *nimblestudio.PutStudioMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutStudioMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.PutStudioMembersOutput)
	return ret0, ret1
}

// PutStudioMembersRequest indicates an expected call of PutStudioMembersRequest.
func (mr *MockNimbleStudioAPIMockRecorder) PutStudioMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStudioMembersRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).PutStudioMembersRequest), arg0)
}

// PutStudioMembersWithContext mocks base method.
func (m *MockNimbleStudioAPI) PutStudioMembersWithContext(arg0 context.Context, arg1 *nimblestudio.PutStudioMembersInput, arg2 ...request.Option) (*nimblestudio.PutStudioMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutStudioMembersWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.PutStudioMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStudioMembersWithContext indicates an expected call of PutStudioMembersWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) PutStudioMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStudioMembersWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).PutStudioMembersWithContext), varargs...)
}

// StartStudioSSOConfigurationRepair mocks base method.
func (m *MockNimbleStudioAPI) StartStudioSSOConfigurationRepair(arg0 *nimblestudio.StartStudioSSOConfigurationRepairInput) (*nimblestudio.StartStudioSSOConfigurationRepairOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStudioSSOConfigurationRepair", arg0)
	ret0, _ := ret[0].(*nimblestudio.StartStudioSSOConfigurationRepairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStudioSSOConfigurationRepair indicates an expected call of StartStudioSSOConfigurationRepair.
func (mr *MockNimbleStudioAPIMockRecorder) StartStudioSSOConfigurationRepair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStudioSSOConfigurationRepair", reflect.TypeOf((*MockNimbleStudioAPI)(nil).StartStudioSSOConfigurationRepair), arg0)
}

// StartStudioSSOConfigurationRepairRequest mocks base method.
func (m *MockNimbleStudioAPI) StartStudioSSOConfigurationRepairRequest(arg0 *nimblestudio.StartStudioSSOConfigurationRepairInput) (*request.Request, *nimblestudio.StartStudioSSOConfigurationRepairOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStudioSSOConfigurationRepairRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.StartStudioSSOConfigurationRepairOutput)
	return ret0, ret1
}

// StartStudioSSOConfigurationRepairRequest indicates an expected call of StartStudioSSOConfigurationRepairRequest.
func (mr *MockNimbleStudioAPIMockRecorder) StartStudioSSOConfigurationRepairRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStudioSSOConfigurationRepairRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).StartStudioSSOConfigurationRepairRequest), arg0)
}

// StartStudioSSOConfigurationRepairWithContext mocks base method.
func (m *MockNimbleStudioAPI) StartStudioSSOConfigurationRepairWithContext(arg0 context.Context, arg1 *nimblestudio.StartStudioSSOConfigurationRepairInput, arg2 ...request.Option) (*nimblestudio.StartStudioSSOConfigurationRepairOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartStudioSSOConfigurationRepairWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.StartStudioSSOConfigurationRepairOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStudioSSOConfigurationRepairWithContext indicates an expected call of StartStudioSSOConfigurationRepairWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) StartStudioSSOConfigurationRepairWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStudioSSOConfigurationRepairWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).StartStudioSSOConfigurationRepairWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockNimbleStudioAPI) TagResource(arg0 *nimblestudio.TagResourceInput) (*nimblestudio.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*nimblestudio.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockNimbleStudioAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockNimbleStudioAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockNimbleStudioAPI) TagResourceRequest(arg0 *nimblestudio.TagResourceInput) (*request.Request, *nimblestudio.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockNimbleStudioAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockNimbleStudioAPI) TagResourceWithContext(arg0 context.Context, arg1 *nimblestudio.TagResourceInput, arg2 ...request.Option) (*nimblestudio.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockNimbleStudioAPI) UntagResource(arg0 *nimblestudio.UntagResourceInput) (*nimblestudio.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*nimblestudio.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockNimbleStudioAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockNimbleStudioAPI) UntagResourceRequest(arg0 *nimblestudio.UntagResourceInput) (*request.Request, *nimblestudio.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockNimbleStudioAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockNimbleStudioAPI) UntagResourceWithContext(arg0 context.Context, arg1 *nimblestudio.UntagResourceInput, arg2 ...request.Option) (*nimblestudio.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateLaunchProfile mocks base method.
func (m *MockNimbleStudioAPI) UpdateLaunchProfile(arg0 *nimblestudio.UpdateLaunchProfileInput) (*nimblestudio.UpdateLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchProfile", arg0)
	ret0, _ := ret[0].(*nimblestudio.UpdateLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchProfile indicates an expected call of UpdateLaunchProfile.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateLaunchProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchProfile", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateLaunchProfile), arg0)
}

// UpdateLaunchProfileMember mocks base method.
func (m *MockNimbleStudioAPI) UpdateLaunchProfileMember(arg0 *nimblestudio.UpdateLaunchProfileMemberInput) (*nimblestudio.UpdateLaunchProfileMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchProfileMember", arg0)
	ret0, _ := ret[0].(*nimblestudio.UpdateLaunchProfileMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchProfileMember indicates an expected call of UpdateLaunchProfileMember.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateLaunchProfileMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchProfileMember", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateLaunchProfileMember), arg0)
}

// UpdateLaunchProfileMemberRequest mocks base method.
func (m *MockNimbleStudioAPI) UpdateLaunchProfileMemberRequest(arg0 *nimblestudio.UpdateLaunchProfileMemberInput) (*request.Request, *nimblestudio.UpdateLaunchProfileMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchProfileMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.UpdateLaunchProfileMemberOutput)
	return ret0, ret1
}

// UpdateLaunchProfileMemberRequest indicates an expected call of UpdateLaunchProfileMemberRequest.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateLaunchProfileMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchProfileMemberRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateLaunchProfileMemberRequest), arg0)
}

// UpdateLaunchProfileMemberWithContext mocks base method.
func (m *MockNimbleStudioAPI) UpdateLaunchProfileMemberWithContext(arg0 context.Context, arg1 *nimblestudio.UpdateLaunchProfileMemberInput, arg2 ...request.Option) (*nimblestudio.UpdateLaunchProfileMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchProfileMemberWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.UpdateLaunchProfileMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchProfileMemberWithContext indicates an expected call of UpdateLaunchProfileMemberWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateLaunchProfileMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchProfileMemberWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateLaunchProfileMemberWithContext), varargs...)
}

// UpdateLaunchProfileRequest mocks base method.
func (m *MockNimbleStudioAPI) UpdateLaunchProfileRequest(arg0 *nimblestudio.UpdateLaunchProfileInput) (*request.Request, *nimblestudio.UpdateLaunchProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.UpdateLaunchProfileOutput)
	return ret0, ret1
}

// UpdateLaunchProfileRequest indicates an expected call of UpdateLaunchProfileRequest.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateLaunchProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchProfileRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateLaunchProfileRequest), arg0)
}

// UpdateLaunchProfileWithContext mocks base method.
func (m *MockNimbleStudioAPI) UpdateLaunchProfileWithContext(arg0 context.Context, arg1 *nimblestudio.UpdateLaunchProfileInput, arg2 ...request.Option) (*nimblestudio.UpdateLaunchProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchProfileWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.UpdateLaunchProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchProfileWithContext indicates an expected call of UpdateLaunchProfileWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateLaunchProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchProfileWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateLaunchProfileWithContext), varargs...)
}

// UpdateStreamingImage mocks base method.
func (m *MockNimbleStudioAPI) UpdateStreamingImage(arg0 *nimblestudio.UpdateStreamingImageInput) (*nimblestudio.UpdateStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingImage", arg0)
	ret0, _ := ret[0].(*nimblestudio.UpdateStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamingImage indicates an expected call of UpdateStreamingImage.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStreamingImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingImage", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStreamingImage), arg0)
}

// UpdateStreamingImageRequest mocks base method.
func (m *MockNimbleStudioAPI) UpdateStreamingImageRequest(arg0 *nimblestudio.UpdateStreamingImageInput) (*request.Request, *nimblestudio.UpdateStreamingImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.UpdateStreamingImageOutput)
	return ret0, ret1
}

// UpdateStreamingImageRequest indicates an expected call of UpdateStreamingImageRequest.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStreamingImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingImageRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStreamingImageRequest), arg0)
}

// UpdateStreamingImageWithContext mocks base method.
func (m *MockNimbleStudioAPI) UpdateStreamingImageWithContext(arg0 context.Context, arg1 *nimblestudio.UpdateStreamingImageInput, arg2 ...request.Option) (*nimblestudio.UpdateStreamingImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStreamingImageWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.UpdateStreamingImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamingImageWithContext indicates an expected call of UpdateStreamingImageWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStreamingImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingImageWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStreamingImageWithContext), varargs...)
}

// UpdateStudio mocks base method.
func (m *MockNimbleStudioAPI) UpdateStudio(arg0 *nimblestudio.UpdateStudioInput) (*nimblestudio.UpdateStudioOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudio", arg0)
	ret0, _ := ret[0].(*nimblestudio.UpdateStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudio indicates an expected call of UpdateStudio.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStudio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudio", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStudio), arg0)
}

// UpdateStudioComponent mocks base method.
func (m *MockNimbleStudioAPI) UpdateStudioComponent(arg0 *nimblestudio.UpdateStudioComponentInput) (*nimblestudio.UpdateStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudioComponent", arg0)
	ret0, _ := ret[0].(*nimblestudio.UpdateStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudioComponent indicates an expected call of UpdateStudioComponent.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStudioComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudioComponent", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStudioComponent), arg0)
}

// UpdateStudioComponentRequest mocks base method.
func (m *MockNimbleStudioAPI) UpdateStudioComponentRequest(arg0 *nimblestudio.UpdateStudioComponentInput) (*request.Request, *nimblestudio.UpdateStudioComponentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudioComponentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.UpdateStudioComponentOutput)
	return ret0, ret1
}

// UpdateStudioComponentRequest indicates an expected call of UpdateStudioComponentRequest.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStudioComponentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudioComponentRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStudioComponentRequest), arg0)
}

// UpdateStudioComponentWithContext mocks base method.
func (m *MockNimbleStudioAPI) UpdateStudioComponentWithContext(arg0 context.Context, arg1 *nimblestudio.UpdateStudioComponentInput, arg2 ...request.Option) (*nimblestudio.UpdateStudioComponentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStudioComponentWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.UpdateStudioComponentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudioComponentWithContext indicates an expected call of UpdateStudioComponentWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStudioComponentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudioComponentWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStudioComponentWithContext), varargs...)
}

// UpdateStudioRequest mocks base method.
func (m *MockNimbleStudioAPI) UpdateStudioRequest(arg0 *nimblestudio.UpdateStudioInput) (*request.Request, *nimblestudio.UpdateStudioOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudioRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*nimblestudio.UpdateStudioOutput)
	return ret0, ret1
}

// UpdateStudioRequest indicates an expected call of UpdateStudioRequest.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStudioRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudioRequest", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStudioRequest), arg0)
}

// UpdateStudioWithContext mocks base method.
func (m *MockNimbleStudioAPI) UpdateStudioWithContext(arg0 context.Context, arg1 *nimblestudio.UpdateStudioInput, arg2 ...request.Option) (*nimblestudio.UpdateStudioOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStudioWithContext", varargs...)
	ret0, _ := ret[0].(*nimblestudio.UpdateStudioOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudioWithContext indicates an expected call of UpdateStudioWithContext.
func (mr *MockNimbleStudioAPIMockRecorder) UpdateStudioWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudioWithContext", reflect.TypeOf((*MockNimbleStudioAPI)(nil).UpdateStudioWithContext), varargs...)
}

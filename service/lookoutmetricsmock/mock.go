// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/lookoutmetrics/lookoutmetricsiface (interfaces: LookoutMetricsAPI)

// Package lookoutmetricsmock is a generated GoMock package.
package lookoutmetricsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	lookoutmetrics "github.com/aws/aws-sdk-go/service/lookoutmetrics"
	gomock "github.com/golang/mock/gomock"
)

// MockLookoutMetricsAPI is a mock of LookoutMetricsAPI interface.
type MockLookoutMetricsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLookoutMetricsAPIMockRecorder
}

// MockLookoutMetricsAPIMockRecorder is the mock recorder for MockLookoutMetricsAPI.
type MockLookoutMetricsAPIMockRecorder struct {
	mock *MockLookoutMetricsAPI
}

// NewMockLookoutMetricsAPI creates a new mock instance.
func NewMockLookoutMetricsAPI(ctrl *gomock.Controller) *MockLookoutMetricsAPI {
	mock := &MockLookoutMetricsAPI{ctrl: ctrl}
	mock.recorder = &MockLookoutMetricsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLookoutMetricsAPI) EXPECT() *MockLookoutMetricsAPIMockRecorder {
	return m.recorder
}

// ActivateAnomalyDetector mocks base method.
func (m *MockLookoutMetricsAPI) ActivateAnomalyDetector(arg0 *lookoutmetrics.ActivateAnomalyDetectorInput) (*lookoutmetrics.ActivateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAnomalyDetector", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ActivateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateAnomalyDetector indicates an expected call of ActivateAnomalyDetector.
func (mr *MockLookoutMetricsAPIMockRecorder) ActivateAnomalyDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAnomalyDetector", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ActivateAnomalyDetector), arg0)
}

// ActivateAnomalyDetectorRequest mocks base method.
func (m *MockLookoutMetricsAPI) ActivateAnomalyDetectorRequest(arg0 *lookoutmetrics.ActivateAnomalyDetectorInput) (*request.Request, *lookoutmetrics.ActivateAnomalyDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAnomalyDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ActivateAnomalyDetectorOutput)
	return ret0, ret1
}

// ActivateAnomalyDetectorRequest indicates an expected call of ActivateAnomalyDetectorRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ActivateAnomalyDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAnomalyDetectorRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ActivateAnomalyDetectorRequest), arg0)
}

// ActivateAnomalyDetectorWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ActivateAnomalyDetectorWithContext(arg0 context.Context, arg1 *lookoutmetrics.ActivateAnomalyDetectorInput, arg2 ...request.Option) (*lookoutmetrics.ActivateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateAnomalyDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ActivateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateAnomalyDetectorWithContext indicates an expected call of ActivateAnomalyDetectorWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ActivateAnomalyDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAnomalyDetectorWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ActivateAnomalyDetectorWithContext), varargs...)
}

// BackTestAnomalyDetector mocks base method.
func (m *MockLookoutMetricsAPI) BackTestAnomalyDetector(arg0 *lookoutmetrics.BackTestAnomalyDetectorInput) (*lookoutmetrics.BackTestAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackTestAnomalyDetector", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.BackTestAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackTestAnomalyDetector indicates an expected call of BackTestAnomalyDetector.
func (mr *MockLookoutMetricsAPIMockRecorder) BackTestAnomalyDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackTestAnomalyDetector", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).BackTestAnomalyDetector), arg0)
}

// BackTestAnomalyDetectorRequest mocks base method.
func (m *MockLookoutMetricsAPI) BackTestAnomalyDetectorRequest(arg0 *lookoutmetrics.BackTestAnomalyDetectorInput) (*request.Request, *lookoutmetrics.BackTestAnomalyDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackTestAnomalyDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.BackTestAnomalyDetectorOutput)
	return ret0, ret1
}

// BackTestAnomalyDetectorRequest indicates an expected call of BackTestAnomalyDetectorRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) BackTestAnomalyDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackTestAnomalyDetectorRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).BackTestAnomalyDetectorRequest), arg0)
}

// BackTestAnomalyDetectorWithContext mocks base method.
func (m *MockLookoutMetricsAPI) BackTestAnomalyDetectorWithContext(arg0 context.Context, arg1 *lookoutmetrics.BackTestAnomalyDetectorInput, arg2 ...request.Option) (*lookoutmetrics.BackTestAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BackTestAnomalyDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.BackTestAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackTestAnomalyDetectorWithContext indicates an expected call of BackTestAnomalyDetectorWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) BackTestAnomalyDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackTestAnomalyDetectorWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).BackTestAnomalyDetectorWithContext), varargs...)
}

// CreateAlert mocks base method.
func (m *MockLookoutMetricsAPI) CreateAlert(arg0 *lookoutmetrics.CreateAlertInput) (*lookoutmetrics.CreateAlertOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlert", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.CreateAlertOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlert indicates an expected call of CreateAlert.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateAlert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlert", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateAlert), arg0)
}

// CreateAlertRequest mocks base method.
func (m *MockLookoutMetricsAPI) CreateAlertRequest(arg0 *lookoutmetrics.CreateAlertInput) (*request.Request, *lookoutmetrics.CreateAlertOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.CreateAlertOutput)
	return ret0, ret1
}

// CreateAlertRequest indicates an expected call of CreateAlertRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateAlertRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateAlertRequest), arg0)
}

// CreateAlertWithContext mocks base method.
func (m *MockLookoutMetricsAPI) CreateAlertWithContext(arg0 context.Context, arg1 *lookoutmetrics.CreateAlertInput, arg2 ...request.Option) (*lookoutmetrics.CreateAlertOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAlertWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.CreateAlertOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertWithContext indicates an expected call of CreateAlertWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateAlertWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateAlertWithContext), varargs...)
}

// CreateAnomalyDetector mocks base method.
func (m *MockLookoutMetricsAPI) CreateAnomalyDetector(arg0 *lookoutmetrics.CreateAnomalyDetectorInput) (*lookoutmetrics.CreateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnomalyDetector", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.CreateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnomalyDetector indicates an expected call of CreateAnomalyDetector.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateAnomalyDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnomalyDetector", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateAnomalyDetector), arg0)
}

// CreateAnomalyDetectorRequest mocks base method.
func (m *MockLookoutMetricsAPI) CreateAnomalyDetectorRequest(arg0 *lookoutmetrics.CreateAnomalyDetectorInput) (*request.Request, *lookoutmetrics.CreateAnomalyDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnomalyDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.CreateAnomalyDetectorOutput)
	return ret0, ret1
}

// CreateAnomalyDetectorRequest indicates an expected call of CreateAnomalyDetectorRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateAnomalyDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnomalyDetectorRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateAnomalyDetectorRequest), arg0)
}

// CreateAnomalyDetectorWithContext mocks base method.
func (m *MockLookoutMetricsAPI) CreateAnomalyDetectorWithContext(arg0 context.Context, arg1 *lookoutmetrics.CreateAnomalyDetectorInput, arg2 ...request.Option) (*lookoutmetrics.CreateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnomalyDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.CreateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnomalyDetectorWithContext indicates an expected call of CreateAnomalyDetectorWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateAnomalyDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnomalyDetectorWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateAnomalyDetectorWithContext), varargs...)
}

// CreateMetricSet mocks base method.
func (m *MockLookoutMetricsAPI) CreateMetricSet(arg0 *lookoutmetrics.CreateMetricSetInput) (*lookoutmetrics.CreateMetricSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricSet", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.CreateMetricSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSet indicates an expected call of CreateMetricSet.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateMetricSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSet", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateMetricSet), arg0)
}

// CreateMetricSetRequest mocks base method.
func (m *MockLookoutMetricsAPI) CreateMetricSetRequest(arg0 *lookoutmetrics.CreateMetricSetInput) (*request.Request, *lookoutmetrics.CreateMetricSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetricSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.CreateMetricSetOutput)
	return ret0, ret1
}

// CreateMetricSetRequest indicates an expected call of CreateMetricSetRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateMetricSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSetRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateMetricSetRequest), arg0)
}

// CreateMetricSetWithContext mocks base method.
func (m *MockLookoutMetricsAPI) CreateMetricSetWithContext(arg0 context.Context, arg1 *lookoutmetrics.CreateMetricSetInput, arg2 ...request.Option) (*lookoutmetrics.CreateMetricSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMetricSetWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.CreateMetricSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetricSetWithContext indicates an expected call of CreateMetricSetWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) CreateMetricSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetricSetWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).CreateMetricSetWithContext), varargs...)
}

// DeactivateAnomalyDetector mocks base method.
func (m *MockLookoutMetricsAPI) DeactivateAnomalyDetector(arg0 *lookoutmetrics.DeactivateAnomalyDetectorInput) (*lookoutmetrics.DeactivateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateAnomalyDetector", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.DeactivateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateAnomalyDetector indicates an expected call of DeactivateAnomalyDetector.
func (mr *MockLookoutMetricsAPIMockRecorder) DeactivateAnomalyDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAnomalyDetector", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeactivateAnomalyDetector), arg0)
}

// DeactivateAnomalyDetectorRequest mocks base method.
func (m *MockLookoutMetricsAPI) DeactivateAnomalyDetectorRequest(arg0 *lookoutmetrics.DeactivateAnomalyDetectorInput) (*request.Request, *lookoutmetrics.DeactivateAnomalyDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateAnomalyDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.DeactivateAnomalyDetectorOutput)
	return ret0, ret1
}

// DeactivateAnomalyDetectorRequest indicates an expected call of DeactivateAnomalyDetectorRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) DeactivateAnomalyDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAnomalyDetectorRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeactivateAnomalyDetectorRequest), arg0)
}

// DeactivateAnomalyDetectorWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DeactivateAnomalyDetectorWithContext(arg0 context.Context, arg1 *lookoutmetrics.DeactivateAnomalyDetectorInput, arg2 ...request.Option) (*lookoutmetrics.DeactivateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivateAnomalyDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.DeactivateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateAnomalyDetectorWithContext indicates an expected call of DeactivateAnomalyDetectorWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DeactivateAnomalyDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateAnomalyDetectorWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeactivateAnomalyDetectorWithContext), varargs...)
}

// DeleteAlert mocks base method.
func (m *MockLookoutMetricsAPI) DeleteAlert(arg0 *lookoutmetrics.DeleteAlertInput) (*lookoutmetrics.DeleteAlertOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlert", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.DeleteAlertOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlert indicates an expected call of DeleteAlert.
func (mr *MockLookoutMetricsAPIMockRecorder) DeleteAlert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlert", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeleteAlert), arg0)
}

// DeleteAlertRequest mocks base method.
func (m *MockLookoutMetricsAPI) DeleteAlertRequest(arg0 *lookoutmetrics.DeleteAlertInput) (*request.Request, *lookoutmetrics.DeleteAlertOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.DeleteAlertOutput)
	return ret0, ret1
}

// DeleteAlertRequest indicates an expected call of DeleteAlertRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) DeleteAlertRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeleteAlertRequest), arg0)
}

// DeleteAlertWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DeleteAlertWithContext(arg0 context.Context, arg1 *lookoutmetrics.DeleteAlertInput, arg2 ...request.Option) (*lookoutmetrics.DeleteAlertOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAlertWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.DeleteAlertOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlertWithContext indicates an expected call of DeleteAlertWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DeleteAlertWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeleteAlertWithContext), varargs...)
}

// DeleteAnomalyDetector mocks base method.
func (m *MockLookoutMetricsAPI) DeleteAnomalyDetector(arg0 *lookoutmetrics.DeleteAnomalyDetectorInput) (*lookoutmetrics.DeleteAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnomalyDetector", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.DeleteAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnomalyDetector indicates an expected call of DeleteAnomalyDetector.
func (mr *MockLookoutMetricsAPIMockRecorder) DeleteAnomalyDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnomalyDetector", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeleteAnomalyDetector), arg0)
}

// DeleteAnomalyDetectorRequest mocks base method.
func (m *MockLookoutMetricsAPI) DeleteAnomalyDetectorRequest(arg0 *lookoutmetrics.DeleteAnomalyDetectorInput) (*request.Request, *lookoutmetrics.DeleteAnomalyDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnomalyDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.DeleteAnomalyDetectorOutput)
	return ret0, ret1
}

// DeleteAnomalyDetectorRequest indicates an expected call of DeleteAnomalyDetectorRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) DeleteAnomalyDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnomalyDetectorRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeleteAnomalyDetectorRequest), arg0)
}

// DeleteAnomalyDetectorWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DeleteAnomalyDetectorWithContext(arg0 context.Context, arg1 *lookoutmetrics.DeleteAnomalyDetectorInput, arg2 ...request.Option) (*lookoutmetrics.DeleteAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAnomalyDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.DeleteAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnomalyDetectorWithContext indicates an expected call of DeleteAnomalyDetectorWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DeleteAnomalyDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnomalyDetectorWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DeleteAnomalyDetectorWithContext), varargs...)
}

// DescribeAlert mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAlert(arg0 *lookoutmetrics.DescribeAlertInput) (*lookoutmetrics.DescribeAlertOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAlert", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeAlertOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlert indicates an expected call of DescribeAlert.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAlert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlert", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAlert), arg0)
}

// DescribeAlertRequest mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAlertRequest(arg0 *lookoutmetrics.DescribeAlertInput) (*request.Request, *lookoutmetrics.DescribeAlertOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAlertRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.DescribeAlertOutput)
	return ret0, ret1
}

// DescribeAlertRequest indicates an expected call of DescribeAlertRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAlertRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlertRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAlertRequest), arg0)
}

// DescribeAlertWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAlertWithContext(arg0 context.Context, arg1 *lookoutmetrics.DescribeAlertInput, arg2 ...request.Option) (*lookoutmetrics.DescribeAlertOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlertWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeAlertOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlertWithContext indicates an expected call of DescribeAlertWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAlertWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlertWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAlertWithContext), varargs...)
}

// DescribeAnomalyDetectionExecutions mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetectionExecutions(arg0 *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput) (*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectionExecutions", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAnomalyDetectionExecutions indicates an expected call of DescribeAnomalyDetectionExecutions.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetectionExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectionExecutions", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetectionExecutions), arg0)
}

// DescribeAnomalyDetectionExecutionsPages mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetectionExecutionsPages(arg0 *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput, arg1 func(*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectionExecutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAnomalyDetectionExecutionsPages indicates an expected call of DescribeAnomalyDetectionExecutionsPages.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetectionExecutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectionExecutionsPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetectionExecutionsPages), arg0, arg1)
}

// DescribeAnomalyDetectionExecutionsPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetectionExecutionsPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput, arg2 func(*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectionExecutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAnomalyDetectionExecutionsPagesWithContext indicates an expected call of DescribeAnomalyDetectionExecutionsPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetectionExecutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectionExecutionsPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetectionExecutionsPagesWithContext), varargs...)
}

// DescribeAnomalyDetectionExecutionsRequest mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetectionExecutionsRequest(arg0 *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput) (*request.Request, *lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectionExecutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput)
	return ret0, ret1
}

// DescribeAnomalyDetectionExecutionsRequest indicates an expected call of DescribeAnomalyDetectionExecutionsRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetectionExecutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectionExecutionsRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetectionExecutionsRequest), arg0)
}

// DescribeAnomalyDetectionExecutionsWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetectionExecutionsWithContext(arg0 context.Context, arg1 *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput, arg2 ...request.Option) (*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectionExecutionsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAnomalyDetectionExecutionsWithContext indicates an expected call of DescribeAnomalyDetectionExecutionsWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetectionExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectionExecutionsWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetectionExecutionsWithContext), varargs...)
}

// DescribeAnomalyDetector mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetector(arg0 *lookoutmetrics.DescribeAnomalyDetectorInput) (*lookoutmetrics.DescribeAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAnomalyDetector", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAnomalyDetector indicates an expected call of DescribeAnomalyDetector.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetector", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetector), arg0)
}

// DescribeAnomalyDetectorRequest mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetectorRequest(arg0 *lookoutmetrics.DescribeAnomalyDetectorInput) (*request.Request, *lookoutmetrics.DescribeAnomalyDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.DescribeAnomalyDetectorOutput)
	return ret0, ret1
}

// DescribeAnomalyDetectorRequest indicates an expected call of DescribeAnomalyDetectorRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectorRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetectorRequest), arg0)
}

// DescribeAnomalyDetectorWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DescribeAnomalyDetectorWithContext(arg0 context.Context, arg1 *lookoutmetrics.DescribeAnomalyDetectorInput, arg2 ...request.Option) (*lookoutmetrics.DescribeAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAnomalyDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAnomalyDetectorWithContext indicates an expected call of DescribeAnomalyDetectorWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeAnomalyDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAnomalyDetectorWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeAnomalyDetectorWithContext), varargs...)
}

// DescribeMetricSet mocks base method.
func (m *MockLookoutMetricsAPI) DescribeMetricSet(arg0 *lookoutmetrics.DescribeMetricSetInput) (*lookoutmetrics.DescribeMetricSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMetricSet", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeMetricSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMetricSet indicates an expected call of DescribeMetricSet.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeMetricSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMetricSet", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeMetricSet), arg0)
}

// DescribeMetricSetRequest mocks base method.
func (m *MockLookoutMetricsAPI) DescribeMetricSetRequest(arg0 *lookoutmetrics.DescribeMetricSetInput) (*request.Request, *lookoutmetrics.DescribeMetricSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMetricSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.DescribeMetricSetOutput)
	return ret0, ret1
}

// DescribeMetricSetRequest indicates an expected call of DescribeMetricSetRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeMetricSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMetricSetRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeMetricSetRequest), arg0)
}

// DescribeMetricSetWithContext mocks base method.
func (m *MockLookoutMetricsAPI) DescribeMetricSetWithContext(arg0 context.Context, arg1 *lookoutmetrics.DescribeMetricSetInput, arg2 ...request.Option) (*lookoutmetrics.DescribeMetricSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMetricSetWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.DescribeMetricSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMetricSetWithContext indicates an expected call of DescribeMetricSetWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) DescribeMetricSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMetricSetWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).DescribeMetricSetWithContext), varargs...)
}

// GetAnomalyGroup mocks base method.
func (m *MockLookoutMetricsAPI) GetAnomalyGroup(arg0 *lookoutmetrics.GetAnomalyGroupInput) (*lookoutmetrics.GetAnomalyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnomalyGroup", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.GetAnomalyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnomalyGroup indicates an expected call of GetAnomalyGroup.
func (mr *MockLookoutMetricsAPIMockRecorder) GetAnomalyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnomalyGroup", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetAnomalyGroup), arg0)
}

// GetAnomalyGroupRequest mocks base method.
func (m *MockLookoutMetricsAPI) GetAnomalyGroupRequest(arg0 *lookoutmetrics.GetAnomalyGroupInput) (*request.Request, *lookoutmetrics.GetAnomalyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnomalyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.GetAnomalyGroupOutput)
	return ret0, ret1
}

// GetAnomalyGroupRequest indicates an expected call of GetAnomalyGroupRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) GetAnomalyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnomalyGroupRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetAnomalyGroupRequest), arg0)
}

// GetAnomalyGroupWithContext mocks base method.
func (m *MockLookoutMetricsAPI) GetAnomalyGroupWithContext(arg0 context.Context, arg1 *lookoutmetrics.GetAnomalyGroupInput, arg2 ...request.Option) (*lookoutmetrics.GetAnomalyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnomalyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.GetAnomalyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnomalyGroupWithContext indicates an expected call of GetAnomalyGroupWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) GetAnomalyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnomalyGroupWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetAnomalyGroupWithContext), varargs...)
}

// GetFeedback mocks base method.
func (m *MockLookoutMetricsAPI) GetFeedback(arg0 *lookoutmetrics.GetFeedbackInput) (*lookoutmetrics.GetFeedbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedback", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.GetFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedback indicates an expected call of GetFeedback.
func (mr *MockLookoutMetricsAPIMockRecorder) GetFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedback", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetFeedback), arg0)
}

// GetFeedbackPages mocks base method.
func (m *MockLookoutMetricsAPI) GetFeedbackPages(arg0 *lookoutmetrics.GetFeedbackInput, arg1 func(*lookoutmetrics.GetFeedbackOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbackPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFeedbackPages indicates an expected call of GetFeedbackPages.
func (mr *MockLookoutMetricsAPIMockRecorder) GetFeedbackPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetFeedbackPages), arg0, arg1)
}

// GetFeedbackPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) GetFeedbackPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.GetFeedbackInput, arg2 func(*lookoutmetrics.GetFeedbackOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedbackPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFeedbackPagesWithContext indicates an expected call of GetFeedbackPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) GetFeedbackPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetFeedbackPagesWithContext), varargs...)
}

// GetFeedbackRequest mocks base method.
func (m *MockLookoutMetricsAPI) GetFeedbackRequest(arg0 *lookoutmetrics.GetFeedbackInput) (*request.Request, *lookoutmetrics.GetFeedbackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.GetFeedbackOutput)
	return ret0, ret1
}

// GetFeedbackRequest indicates an expected call of GetFeedbackRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) GetFeedbackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetFeedbackRequest), arg0)
}

// GetFeedbackWithContext mocks base method.
func (m *MockLookoutMetricsAPI) GetFeedbackWithContext(arg0 context.Context, arg1 *lookoutmetrics.GetFeedbackInput, arg2 ...request.Option) (*lookoutmetrics.GetFeedbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedbackWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.GetFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedbackWithContext indicates an expected call of GetFeedbackWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) GetFeedbackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetFeedbackWithContext), varargs...)
}

// GetSampleData mocks base method.
func (m *MockLookoutMetricsAPI) GetSampleData(arg0 *lookoutmetrics.GetSampleDataInput) (*lookoutmetrics.GetSampleDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampleData", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.GetSampleDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampleData indicates an expected call of GetSampleData.
func (mr *MockLookoutMetricsAPIMockRecorder) GetSampleData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampleData", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetSampleData), arg0)
}

// GetSampleDataRequest mocks base method.
func (m *MockLookoutMetricsAPI) GetSampleDataRequest(arg0 *lookoutmetrics.GetSampleDataInput) (*request.Request, *lookoutmetrics.GetSampleDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampleDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.GetSampleDataOutput)
	return ret0, ret1
}

// GetSampleDataRequest indicates an expected call of GetSampleDataRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) GetSampleDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampleDataRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetSampleDataRequest), arg0)
}

// GetSampleDataWithContext mocks base method.
func (m *MockLookoutMetricsAPI) GetSampleDataWithContext(arg0 context.Context, arg1 *lookoutmetrics.GetSampleDataInput, arg2 ...request.Option) (*lookoutmetrics.GetSampleDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSampleDataWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.GetSampleDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampleDataWithContext indicates an expected call of GetSampleDataWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) GetSampleDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampleDataWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).GetSampleDataWithContext), varargs...)
}

// ListAlerts mocks base method.
func (m *MockLookoutMetricsAPI) ListAlerts(arg0 *lookoutmetrics.ListAlertsInput) (*lookoutmetrics.ListAlertsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlerts", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ListAlertsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlerts indicates an expected call of ListAlerts.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAlerts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlerts", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAlerts), arg0)
}

// ListAlertsPages mocks base method.
func (m *MockLookoutMetricsAPI) ListAlertsPages(arg0 *lookoutmetrics.ListAlertsInput, arg1 func(*lookoutmetrics.ListAlertsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAlertsPages indicates an expected call of ListAlertsPages.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAlertsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAlertsPages), arg0, arg1)
}

// ListAlertsPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAlertsPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAlertsInput, arg2 func(*lookoutmetrics.ListAlertsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAlertsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAlertsPagesWithContext indicates an expected call of ListAlertsPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAlertsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAlertsPagesWithContext), varargs...)
}

// ListAlertsRequest mocks base method.
func (m *MockLookoutMetricsAPI) ListAlertsRequest(arg0 *lookoutmetrics.ListAlertsInput) (*request.Request, *lookoutmetrics.ListAlertsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ListAlertsOutput)
	return ret0, ret1
}

// ListAlertsRequest indicates an expected call of ListAlertsRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAlertsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAlertsRequest), arg0)
}

// ListAlertsWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAlertsWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAlertsInput, arg2 ...request.Option) (*lookoutmetrics.ListAlertsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAlertsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ListAlertsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlertsWithContext indicates an expected call of ListAlertsWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAlertsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAlertsWithContext), varargs...)
}

// ListAnomalyDetectors mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyDetectors(arg0 *lookoutmetrics.ListAnomalyDetectorsInput) (*lookoutmetrics.ListAnomalyDetectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyDetectors", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyDetectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyDetectors indicates an expected call of ListAnomalyDetectors.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyDetectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyDetectors", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyDetectors), arg0)
}

// ListAnomalyDetectorsPages mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyDetectorsPages(arg0 *lookoutmetrics.ListAnomalyDetectorsInput, arg1 func(*lookoutmetrics.ListAnomalyDetectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyDetectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyDetectorsPages indicates an expected call of ListAnomalyDetectorsPages.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyDetectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyDetectorsPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyDetectorsPages), arg0, arg1)
}

// ListAnomalyDetectorsPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyDetectorsPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyDetectorsInput, arg2 func(*lookoutmetrics.ListAnomalyDetectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyDetectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyDetectorsPagesWithContext indicates an expected call of ListAnomalyDetectorsPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyDetectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyDetectorsPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyDetectorsPagesWithContext), varargs...)
}

// ListAnomalyDetectorsRequest mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyDetectorsRequest(arg0 *lookoutmetrics.ListAnomalyDetectorsInput) (*request.Request, *lookoutmetrics.ListAnomalyDetectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyDetectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ListAnomalyDetectorsOutput)
	return ret0, ret1
}

// ListAnomalyDetectorsRequest indicates an expected call of ListAnomalyDetectorsRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyDetectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyDetectorsRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyDetectorsRequest), arg0)
}

// ListAnomalyDetectorsWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyDetectorsWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyDetectorsInput, arg2 ...request.Option) (*lookoutmetrics.ListAnomalyDetectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyDetectorsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyDetectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyDetectorsWithContext indicates an expected call of ListAnomalyDetectorsWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyDetectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyDetectorsWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyDetectorsWithContext), varargs...)
}

// ListAnomalyGroupRelatedMetrics mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupRelatedMetrics(arg0 *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput) (*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupRelatedMetrics", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyGroupRelatedMetrics indicates an expected call of ListAnomalyGroupRelatedMetrics.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupRelatedMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupRelatedMetrics", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupRelatedMetrics), arg0)
}

// ListAnomalyGroupRelatedMetricsPages mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupRelatedMetricsPages(arg0 *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput, arg1 func(*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupRelatedMetricsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyGroupRelatedMetricsPages indicates an expected call of ListAnomalyGroupRelatedMetricsPages.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupRelatedMetricsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupRelatedMetricsPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupRelatedMetricsPages), arg0, arg1)
}

// ListAnomalyGroupRelatedMetricsPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupRelatedMetricsPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput, arg2 func(*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyGroupRelatedMetricsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyGroupRelatedMetricsPagesWithContext indicates an expected call of ListAnomalyGroupRelatedMetricsPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupRelatedMetricsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupRelatedMetricsPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupRelatedMetricsPagesWithContext), varargs...)
}

// ListAnomalyGroupRelatedMetricsRequest mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupRelatedMetricsRequest(arg0 *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput) (*request.Request, *lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupRelatedMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput)
	return ret0, ret1
}

// ListAnomalyGroupRelatedMetricsRequest indicates an expected call of ListAnomalyGroupRelatedMetricsRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupRelatedMetricsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupRelatedMetricsRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupRelatedMetricsRequest), arg0)
}

// ListAnomalyGroupRelatedMetricsWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupRelatedMetricsWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput, arg2 ...request.Option) (*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyGroupRelatedMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyGroupRelatedMetricsWithContext indicates an expected call of ListAnomalyGroupRelatedMetricsWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupRelatedMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupRelatedMetricsWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupRelatedMetricsWithContext), varargs...)
}

// ListAnomalyGroupSummaries mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupSummaries(arg0 *lookoutmetrics.ListAnomalyGroupSummariesInput) (*lookoutmetrics.ListAnomalyGroupSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupSummaries", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyGroupSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyGroupSummaries indicates an expected call of ListAnomalyGroupSummaries.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupSummaries", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupSummaries), arg0)
}

// ListAnomalyGroupSummariesPages mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupSummariesPages(arg0 *lookoutmetrics.ListAnomalyGroupSummariesInput, arg1 func(*lookoutmetrics.ListAnomalyGroupSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyGroupSummariesPages indicates an expected call of ListAnomalyGroupSummariesPages.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupSummariesPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupSummariesPages), arg0, arg1)
}

// ListAnomalyGroupSummariesPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupSummariesPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyGroupSummariesInput, arg2 func(*lookoutmetrics.ListAnomalyGroupSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyGroupSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyGroupSummariesPagesWithContext indicates an expected call of ListAnomalyGroupSummariesPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupSummariesPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupSummariesPagesWithContext), varargs...)
}

// ListAnomalyGroupSummariesRequest mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupSummariesRequest(arg0 *lookoutmetrics.ListAnomalyGroupSummariesInput) (*request.Request, *lookoutmetrics.ListAnomalyGroupSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ListAnomalyGroupSummariesOutput)
	return ret0, ret1
}

// ListAnomalyGroupSummariesRequest indicates an expected call of ListAnomalyGroupSummariesRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupSummariesRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupSummariesRequest), arg0)
}

// ListAnomalyGroupSummariesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupSummariesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyGroupSummariesInput, arg2 ...request.Option) (*lookoutmetrics.ListAnomalyGroupSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyGroupSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyGroupSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyGroupSummariesWithContext indicates an expected call of ListAnomalyGroupSummariesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupSummariesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupSummariesWithContext), varargs...)
}

// ListAnomalyGroupTimeSeries mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupTimeSeries(arg0 *lookoutmetrics.ListAnomalyGroupTimeSeriesInput) (*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupTimeSeries", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyGroupTimeSeries indicates an expected call of ListAnomalyGroupTimeSeries.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupTimeSeries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupTimeSeries", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupTimeSeries), arg0)
}

// ListAnomalyGroupTimeSeriesPages mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupTimeSeriesPages(arg0 *lookoutmetrics.ListAnomalyGroupTimeSeriesInput, arg1 func(*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupTimeSeriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyGroupTimeSeriesPages indicates an expected call of ListAnomalyGroupTimeSeriesPages.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupTimeSeriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupTimeSeriesPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupTimeSeriesPages), arg0, arg1)
}

// ListAnomalyGroupTimeSeriesPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupTimeSeriesPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyGroupTimeSeriesInput, arg2 func(*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyGroupTimeSeriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnomalyGroupTimeSeriesPagesWithContext indicates an expected call of ListAnomalyGroupTimeSeriesPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupTimeSeriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupTimeSeriesPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupTimeSeriesPagesWithContext), varargs...)
}

// ListAnomalyGroupTimeSeriesRequest mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupTimeSeriesRequest(arg0 *lookoutmetrics.ListAnomalyGroupTimeSeriesInput) (*request.Request, *lookoutmetrics.ListAnomalyGroupTimeSeriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnomalyGroupTimeSeriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput)
	return ret0, ret1
}

// ListAnomalyGroupTimeSeriesRequest indicates an expected call of ListAnomalyGroupTimeSeriesRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupTimeSeriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupTimeSeriesRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupTimeSeriesRequest), arg0)
}

// ListAnomalyGroupTimeSeriesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListAnomalyGroupTimeSeriesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListAnomalyGroupTimeSeriesInput, arg2 ...request.Option) (*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnomalyGroupTimeSeriesWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnomalyGroupTimeSeriesWithContext indicates an expected call of ListAnomalyGroupTimeSeriesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListAnomalyGroupTimeSeriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnomalyGroupTimeSeriesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListAnomalyGroupTimeSeriesWithContext), varargs...)
}

// ListMetricSets mocks base method.
func (m *MockLookoutMetricsAPI) ListMetricSets(arg0 *lookoutmetrics.ListMetricSetsInput) (*lookoutmetrics.ListMetricSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricSets", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ListMetricSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricSets indicates an expected call of ListMetricSets.
func (mr *MockLookoutMetricsAPIMockRecorder) ListMetricSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricSets", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListMetricSets), arg0)
}

// ListMetricSetsPages mocks base method.
func (m *MockLookoutMetricsAPI) ListMetricSetsPages(arg0 *lookoutmetrics.ListMetricSetsInput, arg1 func(*lookoutmetrics.ListMetricSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMetricSetsPages indicates an expected call of ListMetricSetsPages.
func (mr *MockLookoutMetricsAPIMockRecorder) ListMetricSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricSetsPages", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListMetricSetsPages), arg0, arg1)
}

// ListMetricSetsPagesWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListMetricSetsPagesWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListMetricSetsInput, arg2 func(*lookoutmetrics.ListMetricSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMetricSetsPagesWithContext indicates an expected call of ListMetricSetsPagesWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListMetricSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricSetsPagesWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListMetricSetsPagesWithContext), varargs...)
}

// ListMetricSetsRequest mocks base method.
func (m *MockLookoutMetricsAPI) ListMetricSetsRequest(arg0 *lookoutmetrics.ListMetricSetsInput) (*request.Request, *lookoutmetrics.ListMetricSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ListMetricSetsOutput)
	return ret0, ret1
}

// ListMetricSetsRequest indicates an expected call of ListMetricSetsRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ListMetricSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricSetsRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListMetricSetsRequest), arg0)
}

// ListMetricSetsWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListMetricSetsWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListMetricSetsInput, arg2 ...request.Option) (*lookoutmetrics.ListMetricSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricSetsWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ListMetricSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricSetsWithContext indicates an expected call of ListMetricSetsWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListMetricSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricSetsWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListMetricSetsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockLookoutMetricsAPI) ListTagsForResource(arg0 *lookoutmetrics.ListTagsForResourceInput) (*lookoutmetrics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockLookoutMetricsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockLookoutMetricsAPI) ListTagsForResourceRequest(arg0 *lookoutmetrics.ListTagsForResourceInput) (*request.Request, *lookoutmetrics.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockLookoutMetricsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *lookoutmetrics.ListTagsForResourceInput, arg2 ...request.Option) (*lookoutmetrics.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutFeedback mocks base method.
func (m *MockLookoutMetricsAPI) PutFeedback(arg0 *lookoutmetrics.PutFeedbackInput) (*lookoutmetrics.PutFeedbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeedback", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.PutFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFeedback indicates an expected call of PutFeedback.
func (mr *MockLookoutMetricsAPIMockRecorder) PutFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedback", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).PutFeedback), arg0)
}

// PutFeedbackRequest mocks base method.
func (m *MockLookoutMetricsAPI) PutFeedbackRequest(arg0 *lookoutmetrics.PutFeedbackInput) (*request.Request, *lookoutmetrics.PutFeedbackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFeedbackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.PutFeedbackOutput)
	return ret0, ret1
}

// PutFeedbackRequest indicates an expected call of PutFeedbackRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) PutFeedbackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedbackRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).PutFeedbackRequest), arg0)
}

// PutFeedbackWithContext mocks base method.
func (m *MockLookoutMetricsAPI) PutFeedbackWithContext(arg0 context.Context, arg1 *lookoutmetrics.PutFeedbackInput, arg2 ...request.Option) (*lookoutmetrics.PutFeedbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutFeedbackWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.PutFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFeedbackWithContext indicates an expected call of PutFeedbackWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) PutFeedbackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFeedbackWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).PutFeedbackWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockLookoutMetricsAPI) TagResource(arg0 *lookoutmetrics.TagResourceInput) (*lookoutmetrics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockLookoutMetricsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockLookoutMetricsAPI) TagResourceRequest(arg0 *lookoutmetrics.TagResourceInput) (*request.Request, *lookoutmetrics.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockLookoutMetricsAPI) TagResourceWithContext(arg0 context.Context, arg1 *lookoutmetrics.TagResourceInput, arg2 ...request.Option) (*lookoutmetrics.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockLookoutMetricsAPI) UntagResource(arg0 *lookoutmetrics.UntagResourceInput) (*lookoutmetrics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockLookoutMetricsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockLookoutMetricsAPI) UntagResourceRequest(arg0 *lookoutmetrics.UntagResourceInput) (*request.Request, *lookoutmetrics.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockLookoutMetricsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *lookoutmetrics.UntagResourceInput, arg2 ...request.Option) (*lookoutmetrics.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAnomalyDetector mocks base method.
func (m *MockLookoutMetricsAPI) UpdateAnomalyDetector(arg0 *lookoutmetrics.UpdateAnomalyDetectorInput) (*lookoutmetrics.UpdateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnomalyDetector", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.UpdateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnomalyDetector indicates an expected call of UpdateAnomalyDetector.
func (mr *MockLookoutMetricsAPIMockRecorder) UpdateAnomalyDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnomalyDetector", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UpdateAnomalyDetector), arg0)
}

// UpdateAnomalyDetectorRequest mocks base method.
func (m *MockLookoutMetricsAPI) UpdateAnomalyDetectorRequest(arg0 *lookoutmetrics.UpdateAnomalyDetectorInput) (*request.Request, *lookoutmetrics.UpdateAnomalyDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnomalyDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.UpdateAnomalyDetectorOutput)
	return ret0, ret1
}

// UpdateAnomalyDetectorRequest indicates an expected call of UpdateAnomalyDetectorRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) UpdateAnomalyDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnomalyDetectorRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UpdateAnomalyDetectorRequest), arg0)
}

// UpdateAnomalyDetectorWithContext mocks base method.
func (m *MockLookoutMetricsAPI) UpdateAnomalyDetectorWithContext(arg0 context.Context, arg1 *lookoutmetrics.UpdateAnomalyDetectorInput, arg2 ...request.Option) (*lookoutmetrics.UpdateAnomalyDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAnomalyDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.UpdateAnomalyDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnomalyDetectorWithContext indicates an expected call of UpdateAnomalyDetectorWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) UpdateAnomalyDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnomalyDetectorWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UpdateAnomalyDetectorWithContext), varargs...)
}

// UpdateMetricSet mocks base method.
func (m *MockLookoutMetricsAPI) UpdateMetricSet(arg0 *lookoutmetrics.UpdateMetricSetInput) (*lookoutmetrics.UpdateMetricSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricSet", arg0)
	ret0, _ := ret[0].(*lookoutmetrics.UpdateMetricSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricSet indicates an expected call of UpdateMetricSet.
func (mr *MockLookoutMetricsAPIMockRecorder) UpdateMetricSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricSet", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UpdateMetricSet), arg0)
}

// UpdateMetricSetRequest mocks base method.
func (m *MockLookoutMetricsAPI) UpdateMetricSetRequest(arg0 *lookoutmetrics.UpdateMetricSetInput) (*request.Request, *lookoutmetrics.UpdateMetricSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lookoutmetrics.UpdateMetricSetOutput)
	return ret0, ret1
}

// UpdateMetricSetRequest indicates an expected call of UpdateMetricSetRequest.
func (mr *MockLookoutMetricsAPIMockRecorder) UpdateMetricSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricSetRequest", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UpdateMetricSetRequest), arg0)
}

// UpdateMetricSetWithContext mocks base method.
func (m *MockLookoutMetricsAPI) UpdateMetricSetWithContext(arg0 context.Context, arg1 *lookoutmetrics.UpdateMetricSetInput, arg2 ...request.Option) (*lookoutmetrics.UpdateMetricSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetricSetWithContext", varargs...)
	ret0, _ := ret[0].(*lookoutmetrics.UpdateMetricSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetricSetWithContext indicates an expected call of UpdateMetricSetWithContext.
func (mr *MockLookoutMetricsAPIMockRecorder) UpdateMetricSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricSetWithContext", reflect.TypeOf((*MockLookoutMetricsAPI)(nil).UpdateMetricSetWithContext), varargs...)
}

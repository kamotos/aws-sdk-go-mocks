// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/keyspaces/keyspacesiface (interfaces: KeyspacesAPI)

// Package keyspacesmock is a generated GoMock package.
package keyspacesmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	keyspaces "github.com/aws/aws-sdk-go/service/keyspaces"
	gomock "github.com/golang/mock/gomock"
)

// MockKeyspacesAPI is a mock of KeyspacesAPI interface.
type MockKeyspacesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKeyspacesAPIMockRecorder
}

// MockKeyspacesAPIMockRecorder is the mock recorder for MockKeyspacesAPI.
type MockKeyspacesAPIMockRecorder struct {
	mock *MockKeyspacesAPI
}

// NewMockKeyspacesAPI creates a new mock instance.
func NewMockKeyspacesAPI(ctrl *gomock.Controller) *MockKeyspacesAPI {
	mock := &MockKeyspacesAPI{ctrl: ctrl}
	mock.recorder = &MockKeyspacesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyspacesAPI) EXPECT() *MockKeyspacesAPIMockRecorder {
	return m.recorder
}

// CreateKeyspace mocks base method.
func (m *MockKeyspacesAPI) CreateKeyspace(arg0 *keyspaces.CreateKeyspaceInput) (*keyspaces.CreateKeyspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyspace", arg0)
	ret0, _ := ret[0].(*keyspaces.CreateKeyspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyspace indicates an expected call of CreateKeyspace.
func (mr *MockKeyspacesAPIMockRecorder) CreateKeyspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyspace", reflect.TypeOf((*MockKeyspacesAPI)(nil).CreateKeyspace), arg0)
}

// CreateKeyspaceRequest mocks base method.
func (m *MockKeyspacesAPI) CreateKeyspaceRequest(arg0 *keyspaces.CreateKeyspaceInput) (*request.Request, *keyspaces.CreateKeyspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.CreateKeyspaceOutput)
	return ret0, ret1
}

// CreateKeyspaceRequest indicates an expected call of CreateKeyspaceRequest.
func (mr *MockKeyspacesAPIMockRecorder) CreateKeyspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyspaceRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).CreateKeyspaceRequest), arg0)
}

// CreateKeyspaceWithContext mocks base method.
func (m *MockKeyspacesAPI) CreateKeyspaceWithContext(arg0 context.Context, arg1 *keyspaces.CreateKeyspaceInput, arg2 ...request.Option) (*keyspaces.CreateKeyspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyspaceWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.CreateKeyspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyspaceWithContext indicates an expected call of CreateKeyspaceWithContext.
func (mr *MockKeyspacesAPIMockRecorder) CreateKeyspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyspaceWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).CreateKeyspaceWithContext), varargs...)
}

// CreateTable mocks base method.
func (m *MockKeyspacesAPI) CreateTable(arg0 *keyspaces.CreateTableInput) (*keyspaces.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0)
	ret0, _ := ret[0].(*keyspaces.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockKeyspacesAPIMockRecorder) CreateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockKeyspacesAPI)(nil).CreateTable), arg0)
}

// CreateTableRequest mocks base method.
func (m *MockKeyspacesAPI) CreateTableRequest(arg0 *keyspaces.CreateTableInput) (*request.Request, *keyspaces.CreateTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.CreateTableOutput)
	return ret0, ret1
}

// CreateTableRequest indicates an expected call of CreateTableRequest.
func (mr *MockKeyspacesAPIMockRecorder) CreateTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).CreateTableRequest), arg0)
}

// CreateTableWithContext mocks base method.
func (m *MockKeyspacesAPI) CreateTableWithContext(arg0 context.Context, arg1 *keyspaces.CreateTableInput, arg2 ...request.Option) (*keyspaces.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTableWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableWithContext indicates an expected call of CreateTableWithContext.
func (mr *MockKeyspacesAPIMockRecorder) CreateTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).CreateTableWithContext), varargs...)
}

// DeleteKeyspace mocks base method.
func (m *MockKeyspacesAPI) DeleteKeyspace(arg0 *keyspaces.DeleteKeyspaceInput) (*keyspaces.DeleteKeyspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyspace", arg0)
	ret0, _ := ret[0].(*keyspaces.DeleteKeyspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyspace indicates an expected call of DeleteKeyspace.
func (mr *MockKeyspacesAPIMockRecorder) DeleteKeyspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyspace", reflect.TypeOf((*MockKeyspacesAPI)(nil).DeleteKeyspace), arg0)
}

// DeleteKeyspaceRequest mocks base method.
func (m *MockKeyspacesAPI) DeleteKeyspaceRequest(arg0 *keyspaces.DeleteKeyspaceInput) (*request.Request, *keyspaces.DeleteKeyspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.DeleteKeyspaceOutput)
	return ret0, ret1
}

// DeleteKeyspaceRequest indicates an expected call of DeleteKeyspaceRequest.
func (mr *MockKeyspacesAPIMockRecorder) DeleteKeyspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyspaceRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).DeleteKeyspaceRequest), arg0)
}

// DeleteKeyspaceWithContext mocks base method.
func (m *MockKeyspacesAPI) DeleteKeyspaceWithContext(arg0 context.Context, arg1 *keyspaces.DeleteKeyspaceInput, arg2 ...request.Option) (*keyspaces.DeleteKeyspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeyspaceWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.DeleteKeyspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyspaceWithContext indicates an expected call of DeleteKeyspaceWithContext.
func (mr *MockKeyspacesAPIMockRecorder) DeleteKeyspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyspaceWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).DeleteKeyspaceWithContext), varargs...)
}

// DeleteTable mocks base method.
func (m *MockKeyspacesAPI) DeleteTable(arg0 *keyspaces.DeleteTableInput) (*keyspaces.DeleteTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", arg0)
	ret0, _ := ret[0].(*keyspaces.DeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockKeyspacesAPIMockRecorder) DeleteTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockKeyspacesAPI)(nil).DeleteTable), arg0)
}

// DeleteTableRequest mocks base method.
func (m *MockKeyspacesAPI) DeleteTableRequest(arg0 *keyspaces.DeleteTableInput) (*request.Request, *keyspaces.DeleteTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.DeleteTableOutput)
	return ret0, ret1
}

// DeleteTableRequest indicates an expected call of DeleteTableRequest.
func (mr *MockKeyspacesAPIMockRecorder) DeleteTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).DeleteTableRequest), arg0)
}

// DeleteTableWithContext mocks base method.
func (m *MockKeyspacesAPI) DeleteTableWithContext(arg0 context.Context, arg1 *keyspaces.DeleteTableInput, arg2 ...request.Option) (*keyspaces.DeleteTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTableWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.DeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTableWithContext indicates an expected call of DeleteTableWithContext.
func (mr *MockKeyspacesAPIMockRecorder) DeleteTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).DeleteTableWithContext), varargs...)
}

// GetKeyspace mocks base method.
func (m *MockKeyspacesAPI) GetKeyspace(arg0 *keyspaces.GetKeyspaceInput) (*keyspaces.GetKeyspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyspace", arg0)
	ret0, _ := ret[0].(*keyspaces.GetKeyspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyspace indicates an expected call of GetKeyspace.
func (mr *MockKeyspacesAPIMockRecorder) GetKeyspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyspace", reflect.TypeOf((*MockKeyspacesAPI)(nil).GetKeyspace), arg0)
}

// GetKeyspaceRequest mocks base method.
func (m *MockKeyspacesAPI) GetKeyspaceRequest(arg0 *keyspaces.GetKeyspaceInput) (*request.Request, *keyspaces.GetKeyspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.GetKeyspaceOutput)
	return ret0, ret1
}

// GetKeyspaceRequest indicates an expected call of GetKeyspaceRequest.
func (mr *MockKeyspacesAPIMockRecorder) GetKeyspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyspaceRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).GetKeyspaceRequest), arg0)
}

// GetKeyspaceWithContext mocks base method.
func (m *MockKeyspacesAPI) GetKeyspaceWithContext(arg0 context.Context, arg1 *keyspaces.GetKeyspaceInput, arg2 ...request.Option) (*keyspaces.GetKeyspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyspaceWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.GetKeyspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyspaceWithContext indicates an expected call of GetKeyspaceWithContext.
func (mr *MockKeyspacesAPIMockRecorder) GetKeyspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyspaceWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).GetKeyspaceWithContext), varargs...)
}

// GetTable mocks base method.
func (m *MockKeyspacesAPI) GetTable(arg0 *keyspaces.GetTableInput) (*keyspaces.GetTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", arg0)
	ret0, _ := ret[0].(*keyspaces.GetTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable.
func (mr *MockKeyspacesAPIMockRecorder) GetTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockKeyspacesAPI)(nil).GetTable), arg0)
}

// GetTableRequest mocks base method.
func (m *MockKeyspacesAPI) GetTableRequest(arg0 *keyspaces.GetTableInput) (*request.Request, *keyspaces.GetTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.GetTableOutput)
	return ret0, ret1
}

// GetTableRequest indicates an expected call of GetTableRequest.
func (mr *MockKeyspacesAPIMockRecorder) GetTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).GetTableRequest), arg0)
}

// GetTableWithContext mocks base method.
func (m *MockKeyspacesAPI) GetTableWithContext(arg0 context.Context, arg1 *keyspaces.GetTableInput, arg2 ...request.Option) (*keyspaces.GetTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.GetTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableWithContext indicates an expected call of GetTableWithContext.
func (mr *MockKeyspacesAPIMockRecorder) GetTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).GetTableWithContext), varargs...)
}

// ListKeyspaces mocks base method.
func (m *MockKeyspacesAPI) ListKeyspaces(arg0 *keyspaces.ListKeyspacesInput) (*keyspaces.ListKeyspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyspaces", arg0)
	ret0, _ := ret[0].(*keyspaces.ListKeyspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyspaces indicates an expected call of ListKeyspaces.
func (mr *MockKeyspacesAPIMockRecorder) ListKeyspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyspaces", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListKeyspaces), arg0)
}

// ListKeyspacesPages mocks base method.
func (m *MockKeyspacesAPI) ListKeyspacesPages(arg0 *keyspaces.ListKeyspacesInput, arg1 func(*keyspaces.ListKeyspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeyspacesPages indicates an expected call of ListKeyspacesPages.
func (mr *MockKeyspacesAPIMockRecorder) ListKeyspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyspacesPages", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListKeyspacesPages), arg0, arg1)
}

// ListKeyspacesPagesWithContext mocks base method.
func (m *MockKeyspacesAPI) ListKeyspacesPagesWithContext(arg0 context.Context, arg1 *keyspaces.ListKeyspacesInput, arg2 func(*keyspaces.ListKeyspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeyspacesPagesWithContext indicates an expected call of ListKeyspacesPagesWithContext.
func (mr *MockKeyspacesAPIMockRecorder) ListKeyspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyspacesPagesWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListKeyspacesPagesWithContext), varargs...)
}

// ListKeyspacesRequest mocks base method.
func (m *MockKeyspacesAPI) ListKeyspacesRequest(arg0 *keyspaces.ListKeyspacesInput) (*request.Request, *keyspaces.ListKeyspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.ListKeyspacesOutput)
	return ret0, ret1
}

// ListKeyspacesRequest indicates an expected call of ListKeyspacesRequest.
func (mr *MockKeyspacesAPIMockRecorder) ListKeyspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyspacesRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListKeyspacesRequest), arg0)
}

// ListKeyspacesWithContext mocks base method.
func (m *MockKeyspacesAPI) ListKeyspacesWithContext(arg0 context.Context, arg1 *keyspaces.ListKeyspacesInput, arg2 ...request.Option) (*keyspaces.ListKeyspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyspacesWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.ListKeyspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyspacesWithContext indicates an expected call of ListKeyspacesWithContext.
func (mr *MockKeyspacesAPIMockRecorder) ListKeyspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyspacesWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListKeyspacesWithContext), varargs...)
}

// ListTables mocks base method.
func (m *MockKeyspacesAPI) ListTables(arg0 *keyspaces.ListTablesInput) (*keyspaces.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", arg0)
	ret0, _ := ret[0].(*keyspaces.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockKeyspacesAPIMockRecorder) ListTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTables), arg0)
}

// ListTablesPages mocks base method.
func (m *MockKeyspacesAPI) ListTablesPages(arg0 *keyspaces.ListTablesInput, arg1 func(*keyspaces.ListTablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPages indicates an expected call of ListTablesPages.
func (mr *MockKeyspacesAPIMockRecorder) ListTablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPages", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTablesPages), arg0, arg1)
}

// ListTablesPagesWithContext mocks base method.
func (m *MockKeyspacesAPI) ListTablesPagesWithContext(arg0 context.Context, arg1 *keyspaces.ListTablesInput, arg2 func(*keyspaces.ListTablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPagesWithContext indicates an expected call of ListTablesPagesWithContext.
func (mr *MockKeyspacesAPIMockRecorder) ListTablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPagesWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTablesPagesWithContext), varargs...)
}

// ListTablesRequest mocks base method.
func (m *MockKeyspacesAPI) ListTablesRequest(arg0 *keyspaces.ListTablesInput) (*request.Request, *keyspaces.ListTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.ListTablesOutput)
	return ret0, ret1
}

// ListTablesRequest indicates an expected call of ListTablesRequest.
func (mr *MockKeyspacesAPIMockRecorder) ListTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTablesRequest), arg0)
}

// ListTablesWithContext mocks base method.
func (m *MockKeyspacesAPI) ListTablesWithContext(arg0 context.Context, arg1 *keyspaces.ListTablesInput, arg2 ...request.Option) (*keyspaces.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTablesWithContext indicates an expected call of ListTablesWithContext.
func (mr *MockKeyspacesAPIMockRecorder) ListTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTablesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockKeyspacesAPI) ListTagsForResource(arg0 *keyspaces.ListTagsForResourceInput) (*keyspaces.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*keyspaces.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockKeyspacesAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method.
func (m *MockKeyspacesAPI) ListTagsForResourcePages(arg0 *keyspaces.ListTagsForResourceInput, arg1 func(*keyspaces.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages.
func (mr *MockKeyspacesAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method.
func (m *MockKeyspacesAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *keyspaces.ListTagsForResourceInput, arg2 func(*keyspaces.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext.
func (mr *MockKeyspacesAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockKeyspacesAPI) ListTagsForResourceRequest(arg0 *keyspaces.ListTagsForResourceInput) (*request.Request, *keyspaces.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockKeyspacesAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockKeyspacesAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *keyspaces.ListTagsForResourceInput, arg2 ...request.Option) (*keyspaces.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockKeyspacesAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RestoreTable mocks base method.
func (m *MockKeyspacesAPI) RestoreTable(arg0 *keyspaces.RestoreTableInput) (*keyspaces.RestoreTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTable", arg0)
	ret0, _ := ret[0].(*keyspaces.RestoreTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTable indicates an expected call of RestoreTable.
func (mr *MockKeyspacesAPIMockRecorder) RestoreTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTable", reflect.TypeOf((*MockKeyspacesAPI)(nil).RestoreTable), arg0)
}

// RestoreTableRequest mocks base method.
func (m *MockKeyspacesAPI) RestoreTableRequest(arg0 *keyspaces.RestoreTableInput) (*request.Request, *keyspaces.RestoreTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.RestoreTableOutput)
	return ret0, ret1
}

// RestoreTableRequest indicates an expected call of RestoreTableRequest.
func (mr *MockKeyspacesAPIMockRecorder) RestoreTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).RestoreTableRequest), arg0)
}

// RestoreTableWithContext mocks base method.
func (m *MockKeyspacesAPI) RestoreTableWithContext(arg0 context.Context, arg1 *keyspaces.RestoreTableInput, arg2 ...request.Option) (*keyspaces.RestoreTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTableWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.RestoreTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTableWithContext indicates an expected call of RestoreTableWithContext.
func (mr *MockKeyspacesAPIMockRecorder) RestoreTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).RestoreTableWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockKeyspacesAPI) TagResource(arg0 *keyspaces.TagResourceInput) (*keyspaces.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*keyspaces.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockKeyspacesAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockKeyspacesAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockKeyspacesAPI) TagResourceRequest(arg0 *keyspaces.TagResourceInput) (*request.Request, *keyspaces.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockKeyspacesAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockKeyspacesAPI) TagResourceWithContext(arg0 context.Context, arg1 *keyspaces.TagResourceInput, arg2 ...request.Option) (*keyspaces.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockKeyspacesAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockKeyspacesAPI) UntagResource(arg0 *keyspaces.UntagResourceInput) (*keyspaces.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*keyspaces.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockKeyspacesAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockKeyspacesAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockKeyspacesAPI) UntagResourceRequest(arg0 *keyspaces.UntagResourceInput) (*request.Request, *keyspaces.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockKeyspacesAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockKeyspacesAPI) UntagResourceWithContext(arg0 context.Context, arg1 *keyspaces.UntagResourceInput, arg2 ...request.Option) (*keyspaces.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockKeyspacesAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateTable mocks base method.
func (m *MockKeyspacesAPI) UpdateTable(arg0 *keyspaces.UpdateTableInput) (*keyspaces.UpdateTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTable", arg0)
	ret0, _ := ret[0].(*keyspaces.UpdateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTable indicates an expected call of UpdateTable.
func (mr *MockKeyspacesAPIMockRecorder) UpdateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockKeyspacesAPI)(nil).UpdateTable), arg0)
}

// UpdateTableRequest mocks base method.
func (m *MockKeyspacesAPI) UpdateTableRequest(arg0 *keyspaces.UpdateTableInput) (*request.Request, *keyspaces.UpdateTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*keyspaces.UpdateTableOutput)
	return ret0, ret1
}

// UpdateTableRequest indicates an expected call of UpdateTableRequest.
func (mr *MockKeyspacesAPIMockRecorder) UpdateTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableRequest", reflect.TypeOf((*MockKeyspacesAPI)(nil).UpdateTableRequest), arg0)
}

// UpdateTableWithContext mocks base method.
func (m *MockKeyspacesAPI) UpdateTableWithContext(arg0 context.Context, arg1 *keyspaces.UpdateTableInput, arg2 ...request.Option) (*keyspaces.UpdateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTableWithContext", varargs...)
	ret0, _ := ret[0].(*keyspaces.UpdateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableWithContext indicates an expected call of UpdateTableWithContext.
func (mr *MockKeyspacesAPIMockRecorder) UpdateTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableWithContext", reflect.TypeOf((*MockKeyspacesAPI)(nil).UpdateTableWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/amplify/amplifyiface (interfaces: AmplifyAPI)

// Package amplifymock is a generated GoMock package.
package amplifymock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	amplify "github.com/aws/aws-sdk-go/service/amplify"
	gomock "github.com/golang/mock/gomock"
)

// MockAmplifyAPI is a mock of AmplifyAPI interface.
type MockAmplifyAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAmplifyAPIMockRecorder
}

// MockAmplifyAPIMockRecorder is the mock recorder for MockAmplifyAPI.
type MockAmplifyAPIMockRecorder struct {
	mock *MockAmplifyAPI
}

// NewMockAmplifyAPI creates a new mock instance.
func NewMockAmplifyAPI(ctrl *gomock.Controller) *MockAmplifyAPI {
	mock := &MockAmplifyAPI{ctrl: ctrl}
	mock.recorder = &MockAmplifyAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmplifyAPI) EXPECT() *MockAmplifyAPIMockRecorder {
	return m.recorder
}

// CreateApp mocks base method.
func (m *MockAmplifyAPI) CreateApp(arg0 *amplify.CreateAppInput) (*amplify.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", arg0)
	ret0, _ := ret[0].(*amplify.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockAmplifyAPIMockRecorder) CreateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateApp), arg0)
}

// CreateAppRequest mocks base method.
func (m *MockAmplifyAPI) CreateAppRequest(arg0 *amplify.CreateAppInput) (*request.Request, *amplify.CreateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateAppOutput)
	return ret0, ret1
}

// CreateAppRequest indicates an expected call of CreateAppRequest.
func (mr *MockAmplifyAPIMockRecorder) CreateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateAppRequest), arg0)
}

// CreateAppWithContext mocks base method.
func (m *MockAmplifyAPI) CreateAppWithContext(arg0 context.Context, arg1 *amplify.CreateAppInput, arg2 ...request.Option) (*amplify.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppWithContext indicates an expected call of CreateAppWithContext.
func (mr *MockAmplifyAPIMockRecorder) CreateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateAppWithContext), varargs...)
}

// CreateBackendEnvironment mocks base method.
func (m *MockAmplifyAPI) CreateBackendEnvironment(arg0 *amplify.CreateBackendEnvironmentInput) (*amplify.CreateBackendEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendEnvironment", arg0)
	ret0, _ := ret[0].(*amplify.CreateBackendEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendEnvironment indicates an expected call of CreateBackendEnvironment.
func (mr *MockAmplifyAPIMockRecorder) CreateBackendEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendEnvironment", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBackendEnvironment), arg0)
}

// CreateBackendEnvironmentRequest mocks base method.
func (m *MockAmplifyAPI) CreateBackendEnvironmentRequest(arg0 *amplify.CreateBackendEnvironmentInput) (*request.Request, *amplify.CreateBackendEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateBackendEnvironmentOutput)
	return ret0, ret1
}

// CreateBackendEnvironmentRequest indicates an expected call of CreateBackendEnvironmentRequest.
func (mr *MockAmplifyAPIMockRecorder) CreateBackendEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendEnvironmentRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBackendEnvironmentRequest), arg0)
}

// CreateBackendEnvironmentWithContext mocks base method.
func (m *MockAmplifyAPI) CreateBackendEnvironmentWithContext(arg0 context.Context, arg1 *amplify.CreateBackendEnvironmentInput, arg2 ...request.Option) (*amplify.CreateBackendEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackendEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateBackendEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendEnvironmentWithContext indicates an expected call of CreateBackendEnvironmentWithContext.
func (mr *MockAmplifyAPIMockRecorder) CreateBackendEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendEnvironmentWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBackendEnvironmentWithContext), varargs...)
}

// CreateBranch mocks base method.
func (m *MockAmplifyAPI) CreateBranch(arg0 *amplify.CreateBranchInput) (*amplify.CreateBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0)
	ret0, _ := ret[0].(*amplify.CreateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockAmplifyAPIMockRecorder) CreateBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBranch), arg0)
}

// CreateBranchRequest mocks base method.
func (m *MockAmplifyAPI) CreateBranchRequest(arg0 *amplify.CreateBranchInput) (*request.Request, *amplify.CreateBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateBranchOutput)
	return ret0, ret1
}

// CreateBranchRequest indicates an expected call of CreateBranchRequest.
func (mr *MockAmplifyAPIMockRecorder) CreateBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBranchRequest), arg0)
}

// CreateBranchWithContext mocks base method.
func (m *MockAmplifyAPI) CreateBranchWithContext(arg0 context.Context, arg1 *amplify.CreateBranchInput, arg2 ...request.Option) (*amplify.CreateBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranchWithContext indicates an expected call of CreateBranchWithContext.
func (mr *MockAmplifyAPIMockRecorder) CreateBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateBranchWithContext), varargs...)
}

// CreateDeployment mocks base method.
func (m *MockAmplifyAPI) CreateDeployment(arg0 *amplify.CreateDeploymentInput) (*amplify.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*amplify.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment.
func (mr *MockAmplifyAPIMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDeployment), arg0)
}

// CreateDeploymentRequest mocks base method.
func (m *MockAmplifyAPI) CreateDeploymentRequest(arg0 *amplify.CreateDeploymentInput) (*request.Request, *amplify.CreateDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateDeploymentOutput)
	return ret0, ret1
}

// CreateDeploymentRequest indicates an expected call of CreateDeploymentRequest.
func (mr *MockAmplifyAPIMockRecorder) CreateDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDeploymentRequest), arg0)
}

// CreateDeploymentWithContext mocks base method.
func (m *MockAmplifyAPI) CreateDeploymentWithContext(arg0 context.Context, arg1 *amplify.CreateDeploymentInput, arg2 ...request.Option) (*amplify.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentWithContext indicates an expected call of CreateDeploymentWithContext.
func (mr *MockAmplifyAPIMockRecorder) CreateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDeploymentWithContext), varargs...)
}

// CreateDomainAssociation mocks base method.
func (m *MockAmplifyAPI) CreateDomainAssociation(arg0 *amplify.CreateDomainAssociationInput) (*amplify.CreateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.CreateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainAssociation indicates an expected call of CreateDomainAssociation.
func (mr *MockAmplifyAPIMockRecorder) CreateDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDomainAssociation), arg0)
}

// CreateDomainAssociationRequest mocks base method.
func (m *MockAmplifyAPI) CreateDomainAssociationRequest(arg0 *amplify.CreateDomainAssociationInput) (*request.Request, *amplify.CreateDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateDomainAssociationOutput)
	return ret0, ret1
}

// CreateDomainAssociationRequest indicates an expected call of CreateDomainAssociationRequest.
func (mr *MockAmplifyAPIMockRecorder) CreateDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDomainAssociationRequest), arg0)
}

// CreateDomainAssociationWithContext mocks base method.
func (m *MockAmplifyAPI) CreateDomainAssociationWithContext(arg0 context.Context, arg1 *amplify.CreateDomainAssociationInput, arg2 ...request.Option) (*amplify.CreateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainAssociationWithContext indicates an expected call of CreateDomainAssociationWithContext.
func (mr *MockAmplifyAPIMockRecorder) CreateDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateDomainAssociationWithContext), varargs...)
}

// CreateWebhook mocks base method.
func (m *MockAmplifyAPI) CreateWebhook(arg0 *amplify.CreateWebhookInput) (*amplify.CreateWebhookOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", arg0)
	ret0, _ := ret[0].(*amplify.CreateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockAmplifyAPIMockRecorder) CreateWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateWebhook), arg0)
}

// CreateWebhookRequest mocks base method.
func (m *MockAmplifyAPI) CreateWebhookRequest(arg0 *amplify.CreateWebhookInput) (*request.Request, *amplify.CreateWebhookOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhookRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.CreateWebhookOutput)
	return ret0, ret1
}

// CreateWebhookRequest indicates an expected call of CreateWebhookRequest.
func (mr *MockAmplifyAPIMockRecorder) CreateWebhookRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateWebhookRequest), arg0)
}

// CreateWebhookWithContext mocks base method.
func (m *MockAmplifyAPI) CreateWebhookWithContext(arg0 context.Context, arg1 *amplify.CreateWebhookInput, arg2 ...request.Option) (*amplify.CreateWebhookOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebhookWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.CreateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhookWithContext indicates an expected call of CreateWebhookWithContext.
func (mr *MockAmplifyAPIMockRecorder) CreateWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).CreateWebhookWithContext), varargs...)
}

// DeleteApp mocks base method.
func (m *MockAmplifyAPI) DeleteApp(arg0 *amplify.DeleteAppInput) (*amplify.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0)
	ret0, _ := ret[0].(*amplify.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockAmplifyAPIMockRecorder) DeleteApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteApp), arg0)
}

// DeleteAppRequest mocks base method.
func (m *MockAmplifyAPI) DeleteAppRequest(arg0 *amplify.DeleteAppInput) (*request.Request, *amplify.DeleteAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteAppOutput)
	return ret0, ret1
}

// DeleteAppRequest indicates an expected call of DeleteAppRequest.
func (mr *MockAmplifyAPIMockRecorder) DeleteAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteAppRequest), arg0)
}

// DeleteAppWithContext mocks base method.
func (m *MockAmplifyAPI) DeleteAppWithContext(arg0 context.Context, arg1 *amplify.DeleteAppInput, arg2 ...request.Option) (*amplify.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppWithContext indicates an expected call of DeleteAppWithContext.
func (mr *MockAmplifyAPIMockRecorder) DeleteAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteAppWithContext), varargs...)
}

// DeleteBackendEnvironment mocks base method.
func (m *MockAmplifyAPI) DeleteBackendEnvironment(arg0 *amplify.DeleteBackendEnvironmentInput) (*amplify.DeleteBackendEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendEnvironment", arg0)
	ret0, _ := ret[0].(*amplify.DeleteBackendEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendEnvironment indicates an expected call of DeleteBackendEnvironment.
func (mr *MockAmplifyAPIMockRecorder) DeleteBackendEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendEnvironment", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBackendEnvironment), arg0)
}

// DeleteBackendEnvironmentRequest mocks base method.
func (m *MockAmplifyAPI) DeleteBackendEnvironmentRequest(arg0 *amplify.DeleteBackendEnvironmentInput) (*request.Request, *amplify.DeleteBackendEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteBackendEnvironmentOutput)
	return ret0, ret1
}

// DeleteBackendEnvironmentRequest indicates an expected call of DeleteBackendEnvironmentRequest.
func (mr *MockAmplifyAPIMockRecorder) DeleteBackendEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendEnvironmentRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBackendEnvironmentRequest), arg0)
}

// DeleteBackendEnvironmentWithContext mocks base method.
func (m *MockAmplifyAPI) DeleteBackendEnvironmentWithContext(arg0 context.Context, arg1 *amplify.DeleteBackendEnvironmentInput, arg2 ...request.Option) (*amplify.DeleteBackendEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackendEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteBackendEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendEnvironmentWithContext indicates an expected call of DeleteBackendEnvironmentWithContext.
func (mr *MockAmplifyAPIMockRecorder) DeleteBackendEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendEnvironmentWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBackendEnvironmentWithContext), varargs...)
}

// DeleteBranch mocks base method.
func (m *MockAmplifyAPI) DeleteBranch(arg0 *amplify.DeleteBranchInput) (*amplify.DeleteBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0)
	ret0, _ := ret[0].(*amplify.DeleteBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockAmplifyAPIMockRecorder) DeleteBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBranch), arg0)
}

// DeleteBranchRequest mocks base method.
func (m *MockAmplifyAPI) DeleteBranchRequest(arg0 *amplify.DeleteBranchInput) (*request.Request, *amplify.DeleteBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteBranchOutput)
	return ret0, ret1
}

// DeleteBranchRequest indicates an expected call of DeleteBranchRequest.
func (mr *MockAmplifyAPIMockRecorder) DeleteBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBranchRequest), arg0)
}

// DeleteBranchWithContext mocks base method.
func (m *MockAmplifyAPI) DeleteBranchWithContext(arg0 context.Context, arg1 *amplify.DeleteBranchInput, arg2 ...request.Option) (*amplify.DeleteBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranchWithContext indicates an expected call of DeleteBranchWithContext.
func (mr *MockAmplifyAPIMockRecorder) DeleteBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteBranchWithContext), varargs...)
}

// DeleteDomainAssociation mocks base method.
func (m *MockAmplifyAPI) DeleteDomainAssociation(arg0 *amplify.DeleteDomainAssociationInput) (*amplify.DeleteDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.DeleteDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainAssociation indicates an expected call of DeleteDomainAssociation.
func (mr *MockAmplifyAPIMockRecorder) DeleteDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteDomainAssociation), arg0)
}

// DeleteDomainAssociationRequest mocks base method.
func (m *MockAmplifyAPI) DeleteDomainAssociationRequest(arg0 *amplify.DeleteDomainAssociationInput) (*request.Request, *amplify.DeleteDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteDomainAssociationOutput)
	return ret0, ret1
}

// DeleteDomainAssociationRequest indicates an expected call of DeleteDomainAssociationRequest.
func (mr *MockAmplifyAPIMockRecorder) DeleteDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteDomainAssociationRequest), arg0)
}

// DeleteDomainAssociationWithContext mocks base method.
func (m *MockAmplifyAPI) DeleteDomainAssociationWithContext(arg0 context.Context, arg1 *amplify.DeleteDomainAssociationInput, arg2 ...request.Option) (*amplify.DeleteDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainAssociationWithContext indicates an expected call of DeleteDomainAssociationWithContext.
func (mr *MockAmplifyAPIMockRecorder) DeleteDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteDomainAssociationWithContext), varargs...)
}

// DeleteJob mocks base method.
func (m *MockAmplifyAPI) DeleteJob(arg0 *amplify.DeleteJobInput) (*amplify.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*amplify.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockAmplifyAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method.
func (m *MockAmplifyAPI) DeleteJobRequest(arg0 *amplify.DeleteJobInput) (*request.Request, *amplify.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest.
func (mr *MockAmplifyAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method.
func (m *MockAmplifyAPI) DeleteJobWithContext(arg0 context.Context, arg1 *amplify.DeleteJobInput, arg2 ...request.Option) (*amplify.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext.
func (mr *MockAmplifyAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteWebhook mocks base method.
func (m *MockAmplifyAPI) DeleteWebhook(arg0 *amplify.DeleteWebhookInput) (*amplify.DeleteWebhookOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", arg0)
	ret0, _ := ret[0].(*amplify.DeleteWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockAmplifyAPIMockRecorder) DeleteWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteWebhook), arg0)
}

// DeleteWebhookRequest mocks base method.
func (m *MockAmplifyAPI) DeleteWebhookRequest(arg0 *amplify.DeleteWebhookInput) (*request.Request, *amplify.DeleteWebhookOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhookRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.DeleteWebhookOutput)
	return ret0, ret1
}

// DeleteWebhookRequest indicates an expected call of DeleteWebhookRequest.
func (mr *MockAmplifyAPIMockRecorder) DeleteWebhookRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteWebhookRequest), arg0)
}

// DeleteWebhookWithContext mocks base method.
func (m *MockAmplifyAPI) DeleteWebhookWithContext(arg0 context.Context, arg1 *amplify.DeleteWebhookInput, arg2 ...request.Option) (*amplify.DeleteWebhookOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWebhookWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.DeleteWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebhookWithContext indicates an expected call of DeleteWebhookWithContext.
func (mr *MockAmplifyAPIMockRecorder) DeleteWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).DeleteWebhookWithContext), varargs...)
}

// GenerateAccessLogs mocks base method.
func (m *MockAmplifyAPI) GenerateAccessLogs(arg0 *amplify.GenerateAccessLogsInput) (*amplify.GenerateAccessLogsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessLogs", arg0)
	ret0, _ := ret[0].(*amplify.GenerateAccessLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessLogs indicates an expected call of GenerateAccessLogs.
func (mr *MockAmplifyAPIMockRecorder) GenerateAccessLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessLogs", reflect.TypeOf((*MockAmplifyAPI)(nil).GenerateAccessLogs), arg0)
}

// GenerateAccessLogsRequest mocks base method.
func (m *MockAmplifyAPI) GenerateAccessLogsRequest(arg0 *amplify.GenerateAccessLogsInput) (*request.Request, *amplify.GenerateAccessLogsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessLogsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GenerateAccessLogsOutput)
	return ret0, ret1
}

// GenerateAccessLogsRequest indicates an expected call of GenerateAccessLogsRequest.
func (mr *MockAmplifyAPIMockRecorder) GenerateAccessLogsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessLogsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GenerateAccessLogsRequest), arg0)
}

// GenerateAccessLogsWithContext mocks base method.
func (m *MockAmplifyAPI) GenerateAccessLogsWithContext(arg0 context.Context, arg1 *amplify.GenerateAccessLogsInput, arg2 ...request.Option) (*amplify.GenerateAccessLogsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateAccessLogsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GenerateAccessLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessLogsWithContext indicates an expected call of GenerateAccessLogsWithContext.
func (mr *MockAmplifyAPIMockRecorder) GenerateAccessLogsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessLogsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GenerateAccessLogsWithContext), varargs...)
}

// GetApp mocks base method.
func (m *MockAmplifyAPI) GetApp(arg0 *amplify.GetAppInput) (*amplify.GetAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0)
	ret0, _ := ret[0].(*amplify.GetAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockAmplifyAPIMockRecorder) GetApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAmplifyAPI)(nil).GetApp), arg0)
}

// GetAppRequest mocks base method.
func (m *MockAmplifyAPI) GetAppRequest(arg0 *amplify.GetAppInput) (*request.Request, *amplify.GetAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetAppOutput)
	return ret0, ret1
}

// GetAppRequest indicates an expected call of GetAppRequest.
func (mr *MockAmplifyAPIMockRecorder) GetAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetAppRequest), arg0)
}

// GetAppWithContext mocks base method.
func (m *MockAmplifyAPI) GetAppWithContext(arg0 context.Context, arg1 *amplify.GetAppInput, arg2 ...request.Option) (*amplify.GetAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppWithContext indicates an expected call of GetAppWithContext.
func (mr *MockAmplifyAPIMockRecorder) GetAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetAppWithContext), varargs...)
}

// GetArtifactUrl mocks base method.
func (m *MockAmplifyAPI) GetArtifactUrl(arg0 *amplify.GetArtifactUrlInput) (*amplify.GetArtifactUrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactUrl", arg0)
	ret0, _ := ret[0].(*amplify.GetArtifactUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactUrl indicates an expected call of GetArtifactUrl.
func (mr *MockAmplifyAPIMockRecorder) GetArtifactUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactUrl", reflect.TypeOf((*MockAmplifyAPI)(nil).GetArtifactUrl), arg0)
}

// GetArtifactUrlRequest mocks base method.
func (m *MockAmplifyAPI) GetArtifactUrlRequest(arg0 *amplify.GetArtifactUrlInput) (*request.Request, *amplify.GetArtifactUrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactUrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetArtifactUrlOutput)
	return ret0, ret1
}

// GetArtifactUrlRequest indicates an expected call of GetArtifactUrlRequest.
func (mr *MockAmplifyAPIMockRecorder) GetArtifactUrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactUrlRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetArtifactUrlRequest), arg0)
}

// GetArtifactUrlWithContext mocks base method.
func (m *MockAmplifyAPI) GetArtifactUrlWithContext(arg0 context.Context, arg1 *amplify.GetArtifactUrlInput, arg2 ...request.Option) (*amplify.GetArtifactUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifactUrlWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetArtifactUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactUrlWithContext indicates an expected call of GetArtifactUrlWithContext.
func (mr *MockAmplifyAPIMockRecorder) GetArtifactUrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactUrlWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetArtifactUrlWithContext), varargs...)
}

// GetBackendEnvironment mocks base method.
func (m *MockAmplifyAPI) GetBackendEnvironment(arg0 *amplify.GetBackendEnvironmentInput) (*amplify.GetBackendEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendEnvironment", arg0)
	ret0, _ := ret[0].(*amplify.GetBackendEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendEnvironment indicates an expected call of GetBackendEnvironment.
func (mr *MockAmplifyAPIMockRecorder) GetBackendEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendEnvironment", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBackendEnvironment), arg0)
}

// GetBackendEnvironmentRequest mocks base method.
func (m *MockAmplifyAPI) GetBackendEnvironmentRequest(arg0 *amplify.GetBackendEnvironmentInput) (*request.Request, *amplify.GetBackendEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetBackendEnvironmentOutput)
	return ret0, ret1
}

// GetBackendEnvironmentRequest indicates an expected call of GetBackendEnvironmentRequest.
func (mr *MockAmplifyAPIMockRecorder) GetBackendEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendEnvironmentRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBackendEnvironmentRequest), arg0)
}

// GetBackendEnvironmentWithContext mocks base method.
func (m *MockAmplifyAPI) GetBackendEnvironmentWithContext(arg0 context.Context, arg1 *amplify.GetBackendEnvironmentInput, arg2 ...request.Option) (*amplify.GetBackendEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackendEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetBackendEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendEnvironmentWithContext indicates an expected call of GetBackendEnvironmentWithContext.
func (mr *MockAmplifyAPIMockRecorder) GetBackendEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendEnvironmentWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBackendEnvironmentWithContext), varargs...)
}

// GetBranch mocks base method.
func (m *MockAmplifyAPI) GetBranch(arg0 *amplify.GetBranchInput) (*amplify.GetBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0)
	ret0, _ := ret[0].(*amplify.GetBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockAmplifyAPIMockRecorder) GetBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBranch), arg0)
}

// GetBranchRequest mocks base method.
func (m *MockAmplifyAPI) GetBranchRequest(arg0 *amplify.GetBranchInput) (*request.Request, *amplify.GetBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetBranchOutput)
	return ret0, ret1
}

// GetBranchRequest indicates an expected call of GetBranchRequest.
func (mr *MockAmplifyAPIMockRecorder) GetBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBranchRequest), arg0)
}

// GetBranchWithContext mocks base method.
func (m *MockAmplifyAPI) GetBranchWithContext(arg0 context.Context, arg1 *amplify.GetBranchInput, arg2 ...request.Option) (*amplify.GetBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchWithContext indicates an expected call of GetBranchWithContext.
func (mr *MockAmplifyAPIMockRecorder) GetBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetBranchWithContext), varargs...)
}

// GetDomainAssociation mocks base method.
func (m *MockAmplifyAPI) GetDomainAssociation(arg0 *amplify.GetDomainAssociationInput) (*amplify.GetDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.GetDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainAssociation indicates an expected call of GetDomainAssociation.
func (mr *MockAmplifyAPIMockRecorder) GetDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).GetDomainAssociation), arg0)
}

// GetDomainAssociationRequest mocks base method.
func (m *MockAmplifyAPI) GetDomainAssociationRequest(arg0 *amplify.GetDomainAssociationInput) (*request.Request, *amplify.GetDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetDomainAssociationOutput)
	return ret0, ret1
}

// GetDomainAssociationRequest indicates an expected call of GetDomainAssociationRequest.
func (mr *MockAmplifyAPIMockRecorder) GetDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetDomainAssociationRequest), arg0)
}

// GetDomainAssociationWithContext mocks base method.
func (m *MockAmplifyAPI) GetDomainAssociationWithContext(arg0 context.Context, arg1 *amplify.GetDomainAssociationInput, arg2 ...request.Option) (*amplify.GetDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainAssociationWithContext indicates an expected call of GetDomainAssociationWithContext.
func (mr *MockAmplifyAPIMockRecorder) GetDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetDomainAssociationWithContext), varargs...)
}

// GetJob mocks base method.
func (m *MockAmplifyAPI) GetJob(arg0 *amplify.GetJobInput) (*amplify.GetJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*amplify.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockAmplifyAPIMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockAmplifyAPI)(nil).GetJob), arg0)
}

// GetJobRequest mocks base method.
func (m *MockAmplifyAPI) GetJobRequest(arg0 *amplify.GetJobInput) (*request.Request, *amplify.GetJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetJobOutput)
	return ret0, ret1
}

// GetJobRequest indicates an expected call of GetJobRequest.
func (mr *MockAmplifyAPIMockRecorder) GetJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetJobRequest), arg0)
}

// GetJobWithContext mocks base method.
func (m *MockAmplifyAPI) GetJobWithContext(arg0 context.Context, arg1 *amplify.GetJobInput, arg2 ...request.Option) (*amplify.GetJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobWithContext indicates an expected call of GetJobWithContext.
func (mr *MockAmplifyAPIMockRecorder) GetJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetJobWithContext), varargs...)
}

// GetWebhook mocks base method.
func (m *MockAmplifyAPI) GetWebhook(arg0 *amplify.GetWebhookInput) (*amplify.GetWebhookOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", arg0)
	ret0, _ := ret[0].(*amplify.GetWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockAmplifyAPIMockRecorder) GetWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockAmplifyAPI)(nil).GetWebhook), arg0)
}

// GetWebhookRequest mocks base method.
func (m *MockAmplifyAPI) GetWebhookRequest(arg0 *amplify.GetWebhookInput) (*request.Request, *amplify.GetWebhookOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.GetWebhookOutput)
	return ret0, ret1
}

// GetWebhookRequest indicates an expected call of GetWebhookRequest.
func (mr *MockAmplifyAPIMockRecorder) GetWebhookRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).GetWebhookRequest), arg0)
}

// GetWebhookWithContext mocks base method.
func (m *MockAmplifyAPI) GetWebhookWithContext(arg0 context.Context, arg1 *amplify.GetWebhookInput, arg2 ...request.Option) (*amplify.GetWebhookOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWebhookWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.GetWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookWithContext indicates an expected call of GetWebhookWithContext.
func (mr *MockAmplifyAPIMockRecorder) GetWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).GetWebhookWithContext), varargs...)
}

// ListApps mocks base method.
func (m *MockAmplifyAPI) ListApps(arg0 *amplify.ListAppsInput) (*amplify.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0)
	ret0, _ := ret[0].(*amplify.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApps indicates an expected call of ListApps.
func (mr *MockAmplifyAPIMockRecorder) ListApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockAmplifyAPI)(nil).ListApps), arg0)
}

// ListAppsRequest mocks base method.
func (m *MockAmplifyAPI) ListAppsRequest(arg0 *amplify.ListAppsInput) (*request.Request, *amplify.ListAppsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListAppsOutput)
	return ret0, ret1
}

// ListAppsRequest indicates an expected call of ListAppsRequest.
func (mr *MockAmplifyAPIMockRecorder) ListAppsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListAppsRequest), arg0)
}

// ListAppsWithContext mocks base method.
func (m *MockAmplifyAPI) ListAppsWithContext(arg0 context.Context, arg1 *amplify.ListAppsInput, arg2 ...request.Option) (*amplify.ListAppsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsWithContext indicates an expected call of ListAppsWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListAppsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListAppsWithContext), varargs...)
}

// ListArtifacts mocks base method.
func (m *MockAmplifyAPI) ListArtifacts(arg0 *amplify.ListArtifactsInput) (*amplify.ListArtifactsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifacts", arg0)
	ret0, _ := ret[0].(*amplify.ListArtifactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockAmplifyAPIMockRecorder) ListArtifacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockAmplifyAPI)(nil).ListArtifacts), arg0)
}

// ListArtifactsRequest mocks base method.
func (m *MockAmplifyAPI) ListArtifactsRequest(arg0 *amplify.ListArtifactsInput) (*request.Request, *amplify.ListArtifactsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifactsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListArtifactsOutput)
	return ret0, ret1
}

// ListArtifactsRequest indicates an expected call of ListArtifactsRequest.
func (mr *MockAmplifyAPIMockRecorder) ListArtifactsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifactsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListArtifactsRequest), arg0)
}

// ListArtifactsWithContext mocks base method.
func (m *MockAmplifyAPI) ListArtifactsWithContext(arg0 context.Context, arg1 *amplify.ListArtifactsInput, arg2 ...request.Option) (*amplify.ListArtifactsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArtifactsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListArtifactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifactsWithContext indicates an expected call of ListArtifactsWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListArtifactsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifactsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListArtifactsWithContext), varargs...)
}

// ListBackendEnvironments mocks base method.
func (m *MockAmplifyAPI) ListBackendEnvironments(arg0 *amplify.ListBackendEnvironmentsInput) (*amplify.ListBackendEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackendEnvironments", arg0)
	ret0, _ := ret[0].(*amplify.ListBackendEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackendEnvironments indicates an expected call of ListBackendEnvironments.
func (mr *MockAmplifyAPIMockRecorder) ListBackendEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendEnvironments", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBackendEnvironments), arg0)
}

// ListBackendEnvironmentsRequest mocks base method.
func (m *MockAmplifyAPI) ListBackendEnvironmentsRequest(arg0 *amplify.ListBackendEnvironmentsInput) (*request.Request, *amplify.ListBackendEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackendEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListBackendEnvironmentsOutput)
	return ret0, ret1
}

// ListBackendEnvironmentsRequest indicates an expected call of ListBackendEnvironmentsRequest.
func (mr *MockAmplifyAPIMockRecorder) ListBackendEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendEnvironmentsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBackendEnvironmentsRequest), arg0)
}

// ListBackendEnvironmentsWithContext mocks base method.
func (m *MockAmplifyAPI) ListBackendEnvironmentsWithContext(arg0 context.Context, arg1 *amplify.ListBackendEnvironmentsInput, arg2 ...request.Option) (*amplify.ListBackendEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackendEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListBackendEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackendEnvironmentsWithContext indicates an expected call of ListBackendEnvironmentsWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListBackendEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendEnvironmentsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBackendEnvironmentsWithContext), varargs...)
}

// ListBranches mocks base method.
func (m *MockAmplifyAPI) ListBranches(arg0 *amplify.ListBranchesInput) (*amplify.ListBranchesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0)
	ret0, _ := ret[0].(*amplify.ListBranchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockAmplifyAPIMockRecorder) ListBranches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBranches), arg0)
}

// ListBranchesRequest mocks base method.
func (m *MockAmplifyAPI) ListBranchesRequest(arg0 *amplify.ListBranchesInput) (*request.Request, *amplify.ListBranchesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranchesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListBranchesOutput)
	return ret0, ret1
}

// ListBranchesRequest indicates an expected call of ListBranchesRequest.
func (mr *MockAmplifyAPIMockRecorder) ListBranchesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBranchesRequest), arg0)
}

// ListBranchesWithContext mocks base method.
func (m *MockAmplifyAPI) ListBranchesWithContext(arg0 context.Context, arg1 *amplify.ListBranchesInput, arg2 ...request.Option) (*amplify.ListBranchesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBranchesWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListBranchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranchesWithContext indicates an expected call of ListBranchesWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListBranchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListBranchesWithContext), varargs...)
}

// ListDomainAssociations mocks base method.
func (m *MockAmplifyAPI) ListDomainAssociations(arg0 *amplify.ListDomainAssociationsInput) (*amplify.ListDomainAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainAssociations", arg0)
	ret0, _ := ret[0].(*amplify.ListDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainAssociations indicates an expected call of ListDomainAssociations.
func (mr *MockAmplifyAPIMockRecorder) ListDomainAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainAssociations", reflect.TypeOf((*MockAmplifyAPI)(nil).ListDomainAssociations), arg0)
}

// ListDomainAssociationsRequest mocks base method.
func (m *MockAmplifyAPI) ListDomainAssociationsRequest(arg0 *amplify.ListDomainAssociationsInput) (*request.Request, *amplify.ListDomainAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListDomainAssociationsOutput)
	return ret0, ret1
}

// ListDomainAssociationsRequest indicates an expected call of ListDomainAssociationsRequest.
func (mr *MockAmplifyAPIMockRecorder) ListDomainAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainAssociationsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListDomainAssociationsRequest), arg0)
}

// ListDomainAssociationsWithContext mocks base method.
func (m *MockAmplifyAPI) ListDomainAssociationsWithContext(arg0 context.Context, arg1 *amplify.ListDomainAssociationsInput, arg2 ...request.Option) (*amplify.ListDomainAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListDomainAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainAssociationsWithContext indicates an expected call of ListDomainAssociationsWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListDomainAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainAssociationsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListDomainAssociationsWithContext), varargs...)
}

// ListJobs mocks base method.
func (m *MockAmplifyAPI) ListJobs(arg0 *amplify.ListJobsInput) (*amplify.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*amplify.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockAmplifyAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockAmplifyAPI)(nil).ListJobs), arg0)
}

// ListJobsRequest mocks base method.
func (m *MockAmplifyAPI) ListJobsRequest(arg0 *amplify.ListJobsInput) (*request.Request, *amplify.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest.
func (mr *MockAmplifyAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method.
func (m *MockAmplifyAPI) ListJobsWithContext(arg0 context.Context, arg1 *amplify.ListJobsInput, arg2 ...request.Option) (*amplify.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListJobsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAmplifyAPI) ListTagsForResource(arg0 *amplify.ListTagsForResourceInput) (*amplify.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*amplify.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAmplifyAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAmplifyAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockAmplifyAPI) ListTagsForResourceRequest(arg0 *amplify.ListTagsForResourceInput) (*request.Request, *amplify.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockAmplifyAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockAmplifyAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *amplify.ListTagsForResourceInput, arg2 ...request.Option) (*amplify.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWebhooks mocks base method.
func (m *MockAmplifyAPI) ListWebhooks(arg0 *amplify.ListWebhooksInput) (*amplify.ListWebhooksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhooks", arg0)
	ret0, _ := ret[0].(*amplify.ListWebhooksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhooks indicates an expected call of ListWebhooks.
func (mr *MockAmplifyAPIMockRecorder) ListWebhooks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooks", reflect.TypeOf((*MockAmplifyAPI)(nil).ListWebhooks), arg0)
}

// ListWebhooksRequest mocks base method.
func (m *MockAmplifyAPI) ListWebhooksRequest(arg0 *amplify.ListWebhooksInput) (*request.Request, *amplify.ListWebhooksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhooksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.ListWebhooksOutput)
	return ret0, ret1
}

// ListWebhooksRequest indicates an expected call of ListWebhooksRequest.
func (mr *MockAmplifyAPIMockRecorder) ListWebhooksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooksRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).ListWebhooksRequest), arg0)
}

// ListWebhooksWithContext mocks base method.
func (m *MockAmplifyAPI) ListWebhooksWithContext(arg0 context.Context, arg1 *amplify.ListWebhooksInput, arg2 ...request.Option) (*amplify.ListWebhooksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebhooksWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.ListWebhooksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhooksWithContext indicates an expected call of ListWebhooksWithContext.
func (mr *MockAmplifyAPIMockRecorder) ListWebhooksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooksWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).ListWebhooksWithContext), varargs...)
}

// StartDeployment mocks base method.
func (m *MockAmplifyAPI) StartDeployment(arg0 *amplify.StartDeploymentInput) (*amplify.StartDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeployment", arg0)
	ret0, _ := ret[0].(*amplify.StartDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeployment indicates an expected call of StartDeployment.
func (mr *MockAmplifyAPIMockRecorder) StartDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeployment", reflect.TypeOf((*MockAmplifyAPI)(nil).StartDeployment), arg0)
}

// StartDeploymentRequest mocks base method.
func (m *MockAmplifyAPI) StartDeploymentRequest(arg0 *amplify.StartDeploymentInput) (*request.Request, *amplify.StartDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.StartDeploymentOutput)
	return ret0, ret1
}

// StartDeploymentRequest indicates an expected call of StartDeploymentRequest.
func (mr *MockAmplifyAPIMockRecorder) StartDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeploymentRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).StartDeploymentRequest), arg0)
}

// StartDeploymentWithContext mocks base method.
func (m *MockAmplifyAPI) StartDeploymentWithContext(arg0 context.Context, arg1 *amplify.StartDeploymentInput, arg2 ...request.Option) (*amplify.StartDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.StartDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeploymentWithContext indicates an expected call of StartDeploymentWithContext.
func (mr *MockAmplifyAPIMockRecorder) StartDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeploymentWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).StartDeploymentWithContext), varargs...)
}

// StartJob mocks base method.
func (m *MockAmplifyAPI) StartJob(arg0 *amplify.StartJobInput) (*amplify.StartJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0)
	ret0, _ := ret[0].(*amplify.StartJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockAmplifyAPIMockRecorder) StartJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockAmplifyAPI)(nil).StartJob), arg0)
}

// StartJobRequest mocks base method.
func (m *MockAmplifyAPI) StartJobRequest(arg0 *amplify.StartJobInput) (*request.Request, *amplify.StartJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.StartJobOutput)
	return ret0, ret1
}

// StartJobRequest indicates an expected call of StartJobRequest.
func (mr *MockAmplifyAPIMockRecorder) StartJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).StartJobRequest), arg0)
}

// StartJobWithContext mocks base method.
func (m *MockAmplifyAPI) StartJobWithContext(arg0 context.Context, arg1 *amplify.StartJobInput, arg2 ...request.Option) (*amplify.StartJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.StartJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobWithContext indicates an expected call of StartJobWithContext.
func (mr *MockAmplifyAPIMockRecorder) StartJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).StartJobWithContext), varargs...)
}

// StopJob mocks base method.
func (m *MockAmplifyAPI) StopJob(arg0 *amplify.StopJobInput) (*amplify.StopJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJob", arg0)
	ret0, _ := ret[0].(*amplify.StopJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJob indicates an expected call of StopJob.
func (mr *MockAmplifyAPIMockRecorder) StopJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJob", reflect.TypeOf((*MockAmplifyAPI)(nil).StopJob), arg0)
}

// StopJobRequest mocks base method.
func (m *MockAmplifyAPI) StopJobRequest(arg0 *amplify.StopJobInput) (*request.Request, *amplify.StopJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.StopJobOutput)
	return ret0, ret1
}

// StopJobRequest indicates an expected call of StopJobRequest.
func (mr *MockAmplifyAPIMockRecorder) StopJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).StopJobRequest), arg0)
}

// StopJobWithContext mocks base method.
func (m *MockAmplifyAPI) StopJobWithContext(arg0 context.Context, arg1 *amplify.StopJobInput, arg2 ...request.Option) (*amplify.StopJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.StopJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJobWithContext indicates an expected call of StopJobWithContext.
func (mr *MockAmplifyAPIMockRecorder) StopJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).StopJobWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockAmplifyAPI) TagResource(arg0 *amplify.TagResourceInput) (*amplify.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*amplify.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockAmplifyAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAmplifyAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockAmplifyAPI) TagResourceRequest(arg0 *amplify.TagResourceInput) (*request.Request, *amplify.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockAmplifyAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockAmplifyAPI) TagResourceWithContext(arg0 context.Context, arg1 *amplify.TagResourceInput, arg2 ...request.Option) (*amplify.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockAmplifyAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockAmplifyAPI) UntagResource(arg0 *amplify.UntagResourceInput) (*amplify.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*amplify.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockAmplifyAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAmplifyAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockAmplifyAPI) UntagResourceRequest(arg0 *amplify.UntagResourceInput) (*request.Request, *amplify.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockAmplifyAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockAmplifyAPI) UntagResourceWithContext(arg0 context.Context, arg1 *amplify.UntagResourceInput, arg2 ...request.Option) (*amplify.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockAmplifyAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApp mocks base method.
func (m *MockAmplifyAPI) UpdateApp(arg0 *amplify.UpdateAppInput) (*amplify.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0)
	ret0, _ := ret[0].(*amplify.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAmplifyAPIMockRecorder) UpdateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateApp), arg0)
}

// UpdateAppRequest mocks base method.
func (m *MockAmplifyAPI) UpdateAppRequest(arg0 *amplify.UpdateAppInput) (*request.Request, *amplify.UpdateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UpdateAppOutput)
	return ret0, ret1
}

// UpdateAppRequest indicates an expected call of UpdateAppRequest.
func (mr *MockAmplifyAPIMockRecorder) UpdateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateAppRequest), arg0)
}

// UpdateAppWithContext mocks base method.
func (m *MockAmplifyAPI) UpdateAppWithContext(arg0 context.Context, arg1 *amplify.UpdateAppInput, arg2 ...request.Option) (*amplify.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppWithContext indicates an expected call of UpdateAppWithContext.
func (mr *MockAmplifyAPIMockRecorder) UpdateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateAppWithContext), varargs...)
}

// UpdateBranch mocks base method.
func (m *MockAmplifyAPI) UpdateBranch(arg0 *amplify.UpdateBranchInput) (*amplify.UpdateBranchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranch", arg0)
	ret0, _ := ret[0].(*amplify.UpdateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranch indicates an expected call of UpdateBranch.
func (mr *MockAmplifyAPIMockRecorder) UpdateBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranch", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateBranch), arg0)
}

// UpdateBranchRequest mocks base method.
func (m *MockAmplifyAPI) UpdateBranchRequest(arg0 *amplify.UpdateBranchInput) (*request.Request, *amplify.UpdateBranchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBranchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UpdateBranchOutput)
	return ret0, ret1
}

// UpdateBranchRequest indicates an expected call of UpdateBranchRequest.
func (mr *MockAmplifyAPIMockRecorder) UpdateBranchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateBranchRequest), arg0)
}

// UpdateBranchWithContext mocks base method.
func (m *MockAmplifyAPI) UpdateBranchWithContext(arg0 context.Context, arg1 *amplify.UpdateBranchInput, arg2 ...request.Option) (*amplify.UpdateBranchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBranchWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UpdateBranchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBranchWithContext indicates an expected call of UpdateBranchWithContext.
func (mr *MockAmplifyAPIMockRecorder) UpdateBranchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBranchWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateBranchWithContext), varargs...)
}

// UpdateDomainAssociation mocks base method.
func (m *MockAmplifyAPI) UpdateDomainAssociation(arg0 *amplify.UpdateDomainAssociationInput) (*amplify.UpdateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainAssociation", arg0)
	ret0, _ := ret[0].(*amplify.UpdateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainAssociation indicates an expected call of UpdateDomainAssociation.
func (mr *MockAmplifyAPIMockRecorder) UpdateDomainAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainAssociation", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateDomainAssociation), arg0)
}

// UpdateDomainAssociationRequest mocks base method.
func (m *MockAmplifyAPI) UpdateDomainAssociationRequest(arg0 *amplify.UpdateDomainAssociationInput) (*request.Request, *amplify.UpdateDomainAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UpdateDomainAssociationOutput)
	return ret0, ret1
}

// UpdateDomainAssociationRequest indicates an expected call of UpdateDomainAssociationRequest.
func (mr *MockAmplifyAPIMockRecorder) UpdateDomainAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainAssociationRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateDomainAssociationRequest), arg0)
}

// UpdateDomainAssociationWithContext mocks base method.
func (m *MockAmplifyAPI) UpdateDomainAssociationWithContext(arg0 context.Context, arg1 *amplify.UpdateDomainAssociationInput, arg2 ...request.Option) (*amplify.UpdateDomainAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UpdateDomainAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainAssociationWithContext indicates an expected call of UpdateDomainAssociationWithContext.
func (mr *MockAmplifyAPIMockRecorder) UpdateDomainAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainAssociationWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateDomainAssociationWithContext), varargs...)
}

// UpdateWebhook mocks base method.
func (m *MockAmplifyAPI) UpdateWebhook(arg0 *amplify.UpdateWebhookInput) (*amplify.UpdateWebhookOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", arg0)
	ret0, _ := ret[0].(*amplify.UpdateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhook indicates an expected call of UpdateWebhook.
func (mr *MockAmplifyAPIMockRecorder) UpdateWebhook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateWebhook), arg0)
}

// UpdateWebhookRequest mocks base method.
func (m *MockAmplifyAPI) UpdateWebhookRequest(arg0 *amplify.UpdateWebhookInput) (*request.Request, *amplify.UpdateWebhookOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhookRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplify.UpdateWebhookOutput)
	return ret0, ret1
}

// UpdateWebhookRequest indicates an expected call of UpdateWebhookRequest.
func (mr *MockAmplifyAPIMockRecorder) UpdateWebhookRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhookRequest", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateWebhookRequest), arg0)
}

// UpdateWebhookWithContext mocks base method.
func (m *MockAmplifyAPI) UpdateWebhookWithContext(arg0 context.Context, arg1 *amplify.UpdateWebhookInput, arg2 ...request.Option) (*amplify.UpdateWebhookOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWebhookWithContext", varargs...)
	ret0, _ := ret[0].(*amplify.UpdateWebhookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhookWithContext indicates an expected call of UpdateWebhookWithContext.
func (mr *MockAmplifyAPIMockRecorder) UpdateWebhookWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhookWithContext", reflect.TypeOf((*MockAmplifyAPI)(nil).UpdateWebhookWithContext), varargs...)
}

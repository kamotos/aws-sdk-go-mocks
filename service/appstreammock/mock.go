// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/appstream/appstreamiface (interfaces: AppStreamAPI)

// Package appstreammock is a generated GoMock package.
package appstreammock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	appstream "github.com/aws/aws-sdk-go/service/appstream"
	gomock "github.com/golang/mock/gomock"
)

// MockAppStreamAPI is a mock of AppStreamAPI interface.
type MockAppStreamAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppStreamAPIMockRecorder
}

// MockAppStreamAPIMockRecorder is the mock recorder for MockAppStreamAPI.
type MockAppStreamAPIMockRecorder struct {
	mock *MockAppStreamAPI
}

// NewMockAppStreamAPI creates a new mock instance.
func NewMockAppStreamAPI(ctrl *gomock.Controller) *MockAppStreamAPI {
	mock := &MockAppStreamAPI{ctrl: ctrl}
	mock.recorder = &MockAppStreamAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppStreamAPI) EXPECT() *MockAppStreamAPIMockRecorder {
	return m.recorder
}

// AssociateFleet mocks base method.
func (m *MockAppStreamAPI) AssociateFleet(arg0 *appstream.AssociateFleetInput) (*appstream.AssociateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateFleet", arg0)
	ret0, _ := ret[0].(*appstream.AssociateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateFleet indicates an expected call of AssociateFleet.
func (mr *MockAppStreamAPIMockRecorder) AssociateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateFleet", reflect.TypeOf((*MockAppStreamAPI)(nil).AssociateFleet), arg0)
}

// AssociateFleetRequest mocks base method.
func (m *MockAppStreamAPI) AssociateFleetRequest(arg0 *appstream.AssociateFleetInput) (*request.Request, *appstream.AssociateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.AssociateFleetOutput)
	return ret0, ret1
}

// AssociateFleetRequest indicates an expected call of AssociateFleetRequest.
func (mr *MockAppStreamAPIMockRecorder) AssociateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateFleetRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).AssociateFleetRequest), arg0)
}

// AssociateFleetWithContext mocks base method.
func (m *MockAppStreamAPI) AssociateFleetWithContext(arg0 context.Context, arg1 *appstream.AssociateFleetInput, arg2 ...request.Option) (*appstream.AssociateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.AssociateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateFleetWithContext indicates an expected call of AssociateFleetWithContext.
func (mr *MockAppStreamAPIMockRecorder) AssociateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateFleetWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).AssociateFleetWithContext), varargs...)
}

// BatchAssociateUserStack mocks base method.
func (m *MockAppStreamAPI) BatchAssociateUserStack(arg0 *appstream.BatchAssociateUserStackInput) (*appstream.BatchAssociateUserStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateUserStack", arg0)
	ret0, _ := ret[0].(*appstream.BatchAssociateUserStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateUserStack indicates an expected call of BatchAssociateUserStack.
func (mr *MockAppStreamAPIMockRecorder) BatchAssociateUserStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateUserStack", reflect.TypeOf((*MockAppStreamAPI)(nil).BatchAssociateUserStack), arg0)
}

// BatchAssociateUserStackRequest mocks base method.
func (m *MockAppStreamAPI) BatchAssociateUserStackRequest(arg0 *appstream.BatchAssociateUserStackInput) (*request.Request, *appstream.BatchAssociateUserStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateUserStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.BatchAssociateUserStackOutput)
	return ret0, ret1
}

// BatchAssociateUserStackRequest indicates an expected call of BatchAssociateUserStackRequest.
func (mr *MockAppStreamAPIMockRecorder) BatchAssociateUserStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateUserStackRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).BatchAssociateUserStackRequest), arg0)
}

// BatchAssociateUserStackWithContext mocks base method.
func (m *MockAppStreamAPI) BatchAssociateUserStackWithContext(arg0 context.Context, arg1 *appstream.BatchAssociateUserStackInput, arg2 ...request.Option) (*appstream.BatchAssociateUserStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAssociateUserStackWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.BatchAssociateUserStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateUserStackWithContext indicates an expected call of BatchAssociateUserStackWithContext.
func (mr *MockAppStreamAPIMockRecorder) BatchAssociateUserStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateUserStackWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).BatchAssociateUserStackWithContext), varargs...)
}

// BatchDisassociateUserStack mocks base method.
func (m *MockAppStreamAPI) BatchDisassociateUserStack(arg0 *appstream.BatchDisassociateUserStackInput) (*appstream.BatchDisassociateUserStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateUserStack", arg0)
	ret0, _ := ret[0].(*appstream.BatchDisassociateUserStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateUserStack indicates an expected call of BatchDisassociateUserStack.
func (mr *MockAppStreamAPIMockRecorder) BatchDisassociateUserStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateUserStack", reflect.TypeOf((*MockAppStreamAPI)(nil).BatchDisassociateUserStack), arg0)
}

// BatchDisassociateUserStackRequest mocks base method.
func (m *MockAppStreamAPI) BatchDisassociateUserStackRequest(arg0 *appstream.BatchDisassociateUserStackInput) (*request.Request, *appstream.BatchDisassociateUserStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateUserStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.BatchDisassociateUserStackOutput)
	return ret0, ret1
}

// BatchDisassociateUserStackRequest indicates an expected call of BatchDisassociateUserStackRequest.
func (mr *MockAppStreamAPIMockRecorder) BatchDisassociateUserStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateUserStackRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).BatchDisassociateUserStackRequest), arg0)
}

// BatchDisassociateUserStackWithContext mocks base method.
func (m *MockAppStreamAPI) BatchDisassociateUserStackWithContext(arg0 context.Context, arg1 *appstream.BatchDisassociateUserStackInput, arg2 ...request.Option) (*appstream.BatchDisassociateUserStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisassociateUserStackWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.BatchDisassociateUserStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateUserStackWithContext indicates an expected call of BatchDisassociateUserStackWithContext.
func (mr *MockAppStreamAPIMockRecorder) BatchDisassociateUserStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateUserStackWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).BatchDisassociateUserStackWithContext), varargs...)
}

// CopyImage mocks base method.
func (m *MockAppStreamAPI) CopyImage(arg0 *appstream.CopyImageInput) (*appstream.CopyImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImage", arg0)
	ret0, _ := ret[0].(*appstream.CopyImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImage indicates an expected call of CopyImage.
func (mr *MockAppStreamAPIMockRecorder) CopyImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImage", reflect.TypeOf((*MockAppStreamAPI)(nil).CopyImage), arg0)
}

// CopyImageRequest mocks base method.
func (m *MockAppStreamAPI) CopyImageRequest(arg0 *appstream.CopyImageInput) (*request.Request, *appstream.CopyImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CopyImageOutput)
	return ret0, ret1
}

// CopyImageRequest indicates an expected call of CopyImageRequest.
func (mr *MockAppStreamAPIMockRecorder) CopyImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImageRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CopyImageRequest), arg0)
}

// CopyImageWithContext mocks base method.
func (m *MockAppStreamAPI) CopyImageWithContext(arg0 context.Context, arg1 *appstream.CopyImageInput, arg2 ...request.Option) (*appstream.CopyImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyImageWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CopyImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImageWithContext indicates an expected call of CopyImageWithContext.
func (mr *MockAppStreamAPIMockRecorder) CopyImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImageWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CopyImageWithContext), varargs...)
}

// CreateDirectoryConfig mocks base method.
func (m *MockAppStreamAPI) CreateDirectoryConfig(arg0 *appstream.CreateDirectoryConfigInput) (*appstream.CreateDirectoryConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryConfig", arg0)
	ret0, _ := ret[0].(*appstream.CreateDirectoryConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectoryConfig indicates an expected call of CreateDirectoryConfig.
func (mr *MockAppStreamAPIMockRecorder) CreateDirectoryConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryConfig", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateDirectoryConfig), arg0)
}

// CreateDirectoryConfigRequest mocks base method.
func (m *MockAppStreamAPI) CreateDirectoryConfigRequest(arg0 *appstream.CreateDirectoryConfigInput) (*request.Request, *appstream.CreateDirectoryConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateDirectoryConfigOutput)
	return ret0, ret1
}

// CreateDirectoryConfigRequest indicates an expected call of CreateDirectoryConfigRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateDirectoryConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryConfigRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateDirectoryConfigRequest), arg0)
}

// CreateDirectoryConfigWithContext mocks base method.
func (m *MockAppStreamAPI) CreateDirectoryConfigWithContext(arg0 context.Context, arg1 *appstream.CreateDirectoryConfigInput, arg2 ...request.Option) (*appstream.CreateDirectoryConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDirectoryConfigWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateDirectoryConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectoryConfigWithContext indicates an expected call of CreateDirectoryConfigWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateDirectoryConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryConfigWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateDirectoryConfigWithContext), varargs...)
}

// CreateFleet mocks base method.
func (m *MockAppStreamAPI) CreateFleet(arg0 *appstream.CreateFleetInput) (*appstream.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleet", arg0)
	ret0, _ := ret[0].(*appstream.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet.
func (mr *MockAppStreamAPIMockRecorder) CreateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateFleet), arg0)
}

// CreateFleetRequest mocks base method.
func (m *MockAppStreamAPI) CreateFleetRequest(arg0 *appstream.CreateFleetInput) (*request.Request, *appstream.CreateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateFleetOutput)
	return ret0, ret1
}

// CreateFleetRequest indicates an expected call of CreateFleetRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateFleetRequest), arg0)
}

// CreateFleetWithContext mocks base method.
func (m *MockAppStreamAPI) CreateFleetWithContext(arg0 context.Context, arg1 *appstream.CreateFleetInput, arg2 ...request.Option) (*appstream.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleetWithContext indicates an expected call of CreateFleetWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateFleetWithContext), varargs...)
}

// CreateImageBuilder mocks base method.
func (m *MockAppStreamAPI) CreateImageBuilder(arg0 *appstream.CreateImageBuilderInput) (*appstream.CreateImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageBuilder", arg0)
	ret0, _ := ret[0].(*appstream.CreateImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageBuilder indicates an expected call of CreateImageBuilder.
func (mr *MockAppStreamAPIMockRecorder) CreateImageBuilder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBuilder", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateImageBuilder), arg0)
}

// CreateImageBuilderRequest mocks base method.
func (m *MockAppStreamAPI) CreateImageBuilderRequest(arg0 *appstream.CreateImageBuilderInput) (*request.Request, *appstream.CreateImageBuilderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageBuilderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateImageBuilderOutput)
	return ret0, ret1
}

// CreateImageBuilderRequest indicates an expected call of CreateImageBuilderRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateImageBuilderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBuilderRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateImageBuilderRequest), arg0)
}

// CreateImageBuilderStreamingURL mocks base method.
func (m *MockAppStreamAPI) CreateImageBuilderStreamingURL(arg0 *appstream.CreateImageBuilderStreamingURLInput) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageBuilderStreamingURL", arg0)
	ret0, _ := ret[0].(*appstream.CreateImageBuilderStreamingURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageBuilderStreamingURL indicates an expected call of CreateImageBuilderStreamingURL.
func (mr *MockAppStreamAPIMockRecorder) CreateImageBuilderStreamingURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBuilderStreamingURL", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateImageBuilderStreamingURL), arg0)
}

// CreateImageBuilderStreamingURLRequest mocks base method.
func (m *MockAppStreamAPI) CreateImageBuilderStreamingURLRequest(arg0 *appstream.CreateImageBuilderStreamingURLInput) (*request.Request, *appstream.CreateImageBuilderStreamingURLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageBuilderStreamingURLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateImageBuilderStreamingURLOutput)
	return ret0, ret1
}

// CreateImageBuilderStreamingURLRequest indicates an expected call of CreateImageBuilderStreamingURLRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateImageBuilderStreamingURLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBuilderStreamingURLRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateImageBuilderStreamingURLRequest), arg0)
}

// CreateImageBuilderStreamingURLWithContext mocks base method.
func (m *MockAppStreamAPI) CreateImageBuilderStreamingURLWithContext(arg0 context.Context, arg1 *appstream.CreateImageBuilderStreamingURLInput, arg2 ...request.Option) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateImageBuilderStreamingURLWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateImageBuilderStreamingURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageBuilderStreamingURLWithContext indicates an expected call of CreateImageBuilderStreamingURLWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateImageBuilderStreamingURLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBuilderStreamingURLWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateImageBuilderStreamingURLWithContext), varargs...)
}

// CreateImageBuilderWithContext mocks base method.
func (m *MockAppStreamAPI) CreateImageBuilderWithContext(arg0 context.Context, arg1 *appstream.CreateImageBuilderInput, arg2 ...request.Option) (*appstream.CreateImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateImageBuilderWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageBuilderWithContext indicates an expected call of CreateImageBuilderWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateImageBuilderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageBuilderWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateImageBuilderWithContext), varargs...)
}

// CreateStack mocks base method.
func (m *MockAppStreamAPI) CreateStack(arg0 *appstream.CreateStackInput) (*appstream.CreateStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", arg0)
	ret0, _ := ret[0].(*appstream.CreateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStack indicates an expected call of CreateStack.
func (mr *MockAppStreamAPIMockRecorder) CreateStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateStack), arg0)
}

// CreateStackRequest mocks base method.
func (m *MockAppStreamAPI) CreateStackRequest(arg0 *appstream.CreateStackInput) (*request.Request, *appstream.CreateStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateStackOutput)
	return ret0, ret1
}

// CreateStackRequest indicates an expected call of CreateStackRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateStackRequest), arg0)
}

// CreateStackWithContext mocks base method.
func (m *MockAppStreamAPI) CreateStackWithContext(arg0 context.Context, arg1 *appstream.CreateStackInput, arg2 ...request.Option) (*appstream.CreateStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStackWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStackWithContext indicates an expected call of CreateStackWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateStackWithContext), varargs...)
}

// CreateStreamingURL mocks base method.
func (m *MockAppStreamAPI) CreateStreamingURL(arg0 *appstream.CreateStreamingURLInput) (*appstream.CreateStreamingURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingURL", arg0)
	ret0, _ := ret[0].(*appstream.CreateStreamingURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingURL indicates an expected call of CreateStreamingURL.
func (mr *MockAppStreamAPIMockRecorder) CreateStreamingURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingURL", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateStreamingURL), arg0)
}

// CreateStreamingURLRequest mocks base method.
func (m *MockAppStreamAPI) CreateStreamingURLRequest(arg0 *appstream.CreateStreamingURLInput) (*request.Request, *appstream.CreateStreamingURLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingURLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateStreamingURLOutput)
	return ret0, ret1
}

// CreateStreamingURLRequest indicates an expected call of CreateStreamingURLRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateStreamingURLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingURLRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateStreamingURLRequest), arg0)
}

// CreateStreamingURLWithContext mocks base method.
func (m *MockAppStreamAPI) CreateStreamingURLWithContext(arg0 context.Context, arg1 *appstream.CreateStreamingURLInput, arg2 ...request.Option) (*appstream.CreateStreamingURLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingURLWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateStreamingURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingURLWithContext indicates an expected call of CreateStreamingURLWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateStreamingURLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingURLWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateStreamingURLWithContext), varargs...)
}

// CreateUpdatedImage mocks base method.
func (m *MockAppStreamAPI) CreateUpdatedImage(arg0 *appstream.CreateUpdatedImageInput) (*appstream.CreateUpdatedImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdatedImage", arg0)
	ret0, _ := ret[0].(*appstream.CreateUpdatedImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpdatedImage indicates an expected call of CreateUpdatedImage.
func (mr *MockAppStreamAPIMockRecorder) CreateUpdatedImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdatedImage", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUpdatedImage), arg0)
}

// CreateUpdatedImageRequest mocks base method.
func (m *MockAppStreamAPI) CreateUpdatedImageRequest(arg0 *appstream.CreateUpdatedImageInput) (*request.Request, *appstream.CreateUpdatedImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdatedImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateUpdatedImageOutput)
	return ret0, ret1
}

// CreateUpdatedImageRequest indicates an expected call of CreateUpdatedImageRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateUpdatedImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdatedImageRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUpdatedImageRequest), arg0)
}

// CreateUpdatedImageWithContext mocks base method.
func (m *MockAppStreamAPI) CreateUpdatedImageWithContext(arg0 context.Context, arg1 *appstream.CreateUpdatedImageInput, arg2 ...request.Option) (*appstream.CreateUpdatedImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUpdatedImageWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateUpdatedImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpdatedImageWithContext indicates an expected call of CreateUpdatedImageWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateUpdatedImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdatedImageWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUpdatedImageWithContext), varargs...)
}

// CreateUsageReportSubscription mocks base method.
func (m *MockAppStreamAPI) CreateUsageReportSubscription(arg0 *appstream.CreateUsageReportSubscriptionInput) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageReportSubscription", arg0)
	ret0, _ := ret[0].(*appstream.CreateUsageReportSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsageReportSubscription indicates an expected call of CreateUsageReportSubscription.
func (mr *MockAppStreamAPIMockRecorder) CreateUsageReportSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageReportSubscription", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUsageReportSubscription), arg0)
}

// CreateUsageReportSubscriptionRequest mocks base method.
func (m *MockAppStreamAPI) CreateUsageReportSubscriptionRequest(arg0 *appstream.CreateUsageReportSubscriptionInput) (*request.Request, *appstream.CreateUsageReportSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageReportSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateUsageReportSubscriptionOutput)
	return ret0, ret1
}

// CreateUsageReportSubscriptionRequest indicates an expected call of CreateUsageReportSubscriptionRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateUsageReportSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageReportSubscriptionRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUsageReportSubscriptionRequest), arg0)
}

// CreateUsageReportSubscriptionWithContext mocks base method.
func (m *MockAppStreamAPI) CreateUsageReportSubscriptionWithContext(arg0 context.Context, arg1 *appstream.CreateUsageReportSubscriptionInput, arg2 ...request.Option) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsageReportSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateUsageReportSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsageReportSubscriptionWithContext indicates an expected call of CreateUsageReportSubscriptionWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateUsageReportSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageReportSubscriptionWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUsageReportSubscriptionWithContext), varargs...)
}

// CreateUser mocks base method.
func (m *MockAppStreamAPI) CreateUser(arg0 *appstream.CreateUserInput) (*appstream.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*appstream.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAppStreamAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method.
func (m *MockAppStreamAPI) CreateUserRequest(arg0 *appstream.CreateUserInput) (*request.Request, *appstream.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest.
func (mr *MockAppStreamAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method.
func (m *MockAppStreamAPI) CreateUserWithContext(arg0 context.Context, arg1 *appstream.CreateUserInput, arg2 ...request.Option) (*appstream.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext.
func (mr *MockAppStreamAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).CreateUserWithContext), varargs...)
}

// DeleteDirectoryConfig mocks base method.
func (m *MockAppStreamAPI) DeleteDirectoryConfig(arg0 *appstream.DeleteDirectoryConfigInput) (*appstream.DeleteDirectoryConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectoryConfig", arg0)
	ret0, _ := ret[0].(*appstream.DeleteDirectoryConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectoryConfig indicates an expected call of DeleteDirectoryConfig.
func (mr *MockAppStreamAPIMockRecorder) DeleteDirectoryConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryConfig", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteDirectoryConfig), arg0)
}

// DeleteDirectoryConfigRequest mocks base method.
func (m *MockAppStreamAPI) DeleteDirectoryConfigRequest(arg0 *appstream.DeleteDirectoryConfigInput) (*request.Request, *appstream.DeleteDirectoryConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectoryConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteDirectoryConfigOutput)
	return ret0, ret1
}

// DeleteDirectoryConfigRequest indicates an expected call of DeleteDirectoryConfigRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteDirectoryConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryConfigRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteDirectoryConfigRequest), arg0)
}

// DeleteDirectoryConfigWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteDirectoryConfigWithContext(arg0 context.Context, arg1 *appstream.DeleteDirectoryConfigInput, arg2 ...request.Option) (*appstream.DeleteDirectoryConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDirectoryConfigWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteDirectoryConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectoryConfigWithContext indicates an expected call of DeleteDirectoryConfigWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteDirectoryConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryConfigWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteDirectoryConfigWithContext), varargs...)
}

// DeleteFleet mocks base method.
func (m *MockAppStreamAPI) DeleteFleet(arg0 *appstream.DeleteFleetInput) (*appstream.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleet", arg0)
	ret0, _ := ret[0].(*appstream.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleet indicates an expected call of DeleteFleet.
func (mr *MockAppStreamAPIMockRecorder) DeleteFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleet", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteFleet), arg0)
}

// DeleteFleetRequest mocks base method.
func (m *MockAppStreamAPI) DeleteFleetRequest(arg0 *appstream.DeleteFleetInput) (*request.Request, *appstream.DeleteFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteFleetOutput)
	return ret0, ret1
}

// DeleteFleetRequest indicates an expected call of DeleteFleetRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteFleetRequest), arg0)
}

// DeleteFleetWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteFleetWithContext(arg0 context.Context, arg1 *appstream.DeleteFleetInput, arg2 ...request.Option) (*appstream.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFleetWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleetWithContext indicates an expected call of DeleteFleetWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteFleetWithContext), varargs...)
}

// DeleteImage mocks base method.
func (m *MockAppStreamAPI) DeleteImage(arg0 *appstream.DeleteImageInput) (*appstream.DeleteImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0)
	ret0, _ := ret[0].(*appstream.DeleteImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockAppStreamAPIMockRecorder) DeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImage), arg0)
}

// DeleteImageBuilder mocks base method.
func (m *MockAppStreamAPI) DeleteImageBuilder(arg0 *appstream.DeleteImageBuilderInput) (*appstream.DeleteImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageBuilder", arg0)
	ret0, _ := ret[0].(*appstream.DeleteImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImageBuilder indicates an expected call of DeleteImageBuilder.
func (mr *MockAppStreamAPIMockRecorder) DeleteImageBuilder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageBuilder", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImageBuilder), arg0)
}

// DeleteImageBuilderRequest mocks base method.
func (m *MockAppStreamAPI) DeleteImageBuilderRequest(arg0 *appstream.DeleteImageBuilderInput) (*request.Request, *appstream.DeleteImageBuilderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageBuilderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteImageBuilderOutput)
	return ret0, ret1
}

// DeleteImageBuilderRequest indicates an expected call of DeleteImageBuilderRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteImageBuilderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageBuilderRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImageBuilderRequest), arg0)
}

// DeleteImageBuilderWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteImageBuilderWithContext(arg0 context.Context, arg1 *appstream.DeleteImageBuilderInput, arg2 ...request.Option) (*appstream.DeleteImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteImageBuilderWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImageBuilderWithContext indicates an expected call of DeleteImageBuilderWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteImageBuilderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageBuilderWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImageBuilderWithContext), varargs...)
}

// DeleteImagePermissions mocks base method.
func (m *MockAppStreamAPI) DeleteImagePermissions(arg0 *appstream.DeleteImagePermissionsInput) (*appstream.DeleteImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImagePermissions", arg0)
	ret0, _ := ret[0].(*appstream.DeleteImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImagePermissions indicates an expected call of DeleteImagePermissions.
func (mr *MockAppStreamAPIMockRecorder) DeleteImagePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagePermissions", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImagePermissions), arg0)
}

// DeleteImagePermissionsRequest mocks base method.
func (m *MockAppStreamAPI) DeleteImagePermissionsRequest(arg0 *appstream.DeleteImagePermissionsInput) (*request.Request, *appstream.DeleteImagePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImagePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteImagePermissionsOutput)
	return ret0, ret1
}

// DeleteImagePermissionsRequest indicates an expected call of DeleteImagePermissionsRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteImagePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagePermissionsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImagePermissionsRequest), arg0)
}

// DeleteImagePermissionsWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteImagePermissionsWithContext(arg0 context.Context, arg1 *appstream.DeleteImagePermissionsInput, arg2 ...request.Option) (*appstream.DeleteImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteImagePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImagePermissionsWithContext indicates an expected call of DeleteImagePermissionsWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteImagePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagePermissionsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImagePermissionsWithContext), varargs...)
}

// DeleteImageRequest mocks base method.
func (m *MockAppStreamAPI) DeleteImageRequest(arg0 *appstream.DeleteImageInput) (*request.Request, *appstream.DeleteImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteImageOutput)
	return ret0, ret1
}

// DeleteImageRequest indicates an expected call of DeleteImageRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImageRequest), arg0)
}

// DeleteImageWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteImageWithContext(arg0 context.Context, arg1 *appstream.DeleteImageInput, arg2 ...request.Option) (*appstream.DeleteImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteImageWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImageWithContext indicates an expected call of DeleteImageWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteImageWithContext), varargs...)
}

// DeleteStack mocks base method.
func (m *MockAppStreamAPI) DeleteStack(arg0 *appstream.DeleteStackInput) (*appstream.DeleteStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStack", arg0)
	ret0, _ := ret[0].(*appstream.DeleteStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStack indicates an expected call of DeleteStack.
func (mr *MockAppStreamAPIMockRecorder) DeleteStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteStack), arg0)
}

// DeleteStackRequest mocks base method.
func (m *MockAppStreamAPI) DeleteStackRequest(arg0 *appstream.DeleteStackInput) (*request.Request, *appstream.DeleteStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteStackOutput)
	return ret0, ret1
}

// DeleteStackRequest indicates an expected call of DeleteStackRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteStackRequest), arg0)
}

// DeleteStackWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteStackWithContext(arg0 context.Context, arg1 *appstream.DeleteStackInput, arg2 ...request.Option) (*appstream.DeleteStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStackWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackWithContext indicates an expected call of DeleteStackWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteStackWithContext), varargs...)
}

// DeleteUsageReportSubscription mocks base method.
func (m *MockAppStreamAPI) DeleteUsageReportSubscription(arg0 *appstream.DeleteUsageReportSubscriptionInput) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsageReportSubscription", arg0)
	ret0, _ := ret[0].(*appstream.DeleteUsageReportSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsageReportSubscription indicates an expected call of DeleteUsageReportSubscription.
func (mr *MockAppStreamAPIMockRecorder) DeleteUsageReportSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageReportSubscription", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteUsageReportSubscription), arg0)
}

// DeleteUsageReportSubscriptionRequest mocks base method.
func (m *MockAppStreamAPI) DeleteUsageReportSubscriptionRequest(arg0 *appstream.DeleteUsageReportSubscriptionInput) (*request.Request, *appstream.DeleteUsageReportSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsageReportSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteUsageReportSubscriptionOutput)
	return ret0, ret1
}

// DeleteUsageReportSubscriptionRequest indicates an expected call of DeleteUsageReportSubscriptionRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteUsageReportSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageReportSubscriptionRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteUsageReportSubscriptionRequest), arg0)
}

// DeleteUsageReportSubscriptionWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteUsageReportSubscriptionWithContext(arg0 context.Context, arg1 *appstream.DeleteUsageReportSubscriptionInput, arg2 ...request.Option) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUsageReportSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteUsageReportSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsageReportSubscriptionWithContext indicates an expected call of DeleteUsageReportSubscriptionWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteUsageReportSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageReportSubscriptionWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteUsageReportSubscriptionWithContext), varargs...)
}

// DeleteUser mocks base method.
func (m *MockAppStreamAPI) DeleteUser(arg0 *appstream.DeleteUserInput) (*appstream.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*appstream.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAppStreamAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteUser), arg0)
}

// DeleteUserRequest mocks base method.
func (m *MockAppStreamAPI) DeleteUserRequest(arg0 *appstream.DeleteUserInput) (*request.Request, *appstream.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest.
func (mr *MockAppStreamAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method.
func (m *MockAppStreamAPI) DeleteUserWithContext(arg0 context.Context, arg1 *appstream.DeleteUserInput, arg2 ...request.Option) (*appstream.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext.
func (mr *MockAppStreamAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DeleteUserWithContext), varargs...)
}

// DescribeDirectoryConfigs mocks base method.
func (m *MockAppStreamAPI) DescribeDirectoryConfigs(arg0 *appstream.DescribeDirectoryConfigsInput) (*appstream.DescribeDirectoryConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDirectoryConfigs", arg0)
	ret0, _ := ret[0].(*appstream.DescribeDirectoryConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDirectoryConfigs indicates an expected call of DescribeDirectoryConfigs.
func (mr *MockAppStreamAPIMockRecorder) DescribeDirectoryConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDirectoryConfigs", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeDirectoryConfigs), arg0)
}

// DescribeDirectoryConfigsRequest mocks base method.
func (m *MockAppStreamAPI) DescribeDirectoryConfigsRequest(arg0 *appstream.DescribeDirectoryConfigsInput) (*request.Request, *appstream.DescribeDirectoryConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDirectoryConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeDirectoryConfigsOutput)
	return ret0, ret1
}

// DescribeDirectoryConfigsRequest indicates an expected call of DescribeDirectoryConfigsRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeDirectoryConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDirectoryConfigsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeDirectoryConfigsRequest), arg0)
}

// DescribeDirectoryConfigsWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeDirectoryConfigsWithContext(arg0 context.Context, arg1 *appstream.DescribeDirectoryConfigsInput, arg2 ...request.Option) (*appstream.DescribeDirectoryConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDirectoryConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeDirectoryConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDirectoryConfigsWithContext indicates an expected call of DescribeDirectoryConfigsWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeDirectoryConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDirectoryConfigsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeDirectoryConfigsWithContext), varargs...)
}

// DescribeFleets mocks base method.
func (m *MockAppStreamAPI) DescribeFleets(arg0 *appstream.DescribeFleetsInput) (*appstream.DescribeFleetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFleets", arg0)
	ret0, _ := ret[0].(*appstream.DescribeFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleets indicates an expected call of DescribeFleets.
func (mr *MockAppStreamAPIMockRecorder) DescribeFleets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleets", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeFleets), arg0)
}

// DescribeFleetsRequest mocks base method.
func (m *MockAppStreamAPI) DescribeFleetsRequest(arg0 *appstream.DescribeFleetsInput) (*request.Request, *appstream.DescribeFleetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFleetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeFleetsOutput)
	return ret0, ret1
}

// DescribeFleetsRequest indicates an expected call of DescribeFleetsRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeFleetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeFleetsRequest), arg0)
}

// DescribeFleetsWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeFleetsWithContext(arg0 context.Context, arg1 *appstream.DescribeFleetsInput, arg2 ...request.Option) (*appstream.DescribeFleetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetsWithContext indicates an expected call of DescribeFleetsWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeFleetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeFleetsWithContext), varargs...)
}

// DescribeImageBuilders mocks base method.
func (m *MockAppStreamAPI) DescribeImageBuilders(arg0 *appstream.DescribeImageBuildersInput) (*appstream.DescribeImageBuildersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImageBuilders", arg0)
	ret0, _ := ret[0].(*appstream.DescribeImageBuildersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImageBuilders indicates an expected call of DescribeImageBuilders.
func (mr *MockAppStreamAPIMockRecorder) DescribeImageBuilders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageBuilders", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImageBuilders), arg0)
}

// DescribeImageBuildersRequest mocks base method.
func (m *MockAppStreamAPI) DescribeImageBuildersRequest(arg0 *appstream.DescribeImageBuildersInput) (*request.Request, *appstream.DescribeImageBuildersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImageBuildersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeImageBuildersOutput)
	return ret0, ret1
}

// DescribeImageBuildersRequest indicates an expected call of DescribeImageBuildersRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeImageBuildersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageBuildersRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImageBuildersRequest), arg0)
}

// DescribeImageBuildersWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeImageBuildersWithContext(arg0 context.Context, arg1 *appstream.DescribeImageBuildersInput, arg2 ...request.Option) (*appstream.DescribeImageBuildersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImageBuildersWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeImageBuildersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImageBuildersWithContext indicates an expected call of DescribeImageBuildersWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeImageBuildersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageBuildersWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImageBuildersWithContext), varargs...)
}

// DescribeImagePermissions mocks base method.
func (m *MockAppStreamAPI) DescribeImagePermissions(arg0 *appstream.DescribeImagePermissionsInput) (*appstream.DescribeImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImagePermissions", arg0)
	ret0, _ := ret[0].(*appstream.DescribeImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImagePermissions indicates an expected call of DescribeImagePermissions.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagePermissions", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagePermissions), arg0)
}

// DescribeImagePermissionsPages mocks base method.
func (m *MockAppStreamAPI) DescribeImagePermissionsPages(arg0 *appstream.DescribeImagePermissionsInput, arg1 func(*appstream.DescribeImagePermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImagePermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImagePermissionsPages indicates an expected call of DescribeImagePermissionsPages.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagePermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagePermissionsPages", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagePermissionsPages), arg0, arg1)
}

// DescribeImagePermissionsPagesWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeImagePermissionsPagesWithContext(arg0 context.Context, arg1 *appstream.DescribeImagePermissionsInput, arg2 func(*appstream.DescribeImagePermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImagePermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImagePermissionsPagesWithContext indicates an expected call of DescribeImagePermissionsPagesWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagePermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagePermissionsPagesWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagePermissionsPagesWithContext), varargs...)
}

// DescribeImagePermissionsRequest mocks base method.
func (m *MockAppStreamAPI) DescribeImagePermissionsRequest(arg0 *appstream.DescribeImagePermissionsInput) (*request.Request, *appstream.DescribeImagePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImagePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeImagePermissionsOutput)
	return ret0, ret1
}

// DescribeImagePermissionsRequest indicates an expected call of DescribeImagePermissionsRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagePermissionsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagePermissionsRequest), arg0)
}

// DescribeImagePermissionsWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeImagePermissionsWithContext(arg0 context.Context, arg1 *appstream.DescribeImagePermissionsInput, arg2 ...request.Option) (*appstream.DescribeImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImagePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImagePermissionsWithContext indicates an expected call of DescribeImagePermissionsWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagePermissionsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagePermissionsWithContext), varargs...)
}

// DescribeImages mocks base method.
func (m *MockAppStreamAPI) DescribeImages(arg0 *appstream.DescribeImagesInput) (*appstream.DescribeImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImages", arg0)
	ret0, _ := ret[0].(*appstream.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImages indicates an expected call of DescribeImages.
func (mr *MockAppStreamAPIMockRecorder) DescribeImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImages", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImages), arg0)
}

// DescribeImagesPages mocks base method.
func (m *MockAppStreamAPI) DescribeImagesPages(arg0 *appstream.DescribeImagesInput, arg1 func(*appstream.DescribeImagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImagesPages indicates an expected call of DescribeImagesPages.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesPages", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagesPages), arg0, arg1)
}

// DescribeImagesPagesWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeImagesPagesWithContext(arg0 context.Context, arg1 *appstream.DescribeImagesInput, arg2 func(*appstream.DescribeImagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImagesPagesWithContext indicates an expected call of DescribeImagesPagesWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesPagesWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagesPagesWithContext), varargs...)
}

// DescribeImagesRequest mocks base method.
func (m *MockAppStreamAPI) DescribeImagesRequest(arg0 *appstream.DescribeImagesInput) (*request.Request, *appstream.DescribeImagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeImagesOutput)
	return ret0, ret1
}

// DescribeImagesRequest indicates an expected call of DescribeImagesRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagesRequest), arg0)
}

// DescribeImagesWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeImagesWithContext(arg0 context.Context, arg1 *appstream.DescribeImagesInput, arg2 ...request.Option) (*appstream.DescribeImagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImagesWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImagesWithContext indicates an expected call of DescribeImagesWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeImagesWithContext), varargs...)
}

// DescribeSessions mocks base method.
func (m *MockAppStreamAPI) DescribeSessions(arg0 *appstream.DescribeSessionsInput) (*appstream.DescribeSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSessions", arg0)
	ret0, _ := ret[0].(*appstream.DescribeSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSessions indicates an expected call of DescribeSessions.
func (mr *MockAppStreamAPIMockRecorder) DescribeSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSessions", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeSessions), arg0)
}

// DescribeSessionsRequest mocks base method.
func (m *MockAppStreamAPI) DescribeSessionsRequest(arg0 *appstream.DescribeSessionsInput) (*request.Request, *appstream.DescribeSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeSessionsOutput)
	return ret0, ret1
}

// DescribeSessionsRequest indicates an expected call of DescribeSessionsRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSessionsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeSessionsRequest), arg0)
}

// DescribeSessionsWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeSessionsWithContext(arg0 context.Context, arg1 *appstream.DescribeSessionsInput, arg2 ...request.Option) (*appstream.DescribeSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSessionsWithContext indicates an expected call of DescribeSessionsWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSessionsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeSessionsWithContext), varargs...)
}

// DescribeStacks mocks base method.
func (m *MockAppStreamAPI) DescribeStacks(arg0 *appstream.DescribeStacksInput) (*appstream.DescribeStacksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStacks", arg0)
	ret0, _ := ret[0].(*appstream.DescribeStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStacks indicates an expected call of DescribeStacks.
func (mr *MockAppStreamAPIMockRecorder) DescribeStacks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacks", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeStacks), arg0)
}

// DescribeStacksRequest mocks base method.
func (m *MockAppStreamAPI) DescribeStacksRequest(arg0 *appstream.DescribeStacksInput) (*request.Request, *appstream.DescribeStacksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStacksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeStacksOutput)
	return ret0, ret1
}

// DescribeStacksRequest indicates an expected call of DescribeStacksRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeStacksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacksRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeStacksRequest), arg0)
}

// DescribeStacksWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeStacksWithContext(arg0 context.Context, arg1 *appstream.DescribeStacksInput, arg2 ...request.Option) (*appstream.DescribeStacksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStacksWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStacksWithContext indicates an expected call of DescribeStacksWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeStacksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacksWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeStacksWithContext), varargs...)
}

// DescribeUsageReportSubscriptions mocks base method.
func (m *MockAppStreamAPI) DescribeUsageReportSubscriptions(arg0 *appstream.DescribeUsageReportSubscriptionsInput) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUsageReportSubscriptions", arg0)
	ret0, _ := ret[0].(*appstream.DescribeUsageReportSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUsageReportSubscriptions indicates an expected call of DescribeUsageReportSubscriptions.
func (mr *MockAppStreamAPIMockRecorder) DescribeUsageReportSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsageReportSubscriptions", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUsageReportSubscriptions), arg0)
}

// DescribeUsageReportSubscriptionsRequest mocks base method.
func (m *MockAppStreamAPI) DescribeUsageReportSubscriptionsRequest(arg0 *appstream.DescribeUsageReportSubscriptionsInput) (*request.Request, *appstream.DescribeUsageReportSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUsageReportSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeUsageReportSubscriptionsOutput)
	return ret0, ret1
}

// DescribeUsageReportSubscriptionsRequest indicates an expected call of DescribeUsageReportSubscriptionsRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeUsageReportSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsageReportSubscriptionsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUsageReportSubscriptionsRequest), arg0)
}

// DescribeUsageReportSubscriptionsWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeUsageReportSubscriptionsWithContext(arg0 context.Context, arg1 *appstream.DescribeUsageReportSubscriptionsInput, arg2 ...request.Option) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUsageReportSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeUsageReportSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUsageReportSubscriptionsWithContext indicates an expected call of DescribeUsageReportSubscriptionsWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeUsageReportSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsageReportSubscriptionsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUsageReportSubscriptionsWithContext), varargs...)
}

// DescribeUserStackAssociations mocks base method.
func (m *MockAppStreamAPI) DescribeUserStackAssociations(arg0 *appstream.DescribeUserStackAssociationsInput) (*appstream.DescribeUserStackAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserStackAssociations", arg0)
	ret0, _ := ret[0].(*appstream.DescribeUserStackAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserStackAssociations indicates an expected call of DescribeUserStackAssociations.
func (mr *MockAppStreamAPIMockRecorder) DescribeUserStackAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserStackAssociations", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUserStackAssociations), arg0)
}

// DescribeUserStackAssociationsRequest mocks base method.
func (m *MockAppStreamAPI) DescribeUserStackAssociationsRequest(arg0 *appstream.DescribeUserStackAssociationsInput) (*request.Request, *appstream.DescribeUserStackAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserStackAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeUserStackAssociationsOutput)
	return ret0, ret1
}

// DescribeUserStackAssociationsRequest indicates an expected call of DescribeUserStackAssociationsRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeUserStackAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserStackAssociationsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUserStackAssociationsRequest), arg0)
}

// DescribeUserStackAssociationsWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeUserStackAssociationsWithContext(arg0 context.Context, arg1 *appstream.DescribeUserStackAssociationsInput, arg2 ...request.Option) (*appstream.DescribeUserStackAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserStackAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeUserStackAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserStackAssociationsWithContext indicates an expected call of DescribeUserStackAssociationsWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeUserStackAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserStackAssociationsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUserStackAssociationsWithContext), varargs...)
}

// DescribeUsers mocks base method.
func (m *MockAppStreamAPI) DescribeUsers(arg0 *appstream.DescribeUsersInput) (*appstream.DescribeUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUsers", arg0)
	ret0, _ := ret[0].(*appstream.DescribeUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUsers indicates an expected call of DescribeUsers.
func (mr *MockAppStreamAPIMockRecorder) DescribeUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsers", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUsers), arg0)
}

// DescribeUsersRequest mocks base method.
func (m *MockAppStreamAPI) DescribeUsersRequest(arg0 *appstream.DescribeUsersInput) (*request.Request, *appstream.DescribeUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DescribeUsersOutput)
	return ret0, ret1
}

// DescribeUsersRequest indicates an expected call of DescribeUsersRequest.
func (mr *MockAppStreamAPIMockRecorder) DescribeUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsersRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUsersRequest), arg0)
}

// DescribeUsersWithContext mocks base method.
func (m *MockAppStreamAPI) DescribeUsersWithContext(arg0 context.Context, arg1 *appstream.DescribeUsersInput, arg2 ...request.Option) (*appstream.DescribeUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUsersWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DescribeUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUsersWithContext indicates an expected call of DescribeUsersWithContext.
func (mr *MockAppStreamAPIMockRecorder) DescribeUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsersWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DescribeUsersWithContext), varargs...)
}

// DisableUser mocks base method.
func (m *MockAppStreamAPI) DisableUser(arg0 *appstream.DisableUserInput) (*appstream.DisableUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUser", arg0)
	ret0, _ := ret[0].(*appstream.DisableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableUser indicates an expected call of DisableUser.
func (mr *MockAppStreamAPIMockRecorder) DisableUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUser", reflect.TypeOf((*MockAppStreamAPI)(nil).DisableUser), arg0)
}

// DisableUserRequest mocks base method.
func (m *MockAppStreamAPI) DisableUserRequest(arg0 *appstream.DisableUserInput) (*request.Request, *appstream.DisableUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DisableUserOutput)
	return ret0, ret1
}

// DisableUserRequest indicates an expected call of DisableUserRequest.
func (mr *MockAppStreamAPIMockRecorder) DisableUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DisableUserRequest), arg0)
}

// DisableUserWithContext mocks base method.
func (m *MockAppStreamAPI) DisableUserWithContext(arg0 context.Context, arg1 *appstream.DisableUserInput, arg2 ...request.Option) (*appstream.DisableUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableUserWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DisableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableUserWithContext indicates an expected call of DisableUserWithContext.
func (mr *MockAppStreamAPIMockRecorder) DisableUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DisableUserWithContext), varargs...)
}

// DisassociateFleet mocks base method.
func (m *MockAppStreamAPI) DisassociateFleet(arg0 *appstream.DisassociateFleetInput) (*appstream.DisassociateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFleet", arg0)
	ret0, _ := ret[0].(*appstream.DisassociateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFleet indicates an expected call of DisassociateFleet.
func (mr *MockAppStreamAPIMockRecorder) DisassociateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFleet", reflect.TypeOf((*MockAppStreamAPI)(nil).DisassociateFleet), arg0)
}

// DisassociateFleetRequest mocks base method.
func (m *MockAppStreamAPI) DisassociateFleetRequest(arg0 *appstream.DisassociateFleetInput) (*request.Request, *appstream.DisassociateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.DisassociateFleetOutput)
	return ret0, ret1
}

// DisassociateFleetRequest indicates an expected call of DisassociateFleetRequest.
func (mr *MockAppStreamAPIMockRecorder) DisassociateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFleetRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).DisassociateFleetRequest), arg0)
}

// DisassociateFleetWithContext mocks base method.
func (m *MockAppStreamAPI) DisassociateFleetWithContext(arg0 context.Context, arg1 *appstream.DisassociateFleetInput, arg2 ...request.Option) (*appstream.DisassociateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.DisassociateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateFleetWithContext indicates an expected call of DisassociateFleetWithContext.
func (mr *MockAppStreamAPIMockRecorder) DisassociateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateFleetWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).DisassociateFleetWithContext), varargs...)
}

// EnableUser mocks base method.
func (m *MockAppStreamAPI) EnableUser(arg0 *appstream.EnableUserInput) (*appstream.EnableUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUser", arg0)
	ret0, _ := ret[0].(*appstream.EnableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableUser indicates an expected call of EnableUser.
func (mr *MockAppStreamAPIMockRecorder) EnableUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUser", reflect.TypeOf((*MockAppStreamAPI)(nil).EnableUser), arg0)
}

// EnableUserRequest mocks base method.
func (m *MockAppStreamAPI) EnableUserRequest(arg0 *appstream.EnableUserInput) (*request.Request, *appstream.EnableUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.EnableUserOutput)
	return ret0, ret1
}

// EnableUserRequest indicates an expected call of EnableUserRequest.
func (mr *MockAppStreamAPIMockRecorder) EnableUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).EnableUserRequest), arg0)
}

// EnableUserWithContext mocks base method.
func (m *MockAppStreamAPI) EnableUserWithContext(arg0 context.Context, arg1 *appstream.EnableUserInput, arg2 ...request.Option) (*appstream.EnableUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableUserWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.EnableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableUserWithContext indicates an expected call of EnableUserWithContext.
func (mr *MockAppStreamAPIMockRecorder) EnableUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).EnableUserWithContext), varargs...)
}

// ExpireSession mocks base method.
func (m *MockAppStreamAPI) ExpireSession(arg0 *appstream.ExpireSessionInput) (*appstream.ExpireSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireSession", arg0)
	ret0, _ := ret[0].(*appstream.ExpireSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpireSession indicates an expected call of ExpireSession.
func (mr *MockAppStreamAPIMockRecorder) ExpireSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireSession", reflect.TypeOf((*MockAppStreamAPI)(nil).ExpireSession), arg0)
}

// ExpireSessionRequest mocks base method.
func (m *MockAppStreamAPI) ExpireSessionRequest(arg0 *appstream.ExpireSessionInput) (*request.Request, *appstream.ExpireSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.ExpireSessionOutput)
	return ret0, ret1
}

// ExpireSessionRequest indicates an expected call of ExpireSessionRequest.
func (mr *MockAppStreamAPIMockRecorder) ExpireSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireSessionRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).ExpireSessionRequest), arg0)
}

// ExpireSessionWithContext mocks base method.
func (m *MockAppStreamAPI) ExpireSessionWithContext(arg0 context.Context, arg1 *appstream.ExpireSessionInput, arg2 ...request.Option) (*appstream.ExpireSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpireSessionWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.ExpireSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpireSessionWithContext indicates an expected call of ExpireSessionWithContext.
func (mr *MockAppStreamAPIMockRecorder) ExpireSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireSessionWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).ExpireSessionWithContext), varargs...)
}

// ListAssociatedFleets mocks base method.
func (m *MockAppStreamAPI) ListAssociatedFleets(arg0 *appstream.ListAssociatedFleetsInput) (*appstream.ListAssociatedFleetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedFleets", arg0)
	ret0, _ := ret[0].(*appstream.ListAssociatedFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedFleets indicates an expected call of ListAssociatedFleets.
func (mr *MockAppStreamAPIMockRecorder) ListAssociatedFleets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedFleets", reflect.TypeOf((*MockAppStreamAPI)(nil).ListAssociatedFleets), arg0)
}

// ListAssociatedFleetsRequest mocks base method.
func (m *MockAppStreamAPI) ListAssociatedFleetsRequest(arg0 *appstream.ListAssociatedFleetsInput) (*request.Request, *appstream.ListAssociatedFleetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedFleetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.ListAssociatedFleetsOutput)
	return ret0, ret1
}

// ListAssociatedFleetsRequest indicates an expected call of ListAssociatedFleetsRequest.
func (mr *MockAppStreamAPIMockRecorder) ListAssociatedFleetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedFleetsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).ListAssociatedFleetsRequest), arg0)
}

// ListAssociatedFleetsWithContext mocks base method.
func (m *MockAppStreamAPI) ListAssociatedFleetsWithContext(arg0 context.Context, arg1 *appstream.ListAssociatedFleetsInput, arg2 ...request.Option) (*appstream.ListAssociatedFleetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedFleetsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.ListAssociatedFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedFleetsWithContext indicates an expected call of ListAssociatedFleetsWithContext.
func (mr *MockAppStreamAPIMockRecorder) ListAssociatedFleetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedFleetsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).ListAssociatedFleetsWithContext), varargs...)
}

// ListAssociatedStacks mocks base method.
func (m *MockAppStreamAPI) ListAssociatedStacks(arg0 *appstream.ListAssociatedStacksInput) (*appstream.ListAssociatedStacksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedStacks", arg0)
	ret0, _ := ret[0].(*appstream.ListAssociatedStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedStacks indicates an expected call of ListAssociatedStacks.
func (mr *MockAppStreamAPIMockRecorder) ListAssociatedStacks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedStacks", reflect.TypeOf((*MockAppStreamAPI)(nil).ListAssociatedStacks), arg0)
}

// ListAssociatedStacksRequest mocks base method.
func (m *MockAppStreamAPI) ListAssociatedStacksRequest(arg0 *appstream.ListAssociatedStacksInput) (*request.Request, *appstream.ListAssociatedStacksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedStacksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.ListAssociatedStacksOutput)
	return ret0, ret1
}

// ListAssociatedStacksRequest indicates an expected call of ListAssociatedStacksRequest.
func (mr *MockAppStreamAPIMockRecorder) ListAssociatedStacksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedStacksRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).ListAssociatedStacksRequest), arg0)
}

// ListAssociatedStacksWithContext mocks base method.
func (m *MockAppStreamAPI) ListAssociatedStacksWithContext(arg0 context.Context, arg1 *appstream.ListAssociatedStacksInput, arg2 ...request.Option) (*appstream.ListAssociatedStacksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedStacksWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.ListAssociatedStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedStacksWithContext indicates an expected call of ListAssociatedStacksWithContext.
func (mr *MockAppStreamAPIMockRecorder) ListAssociatedStacksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedStacksWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).ListAssociatedStacksWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAppStreamAPI) ListTagsForResource(arg0 *appstream.ListTagsForResourceInput) (*appstream.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*appstream.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAppStreamAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAppStreamAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockAppStreamAPI) ListTagsForResourceRequest(arg0 *appstream.ListTagsForResourceInput) (*request.Request, *appstream.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockAppStreamAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockAppStreamAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *appstream.ListTagsForResourceInput, arg2 ...request.Option) (*appstream.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockAppStreamAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartFleet mocks base method.
func (m *MockAppStreamAPI) StartFleet(arg0 *appstream.StartFleetInput) (*appstream.StartFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFleet", arg0)
	ret0, _ := ret[0].(*appstream.StartFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFleet indicates an expected call of StartFleet.
func (mr *MockAppStreamAPIMockRecorder) StartFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFleet", reflect.TypeOf((*MockAppStreamAPI)(nil).StartFleet), arg0)
}

// StartFleetRequest mocks base method.
func (m *MockAppStreamAPI) StartFleetRequest(arg0 *appstream.StartFleetInput) (*request.Request, *appstream.StartFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.StartFleetOutput)
	return ret0, ret1
}

// StartFleetRequest indicates an expected call of StartFleetRequest.
func (mr *MockAppStreamAPIMockRecorder) StartFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFleetRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).StartFleetRequest), arg0)
}

// StartFleetWithContext mocks base method.
func (m *MockAppStreamAPI) StartFleetWithContext(arg0 context.Context, arg1 *appstream.StartFleetInput, arg2 ...request.Option) (*appstream.StartFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFleetWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.StartFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFleetWithContext indicates an expected call of StartFleetWithContext.
func (mr *MockAppStreamAPIMockRecorder) StartFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFleetWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).StartFleetWithContext), varargs...)
}

// StartImageBuilder mocks base method.
func (m *MockAppStreamAPI) StartImageBuilder(arg0 *appstream.StartImageBuilderInput) (*appstream.StartImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImageBuilder", arg0)
	ret0, _ := ret[0].(*appstream.StartImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImageBuilder indicates an expected call of StartImageBuilder.
func (mr *MockAppStreamAPIMockRecorder) StartImageBuilder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImageBuilder", reflect.TypeOf((*MockAppStreamAPI)(nil).StartImageBuilder), arg0)
}

// StartImageBuilderRequest mocks base method.
func (m *MockAppStreamAPI) StartImageBuilderRequest(arg0 *appstream.StartImageBuilderInput) (*request.Request, *appstream.StartImageBuilderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImageBuilderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.StartImageBuilderOutput)
	return ret0, ret1
}

// StartImageBuilderRequest indicates an expected call of StartImageBuilderRequest.
func (mr *MockAppStreamAPIMockRecorder) StartImageBuilderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImageBuilderRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).StartImageBuilderRequest), arg0)
}

// StartImageBuilderWithContext mocks base method.
func (m *MockAppStreamAPI) StartImageBuilderWithContext(arg0 context.Context, arg1 *appstream.StartImageBuilderInput, arg2 ...request.Option) (*appstream.StartImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartImageBuilderWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.StartImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImageBuilderWithContext indicates an expected call of StartImageBuilderWithContext.
func (mr *MockAppStreamAPIMockRecorder) StartImageBuilderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImageBuilderWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).StartImageBuilderWithContext), varargs...)
}

// StopFleet mocks base method.
func (m *MockAppStreamAPI) StopFleet(arg0 *appstream.StopFleetInput) (*appstream.StopFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFleet", arg0)
	ret0, _ := ret[0].(*appstream.StopFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFleet indicates an expected call of StopFleet.
func (mr *MockAppStreamAPIMockRecorder) StopFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFleet", reflect.TypeOf((*MockAppStreamAPI)(nil).StopFleet), arg0)
}

// StopFleetRequest mocks base method.
func (m *MockAppStreamAPI) StopFleetRequest(arg0 *appstream.StopFleetInput) (*request.Request, *appstream.StopFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.StopFleetOutput)
	return ret0, ret1
}

// StopFleetRequest indicates an expected call of StopFleetRequest.
func (mr *MockAppStreamAPIMockRecorder) StopFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFleetRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).StopFleetRequest), arg0)
}

// StopFleetWithContext mocks base method.
func (m *MockAppStreamAPI) StopFleetWithContext(arg0 context.Context, arg1 *appstream.StopFleetInput, arg2 ...request.Option) (*appstream.StopFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopFleetWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.StopFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFleetWithContext indicates an expected call of StopFleetWithContext.
func (mr *MockAppStreamAPIMockRecorder) StopFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFleetWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).StopFleetWithContext), varargs...)
}

// StopImageBuilder mocks base method.
func (m *MockAppStreamAPI) StopImageBuilder(arg0 *appstream.StopImageBuilderInput) (*appstream.StopImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopImageBuilder", arg0)
	ret0, _ := ret[0].(*appstream.StopImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopImageBuilder indicates an expected call of StopImageBuilder.
func (mr *MockAppStreamAPIMockRecorder) StopImageBuilder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopImageBuilder", reflect.TypeOf((*MockAppStreamAPI)(nil).StopImageBuilder), arg0)
}

// StopImageBuilderRequest mocks base method.
func (m *MockAppStreamAPI) StopImageBuilderRequest(arg0 *appstream.StopImageBuilderInput) (*request.Request, *appstream.StopImageBuilderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopImageBuilderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.StopImageBuilderOutput)
	return ret0, ret1
}

// StopImageBuilderRequest indicates an expected call of StopImageBuilderRequest.
func (mr *MockAppStreamAPIMockRecorder) StopImageBuilderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopImageBuilderRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).StopImageBuilderRequest), arg0)
}

// StopImageBuilderWithContext mocks base method.
func (m *MockAppStreamAPI) StopImageBuilderWithContext(arg0 context.Context, arg1 *appstream.StopImageBuilderInput, arg2 ...request.Option) (*appstream.StopImageBuilderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopImageBuilderWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.StopImageBuilderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopImageBuilderWithContext indicates an expected call of StopImageBuilderWithContext.
func (mr *MockAppStreamAPIMockRecorder) StopImageBuilderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopImageBuilderWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).StopImageBuilderWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockAppStreamAPI) TagResource(arg0 *appstream.TagResourceInput) (*appstream.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*appstream.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockAppStreamAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAppStreamAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockAppStreamAPI) TagResourceRequest(arg0 *appstream.TagResourceInput) (*request.Request, *appstream.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockAppStreamAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockAppStreamAPI) TagResourceWithContext(arg0 context.Context, arg1 *appstream.TagResourceInput, arg2 ...request.Option) (*appstream.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockAppStreamAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockAppStreamAPI) UntagResource(arg0 *appstream.UntagResourceInput) (*appstream.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*appstream.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockAppStreamAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAppStreamAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockAppStreamAPI) UntagResourceRequest(arg0 *appstream.UntagResourceInput) (*request.Request, *appstream.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockAppStreamAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockAppStreamAPI) UntagResourceWithContext(arg0 context.Context, arg1 *appstream.UntagResourceInput, arg2 ...request.Option) (*appstream.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockAppStreamAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDirectoryConfig mocks base method.
func (m *MockAppStreamAPI) UpdateDirectoryConfig(arg0 *appstream.UpdateDirectoryConfigInput) (*appstream.UpdateDirectoryConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDirectoryConfig", arg0)
	ret0, _ := ret[0].(*appstream.UpdateDirectoryConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDirectoryConfig indicates an expected call of UpdateDirectoryConfig.
func (mr *MockAppStreamAPIMockRecorder) UpdateDirectoryConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDirectoryConfig", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateDirectoryConfig), arg0)
}

// UpdateDirectoryConfigRequest mocks base method.
func (m *MockAppStreamAPI) UpdateDirectoryConfigRequest(arg0 *appstream.UpdateDirectoryConfigInput) (*request.Request, *appstream.UpdateDirectoryConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDirectoryConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.UpdateDirectoryConfigOutput)
	return ret0, ret1
}

// UpdateDirectoryConfigRequest indicates an expected call of UpdateDirectoryConfigRequest.
func (mr *MockAppStreamAPIMockRecorder) UpdateDirectoryConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDirectoryConfigRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateDirectoryConfigRequest), arg0)
}

// UpdateDirectoryConfigWithContext mocks base method.
func (m *MockAppStreamAPI) UpdateDirectoryConfigWithContext(arg0 context.Context, arg1 *appstream.UpdateDirectoryConfigInput, arg2 ...request.Option) (*appstream.UpdateDirectoryConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDirectoryConfigWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.UpdateDirectoryConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDirectoryConfigWithContext indicates an expected call of UpdateDirectoryConfigWithContext.
func (mr *MockAppStreamAPIMockRecorder) UpdateDirectoryConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDirectoryConfigWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateDirectoryConfigWithContext), varargs...)
}

// UpdateFleet mocks base method.
func (m *MockAppStreamAPI) UpdateFleet(arg0 *appstream.UpdateFleetInput) (*appstream.UpdateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleet", arg0)
	ret0, _ := ret[0].(*appstream.UpdateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleet indicates an expected call of UpdateFleet.
func (mr *MockAppStreamAPIMockRecorder) UpdateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleet", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateFleet), arg0)
}

// UpdateFleetRequest mocks base method.
func (m *MockAppStreamAPI) UpdateFleetRequest(arg0 *appstream.UpdateFleetInput) (*request.Request, *appstream.UpdateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.UpdateFleetOutput)
	return ret0, ret1
}

// UpdateFleetRequest indicates an expected call of UpdateFleetRequest.
func (mr *MockAppStreamAPIMockRecorder) UpdateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateFleetRequest), arg0)
}

// UpdateFleetWithContext mocks base method.
func (m *MockAppStreamAPI) UpdateFleetWithContext(arg0 context.Context, arg1 *appstream.UpdateFleetInput, arg2 ...request.Option) (*appstream.UpdateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.UpdateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFleetWithContext indicates an expected call of UpdateFleetWithContext.
func (mr *MockAppStreamAPIMockRecorder) UpdateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateFleetWithContext), varargs...)
}

// UpdateImagePermissions mocks base method.
func (m *MockAppStreamAPI) UpdateImagePermissions(arg0 *appstream.UpdateImagePermissionsInput) (*appstream.UpdateImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImagePermissions", arg0)
	ret0, _ := ret[0].(*appstream.UpdateImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImagePermissions indicates an expected call of UpdateImagePermissions.
func (mr *MockAppStreamAPIMockRecorder) UpdateImagePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImagePermissions", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateImagePermissions), arg0)
}

// UpdateImagePermissionsRequest mocks base method.
func (m *MockAppStreamAPI) UpdateImagePermissionsRequest(arg0 *appstream.UpdateImagePermissionsInput) (*request.Request, *appstream.UpdateImagePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImagePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.UpdateImagePermissionsOutput)
	return ret0, ret1
}

// UpdateImagePermissionsRequest indicates an expected call of UpdateImagePermissionsRequest.
func (mr *MockAppStreamAPIMockRecorder) UpdateImagePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImagePermissionsRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateImagePermissionsRequest), arg0)
}

// UpdateImagePermissionsWithContext mocks base method.
func (m *MockAppStreamAPI) UpdateImagePermissionsWithContext(arg0 context.Context, arg1 *appstream.UpdateImagePermissionsInput, arg2 ...request.Option) (*appstream.UpdateImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateImagePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.UpdateImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImagePermissionsWithContext indicates an expected call of UpdateImagePermissionsWithContext.
func (mr *MockAppStreamAPIMockRecorder) UpdateImagePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImagePermissionsWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateImagePermissionsWithContext), varargs...)
}

// UpdateStack mocks base method.
func (m *MockAppStreamAPI) UpdateStack(arg0 *appstream.UpdateStackInput) (*appstream.UpdateStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStack", arg0)
	ret0, _ := ret[0].(*appstream.UpdateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStack indicates an expected call of UpdateStack.
func (mr *MockAppStreamAPIMockRecorder) UpdateStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateStack), arg0)
}

// UpdateStackRequest mocks base method.
func (m *MockAppStreamAPI) UpdateStackRequest(arg0 *appstream.UpdateStackInput) (*request.Request, *appstream.UpdateStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appstream.UpdateStackOutput)
	return ret0, ret1
}

// UpdateStackRequest indicates an expected call of UpdateStackRequest.
func (mr *MockAppStreamAPIMockRecorder) UpdateStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackRequest", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateStackRequest), arg0)
}

// UpdateStackWithContext mocks base method.
func (m *MockAppStreamAPI) UpdateStackWithContext(arg0 context.Context, arg1 *appstream.UpdateStackInput, arg2 ...request.Option) (*appstream.UpdateStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStackWithContext", varargs...)
	ret0, _ := ret[0].(*appstream.UpdateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStackWithContext indicates an expected call of UpdateStackWithContext.
func (mr *MockAppStreamAPIMockRecorder) UpdateStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).UpdateStackWithContext), varargs...)
}

// WaitUntilFleetStarted mocks base method.
func (m *MockAppStreamAPI) WaitUntilFleetStarted(arg0 *appstream.DescribeFleetsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilFleetStarted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFleetStarted indicates an expected call of WaitUntilFleetStarted.
func (mr *MockAppStreamAPIMockRecorder) WaitUntilFleetStarted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFleetStarted", reflect.TypeOf((*MockAppStreamAPI)(nil).WaitUntilFleetStarted), arg0)
}

// WaitUntilFleetStartedWithContext mocks base method.
func (m *MockAppStreamAPI) WaitUntilFleetStartedWithContext(arg0 context.Context, arg1 *appstream.DescribeFleetsInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilFleetStartedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFleetStartedWithContext indicates an expected call of WaitUntilFleetStartedWithContext.
func (mr *MockAppStreamAPIMockRecorder) WaitUntilFleetStartedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFleetStartedWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).WaitUntilFleetStartedWithContext), varargs...)
}

// WaitUntilFleetStopped mocks base method.
func (m *MockAppStreamAPI) WaitUntilFleetStopped(arg0 *appstream.DescribeFleetsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilFleetStopped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFleetStopped indicates an expected call of WaitUntilFleetStopped.
func (mr *MockAppStreamAPIMockRecorder) WaitUntilFleetStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFleetStopped", reflect.TypeOf((*MockAppStreamAPI)(nil).WaitUntilFleetStopped), arg0)
}

// WaitUntilFleetStoppedWithContext mocks base method.
func (m *MockAppStreamAPI) WaitUntilFleetStoppedWithContext(arg0 context.Context, arg1 *appstream.DescribeFleetsInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilFleetStoppedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilFleetStoppedWithContext indicates an expected call of WaitUntilFleetStoppedWithContext.
func (mr *MockAppStreamAPIMockRecorder) WaitUntilFleetStoppedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilFleetStoppedWithContext", reflect.TypeOf((*MockAppStreamAPI)(nil).WaitUntilFleetStoppedWithContext), varargs...)
}

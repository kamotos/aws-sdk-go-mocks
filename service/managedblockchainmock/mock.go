// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/managedblockchain/managedblockchainiface (interfaces: ManagedBlockchainAPI)

// Package managedblockchainmock is a generated GoMock package.
package managedblockchainmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	managedblockchain "github.com/aws/aws-sdk-go/service/managedblockchain"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedBlockchainAPI is a mock of ManagedBlockchainAPI interface.
type MockManagedBlockchainAPI struct {
	ctrl     *gomock.Controller
	recorder *MockManagedBlockchainAPIMockRecorder
}

// MockManagedBlockchainAPIMockRecorder is the mock recorder for MockManagedBlockchainAPI.
type MockManagedBlockchainAPIMockRecorder struct {
	mock *MockManagedBlockchainAPI
}

// NewMockManagedBlockchainAPI creates a new mock instance.
func NewMockManagedBlockchainAPI(ctrl *gomock.Controller) *MockManagedBlockchainAPI {
	mock := &MockManagedBlockchainAPI{ctrl: ctrl}
	mock.recorder = &MockManagedBlockchainAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedBlockchainAPI) EXPECT() *MockManagedBlockchainAPIMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockManagedBlockchainAPI) CreateMember(arg0 *managedblockchain.CreateMemberInput) (*managedblockchain.CreateMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", arg0)
	ret0, _ := ret[0].(*managedblockchain.CreateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateMember), arg0)
}

// CreateMemberRequest mocks base method.
func (m *MockManagedBlockchainAPI) CreateMemberRequest(arg0 *managedblockchain.CreateMemberInput) (*request.Request, *managedblockchain.CreateMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.CreateMemberOutput)
	return ret0, ret1
}

// CreateMemberRequest indicates an expected call of CreateMemberRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemberRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateMemberRequest), arg0)
}

// CreateMemberWithContext mocks base method.
func (m *MockManagedBlockchainAPI) CreateMemberWithContext(arg0 context.Context, arg1 *managedblockchain.CreateMemberInput, arg2 ...request.Option) (*managedblockchain.CreateMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMemberWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.CreateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMemberWithContext indicates an expected call of CreateMemberWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemberWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateMemberWithContext), varargs...)
}

// CreateNetwork mocks base method.
func (m *MockManagedBlockchainAPI) CreateNetwork(arg0 *managedblockchain.CreateNetworkInput) (*managedblockchain.CreateNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0)
	ret0, _ := ret[0].(*managedblockchain.CreateNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateNetwork), arg0)
}

// CreateNetworkRequest mocks base method.
func (m *MockManagedBlockchainAPI) CreateNetworkRequest(arg0 *managedblockchain.CreateNetworkInput) (*request.Request, *managedblockchain.CreateNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.CreateNetworkOutput)
	return ret0, ret1
}

// CreateNetworkRequest indicates an expected call of CreateNetworkRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateNetworkRequest), arg0)
}

// CreateNetworkWithContext mocks base method.
func (m *MockManagedBlockchainAPI) CreateNetworkWithContext(arg0 context.Context, arg1 *managedblockchain.CreateNetworkInput, arg2 ...request.Option) (*managedblockchain.CreateNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.CreateNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkWithContext indicates an expected call of CreateNetworkWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateNetworkWithContext), varargs...)
}

// CreateNode mocks base method.
func (m *MockManagedBlockchainAPI) CreateNode(arg0 *managedblockchain.CreateNodeInput) (*managedblockchain.CreateNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", arg0)
	ret0, _ := ret[0].(*managedblockchain.CreateNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateNode), arg0)
}

// CreateNodeRequest mocks base method.
func (m *MockManagedBlockchainAPI) CreateNodeRequest(arg0 *managedblockchain.CreateNodeInput) (*request.Request, *managedblockchain.CreateNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.CreateNodeOutput)
	return ret0, ret1
}

// CreateNodeRequest indicates an expected call of CreateNodeRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateNodeRequest), arg0)
}

// CreateNodeWithContext mocks base method.
func (m *MockManagedBlockchainAPI) CreateNodeWithContext(arg0 context.Context, arg1 *managedblockchain.CreateNodeInput, arg2 ...request.Option) (*managedblockchain.CreateNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNodeWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.CreateNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeWithContext indicates an expected call of CreateNodeWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateNodeWithContext), varargs...)
}

// CreateProposal mocks base method.
func (m *MockManagedBlockchainAPI) CreateProposal(arg0 *managedblockchain.CreateProposalInput) (*managedblockchain.CreateProposalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProposal", arg0)
	ret0, _ := ret[0].(*managedblockchain.CreateProposalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProposal indicates an expected call of CreateProposal.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateProposal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposal", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateProposal), arg0)
}

// CreateProposalRequest mocks base method.
func (m *MockManagedBlockchainAPI) CreateProposalRequest(arg0 *managedblockchain.CreateProposalInput) (*request.Request, *managedblockchain.CreateProposalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProposalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.CreateProposalOutput)
	return ret0, ret1
}

// CreateProposalRequest indicates an expected call of CreateProposalRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateProposalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposalRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateProposalRequest), arg0)
}

// CreateProposalWithContext mocks base method.
func (m *MockManagedBlockchainAPI) CreateProposalWithContext(arg0 context.Context, arg1 *managedblockchain.CreateProposalInput, arg2 ...request.Option) (*managedblockchain.CreateProposalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProposalWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.CreateProposalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProposalWithContext indicates an expected call of CreateProposalWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) CreateProposalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposalWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).CreateProposalWithContext), varargs...)
}

// DeleteMember mocks base method.
func (m *MockManagedBlockchainAPI) DeleteMember(arg0 *managedblockchain.DeleteMemberInput) (*managedblockchain.DeleteMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0)
	ret0, _ := ret[0].(*managedblockchain.DeleteMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockManagedBlockchainAPIMockRecorder) DeleteMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).DeleteMember), arg0)
}

// DeleteMemberRequest mocks base method.
func (m *MockManagedBlockchainAPI) DeleteMemberRequest(arg0 *managedblockchain.DeleteMemberInput) (*request.Request, *managedblockchain.DeleteMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.DeleteMemberOutput)
	return ret0, ret1
}

// DeleteMemberRequest indicates an expected call of DeleteMemberRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) DeleteMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).DeleteMemberRequest), arg0)
}

// DeleteMemberWithContext mocks base method.
func (m *MockManagedBlockchainAPI) DeleteMemberWithContext(arg0 context.Context, arg1 *managedblockchain.DeleteMemberInput, arg2 ...request.Option) (*managedblockchain.DeleteMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMemberWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.DeleteMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMemberWithContext indicates an expected call of DeleteMemberWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) DeleteMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).DeleteMemberWithContext), varargs...)
}

// DeleteNode mocks base method.
func (m *MockManagedBlockchainAPI) DeleteNode(arg0 *managedblockchain.DeleteNodeInput) (*managedblockchain.DeleteNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", arg0)
	ret0, _ := ret[0].(*managedblockchain.DeleteNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockManagedBlockchainAPIMockRecorder) DeleteNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).DeleteNode), arg0)
}

// DeleteNodeRequest mocks base method.
func (m *MockManagedBlockchainAPI) DeleteNodeRequest(arg0 *managedblockchain.DeleteNodeInput) (*request.Request, *managedblockchain.DeleteNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.DeleteNodeOutput)
	return ret0, ret1
}

// DeleteNodeRequest indicates an expected call of DeleteNodeRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) DeleteNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).DeleteNodeRequest), arg0)
}

// DeleteNodeWithContext mocks base method.
func (m *MockManagedBlockchainAPI) DeleteNodeWithContext(arg0 context.Context, arg1 *managedblockchain.DeleteNodeInput, arg2 ...request.Option) (*managedblockchain.DeleteNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNodeWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.DeleteNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeWithContext indicates an expected call of DeleteNodeWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) DeleteNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).DeleteNodeWithContext), varargs...)
}

// GetMember mocks base method.
func (m *MockManagedBlockchainAPI) GetMember(arg0 *managedblockchain.GetMemberInput) (*managedblockchain.GetMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0)
	ret0, _ := ret[0].(*managedblockchain.GetMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockManagedBlockchainAPIMockRecorder) GetMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetMember), arg0)
}

// GetMemberRequest mocks base method.
func (m *MockManagedBlockchainAPI) GetMemberRequest(arg0 *managedblockchain.GetMemberInput) (*request.Request, *managedblockchain.GetMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.GetMemberOutput)
	return ret0, ret1
}

// GetMemberRequest indicates an expected call of GetMemberRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) GetMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetMemberRequest), arg0)
}

// GetMemberWithContext mocks base method.
func (m *MockManagedBlockchainAPI) GetMemberWithContext(arg0 context.Context, arg1 *managedblockchain.GetMemberInput, arg2 ...request.Option) (*managedblockchain.GetMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.GetMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberWithContext indicates an expected call of GetMemberWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) GetMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetMemberWithContext), varargs...)
}

// GetNetwork mocks base method.
func (m *MockManagedBlockchainAPI) GetNetwork(arg0 *managedblockchain.GetNetworkInput) (*managedblockchain.GetNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0)
	ret0, _ := ret[0].(*managedblockchain.GetNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockManagedBlockchainAPIMockRecorder) GetNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetNetwork), arg0)
}

// GetNetworkRequest mocks base method.
func (m *MockManagedBlockchainAPI) GetNetworkRequest(arg0 *managedblockchain.GetNetworkInput) (*request.Request, *managedblockchain.GetNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.GetNetworkOutput)
	return ret0, ret1
}

// GetNetworkRequest indicates an expected call of GetNetworkRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) GetNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetNetworkRequest), arg0)
}

// GetNetworkWithContext mocks base method.
func (m *MockManagedBlockchainAPI) GetNetworkWithContext(arg0 context.Context, arg1 *managedblockchain.GetNetworkInput, arg2 ...request.Option) (*managedblockchain.GetNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.GetNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkWithContext indicates an expected call of GetNetworkWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) GetNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetNetworkWithContext), varargs...)
}

// GetNode mocks base method.
func (m *MockManagedBlockchainAPI) GetNode(arg0 *managedblockchain.GetNodeInput) (*managedblockchain.GetNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0)
	ret0, _ := ret[0].(*managedblockchain.GetNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockManagedBlockchainAPIMockRecorder) GetNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetNode), arg0)
}

// GetNodeRequest mocks base method.
func (m *MockManagedBlockchainAPI) GetNodeRequest(arg0 *managedblockchain.GetNodeInput) (*request.Request, *managedblockchain.GetNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.GetNodeOutput)
	return ret0, ret1
}

// GetNodeRequest indicates an expected call of GetNodeRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) GetNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetNodeRequest), arg0)
}

// GetNodeWithContext mocks base method.
func (m *MockManagedBlockchainAPI) GetNodeWithContext(arg0 context.Context, arg1 *managedblockchain.GetNodeInput, arg2 ...request.Option) (*managedblockchain.GetNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.GetNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeWithContext indicates an expected call of GetNodeWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) GetNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetNodeWithContext), varargs...)
}

// GetProposal mocks base method.
func (m *MockManagedBlockchainAPI) GetProposal(arg0 *managedblockchain.GetProposalInput) (*managedblockchain.GetProposalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposal", arg0)
	ret0, _ := ret[0].(*managedblockchain.GetProposalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposal indicates an expected call of GetProposal.
func (mr *MockManagedBlockchainAPIMockRecorder) GetProposal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposal", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetProposal), arg0)
}

// GetProposalRequest mocks base method.
func (m *MockManagedBlockchainAPI) GetProposalRequest(arg0 *managedblockchain.GetProposalInput) (*request.Request, *managedblockchain.GetProposalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.GetProposalOutput)
	return ret0, ret1
}

// GetProposalRequest indicates an expected call of GetProposalRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) GetProposalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetProposalRequest), arg0)
}

// GetProposalWithContext mocks base method.
func (m *MockManagedBlockchainAPI) GetProposalWithContext(arg0 context.Context, arg1 *managedblockchain.GetProposalInput, arg2 ...request.Option) (*managedblockchain.GetProposalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.GetProposalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalWithContext indicates an expected call of GetProposalWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) GetProposalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).GetProposalWithContext), varargs...)
}

// ListInvitations mocks base method.
func (m *MockManagedBlockchainAPI) ListInvitations(arg0 *managedblockchain.ListInvitationsInput) (*managedblockchain.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0)
	ret0, _ := ret[0].(*managedblockchain.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockManagedBlockchainAPIMockRecorder) ListInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListInvitations), arg0)
}

// ListInvitationsPages mocks base method.
func (m *MockManagedBlockchainAPI) ListInvitationsPages(arg0 *managedblockchain.ListInvitationsInput, arg1 func(*managedblockchain.ListInvitationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPages indicates an expected call of ListInvitationsPages.
func (mr *MockManagedBlockchainAPIMockRecorder) ListInvitationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPages", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListInvitationsPages), arg0, arg1)
}

// ListInvitationsPagesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListInvitationsPagesWithContext(arg0 context.Context, arg1 *managedblockchain.ListInvitationsInput, arg2 func(*managedblockchain.ListInvitationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPagesWithContext indicates an expected call of ListInvitationsPagesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListInvitationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPagesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListInvitationsPagesWithContext), varargs...)
}

// ListInvitationsRequest mocks base method.
func (m *MockManagedBlockchainAPI) ListInvitationsRequest(arg0 *managedblockchain.ListInvitationsInput) (*request.Request, *managedblockchain.ListInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.ListInvitationsOutput)
	return ret0, ret1
}

// ListInvitationsRequest indicates an expected call of ListInvitationsRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) ListInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListInvitationsRequest), arg0)
}

// ListInvitationsWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListInvitationsWithContext(arg0 context.Context, arg1 *managedblockchain.ListInvitationsInput, arg2 ...request.Option) (*managedblockchain.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitationsWithContext indicates an expected call of ListInvitationsWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListInvitationsWithContext), varargs...)
}

// ListMembers mocks base method.
func (m *MockManagedBlockchainAPI) ListMembers(arg0 *managedblockchain.ListMembersInput) (*managedblockchain.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*managedblockchain.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockManagedBlockchainAPIMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListMembers), arg0)
}

// ListMembersPages mocks base method.
func (m *MockManagedBlockchainAPI) ListMembersPages(arg0 *managedblockchain.ListMembersInput, arg1 func(*managedblockchain.ListMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPages indicates an expected call of ListMembersPages.
func (mr *MockManagedBlockchainAPIMockRecorder) ListMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPages", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListMembersPages), arg0, arg1)
}

// ListMembersPagesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListMembersPagesWithContext(arg0 context.Context, arg1 *managedblockchain.ListMembersInput, arg2 func(*managedblockchain.ListMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPagesWithContext indicates an expected call of ListMembersPagesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPagesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListMembersPagesWithContext), varargs...)
}

// ListMembersRequest mocks base method.
func (m *MockManagedBlockchainAPI) ListMembersRequest(arg0 *managedblockchain.ListMembersInput) (*request.Request, *managedblockchain.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) ListMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListMembersWithContext(arg0 context.Context, arg1 *managedblockchain.ListMembersInput, arg2 ...request.Option) (*managedblockchain.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListMembersWithContext), varargs...)
}

// ListNetworks mocks base method.
func (m *MockManagedBlockchainAPI) ListNetworks(arg0 *managedblockchain.ListNetworksInput) (*managedblockchain.ListNetworksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworks", arg0)
	ret0, _ := ret[0].(*managedblockchain.ListNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNetworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNetworks), arg0)
}

// ListNetworksPages mocks base method.
func (m *MockManagedBlockchainAPI) ListNetworksPages(arg0 *managedblockchain.ListNetworksInput, arg1 func(*managedblockchain.ListNetworksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNetworksPages indicates an expected call of ListNetworksPages.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNetworksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworksPages", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNetworksPages), arg0, arg1)
}

// ListNetworksPagesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListNetworksPagesWithContext(arg0 context.Context, arg1 *managedblockchain.ListNetworksInput, arg2 func(*managedblockchain.ListNetworksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNetworksPagesWithContext indicates an expected call of ListNetworksPagesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNetworksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworksPagesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNetworksPagesWithContext), varargs...)
}

// ListNetworksRequest mocks base method.
func (m *MockManagedBlockchainAPI) ListNetworksRequest(arg0 *managedblockchain.ListNetworksInput) (*request.Request, *managedblockchain.ListNetworksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.ListNetworksOutput)
	return ret0, ret1
}

// ListNetworksRequest indicates an expected call of ListNetworksRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNetworksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworksRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNetworksRequest), arg0)
}

// ListNetworksWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListNetworksWithContext(arg0 context.Context, arg1 *managedblockchain.ListNetworksInput, arg2 ...request.Option) (*managedblockchain.ListNetworksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworksWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.ListNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworksWithContext indicates an expected call of ListNetworksWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNetworksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworksWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNetworksWithContext), varargs...)
}

// ListNodes mocks base method.
func (m *MockManagedBlockchainAPI) ListNodes(arg0 *managedblockchain.ListNodesInput) (*managedblockchain.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", arg0)
	ret0, _ := ret[0].(*managedblockchain.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNodes), arg0)
}

// ListNodesPages mocks base method.
func (m *MockManagedBlockchainAPI) ListNodesPages(arg0 *managedblockchain.ListNodesInput, arg1 func(*managedblockchain.ListNodesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodesPages indicates an expected call of ListNodesPages.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNodesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesPages", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNodesPages), arg0, arg1)
}

// ListNodesPagesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListNodesPagesWithContext(arg0 context.Context, arg1 *managedblockchain.ListNodesInput, arg2 func(*managedblockchain.ListNodesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodesPagesWithContext indicates an expected call of ListNodesPagesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNodesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesPagesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNodesPagesWithContext), varargs...)
}

// ListNodesRequest mocks base method.
func (m *MockManagedBlockchainAPI) ListNodesRequest(arg0 *managedblockchain.ListNodesInput) (*request.Request, *managedblockchain.ListNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.ListNodesOutput)
	return ret0, ret1
}

// ListNodesRequest indicates an expected call of ListNodesRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNodesRequest), arg0)
}

// ListNodesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListNodesWithContext(arg0 context.Context, arg1 *managedblockchain.ListNodesInput, arg2 ...request.Option) (*managedblockchain.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodesWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesWithContext indicates an expected call of ListNodesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListNodesWithContext), varargs...)
}

// ListProposalVotes mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalVotes(arg0 *managedblockchain.ListProposalVotesInput) (*managedblockchain.ListProposalVotesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposalVotes", arg0)
	ret0, _ := ret[0].(*managedblockchain.ListProposalVotesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProposalVotes indicates an expected call of ListProposalVotes.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalVotes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalVotes", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalVotes), arg0)
}

// ListProposalVotesPages mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalVotesPages(arg0 *managedblockchain.ListProposalVotesInput, arg1 func(*managedblockchain.ListProposalVotesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposalVotesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProposalVotesPages indicates an expected call of ListProposalVotesPages.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalVotesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalVotesPages", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalVotesPages), arg0, arg1)
}

// ListProposalVotesPagesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalVotesPagesWithContext(arg0 context.Context, arg1 *managedblockchain.ListProposalVotesInput, arg2 func(*managedblockchain.ListProposalVotesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProposalVotesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProposalVotesPagesWithContext indicates an expected call of ListProposalVotesPagesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalVotesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalVotesPagesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalVotesPagesWithContext), varargs...)
}

// ListProposalVotesRequest mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalVotesRequest(arg0 *managedblockchain.ListProposalVotesInput) (*request.Request, *managedblockchain.ListProposalVotesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposalVotesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.ListProposalVotesOutput)
	return ret0, ret1
}

// ListProposalVotesRequest indicates an expected call of ListProposalVotesRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalVotesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalVotesRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalVotesRequest), arg0)
}

// ListProposalVotesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalVotesWithContext(arg0 context.Context, arg1 *managedblockchain.ListProposalVotesInput, arg2 ...request.Option) (*managedblockchain.ListProposalVotesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProposalVotesWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.ListProposalVotesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProposalVotesWithContext indicates an expected call of ListProposalVotesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalVotesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalVotesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalVotesWithContext), varargs...)
}

// ListProposals mocks base method.
func (m *MockManagedBlockchainAPI) ListProposals(arg0 *managedblockchain.ListProposalsInput) (*managedblockchain.ListProposalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposals", arg0)
	ret0, _ := ret[0].(*managedblockchain.ListProposalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProposals indicates an expected call of ListProposals.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposals", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposals), arg0)
}

// ListProposalsPages mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalsPages(arg0 *managedblockchain.ListProposalsInput, arg1 func(*managedblockchain.ListProposalsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposalsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProposalsPages indicates an expected call of ListProposalsPages.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalsPages", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalsPages), arg0, arg1)
}

// ListProposalsPagesWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalsPagesWithContext(arg0 context.Context, arg1 *managedblockchain.ListProposalsInput, arg2 func(*managedblockchain.ListProposalsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProposalsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProposalsPagesWithContext indicates an expected call of ListProposalsPagesWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalsPagesWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalsPagesWithContext), varargs...)
}

// ListProposalsRequest mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalsRequest(arg0 *managedblockchain.ListProposalsInput) (*request.Request, *managedblockchain.ListProposalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.ListProposalsOutput)
	return ret0, ret1
}

// ListProposalsRequest indicates an expected call of ListProposalsRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalsRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalsRequest), arg0)
}

// ListProposalsWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListProposalsWithContext(arg0 context.Context, arg1 *managedblockchain.ListProposalsInput, arg2 ...request.Option) (*managedblockchain.ListProposalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProposalsWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.ListProposalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProposalsWithContext indicates an expected call of ListProposalsWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListProposalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposalsWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListProposalsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockManagedBlockchainAPI) ListTagsForResource(arg0 *managedblockchain.ListTagsForResourceInput) (*managedblockchain.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*managedblockchain.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockManagedBlockchainAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockManagedBlockchainAPI) ListTagsForResourceRequest(arg0 *managedblockchain.ListTagsForResourceInput) (*request.Request, *managedblockchain.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockManagedBlockchainAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *managedblockchain.ListTagsForResourceInput, arg2 ...request.Option) (*managedblockchain.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RejectInvitation mocks base method.
func (m *MockManagedBlockchainAPI) RejectInvitation(arg0 *managedblockchain.RejectInvitationInput) (*managedblockchain.RejectInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvitation", arg0)
	ret0, _ := ret[0].(*managedblockchain.RejectInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvitation indicates an expected call of RejectInvitation.
func (mr *MockManagedBlockchainAPIMockRecorder) RejectInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitation", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).RejectInvitation), arg0)
}

// RejectInvitationRequest mocks base method.
func (m *MockManagedBlockchainAPI) RejectInvitationRequest(arg0 *managedblockchain.RejectInvitationInput) (*request.Request, *managedblockchain.RejectInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.RejectInvitationOutput)
	return ret0, ret1
}

// RejectInvitationRequest indicates an expected call of RejectInvitationRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) RejectInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitationRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).RejectInvitationRequest), arg0)
}

// RejectInvitationWithContext mocks base method.
func (m *MockManagedBlockchainAPI) RejectInvitationWithContext(arg0 context.Context, arg1 *managedblockchain.RejectInvitationInput, arg2 ...request.Option) (*managedblockchain.RejectInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.RejectInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvitationWithContext indicates an expected call of RejectInvitationWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) RejectInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitationWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).RejectInvitationWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockManagedBlockchainAPI) TagResource(arg0 *managedblockchain.TagResourceInput) (*managedblockchain.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*managedblockchain.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockManagedBlockchainAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockManagedBlockchainAPI) TagResourceRequest(arg0 *managedblockchain.TagResourceInput) (*request.Request, *managedblockchain.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockManagedBlockchainAPI) TagResourceWithContext(arg0 context.Context, arg1 *managedblockchain.TagResourceInput, arg2 ...request.Option) (*managedblockchain.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockManagedBlockchainAPI) UntagResource(arg0 *managedblockchain.UntagResourceInput) (*managedblockchain.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*managedblockchain.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockManagedBlockchainAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockManagedBlockchainAPI) UntagResourceRequest(arg0 *managedblockchain.UntagResourceInput) (*request.Request, *managedblockchain.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockManagedBlockchainAPI) UntagResourceWithContext(arg0 context.Context, arg1 *managedblockchain.UntagResourceInput, arg2 ...request.Option) (*managedblockchain.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateMember mocks base method.
func (m *MockManagedBlockchainAPI) UpdateMember(arg0 *managedblockchain.UpdateMemberInput) (*managedblockchain.UpdateMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", arg0)
	ret0, _ := ret[0].(*managedblockchain.UpdateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockManagedBlockchainAPIMockRecorder) UpdateMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UpdateMember), arg0)
}

// UpdateMemberRequest mocks base method.
func (m *MockManagedBlockchainAPI) UpdateMemberRequest(arg0 *managedblockchain.UpdateMemberInput) (*request.Request, *managedblockchain.UpdateMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.UpdateMemberOutput)
	return ret0, ret1
}

// UpdateMemberRequest indicates an expected call of UpdateMemberRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) UpdateMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UpdateMemberRequest), arg0)
}

// UpdateMemberWithContext mocks base method.
func (m *MockManagedBlockchainAPI) UpdateMemberWithContext(arg0 context.Context, arg1 *managedblockchain.UpdateMemberInput, arg2 ...request.Option) (*managedblockchain.UpdateMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMemberWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.UpdateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMemberWithContext indicates an expected call of UpdateMemberWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) UpdateMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UpdateMemberWithContext), varargs...)
}

// UpdateNode mocks base method.
func (m *MockManagedBlockchainAPI) UpdateNode(arg0 *managedblockchain.UpdateNodeInput) (*managedblockchain.UpdateNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", arg0)
	ret0, _ := ret[0].(*managedblockchain.UpdateNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockManagedBlockchainAPIMockRecorder) UpdateNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UpdateNode), arg0)
}

// UpdateNodeRequest mocks base method.
func (m *MockManagedBlockchainAPI) UpdateNodeRequest(arg0 *managedblockchain.UpdateNodeInput) (*request.Request, *managedblockchain.UpdateNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.UpdateNodeOutput)
	return ret0, ret1
}

// UpdateNodeRequest indicates an expected call of UpdateNodeRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) UpdateNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UpdateNodeRequest), arg0)
}

// UpdateNodeWithContext mocks base method.
func (m *MockManagedBlockchainAPI) UpdateNodeWithContext(arg0 context.Context, arg1 *managedblockchain.UpdateNodeInput, arg2 ...request.Option) (*managedblockchain.UpdateNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNodeWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.UpdateNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeWithContext indicates an expected call of UpdateNodeWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) UpdateNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).UpdateNodeWithContext), varargs...)
}

// VoteOnProposal mocks base method.
func (m *MockManagedBlockchainAPI) VoteOnProposal(arg0 *managedblockchain.VoteOnProposalInput) (*managedblockchain.VoteOnProposalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteOnProposal", arg0)
	ret0, _ := ret[0].(*managedblockchain.VoteOnProposalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoteOnProposal indicates an expected call of VoteOnProposal.
func (mr *MockManagedBlockchainAPIMockRecorder) VoteOnProposal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteOnProposal", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).VoteOnProposal), arg0)
}

// VoteOnProposalRequest mocks base method.
func (m *MockManagedBlockchainAPI) VoteOnProposalRequest(arg0 *managedblockchain.VoteOnProposalInput) (*request.Request, *managedblockchain.VoteOnProposalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteOnProposalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedblockchain.VoteOnProposalOutput)
	return ret0, ret1
}

// VoteOnProposalRequest indicates an expected call of VoteOnProposalRequest.
func (mr *MockManagedBlockchainAPIMockRecorder) VoteOnProposalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteOnProposalRequest", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).VoteOnProposalRequest), arg0)
}

// VoteOnProposalWithContext mocks base method.
func (m *MockManagedBlockchainAPI) VoteOnProposalWithContext(arg0 context.Context, arg1 *managedblockchain.VoteOnProposalInput, arg2 ...request.Option) (*managedblockchain.VoteOnProposalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VoteOnProposalWithContext", varargs...)
	ret0, _ := ret[0].(*managedblockchain.VoteOnProposalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoteOnProposalWithContext indicates an expected call of VoteOnProposalWithContext.
func (mr *MockManagedBlockchainAPIMockRecorder) VoteOnProposalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteOnProposalWithContext", reflect.TypeOf((*MockManagedBlockchainAPI)(nil).VoteOnProposalWithContext), varargs...)
}

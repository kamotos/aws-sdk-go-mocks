// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mediatailor/mediatailoriface (interfaces: MediaTailorAPI)

// Package mediatailormock is a generated GoMock package.
package mediatailormock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	mediatailor "github.com/aws/aws-sdk-go/service/mediatailor"
	gomock "github.com/golang/mock/gomock"
)

// MockMediaTailorAPI is a mock of MediaTailorAPI interface.
type MockMediaTailorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMediaTailorAPIMockRecorder
}

// MockMediaTailorAPIMockRecorder is the mock recorder for MockMediaTailorAPI.
type MockMediaTailorAPIMockRecorder struct {
	mock *MockMediaTailorAPI
}

// NewMockMediaTailorAPI creates a new mock instance.
func NewMockMediaTailorAPI(ctrl *gomock.Controller) *MockMediaTailorAPI {
	mock := &MockMediaTailorAPI{ctrl: ctrl}
	mock.recorder = &MockMediaTailorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaTailorAPI) EXPECT() *MockMediaTailorAPIMockRecorder {
	return m.recorder
}

// ConfigureLogsForPlaybackConfiguration mocks base method.
func (m *MockMediaTailorAPI) ConfigureLogsForPlaybackConfiguration(arg0 *mediatailor.ConfigureLogsForPlaybackConfigurationInput) (*mediatailor.ConfigureLogsForPlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureLogsForPlaybackConfiguration", arg0)
	ret0, _ := ret[0].(*mediatailor.ConfigureLogsForPlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLogsForPlaybackConfiguration indicates an expected call of ConfigureLogsForPlaybackConfiguration.
func (mr *MockMediaTailorAPIMockRecorder) ConfigureLogsForPlaybackConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLogsForPlaybackConfiguration", reflect.TypeOf((*MockMediaTailorAPI)(nil).ConfigureLogsForPlaybackConfiguration), arg0)
}

// ConfigureLogsForPlaybackConfigurationRequest mocks base method.
func (m *MockMediaTailorAPI) ConfigureLogsForPlaybackConfigurationRequest(arg0 *mediatailor.ConfigureLogsForPlaybackConfigurationInput) (*request.Request, *mediatailor.ConfigureLogsForPlaybackConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureLogsForPlaybackConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ConfigureLogsForPlaybackConfigurationOutput)
	return ret0, ret1
}

// ConfigureLogsForPlaybackConfigurationRequest indicates an expected call of ConfigureLogsForPlaybackConfigurationRequest.
func (mr *MockMediaTailorAPIMockRecorder) ConfigureLogsForPlaybackConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLogsForPlaybackConfigurationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ConfigureLogsForPlaybackConfigurationRequest), arg0)
}

// ConfigureLogsForPlaybackConfigurationWithContext mocks base method.
func (m *MockMediaTailorAPI) ConfigureLogsForPlaybackConfigurationWithContext(arg0 context.Context, arg1 *mediatailor.ConfigureLogsForPlaybackConfigurationInput, arg2 ...request.Option) (*mediatailor.ConfigureLogsForPlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureLogsForPlaybackConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ConfigureLogsForPlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLogsForPlaybackConfigurationWithContext indicates an expected call of ConfigureLogsForPlaybackConfigurationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ConfigureLogsForPlaybackConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLogsForPlaybackConfigurationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ConfigureLogsForPlaybackConfigurationWithContext), varargs...)
}

// CreateChannel mocks base method.
func (m *MockMediaTailorAPI) CreateChannel(arg0 *mediatailor.CreateChannelInput) (*mediatailor.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*mediatailor.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockMediaTailorAPIMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateChannel), arg0)
}

// CreateChannelRequest mocks base method.
func (m *MockMediaTailorAPI) CreateChannelRequest(arg0 *mediatailor.CreateChannelInput) (*request.Request, *mediatailor.CreateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.CreateChannelOutput)
	return ret0, ret1
}

// CreateChannelRequest indicates an expected call of CreateChannelRequest.
func (mr *MockMediaTailorAPIMockRecorder) CreateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateChannelRequest), arg0)
}

// CreateChannelWithContext mocks base method.
func (m *MockMediaTailorAPI) CreateChannelWithContext(arg0 context.Context, arg1 *mediatailor.CreateChannelInput, arg2 ...request.Option) (*mediatailor.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelWithContext indicates an expected call of CreateChannelWithContext.
func (mr *MockMediaTailorAPIMockRecorder) CreateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateChannelWithContext), varargs...)
}

// CreatePrefetchSchedule mocks base method.
func (m *MockMediaTailorAPI) CreatePrefetchSchedule(arg0 *mediatailor.CreatePrefetchScheduleInput) (*mediatailor.CreatePrefetchScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrefetchSchedule", arg0)
	ret0, _ := ret[0].(*mediatailor.CreatePrefetchScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrefetchSchedule indicates an expected call of CreatePrefetchSchedule.
func (mr *MockMediaTailorAPIMockRecorder) CreatePrefetchSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrefetchSchedule", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreatePrefetchSchedule), arg0)
}

// CreatePrefetchScheduleRequest mocks base method.
func (m *MockMediaTailorAPI) CreatePrefetchScheduleRequest(arg0 *mediatailor.CreatePrefetchScheduleInput) (*request.Request, *mediatailor.CreatePrefetchScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrefetchScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.CreatePrefetchScheduleOutput)
	return ret0, ret1
}

// CreatePrefetchScheduleRequest indicates an expected call of CreatePrefetchScheduleRequest.
func (mr *MockMediaTailorAPIMockRecorder) CreatePrefetchScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrefetchScheduleRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreatePrefetchScheduleRequest), arg0)
}

// CreatePrefetchScheduleWithContext mocks base method.
func (m *MockMediaTailorAPI) CreatePrefetchScheduleWithContext(arg0 context.Context, arg1 *mediatailor.CreatePrefetchScheduleInput, arg2 ...request.Option) (*mediatailor.CreatePrefetchScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrefetchScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.CreatePrefetchScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrefetchScheduleWithContext indicates an expected call of CreatePrefetchScheduleWithContext.
func (mr *MockMediaTailorAPIMockRecorder) CreatePrefetchScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrefetchScheduleWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreatePrefetchScheduleWithContext), varargs...)
}

// CreateProgram mocks base method.
func (m *MockMediaTailorAPI) CreateProgram(arg0 *mediatailor.CreateProgramInput) (*mediatailor.CreateProgramOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProgram", arg0)
	ret0, _ := ret[0].(*mediatailor.CreateProgramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProgram indicates an expected call of CreateProgram.
func (mr *MockMediaTailorAPIMockRecorder) CreateProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgram", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateProgram), arg0)
}

// CreateProgramRequest mocks base method.
func (m *MockMediaTailorAPI) CreateProgramRequest(arg0 *mediatailor.CreateProgramInput) (*request.Request, *mediatailor.CreateProgramOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProgramRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.CreateProgramOutput)
	return ret0, ret1
}

// CreateProgramRequest indicates an expected call of CreateProgramRequest.
func (mr *MockMediaTailorAPIMockRecorder) CreateProgramRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgramRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateProgramRequest), arg0)
}

// CreateProgramWithContext mocks base method.
func (m *MockMediaTailorAPI) CreateProgramWithContext(arg0 context.Context, arg1 *mediatailor.CreateProgramInput, arg2 ...request.Option) (*mediatailor.CreateProgramOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProgramWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.CreateProgramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProgramWithContext indicates an expected call of CreateProgramWithContext.
func (mr *MockMediaTailorAPIMockRecorder) CreateProgramWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgramWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateProgramWithContext), varargs...)
}

// CreateSourceLocation mocks base method.
func (m *MockMediaTailorAPI) CreateSourceLocation(arg0 *mediatailor.CreateSourceLocationInput) (*mediatailor.CreateSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSourceLocation", arg0)
	ret0, _ := ret[0].(*mediatailor.CreateSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSourceLocation indicates an expected call of CreateSourceLocation.
func (mr *MockMediaTailorAPIMockRecorder) CreateSourceLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSourceLocation", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateSourceLocation), arg0)
}

// CreateSourceLocationRequest mocks base method.
func (m *MockMediaTailorAPI) CreateSourceLocationRequest(arg0 *mediatailor.CreateSourceLocationInput) (*request.Request, *mediatailor.CreateSourceLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSourceLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.CreateSourceLocationOutput)
	return ret0, ret1
}

// CreateSourceLocationRequest indicates an expected call of CreateSourceLocationRequest.
func (mr *MockMediaTailorAPIMockRecorder) CreateSourceLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSourceLocationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateSourceLocationRequest), arg0)
}

// CreateSourceLocationWithContext mocks base method.
func (m *MockMediaTailorAPI) CreateSourceLocationWithContext(arg0 context.Context, arg1 *mediatailor.CreateSourceLocationInput, arg2 ...request.Option) (*mediatailor.CreateSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSourceLocationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.CreateSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSourceLocationWithContext indicates an expected call of CreateSourceLocationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) CreateSourceLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSourceLocationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateSourceLocationWithContext), varargs...)
}

// CreateVodSource mocks base method.
func (m *MockMediaTailorAPI) CreateVodSource(arg0 *mediatailor.CreateVodSourceInput) (*mediatailor.CreateVodSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVodSource", arg0)
	ret0, _ := ret[0].(*mediatailor.CreateVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVodSource indicates an expected call of CreateVodSource.
func (mr *MockMediaTailorAPIMockRecorder) CreateVodSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVodSource", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateVodSource), arg0)
}

// CreateVodSourceRequest mocks base method.
func (m *MockMediaTailorAPI) CreateVodSourceRequest(arg0 *mediatailor.CreateVodSourceInput) (*request.Request, *mediatailor.CreateVodSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVodSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.CreateVodSourceOutput)
	return ret0, ret1
}

// CreateVodSourceRequest indicates an expected call of CreateVodSourceRequest.
func (mr *MockMediaTailorAPIMockRecorder) CreateVodSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVodSourceRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateVodSourceRequest), arg0)
}

// CreateVodSourceWithContext mocks base method.
func (m *MockMediaTailorAPI) CreateVodSourceWithContext(arg0 context.Context, arg1 *mediatailor.CreateVodSourceInput, arg2 ...request.Option) (*mediatailor.CreateVodSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVodSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.CreateVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVodSourceWithContext indicates an expected call of CreateVodSourceWithContext.
func (mr *MockMediaTailorAPIMockRecorder) CreateVodSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVodSourceWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).CreateVodSourceWithContext), varargs...)
}

// DeleteChannel mocks base method.
func (m *MockMediaTailorAPI) DeleteChannel(arg0 *mediatailor.DeleteChannelInput) (*mediatailor.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(*mediatailor.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockMediaTailorAPIMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteChannel), arg0)
}

// DeleteChannelPolicy mocks base method.
func (m *MockMediaTailorAPI) DeleteChannelPolicy(arg0 *mediatailor.DeleteChannelPolicyInput) (*mediatailor.DeleteChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelPolicy", arg0)
	ret0, _ := ret[0].(*mediatailor.DeleteChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelPolicy indicates an expected call of DeleteChannelPolicy.
func (mr *MockMediaTailorAPIMockRecorder) DeleteChannelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelPolicy", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteChannelPolicy), arg0)
}

// DeleteChannelPolicyRequest mocks base method.
func (m *MockMediaTailorAPI) DeleteChannelPolicyRequest(arg0 *mediatailor.DeleteChannelPolicyInput) (*request.Request, *mediatailor.DeleteChannelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DeleteChannelPolicyOutput)
	return ret0, ret1
}

// DeleteChannelPolicyRequest indicates an expected call of DeleteChannelPolicyRequest.
func (mr *MockMediaTailorAPIMockRecorder) DeleteChannelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelPolicyRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteChannelPolicyRequest), arg0)
}

// DeleteChannelPolicyWithContext mocks base method.
func (m *MockMediaTailorAPI) DeleteChannelPolicyWithContext(arg0 context.Context, arg1 *mediatailor.DeleteChannelPolicyInput, arg2 ...request.Option) (*mediatailor.DeleteChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DeleteChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelPolicyWithContext indicates an expected call of DeleteChannelPolicyWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DeleteChannelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelPolicyWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteChannelPolicyWithContext), varargs...)
}

// DeleteChannelRequest mocks base method.
func (m *MockMediaTailorAPI) DeleteChannelRequest(arg0 *mediatailor.DeleteChannelInput) (*request.Request, *mediatailor.DeleteChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DeleteChannelOutput)
	return ret0, ret1
}

// DeleteChannelRequest indicates an expected call of DeleteChannelRequest.
func (mr *MockMediaTailorAPIMockRecorder) DeleteChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteChannelRequest), arg0)
}

// DeleteChannelWithContext mocks base method.
func (m *MockMediaTailorAPI) DeleteChannelWithContext(arg0 context.Context, arg1 *mediatailor.DeleteChannelInput, arg2 ...request.Option) (*mediatailor.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelWithContext indicates an expected call of DeleteChannelWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DeleteChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteChannelWithContext), varargs...)
}

// DeletePlaybackConfiguration mocks base method.
func (m *MockMediaTailorAPI) DeletePlaybackConfiguration(arg0 *mediatailor.DeletePlaybackConfigurationInput) (*mediatailor.DeletePlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaybackConfiguration", arg0)
	ret0, _ := ret[0].(*mediatailor.DeletePlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlaybackConfiguration indicates an expected call of DeletePlaybackConfiguration.
func (mr *MockMediaTailorAPIMockRecorder) DeletePlaybackConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaybackConfiguration", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeletePlaybackConfiguration), arg0)
}

// DeletePlaybackConfigurationRequest mocks base method.
func (m *MockMediaTailorAPI) DeletePlaybackConfigurationRequest(arg0 *mediatailor.DeletePlaybackConfigurationInput) (*request.Request, *mediatailor.DeletePlaybackConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaybackConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DeletePlaybackConfigurationOutput)
	return ret0, ret1
}

// DeletePlaybackConfigurationRequest indicates an expected call of DeletePlaybackConfigurationRequest.
func (mr *MockMediaTailorAPIMockRecorder) DeletePlaybackConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaybackConfigurationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeletePlaybackConfigurationRequest), arg0)
}

// DeletePlaybackConfigurationWithContext mocks base method.
func (m *MockMediaTailorAPI) DeletePlaybackConfigurationWithContext(arg0 context.Context, arg1 *mediatailor.DeletePlaybackConfigurationInput, arg2 ...request.Option) (*mediatailor.DeletePlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePlaybackConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DeletePlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlaybackConfigurationWithContext indicates an expected call of DeletePlaybackConfigurationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DeletePlaybackConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaybackConfigurationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeletePlaybackConfigurationWithContext), varargs...)
}

// DeletePrefetchSchedule mocks base method.
func (m *MockMediaTailorAPI) DeletePrefetchSchedule(arg0 *mediatailor.DeletePrefetchScheduleInput) (*mediatailor.DeletePrefetchScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrefetchSchedule", arg0)
	ret0, _ := ret[0].(*mediatailor.DeletePrefetchScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrefetchSchedule indicates an expected call of DeletePrefetchSchedule.
func (mr *MockMediaTailorAPIMockRecorder) DeletePrefetchSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrefetchSchedule", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeletePrefetchSchedule), arg0)
}

// DeletePrefetchScheduleRequest mocks base method.
func (m *MockMediaTailorAPI) DeletePrefetchScheduleRequest(arg0 *mediatailor.DeletePrefetchScheduleInput) (*request.Request, *mediatailor.DeletePrefetchScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrefetchScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DeletePrefetchScheduleOutput)
	return ret0, ret1
}

// DeletePrefetchScheduleRequest indicates an expected call of DeletePrefetchScheduleRequest.
func (mr *MockMediaTailorAPIMockRecorder) DeletePrefetchScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrefetchScheduleRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeletePrefetchScheduleRequest), arg0)
}

// DeletePrefetchScheduleWithContext mocks base method.
func (m *MockMediaTailorAPI) DeletePrefetchScheduleWithContext(arg0 context.Context, arg1 *mediatailor.DeletePrefetchScheduleInput, arg2 ...request.Option) (*mediatailor.DeletePrefetchScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePrefetchScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DeletePrefetchScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrefetchScheduleWithContext indicates an expected call of DeletePrefetchScheduleWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DeletePrefetchScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrefetchScheduleWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeletePrefetchScheduleWithContext), varargs...)
}

// DeleteProgram mocks base method.
func (m *MockMediaTailorAPI) DeleteProgram(arg0 *mediatailor.DeleteProgramInput) (*mediatailor.DeleteProgramOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProgram", arg0)
	ret0, _ := ret[0].(*mediatailor.DeleteProgramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProgram indicates an expected call of DeleteProgram.
func (mr *MockMediaTailorAPIMockRecorder) DeleteProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgram", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteProgram), arg0)
}

// DeleteProgramRequest mocks base method.
func (m *MockMediaTailorAPI) DeleteProgramRequest(arg0 *mediatailor.DeleteProgramInput) (*request.Request, *mediatailor.DeleteProgramOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProgramRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DeleteProgramOutput)
	return ret0, ret1
}

// DeleteProgramRequest indicates an expected call of DeleteProgramRequest.
func (mr *MockMediaTailorAPIMockRecorder) DeleteProgramRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgramRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteProgramRequest), arg0)
}

// DeleteProgramWithContext mocks base method.
func (m *MockMediaTailorAPI) DeleteProgramWithContext(arg0 context.Context, arg1 *mediatailor.DeleteProgramInput, arg2 ...request.Option) (*mediatailor.DeleteProgramOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProgramWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DeleteProgramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProgramWithContext indicates an expected call of DeleteProgramWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DeleteProgramWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgramWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteProgramWithContext), varargs...)
}

// DeleteSourceLocation mocks base method.
func (m *MockMediaTailorAPI) DeleteSourceLocation(arg0 *mediatailor.DeleteSourceLocationInput) (*mediatailor.DeleteSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceLocation", arg0)
	ret0, _ := ret[0].(*mediatailor.DeleteSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceLocation indicates an expected call of DeleteSourceLocation.
func (mr *MockMediaTailorAPIMockRecorder) DeleteSourceLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceLocation", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteSourceLocation), arg0)
}

// DeleteSourceLocationRequest mocks base method.
func (m *MockMediaTailorAPI) DeleteSourceLocationRequest(arg0 *mediatailor.DeleteSourceLocationInput) (*request.Request, *mediatailor.DeleteSourceLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DeleteSourceLocationOutput)
	return ret0, ret1
}

// DeleteSourceLocationRequest indicates an expected call of DeleteSourceLocationRequest.
func (mr *MockMediaTailorAPIMockRecorder) DeleteSourceLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceLocationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteSourceLocationRequest), arg0)
}

// DeleteSourceLocationWithContext mocks base method.
func (m *MockMediaTailorAPI) DeleteSourceLocationWithContext(arg0 context.Context, arg1 *mediatailor.DeleteSourceLocationInput, arg2 ...request.Option) (*mediatailor.DeleteSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSourceLocationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DeleteSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceLocationWithContext indicates an expected call of DeleteSourceLocationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DeleteSourceLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceLocationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteSourceLocationWithContext), varargs...)
}

// DeleteVodSource mocks base method.
func (m *MockMediaTailorAPI) DeleteVodSource(arg0 *mediatailor.DeleteVodSourceInput) (*mediatailor.DeleteVodSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVodSource", arg0)
	ret0, _ := ret[0].(*mediatailor.DeleteVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVodSource indicates an expected call of DeleteVodSource.
func (mr *MockMediaTailorAPIMockRecorder) DeleteVodSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVodSource", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteVodSource), arg0)
}

// DeleteVodSourceRequest mocks base method.
func (m *MockMediaTailorAPI) DeleteVodSourceRequest(arg0 *mediatailor.DeleteVodSourceInput) (*request.Request, *mediatailor.DeleteVodSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVodSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DeleteVodSourceOutput)
	return ret0, ret1
}

// DeleteVodSourceRequest indicates an expected call of DeleteVodSourceRequest.
func (mr *MockMediaTailorAPIMockRecorder) DeleteVodSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVodSourceRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteVodSourceRequest), arg0)
}

// DeleteVodSourceWithContext mocks base method.
func (m *MockMediaTailorAPI) DeleteVodSourceWithContext(arg0 context.Context, arg1 *mediatailor.DeleteVodSourceInput, arg2 ...request.Option) (*mediatailor.DeleteVodSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVodSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DeleteVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVodSourceWithContext indicates an expected call of DeleteVodSourceWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DeleteVodSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVodSourceWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DeleteVodSourceWithContext), varargs...)
}

// DescribeChannel mocks base method.
func (m *MockMediaTailorAPI) DescribeChannel(arg0 *mediatailor.DescribeChannelInput) (*mediatailor.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannel", arg0)
	ret0, _ := ret[0].(*mediatailor.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannel indicates an expected call of DescribeChannel.
func (mr *MockMediaTailorAPIMockRecorder) DescribeChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannel", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeChannel), arg0)
}

// DescribeChannelRequest mocks base method.
func (m *MockMediaTailorAPI) DescribeChannelRequest(arg0 *mediatailor.DescribeChannelInput) (*request.Request, *mediatailor.DescribeChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DescribeChannelOutput)
	return ret0, ret1
}

// DescribeChannelRequest indicates an expected call of DescribeChannelRequest.
func (mr *MockMediaTailorAPIMockRecorder) DescribeChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeChannelRequest), arg0)
}

// DescribeChannelWithContext mocks base method.
func (m *MockMediaTailorAPI) DescribeChannelWithContext(arg0 context.Context, arg1 *mediatailor.DescribeChannelInput, arg2 ...request.Option) (*mediatailor.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelWithContext indicates an expected call of DescribeChannelWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DescribeChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeChannelWithContext), varargs...)
}

// DescribeProgram mocks base method.
func (m *MockMediaTailorAPI) DescribeProgram(arg0 *mediatailor.DescribeProgramInput) (*mediatailor.DescribeProgramOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProgram", arg0)
	ret0, _ := ret[0].(*mediatailor.DescribeProgramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProgram indicates an expected call of DescribeProgram.
func (mr *MockMediaTailorAPIMockRecorder) DescribeProgram(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProgram", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeProgram), arg0)
}

// DescribeProgramRequest mocks base method.
func (m *MockMediaTailorAPI) DescribeProgramRequest(arg0 *mediatailor.DescribeProgramInput) (*request.Request, *mediatailor.DescribeProgramOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProgramRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DescribeProgramOutput)
	return ret0, ret1
}

// DescribeProgramRequest indicates an expected call of DescribeProgramRequest.
func (mr *MockMediaTailorAPIMockRecorder) DescribeProgramRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProgramRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeProgramRequest), arg0)
}

// DescribeProgramWithContext mocks base method.
func (m *MockMediaTailorAPI) DescribeProgramWithContext(arg0 context.Context, arg1 *mediatailor.DescribeProgramInput, arg2 ...request.Option) (*mediatailor.DescribeProgramOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProgramWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DescribeProgramOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProgramWithContext indicates an expected call of DescribeProgramWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DescribeProgramWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProgramWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeProgramWithContext), varargs...)
}

// DescribeSourceLocation mocks base method.
func (m *MockMediaTailorAPI) DescribeSourceLocation(arg0 *mediatailor.DescribeSourceLocationInput) (*mediatailor.DescribeSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceLocation", arg0)
	ret0, _ := ret[0].(*mediatailor.DescribeSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceLocation indicates an expected call of DescribeSourceLocation.
func (mr *MockMediaTailorAPIMockRecorder) DescribeSourceLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceLocation", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeSourceLocation), arg0)
}

// DescribeSourceLocationRequest mocks base method.
func (m *MockMediaTailorAPI) DescribeSourceLocationRequest(arg0 *mediatailor.DescribeSourceLocationInput) (*request.Request, *mediatailor.DescribeSourceLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DescribeSourceLocationOutput)
	return ret0, ret1
}

// DescribeSourceLocationRequest indicates an expected call of DescribeSourceLocationRequest.
func (mr *MockMediaTailorAPIMockRecorder) DescribeSourceLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceLocationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeSourceLocationRequest), arg0)
}

// DescribeSourceLocationWithContext mocks base method.
func (m *MockMediaTailorAPI) DescribeSourceLocationWithContext(arg0 context.Context, arg1 *mediatailor.DescribeSourceLocationInput, arg2 ...request.Option) (*mediatailor.DescribeSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceLocationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DescribeSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceLocationWithContext indicates an expected call of DescribeSourceLocationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DescribeSourceLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceLocationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeSourceLocationWithContext), varargs...)
}

// DescribeVodSource mocks base method.
func (m *MockMediaTailorAPI) DescribeVodSource(arg0 *mediatailor.DescribeVodSourceInput) (*mediatailor.DescribeVodSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVodSource", arg0)
	ret0, _ := ret[0].(*mediatailor.DescribeVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVodSource indicates an expected call of DescribeVodSource.
func (mr *MockMediaTailorAPIMockRecorder) DescribeVodSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVodSource", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeVodSource), arg0)
}

// DescribeVodSourceRequest mocks base method.
func (m *MockMediaTailorAPI) DescribeVodSourceRequest(arg0 *mediatailor.DescribeVodSourceInput) (*request.Request, *mediatailor.DescribeVodSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVodSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.DescribeVodSourceOutput)
	return ret0, ret1
}

// DescribeVodSourceRequest indicates an expected call of DescribeVodSourceRequest.
func (mr *MockMediaTailorAPIMockRecorder) DescribeVodSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVodSourceRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeVodSourceRequest), arg0)
}

// DescribeVodSourceWithContext mocks base method.
func (m *MockMediaTailorAPI) DescribeVodSourceWithContext(arg0 context.Context, arg1 *mediatailor.DescribeVodSourceInput, arg2 ...request.Option) (*mediatailor.DescribeVodSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVodSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.DescribeVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVodSourceWithContext indicates an expected call of DescribeVodSourceWithContext.
func (mr *MockMediaTailorAPIMockRecorder) DescribeVodSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVodSourceWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).DescribeVodSourceWithContext), varargs...)
}

// GetChannelPolicy mocks base method.
func (m *MockMediaTailorAPI) GetChannelPolicy(arg0 *mediatailor.GetChannelPolicyInput) (*mediatailor.GetChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelPolicy", arg0)
	ret0, _ := ret[0].(*mediatailor.GetChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelPolicy indicates an expected call of GetChannelPolicy.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelPolicy", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelPolicy), arg0)
}

// GetChannelPolicyRequest mocks base method.
func (m *MockMediaTailorAPI) GetChannelPolicyRequest(arg0 *mediatailor.GetChannelPolicyInput) (*request.Request, *mediatailor.GetChannelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.GetChannelPolicyOutput)
	return ret0, ret1
}

// GetChannelPolicyRequest indicates an expected call of GetChannelPolicyRequest.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelPolicyRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelPolicyRequest), arg0)
}

// GetChannelPolicyWithContext mocks base method.
func (m *MockMediaTailorAPI) GetChannelPolicyWithContext(arg0 context.Context, arg1 *mediatailor.GetChannelPolicyInput, arg2 ...request.Option) (*mediatailor.GetChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.GetChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelPolicyWithContext indicates an expected call of GetChannelPolicyWithContext.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelPolicyWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelPolicyWithContext), varargs...)
}

// GetChannelSchedule mocks base method.
func (m *MockMediaTailorAPI) GetChannelSchedule(arg0 *mediatailor.GetChannelScheduleInput) (*mediatailor.GetChannelScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelSchedule", arg0)
	ret0, _ := ret[0].(*mediatailor.GetChannelScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelSchedule indicates an expected call of GetChannelSchedule.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelSchedule", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelSchedule), arg0)
}

// GetChannelSchedulePages mocks base method.
func (m *MockMediaTailorAPI) GetChannelSchedulePages(arg0 *mediatailor.GetChannelScheduleInput, arg1 func(*mediatailor.GetChannelScheduleOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelSchedulePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChannelSchedulePages indicates an expected call of GetChannelSchedulePages.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelSchedulePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelSchedulePages", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelSchedulePages), arg0, arg1)
}

// GetChannelSchedulePagesWithContext mocks base method.
func (m *MockMediaTailorAPI) GetChannelSchedulePagesWithContext(arg0 context.Context, arg1 *mediatailor.GetChannelScheduleInput, arg2 func(*mediatailor.GetChannelScheduleOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelSchedulePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChannelSchedulePagesWithContext indicates an expected call of GetChannelSchedulePagesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelSchedulePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelSchedulePagesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelSchedulePagesWithContext), varargs...)
}

// GetChannelScheduleRequest mocks base method.
func (m *MockMediaTailorAPI) GetChannelScheduleRequest(arg0 *mediatailor.GetChannelScheduleInput) (*request.Request, *mediatailor.GetChannelScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.GetChannelScheduleOutput)
	return ret0, ret1
}

// GetChannelScheduleRequest indicates an expected call of GetChannelScheduleRequest.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelScheduleRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelScheduleRequest), arg0)
}

// GetChannelScheduleWithContext mocks base method.
func (m *MockMediaTailorAPI) GetChannelScheduleWithContext(arg0 context.Context, arg1 *mediatailor.GetChannelScheduleInput, arg2 ...request.Option) (*mediatailor.GetChannelScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.GetChannelScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelScheduleWithContext indicates an expected call of GetChannelScheduleWithContext.
func (mr *MockMediaTailorAPIMockRecorder) GetChannelScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelScheduleWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetChannelScheduleWithContext), varargs...)
}

// GetPlaybackConfiguration mocks base method.
func (m *MockMediaTailorAPI) GetPlaybackConfiguration(arg0 *mediatailor.GetPlaybackConfigurationInput) (*mediatailor.GetPlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybackConfiguration", arg0)
	ret0, _ := ret[0].(*mediatailor.GetPlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybackConfiguration indicates an expected call of GetPlaybackConfiguration.
func (mr *MockMediaTailorAPIMockRecorder) GetPlaybackConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybackConfiguration", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetPlaybackConfiguration), arg0)
}

// GetPlaybackConfigurationRequest mocks base method.
func (m *MockMediaTailorAPI) GetPlaybackConfigurationRequest(arg0 *mediatailor.GetPlaybackConfigurationInput) (*request.Request, *mediatailor.GetPlaybackConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybackConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.GetPlaybackConfigurationOutput)
	return ret0, ret1
}

// GetPlaybackConfigurationRequest indicates an expected call of GetPlaybackConfigurationRequest.
func (mr *MockMediaTailorAPIMockRecorder) GetPlaybackConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybackConfigurationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetPlaybackConfigurationRequest), arg0)
}

// GetPlaybackConfigurationWithContext mocks base method.
func (m *MockMediaTailorAPI) GetPlaybackConfigurationWithContext(arg0 context.Context, arg1 *mediatailor.GetPlaybackConfigurationInput, arg2 ...request.Option) (*mediatailor.GetPlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlaybackConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.GetPlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybackConfigurationWithContext indicates an expected call of GetPlaybackConfigurationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) GetPlaybackConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybackConfigurationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetPlaybackConfigurationWithContext), varargs...)
}

// GetPrefetchSchedule mocks base method.
func (m *MockMediaTailorAPI) GetPrefetchSchedule(arg0 *mediatailor.GetPrefetchScheduleInput) (*mediatailor.GetPrefetchScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrefetchSchedule", arg0)
	ret0, _ := ret[0].(*mediatailor.GetPrefetchScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrefetchSchedule indicates an expected call of GetPrefetchSchedule.
func (mr *MockMediaTailorAPIMockRecorder) GetPrefetchSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrefetchSchedule", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetPrefetchSchedule), arg0)
}

// GetPrefetchScheduleRequest mocks base method.
func (m *MockMediaTailorAPI) GetPrefetchScheduleRequest(arg0 *mediatailor.GetPrefetchScheduleInput) (*request.Request, *mediatailor.GetPrefetchScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrefetchScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.GetPrefetchScheduleOutput)
	return ret0, ret1
}

// GetPrefetchScheduleRequest indicates an expected call of GetPrefetchScheduleRequest.
func (mr *MockMediaTailorAPIMockRecorder) GetPrefetchScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrefetchScheduleRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetPrefetchScheduleRequest), arg0)
}

// GetPrefetchScheduleWithContext mocks base method.
func (m *MockMediaTailorAPI) GetPrefetchScheduleWithContext(arg0 context.Context, arg1 *mediatailor.GetPrefetchScheduleInput, arg2 ...request.Option) (*mediatailor.GetPrefetchScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrefetchScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.GetPrefetchScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrefetchScheduleWithContext indicates an expected call of GetPrefetchScheduleWithContext.
func (mr *MockMediaTailorAPIMockRecorder) GetPrefetchScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrefetchScheduleWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).GetPrefetchScheduleWithContext), varargs...)
}

// ListAlerts mocks base method.
func (m *MockMediaTailorAPI) ListAlerts(arg0 *mediatailor.ListAlertsInput) (*mediatailor.ListAlertsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlerts", arg0)
	ret0, _ := ret[0].(*mediatailor.ListAlertsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlerts indicates an expected call of ListAlerts.
func (mr *MockMediaTailorAPIMockRecorder) ListAlerts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlerts", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListAlerts), arg0)
}

// ListAlertsPages mocks base method.
func (m *MockMediaTailorAPI) ListAlertsPages(arg0 *mediatailor.ListAlertsInput, arg1 func(*mediatailor.ListAlertsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAlertsPages indicates an expected call of ListAlertsPages.
func (mr *MockMediaTailorAPIMockRecorder) ListAlertsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsPages", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListAlertsPages), arg0, arg1)
}

// ListAlertsPagesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListAlertsPagesWithContext(arg0 context.Context, arg1 *mediatailor.ListAlertsInput, arg2 func(*mediatailor.ListAlertsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAlertsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAlertsPagesWithContext indicates an expected call of ListAlertsPagesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListAlertsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsPagesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListAlertsPagesWithContext), varargs...)
}

// ListAlertsRequest mocks base method.
func (m *MockMediaTailorAPI) ListAlertsRequest(arg0 *mediatailor.ListAlertsInput) (*request.Request, *mediatailor.ListAlertsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ListAlertsOutput)
	return ret0, ret1
}

// ListAlertsRequest indicates an expected call of ListAlertsRequest.
func (mr *MockMediaTailorAPIMockRecorder) ListAlertsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListAlertsRequest), arg0)
}

// ListAlertsWithContext mocks base method.
func (m *MockMediaTailorAPI) ListAlertsWithContext(arg0 context.Context, arg1 *mediatailor.ListAlertsInput, arg2 ...request.Option) (*mediatailor.ListAlertsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAlertsWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ListAlertsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlertsWithContext indicates an expected call of ListAlertsWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListAlertsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertsWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListAlertsWithContext), varargs...)
}

// ListChannels mocks base method.
func (m *MockMediaTailorAPI) ListChannels(arg0 *mediatailor.ListChannelsInput) (*mediatailor.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", arg0)
	ret0, _ := ret[0].(*mediatailor.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels.
func (mr *MockMediaTailorAPIMockRecorder) ListChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListChannels), arg0)
}

// ListChannelsPages mocks base method.
func (m *MockMediaTailorAPI) ListChannelsPages(arg0 *mediatailor.ListChannelsInput, arg1 func(*mediatailor.ListChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPages indicates an expected call of ListChannelsPages.
func (mr *MockMediaTailorAPIMockRecorder) ListChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPages", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListChannelsPages), arg0, arg1)
}

// ListChannelsPagesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListChannelsPagesWithContext(arg0 context.Context, arg1 *mediatailor.ListChannelsInput, arg2 func(*mediatailor.ListChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPagesWithContext indicates an expected call of ListChannelsPagesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPagesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListChannelsPagesWithContext), varargs...)
}

// ListChannelsRequest mocks base method.
func (m *MockMediaTailorAPI) ListChannelsRequest(arg0 *mediatailor.ListChannelsInput) (*request.Request, *mediatailor.ListChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ListChannelsOutput)
	return ret0, ret1
}

// ListChannelsRequest indicates an expected call of ListChannelsRequest.
func (mr *MockMediaTailorAPIMockRecorder) ListChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListChannelsRequest), arg0)
}

// ListChannelsWithContext mocks base method.
func (m *MockMediaTailorAPI) ListChannelsWithContext(arg0 context.Context, arg1 *mediatailor.ListChannelsInput, arg2 ...request.Option) (*mediatailor.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsWithContext indicates an expected call of ListChannelsWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListChannelsWithContext), varargs...)
}

// ListPlaybackConfigurations mocks base method.
func (m *MockMediaTailorAPI) ListPlaybackConfigurations(arg0 *mediatailor.ListPlaybackConfigurationsInput) (*mediatailor.ListPlaybackConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaybackConfigurations", arg0)
	ret0, _ := ret[0].(*mediatailor.ListPlaybackConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaybackConfigurations indicates an expected call of ListPlaybackConfigurations.
func (mr *MockMediaTailorAPIMockRecorder) ListPlaybackConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackConfigurations", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPlaybackConfigurations), arg0)
}

// ListPlaybackConfigurationsPages mocks base method.
func (m *MockMediaTailorAPI) ListPlaybackConfigurationsPages(arg0 *mediatailor.ListPlaybackConfigurationsInput, arg1 func(*mediatailor.ListPlaybackConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaybackConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlaybackConfigurationsPages indicates an expected call of ListPlaybackConfigurationsPages.
func (mr *MockMediaTailorAPIMockRecorder) ListPlaybackConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackConfigurationsPages", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPlaybackConfigurationsPages), arg0, arg1)
}

// ListPlaybackConfigurationsPagesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListPlaybackConfigurationsPagesWithContext(arg0 context.Context, arg1 *mediatailor.ListPlaybackConfigurationsInput, arg2 func(*mediatailor.ListPlaybackConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlaybackConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlaybackConfigurationsPagesWithContext indicates an expected call of ListPlaybackConfigurationsPagesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListPlaybackConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackConfigurationsPagesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPlaybackConfigurationsPagesWithContext), varargs...)
}

// ListPlaybackConfigurationsRequest mocks base method.
func (m *MockMediaTailorAPI) ListPlaybackConfigurationsRequest(arg0 *mediatailor.ListPlaybackConfigurationsInput) (*request.Request, *mediatailor.ListPlaybackConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaybackConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ListPlaybackConfigurationsOutput)
	return ret0, ret1
}

// ListPlaybackConfigurationsRequest indicates an expected call of ListPlaybackConfigurationsRequest.
func (mr *MockMediaTailorAPIMockRecorder) ListPlaybackConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackConfigurationsRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPlaybackConfigurationsRequest), arg0)
}

// ListPlaybackConfigurationsWithContext mocks base method.
func (m *MockMediaTailorAPI) ListPlaybackConfigurationsWithContext(arg0 context.Context, arg1 *mediatailor.ListPlaybackConfigurationsInput, arg2 ...request.Option) (*mediatailor.ListPlaybackConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlaybackConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ListPlaybackConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaybackConfigurationsWithContext indicates an expected call of ListPlaybackConfigurationsWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListPlaybackConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaybackConfigurationsWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPlaybackConfigurationsWithContext), varargs...)
}

// ListPrefetchSchedules mocks base method.
func (m *MockMediaTailorAPI) ListPrefetchSchedules(arg0 *mediatailor.ListPrefetchSchedulesInput) (*mediatailor.ListPrefetchSchedulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrefetchSchedules", arg0)
	ret0, _ := ret[0].(*mediatailor.ListPrefetchSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrefetchSchedules indicates an expected call of ListPrefetchSchedules.
func (mr *MockMediaTailorAPIMockRecorder) ListPrefetchSchedules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrefetchSchedules", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPrefetchSchedules), arg0)
}

// ListPrefetchSchedulesPages mocks base method.
func (m *MockMediaTailorAPI) ListPrefetchSchedulesPages(arg0 *mediatailor.ListPrefetchSchedulesInput, arg1 func(*mediatailor.ListPrefetchSchedulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrefetchSchedulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPrefetchSchedulesPages indicates an expected call of ListPrefetchSchedulesPages.
func (mr *MockMediaTailorAPIMockRecorder) ListPrefetchSchedulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrefetchSchedulesPages", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPrefetchSchedulesPages), arg0, arg1)
}

// ListPrefetchSchedulesPagesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListPrefetchSchedulesPagesWithContext(arg0 context.Context, arg1 *mediatailor.ListPrefetchSchedulesInput, arg2 func(*mediatailor.ListPrefetchSchedulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrefetchSchedulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPrefetchSchedulesPagesWithContext indicates an expected call of ListPrefetchSchedulesPagesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListPrefetchSchedulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrefetchSchedulesPagesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPrefetchSchedulesPagesWithContext), varargs...)
}

// ListPrefetchSchedulesRequest mocks base method.
func (m *MockMediaTailorAPI) ListPrefetchSchedulesRequest(arg0 *mediatailor.ListPrefetchSchedulesInput) (*request.Request, *mediatailor.ListPrefetchSchedulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrefetchSchedulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ListPrefetchSchedulesOutput)
	return ret0, ret1
}

// ListPrefetchSchedulesRequest indicates an expected call of ListPrefetchSchedulesRequest.
func (mr *MockMediaTailorAPIMockRecorder) ListPrefetchSchedulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrefetchSchedulesRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPrefetchSchedulesRequest), arg0)
}

// ListPrefetchSchedulesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListPrefetchSchedulesWithContext(arg0 context.Context, arg1 *mediatailor.ListPrefetchSchedulesInput, arg2 ...request.Option) (*mediatailor.ListPrefetchSchedulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrefetchSchedulesWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ListPrefetchSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrefetchSchedulesWithContext indicates an expected call of ListPrefetchSchedulesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListPrefetchSchedulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrefetchSchedulesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListPrefetchSchedulesWithContext), varargs...)
}

// ListSourceLocations mocks base method.
func (m *MockMediaTailorAPI) ListSourceLocations(arg0 *mediatailor.ListSourceLocationsInput) (*mediatailor.ListSourceLocationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceLocations", arg0)
	ret0, _ := ret[0].(*mediatailor.ListSourceLocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSourceLocations indicates an expected call of ListSourceLocations.
func (mr *MockMediaTailorAPIMockRecorder) ListSourceLocations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceLocations", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListSourceLocations), arg0)
}

// ListSourceLocationsPages mocks base method.
func (m *MockMediaTailorAPI) ListSourceLocationsPages(arg0 *mediatailor.ListSourceLocationsInput, arg1 func(*mediatailor.ListSourceLocationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceLocationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSourceLocationsPages indicates an expected call of ListSourceLocationsPages.
func (mr *MockMediaTailorAPIMockRecorder) ListSourceLocationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceLocationsPages", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListSourceLocationsPages), arg0, arg1)
}

// ListSourceLocationsPagesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListSourceLocationsPagesWithContext(arg0 context.Context, arg1 *mediatailor.ListSourceLocationsInput, arg2 func(*mediatailor.ListSourceLocationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSourceLocationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSourceLocationsPagesWithContext indicates an expected call of ListSourceLocationsPagesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListSourceLocationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceLocationsPagesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListSourceLocationsPagesWithContext), varargs...)
}

// ListSourceLocationsRequest mocks base method.
func (m *MockMediaTailorAPI) ListSourceLocationsRequest(arg0 *mediatailor.ListSourceLocationsInput) (*request.Request, *mediatailor.ListSourceLocationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceLocationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ListSourceLocationsOutput)
	return ret0, ret1
}

// ListSourceLocationsRequest indicates an expected call of ListSourceLocationsRequest.
func (mr *MockMediaTailorAPIMockRecorder) ListSourceLocationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceLocationsRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListSourceLocationsRequest), arg0)
}

// ListSourceLocationsWithContext mocks base method.
func (m *MockMediaTailorAPI) ListSourceLocationsWithContext(arg0 context.Context, arg1 *mediatailor.ListSourceLocationsInput, arg2 ...request.Option) (*mediatailor.ListSourceLocationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSourceLocationsWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ListSourceLocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSourceLocationsWithContext indicates an expected call of ListSourceLocationsWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListSourceLocationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceLocationsWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListSourceLocationsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockMediaTailorAPI) ListTagsForResource(arg0 *mediatailor.ListTagsForResourceInput) (*mediatailor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mediatailor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockMediaTailorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockMediaTailorAPI) ListTagsForResourceRequest(arg0 *mediatailor.ListTagsForResourceInput) (*request.Request, *mediatailor.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockMediaTailorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockMediaTailorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mediatailor.ListTagsForResourceInput, arg2 ...request.Option) (*mediatailor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVodSources mocks base method.
func (m *MockMediaTailorAPI) ListVodSources(arg0 *mediatailor.ListVodSourcesInput) (*mediatailor.ListVodSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVodSources", arg0)
	ret0, _ := ret[0].(*mediatailor.ListVodSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVodSources indicates an expected call of ListVodSources.
func (mr *MockMediaTailorAPIMockRecorder) ListVodSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVodSources", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListVodSources), arg0)
}

// ListVodSourcesPages mocks base method.
func (m *MockMediaTailorAPI) ListVodSourcesPages(arg0 *mediatailor.ListVodSourcesInput, arg1 func(*mediatailor.ListVodSourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVodSourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVodSourcesPages indicates an expected call of ListVodSourcesPages.
func (mr *MockMediaTailorAPIMockRecorder) ListVodSourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVodSourcesPages", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListVodSourcesPages), arg0, arg1)
}

// ListVodSourcesPagesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListVodSourcesPagesWithContext(arg0 context.Context, arg1 *mediatailor.ListVodSourcesInput, arg2 func(*mediatailor.ListVodSourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVodSourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVodSourcesPagesWithContext indicates an expected call of ListVodSourcesPagesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListVodSourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVodSourcesPagesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListVodSourcesPagesWithContext), varargs...)
}

// ListVodSourcesRequest mocks base method.
func (m *MockMediaTailorAPI) ListVodSourcesRequest(arg0 *mediatailor.ListVodSourcesInput) (*request.Request, *mediatailor.ListVodSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVodSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.ListVodSourcesOutput)
	return ret0, ret1
}

// ListVodSourcesRequest indicates an expected call of ListVodSourcesRequest.
func (mr *MockMediaTailorAPIMockRecorder) ListVodSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVodSourcesRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListVodSourcesRequest), arg0)
}

// ListVodSourcesWithContext mocks base method.
func (m *MockMediaTailorAPI) ListVodSourcesWithContext(arg0 context.Context, arg1 *mediatailor.ListVodSourcesInput, arg2 ...request.Option) (*mediatailor.ListVodSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVodSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.ListVodSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVodSourcesWithContext indicates an expected call of ListVodSourcesWithContext.
func (mr *MockMediaTailorAPIMockRecorder) ListVodSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVodSourcesWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).ListVodSourcesWithContext), varargs...)
}

// PutChannelPolicy mocks base method.
func (m *MockMediaTailorAPI) PutChannelPolicy(arg0 *mediatailor.PutChannelPolicyInput) (*mediatailor.PutChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutChannelPolicy", arg0)
	ret0, _ := ret[0].(*mediatailor.PutChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutChannelPolicy indicates an expected call of PutChannelPolicy.
func (mr *MockMediaTailorAPIMockRecorder) PutChannelPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChannelPolicy", reflect.TypeOf((*MockMediaTailorAPI)(nil).PutChannelPolicy), arg0)
}

// PutChannelPolicyRequest mocks base method.
func (m *MockMediaTailorAPI) PutChannelPolicyRequest(arg0 *mediatailor.PutChannelPolicyInput) (*request.Request, *mediatailor.PutChannelPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutChannelPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.PutChannelPolicyOutput)
	return ret0, ret1
}

// PutChannelPolicyRequest indicates an expected call of PutChannelPolicyRequest.
func (mr *MockMediaTailorAPIMockRecorder) PutChannelPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChannelPolicyRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).PutChannelPolicyRequest), arg0)
}

// PutChannelPolicyWithContext mocks base method.
func (m *MockMediaTailorAPI) PutChannelPolicyWithContext(arg0 context.Context, arg1 *mediatailor.PutChannelPolicyInput, arg2 ...request.Option) (*mediatailor.PutChannelPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutChannelPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.PutChannelPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutChannelPolicyWithContext indicates an expected call of PutChannelPolicyWithContext.
func (mr *MockMediaTailorAPIMockRecorder) PutChannelPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChannelPolicyWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).PutChannelPolicyWithContext), varargs...)
}

// PutPlaybackConfiguration mocks base method.
func (m *MockMediaTailorAPI) PutPlaybackConfiguration(arg0 *mediatailor.PutPlaybackConfigurationInput) (*mediatailor.PutPlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPlaybackConfiguration", arg0)
	ret0, _ := ret[0].(*mediatailor.PutPlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPlaybackConfiguration indicates an expected call of PutPlaybackConfiguration.
func (mr *MockMediaTailorAPIMockRecorder) PutPlaybackConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPlaybackConfiguration", reflect.TypeOf((*MockMediaTailorAPI)(nil).PutPlaybackConfiguration), arg0)
}

// PutPlaybackConfigurationRequest mocks base method.
func (m *MockMediaTailorAPI) PutPlaybackConfigurationRequest(arg0 *mediatailor.PutPlaybackConfigurationInput) (*request.Request, *mediatailor.PutPlaybackConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPlaybackConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.PutPlaybackConfigurationOutput)
	return ret0, ret1
}

// PutPlaybackConfigurationRequest indicates an expected call of PutPlaybackConfigurationRequest.
func (mr *MockMediaTailorAPIMockRecorder) PutPlaybackConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPlaybackConfigurationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).PutPlaybackConfigurationRequest), arg0)
}

// PutPlaybackConfigurationWithContext mocks base method.
func (m *MockMediaTailorAPI) PutPlaybackConfigurationWithContext(arg0 context.Context, arg1 *mediatailor.PutPlaybackConfigurationInput, arg2 ...request.Option) (*mediatailor.PutPlaybackConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPlaybackConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.PutPlaybackConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPlaybackConfigurationWithContext indicates an expected call of PutPlaybackConfigurationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) PutPlaybackConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPlaybackConfigurationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).PutPlaybackConfigurationWithContext), varargs...)
}

// StartChannel mocks base method.
func (m *MockMediaTailorAPI) StartChannel(arg0 *mediatailor.StartChannelInput) (*mediatailor.StartChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChannel", arg0)
	ret0, _ := ret[0].(*mediatailor.StartChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChannel indicates an expected call of StartChannel.
func (mr *MockMediaTailorAPIMockRecorder) StartChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannel", reflect.TypeOf((*MockMediaTailorAPI)(nil).StartChannel), arg0)
}

// StartChannelRequest mocks base method.
func (m *MockMediaTailorAPI) StartChannelRequest(arg0 *mediatailor.StartChannelInput) (*request.Request, *mediatailor.StartChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.StartChannelOutput)
	return ret0, ret1
}

// StartChannelRequest indicates an expected call of StartChannelRequest.
func (mr *MockMediaTailorAPIMockRecorder) StartChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannelRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).StartChannelRequest), arg0)
}

// StartChannelWithContext mocks base method.
func (m *MockMediaTailorAPI) StartChannelWithContext(arg0 context.Context, arg1 *mediatailor.StartChannelInput, arg2 ...request.Option) (*mediatailor.StartChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.StartChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChannelWithContext indicates an expected call of StartChannelWithContext.
func (mr *MockMediaTailorAPIMockRecorder) StartChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChannelWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).StartChannelWithContext), varargs...)
}

// StopChannel mocks base method.
func (m *MockMediaTailorAPI) StopChannel(arg0 *mediatailor.StopChannelInput) (*mediatailor.StopChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChannel", arg0)
	ret0, _ := ret[0].(*mediatailor.StopChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopChannel indicates an expected call of StopChannel.
func (mr *MockMediaTailorAPIMockRecorder) StopChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChannel", reflect.TypeOf((*MockMediaTailorAPI)(nil).StopChannel), arg0)
}

// StopChannelRequest mocks base method.
func (m *MockMediaTailorAPI) StopChannelRequest(arg0 *mediatailor.StopChannelInput) (*request.Request, *mediatailor.StopChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.StopChannelOutput)
	return ret0, ret1
}

// StopChannelRequest indicates an expected call of StopChannelRequest.
func (mr *MockMediaTailorAPIMockRecorder) StopChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChannelRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).StopChannelRequest), arg0)
}

// StopChannelWithContext mocks base method.
func (m *MockMediaTailorAPI) StopChannelWithContext(arg0 context.Context, arg1 *mediatailor.StopChannelInput, arg2 ...request.Option) (*mediatailor.StopChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.StopChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopChannelWithContext indicates an expected call of StopChannelWithContext.
func (mr *MockMediaTailorAPIMockRecorder) StopChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChannelWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).StopChannelWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockMediaTailorAPI) TagResource(arg0 *mediatailor.TagResourceInput) (*mediatailor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mediatailor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockMediaTailorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMediaTailorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockMediaTailorAPI) TagResourceRequest(arg0 *mediatailor.TagResourceInput) (*request.Request, *mediatailor.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockMediaTailorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockMediaTailorAPI) TagResourceWithContext(arg0 context.Context, arg1 *mediatailor.TagResourceInput, arg2 ...request.Option) (*mediatailor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockMediaTailorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockMediaTailorAPI) UntagResource(arg0 *mediatailor.UntagResourceInput) (*mediatailor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mediatailor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockMediaTailorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMediaTailorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockMediaTailorAPI) UntagResourceRequest(arg0 *mediatailor.UntagResourceInput) (*request.Request, *mediatailor.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockMediaTailorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockMediaTailorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mediatailor.UntagResourceInput, arg2 ...request.Option) (*mediatailor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockMediaTailorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateChannel mocks base method.
func (m *MockMediaTailorAPI) UpdateChannel(arg0 *mediatailor.UpdateChannelInput) (*mediatailor.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*mediatailor.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockMediaTailorAPIMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateChannel), arg0)
}

// UpdateChannelRequest mocks base method.
func (m *MockMediaTailorAPI) UpdateChannelRequest(arg0 *mediatailor.UpdateChannelInput) (*request.Request, *mediatailor.UpdateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.UpdateChannelOutput)
	return ret0, ret1
}

// UpdateChannelRequest indicates an expected call of UpdateChannelRequest.
func (mr *MockMediaTailorAPIMockRecorder) UpdateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateChannelRequest), arg0)
}

// UpdateChannelWithContext mocks base method.
func (m *MockMediaTailorAPI) UpdateChannelWithContext(arg0 context.Context, arg1 *mediatailor.UpdateChannelInput, arg2 ...request.Option) (*mediatailor.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelWithContext indicates an expected call of UpdateChannelWithContext.
func (mr *MockMediaTailorAPIMockRecorder) UpdateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateChannelWithContext), varargs...)
}

// UpdateSourceLocation mocks base method.
func (m *MockMediaTailorAPI) UpdateSourceLocation(arg0 *mediatailor.UpdateSourceLocationInput) (*mediatailor.UpdateSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSourceLocation", arg0)
	ret0, _ := ret[0].(*mediatailor.UpdateSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceLocation indicates an expected call of UpdateSourceLocation.
func (mr *MockMediaTailorAPIMockRecorder) UpdateSourceLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceLocation", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateSourceLocation), arg0)
}

// UpdateSourceLocationRequest mocks base method.
func (m *MockMediaTailorAPI) UpdateSourceLocationRequest(arg0 *mediatailor.UpdateSourceLocationInput) (*request.Request, *mediatailor.UpdateSourceLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSourceLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.UpdateSourceLocationOutput)
	return ret0, ret1
}

// UpdateSourceLocationRequest indicates an expected call of UpdateSourceLocationRequest.
func (mr *MockMediaTailorAPIMockRecorder) UpdateSourceLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceLocationRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateSourceLocationRequest), arg0)
}

// UpdateSourceLocationWithContext mocks base method.
func (m *MockMediaTailorAPI) UpdateSourceLocationWithContext(arg0 context.Context, arg1 *mediatailor.UpdateSourceLocationInput, arg2 ...request.Option) (*mediatailor.UpdateSourceLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSourceLocationWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.UpdateSourceLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceLocationWithContext indicates an expected call of UpdateSourceLocationWithContext.
func (mr *MockMediaTailorAPIMockRecorder) UpdateSourceLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceLocationWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateSourceLocationWithContext), varargs...)
}

// UpdateVodSource mocks base method.
func (m *MockMediaTailorAPI) UpdateVodSource(arg0 *mediatailor.UpdateVodSourceInput) (*mediatailor.UpdateVodSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVodSource", arg0)
	ret0, _ := ret[0].(*mediatailor.UpdateVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVodSource indicates an expected call of UpdateVodSource.
func (mr *MockMediaTailorAPIMockRecorder) UpdateVodSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVodSource", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateVodSource), arg0)
}

// UpdateVodSourceRequest mocks base method.
func (m *MockMediaTailorAPI) UpdateVodSourceRequest(arg0 *mediatailor.UpdateVodSourceInput) (*request.Request, *mediatailor.UpdateVodSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVodSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediatailor.UpdateVodSourceOutput)
	return ret0, ret1
}

// UpdateVodSourceRequest indicates an expected call of UpdateVodSourceRequest.
func (mr *MockMediaTailorAPIMockRecorder) UpdateVodSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVodSourceRequest", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateVodSourceRequest), arg0)
}

// UpdateVodSourceWithContext mocks base method.
func (m *MockMediaTailorAPI) UpdateVodSourceWithContext(arg0 context.Context, arg1 *mediatailor.UpdateVodSourceInput, arg2 ...request.Option) (*mediatailor.UpdateVodSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVodSourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediatailor.UpdateVodSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVodSourceWithContext indicates an expected call of UpdateVodSourceWithContext.
func (mr *MockMediaTailorAPIMockRecorder) UpdateVodSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVodSourceWithContext", reflect.TypeOf((*MockMediaTailorAPI)(nil).UpdateVodSourceWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/kafka/kafkaiface (interfaces: KafkaAPI)

// Package kafkamock is a generated GoMock package.
package kafkamock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	kafka "github.com/aws/aws-sdk-go/service/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaAPI is a mock of KafkaAPI interface.
type MockKafkaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaAPIMockRecorder
}

// MockKafkaAPIMockRecorder is the mock recorder for MockKafkaAPI.
type MockKafkaAPIMockRecorder struct {
	mock *MockKafkaAPI
}

// NewMockKafkaAPI creates a new mock instance.
func NewMockKafkaAPI(ctrl *gomock.Controller) *MockKafkaAPI {
	mock := &MockKafkaAPI{ctrl: ctrl}
	mock.recorder = &MockKafkaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaAPI) EXPECT() *MockKafkaAPIMockRecorder {
	return m.recorder
}

// BatchAssociateScramSecret mocks base method.
func (m *MockKafkaAPI) BatchAssociateScramSecret(arg0 *kafka.BatchAssociateScramSecretInput) (*kafka.BatchAssociateScramSecretOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateScramSecret", arg0)
	ret0, _ := ret[0].(*kafka.BatchAssociateScramSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateScramSecret indicates an expected call of BatchAssociateScramSecret.
func (mr *MockKafkaAPIMockRecorder) BatchAssociateScramSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateScramSecret", reflect.TypeOf((*MockKafkaAPI)(nil).BatchAssociateScramSecret), arg0)
}

// BatchAssociateScramSecretRequest mocks base method.
func (m *MockKafkaAPI) BatchAssociateScramSecretRequest(arg0 *kafka.BatchAssociateScramSecretInput) (*request.Request, *kafka.BatchAssociateScramSecretOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateScramSecretRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.BatchAssociateScramSecretOutput)
	return ret0, ret1
}

// BatchAssociateScramSecretRequest indicates an expected call of BatchAssociateScramSecretRequest.
func (mr *MockKafkaAPIMockRecorder) BatchAssociateScramSecretRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateScramSecretRequest", reflect.TypeOf((*MockKafkaAPI)(nil).BatchAssociateScramSecretRequest), arg0)
}

// BatchAssociateScramSecretWithContext mocks base method.
func (m *MockKafkaAPI) BatchAssociateScramSecretWithContext(arg0 context.Context, arg1 *kafka.BatchAssociateScramSecretInput, arg2 ...request.Option) (*kafka.BatchAssociateScramSecretOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAssociateScramSecretWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.BatchAssociateScramSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateScramSecretWithContext indicates an expected call of BatchAssociateScramSecretWithContext.
func (mr *MockKafkaAPIMockRecorder) BatchAssociateScramSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateScramSecretWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).BatchAssociateScramSecretWithContext), varargs...)
}

// BatchDisassociateScramSecret mocks base method.
func (m *MockKafkaAPI) BatchDisassociateScramSecret(arg0 *kafka.BatchDisassociateScramSecretInput) (*kafka.BatchDisassociateScramSecretOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateScramSecret", arg0)
	ret0, _ := ret[0].(*kafka.BatchDisassociateScramSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateScramSecret indicates an expected call of BatchDisassociateScramSecret.
func (mr *MockKafkaAPIMockRecorder) BatchDisassociateScramSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateScramSecret", reflect.TypeOf((*MockKafkaAPI)(nil).BatchDisassociateScramSecret), arg0)
}

// BatchDisassociateScramSecretRequest mocks base method.
func (m *MockKafkaAPI) BatchDisassociateScramSecretRequest(arg0 *kafka.BatchDisassociateScramSecretInput) (*request.Request, *kafka.BatchDisassociateScramSecretOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateScramSecretRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.BatchDisassociateScramSecretOutput)
	return ret0, ret1
}

// BatchDisassociateScramSecretRequest indicates an expected call of BatchDisassociateScramSecretRequest.
func (mr *MockKafkaAPIMockRecorder) BatchDisassociateScramSecretRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateScramSecretRequest", reflect.TypeOf((*MockKafkaAPI)(nil).BatchDisassociateScramSecretRequest), arg0)
}

// BatchDisassociateScramSecretWithContext mocks base method.
func (m *MockKafkaAPI) BatchDisassociateScramSecretWithContext(arg0 context.Context, arg1 *kafka.BatchDisassociateScramSecretInput, arg2 ...request.Option) (*kafka.BatchDisassociateScramSecretOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisassociateScramSecretWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.BatchDisassociateScramSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateScramSecretWithContext indicates an expected call of BatchDisassociateScramSecretWithContext.
func (mr *MockKafkaAPIMockRecorder) BatchDisassociateScramSecretWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateScramSecretWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).BatchDisassociateScramSecretWithContext), varargs...)
}

// CreateCluster mocks base method.
func (m *MockKafkaAPI) CreateCluster(arg0 *kafka.CreateClusterInput) (*kafka.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0)
	ret0, _ := ret[0].(*kafka.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockKafkaAPIMockRecorder) CreateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockKafkaAPI)(nil).CreateCluster), arg0)
}

// CreateClusterRequest mocks base method.
func (m *MockKafkaAPI) CreateClusterRequest(arg0 *kafka.CreateClusterInput) (*request.Request, *kafka.CreateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.CreateClusterOutput)
	return ret0, ret1
}

// CreateClusterRequest indicates an expected call of CreateClusterRequest.
func (mr *MockKafkaAPIMockRecorder) CreateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRequest", reflect.TypeOf((*MockKafkaAPI)(nil).CreateClusterRequest), arg0)
}

// CreateClusterV2 mocks base method.
func (m *MockKafkaAPI) CreateClusterV2(arg0 *kafka.CreateClusterV2Input) (*kafka.CreateClusterV2Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterV2", arg0)
	ret0, _ := ret[0].(*kafka.CreateClusterV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterV2 indicates an expected call of CreateClusterV2.
func (mr *MockKafkaAPIMockRecorder) CreateClusterV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterV2", reflect.TypeOf((*MockKafkaAPI)(nil).CreateClusterV2), arg0)
}

// CreateClusterV2Request mocks base method.
func (m *MockKafkaAPI) CreateClusterV2Request(arg0 *kafka.CreateClusterV2Input) (*request.Request, *kafka.CreateClusterV2Output) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterV2Request", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.CreateClusterV2Output)
	return ret0, ret1
}

// CreateClusterV2Request indicates an expected call of CreateClusterV2Request.
func (mr *MockKafkaAPIMockRecorder) CreateClusterV2Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterV2Request", reflect.TypeOf((*MockKafkaAPI)(nil).CreateClusterV2Request), arg0)
}

// CreateClusterV2WithContext mocks base method.
func (m *MockKafkaAPI) CreateClusterV2WithContext(arg0 context.Context, arg1 *kafka.CreateClusterV2Input, arg2 ...request.Option) (*kafka.CreateClusterV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterV2WithContext", varargs...)
	ret0, _ := ret[0].(*kafka.CreateClusterV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterV2WithContext indicates an expected call of CreateClusterV2WithContext.
func (mr *MockKafkaAPIMockRecorder) CreateClusterV2WithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterV2WithContext", reflect.TypeOf((*MockKafkaAPI)(nil).CreateClusterV2WithContext), varargs...)
}

// CreateClusterWithContext mocks base method.
func (m *MockKafkaAPI) CreateClusterWithContext(arg0 context.Context, arg1 *kafka.CreateClusterInput, arg2 ...request.Option) (*kafka.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterWithContext indicates an expected call of CreateClusterWithContext.
func (mr *MockKafkaAPIMockRecorder) CreateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).CreateClusterWithContext), varargs...)
}

// CreateConfiguration mocks base method.
func (m *MockKafkaAPI) CreateConfiguration(arg0 *kafka.CreateConfigurationInput) (*kafka.CreateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfiguration", arg0)
	ret0, _ := ret[0].(*kafka.CreateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfiguration indicates an expected call of CreateConfiguration.
func (mr *MockKafkaAPIMockRecorder) CreateConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfiguration", reflect.TypeOf((*MockKafkaAPI)(nil).CreateConfiguration), arg0)
}

// CreateConfigurationRequest mocks base method.
func (m *MockKafkaAPI) CreateConfigurationRequest(arg0 *kafka.CreateConfigurationInput) (*request.Request, *kafka.CreateConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.CreateConfigurationOutput)
	return ret0, ret1
}

// CreateConfigurationRequest indicates an expected call of CreateConfigurationRequest.
func (mr *MockKafkaAPIMockRecorder) CreateConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationRequest", reflect.TypeOf((*MockKafkaAPI)(nil).CreateConfigurationRequest), arg0)
}

// CreateConfigurationWithContext mocks base method.
func (m *MockKafkaAPI) CreateConfigurationWithContext(arg0 context.Context, arg1 *kafka.CreateConfigurationInput, arg2 ...request.Option) (*kafka.CreateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.CreateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationWithContext indicates an expected call of CreateConfigurationWithContext.
func (mr *MockKafkaAPIMockRecorder) CreateConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).CreateConfigurationWithContext), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockKafkaAPI) DeleteCluster(arg0 *kafka.DeleteClusterInput) (*kafka.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(*kafka.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockKafkaAPIMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteCluster), arg0)
}

// DeleteClusterRequest mocks base method.
func (m *MockKafkaAPI) DeleteClusterRequest(arg0 *kafka.DeleteClusterInput) (*request.Request, *kafka.DeleteClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DeleteClusterOutput)
	return ret0, ret1
}

// DeleteClusterRequest indicates an expected call of DeleteClusterRequest.
func (mr *MockKafkaAPIMockRecorder) DeleteClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteClusterRequest), arg0)
}

// DeleteClusterWithContext mocks base method.
func (m *MockKafkaAPI) DeleteClusterWithContext(arg0 context.Context, arg1 *kafka.DeleteClusterInput, arg2 ...request.Option) (*kafka.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterWithContext indicates an expected call of DeleteClusterWithContext.
func (mr *MockKafkaAPIMockRecorder) DeleteClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteClusterWithContext), varargs...)
}

// DeleteConfiguration mocks base method.
func (m *MockKafkaAPI) DeleteConfiguration(arg0 *kafka.DeleteConfigurationInput) (*kafka.DeleteConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfiguration", arg0)
	ret0, _ := ret[0].(*kafka.DeleteConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfiguration indicates an expected call of DeleteConfiguration.
func (mr *MockKafkaAPIMockRecorder) DeleteConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfiguration", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteConfiguration), arg0)
}

// DeleteConfigurationRequest mocks base method.
func (m *MockKafkaAPI) DeleteConfigurationRequest(arg0 *kafka.DeleteConfigurationInput) (*request.Request, *kafka.DeleteConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DeleteConfigurationOutput)
	return ret0, ret1
}

// DeleteConfigurationRequest indicates an expected call of DeleteConfigurationRequest.
func (mr *MockKafkaAPIMockRecorder) DeleteConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteConfigurationRequest), arg0)
}

// DeleteConfigurationWithContext mocks base method.
func (m *MockKafkaAPI) DeleteConfigurationWithContext(arg0 context.Context, arg1 *kafka.DeleteConfigurationInput, arg2 ...request.Option) (*kafka.DeleteConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DeleteConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationWithContext indicates an expected call of DeleteConfigurationWithContext.
func (mr *MockKafkaAPIMockRecorder) DeleteConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DeleteConfigurationWithContext), varargs...)
}

// DescribeCluster mocks base method.
func (m *MockKafkaAPI) DescribeCluster(arg0 *kafka.DescribeClusterInput) (*kafka.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCluster", arg0)
	ret0, _ := ret[0].(*kafka.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCluster indicates an expected call of DescribeCluster.
func (mr *MockKafkaAPIMockRecorder) DescribeCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCluster", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeCluster), arg0)
}

// DescribeClusterOperation mocks base method.
func (m *MockKafkaAPI) DescribeClusterOperation(arg0 *kafka.DescribeClusterOperationInput) (*kafka.DescribeClusterOperationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterOperation", arg0)
	ret0, _ := ret[0].(*kafka.DescribeClusterOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterOperation indicates an expected call of DescribeClusterOperation.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterOperation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterOperation", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterOperation), arg0)
}

// DescribeClusterOperationRequest mocks base method.
func (m *MockKafkaAPI) DescribeClusterOperationRequest(arg0 *kafka.DescribeClusterOperationInput) (*request.Request, *kafka.DescribeClusterOperationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterOperationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DescribeClusterOperationOutput)
	return ret0, ret1
}

// DescribeClusterOperationRequest indicates an expected call of DescribeClusterOperationRequest.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterOperationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterOperationRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterOperationRequest), arg0)
}

// DescribeClusterOperationWithContext mocks base method.
func (m *MockKafkaAPI) DescribeClusterOperationWithContext(arg0 context.Context, arg1 *kafka.DescribeClusterOperationInput, arg2 ...request.Option) (*kafka.DescribeClusterOperationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterOperationWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DescribeClusterOperationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterOperationWithContext indicates an expected call of DescribeClusterOperationWithContext.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterOperationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterOperationWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterOperationWithContext), varargs...)
}

// DescribeClusterRequest mocks base method.
func (m *MockKafkaAPI) DescribeClusterRequest(arg0 *kafka.DescribeClusterInput) (*request.Request, *kafka.DescribeClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DescribeClusterOutput)
	return ret0, ret1
}

// DescribeClusterRequest indicates an expected call of DescribeClusterRequest.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterRequest), arg0)
}

// DescribeClusterV2 mocks base method.
func (m *MockKafkaAPI) DescribeClusterV2(arg0 *kafka.DescribeClusterV2Input) (*kafka.DescribeClusterV2Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterV2", arg0)
	ret0, _ := ret[0].(*kafka.DescribeClusterV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterV2 indicates an expected call of DescribeClusterV2.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterV2", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterV2), arg0)
}

// DescribeClusterV2Request mocks base method.
func (m *MockKafkaAPI) DescribeClusterV2Request(arg0 *kafka.DescribeClusterV2Input) (*request.Request, *kafka.DescribeClusterV2Output) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterV2Request", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DescribeClusterV2Output)
	return ret0, ret1
}

// DescribeClusterV2Request indicates an expected call of DescribeClusterV2Request.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterV2Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterV2Request", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterV2Request), arg0)
}

// DescribeClusterV2WithContext mocks base method.
func (m *MockKafkaAPI) DescribeClusterV2WithContext(arg0 context.Context, arg1 *kafka.DescribeClusterV2Input, arg2 ...request.Option) (*kafka.DescribeClusterV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterV2WithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DescribeClusterV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterV2WithContext indicates an expected call of DescribeClusterV2WithContext.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterV2WithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterV2WithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterV2WithContext), varargs...)
}

// DescribeClusterWithContext mocks base method.
func (m *MockKafkaAPI) DescribeClusterWithContext(arg0 context.Context, arg1 *kafka.DescribeClusterInput, arg2 ...request.Option) (*kafka.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterWithContext indicates an expected call of DescribeClusterWithContext.
func (mr *MockKafkaAPIMockRecorder) DescribeClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeClusterWithContext), varargs...)
}

// DescribeConfiguration mocks base method.
func (m *MockKafkaAPI) DescribeConfiguration(arg0 *kafka.DescribeConfigurationInput) (*kafka.DescribeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfiguration", arg0)
	ret0, _ := ret[0].(*kafka.DescribeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfiguration indicates an expected call of DescribeConfiguration.
func (mr *MockKafkaAPIMockRecorder) DescribeConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfiguration", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeConfiguration), arg0)
}

// DescribeConfigurationRequest mocks base method.
func (m *MockKafkaAPI) DescribeConfigurationRequest(arg0 *kafka.DescribeConfigurationInput) (*request.Request, *kafka.DescribeConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DescribeConfigurationOutput)
	return ret0, ret1
}

// DescribeConfigurationRequest indicates an expected call of DescribeConfigurationRequest.
func (mr *MockKafkaAPIMockRecorder) DescribeConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeConfigurationRequest), arg0)
}

// DescribeConfigurationRevision mocks base method.
func (m *MockKafkaAPI) DescribeConfigurationRevision(arg0 *kafka.DescribeConfigurationRevisionInput) (*kafka.DescribeConfigurationRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationRevision", arg0)
	ret0, _ := ret[0].(*kafka.DescribeConfigurationRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRevision indicates an expected call of DescribeConfigurationRevision.
func (mr *MockKafkaAPIMockRecorder) DescribeConfigurationRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRevision", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeConfigurationRevision), arg0)
}

// DescribeConfigurationRevisionRequest mocks base method.
func (m *MockKafkaAPI) DescribeConfigurationRevisionRequest(arg0 *kafka.DescribeConfigurationRevisionInput) (*request.Request, *kafka.DescribeConfigurationRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.DescribeConfigurationRevisionOutput)
	return ret0, ret1
}

// DescribeConfigurationRevisionRequest indicates an expected call of DescribeConfigurationRevisionRequest.
func (mr *MockKafkaAPIMockRecorder) DescribeConfigurationRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRevisionRequest", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeConfigurationRevisionRequest), arg0)
}

// DescribeConfigurationRevisionWithContext mocks base method.
func (m *MockKafkaAPI) DescribeConfigurationRevisionWithContext(arg0 context.Context, arg1 *kafka.DescribeConfigurationRevisionInput, arg2 ...request.Option) (*kafka.DescribeConfigurationRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DescribeConfigurationRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationRevisionWithContext indicates an expected call of DescribeConfigurationRevisionWithContext.
func (mr *MockKafkaAPIMockRecorder) DescribeConfigurationRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationRevisionWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeConfigurationRevisionWithContext), varargs...)
}

// DescribeConfigurationWithContext mocks base method.
func (m *MockKafkaAPI) DescribeConfigurationWithContext(arg0 context.Context, arg1 *kafka.DescribeConfigurationInput, arg2 ...request.Option) (*kafka.DescribeConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.DescribeConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationWithContext indicates an expected call of DescribeConfigurationWithContext.
func (mr *MockKafkaAPIMockRecorder) DescribeConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).DescribeConfigurationWithContext), varargs...)
}

// GetBootstrapBrokers mocks base method.
func (m *MockKafkaAPI) GetBootstrapBrokers(arg0 *kafka.GetBootstrapBrokersInput) (*kafka.GetBootstrapBrokersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBootstrapBrokers", arg0)
	ret0, _ := ret[0].(*kafka.GetBootstrapBrokersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBootstrapBrokers indicates an expected call of GetBootstrapBrokers.
func (mr *MockKafkaAPIMockRecorder) GetBootstrapBrokers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrapBrokers", reflect.TypeOf((*MockKafkaAPI)(nil).GetBootstrapBrokers), arg0)
}

// GetBootstrapBrokersRequest mocks base method.
func (m *MockKafkaAPI) GetBootstrapBrokersRequest(arg0 *kafka.GetBootstrapBrokersInput) (*request.Request, *kafka.GetBootstrapBrokersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBootstrapBrokersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.GetBootstrapBrokersOutput)
	return ret0, ret1
}

// GetBootstrapBrokersRequest indicates an expected call of GetBootstrapBrokersRequest.
func (mr *MockKafkaAPIMockRecorder) GetBootstrapBrokersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrapBrokersRequest", reflect.TypeOf((*MockKafkaAPI)(nil).GetBootstrapBrokersRequest), arg0)
}

// GetBootstrapBrokersWithContext mocks base method.
func (m *MockKafkaAPI) GetBootstrapBrokersWithContext(arg0 context.Context, arg1 *kafka.GetBootstrapBrokersInput, arg2 ...request.Option) (*kafka.GetBootstrapBrokersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBootstrapBrokersWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.GetBootstrapBrokersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBootstrapBrokersWithContext indicates an expected call of GetBootstrapBrokersWithContext.
func (mr *MockKafkaAPIMockRecorder) GetBootstrapBrokersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBootstrapBrokersWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).GetBootstrapBrokersWithContext), varargs...)
}

// GetCompatibleKafkaVersions mocks base method.
func (m *MockKafkaAPI) GetCompatibleKafkaVersions(arg0 *kafka.GetCompatibleKafkaVersionsInput) (*kafka.GetCompatibleKafkaVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompatibleKafkaVersions", arg0)
	ret0, _ := ret[0].(*kafka.GetCompatibleKafkaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibleKafkaVersions indicates an expected call of GetCompatibleKafkaVersions.
func (mr *MockKafkaAPIMockRecorder) GetCompatibleKafkaVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibleKafkaVersions", reflect.TypeOf((*MockKafkaAPI)(nil).GetCompatibleKafkaVersions), arg0)
}

// GetCompatibleKafkaVersionsRequest mocks base method.
func (m *MockKafkaAPI) GetCompatibleKafkaVersionsRequest(arg0 *kafka.GetCompatibleKafkaVersionsInput) (*request.Request, *kafka.GetCompatibleKafkaVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompatibleKafkaVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.GetCompatibleKafkaVersionsOutput)
	return ret0, ret1
}

// GetCompatibleKafkaVersionsRequest indicates an expected call of GetCompatibleKafkaVersionsRequest.
func (mr *MockKafkaAPIMockRecorder) GetCompatibleKafkaVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibleKafkaVersionsRequest", reflect.TypeOf((*MockKafkaAPI)(nil).GetCompatibleKafkaVersionsRequest), arg0)
}

// GetCompatibleKafkaVersionsWithContext mocks base method.
func (m *MockKafkaAPI) GetCompatibleKafkaVersionsWithContext(arg0 context.Context, arg1 *kafka.GetCompatibleKafkaVersionsInput, arg2 ...request.Option) (*kafka.GetCompatibleKafkaVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompatibleKafkaVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.GetCompatibleKafkaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompatibleKafkaVersionsWithContext indicates an expected call of GetCompatibleKafkaVersionsWithContext.
func (mr *MockKafkaAPIMockRecorder) GetCompatibleKafkaVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompatibleKafkaVersionsWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).GetCompatibleKafkaVersionsWithContext), varargs...)
}

// ListClusterOperations mocks base method.
func (m *MockKafkaAPI) ListClusterOperations(arg0 *kafka.ListClusterOperationsInput) (*kafka.ListClusterOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterOperations", arg0)
	ret0, _ := ret[0].(*kafka.ListClusterOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterOperations indicates an expected call of ListClusterOperations.
func (mr *MockKafkaAPIMockRecorder) ListClusterOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterOperations", reflect.TypeOf((*MockKafkaAPI)(nil).ListClusterOperations), arg0)
}

// ListClusterOperationsPages mocks base method.
func (m *MockKafkaAPI) ListClusterOperationsPages(arg0 *kafka.ListClusterOperationsInput, arg1 func(*kafka.ListClusterOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClusterOperationsPages indicates an expected call of ListClusterOperationsPages.
func (mr *MockKafkaAPIMockRecorder) ListClusterOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterOperationsPages", reflect.TypeOf((*MockKafkaAPI)(nil).ListClusterOperationsPages), arg0, arg1)
}

// ListClusterOperationsPagesWithContext mocks base method.
func (m *MockKafkaAPI) ListClusterOperationsPagesWithContext(arg0 context.Context, arg1 *kafka.ListClusterOperationsInput, arg2 func(*kafka.ListClusterOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClusterOperationsPagesWithContext indicates an expected call of ListClusterOperationsPagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListClusterOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterOperationsPagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListClusterOperationsPagesWithContext), varargs...)
}

// ListClusterOperationsRequest mocks base method.
func (m *MockKafkaAPI) ListClusterOperationsRequest(arg0 *kafka.ListClusterOperationsInput) (*request.Request, *kafka.ListClusterOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListClusterOperationsOutput)
	return ret0, ret1
}

// ListClusterOperationsRequest indicates an expected call of ListClusterOperationsRequest.
func (mr *MockKafkaAPIMockRecorder) ListClusterOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterOperationsRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListClusterOperationsRequest), arg0)
}

// ListClusterOperationsWithContext mocks base method.
func (m *MockKafkaAPI) ListClusterOperationsWithContext(arg0 context.Context, arg1 *kafka.ListClusterOperationsInput, arg2 ...request.Option) (*kafka.ListClusterOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListClusterOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterOperationsWithContext indicates an expected call of ListClusterOperationsWithContext.
func (mr *MockKafkaAPIMockRecorder) ListClusterOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterOperationsWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListClusterOperationsWithContext), varargs...)
}

// ListClusters mocks base method.
func (m *MockKafkaAPI) ListClusters(arg0 *kafka.ListClustersInput) (*kafka.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0)
	ret0, _ := ret[0].(*kafka.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockKafkaAPIMockRecorder) ListClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockKafkaAPI)(nil).ListClusters), arg0)
}

// ListClustersPages mocks base method.
func (m *MockKafkaAPI) ListClustersPages(arg0 *kafka.ListClustersInput, arg1 func(*kafka.ListClustersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersPages indicates an expected call of ListClustersPages.
func (mr *MockKafkaAPIMockRecorder) ListClustersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersPages", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersPages), arg0, arg1)
}

// ListClustersPagesWithContext mocks base method.
func (m *MockKafkaAPI) ListClustersPagesWithContext(arg0 context.Context, arg1 *kafka.ListClustersInput, arg2 func(*kafka.ListClustersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersPagesWithContext indicates an expected call of ListClustersPagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListClustersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersPagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersPagesWithContext), varargs...)
}

// ListClustersRequest mocks base method.
func (m *MockKafkaAPI) ListClustersRequest(arg0 *kafka.ListClustersInput) (*request.Request, *kafka.ListClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListClustersOutput)
	return ret0, ret1
}

// ListClustersRequest indicates an expected call of ListClustersRequest.
func (mr *MockKafkaAPIMockRecorder) ListClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersRequest), arg0)
}

// ListClustersV2 mocks base method.
func (m *MockKafkaAPI) ListClustersV2(arg0 *kafka.ListClustersV2Input) (*kafka.ListClustersV2Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersV2", arg0)
	ret0, _ := ret[0].(*kafka.ListClustersV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersV2 indicates an expected call of ListClustersV2.
func (mr *MockKafkaAPIMockRecorder) ListClustersV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersV2", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersV2), arg0)
}

// ListClustersV2Pages mocks base method.
func (m *MockKafkaAPI) ListClustersV2Pages(arg0 *kafka.ListClustersV2Input, arg1 func(*kafka.ListClustersV2Output, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersV2Pages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersV2Pages indicates an expected call of ListClustersV2Pages.
func (mr *MockKafkaAPIMockRecorder) ListClustersV2Pages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersV2Pages", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersV2Pages), arg0, arg1)
}

// ListClustersV2PagesWithContext mocks base method.
func (m *MockKafkaAPI) ListClustersV2PagesWithContext(arg0 context.Context, arg1 *kafka.ListClustersV2Input, arg2 func(*kafka.ListClustersV2Output, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersV2PagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClustersV2PagesWithContext indicates an expected call of ListClustersV2PagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListClustersV2PagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersV2PagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersV2PagesWithContext), varargs...)
}

// ListClustersV2Request mocks base method.
func (m *MockKafkaAPI) ListClustersV2Request(arg0 *kafka.ListClustersV2Input) (*request.Request, *kafka.ListClustersV2Output) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersV2Request", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListClustersV2Output)
	return ret0, ret1
}

// ListClustersV2Request indicates an expected call of ListClustersV2Request.
func (mr *MockKafkaAPIMockRecorder) ListClustersV2Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersV2Request", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersV2Request), arg0)
}

// ListClustersV2WithContext mocks base method.
func (m *MockKafkaAPI) ListClustersV2WithContext(arg0 context.Context, arg1 *kafka.ListClustersV2Input, arg2 ...request.Option) (*kafka.ListClustersV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersV2WithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListClustersV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersV2WithContext indicates an expected call of ListClustersV2WithContext.
func (mr *MockKafkaAPIMockRecorder) ListClustersV2WithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersV2WithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersV2WithContext), varargs...)
}

// ListClustersWithContext mocks base method.
func (m *MockKafkaAPI) ListClustersWithContext(arg0 context.Context, arg1 *kafka.ListClustersInput, arg2 ...request.Option) (*kafka.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersWithContext indicates an expected call of ListClustersWithContext.
func (mr *MockKafkaAPIMockRecorder) ListClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListClustersWithContext), varargs...)
}

// ListConfigurationRevisions mocks base method.
func (m *MockKafkaAPI) ListConfigurationRevisions(arg0 *kafka.ListConfigurationRevisionsInput) (*kafka.ListConfigurationRevisionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationRevisions", arg0)
	ret0, _ := ret[0].(*kafka.ListConfigurationRevisionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationRevisions indicates an expected call of ListConfigurationRevisions.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationRevisions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationRevisions", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationRevisions), arg0)
}

// ListConfigurationRevisionsPages mocks base method.
func (m *MockKafkaAPI) ListConfigurationRevisionsPages(arg0 *kafka.ListConfigurationRevisionsInput, arg1 func(*kafka.ListConfigurationRevisionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationRevisionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationRevisionsPages indicates an expected call of ListConfigurationRevisionsPages.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationRevisionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationRevisionsPages", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationRevisionsPages), arg0, arg1)
}

// ListConfigurationRevisionsPagesWithContext mocks base method.
func (m *MockKafkaAPI) ListConfigurationRevisionsPagesWithContext(arg0 context.Context, arg1 *kafka.ListConfigurationRevisionsInput, arg2 func(*kafka.ListConfigurationRevisionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationRevisionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationRevisionsPagesWithContext indicates an expected call of ListConfigurationRevisionsPagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationRevisionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationRevisionsPagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationRevisionsPagesWithContext), varargs...)
}

// ListConfigurationRevisionsRequest mocks base method.
func (m *MockKafkaAPI) ListConfigurationRevisionsRequest(arg0 *kafka.ListConfigurationRevisionsInput) (*request.Request, *kafka.ListConfigurationRevisionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationRevisionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListConfigurationRevisionsOutput)
	return ret0, ret1
}

// ListConfigurationRevisionsRequest indicates an expected call of ListConfigurationRevisionsRequest.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationRevisionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationRevisionsRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationRevisionsRequest), arg0)
}

// ListConfigurationRevisionsWithContext mocks base method.
func (m *MockKafkaAPI) ListConfigurationRevisionsWithContext(arg0 context.Context, arg1 *kafka.ListConfigurationRevisionsInput, arg2 ...request.Option) (*kafka.ListConfigurationRevisionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationRevisionsWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListConfigurationRevisionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationRevisionsWithContext indicates an expected call of ListConfigurationRevisionsWithContext.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationRevisionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationRevisionsWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationRevisionsWithContext), varargs...)
}

// ListConfigurations mocks base method.
func (m *MockKafkaAPI) ListConfigurations(arg0 *kafka.ListConfigurationsInput) (*kafka.ListConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurations", arg0)
	ret0, _ := ret[0].(*kafka.ListConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurations indicates an expected call of ListConfigurations.
func (mr *MockKafkaAPIMockRecorder) ListConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurations", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurations), arg0)
}

// ListConfigurationsPages mocks base method.
func (m *MockKafkaAPI) ListConfigurationsPages(arg0 *kafka.ListConfigurationsInput, arg1 func(*kafka.ListConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationsPages indicates an expected call of ListConfigurationsPages.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationsPages", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationsPages), arg0, arg1)
}

// ListConfigurationsPagesWithContext mocks base method.
func (m *MockKafkaAPI) ListConfigurationsPagesWithContext(arg0 context.Context, arg1 *kafka.ListConfigurationsInput, arg2 func(*kafka.ListConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationsPagesWithContext indicates an expected call of ListConfigurationsPagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationsPagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationsPagesWithContext), varargs...)
}

// ListConfigurationsRequest mocks base method.
func (m *MockKafkaAPI) ListConfigurationsRequest(arg0 *kafka.ListConfigurationsInput) (*request.Request, *kafka.ListConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListConfigurationsOutput)
	return ret0, ret1
}

// ListConfigurationsRequest indicates an expected call of ListConfigurationsRequest.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationsRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationsRequest), arg0)
}

// ListConfigurationsWithContext mocks base method.
func (m *MockKafkaAPI) ListConfigurationsWithContext(arg0 context.Context, arg1 *kafka.ListConfigurationsInput, arg2 ...request.Option) (*kafka.ListConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationsWithContext indicates an expected call of ListConfigurationsWithContext.
func (mr *MockKafkaAPIMockRecorder) ListConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationsWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListConfigurationsWithContext), varargs...)
}

// ListKafkaVersions mocks base method.
func (m *MockKafkaAPI) ListKafkaVersions(arg0 *kafka.ListKafkaVersionsInput) (*kafka.ListKafkaVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKafkaVersions", arg0)
	ret0, _ := ret[0].(*kafka.ListKafkaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKafkaVersions indicates an expected call of ListKafkaVersions.
func (mr *MockKafkaAPIMockRecorder) ListKafkaVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKafkaVersions", reflect.TypeOf((*MockKafkaAPI)(nil).ListKafkaVersions), arg0)
}

// ListKafkaVersionsPages mocks base method.
func (m *MockKafkaAPI) ListKafkaVersionsPages(arg0 *kafka.ListKafkaVersionsInput, arg1 func(*kafka.ListKafkaVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKafkaVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKafkaVersionsPages indicates an expected call of ListKafkaVersionsPages.
func (mr *MockKafkaAPIMockRecorder) ListKafkaVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKafkaVersionsPages", reflect.TypeOf((*MockKafkaAPI)(nil).ListKafkaVersionsPages), arg0, arg1)
}

// ListKafkaVersionsPagesWithContext mocks base method.
func (m *MockKafkaAPI) ListKafkaVersionsPagesWithContext(arg0 context.Context, arg1 *kafka.ListKafkaVersionsInput, arg2 func(*kafka.ListKafkaVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKafkaVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKafkaVersionsPagesWithContext indicates an expected call of ListKafkaVersionsPagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListKafkaVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKafkaVersionsPagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListKafkaVersionsPagesWithContext), varargs...)
}

// ListKafkaVersionsRequest mocks base method.
func (m *MockKafkaAPI) ListKafkaVersionsRequest(arg0 *kafka.ListKafkaVersionsInput) (*request.Request, *kafka.ListKafkaVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKafkaVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListKafkaVersionsOutput)
	return ret0, ret1
}

// ListKafkaVersionsRequest indicates an expected call of ListKafkaVersionsRequest.
func (mr *MockKafkaAPIMockRecorder) ListKafkaVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKafkaVersionsRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListKafkaVersionsRequest), arg0)
}

// ListKafkaVersionsWithContext mocks base method.
func (m *MockKafkaAPI) ListKafkaVersionsWithContext(arg0 context.Context, arg1 *kafka.ListKafkaVersionsInput, arg2 ...request.Option) (*kafka.ListKafkaVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKafkaVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListKafkaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKafkaVersionsWithContext indicates an expected call of ListKafkaVersionsWithContext.
func (mr *MockKafkaAPIMockRecorder) ListKafkaVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKafkaVersionsWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListKafkaVersionsWithContext), varargs...)
}

// ListNodes mocks base method.
func (m *MockKafkaAPI) ListNodes(arg0 *kafka.ListNodesInput) (*kafka.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", arg0)
	ret0, _ := ret[0].(*kafka.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockKafkaAPIMockRecorder) ListNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodes), arg0)
}

// ListNodesPages mocks base method.
func (m *MockKafkaAPI) ListNodesPages(arg0 *kafka.ListNodesInput, arg1 func(*kafka.ListNodesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodesPages indicates an expected call of ListNodesPages.
func (mr *MockKafkaAPIMockRecorder) ListNodesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesPages", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodesPages), arg0, arg1)
}

// ListNodesPagesWithContext mocks base method.
func (m *MockKafkaAPI) ListNodesPagesWithContext(arg0 context.Context, arg1 *kafka.ListNodesInput, arg2 func(*kafka.ListNodesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodesPagesWithContext indicates an expected call of ListNodesPagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListNodesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesPagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodesPagesWithContext), varargs...)
}

// ListNodesRequest mocks base method.
func (m *MockKafkaAPI) ListNodesRequest(arg0 *kafka.ListNodesInput) (*request.Request, *kafka.ListNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListNodesOutput)
	return ret0, ret1
}

// ListNodesRequest indicates an expected call of ListNodesRequest.
func (mr *MockKafkaAPIMockRecorder) ListNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodesRequest), arg0)
}

// ListNodesWithContext mocks base method.
func (m *MockKafkaAPI) ListNodesWithContext(arg0 context.Context, arg1 *kafka.ListNodesInput, arg2 ...request.Option) (*kafka.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodesWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesWithContext indicates an expected call of ListNodesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListNodesWithContext), varargs...)
}

// ListScramSecrets mocks base method.
func (m *MockKafkaAPI) ListScramSecrets(arg0 *kafka.ListScramSecretsInput) (*kafka.ListScramSecretsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScramSecrets", arg0)
	ret0, _ := ret[0].(*kafka.ListScramSecretsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScramSecrets indicates an expected call of ListScramSecrets.
func (mr *MockKafkaAPIMockRecorder) ListScramSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScramSecrets", reflect.TypeOf((*MockKafkaAPI)(nil).ListScramSecrets), arg0)
}

// ListScramSecretsPages mocks base method.
func (m *MockKafkaAPI) ListScramSecretsPages(arg0 *kafka.ListScramSecretsInput, arg1 func(*kafka.ListScramSecretsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScramSecretsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListScramSecretsPages indicates an expected call of ListScramSecretsPages.
func (mr *MockKafkaAPIMockRecorder) ListScramSecretsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScramSecretsPages", reflect.TypeOf((*MockKafkaAPI)(nil).ListScramSecretsPages), arg0, arg1)
}

// ListScramSecretsPagesWithContext mocks base method.
func (m *MockKafkaAPI) ListScramSecretsPagesWithContext(arg0 context.Context, arg1 *kafka.ListScramSecretsInput, arg2 func(*kafka.ListScramSecretsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScramSecretsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListScramSecretsPagesWithContext indicates an expected call of ListScramSecretsPagesWithContext.
func (mr *MockKafkaAPIMockRecorder) ListScramSecretsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScramSecretsPagesWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListScramSecretsPagesWithContext), varargs...)
}

// ListScramSecretsRequest mocks base method.
func (m *MockKafkaAPI) ListScramSecretsRequest(arg0 *kafka.ListScramSecretsInput) (*request.Request, *kafka.ListScramSecretsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScramSecretsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListScramSecretsOutput)
	return ret0, ret1
}

// ListScramSecretsRequest indicates an expected call of ListScramSecretsRequest.
func (mr *MockKafkaAPIMockRecorder) ListScramSecretsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScramSecretsRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListScramSecretsRequest), arg0)
}

// ListScramSecretsWithContext mocks base method.
func (m *MockKafkaAPI) ListScramSecretsWithContext(arg0 context.Context, arg1 *kafka.ListScramSecretsInput, arg2 ...request.Option) (*kafka.ListScramSecretsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScramSecretsWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListScramSecretsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScramSecretsWithContext indicates an expected call of ListScramSecretsWithContext.
func (mr *MockKafkaAPIMockRecorder) ListScramSecretsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScramSecretsWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListScramSecretsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockKafkaAPI) ListTagsForResource(arg0 *kafka.ListTagsForResourceInput) (*kafka.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*kafka.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockKafkaAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockKafkaAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockKafkaAPI) ListTagsForResourceRequest(arg0 *kafka.ListTagsForResourceInput) (*request.Request, *kafka.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockKafkaAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockKafkaAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockKafkaAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *kafka.ListTagsForResourceInput, arg2 ...request.Option) (*kafka.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockKafkaAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RebootBroker mocks base method.
func (m *MockKafkaAPI) RebootBroker(arg0 *kafka.RebootBrokerInput) (*kafka.RebootBrokerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootBroker", arg0)
	ret0, _ := ret[0].(*kafka.RebootBrokerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootBroker indicates an expected call of RebootBroker.
func (mr *MockKafkaAPIMockRecorder) RebootBroker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootBroker", reflect.TypeOf((*MockKafkaAPI)(nil).RebootBroker), arg0)
}

// RebootBrokerRequest mocks base method.
func (m *MockKafkaAPI) RebootBrokerRequest(arg0 *kafka.RebootBrokerInput) (*request.Request, *kafka.RebootBrokerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootBrokerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.RebootBrokerOutput)
	return ret0, ret1
}

// RebootBrokerRequest indicates an expected call of RebootBrokerRequest.
func (mr *MockKafkaAPIMockRecorder) RebootBrokerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootBrokerRequest", reflect.TypeOf((*MockKafkaAPI)(nil).RebootBrokerRequest), arg0)
}

// RebootBrokerWithContext mocks base method.
func (m *MockKafkaAPI) RebootBrokerWithContext(arg0 context.Context, arg1 *kafka.RebootBrokerInput, arg2 ...request.Option) (*kafka.RebootBrokerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootBrokerWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.RebootBrokerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootBrokerWithContext indicates an expected call of RebootBrokerWithContext.
func (mr *MockKafkaAPIMockRecorder) RebootBrokerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootBrokerWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).RebootBrokerWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockKafkaAPI) TagResource(arg0 *kafka.TagResourceInput) (*kafka.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*kafka.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockKafkaAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockKafkaAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockKafkaAPI) TagResourceRequest(arg0 *kafka.TagResourceInput) (*request.Request, *kafka.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockKafkaAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockKafkaAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockKafkaAPI) TagResourceWithContext(arg0 context.Context, arg1 *kafka.TagResourceInput, arg2 ...request.Option) (*kafka.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockKafkaAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockKafkaAPI) UntagResource(arg0 *kafka.UntagResourceInput) (*kafka.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*kafka.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockKafkaAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockKafkaAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockKafkaAPI) UntagResourceRequest(arg0 *kafka.UntagResourceInput) (*request.Request, *kafka.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockKafkaAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockKafkaAPI) UntagResourceWithContext(arg0 context.Context, arg1 *kafka.UntagResourceInput, arg2 ...request.Option) (*kafka.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockKafkaAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateBrokerCount mocks base method.
func (m *MockKafkaAPI) UpdateBrokerCount(arg0 *kafka.UpdateBrokerCountInput) (*kafka.UpdateBrokerCountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerCount", arg0)
	ret0, _ := ret[0].(*kafka.UpdateBrokerCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrokerCount indicates an expected call of UpdateBrokerCount.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerCount", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerCount), arg0)
}

// UpdateBrokerCountRequest mocks base method.
func (m *MockKafkaAPI) UpdateBrokerCountRequest(arg0 *kafka.UpdateBrokerCountInput) (*request.Request, *kafka.UpdateBrokerCountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerCountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateBrokerCountOutput)
	return ret0, ret1
}

// UpdateBrokerCountRequest indicates an expected call of UpdateBrokerCountRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerCountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerCountRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerCountRequest), arg0)
}

// UpdateBrokerCountWithContext mocks base method.
func (m *MockKafkaAPI) UpdateBrokerCountWithContext(arg0 context.Context, arg1 *kafka.UpdateBrokerCountInput, arg2 ...request.Option) (*kafka.UpdateBrokerCountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBrokerCountWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateBrokerCountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrokerCountWithContext indicates an expected call of UpdateBrokerCountWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerCountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerCountWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerCountWithContext), varargs...)
}

// UpdateBrokerStorage mocks base method.
func (m *MockKafkaAPI) UpdateBrokerStorage(arg0 *kafka.UpdateBrokerStorageInput) (*kafka.UpdateBrokerStorageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerStorage", arg0)
	ret0, _ := ret[0].(*kafka.UpdateBrokerStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrokerStorage indicates an expected call of UpdateBrokerStorage.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerStorage", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerStorage), arg0)
}

// UpdateBrokerStorageRequest mocks base method.
func (m *MockKafkaAPI) UpdateBrokerStorageRequest(arg0 *kafka.UpdateBrokerStorageInput) (*request.Request, *kafka.UpdateBrokerStorageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerStorageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateBrokerStorageOutput)
	return ret0, ret1
}

// UpdateBrokerStorageRequest indicates an expected call of UpdateBrokerStorageRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerStorageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerStorageRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerStorageRequest), arg0)
}

// UpdateBrokerStorageWithContext mocks base method.
func (m *MockKafkaAPI) UpdateBrokerStorageWithContext(arg0 context.Context, arg1 *kafka.UpdateBrokerStorageInput, arg2 ...request.Option) (*kafka.UpdateBrokerStorageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBrokerStorageWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateBrokerStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrokerStorageWithContext indicates an expected call of UpdateBrokerStorageWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerStorageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerStorageWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerStorageWithContext), varargs...)
}

// UpdateBrokerType mocks base method.
func (m *MockKafkaAPI) UpdateBrokerType(arg0 *kafka.UpdateBrokerTypeInput) (*kafka.UpdateBrokerTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerType", arg0)
	ret0, _ := ret[0].(*kafka.UpdateBrokerTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrokerType indicates an expected call of UpdateBrokerType.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerType", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerType), arg0)
}

// UpdateBrokerTypeRequest mocks base method.
func (m *MockKafkaAPI) UpdateBrokerTypeRequest(arg0 *kafka.UpdateBrokerTypeInput) (*request.Request, *kafka.UpdateBrokerTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateBrokerTypeOutput)
	return ret0, ret1
}

// UpdateBrokerTypeRequest indicates an expected call of UpdateBrokerTypeRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerTypeRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerTypeRequest), arg0)
}

// UpdateBrokerTypeWithContext mocks base method.
func (m *MockKafkaAPI) UpdateBrokerTypeWithContext(arg0 context.Context, arg1 *kafka.UpdateBrokerTypeInput, arg2 ...request.Option) (*kafka.UpdateBrokerTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBrokerTypeWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateBrokerTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrokerTypeWithContext indicates an expected call of UpdateBrokerTypeWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateBrokerTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerTypeWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateBrokerTypeWithContext), varargs...)
}

// UpdateClusterConfiguration mocks base method.
func (m *MockKafkaAPI) UpdateClusterConfiguration(arg0 *kafka.UpdateClusterConfigurationInput) (*kafka.UpdateClusterConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterConfiguration", arg0)
	ret0, _ := ret[0].(*kafka.UpdateClusterConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConfiguration indicates an expected call of UpdateClusterConfiguration.
func (mr *MockKafkaAPIMockRecorder) UpdateClusterConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConfiguration", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateClusterConfiguration), arg0)
}

// UpdateClusterConfigurationRequest mocks base method.
func (m *MockKafkaAPI) UpdateClusterConfigurationRequest(arg0 *kafka.UpdateClusterConfigurationInput) (*request.Request, *kafka.UpdateClusterConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateClusterConfigurationOutput)
	return ret0, ret1
}

// UpdateClusterConfigurationRequest indicates an expected call of UpdateClusterConfigurationRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateClusterConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConfigurationRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateClusterConfigurationRequest), arg0)
}

// UpdateClusterConfigurationWithContext mocks base method.
func (m *MockKafkaAPI) UpdateClusterConfigurationWithContext(arg0 context.Context, arg1 *kafka.UpdateClusterConfigurationInput, arg2 ...request.Option) (*kafka.UpdateClusterConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateClusterConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConfigurationWithContext indicates an expected call of UpdateClusterConfigurationWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateClusterConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConfigurationWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateClusterConfigurationWithContext), varargs...)
}

// UpdateClusterKafkaVersion mocks base method.
func (m *MockKafkaAPI) UpdateClusterKafkaVersion(arg0 *kafka.UpdateClusterKafkaVersionInput) (*kafka.UpdateClusterKafkaVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterKafkaVersion", arg0)
	ret0, _ := ret[0].(*kafka.UpdateClusterKafkaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterKafkaVersion indicates an expected call of UpdateClusterKafkaVersion.
func (mr *MockKafkaAPIMockRecorder) UpdateClusterKafkaVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterKafkaVersion", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateClusterKafkaVersion), arg0)
}

// UpdateClusterKafkaVersionRequest mocks base method.
func (m *MockKafkaAPI) UpdateClusterKafkaVersionRequest(arg0 *kafka.UpdateClusterKafkaVersionInput) (*request.Request, *kafka.UpdateClusterKafkaVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterKafkaVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateClusterKafkaVersionOutput)
	return ret0, ret1
}

// UpdateClusterKafkaVersionRequest indicates an expected call of UpdateClusterKafkaVersionRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateClusterKafkaVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterKafkaVersionRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateClusterKafkaVersionRequest), arg0)
}

// UpdateClusterKafkaVersionWithContext mocks base method.
func (m *MockKafkaAPI) UpdateClusterKafkaVersionWithContext(arg0 context.Context, arg1 *kafka.UpdateClusterKafkaVersionInput, arg2 ...request.Option) (*kafka.UpdateClusterKafkaVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterKafkaVersionWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateClusterKafkaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterKafkaVersionWithContext indicates an expected call of UpdateClusterKafkaVersionWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateClusterKafkaVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterKafkaVersionWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateClusterKafkaVersionWithContext), varargs...)
}

// UpdateConfiguration mocks base method.
func (m *MockKafkaAPI) UpdateConfiguration(arg0 *kafka.UpdateConfigurationInput) (*kafka.UpdateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", arg0)
	ret0, _ := ret[0].(*kafka.UpdateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockKafkaAPIMockRecorder) UpdateConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateConfiguration), arg0)
}

// UpdateConfigurationRequest mocks base method.
func (m *MockKafkaAPI) UpdateConfigurationRequest(arg0 *kafka.UpdateConfigurationInput) (*request.Request, *kafka.UpdateConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateConfigurationOutput)
	return ret0, ret1
}

// UpdateConfigurationRequest indicates an expected call of UpdateConfigurationRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateConfigurationRequest), arg0)
}

// UpdateConfigurationWithContext mocks base method.
func (m *MockKafkaAPI) UpdateConfigurationWithContext(arg0 context.Context, arg1 *kafka.UpdateConfigurationInput, arg2 ...request.Option) (*kafka.UpdateConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationWithContext indicates an expected call of UpdateConfigurationWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateConfigurationWithContext), varargs...)
}

// UpdateConnectivity mocks base method.
func (m *MockKafkaAPI) UpdateConnectivity(arg0 *kafka.UpdateConnectivityInput) (*kafka.UpdateConnectivityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectivity", arg0)
	ret0, _ := ret[0].(*kafka.UpdateConnectivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectivity indicates an expected call of UpdateConnectivity.
func (mr *MockKafkaAPIMockRecorder) UpdateConnectivity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectivity", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateConnectivity), arg0)
}

// UpdateConnectivityRequest mocks base method.
func (m *MockKafkaAPI) UpdateConnectivityRequest(arg0 *kafka.UpdateConnectivityInput) (*request.Request, *kafka.UpdateConnectivityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectivityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateConnectivityOutput)
	return ret0, ret1
}

// UpdateConnectivityRequest indicates an expected call of UpdateConnectivityRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateConnectivityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectivityRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateConnectivityRequest), arg0)
}

// UpdateConnectivityWithContext mocks base method.
func (m *MockKafkaAPI) UpdateConnectivityWithContext(arg0 context.Context, arg1 *kafka.UpdateConnectivityInput, arg2 ...request.Option) (*kafka.UpdateConnectivityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConnectivityWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateConnectivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectivityWithContext indicates an expected call of UpdateConnectivityWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateConnectivityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectivityWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateConnectivityWithContext), varargs...)
}

// UpdateMonitoring mocks base method.
func (m *MockKafkaAPI) UpdateMonitoring(arg0 *kafka.UpdateMonitoringInput) (*kafka.UpdateMonitoringOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitoring", arg0)
	ret0, _ := ret[0].(*kafka.UpdateMonitoringOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitoring indicates an expected call of UpdateMonitoring.
func (mr *MockKafkaAPIMockRecorder) UpdateMonitoring(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitoring", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateMonitoring), arg0)
}

// UpdateMonitoringRequest mocks base method.
func (m *MockKafkaAPI) UpdateMonitoringRequest(arg0 *kafka.UpdateMonitoringInput) (*request.Request, *kafka.UpdateMonitoringOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitoringRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateMonitoringOutput)
	return ret0, ret1
}

// UpdateMonitoringRequest indicates an expected call of UpdateMonitoringRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateMonitoringRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitoringRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateMonitoringRequest), arg0)
}

// UpdateMonitoringWithContext mocks base method.
func (m *MockKafkaAPI) UpdateMonitoringWithContext(arg0 context.Context, arg1 *kafka.UpdateMonitoringInput, arg2 ...request.Option) (*kafka.UpdateMonitoringOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMonitoringWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateMonitoringOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitoringWithContext indicates an expected call of UpdateMonitoringWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateMonitoringWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitoringWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateMonitoringWithContext), varargs...)
}

// UpdateSecurity mocks base method.
func (m *MockKafkaAPI) UpdateSecurity(arg0 *kafka.UpdateSecurityInput) (*kafka.UpdateSecurityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurity", arg0)
	ret0, _ := ret[0].(*kafka.UpdateSecurityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurity indicates an expected call of UpdateSecurity.
func (mr *MockKafkaAPIMockRecorder) UpdateSecurity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurity", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateSecurity), arg0)
}

// UpdateSecurityRequest mocks base method.
func (m *MockKafkaAPI) UpdateSecurityRequest(arg0 *kafka.UpdateSecurityInput) (*request.Request, *kafka.UpdateSecurityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*kafka.UpdateSecurityOutput)
	return ret0, ret1
}

// UpdateSecurityRequest indicates an expected call of UpdateSecurityRequest.
func (mr *MockKafkaAPIMockRecorder) UpdateSecurityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityRequest", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateSecurityRequest), arg0)
}

// UpdateSecurityWithContext mocks base method.
func (m *MockKafkaAPI) UpdateSecurityWithContext(arg0 context.Context, arg1 *kafka.UpdateSecurityInput, arg2 ...request.Option) (*kafka.UpdateSecurityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecurityWithContext", varargs...)
	ret0, _ := ret[0].(*kafka.UpdateSecurityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityWithContext indicates an expected call of UpdateSecurityWithContext.
func (mr *MockKafkaAPIMockRecorder) UpdateSecurityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityWithContext", reflect.TypeOf((*MockKafkaAPI)(nil).UpdateSecurityWithContext), varargs...)
}

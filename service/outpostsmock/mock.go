// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/outposts/outpostsiface (interfaces: OutpostsAPI)

// Package outpostsmock is a generated GoMock package.
package outpostsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	outposts "github.com/aws/aws-sdk-go/service/outposts"
	gomock "github.com/golang/mock/gomock"
)

// MockOutpostsAPI is a mock of OutpostsAPI interface.
type MockOutpostsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOutpostsAPIMockRecorder
}

// MockOutpostsAPIMockRecorder is the mock recorder for MockOutpostsAPI.
type MockOutpostsAPIMockRecorder struct {
	mock *MockOutpostsAPI
}

// NewMockOutpostsAPI creates a new mock instance.
func NewMockOutpostsAPI(ctrl *gomock.Controller) *MockOutpostsAPI {
	mock := &MockOutpostsAPI{ctrl: ctrl}
	mock.recorder = &MockOutpostsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutpostsAPI) EXPECT() *MockOutpostsAPIMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOutpostsAPI) CancelOrder(arg0 *outposts.CancelOrderInput) (*outposts.CancelOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0)
	ret0, _ := ret[0].(*outposts.CancelOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOutpostsAPIMockRecorder) CancelOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOutpostsAPI)(nil).CancelOrder), arg0)
}

// CancelOrderRequest mocks base method.
func (m *MockOutpostsAPI) CancelOrderRequest(arg0 *outposts.CancelOrderInput) (*request.Request, *outposts.CancelOrderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.CancelOrderOutput)
	return ret0, ret1
}

// CancelOrderRequest indicates an expected call of CancelOrderRequest.
func (mr *MockOutpostsAPIMockRecorder) CancelOrderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).CancelOrderRequest), arg0)
}

// CancelOrderWithContext mocks base method.
func (m *MockOutpostsAPI) CancelOrderWithContext(arg0 context.Context, arg1 *outposts.CancelOrderInput, arg2 ...request.Option) (*outposts.CancelOrderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelOrderWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.CancelOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrderWithContext indicates an expected call of CancelOrderWithContext.
func (mr *MockOutpostsAPIMockRecorder) CancelOrderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).CancelOrderWithContext), varargs...)
}

// CreateOrder mocks base method.
func (m *MockOutpostsAPI) CreateOrder(arg0 *outposts.CreateOrderInput) (*outposts.CreateOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0)
	ret0, _ := ret[0].(*outposts.CreateOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOutpostsAPIMockRecorder) CreateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOrder), arg0)
}

// CreateOrderRequest mocks base method.
func (m *MockOutpostsAPI) CreateOrderRequest(arg0 *outposts.CreateOrderInput) (*request.Request, *outposts.CreateOrderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.CreateOrderOutput)
	return ret0, ret1
}

// CreateOrderRequest indicates an expected call of CreateOrderRequest.
func (mr *MockOutpostsAPIMockRecorder) CreateOrderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOrderRequest), arg0)
}

// CreateOrderWithContext mocks base method.
func (m *MockOutpostsAPI) CreateOrderWithContext(arg0 context.Context, arg1 *outposts.CreateOrderInput, arg2 ...request.Option) (*outposts.CreateOrderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrderWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.CreateOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderWithContext indicates an expected call of CreateOrderWithContext.
func (mr *MockOutpostsAPIMockRecorder) CreateOrderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOrderWithContext), varargs...)
}

// CreateOutpost mocks base method.
func (m *MockOutpostsAPI) CreateOutpost(arg0 *outposts.CreateOutpostInput) (*outposts.CreateOutpostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutpost", arg0)
	ret0, _ := ret[0].(*outposts.CreateOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutpost indicates an expected call of CreateOutpost.
func (mr *MockOutpostsAPIMockRecorder) CreateOutpost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutpost", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOutpost), arg0)
}

// CreateOutpostRequest mocks base method.
func (m *MockOutpostsAPI) CreateOutpostRequest(arg0 *outposts.CreateOutpostInput) (*request.Request, *outposts.CreateOutpostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOutpostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.CreateOutpostOutput)
	return ret0, ret1
}

// CreateOutpostRequest indicates an expected call of CreateOutpostRequest.
func (mr *MockOutpostsAPIMockRecorder) CreateOutpostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutpostRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOutpostRequest), arg0)
}

// CreateOutpostWithContext mocks base method.
func (m *MockOutpostsAPI) CreateOutpostWithContext(arg0 context.Context, arg1 *outposts.CreateOutpostInput, arg2 ...request.Option) (*outposts.CreateOutpostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOutpostWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.CreateOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOutpostWithContext indicates an expected call of CreateOutpostWithContext.
func (mr *MockOutpostsAPIMockRecorder) CreateOutpostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOutpostWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateOutpostWithContext), varargs...)
}

// CreateSite mocks base method.
func (m *MockOutpostsAPI) CreateSite(arg0 *outposts.CreateSiteInput) (*outposts.CreateSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSite", arg0)
	ret0, _ := ret[0].(*outposts.CreateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSite indicates an expected call of CreateSite.
func (mr *MockOutpostsAPIMockRecorder) CreateSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSite", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateSite), arg0)
}

// CreateSiteRequest mocks base method.
func (m *MockOutpostsAPI) CreateSiteRequest(arg0 *outposts.CreateSiteInput) (*request.Request, *outposts.CreateSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.CreateSiteOutput)
	return ret0, ret1
}

// CreateSiteRequest indicates an expected call of CreateSiteRequest.
func (mr *MockOutpostsAPIMockRecorder) CreateSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateSiteRequest), arg0)
}

// CreateSiteWithContext mocks base method.
func (m *MockOutpostsAPI) CreateSiteWithContext(arg0 context.Context, arg1 *outposts.CreateSiteInput, arg2 ...request.Option) (*outposts.CreateSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSiteWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.CreateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSiteWithContext indicates an expected call of CreateSiteWithContext.
func (mr *MockOutpostsAPIMockRecorder) CreateSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).CreateSiteWithContext), varargs...)
}

// DeleteOutpost mocks base method.
func (m *MockOutpostsAPI) DeleteOutpost(arg0 *outposts.DeleteOutpostInput) (*outposts.DeleteOutpostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutpost", arg0)
	ret0, _ := ret[0].(*outposts.DeleteOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutpost indicates an expected call of DeleteOutpost.
func (mr *MockOutpostsAPIMockRecorder) DeleteOutpost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutpost", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteOutpost), arg0)
}

// DeleteOutpostRequest mocks base method.
func (m *MockOutpostsAPI) DeleteOutpostRequest(arg0 *outposts.DeleteOutpostInput) (*request.Request, *outposts.DeleteOutpostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutpostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.DeleteOutpostOutput)
	return ret0, ret1
}

// DeleteOutpostRequest indicates an expected call of DeleteOutpostRequest.
func (mr *MockOutpostsAPIMockRecorder) DeleteOutpostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutpostRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteOutpostRequest), arg0)
}

// DeleteOutpostWithContext mocks base method.
func (m *MockOutpostsAPI) DeleteOutpostWithContext(arg0 context.Context, arg1 *outposts.DeleteOutpostInput, arg2 ...request.Option) (*outposts.DeleteOutpostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOutpostWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.DeleteOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutpostWithContext indicates an expected call of DeleteOutpostWithContext.
func (mr *MockOutpostsAPIMockRecorder) DeleteOutpostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutpostWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteOutpostWithContext), varargs...)
}

// DeleteSite mocks base method.
func (m *MockOutpostsAPI) DeleteSite(arg0 *outposts.DeleteSiteInput) (*outposts.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSite", arg0)
	ret0, _ := ret[0].(*outposts.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSite indicates an expected call of DeleteSite.
func (mr *MockOutpostsAPIMockRecorder) DeleteSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSite", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteSite), arg0)
}

// DeleteSiteRequest mocks base method.
func (m *MockOutpostsAPI) DeleteSiteRequest(arg0 *outposts.DeleteSiteInput) (*request.Request, *outposts.DeleteSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.DeleteSiteOutput)
	return ret0, ret1
}

// DeleteSiteRequest indicates an expected call of DeleteSiteRequest.
func (mr *MockOutpostsAPIMockRecorder) DeleteSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteSiteRequest), arg0)
}

// DeleteSiteWithContext mocks base method.
func (m *MockOutpostsAPI) DeleteSiteWithContext(arg0 context.Context, arg1 *outposts.DeleteSiteInput, arg2 ...request.Option) (*outposts.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSiteWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSiteWithContext indicates an expected call of DeleteSiteWithContext.
func (mr *MockOutpostsAPIMockRecorder) DeleteSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).DeleteSiteWithContext), varargs...)
}

// GetCatalogItem mocks base method.
func (m *MockOutpostsAPI) GetCatalogItem(arg0 *outposts.GetCatalogItemInput) (*outposts.GetCatalogItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogItem", arg0)
	ret0, _ := ret[0].(*outposts.GetCatalogItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogItem indicates an expected call of GetCatalogItem.
func (mr *MockOutpostsAPIMockRecorder) GetCatalogItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogItem", reflect.TypeOf((*MockOutpostsAPI)(nil).GetCatalogItem), arg0)
}

// GetCatalogItemRequest mocks base method.
func (m *MockOutpostsAPI) GetCatalogItemRequest(arg0 *outposts.GetCatalogItemInput) (*request.Request, *outposts.GetCatalogItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetCatalogItemOutput)
	return ret0, ret1
}

// GetCatalogItemRequest indicates an expected call of GetCatalogItemRequest.
func (mr *MockOutpostsAPIMockRecorder) GetCatalogItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogItemRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetCatalogItemRequest), arg0)
}

// GetCatalogItemWithContext mocks base method.
func (m *MockOutpostsAPI) GetCatalogItemWithContext(arg0 context.Context, arg1 *outposts.GetCatalogItemInput, arg2 ...request.Option) (*outposts.GetCatalogItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogItemWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetCatalogItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogItemWithContext indicates an expected call of GetCatalogItemWithContext.
func (mr *MockOutpostsAPIMockRecorder) GetCatalogItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogItemWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetCatalogItemWithContext), varargs...)
}

// GetOrder mocks base method.
func (m *MockOutpostsAPI) GetOrder(arg0 *outposts.GetOrderInput) (*outposts.GetOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(*outposts.GetOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOutpostsAPIMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOrder), arg0)
}

// GetOrderRequest mocks base method.
func (m *MockOutpostsAPI) GetOrderRequest(arg0 *outposts.GetOrderInput) (*request.Request, *outposts.GetOrderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetOrderOutput)
	return ret0, ret1
}

// GetOrderRequest indicates an expected call of GetOrderRequest.
func (mr *MockOutpostsAPIMockRecorder) GetOrderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOrderRequest), arg0)
}

// GetOrderWithContext mocks base method.
func (m *MockOutpostsAPI) GetOrderWithContext(arg0 context.Context, arg1 *outposts.GetOrderInput, arg2 ...request.Option) (*outposts.GetOrderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithContext indicates an expected call of GetOrderWithContext.
func (mr *MockOutpostsAPIMockRecorder) GetOrderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOrderWithContext), varargs...)
}

// GetOutpost mocks base method.
func (m *MockOutpostsAPI) GetOutpost(arg0 *outposts.GetOutpostInput) (*outposts.GetOutpostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpost", arg0)
	ret0, _ := ret[0].(*outposts.GetOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpost indicates an expected call of GetOutpost.
func (mr *MockOutpostsAPIMockRecorder) GetOutpost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpost", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpost), arg0)
}

// GetOutpostInstanceTypes mocks base method.
func (m *MockOutpostsAPI) GetOutpostInstanceTypes(arg0 *outposts.GetOutpostInstanceTypesInput) (*outposts.GetOutpostInstanceTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpostInstanceTypes", arg0)
	ret0, _ := ret[0].(*outposts.GetOutpostInstanceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpostInstanceTypes indicates an expected call of GetOutpostInstanceTypes.
func (mr *MockOutpostsAPIMockRecorder) GetOutpostInstanceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostInstanceTypes", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostInstanceTypes), arg0)
}

// GetOutpostInstanceTypesRequest mocks base method.
func (m *MockOutpostsAPI) GetOutpostInstanceTypesRequest(arg0 *outposts.GetOutpostInstanceTypesInput) (*request.Request, *outposts.GetOutpostInstanceTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpostInstanceTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetOutpostInstanceTypesOutput)
	return ret0, ret1
}

// GetOutpostInstanceTypesRequest indicates an expected call of GetOutpostInstanceTypesRequest.
func (mr *MockOutpostsAPIMockRecorder) GetOutpostInstanceTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostInstanceTypesRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostInstanceTypesRequest), arg0)
}

// GetOutpostInstanceTypesWithContext mocks base method.
func (m *MockOutpostsAPI) GetOutpostInstanceTypesWithContext(arg0 context.Context, arg1 *outposts.GetOutpostInstanceTypesInput, arg2 ...request.Option) (*outposts.GetOutpostInstanceTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutpostInstanceTypesWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetOutpostInstanceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpostInstanceTypesWithContext indicates an expected call of GetOutpostInstanceTypesWithContext.
func (mr *MockOutpostsAPIMockRecorder) GetOutpostInstanceTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostInstanceTypesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostInstanceTypesWithContext), varargs...)
}

// GetOutpostRequest mocks base method.
func (m *MockOutpostsAPI) GetOutpostRequest(arg0 *outposts.GetOutpostInput) (*request.Request, *outposts.GetOutpostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutpostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetOutpostOutput)
	return ret0, ret1
}

// GetOutpostRequest indicates an expected call of GetOutpostRequest.
func (mr *MockOutpostsAPIMockRecorder) GetOutpostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostRequest), arg0)
}

// GetOutpostWithContext mocks base method.
func (m *MockOutpostsAPI) GetOutpostWithContext(arg0 context.Context, arg1 *outposts.GetOutpostInput, arg2 ...request.Option) (*outposts.GetOutpostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutpostWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutpostWithContext indicates an expected call of GetOutpostWithContext.
func (mr *MockOutpostsAPIMockRecorder) GetOutpostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutpostWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetOutpostWithContext), varargs...)
}

// GetSite mocks base method.
func (m *MockOutpostsAPI) GetSite(arg0 *outposts.GetSiteInput) (*outposts.GetSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSite", arg0)
	ret0, _ := ret[0].(*outposts.GetSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSite indicates an expected call of GetSite.
func (mr *MockOutpostsAPIMockRecorder) GetSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSite", reflect.TypeOf((*MockOutpostsAPI)(nil).GetSite), arg0)
}

// GetSiteAddress mocks base method.
func (m *MockOutpostsAPI) GetSiteAddress(arg0 *outposts.GetSiteAddressInput) (*outposts.GetSiteAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteAddress", arg0)
	ret0, _ := ret[0].(*outposts.GetSiteAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteAddress indicates an expected call of GetSiteAddress.
func (mr *MockOutpostsAPIMockRecorder) GetSiteAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteAddress", reflect.TypeOf((*MockOutpostsAPI)(nil).GetSiteAddress), arg0)
}

// GetSiteAddressRequest mocks base method.
func (m *MockOutpostsAPI) GetSiteAddressRequest(arg0 *outposts.GetSiteAddressInput) (*request.Request, *outposts.GetSiteAddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteAddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetSiteAddressOutput)
	return ret0, ret1
}

// GetSiteAddressRequest indicates an expected call of GetSiteAddressRequest.
func (mr *MockOutpostsAPIMockRecorder) GetSiteAddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteAddressRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetSiteAddressRequest), arg0)
}

// GetSiteAddressWithContext mocks base method.
func (m *MockOutpostsAPI) GetSiteAddressWithContext(arg0 context.Context, arg1 *outposts.GetSiteAddressInput, arg2 ...request.Option) (*outposts.GetSiteAddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSiteAddressWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetSiteAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteAddressWithContext indicates an expected call of GetSiteAddressWithContext.
func (mr *MockOutpostsAPIMockRecorder) GetSiteAddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteAddressWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetSiteAddressWithContext), varargs...)
}

// GetSiteRequest mocks base method.
func (m *MockOutpostsAPI) GetSiteRequest(arg0 *outposts.GetSiteInput) (*request.Request, *outposts.GetSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.GetSiteOutput)
	return ret0, ret1
}

// GetSiteRequest indicates an expected call of GetSiteRequest.
func (mr *MockOutpostsAPIMockRecorder) GetSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).GetSiteRequest), arg0)
}

// GetSiteWithContext mocks base method.
func (m *MockOutpostsAPI) GetSiteWithContext(arg0 context.Context, arg1 *outposts.GetSiteInput, arg2 ...request.Option) (*outposts.GetSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSiteWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.GetSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteWithContext indicates an expected call of GetSiteWithContext.
func (mr *MockOutpostsAPIMockRecorder) GetSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).GetSiteWithContext), varargs...)
}

// ListCatalogItems mocks base method.
func (m *MockOutpostsAPI) ListCatalogItems(arg0 *outposts.ListCatalogItemsInput) (*outposts.ListCatalogItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCatalogItems", arg0)
	ret0, _ := ret[0].(*outposts.ListCatalogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCatalogItems indicates an expected call of ListCatalogItems.
func (mr *MockOutpostsAPIMockRecorder) ListCatalogItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCatalogItems", reflect.TypeOf((*MockOutpostsAPI)(nil).ListCatalogItems), arg0)
}

// ListCatalogItemsPages mocks base method.
func (m *MockOutpostsAPI) ListCatalogItemsPages(arg0 *outposts.ListCatalogItemsInput, arg1 func(*outposts.ListCatalogItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCatalogItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCatalogItemsPages indicates an expected call of ListCatalogItemsPages.
func (mr *MockOutpostsAPIMockRecorder) ListCatalogItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCatalogItemsPages", reflect.TypeOf((*MockOutpostsAPI)(nil).ListCatalogItemsPages), arg0, arg1)
}

// ListCatalogItemsPagesWithContext mocks base method.
func (m *MockOutpostsAPI) ListCatalogItemsPagesWithContext(arg0 context.Context, arg1 *outposts.ListCatalogItemsInput, arg2 func(*outposts.ListCatalogItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCatalogItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCatalogItemsPagesWithContext indicates an expected call of ListCatalogItemsPagesWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListCatalogItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCatalogItemsPagesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListCatalogItemsPagesWithContext), varargs...)
}

// ListCatalogItemsRequest mocks base method.
func (m *MockOutpostsAPI) ListCatalogItemsRequest(arg0 *outposts.ListCatalogItemsInput) (*request.Request, *outposts.ListCatalogItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCatalogItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.ListCatalogItemsOutput)
	return ret0, ret1
}

// ListCatalogItemsRequest indicates an expected call of ListCatalogItemsRequest.
func (mr *MockOutpostsAPIMockRecorder) ListCatalogItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCatalogItemsRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).ListCatalogItemsRequest), arg0)
}

// ListCatalogItemsWithContext mocks base method.
func (m *MockOutpostsAPI) ListCatalogItemsWithContext(arg0 context.Context, arg1 *outposts.ListCatalogItemsInput, arg2 ...request.Option) (*outposts.ListCatalogItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCatalogItemsWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.ListCatalogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCatalogItemsWithContext indicates an expected call of ListCatalogItemsWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListCatalogItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCatalogItemsWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListCatalogItemsWithContext), varargs...)
}

// ListOrders mocks base method.
func (m *MockOutpostsAPI) ListOrders(arg0 *outposts.ListOrdersInput) (*outposts.ListOrdersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0)
	ret0, _ := ret[0].(*outposts.ListOrdersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOutpostsAPIMockRecorder) ListOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOrders), arg0)
}

// ListOrdersPages mocks base method.
func (m *MockOutpostsAPI) ListOrdersPages(arg0 *outposts.ListOrdersInput, arg1 func(*outposts.ListOrdersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrdersPages indicates an expected call of ListOrdersPages.
func (mr *MockOutpostsAPIMockRecorder) ListOrdersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersPages", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOrdersPages), arg0, arg1)
}

// ListOrdersPagesWithContext mocks base method.
func (m *MockOutpostsAPI) ListOrdersPagesWithContext(arg0 context.Context, arg1 *outposts.ListOrdersInput, arg2 func(*outposts.ListOrdersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrdersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrdersPagesWithContext indicates an expected call of ListOrdersPagesWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListOrdersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersPagesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOrdersPagesWithContext), varargs...)
}

// ListOrdersRequest mocks base method.
func (m *MockOutpostsAPI) ListOrdersRequest(arg0 *outposts.ListOrdersInput) (*request.Request, *outposts.ListOrdersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.ListOrdersOutput)
	return ret0, ret1
}

// ListOrdersRequest indicates an expected call of ListOrdersRequest.
func (mr *MockOutpostsAPIMockRecorder) ListOrdersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOrdersRequest), arg0)
}

// ListOrdersWithContext mocks base method.
func (m *MockOutpostsAPI) ListOrdersWithContext(arg0 context.Context, arg1 *outposts.ListOrdersInput, arg2 ...request.Option) (*outposts.ListOrdersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrdersWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.ListOrdersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersWithContext indicates an expected call of ListOrdersWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListOrdersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOrdersWithContext), varargs...)
}

// ListOutposts mocks base method.
func (m *MockOutpostsAPI) ListOutposts(arg0 *outposts.ListOutpostsInput) (*outposts.ListOutpostsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutposts", arg0)
	ret0, _ := ret[0].(*outposts.ListOutpostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutposts indicates an expected call of ListOutposts.
func (mr *MockOutpostsAPIMockRecorder) ListOutposts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutposts", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutposts), arg0)
}

// ListOutpostsPages mocks base method.
func (m *MockOutpostsAPI) ListOutpostsPages(arg0 *outposts.ListOutpostsInput, arg1 func(*outposts.ListOutpostsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutpostsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOutpostsPages indicates an expected call of ListOutpostsPages.
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsPages", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsPages), arg0, arg1)
}

// ListOutpostsPagesWithContext mocks base method.
func (m *MockOutpostsAPI) ListOutpostsPagesWithContext(arg0 context.Context, arg1 *outposts.ListOutpostsInput, arg2 func(*outposts.ListOutpostsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutpostsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOutpostsPagesWithContext indicates an expected call of ListOutpostsPagesWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsPagesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsPagesWithContext), varargs...)
}

// ListOutpostsRequest mocks base method.
func (m *MockOutpostsAPI) ListOutpostsRequest(arg0 *outposts.ListOutpostsInput) (*request.Request, *outposts.ListOutpostsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutpostsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.ListOutpostsOutput)
	return ret0, ret1
}

// ListOutpostsRequest indicates an expected call of ListOutpostsRequest.
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsRequest), arg0)
}

// ListOutpostsWithContext mocks base method.
func (m *MockOutpostsAPI) ListOutpostsWithContext(arg0 context.Context, arg1 *outposts.ListOutpostsInput, arg2 ...request.Option) (*outposts.ListOutpostsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutpostsWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.ListOutpostsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutpostsWithContext indicates an expected call of ListOutpostsWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListOutpostsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutpostsWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListOutpostsWithContext), varargs...)
}

// ListSites mocks base method.
func (m *MockOutpostsAPI) ListSites(arg0 *outposts.ListSitesInput) (*outposts.ListSitesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSites", arg0)
	ret0, _ := ret[0].(*outposts.ListSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSites indicates an expected call of ListSites.
func (mr *MockOutpostsAPIMockRecorder) ListSites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSites", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSites), arg0)
}

// ListSitesPages mocks base method.
func (m *MockOutpostsAPI) ListSitesPages(arg0 *outposts.ListSitesInput, arg1 func(*outposts.ListSitesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSitesPages indicates an expected call of ListSitesPages.
func (mr *MockOutpostsAPIMockRecorder) ListSitesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesPages", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesPages), arg0, arg1)
}

// ListSitesPagesWithContext mocks base method.
func (m *MockOutpostsAPI) ListSitesPagesWithContext(arg0 context.Context, arg1 *outposts.ListSitesInput, arg2 func(*outposts.ListSitesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSitesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSitesPagesWithContext indicates an expected call of ListSitesPagesWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListSitesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesPagesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesPagesWithContext), varargs...)
}

// ListSitesRequest mocks base method.
func (m *MockOutpostsAPI) ListSitesRequest(arg0 *outposts.ListSitesInput) (*request.Request, *outposts.ListSitesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSitesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.ListSitesOutput)
	return ret0, ret1
}

// ListSitesRequest indicates an expected call of ListSitesRequest.
func (mr *MockOutpostsAPIMockRecorder) ListSitesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesRequest), arg0)
}

// ListSitesWithContext mocks base method.
func (m *MockOutpostsAPI) ListSitesWithContext(arg0 context.Context, arg1 *outposts.ListSitesInput, arg2 ...request.Option) (*outposts.ListSitesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSitesWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.ListSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSitesWithContext indicates an expected call of ListSitesWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListSitesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSitesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListSitesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockOutpostsAPI) ListTagsForResource(arg0 *outposts.ListTagsForResourceInput) (*outposts.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*outposts.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockOutpostsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockOutpostsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockOutpostsAPI) ListTagsForResourceRequest(arg0 *outposts.ListTagsForResourceInput) (*request.Request, *outposts.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockOutpostsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockOutpostsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *outposts.ListTagsForResourceInput, arg2 ...request.Option) (*outposts.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockOutpostsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockOutpostsAPI) TagResource(arg0 *outposts.TagResourceInput) (*outposts.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*outposts.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockOutpostsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOutpostsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockOutpostsAPI) TagResourceRequest(arg0 *outposts.TagResourceInput) (*request.Request, *outposts.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockOutpostsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockOutpostsAPI) TagResourceWithContext(arg0 context.Context, arg1 *outposts.TagResourceInput, arg2 ...request.Option) (*outposts.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockOutpostsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockOutpostsAPI) UntagResource(arg0 *outposts.UntagResourceInput) (*outposts.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*outposts.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockOutpostsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOutpostsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockOutpostsAPI) UntagResourceRequest(arg0 *outposts.UntagResourceInput) (*request.Request, *outposts.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockOutpostsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockOutpostsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *outposts.UntagResourceInput, arg2 ...request.Option) (*outposts.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockOutpostsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateOutpost mocks base method.
func (m *MockOutpostsAPI) UpdateOutpost(arg0 *outposts.UpdateOutpostInput) (*outposts.UpdateOutpostOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutpost", arg0)
	ret0, _ := ret[0].(*outposts.UpdateOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutpost indicates an expected call of UpdateOutpost.
func (mr *MockOutpostsAPIMockRecorder) UpdateOutpost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutpost", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateOutpost), arg0)
}

// UpdateOutpostRequest mocks base method.
func (m *MockOutpostsAPI) UpdateOutpostRequest(arg0 *outposts.UpdateOutpostInput) (*request.Request, *outposts.UpdateOutpostOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutpostRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.UpdateOutpostOutput)
	return ret0, ret1
}

// UpdateOutpostRequest indicates an expected call of UpdateOutpostRequest.
func (mr *MockOutpostsAPIMockRecorder) UpdateOutpostRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutpostRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateOutpostRequest), arg0)
}

// UpdateOutpostWithContext mocks base method.
func (m *MockOutpostsAPI) UpdateOutpostWithContext(arg0 context.Context, arg1 *outposts.UpdateOutpostInput, arg2 ...request.Option) (*outposts.UpdateOutpostOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOutpostWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.UpdateOutpostOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutpostWithContext indicates an expected call of UpdateOutpostWithContext.
func (mr *MockOutpostsAPIMockRecorder) UpdateOutpostWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutpostWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateOutpostWithContext), varargs...)
}

// UpdateSite mocks base method.
func (m *MockOutpostsAPI) UpdateSite(arg0 *outposts.UpdateSiteInput) (*outposts.UpdateSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSite", arg0)
	ret0, _ := ret[0].(*outposts.UpdateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSite indicates an expected call of UpdateSite.
func (mr *MockOutpostsAPIMockRecorder) UpdateSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSite", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSite), arg0)
}

// UpdateSiteAddress mocks base method.
func (m *MockOutpostsAPI) UpdateSiteAddress(arg0 *outposts.UpdateSiteAddressInput) (*outposts.UpdateSiteAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteAddress", arg0)
	ret0, _ := ret[0].(*outposts.UpdateSiteAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSiteAddress indicates an expected call of UpdateSiteAddress.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteAddress", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteAddress), arg0)
}

// UpdateSiteAddressRequest mocks base method.
func (m *MockOutpostsAPI) UpdateSiteAddressRequest(arg0 *outposts.UpdateSiteAddressInput) (*request.Request, *outposts.UpdateSiteAddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteAddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.UpdateSiteAddressOutput)
	return ret0, ret1
}

// UpdateSiteAddressRequest indicates an expected call of UpdateSiteAddressRequest.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteAddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteAddressRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteAddressRequest), arg0)
}

// UpdateSiteAddressWithContext mocks base method.
func (m *MockOutpostsAPI) UpdateSiteAddressWithContext(arg0 context.Context, arg1 *outposts.UpdateSiteAddressInput, arg2 ...request.Option) (*outposts.UpdateSiteAddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSiteAddressWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.UpdateSiteAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSiteAddressWithContext indicates an expected call of UpdateSiteAddressWithContext.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteAddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteAddressWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteAddressWithContext), varargs...)
}

// UpdateSiteRackPhysicalProperties mocks base method.
func (m *MockOutpostsAPI) UpdateSiteRackPhysicalProperties(arg0 *outposts.UpdateSiteRackPhysicalPropertiesInput) (*outposts.UpdateSiteRackPhysicalPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteRackPhysicalProperties", arg0)
	ret0, _ := ret[0].(*outposts.UpdateSiteRackPhysicalPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSiteRackPhysicalProperties indicates an expected call of UpdateSiteRackPhysicalProperties.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteRackPhysicalProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteRackPhysicalProperties", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteRackPhysicalProperties), arg0)
}

// UpdateSiteRackPhysicalPropertiesRequest mocks base method.
func (m *MockOutpostsAPI) UpdateSiteRackPhysicalPropertiesRequest(arg0 *outposts.UpdateSiteRackPhysicalPropertiesInput) (*request.Request, *outposts.UpdateSiteRackPhysicalPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteRackPhysicalPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.UpdateSiteRackPhysicalPropertiesOutput)
	return ret0, ret1
}

// UpdateSiteRackPhysicalPropertiesRequest indicates an expected call of UpdateSiteRackPhysicalPropertiesRequest.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteRackPhysicalPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteRackPhysicalPropertiesRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteRackPhysicalPropertiesRequest), arg0)
}

// UpdateSiteRackPhysicalPropertiesWithContext mocks base method.
func (m *MockOutpostsAPI) UpdateSiteRackPhysicalPropertiesWithContext(arg0 context.Context, arg1 *outposts.UpdateSiteRackPhysicalPropertiesInput, arg2 ...request.Option) (*outposts.UpdateSiteRackPhysicalPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSiteRackPhysicalPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.UpdateSiteRackPhysicalPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSiteRackPhysicalPropertiesWithContext indicates an expected call of UpdateSiteRackPhysicalPropertiesWithContext.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteRackPhysicalPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteRackPhysicalPropertiesWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteRackPhysicalPropertiesWithContext), varargs...)
}

// UpdateSiteRequest mocks base method.
func (m *MockOutpostsAPI) UpdateSiteRequest(arg0 *outposts.UpdateSiteInput) (*request.Request, *outposts.UpdateSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*outposts.UpdateSiteOutput)
	return ret0, ret1
}

// UpdateSiteRequest indicates an expected call of UpdateSiteRequest.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteRequest", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteRequest), arg0)
}

// UpdateSiteWithContext mocks base method.
func (m *MockOutpostsAPI) UpdateSiteWithContext(arg0 context.Context, arg1 *outposts.UpdateSiteInput, arg2 ...request.Option) (*outposts.UpdateSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSiteWithContext", varargs...)
	ret0, _ := ret[0].(*outposts.UpdateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSiteWithContext indicates an expected call of UpdateSiteWithContext.
func (mr *MockOutpostsAPIMockRecorder) UpdateSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteWithContext", reflect.TypeOf((*MockOutpostsAPI)(nil).UpdateSiteWithContext), varargs...)
}

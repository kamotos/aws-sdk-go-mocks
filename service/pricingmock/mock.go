// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/pricing/pricingiface (interfaces: PricingAPI)

// Package pricingmock is a generated GoMock package.
package pricingmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	pricing "github.com/aws/aws-sdk-go/service/pricing"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPricingAPI is a mock of PricingAPI interface
type MockPricingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPricingAPIMockRecorder
}

// MockPricingAPIMockRecorder is the mock recorder for MockPricingAPI
type MockPricingAPIMockRecorder struct {
	mock *MockPricingAPI
}

// NewMockPricingAPI creates a new mock instance
func NewMockPricingAPI(ctrl *gomock.Controller) *MockPricingAPI {
	mock := &MockPricingAPI{ctrl: ctrl}
	mock.recorder = &MockPricingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPricingAPI) EXPECT() *MockPricingAPIMockRecorder {
	return m.recorder
}

// DescribeServices mocks base method
func (m *MockPricingAPI) DescribeServices(arg0 *pricing.DescribeServicesInput) (*pricing.DescribeServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServices", arg0)
	ret0, _ := ret[0].(*pricing.DescribeServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServices indicates an expected call of DescribeServices
func (mr *MockPricingAPIMockRecorder) DescribeServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServices", reflect.TypeOf((*MockPricingAPI)(nil).DescribeServices), arg0)
}

// DescribeServicesPages mocks base method
func (m *MockPricingAPI) DescribeServicesPages(arg0 *pricing.DescribeServicesInput, arg1 func(*pricing.DescribeServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeServicesPages indicates an expected call of DescribeServicesPages
func (mr *MockPricingAPIMockRecorder) DescribeServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServicesPages", reflect.TypeOf((*MockPricingAPI)(nil).DescribeServicesPages), arg0, arg1)
}

// DescribeServicesPagesWithContext mocks base method
func (m *MockPricingAPI) DescribeServicesPagesWithContext(arg0 context.Context, arg1 *pricing.DescribeServicesInput, arg2 func(*pricing.DescribeServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeServicesPagesWithContext indicates an expected call of DescribeServicesPagesWithContext
func (mr *MockPricingAPIMockRecorder) DescribeServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServicesPagesWithContext", reflect.TypeOf((*MockPricingAPI)(nil).DescribeServicesPagesWithContext), varargs...)
}

// DescribeServicesRequest mocks base method
func (m *MockPricingAPI) DescribeServicesRequest(arg0 *pricing.DescribeServicesInput) (*request.Request, *pricing.DescribeServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pricing.DescribeServicesOutput)
	return ret0, ret1
}

// DescribeServicesRequest indicates an expected call of DescribeServicesRequest
func (mr *MockPricingAPIMockRecorder) DescribeServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServicesRequest", reflect.TypeOf((*MockPricingAPI)(nil).DescribeServicesRequest), arg0)
}

// DescribeServicesWithContext mocks base method
func (m *MockPricingAPI) DescribeServicesWithContext(arg0 context.Context, arg1 *pricing.DescribeServicesInput, arg2 ...request.Option) (*pricing.DescribeServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServicesWithContext", varargs...)
	ret0, _ := ret[0].(*pricing.DescribeServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServicesWithContext indicates an expected call of DescribeServicesWithContext
func (mr *MockPricingAPIMockRecorder) DescribeServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServicesWithContext", reflect.TypeOf((*MockPricingAPI)(nil).DescribeServicesWithContext), varargs...)
}

// GetAttributeValues mocks base method
func (m *MockPricingAPI) GetAttributeValues(arg0 *pricing.GetAttributeValuesInput) (*pricing.GetAttributeValuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeValues", arg0)
	ret0, _ := ret[0].(*pricing.GetAttributeValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeValues indicates an expected call of GetAttributeValues
func (mr *MockPricingAPIMockRecorder) GetAttributeValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeValues", reflect.TypeOf((*MockPricingAPI)(nil).GetAttributeValues), arg0)
}

// GetAttributeValuesPages mocks base method
func (m *MockPricingAPI) GetAttributeValuesPages(arg0 *pricing.GetAttributeValuesInput, arg1 func(*pricing.GetAttributeValuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeValuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAttributeValuesPages indicates an expected call of GetAttributeValuesPages
func (mr *MockPricingAPIMockRecorder) GetAttributeValuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeValuesPages", reflect.TypeOf((*MockPricingAPI)(nil).GetAttributeValuesPages), arg0, arg1)
}

// GetAttributeValuesPagesWithContext mocks base method
func (m *MockPricingAPI) GetAttributeValuesPagesWithContext(arg0 context.Context, arg1 *pricing.GetAttributeValuesInput, arg2 func(*pricing.GetAttributeValuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttributeValuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAttributeValuesPagesWithContext indicates an expected call of GetAttributeValuesPagesWithContext
func (mr *MockPricingAPIMockRecorder) GetAttributeValuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeValuesPagesWithContext", reflect.TypeOf((*MockPricingAPI)(nil).GetAttributeValuesPagesWithContext), varargs...)
}

// GetAttributeValuesRequest mocks base method
func (m *MockPricingAPI) GetAttributeValuesRequest(arg0 *pricing.GetAttributeValuesInput) (*request.Request, *pricing.GetAttributeValuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeValuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pricing.GetAttributeValuesOutput)
	return ret0, ret1
}

// GetAttributeValuesRequest indicates an expected call of GetAttributeValuesRequest
func (mr *MockPricingAPIMockRecorder) GetAttributeValuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeValuesRequest", reflect.TypeOf((*MockPricingAPI)(nil).GetAttributeValuesRequest), arg0)
}

// GetAttributeValuesWithContext mocks base method
func (m *MockPricingAPI) GetAttributeValuesWithContext(arg0 context.Context, arg1 *pricing.GetAttributeValuesInput, arg2 ...request.Option) (*pricing.GetAttributeValuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttributeValuesWithContext", varargs...)
	ret0, _ := ret[0].(*pricing.GetAttributeValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeValuesWithContext indicates an expected call of GetAttributeValuesWithContext
func (mr *MockPricingAPIMockRecorder) GetAttributeValuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeValuesWithContext", reflect.TypeOf((*MockPricingAPI)(nil).GetAttributeValuesWithContext), varargs...)
}

// GetProducts mocks base method
func (m *MockPricingAPI) GetProducts(arg0 *pricing.GetProductsInput) (*pricing.GetProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0)
	ret0, _ := ret[0].(*pricing.GetProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts
func (mr *MockPricingAPIMockRecorder) GetProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockPricingAPI)(nil).GetProducts), arg0)
}

// GetProductsPages mocks base method
func (m *MockPricingAPI) GetProductsPages(arg0 *pricing.GetProductsInput, arg1 func(*pricing.GetProductsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProductsPages indicates an expected call of GetProductsPages
func (mr *MockPricingAPIMockRecorder) GetProductsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsPages", reflect.TypeOf((*MockPricingAPI)(nil).GetProductsPages), arg0, arg1)
}

// GetProductsPagesWithContext mocks base method
func (m *MockPricingAPI) GetProductsPagesWithContext(arg0 context.Context, arg1 *pricing.GetProductsInput, arg2 func(*pricing.GetProductsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProductsPagesWithContext indicates an expected call of GetProductsPagesWithContext
func (mr *MockPricingAPIMockRecorder) GetProductsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsPagesWithContext", reflect.TypeOf((*MockPricingAPI)(nil).GetProductsPagesWithContext), varargs...)
}

// GetProductsRequest mocks base method
func (m *MockPricingAPI) GetProductsRequest(arg0 *pricing.GetProductsInput) (*request.Request, *pricing.GetProductsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pricing.GetProductsOutput)
	return ret0, ret1
}

// GetProductsRequest indicates an expected call of GetProductsRequest
func (mr *MockPricingAPIMockRecorder) GetProductsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsRequest", reflect.TypeOf((*MockPricingAPI)(nil).GetProductsRequest), arg0)
}

// GetProductsWithContext mocks base method
func (m *MockPricingAPI) GetProductsWithContext(arg0 context.Context, arg1 *pricing.GetProductsInput, arg2 ...request.Option) (*pricing.GetProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProductsWithContext", varargs...)
	ret0, _ := ret[0].(*pricing.GetProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsWithContext indicates an expected call of GetProductsWithContext
func (mr *MockPricingAPIMockRecorder) GetProductsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsWithContext", reflect.TypeOf((*MockPricingAPI)(nil).GetProductsWithContext), varargs...)
}

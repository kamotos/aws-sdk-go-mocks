// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/globalaccelerator/globalacceleratoriface (interfaces: GlobalAcceleratorAPI)

// Package globalacceleratormock is a generated GoMock package.
package globalacceleratormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	globalaccelerator "github.com/aws/aws-sdk-go/service/globalaccelerator"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGlobalAcceleratorAPI is a mock of GlobalAcceleratorAPI interface
type MockGlobalAcceleratorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalAcceleratorAPIMockRecorder
}

// MockGlobalAcceleratorAPIMockRecorder is the mock recorder for MockGlobalAcceleratorAPI
type MockGlobalAcceleratorAPIMockRecorder struct {
	mock *MockGlobalAcceleratorAPI
}

// NewMockGlobalAcceleratorAPI creates a new mock instance
func NewMockGlobalAcceleratorAPI(ctrl *gomock.Controller) *MockGlobalAcceleratorAPI {
	mock := &MockGlobalAcceleratorAPI{ctrl: ctrl}
	mock.recorder = &MockGlobalAcceleratorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalAcceleratorAPI) EXPECT() *MockGlobalAcceleratorAPIMockRecorder {
	return m.recorder
}

// AddCustomRoutingEndpoints mocks base method
func (m *MockGlobalAcceleratorAPI) AddCustomRoutingEndpoints(arg0 *globalaccelerator.AddCustomRoutingEndpointsInput) (*globalaccelerator.AddCustomRoutingEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomRoutingEndpoints", arg0)
	ret0, _ := ret[0].(*globalaccelerator.AddCustomRoutingEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomRoutingEndpoints indicates an expected call of AddCustomRoutingEndpoints
func (mr *MockGlobalAcceleratorAPIMockRecorder) AddCustomRoutingEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomRoutingEndpoints", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AddCustomRoutingEndpoints), arg0)
}

// AddCustomRoutingEndpointsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) AddCustomRoutingEndpointsRequest(arg0 *globalaccelerator.AddCustomRoutingEndpointsInput) (*request.Request, *globalaccelerator.AddCustomRoutingEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomRoutingEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.AddCustomRoutingEndpointsOutput)
	return ret0, ret1
}

// AddCustomRoutingEndpointsRequest indicates an expected call of AddCustomRoutingEndpointsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) AddCustomRoutingEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomRoutingEndpointsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AddCustomRoutingEndpointsRequest), arg0)
}

// AddCustomRoutingEndpointsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) AddCustomRoutingEndpointsWithContext(arg0 context.Context, arg1 *globalaccelerator.AddCustomRoutingEndpointsInput, arg2 ...request.Option) (*globalaccelerator.AddCustomRoutingEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCustomRoutingEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.AddCustomRoutingEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomRoutingEndpointsWithContext indicates an expected call of AddCustomRoutingEndpointsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) AddCustomRoutingEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomRoutingEndpointsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AddCustomRoutingEndpointsWithContext), varargs...)
}

// AdvertiseByoipCidr mocks base method
func (m *MockGlobalAcceleratorAPI) AdvertiseByoipCidr(arg0 *globalaccelerator.AdvertiseByoipCidrInput) (*globalaccelerator.AdvertiseByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertiseByoipCidr", arg0)
	ret0, _ := ret[0].(*globalaccelerator.AdvertiseByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertiseByoipCidr indicates an expected call of AdvertiseByoipCidr
func (mr *MockGlobalAcceleratorAPIMockRecorder) AdvertiseByoipCidr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseByoipCidr", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AdvertiseByoipCidr), arg0)
}

// AdvertiseByoipCidrRequest mocks base method
func (m *MockGlobalAcceleratorAPI) AdvertiseByoipCidrRequest(arg0 *globalaccelerator.AdvertiseByoipCidrInput) (*request.Request, *globalaccelerator.AdvertiseByoipCidrOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvertiseByoipCidrRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.AdvertiseByoipCidrOutput)
	return ret0, ret1
}

// AdvertiseByoipCidrRequest indicates an expected call of AdvertiseByoipCidrRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) AdvertiseByoipCidrRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseByoipCidrRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AdvertiseByoipCidrRequest), arg0)
}

// AdvertiseByoipCidrWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) AdvertiseByoipCidrWithContext(arg0 context.Context, arg1 *globalaccelerator.AdvertiseByoipCidrInput, arg2 ...request.Option) (*globalaccelerator.AdvertiseByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AdvertiseByoipCidrWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.AdvertiseByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvertiseByoipCidrWithContext indicates an expected call of AdvertiseByoipCidrWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) AdvertiseByoipCidrWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvertiseByoipCidrWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AdvertiseByoipCidrWithContext), varargs...)
}

// AllowCustomRoutingTraffic mocks base method
func (m *MockGlobalAcceleratorAPI) AllowCustomRoutingTraffic(arg0 *globalaccelerator.AllowCustomRoutingTrafficInput) (*globalaccelerator.AllowCustomRoutingTrafficOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowCustomRoutingTraffic", arg0)
	ret0, _ := ret[0].(*globalaccelerator.AllowCustomRoutingTrafficOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllowCustomRoutingTraffic indicates an expected call of AllowCustomRoutingTraffic
func (mr *MockGlobalAcceleratorAPIMockRecorder) AllowCustomRoutingTraffic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCustomRoutingTraffic", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AllowCustomRoutingTraffic), arg0)
}

// AllowCustomRoutingTrafficRequest mocks base method
func (m *MockGlobalAcceleratorAPI) AllowCustomRoutingTrafficRequest(arg0 *globalaccelerator.AllowCustomRoutingTrafficInput) (*request.Request, *globalaccelerator.AllowCustomRoutingTrafficOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowCustomRoutingTrafficRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.AllowCustomRoutingTrafficOutput)
	return ret0, ret1
}

// AllowCustomRoutingTrafficRequest indicates an expected call of AllowCustomRoutingTrafficRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) AllowCustomRoutingTrafficRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCustomRoutingTrafficRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AllowCustomRoutingTrafficRequest), arg0)
}

// AllowCustomRoutingTrafficWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) AllowCustomRoutingTrafficWithContext(arg0 context.Context, arg1 *globalaccelerator.AllowCustomRoutingTrafficInput, arg2 ...request.Option) (*globalaccelerator.AllowCustomRoutingTrafficOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllowCustomRoutingTrafficWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.AllowCustomRoutingTrafficOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllowCustomRoutingTrafficWithContext indicates an expected call of AllowCustomRoutingTrafficWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) AllowCustomRoutingTrafficWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCustomRoutingTrafficWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).AllowCustomRoutingTrafficWithContext), varargs...)
}

// CreateAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) CreateAccelerator(arg0 *globalaccelerator.CreateAcceleratorInput) (*globalaccelerator.CreateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccelerator indicates an expected call of CreateAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateAccelerator), arg0)
}

// CreateAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateAcceleratorRequest(arg0 *globalaccelerator.CreateAcceleratorInput) (*request.Request, *globalaccelerator.CreateAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateAcceleratorOutput)
	return ret0, ret1
}

// CreateAcceleratorRequest indicates an expected call of CreateAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateAcceleratorRequest), arg0)
}

// CreateAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.CreateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcceleratorWithContext indicates an expected call of CreateAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateAcceleratorWithContext), varargs...)
}

// CreateCustomRoutingAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingAccelerator(arg0 *globalaccelerator.CreateCustomRoutingAcceleratorInput) (*globalaccelerator.CreateCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRoutingAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomRoutingAccelerator indicates an expected call of CreateCustomRoutingAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingAccelerator), arg0)
}

// CreateCustomRoutingAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingAcceleratorRequest(arg0 *globalaccelerator.CreateCustomRoutingAcceleratorInput) (*request.Request, *globalaccelerator.CreateCustomRoutingAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRoutingAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateCustomRoutingAcceleratorOutput)
	return ret0, ret1
}

// CreateCustomRoutingAcceleratorRequest indicates an expected call of CreateCustomRoutingAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingAcceleratorRequest), arg0)
}

// CreateCustomRoutingAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateCustomRoutingAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.CreateCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomRoutingAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomRoutingAcceleratorWithContext indicates an expected call of CreateCustomRoutingAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingAcceleratorWithContext), varargs...)
}

// CreateCustomRoutingEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingEndpointGroup(arg0 *globalaccelerator.CreateCustomRoutingEndpointGroupInput) (*globalaccelerator.CreateCustomRoutingEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRoutingEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateCustomRoutingEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomRoutingEndpointGroup indicates an expected call of CreateCustomRoutingEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingEndpointGroup), arg0)
}

// CreateCustomRoutingEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingEndpointGroupRequest(arg0 *globalaccelerator.CreateCustomRoutingEndpointGroupInput) (*request.Request, *globalaccelerator.CreateCustomRoutingEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRoutingEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateCustomRoutingEndpointGroupOutput)
	return ret0, ret1
}

// CreateCustomRoutingEndpointGroupRequest indicates an expected call of CreateCustomRoutingEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingEndpointGroupRequest), arg0)
}

// CreateCustomRoutingEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateCustomRoutingEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.CreateCustomRoutingEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomRoutingEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateCustomRoutingEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomRoutingEndpointGroupWithContext indicates an expected call of CreateCustomRoutingEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingEndpointGroupWithContext), varargs...)
}

// CreateCustomRoutingListener mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingListener(arg0 *globalaccelerator.CreateCustomRoutingListenerInput) (*globalaccelerator.CreateCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRoutingListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomRoutingListener indicates an expected call of CreateCustomRoutingListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingListener), arg0)
}

// CreateCustomRoutingListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingListenerRequest(arg0 *globalaccelerator.CreateCustomRoutingListenerInput) (*request.Request, *globalaccelerator.CreateCustomRoutingListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomRoutingListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateCustomRoutingListenerOutput)
	return ret0, ret1
}

// CreateCustomRoutingListenerRequest indicates an expected call of CreateCustomRoutingListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingListenerRequest), arg0)
}

// CreateCustomRoutingListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateCustomRoutingListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateCustomRoutingListenerInput, arg2 ...request.Option) (*globalaccelerator.CreateCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomRoutingListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomRoutingListenerWithContext indicates an expected call of CreateCustomRoutingListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateCustomRoutingListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomRoutingListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateCustomRoutingListenerWithContext), varargs...)
}

// CreateEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) CreateEndpointGroup(arg0 *globalaccelerator.CreateEndpointGroupInput) (*globalaccelerator.CreateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointGroup indicates an expected call of CreateEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateEndpointGroup), arg0)
}

// CreateEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateEndpointGroupRequest(arg0 *globalaccelerator.CreateEndpointGroupInput) (*request.Request, *globalaccelerator.CreateEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateEndpointGroupOutput)
	return ret0, ret1
}

// CreateEndpointGroupRequest indicates an expected call of CreateEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateEndpointGroupRequest), arg0)
}

// CreateEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.CreateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpointGroupWithContext indicates an expected call of CreateEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateEndpointGroupWithContext), varargs...)
}

// CreateListener mocks base method
func (m *MockGlobalAcceleratorAPI) CreateListener(arg0 *globalaccelerator.CreateListenerInput) (*globalaccelerator.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListener indicates an expected call of CreateListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateListener), arg0)
}

// CreateListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) CreateListenerRequest(arg0 *globalaccelerator.CreateListenerInput) (*request.Request, *globalaccelerator.CreateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.CreateListenerOutput)
	return ret0, ret1
}

// CreateListenerRequest indicates an expected call of CreateListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateListenerRequest), arg0)
}

// CreateListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) CreateListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.CreateListenerInput, arg2 ...request.Option) (*globalaccelerator.CreateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.CreateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListenerWithContext indicates an expected call of CreateListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) CreateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).CreateListenerWithContext), varargs...)
}

// DeleteAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteAccelerator(arg0 *globalaccelerator.DeleteAcceleratorInput) (*globalaccelerator.DeleteAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccelerator indicates an expected call of DeleteAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteAccelerator), arg0)
}

// DeleteAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteAcceleratorRequest(arg0 *globalaccelerator.DeleteAcceleratorInput) (*request.Request, *globalaccelerator.DeleteAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteAcceleratorOutput)
	return ret0, ret1
}

// DeleteAcceleratorRequest indicates an expected call of DeleteAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteAcceleratorRequest), arg0)
}

// DeleteAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.DeleteAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAcceleratorWithContext indicates an expected call of DeleteAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteAcceleratorWithContext), varargs...)
}

// DeleteCustomRoutingAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingAccelerator(arg0 *globalaccelerator.DeleteCustomRoutingAcceleratorInput) (*globalaccelerator.DeleteCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRoutingAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRoutingAccelerator indicates an expected call of DeleteCustomRoutingAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingAccelerator), arg0)
}

// DeleteCustomRoutingAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingAcceleratorRequest(arg0 *globalaccelerator.DeleteCustomRoutingAcceleratorInput) (*request.Request, *globalaccelerator.DeleteCustomRoutingAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRoutingAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteCustomRoutingAcceleratorOutput)
	return ret0, ret1
}

// DeleteCustomRoutingAcceleratorRequest indicates an expected call of DeleteCustomRoutingAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingAcceleratorRequest), arg0)
}

// DeleteCustomRoutingAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteCustomRoutingAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.DeleteCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomRoutingAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRoutingAcceleratorWithContext indicates an expected call of DeleteCustomRoutingAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingAcceleratorWithContext), varargs...)
}

// DeleteCustomRoutingEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingEndpointGroup(arg0 *globalaccelerator.DeleteCustomRoutingEndpointGroupInput) (*globalaccelerator.DeleteCustomRoutingEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRoutingEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteCustomRoutingEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRoutingEndpointGroup indicates an expected call of DeleteCustomRoutingEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingEndpointGroup), arg0)
}

// DeleteCustomRoutingEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingEndpointGroupRequest(arg0 *globalaccelerator.DeleteCustomRoutingEndpointGroupInput) (*request.Request, *globalaccelerator.DeleteCustomRoutingEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRoutingEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteCustomRoutingEndpointGroupOutput)
	return ret0, ret1
}

// DeleteCustomRoutingEndpointGroupRequest indicates an expected call of DeleteCustomRoutingEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingEndpointGroupRequest), arg0)
}

// DeleteCustomRoutingEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteCustomRoutingEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.DeleteCustomRoutingEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomRoutingEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteCustomRoutingEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRoutingEndpointGroupWithContext indicates an expected call of DeleteCustomRoutingEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingEndpointGroupWithContext), varargs...)
}

// DeleteCustomRoutingListener mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingListener(arg0 *globalaccelerator.DeleteCustomRoutingListenerInput) (*globalaccelerator.DeleteCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRoutingListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRoutingListener indicates an expected call of DeleteCustomRoutingListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingListener), arg0)
}

// DeleteCustomRoutingListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingListenerRequest(arg0 *globalaccelerator.DeleteCustomRoutingListenerInput) (*request.Request, *globalaccelerator.DeleteCustomRoutingListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomRoutingListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteCustomRoutingListenerOutput)
	return ret0, ret1
}

// DeleteCustomRoutingListenerRequest indicates an expected call of DeleteCustomRoutingListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingListenerRequest), arg0)
}

// DeleteCustomRoutingListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteCustomRoutingListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteCustomRoutingListenerInput, arg2 ...request.Option) (*globalaccelerator.DeleteCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomRoutingListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomRoutingListenerWithContext indicates an expected call of DeleteCustomRoutingListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteCustomRoutingListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomRoutingListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteCustomRoutingListenerWithContext), varargs...)
}

// DeleteEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteEndpointGroup(arg0 *globalaccelerator.DeleteEndpointGroupInput) (*globalaccelerator.DeleteEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointGroup indicates an expected call of DeleteEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteEndpointGroup), arg0)
}

// DeleteEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteEndpointGroupRequest(arg0 *globalaccelerator.DeleteEndpointGroupInput) (*request.Request, *globalaccelerator.DeleteEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteEndpointGroupOutput)
	return ret0, ret1
}

// DeleteEndpointGroupRequest indicates an expected call of DeleteEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteEndpointGroupRequest), arg0)
}

// DeleteEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.DeleteEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEndpointGroupWithContext indicates an expected call of DeleteEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteEndpointGroupWithContext), varargs...)
}

// DeleteListener mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteListener(arg0 *globalaccelerator.DeleteListenerInput) (*globalaccelerator.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListener indicates an expected call of DeleteListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteListener), arg0)
}

// DeleteListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteListenerRequest(arg0 *globalaccelerator.DeleteListenerInput) (*request.Request, *globalaccelerator.DeleteListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeleteListenerOutput)
	return ret0, ret1
}

// DeleteListenerRequest indicates an expected call of DeleteListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteListenerRequest), arg0)
}

// DeleteListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeleteListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.DeleteListenerInput, arg2 ...request.Option) (*globalaccelerator.DeleteListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeleteListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListenerWithContext indicates an expected call of DeleteListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeleteListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeleteListenerWithContext), varargs...)
}

// DenyCustomRoutingTraffic mocks base method
func (m *MockGlobalAcceleratorAPI) DenyCustomRoutingTraffic(arg0 *globalaccelerator.DenyCustomRoutingTrafficInput) (*globalaccelerator.DenyCustomRoutingTrafficOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenyCustomRoutingTraffic", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DenyCustomRoutingTrafficOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenyCustomRoutingTraffic indicates an expected call of DenyCustomRoutingTraffic
func (mr *MockGlobalAcceleratorAPIMockRecorder) DenyCustomRoutingTraffic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyCustomRoutingTraffic", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DenyCustomRoutingTraffic), arg0)
}

// DenyCustomRoutingTrafficRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DenyCustomRoutingTrafficRequest(arg0 *globalaccelerator.DenyCustomRoutingTrafficInput) (*request.Request, *globalaccelerator.DenyCustomRoutingTrafficOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenyCustomRoutingTrafficRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DenyCustomRoutingTrafficOutput)
	return ret0, ret1
}

// DenyCustomRoutingTrafficRequest indicates an expected call of DenyCustomRoutingTrafficRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DenyCustomRoutingTrafficRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyCustomRoutingTrafficRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DenyCustomRoutingTrafficRequest), arg0)
}

// DenyCustomRoutingTrafficWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DenyCustomRoutingTrafficWithContext(arg0 context.Context, arg1 *globalaccelerator.DenyCustomRoutingTrafficInput, arg2 ...request.Option) (*globalaccelerator.DenyCustomRoutingTrafficOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DenyCustomRoutingTrafficWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DenyCustomRoutingTrafficOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DenyCustomRoutingTrafficWithContext indicates an expected call of DenyCustomRoutingTrafficWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DenyCustomRoutingTrafficWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyCustomRoutingTrafficWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DenyCustomRoutingTrafficWithContext), varargs...)
}

// DeprovisionByoipCidr mocks base method
func (m *MockGlobalAcceleratorAPI) DeprovisionByoipCidr(arg0 *globalaccelerator.DeprovisionByoipCidrInput) (*globalaccelerator.DeprovisionByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprovisionByoipCidr", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DeprovisionByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeprovisionByoipCidr indicates an expected call of DeprovisionByoipCidr
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeprovisionByoipCidr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprovisionByoipCidr", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeprovisionByoipCidr), arg0)
}

// DeprovisionByoipCidrRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DeprovisionByoipCidrRequest(arg0 *globalaccelerator.DeprovisionByoipCidrInput) (*request.Request, *globalaccelerator.DeprovisionByoipCidrOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprovisionByoipCidrRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DeprovisionByoipCidrOutput)
	return ret0, ret1
}

// DeprovisionByoipCidrRequest indicates an expected call of DeprovisionByoipCidrRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeprovisionByoipCidrRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprovisionByoipCidrRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeprovisionByoipCidrRequest), arg0)
}

// DeprovisionByoipCidrWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DeprovisionByoipCidrWithContext(arg0 context.Context, arg1 *globalaccelerator.DeprovisionByoipCidrInput, arg2 ...request.Option) (*globalaccelerator.DeprovisionByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeprovisionByoipCidrWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DeprovisionByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeprovisionByoipCidrWithContext indicates an expected call of DeprovisionByoipCidrWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DeprovisionByoipCidrWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprovisionByoipCidrWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DeprovisionByoipCidrWithContext), varargs...)
}

// DescribeAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAccelerator(arg0 *globalaccelerator.DescribeAcceleratorInput) (*globalaccelerator.DescribeAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccelerator indicates an expected call of DescribeAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAccelerator), arg0)
}

// DescribeAcceleratorAttributes mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorAttributes(arg0 *globalaccelerator.DescribeAcceleratorAttributesInput) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAcceleratorAttributes", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAcceleratorAttributes indicates an expected call of DescribeAcceleratorAttributes
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorAttributes", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorAttributes), arg0)
}

// DescribeAcceleratorAttributesRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorAttributesRequest(arg0 *globalaccelerator.DescribeAcceleratorAttributesInput) (*request.Request, *globalaccelerator.DescribeAcceleratorAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAcceleratorAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeAcceleratorAttributesOutput)
	return ret0, ret1
}

// DescribeAcceleratorAttributesRequest indicates an expected call of DescribeAcceleratorAttributesRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorAttributesRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorAttributesRequest), arg0)
}

// DescribeAcceleratorAttributesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorAttributesWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeAcceleratorAttributesInput, arg2 ...request.Option) (*globalaccelerator.DescribeAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAcceleratorAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAcceleratorAttributesWithContext indicates an expected call of DescribeAcceleratorAttributesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorAttributesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorAttributesWithContext), varargs...)
}

// DescribeAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorRequest(arg0 *globalaccelerator.DescribeAcceleratorInput) (*request.Request, *globalaccelerator.DescribeAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeAcceleratorOutput)
	return ret0, ret1
}

// DescribeAcceleratorRequest indicates an expected call of DescribeAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorRequest), arg0)
}

// DescribeAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.DescribeAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAcceleratorWithContext indicates an expected call of DescribeAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeAcceleratorWithContext), varargs...)
}

// DescribeCustomRoutingAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingAccelerator(arg0 *globalaccelerator.DescribeCustomRoutingAcceleratorInput) (*globalaccelerator.DescribeCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingAccelerator indicates an expected call of DescribeCustomRoutingAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingAccelerator), arg0)
}

// DescribeCustomRoutingAcceleratorAttributes mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingAcceleratorAttributes(arg0 *globalaccelerator.DescribeCustomRoutingAcceleratorAttributesInput) (*globalaccelerator.DescribeCustomRoutingAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingAcceleratorAttributes", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingAcceleratorAttributes indicates an expected call of DescribeCustomRoutingAcceleratorAttributes
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingAcceleratorAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingAcceleratorAttributes", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingAcceleratorAttributes), arg0)
}

// DescribeCustomRoutingAcceleratorAttributesRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingAcceleratorAttributesRequest(arg0 *globalaccelerator.DescribeCustomRoutingAcceleratorAttributesInput) (*request.Request, *globalaccelerator.DescribeCustomRoutingAcceleratorAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingAcceleratorAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeCustomRoutingAcceleratorAttributesOutput)
	return ret0, ret1
}

// DescribeCustomRoutingAcceleratorAttributesRequest indicates an expected call of DescribeCustomRoutingAcceleratorAttributesRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingAcceleratorAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingAcceleratorAttributesRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingAcceleratorAttributesRequest), arg0)
}

// DescribeCustomRoutingAcceleratorAttributesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingAcceleratorAttributesWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeCustomRoutingAcceleratorAttributesInput, arg2 ...request.Option) (*globalaccelerator.DescribeCustomRoutingAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomRoutingAcceleratorAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingAcceleratorAttributesWithContext indicates an expected call of DescribeCustomRoutingAcceleratorAttributesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingAcceleratorAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingAcceleratorAttributesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingAcceleratorAttributesWithContext), varargs...)
}

// DescribeCustomRoutingAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingAcceleratorRequest(arg0 *globalaccelerator.DescribeCustomRoutingAcceleratorInput) (*request.Request, *globalaccelerator.DescribeCustomRoutingAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeCustomRoutingAcceleratorOutput)
	return ret0, ret1
}

// DescribeCustomRoutingAcceleratorRequest indicates an expected call of DescribeCustomRoutingAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingAcceleratorRequest), arg0)
}

// DescribeCustomRoutingAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeCustomRoutingAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.DescribeCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomRoutingAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingAcceleratorWithContext indicates an expected call of DescribeCustomRoutingAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingAcceleratorWithContext), varargs...)
}

// DescribeCustomRoutingEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingEndpointGroup(arg0 *globalaccelerator.DescribeCustomRoutingEndpointGroupInput) (*globalaccelerator.DescribeCustomRoutingEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingEndpointGroup indicates an expected call of DescribeCustomRoutingEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingEndpointGroup), arg0)
}

// DescribeCustomRoutingEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingEndpointGroupRequest(arg0 *globalaccelerator.DescribeCustomRoutingEndpointGroupInput) (*request.Request, *globalaccelerator.DescribeCustomRoutingEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeCustomRoutingEndpointGroupOutput)
	return ret0, ret1
}

// DescribeCustomRoutingEndpointGroupRequest indicates an expected call of DescribeCustomRoutingEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingEndpointGroupRequest), arg0)
}

// DescribeCustomRoutingEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeCustomRoutingEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.DescribeCustomRoutingEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomRoutingEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingEndpointGroupWithContext indicates an expected call of DescribeCustomRoutingEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingEndpointGroupWithContext), varargs...)
}

// DescribeCustomRoutingListener mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingListener(arg0 *globalaccelerator.DescribeCustomRoutingListenerInput) (*globalaccelerator.DescribeCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingListener indicates an expected call of DescribeCustomRoutingListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingListener), arg0)
}

// DescribeCustomRoutingListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingListenerRequest(arg0 *globalaccelerator.DescribeCustomRoutingListenerInput) (*request.Request, *globalaccelerator.DescribeCustomRoutingListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomRoutingListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeCustomRoutingListenerOutput)
	return ret0, ret1
}

// DescribeCustomRoutingListenerRequest indicates an expected call of DescribeCustomRoutingListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingListenerRequest), arg0)
}

// DescribeCustomRoutingListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeCustomRoutingListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeCustomRoutingListenerInput, arg2 ...request.Option) (*globalaccelerator.DescribeCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomRoutingListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomRoutingListenerWithContext indicates an expected call of DescribeCustomRoutingListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeCustomRoutingListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomRoutingListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeCustomRoutingListenerWithContext), varargs...)
}

// DescribeEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeEndpointGroup(arg0 *globalaccelerator.DescribeEndpointGroupInput) (*globalaccelerator.DescribeEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointGroup indicates an expected call of DescribeEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeEndpointGroup), arg0)
}

// DescribeEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeEndpointGroupRequest(arg0 *globalaccelerator.DescribeEndpointGroupInput) (*request.Request, *globalaccelerator.DescribeEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeEndpointGroupOutput)
	return ret0, ret1
}

// DescribeEndpointGroupRequest indicates an expected call of DescribeEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeEndpointGroupRequest), arg0)
}

// DescribeEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.DescribeEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointGroupWithContext indicates an expected call of DescribeEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeEndpointGroupWithContext), varargs...)
}

// DescribeListener mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeListener(arg0 *globalaccelerator.DescribeListenerInput) (*globalaccelerator.DescribeListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.DescribeListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeListener indicates an expected call of DescribeListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeListener), arg0)
}

// DescribeListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeListenerRequest(arg0 *globalaccelerator.DescribeListenerInput) (*request.Request, *globalaccelerator.DescribeListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.DescribeListenerOutput)
	return ret0, ret1
}

// DescribeListenerRequest indicates an expected call of DescribeListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeListenerRequest), arg0)
}

// DescribeListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) DescribeListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.DescribeListenerInput, arg2 ...request.Option) (*globalaccelerator.DescribeListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.DescribeListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeListenerWithContext indicates an expected call of DescribeListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) DescribeListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).DescribeListenerWithContext), varargs...)
}

// ListAccelerators mocks base method
func (m *MockGlobalAcceleratorAPI) ListAccelerators(arg0 *globalaccelerator.ListAcceleratorsInput) (*globalaccelerator.ListAcceleratorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccelerators", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListAcceleratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccelerators indicates an expected call of ListAccelerators
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAccelerators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccelerators", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAccelerators), arg0)
}

// ListAcceleratorsPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListAcceleratorsPages(arg0 *globalaccelerator.ListAcceleratorsInput, arg1 func(*globalaccelerator.ListAcceleratorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceleratorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAcceleratorsPages indicates an expected call of ListAcceleratorsPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAcceleratorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceleratorsPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAcceleratorsPages), arg0, arg1)
}

// ListAcceleratorsPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListAcceleratorsPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListAcceleratorsInput, arg2 func(*globalaccelerator.ListAcceleratorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcceleratorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAcceleratorsPagesWithContext indicates an expected call of ListAcceleratorsPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAcceleratorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceleratorsPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAcceleratorsPagesWithContext), varargs...)
}

// ListAcceleratorsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListAcceleratorsRequest(arg0 *globalaccelerator.ListAcceleratorsInput) (*request.Request, *globalaccelerator.ListAcceleratorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceleratorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListAcceleratorsOutput)
	return ret0, ret1
}

// ListAcceleratorsRequest indicates an expected call of ListAcceleratorsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAcceleratorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceleratorsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAcceleratorsRequest), arg0)
}

// ListAcceleratorsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListAcceleratorsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListAcceleratorsInput, arg2 ...request.Option) (*globalaccelerator.ListAcceleratorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAcceleratorsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListAcceleratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcceleratorsWithContext indicates an expected call of ListAcceleratorsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListAcceleratorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceleratorsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListAcceleratorsWithContext), varargs...)
}

// ListByoipCidrs mocks base method
func (m *MockGlobalAcceleratorAPI) ListByoipCidrs(arg0 *globalaccelerator.ListByoipCidrsInput) (*globalaccelerator.ListByoipCidrsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByoipCidrs", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListByoipCidrsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByoipCidrs indicates an expected call of ListByoipCidrs
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListByoipCidrs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByoipCidrs", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListByoipCidrs), arg0)
}

// ListByoipCidrsPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListByoipCidrsPages(arg0 *globalaccelerator.ListByoipCidrsInput, arg1 func(*globalaccelerator.ListByoipCidrsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByoipCidrsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListByoipCidrsPages indicates an expected call of ListByoipCidrsPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListByoipCidrsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByoipCidrsPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListByoipCidrsPages), arg0, arg1)
}

// ListByoipCidrsPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListByoipCidrsPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListByoipCidrsInput, arg2 func(*globalaccelerator.ListByoipCidrsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByoipCidrsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListByoipCidrsPagesWithContext indicates an expected call of ListByoipCidrsPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListByoipCidrsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByoipCidrsPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListByoipCidrsPagesWithContext), varargs...)
}

// ListByoipCidrsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListByoipCidrsRequest(arg0 *globalaccelerator.ListByoipCidrsInput) (*request.Request, *globalaccelerator.ListByoipCidrsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByoipCidrsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListByoipCidrsOutput)
	return ret0, ret1
}

// ListByoipCidrsRequest indicates an expected call of ListByoipCidrsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListByoipCidrsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByoipCidrsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListByoipCidrsRequest), arg0)
}

// ListByoipCidrsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListByoipCidrsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListByoipCidrsInput, arg2 ...request.Option) (*globalaccelerator.ListByoipCidrsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByoipCidrsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListByoipCidrsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByoipCidrsWithContext indicates an expected call of ListByoipCidrsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListByoipCidrsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByoipCidrsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListByoipCidrsWithContext), varargs...)
}

// ListCustomRoutingAccelerators mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingAccelerators(arg0 *globalaccelerator.ListCustomRoutingAcceleratorsInput) (*globalaccelerator.ListCustomRoutingAcceleratorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingAccelerators", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingAcceleratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingAccelerators indicates an expected call of ListCustomRoutingAccelerators
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingAccelerators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingAccelerators", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingAccelerators), arg0)
}

// ListCustomRoutingAcceleratorsPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingAcceleratorsPages(arg0 *globalaccelerator.ListCustomRoutingAcceleratorsInput, arg1 func(*globalaccelerator.ListCustomRoutingAcceleratorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingAcceleratorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingAcceleratorsPages indicates an expected call of ListCustomRoutingAcceleratorsPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingAcceleratorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingAcceleratorsPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingAcceleratorsPages), arg0, arg1)
}

// ListCustomRoutingAcceleratorsPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingAcceleratorsPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingAcceleratorsInput, arg2 func(*globalaccelerator.ListCustomRoutingAcceleratorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingAcceleratorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingAcceleratorsPagesWithContext indicates an expected call of ListCustomRoutingAcceleratorsPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingAcceleratorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingAcceleratorsPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingAcceleratorsPagesWithContext), varargs...)
}

// ListCustomRoutingAcceleratorsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingAcceleratorsRequest(arg0 *globalaccelerator.ListCustomRoutingAcceleratorsInput) (*request.Request, *globalaccelerator.ListCustomRoutingAcceleratorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingAcceleratorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListCustomRoutingAcceleratorsOutput)
	return ret0, ret1
}

// ListCustomRoutingAcceleratorsRequest indicates an expected call of ListCustomRoutingAcceleratorsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingAcceleratorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingAcceleratorsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingAcceleratorsRequest), arg0)
}

// ListCustomRoutingAcceleratorsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingAcceleratorsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingAcceleratorsInput, arg2 ...request.Option) (*globalaccelerator.ListCustomRoutingAcceleratorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingAcceleratorsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingAcceleratorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingAcceleratorsWithContext indicates an expected call of ListCustomRoutingAcceleratorsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingAcceleratorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingAcceleratorsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingAcceleratorsWithContext), varargs...)
}

// ListCustomRoutingEndpointGroups mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingEndpointGroups(arg0 *globalaccelerator.ListCustomRoutingEndpointGroupsInput) (*globalaccelerator.ListCustomRoutingEndpointGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingEndpointGroups", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingEndpointGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingEndpointGroups indicates an expected call of ListCustomRoutingEndpointGroups
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingEndpointGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingEndpointGroups", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingEndpointGroups), arg0)
}

// ListCustomRoutingEndpointGroupsPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingEndpointGroupsPages(arg0 *globalaccelerator.ListCustomRoutingEndpointGroupsInput, arg1 func(*globalaccelerator.ListCustomRoutingEndpointGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingEndpointGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingEndpointGroupsPages indicates an expected call of ListCustomRoutingEndpointGroupsPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingEndpointGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingEndpointGroupsPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingEndpointGroupsPages), arg0, arg1)
}

// ListCustomRoutingEndpointGroupsPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingEndpointGroupsPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingEndpointGroupsInput, arg2 func(*globalaccelerator.ListCustomRoutingEndpointGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingEndpointGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingEndpointGroupsPagesWithContext indicates an expected call of ListCustomRoutingEndpointGroupsPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingEndpointGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingEndpointGroupsPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingEndpointGroupsPagesWithContext), varargs...)
}

// ListCustomRoutingEndpointGroupsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingEndpointGroupsRequest(arg0 *globalaccelerator.ListCustomRoutingEndpointGroupsInput) (*request.Request, *globalaccelerator.ListCustomRoutingEndpointGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingEndpointGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListCustomRoutingEndpointGroupsOutput)
	return ret0, ret1
}

// ListCustomRoutingEndpointGroupsRequest indicates an expected call of ListCustomRoutingEndpointGroupsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingEndpointGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingEndpointGroupsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingEndpointGroupsRequest), arg0)
}

// ListCustomRoutingEndpointGroupsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingEndpointGroupsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingEndpointGroupsInput, arg2 ...request.Option) (*globalaccelerator.ListCustomRoutingEndpointGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingEndpointGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingEndpointGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingEndpointGroupsWithContext indicates an expected call of ListCustomRoutingEndpointGroupsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingEndpointGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingEndpointGroupsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingEndpointGroupsWithContext), varargs...)
}

// ListCustomRoutingListeners mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingListeners(arg0 *globalaccelerator.ListCustomRoutingListenersInput) (*globalaccelerator.ListCustomRoutingListenersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingListeners", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingListeners indicates an expected call of ListCustomRoutingListeners
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingListeners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingListeners", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingListeners), arg0)
}

// ListCustomRoutingListenersPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingListenersPages(arg0 *globalaccelerator.ListCustomRoutingListenersInput, arg1 func(*globalaccelerator.ListCustomRoutingListenersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingListenersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingListenersPages indicates an expected call of ListCustomRoutingListenersPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingListenersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingListenersPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingListenersPages), arg0, arg1)
}

// ListCustomRoutingListenersPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingListenersPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingListenersInput, arg2 func(*globalaccelerator.ListCustomRoutingListenersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingListenersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingListenersPagesWithContext indicates an expected call of ListCustomRoutingListenersPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingListenersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingListenersPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingListenersPagesWithContext), varargs...)
}

// ListCustomRoutingListenersRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingListenersRequest(arg0 *globalaccelerator.ListCustomRoutingListenersInput) (*request.Request, *globalaccelerator.ListCustomRoutingListenersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingListenersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListCustomRoutingListenersOutput)
	return ret0, ret1
}

// ListCustomRoutingListenersRequest indicates an expected call of ListCustomRoutingListenersRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingListenersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingListenersRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingListenersRequest), arg0)
}

// ListCustomRoutingListenersWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingListenersWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingListenersInput, arg2 ...request.Option) (*globalaccelerator.ListCustomRoutingListenersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingListenersWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingListenersWithContext indicates an expected call of ListCustomRoutingListenersWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingListenersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingListenersWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingListenersWithContext), varargs...)
}

// ListCustomRoutingPortMappings mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappings(arg0 *globalaccelerator.ListCustomRoutingPortMappingsInput) (*globalaccelerator.ListCustomRoutingPortMappingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappings", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingPortMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingPortMappings indicates an expected call of ListCustomRoutingPortMappings
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappings", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappings), arg0)
}

// ListCustomRoutingPortMappingsByDestination mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsByDestination(arg0 *globalaccelerator.ListCustomRoutingPortMappingsByDestinationInput) (*globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsByDestination", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingPortMappingsByDestination indicates an expected call of ListCustomRoutingPortMappingsByDestination
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsByDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsByDestination", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsByDestination), arg0)
}

// ListCustomRoutingPortMappingsByDestinationPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsByDestinationPages(arg0 *globalaccelerator.ListCustomRoutingPortMappingsByDestinationInput, arg1 func(*globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsByDestinationPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingPortMappingsByDestinationPages indicates an expected call of ListCustomRoutingPortMappingsByDestinationPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsByDestinationPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsByDestinationPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsByDestinationPages), arg0, arg1)
}

// ListCustomRoutingPortMappingsByDestinationPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsByDestinationPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingPortMappingsByDestinationInput, arg2 func(*globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsByDestinationPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingPortMappingsByDestinationPagesWithContext indicates an expected call of ListCustomRoutingPortMappingsByDestinationPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsByDestinationPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsByDestinationPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsByDestinationPagesWithContext), varargs...)
}

// ListCustomRoutingPortMappingsByDestinationRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsByDestinationRequest(arg0 *globalaccelerator.ListCustomRoutingPortMappingsByDestinationInput) (*request.Request, *globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsByDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput)
	return ret0, ret1
}

// ListCustomRoutingPortMappingsByDestinationRequest indicates an expected call of ListCustomRoutingPortMappingsByDestinationRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsByDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsByDestinationRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsByDestinationRequest), arg0)
}

// ListCustomRoutingPortMappingsByDestinationWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsByDestinationWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingPortMappingsByDestinationInput, arg2 ...request.Option) (*globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsByDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingPortMappingsByDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingPortMappingsByDestinationWithContext indicates an expected call of ListCustomRoutingPortMappingsByDestinationWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsByDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsByDestinationWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsByDestinationWithContext), varargs...)
}

// ListCustomRoutingPortMappingsPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsPages(arg0 *globalaccelerator.ListCustomRoutingPortMappingsInput, arg1 func(*globalaccelerator.ListCustomRoutingPortMappingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingPortMappingsPages indicates an expected call of ListCustomRoutingPortMappingsPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsPages), arg0, arg1)
}

// ListCustomRoutingPortMappingsPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingPortMappingsInput, arg2 func(*globalaccelerator.ListCustomRoutingPortMappingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomRoutingPortMappingsPagesWithContext indicates an expected call of ListCustomRoutingPortMappingsPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsPagesWithContext), varargs...)
}

// ListCustomRoutingPortMappingsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsRequest(arg0 *globalaccelerator.ListCustomRoutingPortMappingsInput) (*request.Request, *globalaccelerator.ListCustomRoutingPortMappingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListCustomRoutingPortMappingsOutput)
	return ret0, ret1
}

// ListCustomRoutingPortMappingsRequest indicates an expected call of ListCustomRoutingPortMappingsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsRequest), arg0)
}

// ListCustomRoutingPortMappingsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListCustomRoutingPortMappingsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListCustomRoutingPortMappingsInput, arg2 ...request.Option) (*globalaccelerator.ListCustomRoutingPortMappingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomRoutingPortMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListCustomRoutingPortMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomRoutingPortMappingsWithContext indicates an expected call of ListCustomRoutingPortMappingsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListCustomRoutingPortMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomRoutingPortMappingsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListCustomRoutingPortMappingsWithContext), varargs...)
}

// ListEndpointGroups mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroups(arg0 *globalaccelerator.ListEndpointGroupsInput) (*globalaccelerator.ListEndpointGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointGroups", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListEndpointGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointGroups indicates an expected call of ListEndpointGroups
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroups", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroups), arg0)
}

// ListEndpointGroupsPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroupsPages(arg0 *globalaccelerator.ListEndpointGroupsInput, arg1 func(*globalaccelerator.ListEndpointGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointGroupsPages indicates an expected call of ListEndpointGroupsPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroupsPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroupsPages), arg0, arg1)
}

// ListEndpointGroupsPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroupsPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListEndpointGroupsInput, arg2 func(*globalaccelerator.ListEndpointGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEndpointGroupsPagesWithContext indicates an expected call of ListEndpointGroupsPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroupsPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroupsPagesWithContext), varargs...)
}

// ListEndpointGroupsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroupsRequest(arg0 *globalaccelerator.ListEndpointGroupsInput) (*request.Request, *globalaccelerator.ListEndpointGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpointGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListEndpointGroupsOutput)
	return ret0, ret1
}

// ListEndpointGroupsRequest indicates an expected call of ListEndpointGroupsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroupsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroupsRequest), arg0)
}

// ListEndpointGroupsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListEndpointGroupsWithContext(arg0 context.Context, arg1 *globalaccelerator.ListEndpointGroupsInput, arg2 ...request.Option) (*globalaccelerator.ListEndpointGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpointGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListEndpointGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpointGroupsWithContext indicates an expected call of ListEndpointGroupsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListEndpointGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpointGroupsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListEndpointGroupsWithContext), varargs...)
}

// ListListeners mocks base method
func (m *MockGlobalAcceleratorAPI) ListListeners(arg0 *globalaccelerator.ListListenersInput) (*globalaccelerator.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListeners", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListeners indicates an expected call of ListListeners
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListeners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListeners", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListeners), arg0)
}

// ListListenersPages mocks base method
func (m *MockGlobalAcceleratorAPI) ListListenersPages(arg0 *globalaccelerator.ListListenersInput, arg1 func(*globalaccelerator.ListListenersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListenersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListListenersPages indicates an expected call of ListListenersPages
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListenersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersPages", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListenersPages), arg0, arg1)
}

// ListListenersPagesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListListenersPagesWithContext(arg0 context.Context, arg1 *globalaccelerator.ListListenersInput, arg2 func(*globalaccelerator.ListListenersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListListenersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListListenersPagesWithContext indicates an expected call of ListListenersPagesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListenersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersPagesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListenersPagesWithContext), varargs...)
}

// ListListenersRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListListenersRequest(arg0 *globalaccelerator.ListListenersInput) (*request.Request, *globalaccelerator.ListListenersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListenersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListListenersOutput)
	return ret0, ret1
}

// ListListenersRequest indicates an expected call of ListListenersRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListenersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListenersRequest), arg0)
}

// ListListenersWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListListenersWithContext(arg0 context.Context, arg1 *globalaccelerator.ListListenersInput, arg2 ...request.Option) (*globalaccelerator.ListListenersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListListenersWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListListenersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListenersWithContext indicates an expected call of ListListenersWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListListenersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListenersWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListListenersWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockGlobalAcceleratorAPI) ListTagsForResource(arg0 *globalaccelerator.ListTagsForResourceInput) (*globalaccelerator.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ListTagsForResourceRequest(arg0 *globalaccelerator.ListTagsForResourceInput) (*request.Request, *globalaccelerator.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *globalaccelerator.ListTagsForResourceInput, arg2 ...request.Option) (*globalaccelerator.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ProvisionByoipCidr mocks base method
func (m *MockGlobalAcceleratorAPI) ProvisionByoipCidr(arg0 *globalaccelerator.ProvisionByoipCidrInput) (*globalaccelerator.ProvisionByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionByoipCidr", arg0)
	ret0, _ := ret[0].(*globalaccelerator.ProvisionByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionByoipCidr indicates an expected call of ProvisionByoipCidr
func (mr *MockGlobalAcceleratorAPIMockRecorder) ProvisionByoipCidr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionByoipCidr", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ProvisionByoipCidr), arg0)
}

// ProvisionByoipCidrRequest mocks base method
func (m *MockGlobalAcceleratorAPI) ProvisionByoipCidrRequest(arg0 *globalaccelerator.ProvisionByoipCidrInput) (*request.Request, *globalaccelerator.ProvisionByoipCidrOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionByoipCidrRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.ProvisionByoipCidrOutput)
	return ret0, ret1
}

// ProvisionByoipCidrRequest indicates an expected call of ProvisionByoipCidrRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) ProvisionByoipCidrRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionByoipCidrRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ProvisionByoipCidrRequest), arg0)
}

// ProvisionByoipCidrWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) ProvisionByoipCidrWithContext(arg0 context.Context, arg1 *globalaccelerator.ProvisionByoipCidrInput, arg2 ...request.Option) (*globalaccelerator.ProvisionByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProvisionByoipCidrWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.ProvisionByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionByoipCidrWithContext indicates an expected call of ProvisionByoipCidrWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) ProvisionByoipCidrWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionByoipCidrWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).ProvisionByoipCidrWithContext), varargs...)
}

// RemoveCustomRoutingEndpoints mocks base method
func (m *MockGlobalAcceleratorAPI) RemoveCustomRoutingEndpoints(arg0 *globalaccelerator.RemoveCustomRoutingEndpointsInput) (*globalaccelerator.RemoveCustomRoutingEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCustomRoutingEndpoints", arg0)
	ret0, _ := ret[0].(*globalaccelerator.RemoveCustomRoutingEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCustomRoutingEndpoints indicates an expected call of RemoveCustomRoutingEndpoints
func (mr *MockGlobalAcceleratorAPIMockRecorder) RemoveCustomRoutingEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCustomRoutingEndpoints", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).RemoveCustomRoutingEndpoints), arg0)
}

// RemoveCustomRoutingEndpointsRequest mocks base method
func (m *MockGlobalAcceleratorAPI) RemoveCustomRoutingEndpointsRequest(arg0 *globalaccelerator.RemoveCustomRoutingEndpointsInput) (*request.Request, *globalaccelerator.RemoveCustomRoutingEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCustomRoutingEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.RemoveCustomRoutingEndpointsOutput)
	return ret0, ret1
}

// RemoveCustomRoutingEndpointsRequest indicates an expected call of RemoveCustomRoutingEndpointsRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) RemoveCustomRoutingEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCustomRoutingEndpointsRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).RemoveCustomRoutingEndpointsRequest), arg0)
}

// RemoveCustomRoutingEndpointsWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) RemoveCustomRoutingEndpointsWithContext(arg0 context.Context, arg1 *globalaccelerator.RemoveCustomRoutingEndpointsInput, arg2 ...request.Option) (*globalaccelerator.RemoveCustomRoutingEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveCustomRoutingEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.RemoveCustomRoutingEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCustomRoutingEndpointsWithContext indicates an expected call of RemoveCustomRoutingEndpointsWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) RemoveCustomRoutingEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCustomRoutingEndpointsWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).RemoveCustomRoutingEndpointsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockGlobalAcceleratorAPI) TagResource(arg0 *globalaccelerator.TagResourceInput) (*globalaccelerator.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*globalaccelerator.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockGlobalAcceleratorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockGlobalAcceleratorAPI) TagResourceRequest(arg0 *globalaccelerator.TagResourceInput) (*request.Request, *globalaccelerator.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) TagResourceWithContext(arg0 context.Context, arg1 *globalaccelerator.TagResourceInput, arg2 ...request.Option) (*globalaccelerator.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockGlobalAcceleratorAPI) UntagResource(arg0 *globalaccelerator.UntagResourceInput) (*globalaccelerator.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockGlobalAcceleratorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UntagResourceRequest(arg0 *globalaccelerator.UntagResourceInput) (*request.Request, *globalaccelerator.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *globalaccelerator.UntagResourceInput, arg2 ...request.Option) (*globalaccelerator.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAccelerator(arg0 *globalaccelerator.UpdateAcceleratorInput) (*globalaccelerator.UpdateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccelerator indicates an expected call of UpdateAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAccelerator), arg0)
}

// UpdateAcceleratorAttributes mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorAttributes(arg0 *globalaccelerator.UpdateAcceleratorAttributesInput) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceleratorAttributes", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceleratorAttributes indicates an expected call of UpdateAcceleratorAttributes
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorAttributes", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorAttributes), arg0)
}

// UpdateAcceleratorAttributesRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorAttributesRequest(arg0 *globalaccelerator.UpdateAcceleratorAttributesInput) (*request.Request, *globalaccelerator.UpdateAcceleratorAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceleratorAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateAcceleratorAttributesOutput)
	return ret0, ret1
}

// UpdateAcceleratorAttributesRequest indicates an expected call of UpdateAcceleratorAttributesRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorAttributesRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorAttributesRequest), arg0)
}

// UpdateAcceleratorAttributesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorAttributesWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateAcceleratorAttributesInput, arg2 ...request.Option) (*globalaccelerator.UpdateAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcceleratorAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceleratorAttributesWithContext indicates an expected call of UpdateAcceleratorAttributesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorAttributesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorAttributesWithContext), varargs...)
}

// UpdateAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorRequest(arg0 *globalaccelerator.UpdateAcceleratorInput) (*request.Request, *globalaccelerator.UpdateAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateAcceleratorOutput)
	return ret0, ret1
}

// UpdateAcceleratorRequest indicates an expected call of UpdateAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorRequest), arg0)
}

// UpdateAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.UpdateAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceleratorWithContext indicates an expected call of UpdateAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateAcceleratorWithContext), varargs...)
}

// UpdateCustomRoutingAccelerator mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingAccelerator(arg0 *globalaccelerator.UpdateCustomRoutingAcceleratorInput) (*globalaccelerator.UpdateCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRoutingAccelerator", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomRoutingAccelerator indicates an expected call of UpdateCustomRoutingAccelerator
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingAccelerator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingAccelerator", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingAccelerator), arg0)
}

// UpdateCustomRoutingAcceleratorAttributes mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingAcceleratorAttributes(arg0 *globalaccelerator.UpdateCustomRoutingAcceleratorAttributesInput) (*globalaccelerator.UpdateCustomRoutingAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRoutingAcceleratorAttributes", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateCustomRoutingAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomRoutingAcceleratorAttributes indicates an expected call of UpdateCustomRoutingAcceleratorAttributes
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingAcceleratorAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingAcceleratorAttributes", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingAcceleratorAttributes), arg0)
}

// UpdateCustomRoutingAcceleratorAttributesRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingAcceleratorAttributesRequest(arg0 *globalaccelerator.UpdateCustomRoutingAcceleratorAttributesInput) (*request.Request, *globalaccelerator.UpdateCustomRoutingAcceleratorAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRoutingAcceleratorAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateCustomRoutingAcceleratorAttributesOutput)
	return ret0, ret1
}

// UpdateCustomRoutingAcceleratorAttributesRequest indicates an expected call of UpdateCustomRoutingAcceleratorAttributesRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingAcceleratorAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingAcceleratorAttributesRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingAcceleratorAttributesRequest), arg0)
}

// UpdateCustomRoutingAcceleratorAttributesWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingAcceleratorAttributesWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateCustomRoutingAcceleratorAttributesInput, arg2 ...request.Option) (*globalaccelerator.UpdateCustomRoutingAcceleratorAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomRoutingAcceleratorAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateCustomRoutingAcceleratorAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomRoutingAcceleratorAttributesWithContext indicates an expected call of UpdateCustomRoutingAcceleratorAttributesWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingAcceleratorAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingAcceleratorAttributesWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingAcceleratorAttributesWithContext), varargs...)
}

// UpdateCustomRoutingAcceleratorRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingAcceleratorRequest(arg0 *globalaccelerator.UpdateCustomRoutingAcceleratorInput) (*request.Request, *globalaccelerator.UpdateCustomRoutingAcceleratorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRoutingAcceleratorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateCustomRoutingAcceleratorOutput)
	return ret0, ret1
}

// UpdateCustomRoutingAcceleratorRequest indicates an expected call of UpdateCustomRoutingAcceleratorRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingAcceleratorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingAcceleratorRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingAcceleratorRequest), arg0)
}

// UpdateCustomRoutingAcceleratorWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingAcceleratorWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateCustomRoutingAcceleratorInput, arg2 ...request.Option) (*globalaccelerator.UpdateCustomRoutingAcceleratorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomRoutingAcceleratorWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateCustomRoutingAcceleratorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomRoutingAcceleratorWithContext indicates an expected call of UpdateCustomRoutingAcceleratorWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingAcceleratorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingAcceleratorWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingAcceleratorWithContext), varargs...)
}

// UpdateCustomRoutingListener mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingListener(arg0 *globalaccelerator.UpdateCustomRoutingListenerInput) (*globalaccelerator.UpdateCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRoutingListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomRoutingListener indicates an expected call of UpdateCustomRoutingListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingListener), arg0)
}

// UpdateCustomRoutingListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingListenerRequest(arg0 *globalaccelerator.UpdateCustomRoutingListenerInput) (*request.Request, *globalaccelerator.UpdateCustomRoutingListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomRoutingListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateCustomRoutingListenerOutput)
	return ret0, ret1
}

// UpdateCustomRoutingListenerRequest indicates an expected call of UpdateCustomRoutingListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingListenerRequest), arg0)
}

// UpdateCustomRoutingListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateCustomRoutingListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateCustomRoutingListenerInput, arg2 ...request.Option) (*globalaccelerator.UpdateCustomRoutingListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomRoutingListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateCustomRoutingListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomRoutingListenerWithContext indicates an expected call of UpdateCustomRoutingListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateCustomRoutingListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomRoutingListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateCustomRoutingListenerWithContext), varargs...)
}

// UpdateEndpointGroup mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateEndpointGroup(arg0 *globalaccelerator.UpdateEndpointGroupInput) (*globalaccelerator.UpdateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointGroup", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointGroup indicates an expected call of UpdateEndpointGroup
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateEndpointGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointGroup", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateEndpointGroup), arg0)
}

// UpdateEndpointGroupRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateEndpointGroupRequest(arg0 *globalaccelerator.UpdateEndpointGroupInput) (*request.Request, *globalaccelerator.UpdateEndpointGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpointGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateEndpointGroupOutput)
	return ret0, ret1
}

// UpdateEndpointGroupRequest indicates an expected call of UpdateEndpointGroupRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateEndpointGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointGroupRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateEndpointGroupRequest), arg0)
}

// UpdateEndpointGroupWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateEndpointGroupWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateEndpointGroupInput, arg2 ...request.Option) (*globalaccelerator.UpdateEndpointGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEndpointGroupWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateEndpointGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpointGroupWithContext indicates an expected call of UpdateEndpointGroupWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateEndpointGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointGroupWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateEndpointGroupWithContext), varargs...)
}

// UpdateListener mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateListener(arg0 *globalaccelerator.UpdateListenerInput) (*globalaccelerator.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListener", arg0)
	ret0, _ := ret[0].(*globalaccelerator.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListener indicates an expected call of UpdateListener
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListener", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateListener), arg0)
}

// UpdateListenerRequest mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateListenerRequest(arg0 *globalaccelerator.UpdateListenerInput) (*request.Request, *globalaccelerator.UpdateListenerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListenerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.UpdateListenerOutput)
	return ret0, ret1
}

// UpdateListenerRequest indicates an expected call of UpdateListenerRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateListenerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateListenerRequest), arg0)
}

// UpdateListenerWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) UpdateListenerWithContext(arg0 context.Context, arg1 *globalaccelerator.UpdateListenerInput, arg2 ...request.Option) (*globalaccelerator.UpdateListenerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateListenerWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.UpdateListenerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListenerWithContext indicates an expected call of UpdateListenerWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) UpdateListenerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListenerWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).UpdateListenerWithContext), varargs...)
}

// WithdrawByoipCidr mocks base method
func (m *MockGlobalAcceleratorAPI) WithdrawByoipCidr(arg0 *globalaccelerator.WithdrawByoipCidrInput) (*globalaccelerator.WithdrawByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawByoipCidr", arg0)
	ret0, _ := ret[0].(*globalaccelerator.WithdrawByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawByoipCidr indicates an expected call of WithdrawByoipCidr
func (mr *MockGlobalAcceleratorAPIMockRecorder) WithdrawByoipCidr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawByoipCidr", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).WithdrawByoipCidr), arg0)
}

// WithdrawByoipCidrRequest mocks base method
func (m *MockGlobalAcceleratorAPI) WithdrawByoipCidrRequest(arg0 *globalaccelerator.WithdrawByoipCidrInput) (*request.Request, *globalaccelerator.WithdrawByoipCidrOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawByoipCidrRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*globalaccelerator.WithdrawByoipCidrOutput)
	return ret0, ret1
}

// WithdrawByoipCidrRequest indicates an expected call of WithdrawByoipCidrRequest
func (mr *MockGlobalAcceleratorAPIMockRecorder) WithdrawByoipCidrRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawByoipCidrRequest", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).WithdrawByoipCidrRequest), arg0)
}

// WithdrawByoipCidrWithContext mocks base method
func (m *MockGlobalAcceleratorAPI) WithdrawByoipCidrWithContext(arg0 context.Context, arg1 *globalaccelerator.WithdrawByoipCidrInput, arg2 ...request.Option) (*globalaccelerator.WithdrawByoipCidrOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithdrawByoipCidrWithContext", varargs...)
	ret0, _ := ret[0].(*globalaccelerator.WithdrawByoipCidrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawByoipCidrWithContext indicates an expected call of WithdrawByoipCidrWithContext
func (mr *MockGlobalAcceleratorAPIMockRecorder) WithdrawByoipCidrWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawByoipCidrWithContext", reflect.TypeOf((*MockGlobalAcceleratorAPI)(nil).WithdrawByoipCidrWithContext), varargs...)
}

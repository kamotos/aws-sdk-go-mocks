// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/workmail/workmailiface (interfaces: WorkMailAPI)

// Package workmailmock is a generated GoMock package.
package workmailmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	workmail "github.com/aws/aws-sdk-go/service/workmail"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWorkMailAPI is a mock of WorkMailAPI interface
type MockWorkMailAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWorkMailAPIMockRecorder
}

// MockWorkMailAPIMockRecorder is the mock recorder for MockWorkMailAPI
type MockWorkMailAPIMockRecorder struct {
	mock *MockWorkMailAPI
}

// NewMockWorkMailAPI creates a new mock instance
func NewMockWorkMailAPI(ctrl *gomock.Controller) *MockWorkMailAPI {
	mock := &MockWorkMailAPI{ctrl: ctrl}
	mock.recorder = &MockWorkMailAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkMailAPI) EXPECT() *MockWorkMailAPIMockRecorder {
	return m.recorder
}

// AssociateDelegateToResource mocks base method
func (m *MockWorkMailAPI) AssociateDelegateToResource(arg0 *workmail.AssociateDelegateToResourceInput) (*workmail.AssociateDelegateToResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateDelegateToResource", arg0)
	ret0, _ := ret[0].(*workmail.AssociateDelegateToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateDelegateToResource indicates an expected call of AssociateDelegateToResource
func (mr *MockWorkMailAPIMockRecorder) AssociateDelegateToResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateDelegateToResource", reflect.TypeOf((*MockWorkMailAPI)(nil).AssociateDelegateToResource), arg0)
}

// AssociateDelegateToResourceRequest mocks base method
func (m *MockWorkMailAPI) AssociateDelegateToResourceRequest(arg0 *workmail.AssociateDelegateToResourceInput) (*request.Request, *workmail.AssociateDelegateToResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateDelegateToResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.AssociateDelegateToResourceOutput)
	return ret0, ret1
}

// AssociateDelegateToResourceRequest indicates an expected call of AssociateDelegateToResourceRequest
func (mr *MockWorkMailAPIMockRecorder) AssociateDelegateToResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateDelegateToResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).AssociateDelegateToResourceRequest), arg0)
}

// AssociateDelegateToResourceWithContext mocks base method
func (m *MockWorkMailAPI) AssociateDelegateToResourceWithContext(arg0 context.Context, arg1 *workmail.AssociateDelegateToResourceInput, arg2 ...request.Option) (*workmail.AssociateDelegateToResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateDelegateToResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.AssociateDelegateToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateDelegateToResourceWithContext indicates an expected call of AssociateDelegateToResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) AssociateDelegateToResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateDelegateToResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).AssociateDelegateToResourceWithContext), varargs...)
}

// AssociateMemberToGroup mocks base method
func (m *MockWorkMailAPI) AssociateMemberToGroup(arg0 *workmail.AssociateMemberToGroupInput) (*workmail.AssociateMemberToGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToGroup", arg0)
	ret0, _ := ret[0].(*workmail.AssociateMemberToGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToGroup indicates an expected call of AssociateMemberToGroup
func (mr *MockWorkMailAPIMockRecorder) AssociateMemberToGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToGroup", reflect.TypeOf((*MockWorkMailAPI)(nil).AssociateMemberToGroup), arg0)
}

// AssociateMemberToGroupRequest mocks base method
func (m *MockWorkMailAPI) AssociateMemberToGroupRequest(arg0 *workmail.AssociateMemberToGroupInput) (*request.Request, *workmail.AssociateMemberToGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberToGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.AssociateMemberToGroupOutput)
	return ret0, ret1
}

// AssociateMemberToGroupRequest indicates an expected call of AssociateMemberToGroupRequest
func (mr *MockWorkMailAPIMockRecorder) AssociateMemberToGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToGroupRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).AssociateMemberToGroupRequest), arg0)
}

// AssociateMemberToGroupWithContext mocks base method
func (m *MockWorkMailAPI) AssociateMemberToGroupWithContext(arg0 context.Context, arg1 *workmail.AssociateMemberToGroupInput, arg2 ...request.Option) (*workmail.AssociateMemberToGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMemberToGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.AssociateMemberToGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberToGroupWithContext indicates an expected call of AssociateMemberToGroupWithContext
func (mr *MockWorkMailAPIMockRecorder) AssociateMemberToGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberToGroupWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).AssociateMemberToGroupWithContext), varargs...)
}

// CancelMailboxExportJob mocks base method
func (m *MockWorkMailAPI) CancelMailboxExportJob(arg0 *workmail.CancelMailboxExportJobInput) (*workmail.CancelMailboxExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMailboxExportJob", arg0)
	ret0, _ := ret[0].(*workmail.CancelMailboxExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMailboxExportJob indicates an expected call of CancelMailboxExportJob
func (mr *MockWorkMailAPIMockRecorder) CancelMailboxExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMailboxExportJob", reflect.TypeOf((*MockWorkMailAPI)(nil).CancelMailboxExportJob), arg0)
}

// CancelMailboxExportJobRequest mocks base method
func (m *MockWorkMailAPI) CancelMailboxExportJobRequest(arg0 *workmail.CancelMailboxExportJobInput) (*request.Request, *workmail.CancelMailboxExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMailboxExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.CancelMailboxExportJobOutput)
	return ret0, ret1
}

// CancelMailboxExportJobRequest indicates an expected call of CancelMailboxExportJobRequest
func (mr *MockWorkMailAPIMockRecorder) CancelMailboxExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMailboxExportJobRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).CancelMailboxExportJobRequest), arg0)
}

// CancelMailboxExportJobWithContext mocks base method
func (m *MockWorkMailAPI) CancelMailboxExportJobWithContext(arg0 context.Context, arg1 *workmail.CancelMailboxExportJobInput, arg2 ...request.Option) (*workmail.CancelMailboxExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMailboxExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.CancelMailboxExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMailboxExportJobWithContext indicates an expected call of CancelMailboxExportJobWithContext
func (mr *MockWorkMailAPIMockRecorder) CancelMailboxExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMailboxExportJobWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).CancelMailboxExportJobWithContext), varargs...)
}

// CreateAlias mocks base method
func (m *MockWorkMailAPI) CreateAlias(arg0 *workmail.CreateAliasInput) (*workmail.CreateAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlias", arg0)
	ret0, _ := ret[0].(*workmail.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias
func (mr *MockWorkMailAPIMockRecorder) CreateAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateAlias), arg0)
}

// CreateAliasRequest mocks base method
func (m *MockWorkMailAPI) CreateAliasRequest(arg0 *workmail.CreateAliasInput) (*request.Request, *workmail.CreateAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.CreateAliasOutput)
	return ret0, ret1
}

// CreateAliasRequest indicates an expected call of CreateAliasRequest
func (mr *MockWorkMailAPIMockRecorder) CreateAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateAliasRequest), arg0)
}

// CreateAliasWithContext mocks base method
func (m *MockWorkMailAPI) CreateAliasWithContext(arg0 context.Context, arg1 *workmail.CreateAliasInput, arg2 ...request.Option) (*workmail.CreateAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAliasWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAliasWithContext indicates an expected call of CreateAliasWithContext
func (mr *MockWorkMailAPIMockRecorder) CreateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateAliasWithContext), varargs...)
}

// CreateGroup mocks base method
func (m *MockWorkMailAPI) CreateGroup(arg0 *workmail.CreateGroupInput) (*workmail.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(*workmail.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockWorkMailAPIMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateGroup), arg0)
}

// CreateGroupRequest mocks base method
func (m *MockWorkMailAPI) CreateGroupRequest(arg0 *workmail.CreateGroupInput) (*request.Request, *workmail.CreateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.CreateGroupOutput)
	return ret0, ret1
}

// CreateGroupRequest indicates an expected call of CreateGroupRequest
func (mr *MockWorkMailAPIMockRecorder) CreateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateGroupRequest), arg0)
}

// CreateGroupWithContext mocks base method
func (m *MockWorkMailAPI) CreateGroupWithContext(arg0 context.Context, arg1 *workmail.CreateGroupInput, arg2 ...request.Option) (*workmail.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupWithContext indicates an expected call of CreateGroupWithContext
func (mr *MockWorkMailAPIMockRecorder) CreateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateGroupWithContext), varargs...)
}

// CreateOrganization mocks base method
func (m *MockWorkMailAPI) CreateOrganization(arg0 *workmail.CreateOrganizationInput) (*workmail.CreateOrganizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0)
	ret0, _ := ret[0].(*workmail.CreateOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization
func (mr *MockWorkMailAPIMockRecorder) CreateOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateOrganization), arg0)
}

// CreateOrganizationRequest mocks base method
func (m *MockWorkMailAPI) CreateOrganizationRequest(arg0 *workmail.CreateOrganizationInput) (*request.Request, *workmail.CreateOrganizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.CreateOrganizationOutput)
	return ret0, ret1
}

// CreateOrganizationRequest indicates an expected call of CreateOrganizationRequest
func (mr *MockWorkMailAPIMockRecorder) CreateOrganizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateOrganizationRequest), arg0)
}

// CreateOrganizationWithContext mocks base method
func (m *MockWorkMailAPI) CreateOrganizationWithContext(arg0 context.Context, arg1 *workmail.CreateOrganizationInput, arg2 ...request.Option) (*workmail.CreateOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganizationWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.CreateOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationWithContext indicates an expected call of CreateOrganizationWithContext
func (mr *MockWorkMailAPIMockRecorder) CreateOrganizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateOrganizationWithContext), varargs...)
}

// CreateResource mocks base method
func (m *MockWorkMailAPI) CreateResource(arg0 *workmail.CreateResourceInput) (*workmail.CreateResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", arg0)
	ret0, _ := ret[0].(*workmail.CreateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource
func (mr *MockWorkMailAPIMockRecorder) CreateResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateResource), arg0)
}

// CreateResourceRequest mocks base method
func (m *MockWorkMailAPI) CreateResourceRequest(arg0 *workmail.CreateResourceInput) (*request.Request, *workmail.CreateResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.CreateResourceOutput)
	return ret0, ret1
}

// CreateResourceRequest indicates an expected call of CreateResourceRequest
func (mr *MockWorkMailAPIMockRecorder) CreateResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateResourceRequest), arg0)
}

// CreateResourceWithContext mocks base method
func (m *MockWorkMailAPI) CreateResourceWithContext(arg0 context.Context, arg1 *workmail.CreateResourceInput, arg2 ...request.Option) (*workmail.CreateResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.CreateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceWithContext indicates an expected call of CreateResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) CreateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateResourceWithContext), varargs...)
}

// CreateUser mocks base method
func (m *MockWorkMailAPI) CreateUser(arg0 *workmail.CreateUserInput) (*workmail.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*workmail.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockWorkMailAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method
func (m *MockWorkMailAPI) CreateUserRequest(arg0 *workmail.CreateUserInput) (*request.Request, *workmail.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest
func (mr *MockWorkMailAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method
func (m *MockWorkMailAPI) CreateUserWithContext(arg0 context.Context, arg1 *workmail.CreateUserInput, arg2 ...request.Option) (*workmail.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext
func (mr *MockWorkMailAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).CreateUserWithContext), varargs...)
}

// DeleteAccessControlRule mocks base method
func (m *MockWorkMailAPI) DeleteAccessControlRule(arg0 *workmail.DeleteAccessControlRuleInput) (*workmail.DeleteAccessControlRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessControlRule", arg0)
	ret0, _ := ret[0].(*workmail.DeleteAccessControlRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessControlRule indicates an expected call of DeleteAccessControlRule
func (mr *MockWorkMailAPIMockRecorder) DeleteAccessControlRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessControlRule", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteAccessControlRule), arg0)
}

// DeleteAccessControlRuleRequest mocks base method
func (m *MockWorkMailAPI) DeleteAccessControlRuleRequest(arg0 *workmail.DeleteAccessControlRuleInput) (*request.Request, *workmail.DeleteAccessControlRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessControlRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteAccessControlRuleOutput)
	return ret0, ret1
}

// DeleteAccessControlRuleRequest indicates an expected call of DeleteAccessControlRuleRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteAccessControlRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessControlRuleRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteAccessControlRuleRequest), arg0)
}

// DeleteAccessControlRuleWithContext mocks base method
func (m *MockWorkMailAPI) DeleteAccessControlRuleWithContext(arg0 context.Context, arg1 *workmail.DeleteAccessControlRuleInput, arg2 ...request.Option) (*workmail.DeleteAccessControlRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessControlRuleWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteAccessControlRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessControlRuleWithContext indicates an expected call of DeleteAccessControlRuleWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteAccessControlRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessControlRuleWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteAccessControlRuleWithContext), varargs...)
}

// DeleteAlias mocks base method
func (m *MockWorkMailAPI) DeleteAlias(arg0 *workmail.DeleteAliasInput) (*workmail.DeleteAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlias", arg0)
	ret0, _ := ret[0].(*workmail.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlias indicates an expected call of DeleteAlias
func (mr *MockWorkMailAPIMockRecorder) DeleteAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteAlias), arg0)
}

// DeleteAliasRequest mocks base method
func (m *MockWorkMailAPI) DeleteAliasRequest(arg0 *workmail.DeleteAliasInput) (*request.Request, *workmail.DeleteAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteAliasOutput)
	return ret0, ret1
}

// DeleteAliasRequest indicates an expected call of DeleteAliasRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteAliasRequest), arg0)
}

// DeleteAliasWithContext mocks base method
func (m *MockWorkMailAPI) DeleteAliasWithContext(arg0 context.Context, arg1 *workmail.DeleteAliasInput, arg2 ...request.Option) (*workmail.DeleteAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAliasWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAliasWithContext indicates an expected call of DeleteAliasWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteAliasWithContext), varargs...)
}

// DeleteGroup mocks base method
func (m *MockWorkMailAPI) DeleteGroup(arg0 *workmail.DeleteGroupInput) (*workmail.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(*workmail.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockWorkMailAPIMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteGroup), arg0)
}

// DeleteGroupRequest mocks base method
func (m *MockWorkMailAPI) DeleteGroupRequest(arg0 *workmail.DeleteGroupInput) (*request.Request, *workmail.DeleteGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteGroupOutput)
	return ret0, ret1
}

// DeleteGroupRequest indicates an expected call of DeleteGroupRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteGroupRequest), arg0)
}

// DeleteGroupWithContext mocks base method
func (m *MockWorkMailAPI) DeleteGroupWithContext(arg0 context.Context, arg1 *workmail.DeleteGroupInput, arg2 ...request.Option) (*workmail.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWithContext indicates an expected call of DeleteGroupWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteGroupWithContext), varargs...)
}

// DeleteMailboxPermissions mocks base method
func (m *MockWorkMailAPI) DeleteMailboxPermissions(arg0 *workmail.DeleteMailboxPermissionsInput) (*workmail.DeleteMailboxPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMailboxPermissions", arg0)
	ret0, _ := ret[0].(*workmail.DeleteMailboxPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMailboxPermissions indicates an expected call of DeleteMailboxPermissions
func (mr *MockWorkMailAPIMockRecorder) DeleteMailboxPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMailboxPermissions", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteMailboxPermissions), arg0)
}

// DeleteMailboxPermissionsRequest mocks base method
func (m *MockWorkMailAPI) DeleteMailboxPermissionsRequest(arg0 *workmail.DeleteMailboxPermissionsInput) (*request.Request, *workmail.DeleteMailboxPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMailboxPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteMailboxPermissionsOutput)
	return ret0, ret1
}

// DeleteMailboxPermissionsRequest indicates an expected call of DeleteMailboxPermissionsRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteMailboxPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMailboxPermissionsRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteMailboxPermissionsRequest), arg0)
}

// DeleteMailboxPermissionsWithContext mocks base method
func (m *MockWorkMailAPI) DeleteMailboxPermissionsWithContext(arg0 context.Context, arg1 *workmail.DeleteMailboxPermissionsInput, arg2 ...request.Option) (*workmail.DeleteMailboxPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMailboxPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteMailboxPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMailboxPermissionsWithContext indicates an expected call of DeleteMailboxPermissionsWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteMailboxPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMailboxPermissionsWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteMailboxPermissionsWithContext), varargs...)
}

// DeleteOrganization mocks base method
func (m *MockWorkMailAPI) DeleteOrganization(arg0 *workmail.DeleteOrganizationInput) (*workmail.DeleteOrganizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0)
	ret0, _ := ret[0].(*workmail.DeleteOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization
func (mr *MockWorkMailAPIMockRecorder) DeleteOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteOrganization), arg0)
}

// DeleteOrganizationRequest mocks base method
func (m *MockWorkMailAPI) DeleteOrganizationRequest(arg0 *workmail.DeleteOrganizationInput) (*request.Request, *workmail.DeleteOrganizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteOrganizationOutput)
	return ret0, ret1
}

// DeleteOrganizationRequest indicates an expected call of DeleteOrganizationRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteOrganizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteOrganizationRequest), arg0)
}

// DeleteOrganizationWithContext mocks base method
func (m *MockWorkMailAPI) DeleteOrganizationWithContext(arg0 context.Context, arg1 *workmail.DeleteOrganizationInput, arg2 ...request.Option) (*workmail.DeleteOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganizationWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationWithContext indicates an expected call of DeleteOrganizationWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteOrganizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteOrganizationWithContext), varargs...)
}

// DeleteResource mocks base method
func (m *MockWorkMailAPI) DeleteResource(arg0 *workmail.DeleteResourceInput) (*workmail.DeleteResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0)
	ret0, _ := ret[0].(*workmail.DeleteResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource
func (mr *MockWorkMailAPIMockRecorder) DeleteResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteResource), arg0)
}

// DeleteResourceRequest mocks base method
func (m *MockWorkMailAPI) DeleteResourceRequest(arg0 *workmail.DeleteResourceInput) (*request.Request, *workmail.DeleteResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteResourceOutput)
	return ret0, ret1
}

// DeleteResourceRequest indicates an expected call of DeleteResourceRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteResourceRequest), arg0)
}

// DeleteResourceWithContext mocks base method
func (m *MockWorkMailAPI) DeleteResourceWithContext(arg0 context.Context, arg1 *workmail.DeleteResourceInput, arg2 ...request.Option) (*workmail.DeleteResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceWithContext indicates an expected call of DeleteResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteResourceWithContext), varargs...)
}

// DeleteRetentionPolicy mocks base method
func (m *MockWorkMailAPI) DeleteRetentionPolicy(arg0 *workmail.DeleteRetentionPolicyInput) (*workmail.DeleteRetentionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetentionPolicy", arg0)
	ret0, _ := ret[0].(*workmail.DeleteRetentionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetentionPolicy indicates an expected call of DeleteRetentionPolicy
func (mr *MockWorkMailAPIMockRecorder) DeleteRetentionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionPolicy", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteRetentionPolicy), arg0)
}

// DeleteRetentionPolicyRequest mocks base method
func (m *MockWorkMailAPI) DeleteRetentionPolicyRequest(arg0 *workmail.DeleteRetentionPolicyInput) (*request.Request, *workmail.DeleteRetentionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetentionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteRetentionPolicyOutput)
	return ret0, ret1
}

// DeleteRetentionPolicyRequest indicates an expected call of DeleteRetentionPolicyRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteRetentionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionPolicyRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteRetentionPolicyRequest), arg0)
}

// DeleteRetentionPolicyWithContext mocks base method
func (m *MockWorkMailAPI) DeleteRetentionPolicyWithContext(arg0 context.Context, arg1 *workmail.DeleteRetentionPolicyInput, arg2 ...request.Option) (*workmail.DeleteRetentionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRetentionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteRetentionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetentionPolicyWithContext indicates an expected call of DeleteRetentionPolicyWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteRetentionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionPolicyWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteRetentionPolicyWithContext), varargs...)
}

// DeleteUser mocks base method
func (m *MockWorkMailAPI) DeleteUser(arg0 *workmail.DeleteUserInput) (*workmail.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*workmail.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockWorkMailAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteUser), arg0)
}

// DeleteUserRequest mocks base method
func (m *MockWorkMailAPI) DeleteUserRequest(arg0 *workmail.DeleteUserInput) (*request.Request, *workmail.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest
func (mr *MockWorkMailAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method
func (m *MockWorkMailAPI) DeleteUserWithContext(arg0 context.Context, arg1 *workmail.DeleteUserInput, arg2 ...request.Option) (*workmail.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext
func (mr *MockWorkMailAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeleteUserWithContext), varargs...)
}

// DeregisterFromWorkMail mocks base method
func (m *MockWorkMailAPI) DeregisterFromWorkMail(arg0 *workmail.DeregisterFromWorkMailInput) (*workmail.DeregisterFromWorkMailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterFromWorkMail", arg0)
	ret0, _ := ret[0].(*workmail.DeregisterFromWorkMailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterFromWorkMail indicates an expected call of DeregisterFromWorkMail
func (mr *MockWorkMailAPIMockRecorder) DeregisterFromWorkMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterFromWorkMail", reflect.TypeOf((*MockWorkMailAPI)(nil).DeregisterFromWorkMail), arg0)
}

// DeregisterFromWorkMailRequest mocks base method
func (m *MockWorkMailAPI) DeregisterFromWorkMailRequest(arg0 *workmail.DeregisterFromWorkMailInput) (*request.Request, *workmail.DeregisterFromWorkMailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterFromWorkMailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DeregisterFromWorkMailOutput)
	return ret0, ret1
}

// DeregisterFromWorkMailRequest indicates an expected call of DeregisterFromWorkMailRequest
func (mr *MockWorkMailAPIMockRecorder) DeregisterFromWorkMailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterFromWorkMailRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DeregisterFromWorkMailRequest), arg0)
}

// DeregisterFromWorkMailWithContext mocks base method
func (m *MockWorkMailAPI) DeregisterFromWorkMailWithContext(arg0 context.Context, arg1 *workmail.DeregisterFromWorkMailInput, arg2 ...request.Option) (*workmail.DeregisterFromWorkMailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterFromWorkMailWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DeregisterFromWorkMailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterFromWorkMailWithContext indicates an expected call of DeregisterFromWorkMailWithContext
func (mr *MockWorkMailAPIMockRecorder) DeregisterFromWorkMailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterFromWorkMailWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DeregisterFromWorkMailWithContext), varargs...)
}

// DescribeGroup mocks base method
func (m *MockWorkMailAPI) DescribeGroup(arg0 *workmail.DescribeGroupInput) (*workmail.DescribeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGroup", arg0)
	ret0, _ := ret[0].(*workmail.DescribeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroup indicates an expected call of DescribeGroup
func (mr *MockWorkMailAPIMockRecorder) DescribeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroup", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeGroup), arg0)
}

// DescribeGroupRequest mocks base method
func (m *MockWorkMailAPI) DescribeGroupRequest(arg0 *workmail.DescribeGroupInput) (*request.Request, *workmail.DescribeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DescribeGroupOutput)
	return ret0, ret1
}

// DescribeGroupRequest indicates an expected call of DescribeGroupRequest
func (mr *MockWorkMailAPIMockRecorder) DescribeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeGroupRequest), arg0)
}

// DescribeGroupWithContext mocks base method
func (m *MockWorkMailAPI) DescribeGroupWithContext(arg0 context.Context, arg1 *workmail.DescribeGroupInput, arg2 ...request.Option) (*workmail.DescribeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DescribeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGroupWithContext indicates an expected call of DescribeGroupWithContext
func (mr *MockWorkMailAPIMockRecorder) DescribeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGroupWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeGroupWithContext), varargs...)
}

// DescribeMailboxExportJob mocks base method
func (m *MockWorkMailAPI) DescribeMailboxExportJob(arg0 *workmail.DescribeMailboxExportJobInput) (*workmail.DescribeMailboxExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMailboxExportJob", arg0)
	ret0, _ := ret[0].(*workmail.DescribeMailboxExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMailboxExportJob indicates an expected call of DescribeMailboxExportJob
func (mr *MockWorkMailAPIMockRecorder) DescribeMailboxExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMailboxExportJob", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeMailboxExportJob), arg0)
}

// DescribeMailboxExportJobRequest mocks base method
func (m *MockWorkMailAPI) DescribeMailboxExportJobRequest(arg0 *workmail.DescribeMailboxExportJobInput) (*request.Request, *workmail.DescribeMailboxExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMailboxExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DescribeMailboxExportJobOutput)
	return ret0, ret1
}

// DescribeMailboxExportJobRequest indicates an expected call of DescribeMailboxExportJobRequest
func (mr *MockWorkMailAPIMockRecorder) DescribeMailboxExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMailboxExportJobRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeMailboxExportJobRequest), arg0)
}

// DescribeMailboxExportJobWithContext mocks base method
func (m *MockWorkMailAPI) DescribeMailboxExportJobWithContext(arg0 context.Context, arg1 *workmail.DescribeMailboxExportJobInput, arg2 ...request.Option) (*workmail.DescribeMailboxExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMailboxExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DescribeMailboxExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMailboxExportJobWithContext indicates an expected call of DescribeMailboxExportJobWithContext
func (mr *MockWorkMailAPIMockRecorder) DescribeMailboxExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMailboxExportJobWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeMailboxExportJobWithContext), varargs...)
}

// DescribeOrganization mocks base method
func (m *MockWorkMailAPI) DescribeOrganization(arg0 *workmail.DescribeOrganizationInput) (*workmail.DescribeOrganizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganization", arg0)
	ret0, _ := ret[0].(*workmail.DescribeOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganization indicates an expected call of DescribeOrganization
func (mr *MockWorkMailAPIMockRecorder) DescribeOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganization", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeOrganization), arg0)
}

// DescribeOrganizationRequest mocks base method
func (m *MockWorkMailAPI) DescribeOrganizationRequest(arg0 *workmail.DescribeOrganizationInput) (*request.Request, *workmail.DescribeOrganizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DescribeOrganizationOutput)
	return ret0, ret1
}

// DescribeOrganizationRequest indicates an expected call of DescribeOrganizationRequest
func (mr *MockWorkMailAPIMockRecorder) DescribeOrganizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeOrganizationRequest), arg0)
}

// DescribeOrganizationWithContext mocks base method
func (m *MockWorkMailAPI) DescribeOrganizationWithContext(arg0 context.Context, arg1 *workmail.DescribeOrganizationInput, arg2 ...request.Option) (*workmail.DescribeOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DescribeOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationWithContext indicates an expected call of DescribeOrganizationWithContext
func (mr *MockWorkMailAPIMockRecorder) DescribeOrganizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeOrganizationWithContext), varargs...)
}

// DescribeResource mocks base method
func (m *MockWorkMailAPI) DescribeResource(arg0 *workmail.DescribeResourceInput) (*workmail.DescribeResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResource", arg0)
	ret0, _ := ret[0].(*workmail.DescribeResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResource indicates an expected call of DescribeResource
func (mr *MockWorkMailAPIMockRecorder) DescribeResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResource", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeResource), arg0)
}

// DescribeResourceRequest mocks base method
func (m *MockWorkMailAPI) DescribeResourceRequest(arg0 *workmail.DescribeResourceInput) (*request.Request, *workmail.DescribeResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DescribeResourceOutput)
	return ret0, ret1
}

// DescribeResourceRequest indicates an expected call of DescribeResourceRequest
func (mr *MockWorkMailAPIMockRecorder) DescribeResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeResourceRequest), arg0)
}

// DescribeResourceWithContext mocks base method
func (m *MockWorkMailAPI) DescribeResourceWithContext(arg0 context.Context, arg1 *workmail.DescribeResourceInput, arg2 ...request.Option) (*workmail.DescribeResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DescribeResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceWithContext indicates an expected call of DescribeResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) DescribeResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeResourceWithContext), varargs...)
}

// DescribeUser mocks base method
func (m *MockWorkMailAPI) DescribeUser(arg0 *workmail.DescribeUserInput) (*workmail.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUser", arg0)
	ret0, _ := ret[0].(*workmail.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUser indicates an expected call of DescribeUser
func (mr *MockWorkMailAPIMockRecorder) DescribeUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUser", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeUser), arg0)
}

// DescribeUserRequest mocks base method
func (m *MockWorkMailAPI) DescribeUserRequest(arg0 *workmail.DescribeUserInput) (*request.Request, *workmail.DescribeUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DescribeUserOutput)
	return ret0, ret1
}

// DescribeUserRequest indicates an expected call of DescribeUserRequest
func (mr *MockWorkMailAPIMockRecorder) DescribeUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeUserRequest), arg0)
}

// DescribeUserWithContext mocks base method
func (m *MockWorkMailAPI) DescribeUserWithContext(arg0 context.Context, arg1 *workmail.DescribeUserInput, arg2 ...request.Option) (*workmail.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserWithContext indicates an expected call of DescribeUserWithContext
func (mr *MockWorkMailAPIMockRecorder) DescribeUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DescribeUserWithContext), varargs...)
}

// DisassociateDelegateFromResource mocks base method
func (m *MockWorkMailAPI) DisassociateDelegateFromResource(arg0 *workmail.DisassociateDelegateFromResourceInput) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateDelegateFromResource", arg0)
	ret0, _ := ret[0].(*workmail.DisassociateDelegateFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateDelegateFromResource indicates an expected call of DisassociateDelegateFromResource
func (mr *MockWorkMailAPIMockRecorder) DisassociateDelegateFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateDelegateFromResource", reflect.TypeOf((*MockWorkMailAPI)(nil).DisassociateDelegateFromResource), arg0)
}

// DisassociateDelegateFromResourceRequest mocks base method
func (m *MockWorkMailAPI) DisassociateDelegateFromResourceRequest(arg0 *workmail.DisassociateDelegateFromResourceInput) (*request.Request, *workmail.DisassociateDelegateFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateDelegateFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DisassociateDelegateFromResourceOutput)
	return ret0, ret1
}

// DisassociateDelegateFromResourceRequest indicates an expected call of DisassociateDelegateFromResourceRequest
func (mr *MockWorkMailAPIMockRecorder) DisassociateDelegateFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateDelegateFromResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DisassociateDelegateFromResourceRequest), arg0)
}

// DisassociateDelegateFromResourceWithContext mocks base method
func (m *MockWorkMailAPI) DisassociateDelegateFromResourceWithContext(arg0 context.Context, arg1 *workmail.DisassociateDelegateFromResourceInput, arg2 ...request.Option) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateDelegateFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DisassociateDelegateFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateDelegateFromResourceWithContext indicates an expected call of DisassociateDelegateFromResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) DisassociateDelegateFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateDelegateFromResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DisassociateDelegateFromResourceWithContext), varargs...)
}

// DisassociateMemberFromGroup mocks base method
func (m *MockWorkMailAPI) DisassociateMemberFromGroup(arg0 *workmail.DisassociateMemberFromGroupInput) (*workmail.DisassociateMemberFromGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromGroup", arg0)
	ret0, _ := ret[0].(*workmail.DisassociateMemberFromGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromGroup indicates an expected call of DisassociateMemberFromGroup
func (mr *MockWorkMailAPIMockRecorder) DisassociateMemberFromGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromGroup", reflect.TypeOf((*MockWorkMailAPI)(nil).DisassociateMemberFromGroup), arg0)
}

// DisassociateMemberFromGroupRequest mocks base method
func (m *MockWorkMailAPI) DisassociateMemberFromGroupRequest(arg0 *workmail.DisassociateMemberFromGroupInput) (*request.Request, *workmail.DisassociateMemberFromGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberFromGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.DisassociateMemberFromGroupOutput)
	return ret0, ret1
}

// DisassociateMemberFromGroupRequest indicates an expected call of DisassociateMemberFromGroupRequest
func (mr *MockWorkMailAPIMockRecorder) DisassociateMemberFromGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromGroupRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).DisassociateMemberFromGroupRequest), arg0)
}

// DisassociateMemberFromGroupWithContext mocks base method
func (m *MockWorkMailAPI) DisassociateMemberFromGroupWithContext(arg0 context.Context, arg1 *workmail.DisassociateMemberFromGroupInput, arg2 ...request.Option) (*workmail.DisassociateMemberFromGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMemberFromGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.DisassociateMemberFromGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberFromGroupWithContext indicates an expected call of DisassociateMemberFromGroupWithContext
func (mr *MockWorkMailAPIMockRecorder) DisassociateMemberFromGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberFromGroupWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).DisassociateMemberFromGroupWithContext), varargs...)
}

// GetAccessControlEffect mocks base method
func (m *MockWorkMailAPI) GetAccessControlEffect(arg0 *workmail.GetAccessControlEffectInput) (*workmail.GetAccessControlEffectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessControlEffect", arg0)
	ret0, _ := ret[0].(*workmail.GetAccessControlEffectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessControlEffect indicates an expected call of GetAccessControlEffect
func (mr *MockWorkMailAPIMockRecorder) GetAccessControlEffect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControlEffect", reflect.TypeOf((*MockWorkMailAPI)(nil).GetAccessControlEffect), arg0)
}

// GetAccessControlEffectRequest mocks base method
func (m *MockWorkMailAPI) GetAccessControlEffectRequest(arg0 *workmail.GetAccessControlEffectInput) (*request.Request, *workmail.GetAccessControlEffectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessControlEffectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.GetAccessControlEffectOutput)
	return ret0, ret1
}

// GetAccessControlEffectRequest indicates an expected call of GetAccessControlEffectRequest
func (mr *MockWorkMailAPIMockRecorder) GetAccessControlEffectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControlEffectRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).GetAccessControlEffectRequest), arg0)
}

// GetAccessControlEffectWithContext mocks base method
func (m *MockWorkMailAPI) GetAccessControlEffectWithContext(arg0 context.Context, arg1 *workmail.GetAccessControlEffectInput, arg2 ...request.Option) (*workmail.GetAccessControlEffectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccessControlEffectWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.GetAccessControlEffectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessControlEffectWithContext indicates an expected call of GetAccessControlEffectWithContext
func (mr *MockWorkMailAPIMockRecorder) GetAccessControlEffectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControlEffectWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).GetAccessControlEffectWithContext), varargs...)
}

// GetDefaultRetentionPolicy mocks base method
func (m *MockWorkMailAPI) GetDefaultRetentionPolicy(arg0 *workmail.GetDefaultRetentionPolicyInput) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultRetentionPolicy", arg0)
	ret0, _ := ret[0].(*workmail.GetDefaultRetentionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultRetentionPolicy indicates an expected call of GetDefaultRetentionPolicy
func (mr *MockWorkMailAPIMockRecorder) GetDefaultRetentionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultRetentionPolicy", reflect.TypeOf((*MockWorkMailAPI)(nil).GetDefaultRetentionPolicy), arg0)
}

// GetDefaultRetentionPolicyRequest mocks base method
func (m *MockWorkMailAPI) GetDefaultRetentionPolicyRequest(arg0 *workmail.GetDefaultRetentionPolicyInput) (*request.Request, *workmail.GetDefaultRetentionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultRetentionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.GetDefaultRetentionPolicyOutput)
	return ret0, ret1
}

// GetDefaultRetentionPolicyRequest indicates an expected call of GetDefaultRetentionPolicyRequest
func (mr *MockWorkMailAPIMockRecorder) GetDefaultRetentionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultRetentionPolicyRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).GetDefaultRetentionPolicyRequest), arg0)
}

// GetDefaultRetentionPolicyWithContext mocks base method
func (m *MockWorkMailAPI) GetDefaultRetentionPolicyWithContext(arg0 context.Context, arg1 *workmail.GetDefaultRetentionPolicyInput, arg2 ...request.Option) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultRetentionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.GetDefaultRetentionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultRetentionPolicyWithContext indicates an expected call of GetDefaultRetentionPolicyWithContext
func (mr *MockWorkMailAPIMockRecorder) GetDefaultRetentionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultRetentionPolicyWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).GetDefaultRetentionPolicyWithContext), varargs...)
}

// GetMailboxDetails mocks base method
func (m *MockWorkMailAPI) GetMailboxDetails(arg0 *workmail.GetMailboxDetailsInput) (*workmail.GetMailboxDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailboxDetails", arg0)
	ret0, _ := ret[0].(*workmail.GetMailboxDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailboxDetails indicates an expected call of GetMailboxDetails
func (mr *MockWorkMailAPIMockRecorder) GetMailboxDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailboxDetails", reflect.TypeOf((*MockWorkMailAPI)(nil).GetMailboxDetails), arg0)
}

// GetMailboxDetailsRequest mocks base method
func (m *MockWorkMailAPI) GetMailboxDetailsRequest(arg0 *workmail.GetMailboxDetailsInput) (*request.Request, *workmail.GetMailboxDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailboxDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.GetMailboxDetailsOutput)
	return ret0, ret1
}

// GetMailboxDetailsRequest indicates an expected call of GetMailboxDetailsRequest
func (mr *MockWorkMailAPIMockRecorder) GetMailboxDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailboxDetailsRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).GetMailboxDetailsRequest), arg0)
}

// GetMailboxDetailsWithContext mocks base method
func (m *MockWorkMailAPI) GetMailboxDetailsWithContext(arg0 context.Context, arg1 *workmail.GetMailboxDetailsInput, arg2 ...request.Option) (*workmail.GetMailboxDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMailboxDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.GetMailboxDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailboxDetailsWithContext indicates an expected call of GetMailboxDetailsWithContext
func (mr *MockWorkMailAPIMockRecorder) GetMailboxDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailboxDetailsWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).GetMailboxDetailsWithContext), varargs...)
}

// ListAccessControlRules mocks base method
func (m *MockWorkMailAPI) ListAccessControlRules(arg0 *workmail.ListAccessControlRulesInput) (*workmail.ListAccessControlRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessControlRules", arg0)
	ret0, _ := ret[0].(*workmail.ListAccessControlRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessControlRules indicates an expected call of ListAccessControlRules
func (mr *MockWorkMailAPIMockRecorder) ListAccessControlRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessControlRules", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAccessControlRules), arg0)
}

// ListAccessControlRulesRequest mocks base method
func (m *MockWorkMailAPI) ListAccessControlRulesRequest(arg0 *workmail.ListAccessControlRulesInput) (*request.Request, *workmail.ListAccessControlRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessControlRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListAccessControlRulesOutput)
	return ret0, ret1
}

// ListAccessControlRulesRequest indicates an expected call of ListAccessControlRulesRequest
func (mr *MockWorkMailAPIMockRecorder) ListAccessControlRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessControlRulesRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAccessControlRulesRequest), arg0)
}

// ListAccessControlRulesWithContext mocks base method
func (m *MockWorkMailAPI) ListAccessControlRulesWithContext(arg0 context.Context, arg1 *workmail.ListAccessControlRulesInput, arg2 ...request.Option) (*workmail.ListAccessControlRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessControlRulesWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListAccessControlRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessControlRulesWithContext indicates an expected call of ListAccessControlRulesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListAccessControlRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessControlRulesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAccessControlRulesWithContext), varargs...)
}

// ListAliases mocks base method
func (m *MockWorkMailAPI) ListAliases(arg0 *workmail.ListAliasesInput) (*workmail.ListAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliases", arg0)
	ret0, _ := ret[0].(*workmail.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliases indicates an expected call of ListAliases
func (mr *MockWorkMailAPIMockRecorder) ListAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliases", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAliases), arg0)
}

// ListAliasesPages mocks base method
func (m *MockWorkMailAPI) ListAliasesPages(arg0 *workmail.ListAliasesInput, arg1 func(*workmail.ListAliasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAliasesPages indicates an expected call of ListAliasesPages
func (mr *MockWorkMailAPIMockRecorder) ListAliasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAliasesPages), arg0, arg1)
}

// ListAliasesPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListAliasesPagesWithContext(arg0 context.Context, arg1 *workmail.ListAliasesInput, arg2 func(*workmail.ListAliasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAliasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAliasesPagesWithContext indicates an expected call of ListAliasesPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListAliasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAliasesPagesWithContext), varargs...)
}

// ListAliasesRequest mocks base method
func (m *MockWorkMailAPI) ListAliasesRequest(arg0 *workmail.ListAliasesInput) (*request.Request, *workmail.ListAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListAliasesOutput)
	return ret0, ret1
}

// ListAliasesRequest indicates an expected call of ListAliasesRequest
func (mr *MockWorkMailAPIMockRecorder) ListAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAliasesRequest), arg0)
}

// ListAliasesWithContext mocks base method
func (m *MockWorkMailAPI) ListAliasesWithContext(arg0 context.Context, arg1 *workmail.ListAliasesInput, arg2 ...request.Option) (*workmail.ListAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAliasesWithContext indicates an expected call of ListAliasesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAliasesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListAliasesWithContext), varargs...)
}

// ListGroupMembers mocks base method
func (m *MockWorkMailAPI) ListGroupMembers(arg0 *workmail.ListGroupMembersInput) (*workmail.ListGroupMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembers", arg0)
	ret0, _ := ret[0].(*workmail.ListGroupMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMembers indicates an expected call of ListGroupMembers
func (mr *MockWorkMailAPIMockRecorder) ListGroupMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembers", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupMembers), arg0)
}

// ListGroupMembersPages mocks base method
func (m *MockWorkMailAPI) ListGroupMembersPages(arg0 *workmail.ListGroupMembersInput, arg1 func(*workmail.ListGroupMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupMembersPages indicates an expected call of ListGroupMembersPages
func (mr *MockWorkMailAPIMockRecorder) ListGroupMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembersPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupMembersPages), arg0, arg1)
}

// ListGroupMembersPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListGroupMembersPagesWithContext(arg0 context.Context, arg1 *workmail.ListGroupMembersInput, arg2 func(*workmail.ListGroupMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupMembersPagesWithContext indicates an expected call of ListGroupMembersPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListGroupMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembersPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupMembersPagesWithContext), varargs...)
}

// ListGroupMembersRequest mocks base method
func (m *MockWorkMailAPI) ListGroupMembersRequest(arg0 *workmail.ListGroupMembersInput) (*request.Request, *workmail.ListGroupMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListGroupMembersOutput)
	return ret0, ret1
}

// ListGroupMembersRequest indicates an expected call of ListGroupMembersRequest
func (mr *MockWorkMailAPIMockRecorder) ListGroupMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembersRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupMembersRequest), arg0)
}

// ListGroupMembersWithContext mocks base method
func (m *MockWorkMailAPI) ListGroupMembersWithContext(arg0 context.Context, arg1 *workmail.ListGroupMembersInput, arg2 ...request.Option) (*workmail.ListGroupMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMembersWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListGroupMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMembersWithContext indicates an expected call of ListGroupMembersWithContext
func (mr *MockWorkMailAPIMockRecorder) ListGroupMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembersWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupMembersWithContext), varargs...)
}

// ListGroups mocks base method
func (m *MockWorkMailAPI) ListGroups(arg0 *workmail.ListGroupsInput) (*workmail.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", arg0)
	ret0, _ := ret[0].(*workmail.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockWorkMailAPIMockRecorder) ListGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroups), arg0)
}

// ListGroupsPages mocks base method
func (m *MockWorkMailAPI) ListGroupsPages(arg0 *workmail.ListGroupsInput, arg1 func(*workmail.ListGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPages indicates an expected call of ListGroupsPages
func (mr *MockWorkMailAPIMockRecorder) ListGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupsPages), arg0, arg1)
}

// ListGroupsPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListGroupsPagesWithContext(arg0 context.Context, arg1 *workmail.ListGroupsInput, arg2 func(*workmail.ListGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGroupsPagesWithContext indicates an expected call of ListGroupsPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupsPagesWithContext), varargs...)
}

// ListGroupsRequest mocks base method
func (m *MockWorkMailAPI) ListGroupsRequest(arg0 *workmail.ListGroupsInput) (*request.Request, *workmail.ListGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListGroupsOutput)
	return ret0, ret1
}

// ListGroupsRequest indicates an expected call of ListGroupsRequest
func (mr *MockWorkMailAPIMockRecorder) ListGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupsRequest), arg0)
}

// ListGroupsWithContext mocks base method
func (m *MockWorkMailAPI) ListGroupsWithContext(arg0 context.Context, arg1 *workmail.ListGroupsInput, arg2 ...request.Option) (*workmail.ListGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupsWithContext indicates an expected call of ListGroupsWithContext
func (mr *MockWorkMailAPIMockRecorder) ListGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupsWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListGroupsWithContext), varargs...)
}

// ListMailboxExportJobs mocks base method
func (m *MockWorkMailAPI) ListMailboxExportJobs(arg0 *workmail.ListMailboxExportJobsInput) (*workmail.ListMailboxExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMailboxExportJobs", arg0)
	ret0, _ := ret[0].(*workmail.ListMailboxExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMailboxExportJobs indicates an expected call of ListMailboxExportJobs
func (mr *MockWorkMailAPIMockRecorder) ListMailboxExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxExportJobs", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxExportJobs), arg0)
}

// ListMailboxExportJobsPages mocks base method
func (m *MockWorkMailAPI) ListMailboxExportJobsPages(arg0 *workmail.ListMailboxExportJobsInput, arg1 func(*workmail.ListMailboxExportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMailboxExportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMailboxExportJobsPages indicates an expected call of ListMailboxExportJobsPages
func (mr *MockWorkMailAPIMockRecorder) ListMailboxExportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxExportJobsPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxExportJobsPages), arg0, arg1)
}

// ListMailboxExportJobsPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListMailboxExportJobsPagesWithContext(arg0 context.Context, arg1 *workmail.ListMailboxExportJobsInput, arg2 func(*workmail.ListMailboxExportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMailboxExportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMailboxExportJobsPagesWithContext indicates an expected call of ListMailboxExportJobsPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListMailboxExportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxExportJobsPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxExportJobsPagesWithContext), varargs...)
}

// ListMailboxExportJobsRequest mocks base method
func (m *MockWorkMailAPI) ListMailboxExportJobsRequest(arg0 *workmail.ListMailboxExportJobsInput) (*request.Request, *workmail.ListMailboxExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMailboxExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListMailboxExportJobsOutput)
	return ret0, ret1
}

// ListMailboxExportJobsRequest indicates an expected call of ListMailboxExportJobsRequest
func (mr *MockWorkMailAPIMockRecorder) ListMailboxExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxExportJobsRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxExportJobsRequest), arg0)
}

// ListMailboxExportJobsWithContext mocks base method
func (m *MockWorkMailAPI) ListMailboxExportJobsWithContext(arg0 context.Context, arg1 *workmail.ListMailboxExportJobsInput, arg2 ...request.Option) (*workmail.ListMailboxExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMailboxExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListMailboxExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMailboxExportJobsWithContext indicates an expected call of ListMailboxExportJobsWithContext
func (mr *MockWorkMailAPIMockRecorder) ListMailboxExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxExportJobsWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxExportJobsWithContext), varargs...)
}

// ListMailboxPermissions mocks base method
func (m *MockWorkMailAPI) ListMailboxPermissions(arg0 *workmail.ListMailboxPermissionsInput) (*workmail.ListMailboxPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMailboxPermissions", arg0)
	ret0, _ := ret[0].(*workmail.ListMailboxPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMailboxPermissions indicates an expected call of ListMailboxPermissions
func (mr *MockWorkMailAPIMockRecorder) ListMailboxPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxPermissions", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxPermissions), arg0)
}

// ListMailboxPermissionsPages mocks base method
func (m *MockWorkMailAPI) ListMailboxPermissionsPages(arg0 *workmail.ListMailboxPermissionsInput, arg1 func(*workmail.ListMailboxPermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMailboxPermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMailboxPermissionsPages indicates an expected call of ListMailboxPermissionsPages
func (mr *MockWorkMailAPIMockRecorder) ListMailboxPermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxPermissionsPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxPermissionsPages), arg0, arg1)
}

// ListMailboxPermissionsPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListMailboxPermissionsPagesWithContext(arg0 context.Context, arg1 *workmail.ListMailboxPermissionsInput, arg2 func(*workmail.ListMailboxPermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMailboxPermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMailboxPermissionsPagesWithContext indicates an expected call of ListMailboxPermissionsPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListMailboxPermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxPermissionsPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxPermissionsPagesWithContext), varargs...)
}

// ListMailboxPermissionsRequest mocks base method
func (m *MockWorkMailAPI) ListMailboxPermissionsRequest(arg0 *workmail.ListMailboxPermissionsInput) (*request.Request, *workmail.ListMailboxPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMailboxPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListMailboxPermissionsOutput)
	return ret0, ret1
}

// ListMailboxPermissionsRequest indicates an expected call of ListMailboxPermissionsRequest
func (mr *MockWorkMailAPIMockRecorder) ListMailboxPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxPermissionsRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxPermissionsRequest), arg0)
}

// ListMailboxPermissionsWithContext mocks base method
func (m *MockWorkMailAPI) ListMailboxPermissionsWithContext(arg0 context.Context, arg1 *workmail.ListMailboxPermissionsInput, arg2 ...request.Option) (*workmail.ListMailboxPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMailboxPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListMailboxPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMailboxPermissionsWithContext indicates an expected call of ListMailboxPermissionsWithContext
func (mr *MockWorkMailAPIMockRecorder) ListMailboxPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMailboxPermissionsWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListMailboxPermissionsWithContext), varargs...)
}

// ListOrganizations mocks base method
func (m *MockWorkMailAPI) ListOrganizations(arg0 *workmail.ListOrganizationsInput) (*workmail.ListOrganizationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", arg0)
	ret0, _ := ret[0].(*workmail.ListOrganizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations
func (mr *MockWorkMailAPIMockRecorder) ListOrganizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockWorkMailAPI)(nil).ListOrganizations), arg0)
}

// ListOrganizationsPages mocks base method
func (m *MockWorkMailAPI) ListOrganizationsPages(arg0 *workmail.ListOrganizationsInput, arg1 func(*workmail.ListOrganizationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationsPages indicates an expected call of ListOrganizationsPages
func (mr *MockWorkMailAPIMockRecorder) ListOrganizationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListOrganizationsPages), arg0, arg1)
}

// ListOrganizationsPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListOrganizationsPagesWithContext(arg0 context.Context, arg1 *workmail.ListOrganizationsInput, arg2 func(*workmail.ListOrganizationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationsPagesWithContext indicates an expected call of ListOrganizationsPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListOrganizationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListOrganizationsPagesWithContext), varargs...)
}

// ListOrganizationsRequest mocks base method
func (m *MockWorkMailAPI) ListOrganizationsRequest(arg0 *workmail.ListOrganizationsInput) (*request.Request, *workmail.ListOrganizationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListOrganizationsOutput)
	return ret0, ret1
}

// ListOrganizationsRequest indicates an expected call of ListOrganizationsRequest
func (mr *MockWorkMailAPIMockRecorder) ListOrganizationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListOrganizationsRequest), arg0)
}

// ListOrganizationsWithContext mocks base method
func (m *MockWorkMailAPI) ListOrganizationsWithContext(arg0 context.Context, arg1 *workmail.ListOrganizationsInput, arg2 ...request.Option) (*workmail.ListOrganizationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationsWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListOrganizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationsWithContext indicates an expected call of ListOrganizationsWithContext
func (mr *MockWorkMailAPIMockRecorder) ListOrganizationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListOrganizationsWithContext), varargs...)
}

// ListResourceDelegates mocks base method
func (m *MockWorkMailAPI) ListResourceDelegates(arg0 *workmail.ListResourceDelegatesInput) (*workmail.ListResourceDelegatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceDelegates", arg0)
	ret0, _ := ret[0].(*workmail.ListResourceDelegatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceDelegates indicates an expected call of ListResourceDelegates
func (mr *MockWorkMailAPIMockRecorder) ListResourceDelegates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDelegates", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourceDelegates), arg0)
}

// ListResourceDelegatesPages mocks base method
func (m *MockWorkMailAPI) ListResourceDelegatesPages(arg0 *workmail.ListResourceDelegatesInput, arg1 func(*workmail.ListResourceDelegatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceDelegatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourceDelegatesPages indicates an expected call of ListResourceDelegatesPages
func (mr *MockWorkMailAPIMockRecorder) ListResourceDelegatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDelegatesPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourceDelegatesPages), arg0, arg1)
}

// ListResourceDelegatesPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListResourceDelegatesPagesWithContext(arg0 context.Context, arg1 *workmail.ListResourceDelegatesInput, arg2 func(*workmail.ListResourceDelegatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceDelegatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourceDelegatesPagesWithContext indicates an expected call of ListResourceDelegatesPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListResourceDelegatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDelegatesPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourceDelegatesPagesWithContext), varargs...)
}

// ListResourceDelegatesRequest mocks base method
func (m *MockWorkMailAPI) ListResourceDelegatesRequest(arg0 *workmail.ListResourceDelegatesInput) (*request.Request, *workmail.ListResourceDelegatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceDelegatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListResourceDelegatesOutput)
	return ret0, ret1
}

// ListResourceDelegatesRequest indicates an expected call of ListResourceDelegatesRequest
func (mr *MockWorkMailAPIMockRecorder) ListResourceDelegatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDelegatesRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourceDelegatesRequest), arg0)
}

// ListResourceDelegatesWithContext mocks base method
func (m *MockWorkMailAPI) ListResourceDelegatesWithContext(arg0 context.Context, arg1 *workmail.ListResourceDelegatesInput, arg2 ...request.Option) (*workmail.ListResourceDelegatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceDelegatesWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListResourceDelegatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceDelegatesWithContext indicates an expected call of ListResourceDelegatesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListResourceDelegatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceDelegatesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourceDelegatesWithContext), varargs...)
}

// ListResources mocks base method
func (m *MockWorkMailAPI) ListResources(arg0 *workmail.ListResourcesInput) (*workmail.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0)
	ret0, _ := ret[0].(*workmail.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources
func (mr *MockWorkMailAPIMockRecorder) ListResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResources), arg0)
}

// ListResourcesPages mocks base method
func (m *MockWorkMailAPI) ListResourcesPages(arg0 *workmail.ListResourcesInput, arg1 func(*workmail.ListResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesPages indicates an expected call of ListResourcesPages
func (mr *MockWorkMailAPIMockRecorder) ListResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourcesPages), arg0, arg1)
}

// ListResourcesPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListResourcesPagesWithContext(arg0 context.Context, arg1 *workmail.ListResourcesInput, arg2 func(*workmail.ListResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesPagesWithContext indicates an expected call of ListResourcesPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourcesPagesWithContext), varargs...)
}

// ListResourcesRequest mocks base method
func (m *MockWorkMailAPI) ListResourcesRequest(arg0 *workmail.ListResourcesInput) (*request.Request, *workmail.ListResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListResourcesOutput)
	return ret0, ret1
}

// ListResourcesRequest indicates an expected call of ListResourcesRequest
func (mr *MockWorkMailAPIMockRecorder) ListResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourcesRequest), arg0)
}

// ListResourcesWithContext mocks base method
func (m *MockWorkMailAPI) ListResourcesWithContext(arg0 context.Context, arg1 *workmail.ListResourcesInput, arg2 ...request.Option) (*workmail.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesWithContext indicates an expected call of ListResourcesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListResourcesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockWorkMailAPI) ListTagsForResource(arg0 *workmail.ListTagsForResourceInput) (*workmail.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*workmail.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockWorkMailAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockWorkMailAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockWorkMailAPI) ListTagsForResourceRequest(arg0 *workmail.ListTagsForResourceInput) (*request.Request, *workmail.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockWorkMailAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockWorkMailAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *workmail.ListTagsForResourceInput, arg2 ...request.Option) (*workmail.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUsers mocks base method
func (m *MockWorkMailAPI) ListUsers(arg0 *workmail.ListUsersInput) (*workmail.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*workmail.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockWorkMailAPIMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockWorkMailAPI)(nil).ListUsers), arg0)
}

// ListUsersPages mocks base method
func (m *MockWorkMailAPI) ListUsersPages(arg0 *workmail.ListUsersInput, arg1 func(*workmail.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages
func (mr *MockWorkMailAPIMockRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockWorkMailAPI)(nil).ListUsersPages), arg0, arg1)
}

// ListUsersPagesWithContext mocks base method
func (m *MockWorkMailAPI) ListUsersPagesWithContext(arg0 context.Context, arg1 *workmail.ListUsersInput, arg2 func(*workmail.ListUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPagesWithContext indicates an expected call of ListUsersPagesWithContext
func (mr *MockWorkMailAPIMockRecorder) ListUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPagesWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListUsersPagesWithContext), varargs...)
}

// ListUsersRequest mocks base method
func (m *MockWorkMailAPI) ListUsersRequest(arg0 *workmail.ListUsersInput) (*request.Request, *workmail.ListUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ListUsersOutput)
	return ret0, ret1
}

// ListUsersRequest indicates an expected call of ListUsersRequest
func (mr *MockWorkMailAPIMockRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ListUsersRequest), arg0)
}

// ListUsersWithContext mocks base method
func (m *MockWorkMailAPI) ListUsersWithContext(arg0 context.Context, arg1 *workmail.ListUsersInput, arg2 ...request.Option) (*workmail.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithContext indicates an expected call of ListUsersWithContext
func (mr *MockWorkMailAPIMockRecorder) ListUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ListUsersWithContext), varargs...)
}

// PutAccessControlRule mocks base method
func (m *MockWorkMailAPI) PutAccessControlRule(arg0 *workmail.PutAccessControlRuleInput) (*workmail.PutAccessControlRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessControlRule", arg0)
	ret0, _ := ret[0].(*workmail.PutAccessControlRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessControlRule indicates an expected call of PutAccessControlRule
func (mr *MockWorkMailAPIMockRecorder) PutAccessControlRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessControlRule", reflect.TypeOf((*MockWorkMailAPI)(nil).PutAccessControlRule), arg0)
}

// PutAccessControlRuleRequest mocks base method
func (m *MockWorkMailAPI) PutAccessControlRuleRequest(arg0 *workmail.PutAccessControlRuleInput) (*request.Request, *workmail.PutAccessControlRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccessControlRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.PutAccessControlRuleOutput)
	return ret0, ret1
}

// PutAccessControlRuleRequest indicates an expected call of PutAccessControlRuleRequest
func (mr *MockWorkMailAPIMockRecorder) PutAccessControlRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessControlRuleRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).PutAccessControlRuleRequest), arg0)
}

// PutAccessControlRuleWithContext mocks base method
func (m *MockWorkMailAPI) PutAccessControlRuleWithContext(arg0 context.Context, arg1 *workmail.PutAccessControlRuleInput, arg2 ...request.Option) (*workmail.PutAccessControlRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccessControlRuleWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.PutAccessControlRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccessControlRuleWithContext indicates an expected call of PutAccessControlRuleWithContext
func (mr *MockWorkMailAPIMockRecorder) PutAccessControlRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccessControlRuleWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).PutAccessControlRuleWithContext), varargs...)
}

// PutMailboxPermissions mocks base method
func (m *MockWorkMailAPI) PutMailboxPermissions(arg0 *workmail.PutMailboxPermissionsInput) (*workmail.PutMailboxPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMailboxPermissions", arg0)
	ret0, _ := ret[0].(*workmail.PutMailboxPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMailboxPermissions indicates an expected call of PutMailboxPermissions
func (mr *MockWorkMailAPIMockRecorder) PutMailboxPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMailboxPermissions", reflect.TypeOf((*MockWorkMailAPI)(nil).PutMailboxPermissions), arg0)
}

// PutMailboxPermissionsRequest mocks base method
func (m *MockWorkMailAPI) PutMailboxPermissionsRequest(arg0 *workmail.PutMailboxPermissionsInput) (*request.Request, *workmail.PutMailboxPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMailboxPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.PutMailboxPermissionsOutput)
	return ret0, ret1
}

// PutMailboxPermissionsRequest indicates an expected call of PutMailboxPermissionsRequest
func (mr *MockWorkMailAPIMockRecorder) PutMailboxPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMailboxPermissionsRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).PutMailboxPermissionsRequest), arg0)
}

// PutMailboxPermissionsWithContext mocks base method
func (m *MockWorkMailAPI) PutMailboxPermissionsWithContext(arg0 context.Context, arg1 *workmail.PutMailboxPermissionsInput, arg2 ...request.Option) (*workmail.PutMailboxPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMailboxPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.PutMailboxPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMailboxPermissionsWithContext indicates an expected call of PutMailboxPermissionsWithContext
func (mr *MockWorkMailAPIMockRecorder) PutMailboxPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMailboxPermissionsWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).PutMailboxPermissionsWithContext), varargs...)
}

// PutRetentionPolicy mocks base method
func (m *MockWorkMailAPI) PutRetentionPolicy(arg0 *workmail.PutRetentionPolicyInput) (*workmail.PutRetentionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRetentionPolicy", arg0)
	ret0, _ := ret[0].(*workmail.PutRetentionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRetentionPolicy indicates an expected call of PutRetentionPolicy
func (mr *MockWorkMailAPIMockRecorder) PutRetentionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRetentionPolicy", reflect.TypeOf((*MockWorkMailAPI)(nil).PutRetentionPolicy), arg0)
}

// PutRetentionPolicyRequest mocks base method
func (m *MockWorkMailAPI) PutRetentionPolicyRequest(arg0 *workmail.PutRetentionPolicyInput) (*request.Request, *workmail.PutRetentionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRetentionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.PutRetentionPolicyOutput)
	return ret0, ret1
}

// PutRetentionPolicyRequest indicates an expected call of PutRetentionPolicyRequest
func (mr *MockWorkMailAPIMockRecorder) PutRetentionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRetentionPolicyRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).PutRetentionPolicyRequest), arg0)
}

// PutRetentionPolicyWithContext mocks base method
func (m *MockWorkMailAPI) PutRetentionPolicyWithContext(arg0 context.Context, arg1 *workmail.PutRetentionPolicyInput, arg2 ...request.Option) (*workmail.PutRetentionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRetentionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.PutRetentionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRetentionPolicyWithContext indicates an expected call of PutRetentionPolicyWithContext
func (mr *MockWorkMailAPIMockRecorder) PutRetentionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRetentionPolicyWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).PutRetentionPolicyWithContext), varargs...)
}

// RegisterToWorkMail mocks base method
func (m *MockWorkMailAPI) RegisterToWorkMail(arg0 *workmail.RegisterToWorkMailInput) (*workmail.RegisterToWorkMailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterToWorkMail", arg0)
	ret0, _ := ret[0].(*workmail.RegisterToWorkMailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterToWorkMail indicates an expected call of RegisterToWorkMail
func (mr *MockWorkMailAPIMockRecorder) RegisterToWorkMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterToWorkMail", reflect.TypeOf((*MockWorkMailAPI)(nil).RegisterToWorkMail), arg0)
}

// RegisterToWorkMailRequest mocks base method
func (m *MockWorkMailAPI) RegisterToWorkMailRequest(arg0 *workmail.RegisterToWorkMailInput) (*request.Request, *workmail.RegisterToWorkMailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterToWorkMailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.RegisterToWorkMailOutput)
	return ret0, ret1
}

// RegisterToWorkMailRequest indicates an expected call of RegisterToWorkMailRequest
func (mr *MockWorkMailAPIMockRecorder) RegisterToWorkMailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterToWorkMailRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).RegisterToWorkMailRequest), arg0)
}

// RegisterToWorkMailWithContext mocks base method
func (m *MockWorkMailAPI) RegisterToWorkMailWithContext(arg0 context.Context, arg1 *workmail.RegisterToWorkMailInput, arg2 ...request.Option) (*workmail.RegisterToWorkMailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterToWorkMailWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.RegisterToWorkMailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterToWorkMailWithContext indicates an expected call of RegisterToWorkMailWithContext
func (mr *MockWorkMailAPIMockRecorder) RegisterToWorkMailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterToWorkMailWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).RegisterToWorkMailWithContext), varargs...)
}

// ResetPassword mocks base method
func (m *MockWorkMailAPI) ResetPassword(arg0 *workmail.ResetPasswordInput) (*workmail.ResetPasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0)
	ret0, _ := ret[0].(*workmail.ResetPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockWorkMailAPIMockRecorder) ResetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockWorkMailAPI)(nil).ResetPassword), arg0)
}

// ResetPasswordRequest mocks base method
func (m *MockWorkMailAPI) ResetPasswordRequest(arg0 *workmail.ResetPasswordInput) (*request.Request, *workmail.ResetPasswordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.ResetPasswordOutput)
	return ret0, ret1
}

// ResetPasswordRequest indicates an expected call of ResetPasswordRequest
func (mr *MockWorkMailAPIMockRecorder) ResetPasswordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).ResetPasswordRequest), arg0)
}

// ResetPasswordWithContext mocks base method
func (m *MockWorkMailAPI) ResetPasswordWithContext(arg0 context.Context, arg1 *workmail.ResetPasswordInput, arg2 ...request.Option) (*workmail.ResetPasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetPasswordWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.ResetPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordWithContext indicates an expected call of ResetPasswordWithContext
func (mr *MockWorkMailAPIMockRecorder) ResetPasswordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).ResetPasswordWithContext), varargs...)
}

// StartMailboxExportJob mocks base method
func (m *MockWorkMailAPI) StartMailboxExportJob(arg0 *workmail.StartMailboxExportJobInput) (*workmail.StartMailboxExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMailboxExportJob", arg0)
	ret0, _ := ret[0].(*workmail.StartMailboxExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMailboxExportJob indicates an expected call of StartMailboxExportJob
func (mr *MockWorkMailAPIMockRecorder) StartMailboxExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMailboxExportJob", reflect.TypeOf((*MockWorkMailAPI)(nil).StartMailboxExportJob), arg0)
}

// StartMailboxExportJobRequest mocks base method
func (m *MockWorkMailAPI) StartMailboxExportJobRequest(arg0 *workmail.StartMailboxExportJobInput) (*request.Request, *workmail.StartMailboxExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMailboxExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.StartMailboxExportJobOutput)
	return ret0, ret1
}

// StartMailboxExportJobRequest indicates an expected call of StartMailboxExportJobRequest
func (mr *MockWorkMailAPIMockRecorder) StartMailboxExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMailboxExportJobRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).StartMailboxExportJobRequest), arg0)
}

// StartMailboxExportJobWithContext mocks base method
func (m *MockWorkMailAPI) StartMailboxExportJobWithContext(arg0 context.Context, arg1 *workmail.StartMailboxExportJobInput, arg2 ...request.Option) (*workmail.StartMailboxExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMailboxExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.StartMailboxExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMailboxExportJobWithContext indicates an expected call of StartMailboxExportJobWithContext
func (mr *MockWorkMailAPIMockRecorder) StartMailboxExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMailboxExportJobWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).StartMailboxExportJobWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockWorkMailAPI) TagResource(arg0 *workmail.TagResourceInput) (*workmail.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*workmail.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockWorkMailAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockWorkMailAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockWorkMailAPI) TagResourceRequest(arg0 *workmail.TagResourceInput) (*request.Request, *workmail.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockWorkMailAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockWorkMailAPI) TagResourceWithContext(arg0 context.Context, arg1 *workmail.TagResourceInput, arg2 ...request.Option) (*workmail.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockWorkMailAPI) UntagResource(arg0 *workmail.UntagResourceInput) (*workmail.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*workmail.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockWorkMailAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockWorkMailAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockWorkMailAPI) UntagResourceRequest(arg0 *workmail.UntagResourceInput) (*request.Request, *workmail.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockWorkMailAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockWorkMailAPI) UntagResourceWithContext(arg0 context.Context, arg1 *workmail.UntagResourceInput, arg2 ...request.Option) (*workmail.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateMailboxQuota mocks base method
func (m *MockWorkMailAPI) UpdateMailboxQuota(arg0 *workmail.UpdateMailboxQuotaInput) (*workmail.UpdateMailboxQuotaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMailboxQuota", arg0)
	ret0, _ := ret[0].(*workmail.UpdateMailboxQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMailboxQuota indicates an expected call of UpdateMailboxQuota
func (mr *MockWorkMailAPIMockRecorder) UpdateMailboxQuota(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMailboxQuota", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdateMailboxQuota), arg0)
}

// UpdateMailboxQuotaRequest mocks base method
func (m *MockWorkMailAPI) UpdateMailboxQuotaRequest(arg0 *workmail.UpdateMailboxQuotaInput) (*request.Request, *workmail.UpdateMailboxQuotaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMailboxQuotaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.UpdateMailboxQuotaOutput)
	return ret0, ret1
}

// UpdateMailboxQuotaRequest indicates an expected call of UpdateMailboxQuotaRequest
func (mr *MockWorkMailAPIMockRecorder) UpdateMailboxQuotaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMailboxQuotaRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdateMailboxQuotaRequest), arg0)
}

// UpdateMailboxQuotaWithContext mocks base method
func (m *MockWorkMailAPI) UpdateMailboxQuotaWithContext(arg0 context.Context, arg1 *workmail.UpdateMailboxQuotaInput, arg2 ...request.Option) (*workmail.UpdateMailboxQuotaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMailboxQuotaWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.UpdateMailboxQuotaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMailboxQuotaWithContext indicates an expected call of UpdateMailboxQuotaWithContext
func (mr *MockWorkMailAPIMockRecorder) UpdateMailboxQuotaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMailboxQuotaWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdateMailboxQuotaWithContext), varargs...)
}

// UpdatePrimaryEmailAddress mocks base method
func (m *MockWorkMailAPI) UpdatePrimaryEmailAddress(arg0 *workmail.UpdatePrimaryEmailAddressInput) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrimaryEmailAddress", arg0)
	ret0, _ := ret[0].(*workmail.UpdatePrimaryEmailAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrimaryEmailAddress indicates an expected call of UpdatePrimaryEmailAddress
func (mr *MockWorkMailAPIMockRecorder) UpdatePrimaryEmailAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrimaryEmailAddress", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdatePrimaryEmailAddress), arg0)
}

// UpdatePrimaryEmailAddressRequest mocks base method
func (m *MockWorkMailAPI) UpdatePrimaryEmailAddressRequest(arg0 *workmail.UpdatePrimaryEmailAddressInput) (*request.Request, *workmail.UpdatePrimaryEmailAddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrimaryEmailAddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.UpdatePrimaryEmailAddressOutput)
	return ret0, ret1
}

// UpdatePrimaryEmailAddressRequest indicates an expected call of UpdatePrimaryEmailAddressRequest
func (mr *MockWorkMailAPIMockRecorder) UpdatePrimaryEmailAddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrimaryEmailAddressRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdatePrimaryEmailAddressRequest), arg0)
}

// UpdatePrimaryEmailAddressWithContext mocks base method
func (m *MockWorkMailAPI) UpdatePrimaryEmailAddressWithContext(arg0 context.Context, arg1 *workmail.UpdatePrimaryEmailAddressInput, arg2 ...request.Option) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePrimaryEmailAddressWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.UpdatePrimaryEmailAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrimaryEmailAddressWithContext indicates an expected call of UpdatePrimaryEmailAddressWithContext
func (mr *MockWorkMailAPIMockRecorder) UpdatePrimaryEmailAddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrimaryEmailAddressWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdatePrimaryEmailAddressWithContext), varargs...)
}

// UpdateResource mocks base method
func (m *MockWorkMailAPI) UpdateResource(arg0 *workmail.UpdateResourceInput) (*workmail.UpdateResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", arg0)
	ret0, _ := ret[0].(*workmail.UpdateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource
func (mr *MockWorkMailAPIMockRecorder) UpdateResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdateResource), arg0)
}

// UpdateResourceRequest mocks base method
func (m *MockWorkMailAPI) UpdateResourceRequest(arg0 *workmail.UpdateResourceInput) (*request.Request, *workmail.UpdateResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workmail.UpdateResourceOutput)
	return ret0, ret1
}

// UpdateResourceRequest indicates an expected call of UpdateResourceRequest
func (mr *MockWorkMailAPIMockRecorder) UpdateResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceRequest", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdateResourceRequest), arg0)
}

// UpdateResourceWithContext mocks base method
func (m *MockWorkMailAPI) UpdateResourceWithContext(arg0 context.Context, arg1 *workmail.UpdateResourceInput, arg2 ...request.Option) (*workmail.UpdateResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*workmail.UpdateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceWithContext indicates an expected call of UpdateResourceWithContext
func (mr *MockWorkMailAPIMockRecorder) UpdateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceWithContext", reflect.TypeOf((*MockWorkMailAPI)(nil).UpdateResourceWithContext), varargs...)
}

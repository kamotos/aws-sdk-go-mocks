// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/wellarchitected/wellarchitectediface (interfaces: WellArchitectedAPI)

// Package wellarchitectedmock is a generated GoMock package.
package wellarchitectedmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	wellarchitected "github.com/aws/aws-sdk-go/service/wellarchitected"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWellArchitectedAPI is a mock of WellArchitectedAPI interface
type MockWellArchitectedAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWellArchitectedAPIMockRecorder
}

// MockWellArchitectedAPIMockRecorder is the mock recorder for MockWellArchitectedAPI
type MockWellArchitectedAPIMockRecorder struct {
	mock *MockWellArchitectedAPI
}

// NewMockWellArchitectedAPI creates a new mock instance
func NewMockWellArchitectedAPI(ctrl *gomock.Controller) *MockWellArchitectedAPI {
	mock := &MockWellArchitectedAPI{ctrl: ctrl}
	mock.recorder = &MockWellArchitectedAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWellArchitectedAPI) EXPECT() *MockWellArchitectedAPIMockRecorder {
	return m.recorder
}

// AssociateLenses mocks base method
func (m *MockWellArchitectedAPI) AssociateLenses(arg0 *wellarchitected.AssociateLensesInput) (*wellarchitected.AssociateLensesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLenses", arg0)
	ret0, _ := ret[0].(*wellarchitected.AssociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLenses indicates an expected call of AssociateLenses
func (mr *MockWellArchitectedAPIMockRecorder) AssociateLenses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLenses", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateLenses), arg0)
}

// AssociateLensesRequest mocks base method
func (m *MockWellArchitectedAPI) AssociateLensesRequest(arg0 *wellarchitected.AssociateLensesInput) (*request.Request, *wellarchitected.AssociateLensesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLensesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.AssociateLensesOutput)
	return ret0, ret1
}

// AssociateLensesRequest indicates an expected call of AssociateLensesRequest
func (mr *MockWellArchitectedAPIMockRecorder) AssociateLensesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLensesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateLensesRequest), arg0)
}

// AssociateLensesWithContext mocks base method
func (m *MockWellArchitectedAPI) AssociateLensesWithContext(arg0 context.Context, arg1 *wellarchitected.AssociateLensesInput, arg2 ...request.Option) (*wellarchitected.AssociateLensesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLensesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.AssociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLensesWithContext indicates an expected call of AssociateLensesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) AssociateLensesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLensesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).AssociateLensesWithContext), varargs...)
}

// CreateMilestone mocks base method
func (m *MockWellArchitectedAPI) CreateMilestone(arg0 *wellarchitected.CreateMilestoneInput) (*wellarchitected.CreateMilestoneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMilestone", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMilestone indicates an expected call of CreateMilestone
func (mr *MockWellArchitectedAPIMockRecorder) CreateMilestone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestone", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateMilestone), arg0)
}

// CreateMilestoneRequest mocks base method
func (m *MockWellArchitectedAPI) CreateMilestoneRequest(arg0 *wellarchitected.CreateMilestoneInput) (*request.Request, *wellarchitected.CreateMilestoneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMilestoneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateMilestoneOutput)
	return ret0, ret1
}

// CreateMilestoneRequest indicates an expected call of CreateMilestoneRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateMilestoneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestoneRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateMilestoneRequest), arg0)
}

// CreateMilestoneWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateMilestoneWithContext(arg0 context.Context, arg1 *wellarchitected.CreateMilestoneInput, arg2 ...request.Option) (*wellarchitected.CreateMilestoneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMilestoneWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMilestoneWithContext indicates an expected call of CreateMilestoneWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateMilestoneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMilestoneWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateMilestoneWithContext), varargs...)
}

// CreateWorkload mocks base method
func (m *MockWellArchitectedAPI) CreateWorkload(arg0 *wellarchitected.CreateWorkloadInput) (*wellarchitected.CreateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkload indicates an expected call of CreateWorkload
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkload), arg0)
}

// CreateWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadRequest(arg0 *wellarchitected.CreateWorkloadInput) (*request.Request, *wellarchitected.CreateWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateWorkloadOutput)
	return ret0, ret1
}

// CreateWorkloadRequest indicates an expected call of CreateWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadRequest), arg0)
}

// CreateWorkloadShare mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadShare(arg0 *wellarchitected.CreateWorkloadShareInput) (*wellarchitected.CreateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkloadShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkloadShare indicates an expected call of CreateWorkloadShare
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadShare), arg0)
}

// CreateWorkloadShareRequest mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadShareRequest(arg0 *wellarchitected.CreateWorkloadShareInput) (*request.Request, *wellarchitected.CreateWorkloadShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkloadShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.CreateWorkloadShareOutput)
	return ret0, ret1
}

// CreateWorkloadShareRequest indicates an expected call of CreateWorkloadShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadShareRequest), arg0)
}

// CreateWorkloadShareWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadShareWithContext(arg0 context.Context, arg1 *wellarchitected.CreateWorkloadShareInput, arg2 ...request.Option) (*wellarchitected.CreateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkloadShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkloadShareWithContext indicates an expected call of CreateWorkloadShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadShareWithContext), varargs...)
}

// CreateWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) CreateWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.CreateWorkloadInput, arg2 ...request.Option) (*wellarchitected.CreateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.CreateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkloadWithContext indicates an expected call of CreateWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) CreateWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).CreateWorkloadWithContext), varargs...)
}

// DeleteWorkload mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkload(arg0 *wellarchitected.DeleteWorkloadInput) (*wellarchitected.DeleteWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkload indicates an expected call of DeleteWorkload
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkload), arg0)
}

// DeleteWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadRequest(arg0 *wellarchitected.DeleteWorkloadInput) (*request.Request, *wellarchitected.DeleteWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteWorkloadOutput)
	return ret0, ret1
}

// DeleteWorkloadRequest indicates an expected call of DeleteWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadRequest), arg0)
}

// DeleteWorkloadShare mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadShare(arg0 *wellarchitected.DeleteWorkloadShareInput) (*wellarchitected.DeleteWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkloadShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkloadShare indicates an expected call of DeleteWorkloadShare
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadShare), arg0)
}

// DeleteWorkloadShareRequest mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadShareRequest(arg0 *wellarchitected.DeleteWorkloadShareInput) (*request.Request, *wellarchitected.DeleteWorkloadShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkloadShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DeleteWorkloadShareOutput)
	return ret0, ret1
}

// DeleteWorkloadShareRequest indicates an expected call of DeleteWorkloadShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadShareRequest), arg0)
}

// DeleteWorkloadShareWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadShareWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteWorkloadShareInput, arg2 ...request.Option) (*wellarchitected.DeleteWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkloadShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkloadShareWithContext indicates an expected call of DeleteWorkloadShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadShareWithContext), varargs...)
}

// DeleteWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) DeleteWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.DeleteWorkloadInput, arg2 ...request.Option) (*wellarchitected.DeleteWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DeleteWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkloadWithContext indicates an expected call of DeleteWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DeleteWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DeleteWorkloadWithContext), varargs...)
}

// DisassociateLenses mocks base method
func (m *MockWellArchitectedAPI) DisassociateLenses(arg0 *wellarchitected.DisassociateLensesInput) (*wellarchitected.DisassociateLensesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLenses", arg0)
	ret0, _ := ret[0].(*wellarchitected.DisassociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLenses indicates an expected call of DisassociateLenses
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateLenses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLenses", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateLenses), arg0)
}

// DisassociateLensesRequest mocks base method
func (m *MockWellArchitectedAPI) DisassociateLensesRequest(arg0 *wellarchitected.DisassociateLensesInput) (*request.Request, *wellarchitected.DisassociateLensesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLensesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.DisassociateLensesOutput)
	return ret0, ret1
}

// DisassociateLensesRequest indicates an expected call of DisassociateLensesRequest
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateLensesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLensesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateLensesRequest), arg0)
}

// DisassociateLensesWithContext mocks base method
func (m *MockWellArchitectedAPI) DisassociateLensesWithContext(arg0 context.Context, arg1 *wellarchitected.DisassociateLensesInput, arg2 ...request.Option) (*wellarchitected.DisassociateLensesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLensesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.DisassociateLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLensesWithContext indicates an expected call of DisassociateLensesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) DisassociateLensesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLensesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).DisassociateLensesWithContext), varargs...)
}

// GetAnswer mocks base method
func (m *MockWellArchitectedAPI) GetAnswer(arg0 *wellarchitected.GetAnswerInput) (*wellarchitected.GetAnswerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswer", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswer indicates an expected call of GetAnswer
func (mr *MockWellArchitectedAPIMockRecorder) GetAnswer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswer", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetAnswer), arg0)
}

// GetAnswerRequest mocks base method
func (m *MockWellArchitectedAPI) GetAnswerRequest(arg0 *wellarchitected.GetAnswerInput) (*request.Request, *wellarchitected.GetAnswerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetAnswerOutput)
	return ret0, ret1
}

// GetAnswerRequest indicates an expected call of GetAnswerRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetAnswerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetAnswerRequest), arg0)
}

// GetAnswerWithContext mocks base method
func (m *MockWellArchitectedAPI) GetAnswerWithContext(arg0 context.Context, arg1 *wellarchitected.GetAnswerInput, arg2 ...request.Option) (*wellarchitected.GetAnswerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnswerWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerWithContext indicates an expected call of GetAnswerWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetAnswerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetAnswerWithContext), varargs...)
}

// GetLensReview mocks base method
func (m *MockWellArchitectedAPI) GetLensReview(arg0 *wellarchitected.GetLensReviewInput) (*wellarchitected.GetLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReview indicates an expected call of GetLensReview
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReview), arg0)
}

// GetLensReviewReport mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewReport(arg0 *wellarchitected.GetLensReviewReportInput) (*wellarchitected.GetLensReviewReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReviewReport", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReviewReport indicates an expected call of GetLensReviewReport
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewReport", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewReport), arg0)
}

// GetLensReviewReportRequest mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewReportRequest(arg0 *wellarchitected.GetLensReviewReportInput) (*request.Request, *wellarchitected.GetLensReviewReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReviewReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetLensReviewReportOutput)
	return ret0, ret1
}

// GetLensReviewReportRequest indicates an expected call of GetLensReviewReportRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewReportRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewReportRequest), arg0)
}

// GetLensReviewReportWithContext mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewReportWithContext(arg0 context.Context, arg1 *wellarchitected.GetLensReviewReportInput, arg2 ...request.Option) (*wellarchitected.GetLensReviewReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensReviewReportWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReviewReportWithContext indicates an expected call of GetLensReviewReportWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewReportWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewReportWithContext), varargs...)
}

// GetLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewRequest(arg0 *wellarchitected.GetLensReviewInput) (*request.Request, *wellarchitected.GetLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetLensReviewOutput)
	return ret0, ret1
}

// GetLensReviewRequest indicates an expected call of GetLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewRequest), arg0)
}

// GetLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) GetLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.GetLensReviewInput, arg2 ...request.Option) (*wellarchitected.GetLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensReviewWithContext indicates an expected call of GetLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensReviewWithContext), varargs...)
}

// GetLensVersionDifference mocks base method
func (m *MockWellArchitectedAPI) GetLensVersionDifference(arg0 *wellarchitected.GetLensVersionDifferenceInput) (*wellarchitected.GetLensVersionDifferenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensVersionDifference", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetLensVersionDifferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensVersionDifference indicates an expected call of GetLensVersionDifference
func (mr *MockWellArchitectedAPIMockRecorder) GetLensVersionDifference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensVersionDifference", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensVersionDifference), arg0)
}

// GetLensVersionDifferenceRequest mocks base method
func (m *MockWellArchitectedAPI) GetLensVersionDifferenceRequest(arg0 *wellarchitected.GetLensVersionDifferenceInput) (*request.Request, *wellarchitected.GetLensVersionDifferenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLensVersionDifferenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetLensVersionDifferenceOutput)
	return ret0, ret1
}

// GetLensVersionDifferenceRequest indicates an expected call of GetLensVersionDifferenceRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetLensVersionDifferenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensVersionDifferenceRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensVersionDifferenceRequest), arg0)
}

// GetLensVersionDifferenceWithContext mocks base method
func (m *MockWellArchitectedAPI) GetLensVersionDifferenceWithContext(arg0 context.Context, arg1 *wellarchitected.GetLensVersionDifferenceInput, arg2 ...request.Option) (*wellarchitected.GetLensVersionDifferenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLensVersionDifferenceWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetLensVersionDifferenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLensVersionDifferenceWithContext indicates an expected call of GetLensVersionDifferenceWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetLensVersionDifferenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLensVersionDifferenceWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetLensVersionDifferenceWithContext), varargs...)
}

// GetMilestone mocks base method
func (m *MockWellArchitectedAPI) GetMilestone(arg0 *wellarchitected.GetMilestoneInput) (*wellarchitected.GetMilestoneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone
func (mr *MockWellArchitectedAPIMockRecorder) GetMilestone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetMilestone), arg0)
}

// GetMilestoneRequest mocks base method
func (m *MockWellArchitectedAPI) GetMilestoneRequest(arg0 *wellarchitected.GetMilestoneInput) (*request.Request, *wellarchitected.GetMilestoneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestoneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetMilestoneOutput)
	return ret0, ret1
}

// GetMilestoneRequest indicates an expected call of GetMilestoneRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetMilestoneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestoneRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetMilestoneRequest), arg0)
}

// GetMilestoneWithContext mocks base method
func (m *MockWellArchitectedAPI) GetMilestoneWithContext(arg0 context.Context, arg1 *wellarchitected.GetMilestoneInput, arg2 ...request.Option) (*wellarchitected.GetMilestoneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMilestoneWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetMilestoneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestoneWithContext indicates an expected call of GetMilestoneWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetMilestoneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestoneWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetMilestoneWithContext), varargs...)
}

// GetWorkload mocks base method
func (m *MockWellArchitectedAPI) GetWorkload(arg0 *wellarchitected.GetWorkloadInput) (*wellarchitected.GetWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.GetWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload
func (mr *MockWellArchitectedAPIMockRecorder) GetWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetWorkload), arg0)
}

// GetWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) GetWorkloadRequest(arg0 *wellarchitected.GetWorkloadInput) (*request.Request, *wellarchitected.GetWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.GetWorkloadOutput)
	return ret0, ret1
}

// GetWorkloadRequest indicates an expected call of GetWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) GetWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetWorkloadRequest), arg0)
}

// GetWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) GetWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.GetWorkloadInput, arg2 ...request.Option) (*wellarchitected.GetWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.GetWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadWithContext indicates an expected call of GetWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) GetWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).GetWorkloadWithContext), varargs...)
}

// ListAnswers mocks base method
func (m *MockWellArchitectedAPI) ListAnswers(arg0 *wellarchitected.ListAnswersInput) (*wellarchitected.ListAnswersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswers", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListAnswersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswers indicates an expected call of ListAnswers
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswers", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswers), arg0)
}

// ListAnswersPages mocks base method
func (m *MockWellArchitectedAPI) ListAnswersPages(arg0 *wellarchitected.ListAnswersInput, arg1 func(*wellarchitected.ListAnswersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnswersPages indicates an expected call of ListAnswersPages
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersPages), arg0, arg1)
}

// ListAnswersPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListAnswersPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListAnswersInput, arg2 func(*wellarchitected.ListAnswersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnswersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnswersPagesWithContext indicates an expected call of ListAnswersPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersPagesWithContext), varargs...)
}

// ListAnswersRequest mocks base method
func (m *MockWellArchitectedAPI) ListAnswersRequest(arg0 *wellarchitected.ListAnswersInput) (*request.Request, *wellarchitected.ListAnswersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListAnswersOutput)
	return ret0, ret1
}

// ListAnswersRequest indicates an expected call of ListAnswersRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersRequest), arg0)
}

// ListAnswersWithContext mocks base method
func (m *MockWellArchitectedAPI) ListAnswersWithContext(arg0 context.Context, arg1 *wellarchitected.ListAnswersInput, arg2 ...request.Option) (*wellarchitected.ListAnswersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnswersWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListAnswersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswersWithContext indicates an expected call of ListAnswersWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListAnswersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListAnswersWithContext), varargs...)
}

// ListLensReviewImprovements mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovements(arg0 *wellarchitected.ListLensReviewImprovementsInput) (*wellarchitected.ListLensReviewImprovementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewImprovements", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewImprovementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviewImprovements indicates an expected call of ListLensReviewImprovements
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovements", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovements), arg0)
}

// ListLensReviewImprovementsPages mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsPages(arg0 *wellarchitected.ListLensReviewImprovementsInput, arg1 func(*wellarchitected.ListLensReviewImprovementsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewImprovementsPages indicates an expected call of ListLensReviewImprovementsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsPages), arg0, arg1)
}

// ListLensReviewImprovementsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewImprovementsInput, arg2 func(*wellarchitected.ListLensReviewImprovementsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewImprovementsPagesWithContext indicates an expected call of ListLensReviewImprovementsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsPagesWithContext), varargs...)
}

// ListLensReviewImprovementsRequest mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsRequest(arg0 *wellarchitected.ListLensReviewImprovementsInput) (*request.Request, *wellarchitected.ListLensReviewImprovementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListLensReviewImprovementsOutput)
	return ret0, ret1
}

// ListLensReviewImprovementsRequest indicates an expected call of ListLensReviewImprovementsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsRequest), arg0)
}

// ListLensReviewImprovementsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewImprovementsWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewImprovementsInput, arg2 ...request.Option) (*wellarchitected.ListLensReviewImprovementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewImprovementsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewImprovementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviewImprovementsWithContext indicates an expected call of ListLensReviewImprovementsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewImprovementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewImprovementsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewImprovementsWithContext), varargs...)
}

// ListLensReviews mocks base method
func (m *MockWellArchitectedAPI) ListLensReviews(arg0 *wellarchitected.ListLensReviewsInput) (*wellarchitected.ListLensReviewsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviews", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviews indicates an expected call of ListLensReviews
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviews", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviews), arg0)
}

// ListLensReviewsPages mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsPages(arg0 *wellarchitected.ListLensReviewsInput, arg1 func(*wellarchitected.ListLensReviewsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewsPages indicates an expected call of ListLensReviewsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsPages), arg0, arg1)
}

// ListLensReviewsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewsInput, arg2 func(*wellarchitected.ListLensReviewsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensReviewsPagesWithContext indicates an expected call of ListLensReviewsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsPagesWithContext), varargs...)
}

// ListLensReviewsRequest mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsRequest(arg0 *wellarchitected.ListLensReviewsInput) (*request.Request, *wellarchitected.ListLensReviewsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensReviewsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListLensReviewsOutput)
	return ret0, ret1
}

// ListLensReviewsRequest indicates an expected call of ListLensReviewsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsRequest), arg0)
}

// ListLensReviewsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensReviewsWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensReviewsInput, arg2 ...request.Option) (*wellarchitected.ListLensReviewsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensReviewsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensReviewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensReviewsWithContext indicates an expected call of ListLensReviewsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensReviewsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensReviewsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensReviewsWithContext), varargs...)
}

// ListLenses mocks base method
func (m *MockWellArchitectedAPI) ListLenses(arg0 *wellarchitected.ListLensesInput) (*wellarchitected.ListLensesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLenses", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLenses indicates an expected call of ListLenses
func (mr *MockWellArchitectedAPIMockRecorder) ListLenses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLenses", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLenses), arg0)
}

// ListLensesPages mocks base method
func (m *MockWellArchitectedAPI) ListLensesPages(arg0 *wellarchitected.ListLensesInput, arg1 func(*wellarchitected.ListLensesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensesPages indicates an expected call of ListLensesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesPages), arg0, arg1)
}

// ListLensesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensesInput, arg2 func(*wellarchitected.ListLensesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLensesPagesWithContext indicates an expected call of ListLensesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesPagesWithContext), varargs...)
}

// ListLensesRequest mocks base method
func (m *MockWellArchitectedAPI) ListLensesRequest(arg0 *wellarchitected.ListLensesInput) (*request.Request, *wellarchitected.ListLensesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLensesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListLensesOutput)
	return ret0, ret1
}

// ListLensesRequest indicates an expected call of ListLensesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesRequest), arg0)
}

// ListLensesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListLensesWithContext(arg0 context.Context, arg1 *wellarchitected.ListLensesInput, arg2 ...request.Option) (*wellarchitected.ListLensesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLensesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListLensesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLensesWithContext indicates an expected call of ListLensesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListLensesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLensesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListLensesWithContext), varargs...)
}

// ListMilestones mocks base method
func (m *MockWellArchitectedAPI) ListMilestones(arg0 *wellarchitected.ListMilestonesInput) (*wellarchitected.ListMilestonesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestones", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListMilestonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMilestones indicates an expected call of ListMilestones
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestones", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestones), arg0)
}

// ListMilestonesPages mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesPages(arg0 *wellarchitected.ListMilestonesInput, arg1 func(*wellarchitected.ListMilestonesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestonesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMilestonesPages indicates an expected call of ListMilestonesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesPages), arg0, arg1)
}

// ListMilestonesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListMilestonesInput, arg2 func(*wellarchitected.ListMilestonesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMilestonesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMilestonesPagesWithContext indicates an expected call of ListMilestonesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesPagesWithContext), varargs...)
}

// ListMilestonesRequest mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesRequest(arg0 *wellarchitected.ListMilestonesInput) (*request.Request, *wellarchitected.ListMilestonesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMilestonesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListMilestonesOutput)
	return ret0, ret1
}

// ListMilestonesRequest indicates an expected call of ListMilestonesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesRequest), arg0)
}

// ListMilestonesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListMilestonesWithContext(arg0 context.Context, arg1 *wellarchitected.ListMilestonesInput, arg2 ...request.Option) (*wellarchitected.ListMilestonesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMilestonesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListMilestonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMilestonesWithContext indicates an expected call of ListMilestonesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListMilestonesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMilestonesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListMilestonesWithContext), varargs...)
}

// ListNotifications mocks base method
func (m *MockWellArchitectedAPI) ListNotifications(arg0 *wellarchitected.ListNotificationsInput) (*wellarchitected.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications
func (mr *MockWellArchitectedAPIMockRecorder) ListNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotifications), arg0)
}

// ListNotificationsPages mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsPages(arg0 *wellarchitected.ListNotificationsInput, arg1 func(*wellarchitected.ListNotificationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPages indicates an expected call of ListNotificationsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsPages), arg0, arg1)
}

// ListNotificationsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListNotificationsInput, arg2 func(*wellarchitected.ListNotificationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPagesWithContext indicates an expected call of ListNotificationsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsPagesWithContext), varargs...)
}

// ListNotificationsRequest mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsRequest(arg0 *wellarchitected.ListNotificationsInput) (*request.Request, *wellarchitected.ListNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListNotificationsOutput)
	return ret0, ret1
}

// ListNotificationsRequest indicates an expected call of ListNotificationsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsRequest), arg0)
}

// ListNotificationsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListNotificationsWithContext(arg0 context.Context, arg1 *wellarchitected.ListNotificationsInput, arg2 ...request.Option) (*wellarchitected.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotificationsWithContext indicates an expected call of ListNotificationsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListNotificationsWithContext), varargs...)
}

// ListShareInvitations mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitations(arg0 *wellarchitected.ListShareInvitationsInput) (*wellarchitected.ListShareInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShareInvitations", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListShareInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShareInvitations indicates an expected call of ListShareInvitations
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitations", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitations), arg0)
}

// ListShareInvitationsPages mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsPages(arg0 *wellarchitected.ListShareInvitationsInput, arg1 func(*wellarchitected.ListShareInvitationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShareInvitationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListShareInvitationsPages indicates an expected call of ListShareInvitationsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsPages), arg0, arg1)
}

// ListShareInvitationsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListShareInvitationsInput, arg2 func(*wellarchitected.ListShareInvitationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListShareInvitationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListShareInvitationsPagesWithContext indicates an expected call of ListShareInvitationsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsPagesWithContext), varargs...)
}

// ListShareInvitationsRequest mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsRequest(arg0 *wellarchitected.ListShareInvitationsInput) (*request.Request, *wellarchitected.ListShareInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShareInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListShareInvitationsOutput)
	return ret0, ret1
}

// ListShareInvitationsRequest indicates an expected call of ListShareInvitationsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsRequest), arg0)
}

// ListShareInvitationsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListShareInvitationsWithContext(arg0 context.Context, arg1 *wellarchitected.ListShareInvitationsInput, arg2 ...request.Option) (*wellarchitected.ListShareInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListShareInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListShareInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShareInvitationsWithContext indicates an expected call of ListShareInvitationsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListShareInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareInvitationsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListShareInvitationsWithContext), varargs...)
}

// ListWorkloadShares mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadShares(arg0 *wellarchitected.ListWorkloadSharesInput) (*wellarchitected.ListWorkloadSharesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadShares", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadShares indicates an expected call of ListWorkloadShares
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadShares(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadShares", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadShares), arg0)
}

// ListWorkloadSharesPages mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesPages(arg0 *wellarchitected.ListWorkloadSharesInput, arg1 func(*wellarchitected.ListWorkloadSharesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadSharesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadSharesPages indicates an expected call of ListWorkloadSharesPages
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesPages), arg0, arg1)
}

// ListWorkloadSharesPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadSharesInput, arg2 func(*wellarchitected.ListWorkloadSharesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadSharesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadSharesPagesWithContext indicates an expected call of ListWorkloadSharesPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesPagesWithContext), varargs...)
}

// ListWorkloadSharesRequest mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesRequest(arg0 *wellarchitected.ListWorkloadSharesInput) (*request.Request, *wellarchitected.ListWorkloadSharesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadSharesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListWorkloadSharesOutput)
	return ret0, ret1
}

// ListWorkloadSharesRequest indicates an expected call of ListWorkloadSharesRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesRequest), arg0)
}

// ListWorkloadSharesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadSharesWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadSharesInput, arg2 ...request.Option) (*wellarchitected.ListWorkloadSharesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadSharesWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadSharesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadSharesWithContext indicates an expected call of ListWorkloadSharesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadSharesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadSharesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadSharesWithContext), varargs...)
}

// ListWorkloads mocks base method
func (m *MockWellArchitectedAPI) ListWorkloads(arg0 *wellarchitected.ListWorkloadsInput) (*wellarchitected.ListWorkloadsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloads", arg0)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloads indicates an expected call of ListWorkloads
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloads", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloads), arg0)
}

// ListWorkloadsPages mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsPages(arg0 *wellarchitected.ListWorkloadsInput, arg1 func(*wellarchitected.ListWorkloadsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadsPages indicates an expected call of ListWorkloadsPages
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsPages", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsPages), arg0, arg1)
}

// ListWorkloadsPagesWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsPagesWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadsInput, arg2 func(*wellarchitected.ListWorkloadsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkloadsPagesWithContext indicates an expected call of ListWorkloadsPagesWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsPagesWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsPagesWithContext), varargs...)
}

// ListWorkloadsRequest mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsRequest(arg0 *wellarchitected.ListWorkloadsInput) (*request.Request, *wellarchitected.ListWorkloadsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkloadsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.ListWorkloadsOutput)
	return ret0, ret1
}

// ListWorkloadsRequest indicates an expected call of ListWorkloadsRequest
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsRequest), arg0)
}

// ListWorkloadsWithContext mocks base method
func (m *MockWellArchitectedAPI) ListWorkloadsWithContext(arg0 context.Context, arg1 *wellarchitected.ListWorkloadsInput, arg2 ...request.Option) (*wellarchitected.ListWorkloadsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkloadsWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.ListWorkloadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkloadsWithContext indicates an expected call of ListWorkloadsWithContext
func (mr *MockWellArchitectedAPIMockRecorder) ListWorkloadsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkloadsWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).ListWorkloadsWithContext), varargs...)
}

// UpdateAnswer mocks base method
func (m *MockWellArchitectedAPI) UpdateAnswer(arg0 *wellarchitected.UpdateAnswerInput) (*wellarchitected.UpdateAnswerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswer", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswer indicates an expected call of UpdateAnswer
func (mr *MockWellArchitectedAPIMockRecorder) UpdateAnswer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswer", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateAnswer), arg0)
}

// UpdateAnswerRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateAnswerRequest(arg0 *wellarchitected.UpdateAnswerInput) (*request.Request, *wellarchitected.UpdateAnswerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateAnswerOutput)
	return ret0, ret1
}

// UpdateAnswerRequest indicates an expected call of UpdateAnswerRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateAnswerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswerRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateAnswerRequest), arg0)
}

// UpdateAnswerWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateAnswerWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateAnswerInput, arg2 ...request.Option) (*wellarchitected.UpdateAnswerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAnswerWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateAnswerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswerWithContext indicates an expected call of UpdateAnswerWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateAnswerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswerWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateAnswerWithContext), varargs...)
}

// UpdateLensReview mocks base method
func (m *MockWellArchitectedAPI) UpdateLensReview(arg0 *wellarchitected.UpdateLensReviewInput) (*wellarchitected.UpdateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLensReview indicates an expected call of UpdateLensReview
func (mr *MockWellArchitectedAPIMockRecorder) UpdateLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateLensReview), arg0)
}

// UpdateLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateLensReviewRequest(arg0 *wellarchitected.UpdateLensReviewInput) (*request.Request, *wellarchitected.UpdateLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateLensReviewOutput)
	return ret0, ret1
}

// UpdateLensReviewRequest indicates an expected call of UpdateLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateLensReviewRequest), arg0)
}

// UpdateLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateLensReviewInput, arg2 ...request.Option) (*wellarchitected.UpdateLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLensReviewWithContext indicates an expected call of UpdateLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateLensReviewWithContext), varargs...)
}

// UpdateShareInvitation mocks base method
func (m *MockWellArchitectedAPI) UpdateShareInvitation(arg0 *wellarchitected.UpdateShareInvitationInput) (*wellarchitected.UpdateShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShareInvitation", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShareInvitation indicates an expected call of UpdateShareInvitation
func (mr *MockWellArchitectedAPIMockRecorder) UpdateShareInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShareInvitation", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateShareInvitation), arg0)
}

// UpdateShareInvitationRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateShareInvitationRequest(arg0 *wellarchitected.UpdateShareInvitationInput) (*request.Request, *wellarchitected.UpdateShareInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShareInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateShareInvitationOutput)
	return ret0, ret1
}

// UpdateShareInvitationRequest indicates an expected call of UpdateShareInvitationRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateShareInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShareInvitationRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateShareInvitationRequest), arg0)
}

// UpdateShareInvitationWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateShareInvitationWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateShareInvitationInput, arg2 ...request.Option) (*wellarchitected.UpdateShareInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateShareInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateShareInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShareInvitationWithContext indicates an expected call of UpdateShareInvitationWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateShareInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShareInvitationWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateShareInvitationWithContext), varargs...)
}

// UpdateWorkload mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkload(arg0 *wellarchitected.UpdateWorkloadInput) (*wellarchitected.UpdateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkload", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkload indicates an expected call of UpdateWorkload
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkload", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkload), arg0)
}

// UpdateWorkloadRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadRequest(arg0 *wellarchitected.UpdateWorkloadInput) (*request.Request, *wellarchitected.UpdateWorkloadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkloadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateWorkloadOutput)
	return ret0, ret1
}

// UpdateWorkloadRequest indicates an expected call of UpdateWorkloadRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadRequest), arg0)
}

// UpdateWorkloadShare mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadShare(arg0 *wellarchitected.UpdateWorkloadShareInput) (*wellarchitected.UpdateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkloadShare", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkloadShare indicates an expected call of UpdateWorkloadShare
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadShare", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadShare), arg0)
}

// UpdateWorkloadShareRequest mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadShareRequest(arg0 *wellarchitected.UpdateWorkloadShareInput) (*request.Request, *wellarchitected.UpdateWorkloadShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkloadShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpdateWorkloadShareOutput)
	return ret0, ret1
}

// UpdateWorkloadShareRequest indicates an expected call of UpdateWorkloadShareRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadShareRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadShareRequest), arg0)
}

// UpdateWorkloadShareWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadShareWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateWorkloadShareInput, arg2 ...request.Option) (*wellarchitected.UpdateWorkloadShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkloadShareWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkloadShareWithContext indicates an expected call of UpdateWorkloadShareWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadShareWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadShareWithContext), varargs...)
}

// UpdateWorkloadWithContext mocks base method
func (m *MockWellArchitectedAPI) UpdateWorkloadWithContext(arg0 context.Context, arg1 *wellarchitected.UpdateWorkloadInput, arg2 ...request.Option) (*wellarchitected.UpdateWorkloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkloadWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpdateWorkloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkloadWithContext indicates an expected call of UpdateWorkloadWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpdateWorkloadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkloadWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpdateWorkloadWithContext), varargs...)
}

// UpgradeLensReview mocks base method
func (m *MockWellArchitectedAPI) UpgradeLensReview(arg0 *wellarchitected.UpgradeLensReviewInput) (*wellarchitected.UpgradeLensReviewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeLensReview", arg0)
	ret0, _ := ret[0].(*wellarchitected.UpgradeLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeLensReview indicates an expected call of UpgradeLensReview
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeLensReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLensReview", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeLensReview), arg0)
}

// UpgradeLensReviewRequest mocks base method
func (m *MockWellArchitectedAPI) UpgradeLensReviewRequest(arg0 *wellarchitected.UpgradeLensReviewInput) (*request.Request, *wellarchitected.UpgradeLensReviewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeLensReviewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wellarchitected.UpgradeLensReviewOutput)
	return ret0, ret1
}

// UpgradeLensReviewRequest indicates an expected call of UpgradeLensReviewRequest
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeLensReviewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLensReviewRequest", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeLensReviewRequest), arg0)
}

// UpgradeLensReviewWithContext mocks base method
func (m *MockWellArchitectedAPI) UpgradeLensReviewWithContext(arg0 context.Context, arg1 *wellarchitected.UpgradeLensReviewInput, arg2 ...request.Option) (*wellarchitected.UpgradeLensReviewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeLensReviewWithContext", varargs...)
	ret0, _ := ret[0].(*wellarchitected.UpgradeLensReviewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeLensReviewWithContext indicates an expected call of UpgradeLensReviewWithContext
func (mr *MockWellArchitectedAPIMockRecorder) UpgradeLensReviewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeLensReviewWithContext", reflect.TypeOf((*MockWellArchitectedAPI)(nil).UpgradeLensReviewWithContext), varargs...)
}

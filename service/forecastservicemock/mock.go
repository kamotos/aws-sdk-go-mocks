// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/forecastservice/forecastserviceiface (interfaces: ForecastServiceAPI)

// Package forecastservicemock is a generated GoMock package.
package forecastservicemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	forecastservice "github.com/aws/aws-sdk-go/service/forecastservice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockForecastServiceAPI is a mock of ForecastServiceAPI interface
type MockForecastServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockForecastServiceAPIMockRecorder
}

// MockForecastServiceAPIMockRecorder is the mock recorder for MockForecastServiceAPI
type MockForecastServiceAPIMockRecorder struct {
	mock *MockForecastServiceAPI
}

// NewMockForecastServiceAPI creates a new mock instance
func NewMockForecastServiceAPI(ctrl *gomock.Controller) *MockForecastServiceAPI {
	mock := &MockForecastServiceAPI{ctrl: ctrl}
	mock.recorder = &MockForecastServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockForecastServiceAPI) EXPECT() *MockForecastServiceAPIMockRecorder {
	return m.recorder
}

// CreateDataset mocks base method
func (m *MockForecastServiceAPI) CreateDataset(arg0 *forecastservice.CreateDatasetInput) (*forecastservice.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0)
	ret0, _ := ret[0].(*forecastservice.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset
func (mr *MockForecastServiceAPIMockRecorder) CreateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDataset), arg0)
}

// CreateDatasetGroup mocks base method
func (m *MockForecastServiceAPI) CreateDatasetGroup(arg0 *forecastservice.CreateDatasetGroupInput) (*forecastservice.CreateDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetGroup", arg0)
	ret0, _ := ret[0].(*forecastservice.CreateDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetGroup indicates an expected call of CreateDatasetGroup
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetGroup", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetGroup), arg0)
}

// CreateDatasetGroupRequest mocks base method
func (m *MockForecastServiceAPI) CreateDatasetGroupRequest(arg0 *forecastservice.CreateDatasetGroupInput) (*request.Request, *forecastservice.CreateDatasetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.CreateDatasetGroupOutput)
	return ret0, ret1
}

// CreateDatasetGroupRequest indicates an expected call of CreateDatasetGroupRequest
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetGroupRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetGroupRequest), arg0)
}

// CreateDatasetGroupWithContext mocks base method
func (m *MockForecastServiceAPI) CreateDatasetGroupWithContext(arg0 context.Context, arg1 *forecastservice.CreateDatasetGroupInput, arg2 ...request.Option) (*forecastservice.CreateDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.CreateDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetGroupWithContext indicates an expected call of CreateDatasetGroupWithContext
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetGroupWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetGroupWithContext), varargs...)
}

// CreateDatasetImportJob mocks base method
func (m *MockForecastServiceAPI) CreateDatasetImportJob(arg0 *forecastservice.CreateDatasetImportJobInput) (*forecastservice.CreateDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetImportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.CreateDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetImportJob indicates an expected call of CreateDatasetImportJob
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetImportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetImportJob), arg0)
}

// CreateDatasetImportJobRequest mocks base method
func (m *MockForecastServiceAPI) CreateDatasetImportJobRequest(arg0 *forecastservice.CreateDatasetImportJobInput) (*request.Request, *forecastservice.CreateDatasetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.CreateDatasetImportJobOutput)
	return ret0, ret1
}

// CreateDatasetImportJobRequest indicates an expected call of CreateDatasetImportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetImportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetImportJobRequest), arg0)
}

// CreateDatasetImportJobWithContext mocks base method
func (m *MockForecastServiceAPI) CreateDatasetImportJobWithContext(arg0 context.Context, arg1 *forecastservice.CreateDatasetImportJobInput, arg2 ...request.Option) (*forecastservice.CreateDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.CreateDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetImportJobWithContext indicates an expected call of CreateDatasetImportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetImportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetImportJobWithContext), varargs...)
}

// CreateDatasetRequest mocks base method
func (m *MockForecastServiceAPI) CreateDatasetRequest(arg0 *forecastservice.CreateDatasetInput) (*request.Request, *forecastservice.CreateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.CreateDatasetOutput)
	return ret0, ret1
}

// CreateDatasetRequest indicates an expected call of CreateDatasetRequest
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetRequest), arg0)
}

// CreateDatasetWithContext mocks base method
func (m *MockForecastServiceAPI) CreateDatasetWithContext(arg0 context.Context, arg1 *forecastservice.CreateDatasetInput, arg2 ...request.Option) (*forecastservice.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetWithContext indicates an expected call of CreateDatasetWithContext
func (mr *MockForecastServiceAPIMockRecorder) CreateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateDatasetWithContext), varargs...)
}

// CreateForecast mocks base method
func (m *MockForecastServiceAPI) CreateForecast(arg0 *forecastservice.CreateForecastInput) (*forecastservice.CreateForecastOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForecast", arg0)
	ret0, _ := ret[0].(*forecastservice.CreateForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForecast indicates an expected call of CreateForecast
func (mr *MockForecastServiceAPIMockRecorder) CreateForecast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecast", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateForecast), arg0)
}

// CreateForecastExportJob mocks base method
func (m *MockForecastServiceAPI) CreateForecastExportJob(arg0 *forecastservice.CreateForecastExportJobInput) (*forecastservice.CreateForecastExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForecastExportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.CreateForecastExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForecastExportJob indicates an expected call of CreateForecastExportJob
func (mr *MockForecastServiceAPIMockRecorder) CreateForecastExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecastExportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateForecastExportJob), arg0)
}

// CreateForecastExportJobRequest mocks base method
func (m *MockForecastServiceAPI) CreateForecastExportJobRequest(arg0 *forecastservice.CreateForecastExportJobInput) (*request.Request, *forecastservice.CreateForecastExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForecastExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.CreateForecastExportJobOutput)
	return ret0, ret1
}

// CreateForecastExportJobRequest indicates an expected call of CreateForecastExportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) CreateForecastExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecastExportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateForecastExportJobRequest), arg0)
}

// CreateForecastExportJobWithContext mocks base method
func (m *MockForecastServiceAPI) CreateForecastExportJobWithContext(arg0 context.Context, arg1 *forecastservice.CreateForecastExportJobInput, arg2 ...request.Option) (*forecastservice.CreateForecastExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateForecastExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.CreateForecastExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForecastExportJobWithContext indicates an expected call of CreateForecastExportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) CreateForecastExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecastExportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateForecastExportJobWithContext), varargs...)
}

// CreateForecastRequest mocks base method
func (m *MockForecastServiceAPI) CreateForecastRequest(arg0 *forecastservice.CreateForecastInput) (*request.Request, *forecastservice.CreateForecastOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForecastRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.CreateForecastOutput)
	return ret0, ret1
}

// CreateForecastRequest indicates an expected call of CreateForecastRequest
func (mr *MockForecastServiceAPIMockRecorder) CreateForecastRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecastRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateForecastRequest), arg0)
}

// CreateForecastWithContext mocks base method
func (m *MockForecastServiceAPI) CreateForecastWithContext(arg0 context.Context, arg1 *forecastservice.CreateForecastInput, arg2 ...request.Option) (*forecastservice.CreateForecastOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateForecastWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.CreateForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForecastWithContext indicates an expected call of CreateForecastWithContext
func (mr *MockForecastServiceAPIMockRecorder) CreateForecastWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecastWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreateForecastWithContext), varargs...)
}

// CreatePredictor mocks base method
func (m *MockForecastServiceAPI) CreatePredictor(arg0 *forecastservice.CreatePredictorInput) (*forecastservice.CreatePredictorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePredictor", arg0)
	ret0, _ := ret[0].(*forecastservice.CreatePredictorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePredictor indicates an expected call of CreatePredictor
func (mr *MockForecastServiceAPIMockRecorder) CreatePredictor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePredictor", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreatePredictor), arg0)
}

// CreatePredictorBacktestExportJob mocks base method
func (m *MockForecastServiceAPI) CreatePredictorBacktestExportJob(arg0 *forecastservice.CreatePredictorBacktestExportJobInput) (*forecastservice.CreatePredictorBacktestExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePredictorBacktestExportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.CreatePredictorBacktestExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePredictorBacktestExportJob indicates an expected call of CreatePredictorBacktestExportJob
func (mr *MockForecastServiceAPIMockRecorder) CreatePredictorBacktestExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePredictorBacktestExportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreatePredictorBacktestExportJob), arg0)
}

// CreatePredictorBacktestExportJobRequest mocks base method
func (m *MockForecastServiceAPI) CreatePredictorBacktestExportJobRequest(arg0 *forecastservice.CreatePredictorBacktestExportJobInput) (*request.Request, *forecastservice.CreatePredictorBacktestExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePredictorBacktestExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.CreatePredictorBacktestExportJobOutput)
	return ret0, ret1
}

// CreatePredictorBacktestExportJobRequest indicates an expected call of CreatePredictorBacktestExportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) CreatePredictorBacktestExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePredictorBacktestExportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreatePredictorBacktestExportJobRequest), arg0)
}

// CreatePredictorBacktestExportJobWithContext mocks base method
func (m *MockForecastServiceAPI) CreatePredictorBacktestExportJobWithContext(arg0 context.Context, arg1 *forecastservice.CreatePredictorBacktestExportJobInput, arg2 ...request.Option) (*forecastservice.CreatePredictorBacktestExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePredictorBacktestExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.CreatePredictorBacktestExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePredictorBacktestExportJobWithContext indicates an expected call of CreatePredictorBacktestExportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) CreatePredictorBacktestExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePredictorBacktestExportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreatePredictorBacktestExportJobWithContext), varargs...)
}

// CreatePredictorRequest mocks base method
func (m *MockForecastServiceAPI) CreatePredictorRequest(arg0 *forecastservice.CreatePredictorInput) (*request.Request, *forecastservice.CreatePredictorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePredictorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.CreatePredictorOutput)
	return ret0, ret1
}

// CreatePredictorRequest indicates an expected call of CreatePredictorRequest
func (mr *MockForecastServiceAPIMockRecorder) CreatePredictorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePredictorRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreatePredictorRequest), arg0)
}

// CreatePredictorWithContext mocks base method
func (m *MockForecastServiceAPI) CreatePredictorWithContext(arg0 context.Context, arg1 *forecastservice.CreatePredictorInput, arg2 ...request.Option) (*forecastservice.CreatePredictorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePredictorWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.CreatePredictorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePredictorWithContext indicates an expected call of CreatePredictorWithContext
func (mr *MockForecastServiceAPIMockRecorder) CreatePredictorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePredictorWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).CreatePredictorWithContext), varargs...)
}

// DeleteDataset mocks base method
func (m *MockForecastServiceAPI) DeleteDataset(arg0 *forecastservice.DeleteDatasetInput) (*forecastservice.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0)
	ret0, _ := ret[0].(*forecastservice.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset
func (mr *MockForecastServiceAPIMockRecorder) DeleteDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDataset), arg0)
}

// DeleteDatasetGroup mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetGroup(arg0 *forecastservice.DeleteDatasetGroupInput) (*forecastservice.DeleteDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetGroup", arg0)
	ret0, _ := ret[0].(*forecastservice.DeleteDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetGroup indicates an expected call of DeleteDatasetGroup
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetGroup", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetGroup), arg0)
}

// DeleteDatasetGroupRequest mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetGroupRequest(arg0 *forecastservice.DeleteDatasetGroupInput) (*request.Request, *forecastservice.DeleteDatasetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DeleteDatasetGroupOutput)
	return ret0, ret1
}

// DeleteDatasetGroupRequest indicates an expected call of DeleteDatasetGroupRequest
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetGroupRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetGroupRequest), arg0)
}

// DeleteDatasetGroupWithContext mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetGroupWithContext(arg0 context.Context, arg1 *forecastservice.DeleteDatasetGroupInput, arg2 ...request.Option) (*forecastservice.DeleteDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DeleteDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetGroupWithContext indicates an expected call of DeleteDatasetGroupWithContext
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetGroupWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetGroupWithContext), varargs...)
}

// DeleteDatasetImportJob mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetImportJob(arg0 *forecastservice.DeleteDatasetImportJobInput) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetImportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.DeleteDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetImportJob indicates an expected call of DeleteDatasetImportJob
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetImportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetImportJob), arg0)
}

// DeleteDatasetImportJobRequest mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetImportJobRequest(arg0 *forecastservice.DeleteDatasetImportJobInput) (*request.Request, *forecastservice.DeleteDatasetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DeleteDatasetImportJobOutput)
	return ret0, ret1
}

// DeleteDatasetImportJobRequest indicates an expected call of DeleteDatasetImportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetImportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetImportJobRequest), arg0)
}

// DeleteDatasetImportJobWithContext mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetImportJobWithContext(arg0 context.Context, arg1 *forecastservice.DeleteDatasetImportJobInput, arg2 ...request.Option) (*forecastservice.DeleteDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DeleteDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetImportJobWithContext indicates an expected call of DeleteDatasetImportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetImportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetImportJobWithContext), varargs...)
}

// DeleteDatasetRequest mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetRequest(arg0 *forecastservice.DeleteDatasetInput) (*request.Request, *forecastservice.DeleteDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DeleteDatasetOutput)
	return ret0, ret1
}

// DeleteDatasetRequest indicates an expected call of DeleteDatasetRequest
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetRequest), arg0)
}

// DeleteDatasetWithContext mocks base method
func (m *MockForecastServiceAPI) DeleteDatasetWithContext(arg0 context.Context, arg1 *forecastservice.DeleteDatasetInput, arg2 ...request.Option) (*forecastservice.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetWithContext indicates an expected call of DeleteDatasetWithContext
func (mr *MockForecastServiceAPIMockRecorder) DeleteDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteDatasetWithContext), varargs...)
}

// DeleteForecast mocks base method
func (m *MockForecastServiceAPI) DeleteForecast(arg0 *forecastservice.DeleteForecastInput) (*forecastservice.DeleteForecastOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForecast", arg0)
	ret0, _ := ret[0].(*forecastservice.DeleteForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForecast indicates an expected call of DeleteForecast
func (mr *MockForecastServiceAPIMockRecorder) DeleteForecast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecast", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteForecast), arg0)
}

// DeleteForecastExportJob mocks base method
func (m *MockForecastServiceAPI) DeleteForecastExportJob(arg0 *forecastservice.DeleteForecastExportJobInput) (*forecastservice.DeleteForecastExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForecastExportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.DeleteForecastExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForecastExportJob indicates an expected call of DeleteForecastExportJob
func (mr *MockForecastServiceAPIMockRecorder) DeleteForecastExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecastExportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteForecastExportJob), arg0)
}

// DeleteForecastExportJobRequest mocks base method
func (m *MockForecastServiceAPI) DeleteForecastExportJobRequest(arg0 *forecastservice.DeleteForecastExportJobInput) (*request.Request, *forecastservice.DeleteForecastExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForecastExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DeleteForecastExportJobOutput)
	return ret0, ret1
}

// DeleteForecastExportJobRequest indicates an expected call of DeleteForecastExportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) DeleteForecastExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecastExportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteForecastExportJobRequest), arg0)
}

// DeleteForecastExportJobWithContext mocks base method
func (m *MockForecastServiceAPI) DeleteForecastExportJobWithContext(arg0 context.Context, arg1 *forecastservice.DeleteForecastExportJobInput, arg2 ...request.Option) (*forecastservice.DeleteForecastExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteForecastExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DeleteForecastExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForecastExportJobWithContext indicates an expected call of DeleteForecastExportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) DeleteForecastExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecastExportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteForecastExportJobWithContext), varargs...)
}

// DeleteForecastRequest mocks base method
func (m *MockForecastServiceAPI) DeleteForecastRequest(arg0 *forecastservice.DeleteForecastInput) (*request.Request, *forecastservice.DeleteForecastOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForecastRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DeleteForecastOutput)
	return ret0, ret1
}

// DeleteForecastRequest indicates an expected call of DeleteForecastRequest
func (mr *MockForecastServiceAPIMockRecorder) DeleteForecastRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecastRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteForecastRequest), arg0)
}

// DeleteForecastWithContext mocks base method
func (m *MockForecastServiceAPI) DeleteForecastWithContext(arg0 context.Context, arg1 *forecastservice.DeleteForecastInput, arg2 ...request.Option) (*forecastservice.DeleteForecastOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteForecastWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DeleteForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForecastWithContext indicates an expected call of DeleteForecastWithContext
func (mr *MockForecastServiceAPIMockRecorder) DeleteForecastWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecastWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeleteForecastWithContext), varargs...)
}

// DeletePredictor mocks base method
func (m *MockForecastServiceAPI) DeletePredictor(arg0 *forecastservice.DeletePredictorInput) (*forecastservice.DeletePredictorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePredictor", arg0)
	ret0, _ := ret[0].(*forecastservice.DeletePredictorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePredictor indicates an expected call of DeletePredictor
func (mr *MockForecastServiceAPIMockRecorder) DeletePredictor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePredictor", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeletePredictor), arg0)
}

// DeletePredictorBacktestExportJob mocks base method
func (m *MockForecastServiceAPI) DeletePredictorBacktestExportJob(arg0 *forecastservice.DeletePredictorBacktestExportJobInput) (*forecastservice.DeletePredictorBacktestExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePredictorBacktestExportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.DeletePredictorBacktestExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePredictorBacktestExportJob indicates an expected call of DeletePredictorBacktestExportJob
func (mr *MockForecastServiceAPIMockRecorder) DeletePredictorBacktestExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePredictorBacktestExportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeletePredictorBacktestExportJob), arg0)
}

// DeletePredictorBacktestExportJobRequest mocks base method
func (m *MockForecastServiceAPI) DeletePredictorBacktestExportJobRequest(arg0 *forecastservice.DeletePredictorBacktestExportJobInput) (*request.Request, *forecastservice.DeletePredictorBacktestExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePredictorBacktestExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DeletePredictorBacktestExportJobOutput)
	return ret0, ret1
}

// DeletePredictorBacktestExportJobRequest indicates an expected call of DeletePredictorBacktestExportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) DeletePredictorBacktestExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePredictorBacktestExportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeletePredictorBacktestExportJobRequest), arg0)
}

// DeletePredictorBacktestExportJobWithContext mocks base method
func (m *MockForecastServiceAPI) DeletePredictorBacktestExportJobWithContext(arg0 context.Context, arg1 *forecastservice.DeletePredictorBacktestExportJobInput, arg2 ...request.Option) (*forecastservice.DeletePredictorBacktestExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePredictorBacktestExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DeletePredictorBacktestExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePredictorBacktestExportJobWithContext indicates an expected call of DeletePredictorBacktestExportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) DeletePredictorBacktestExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePredictorBacktestExportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeletePredictorBacktestExportJobWithContext), varargs...)
}

// DeletePredictorRequest mocks base method
func (m *MockForecastServiceAPI) DeletePredictorRequest(arg0 *forecastservice.DeletePredictorInput) (*request.Request, *forecastservice.DeletePredictorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePredictorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DeletePredictorOutput)
	return ret0, ret1
}

// DeletePredictorRequest indicates an expected call of DeletePredictorRequest
func (mr *MockForecastServiceAPIMockRecorder) DeletePredictorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePredictorRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeletePredictorRequest), arg0)
}

// DeletePredictorWithContext mocks base method
func (m *MockForecastServiceAPI) DeletePredictorWithContext(arg0 context.Context, arg1 *forecastservice.DeletePredictorInput, arg2 ...request.Option) (*forecastservice.DeletePredictorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePredictorWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DeletePredictorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePredictorWithContext indicates an expected call of DeletePredictorWithContext
func (mr *MockForecastServiceAPIMockRecorder) DeletePredictorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePredictorWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DeletePredictorWithContext), varargs...)
}

// DescribeDataset mocks base method
func (m *MockForecastServiceAPI) DescribeDataset(arg0 *forecastservice.DescribeDatasetInput) (*forecastservice.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataset", arg0)
	ret0, _ := ret[0].(*forecastservice.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataset indicates an expected call of DescribeDataset
func (mr *MockForecastServiceAPIMockRecorder) DescribeDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataset", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDataset), arg0)
}

// DescribeDatasetGroup mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetGroup(arg0 *forecastservice.DescribeDatasetGroupInput) (*forecastservice.DescribeDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetGroup", arg0)
	ret0, _ := ret[0].(*forecastservice.DescribeDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetGroup indicates an expected call of DescribeDatasetGroup
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetGroup", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetGroup), arg0)
}

// DescribeDatasetGroupRequest mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetGroupRequest(arg0 *forecastservice.DescribeDatasetGroupInput) (*request.Request, *forecastservice.DescribeDatasetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DescribeDatasetGroupOutput)
	return ret0, ret1
}

// DescribeDatasetGroupRequest indicates an expected call of DescribeDatasetGroupRequest
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetGroupRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetGroupRequest), arg0)
}

// DescribeDatasetGroupWithContext mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetGroupWithContext(arg0 context.Context, arg1 *forecastservice.DescribeDatasetGroupInput, arg2 ...request.Option) (*forecastservice.DescribeDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DescribeDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetGroupWithContext indicates an expected call of DescribeDatasetGroupWithContext
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetGroupWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetGroupWithContext), varargs...)
}

// DescribeDatasetImportJob mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetImportJob(arg0 *forecastservice.DescribeDatasetImportJobInput) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetImportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.DescribeDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetImportJob indicates an expected call of DescribeDatasetImportJob
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetImportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetImportJob), arg0)
}

// DescribeDatasetImportJobRequest mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetImportJobRequest(arg0 *forecastservice.DescribeDatasetImportJobInput) (*request.Request, *forecastservice.DescribeDatasetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DescribeDatasetImportJobOutput)
	return ret0, ret1
}

// DescribeDatasetImportJobRequest indicates an expected call of DescribeDatasetImportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetImportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetImportJobRequest), arg0)
}

// DescribeDatasetImportJobWithContext mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetImportJobWithContext(arg0 context.Context, arg1 *forecastservice.DescribeDatasetImportJobInput, arg2 ...request.Option) (*forecastservice.DescribeDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DescribeDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetImportJobWithContext indicates an expected call of DescribeDatasetImportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetImportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetImportJobWithContext), varargs...)
}

// DescribeDatasetRequest mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetRequest(arg0 *forecastservice.DescribeDatasetInput) (*request.Request, *forecastservice.DescribeDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DescribeDatasetOutput)
	return ret0, ret1
}

// DescribeDatasetRequest indicates an expected call of DescribeDatasetRequest
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetRequest), arg0)
}

// DescribeDatasetWithContext mocks base method
func (m *MockForecastServiceAPI) DescribeDatasetWithContext(arg0 context.Context, arg1 *forecastservice.DescribeDatasetInput, arg2 ...request.Option) (*forecastservice.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetWithContext indicates an expected call of DescribeDatasetWithContext
func (mr *MockForecastServiceAPIMockRecorder) DescribeDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeDatasetWithContext), varargs...)
}

// DescribeForecast mocks base method
func (m *MockForecastServiceAPI) DescribeForecast(arg0 *forecastservice.DescribeForecastInput) (*forecastservice.DescribeForecastOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeForecast", arg0)
	ret0, _ := ret[0].(*forecastservice.DescribeForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeForecast indicates an expected call of DescribeForecast
func (mr *MockForecastServiceAPIMockRecorder) DescribeForecast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeForecast", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeForecast), arg0)
}

// DescribeForecastExportJob mocks base method
func (m *MockForecastServiceAPI) DescribeForecastExportJob(arg0 *forecastservice.DescribeForecastExportJobInput) (*forecastservice.DescribeForecastExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeForecastExportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.DescribeForecastExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeForecastExportJob indicates an expected call of DescribeForecastExportJob
func (mr *MockForecastServiceAPIMockRecorder) DescribeForecastExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeForecastExportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeForecastExportJob), arg0)
}

// DescribeForecastExportJobRequest mocks base method
func (m *MockForecastServiceAPI) DescribeForecastExportJobRequest(arg0 *forecastservice.DescribeForecastExportJobInput) (*request.Request, *forecastservice.DescribeForecastExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeForecastExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DescribeForecastExportJobOutput)
	return ret0, ret1
}

// DescribeForecastExportJobRequest indicates an expected call of DescribeForecastExportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) DescribeForecastExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeForecastExportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeForecastExportJobRequest), arg0)
}

// DescribeForecastExportJobWithContext mocks base method
func (m *MockForecastServiceAPI) DescribeForecastExportJobWithContext(arg0 context.Context, arg1 *forecastservice.DescribeForecastExportJobInput, arg2 ...request.Option) (*forecastservice.DescribeForecastExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeForecastExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DescribeForecastExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeForecastExportJobWithContext indicates an expected call of DescribeForecastExportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) DescribeForecastExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeForecastExportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeForecastExportJobWithContext), varargs...)
}

// DescribeForecastRequest mocks base method
func (m *MockForecastServiceAPI) DescribeForecastRequest(arg0 *forecastservice.DescribeForecastInput) (*request.Request, *forecastservice.DescribeForecastOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeForecastRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DescribeForecastOutput)
	return ret0, ret1
}

// DescribeForecastRequest indicates an expected call of DescribeForecastRequest
func (mr *MockForecastServiceAPIMockRecorder) DescribeForecastRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeForecastRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeForecastRequest), arg0)
}

// DescribeForecastWithContext mocks base method
func (m *MockForecastServiceAPI) DescribeForecastWithContext(arg0 context.Context, arg1 *forecastservice.DescribeForecastInput, arg2 ...request.Option) (*forecastservice.DescribeForecastOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeForecastWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DescribeForecastOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeForecastWithContext indicates an expected call of DescribeForecastWithContext
func (mr *MockForecastServiceAPIMockRecorder) DescribeForecastWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeForecastWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribeForecastWithContext), varargs...)
}

// DescribePredictor mocks base method
func (m *MockForecastServiceAPI) DescribePredictor(arg0 *forecastservice.DescribePredictorInput) (*forecastservice.DescribePredictorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePredictor", arg0)
	ret0, _ := ret[0].(*forecastservice.DescribePredictorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePredictor indicates an expected call of DescribePredictor
func (mr *MockForecastServiceAPIMockRecorder) DescribePredictor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePredictor", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribePredictor), arg0)
}

// DescribePredictorBacktestExportJob mocks base method
func (m *MockForecastServiceAPI) DescribePredictorBacktestExportJob(arg0 *forecastservice.DescribePredictorBacktestExportJobInput) (*forecastservice.DescribePredictorBacktestExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePredictorBacktestExportJob", arg0)
	ret0, _ := ret[0].(*forecastservice.DescribePredictorBacktestExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePredictorBacktestExportJob indicates an expected call of DescribePredictorBacktestExportJob
func (mr *MockForecastServiceAPIMockRecorder) DescribePredictorBacktestExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePredictorBacktestExportJob", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribePredictorBacktestExportJob), arg0)
}

// DescribePredictorBacktestExportJobRequest mocks base method
func (m *MockForecastServiceAPI) DescribePredictorBacktestExportJobRequest(arg0 *forecastservice.DescribePredictorBacktestExportJobInput) (*request.Request, *forecastservice.DescribePredictorBacktestExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePredictorBacktestExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DescribePredictorBacktestExportJobOutput)
	return ret0, ret1
}

// DescribePredictorBacktestExportJobRequest indicates an expected call of DescribePredictorBacktestExportJobRequest
func (mr *MockForecastServiceAPIMockRecorder) DescribePredictorBacktestExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePredictorBacktestExportJobRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribePredictorBacktestExportJobRequest), arg0)
}

// DescribePredictorBacktestExportJobWithContext mocks base method
func (m *MockForecastServiceAPI) DescribePredictorBacktestExportJobWithContext(arg0 context.Context, arg1 *forecastservice.DescribePredictorBacktestExportJobInput, arg2 ...request.Option) (*forecastservice.DescribePredictorBacktestExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePredictorBacktestExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DescribePredictorBacktestExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePredictorBacktestExportJobWithContext indicates an expected call of DescribePredictorBacktestExportJobWithContext
func (mr *MockForecastServiceAPIMockRecorder) DescribePredictorBacktestExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePredictorBacktestExportJobWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribePredictorBacktestExportJobWithContext), varargs...)
}

// DescribePredictorRequest mocks base method
func (m *MockForecastServiceAPI) DescribePredictorRequest(arg0 *forecastservice.DescribePredictorInput) (*request.Request, *forecastservice.DescribePredictorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePredictorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.DescribePredictorOutput)
	return ret0, ret1
}

// DescribePredictorRequest indicates an expected call of DescribePredictorRequest
func (mr *MockForecastServiceAPIMockRecorder) DescribePredictorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePredictorRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribePredictorRequest), arg0)
}

// DescribePredictorWithContext mocks base method
func (m *MockForecastServiceAPI) DescribePredictorWithContext(arg0 context.Context, arg1 *forecastservice.DescribePredictorInput, arg2 ...request.Option) (*forecastservice.DescribePredictorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePredictorWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.DescribePredictorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePredictorWithContext indicates an expected call of DescribePredictorWithContext
func (mr *MockForecastServiceAPIMockRecorder) DescribePredictorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePredictorWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).DescribePredictorWithContext), varargs...)
}

// GetAccuracyMetrics mocks base method
func (m *MockForecastServiceAPI) GetAccuracyMetrics(arg0 *forecastservice.GetAccuracyMetricsInput) (*forecastservice.GetAccuracyMetricsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccuracyMetrics", arg0)
	ret0, _ := ret[0].(*forecastservice.GetAccuracyMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccuracyMetrics indicates an expected call of GetAccuracyMetrics
func (mr *MockForecastServiceAPIMockRecorder) GetAccuracyMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccuracyMetrics", reflect.TypeOf((*MockForecastServiceAPI)(nil).GetAccuracyMetrics), arg0)
}

// GetAccuracyMetricsRequest mocks base method
func (m *MockForecastServiceAPI) GetAccuracyMetricsRequest(arg0 *forecastservice.GetAccuracyMetricsInput) (*request.Request, *forecastservice.GetAccuracyMetricsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccuracyMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.GetAccuracyMetricsOutput)
	return ret0, ret1
}

// GetAccuracyMetricsRequest indicates an expected call of GetAccuracyMetricsRequest
func (mr *MockForecastServiceAPIMockRecorder) GetAccuracyMetricsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccuracyMetricsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).GetAccuracyMetricsRequest), arg0)
}

// GetAccuracyMetricsWithContext mocks base method
func (m *MockForecastServiceAPI) GetAccuracyMetricsWithContext(arg0 context.Context, arg1 *forecastservice.GetAccuracyMetricsInput, arg2 ...request.Option) (*forecastservice.GetAccuracyMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccuracyMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.GetAccuracyMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccuracyMetricsWithContext indicates an expected call of GetAccuracyMetricsWithContext
func (mr *MockForecastServiceAPIMockRecorder) GetAccuracyMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccuracyMetricsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).GetAccuracyMetricsWithContext), varargs...)
}

// ListDatasetGroups mocks base method
func (m *MockForecastServiceAPI) ListDatasetGroups(arg0 *forecastservice.ListDatasetGroupsInput) (*forecastservice.ListDatasetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetGroups", arg0)
	ret0, _ := ret[0].(*forecastservice.ListDatasetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetGroups indicates an expected call of ListDatasetGroups
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroups", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetGroups), arg0)
}

// ListDatasetGroupsPages mocks base method
func (m *MockForecastServiceAPI) ListDatasetGroupsPages(arg0 *forecastservice.ListDatasetGroupsInput, arg1 func(*forecastservice.ListDatasetGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetGroupsPages indicates an expected call of ListDatasetGroupsPages
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsPages", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetGroupsPages), arg0, arg1)
}

// ListDatasetGroupsPagesWithContext mocks base method
func (m *MockForecastServiceAPI) ListDatasetGroupsPagesWithContext(arg0 context.Context, arg1 *forecastservice.ListDatasetGroupsInput, arg2 func(*forecastservice.ListDatasetGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetGroupsPagesWithContext indicates an expected call of ListDatasetGroupsPagesWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsPagesWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetGroupsPagesWithContext), varargs...)
}

// ListDatasetGroupsRequest mocks base method
func (m *MockForecastServiceAPI) ListDatasetGroupsRequest(arg0 *forecastservice.ListDatasetGroupsInput) (*request.Request, *forecastservice.ListDatasetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListDatasetGroupsOutput)
	return ret0, ret1
}

// ListDatasetGroupsRequest indicates an expected call of ListDatasetGroupsRequest
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetGroupsRequest), arg0)
}

// ListDatasetGroupsWithContext mocks base method
func (m *MockForecastServiceAPI) ListDatasetGroupsWithContext(arg0 context.Context, arg1 *forecastservice.ListDatasetGroupsInput, arg2 ...request.Option) (*forecastservice.ListDatasetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListDatasetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetGroupsWithContext indicates an expected call of ListDatasetGroupsWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetGroupsWithContext), varargs...)
}

// ListDatasetImportJobs mocks base method
func (m *MockForecastServiceAPI) ListDatasetImportJobs(arg0 *forecastservice.ListDatasetImportJobsInput) (*forecastservice.ListDatasetImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetImportJobs", arg0)
	ret0, _ := ret[0].(*forecastservice.ListDatasetImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetImportJobs indicates an expected call of ListDatasetImportJobs
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobs", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetImportJobs), arg0)
}

// ListDatasetImportJobsPages mocks base method
func (m *MockForecastServiceAPI) ListDatasetImportJobsPages(arg0 *forecastservice.ListDatasetImportJobsInput, arg1 func(*forecastservice.ListDatasetImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetImportJobsPages indicates an expected call of ListDatasetImportJobsPages
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsPages", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetImportJobsPages), arg0, arg1)
}

// ListDatasetImportJobsPagesWithContext mocks base method
func (m *MockForecastServiceAPI) ListDatasetImportJobsPagesWithContext(arg0 context.Context, arg1 *forecastservice.ListDatasetImportJobsInput, arg2 func(*forecastservice.ListDatasetImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetImportJobsPagesWithContext indicates an expected call of ListDatasetImportJobsPagesWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsPagesWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetImportJobsPagesWithContext), varargs...)
}

// ListDatasetImportJobsRequest mocks base method
func (m *MockForecastServiceAPI) ListDatasetImportJobsRequest(arg0 *forecastservice.ListDatasetImportJobsInput) (*request.Request, *forecastservice.ListDatasetImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListDatasetImportJobsOutput)
	return ret0, ret1
}

// ListDatasetImportJobsRequest indicates an expected call of ListDatasetImportJobsRequest
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetImportJobsRequest), arg0)
}

// ListDatasetImportJobsWithContext mocks base method
func (m *MockForecastServiceAPI) ListDatasetImportJobsWithContext(arg0 context.Context, arg1 *forecastservice.ListDatasetImportJobsInput, arg2 ...request.Option) (*forecastservice.ListDatasetImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListDatasetImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetImportJobsWithContext indicates an expected call of ListDatasetImportJobsWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetImportJobsWithContext), varargs...)
}

// ListDatasets mocks base method
func (m *MockForecastServiceAPI) ListDatasets(arg0 *forecastservice.ListDatasetsInput) (*forecastservice.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", arg0)
	ret0, _ := ret[0].(*forecastservice.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets
func (mr *MockForecastServiceAPIMockRecorder) ListDatasets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasets), arg0)
}

// ListDatasetsPages mocks base method
func (m *MockForecastServiceAPI) ListDatasetsPages(arg0 *forecastservice.ListDatasetsInput, arg1 func(*forecastservice.ListDatasetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPages indicates an expected call of ListDatasetsPages
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPages", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetsPages), arg0, arg1)
}

// ListDatasetsPagesWithContext mocks base method
func (m *MockForecastServiceAPI) ListDatasetsPagesWithContext(arg0 context.Context, arg1 *forecastservice.ListDatasetsInput, arg2 func(*forecastservice.ListDatasetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPagesWithContext indicates an expected call of ListDatasetsPagesWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPagesWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetsPagesWithContext), varargs...)
}

// ListDatasetsRequest mocks base method
func (m *MockForecastServiceAPI) ListDatasetsRequest(arg0 *forecastservice.ListDatasetsInput) (*request.Request, *forecastservice.ListDatasetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListDatasetsOutput)
	return ret0, ret1
}

// ListDatasetsRequest indicates an expected call of ListDatasetsRequest
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetsRequest), arg0)
}

// ListDatasetsWithContext mocks base method
func (m *MockForecastServiceAPI) ListDatasetsWithContext(arg0 context.Context, arg1 *forecastservice.ListDatasetsInput, arg2 ...request.Option) (*forecastservice.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetsWithContext indicates an expected call of ListDatasetsWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListDatasetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListDatasetsWithContext), varargs...)
}

// ListForecastExportJobs mocks base method
func (m *MockForecastServiceAPI) ListForecastExportJobs(arg0 *forecastservice.ListForecastExportJobsInput) (*forecastservice.ListForecastExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastExportJobs", arg0)
	ret0, _ := ret[0].(*forecastservice.ListForecastExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecastExportJobs indicates an expected call of ListForecastExportJobs
func (mr *MockForecastServiceAPIMockRecorder) ListForecastExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastExportJobs", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastExportJobs), arg0)
}

// ListForecastExportJobsPages mocks base method
func (m *MockForecastServiceAPI) ListForecastExportJobsPages(arg0 *forecastservice.ListForecastExportJobsInput, arg1 func(*forecastservice.ListForecastExportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastExportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListForecastExportJobsPages indicates an expected call of ListForecastExportJobsPages
func (mr *MockForecastServiceAPIMockRecorder) ListForecastExportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastExportJobsPages", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastExportJobsPages), arg0, arg1)
}

// ListForecastExportJobsPagesWithContext mocks base method
func (m *MockForecastServiceAPI) ListForecastExportJobsPagesWithContext(arg0 context.Context, arg1 *forecastservice.ListForecastExportJobsInput, arg2 func(*forecastservice.ListForecastExportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListForecastExportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListForecastExportJobsPagesWithContext indicates an expected call of ListForecastExportJobsPagesWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListForecastExportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastExportJobsPagesWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastExportJobsPagesWithContext), varargs...)
}

// ListForecastExportJobsRequest mocks base method
func (m *MockForecastServiceAPI) ListForecastExportJobsRequest(arg0 *forecastservice.ListForecastExportJobsInput) (*request.Request, *forecastservice.ListForecastExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListForecastExportJobsOutput)
	return ret0, ret1
}

// ListForecastExportJobsRequest indicates an expected call of ListForecastExportJobsRequest
func (mr *MockForecastServiceAPIMockRecorder) ListForecastExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastExportJobsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastExportJobsRequest), arg0)
}

// ListForecastExportJobsWithContext mocks base method
func (m *MockForecastServiceAPI) ListForecastExportJobsWithContext(arg0 context.Context, arg1 *forecastservice.ListForecastExportJobsInput, arg2 ...request.Option) (*forecastservice.ListForecastExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListForecastExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListForecastExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecastExportJobsWithContext indicates an expected call of ListForecastExportJobsWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListForecastExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastExportJobsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastExportJobsWithContext), varargs...)
}

// ListForecasts mocks base method
func (m *MockForecastServiceAPI) ListForecasts(arg0 *forecastservice.ListForecastsInput) (*forecastservice.ListForecastsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecasts", arg0)
	ret0, _ := ret[0].(*forecastservice.ListForecastsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecasts indicates an expected call of ListForecasts
func (mr *MockForecastServiceAPIMockRecorder) ListForecasts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecasts", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecasts), arg0)
}

// ListForecastsPages mocks base method
func (m *MockForecastServiceAPI) ListForecastsPages(arg0 *forecastservice.ListForecastsInput, arg1 func(*forecastservice.ListForecastsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListForecastsPages indicates an expected call of ListForecastsPages
func (mr *MockForecastServiceAPIMockRecorder) ListForecastsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastsPages", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastsPages), arg0, arg1)
}

// ListForecastsPagesWithContext mocks base method
func (m *MockForecastServiceAPI) ListForecastsPagesWithContext(arg0 context.Context, arg1 *forecastservice.ListForecastsInput, arg2 func(*forecastservice.ListForecastsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListForecastsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListForecastsPagesWithContext indicates an expected call of ListForecastsPagesWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListForecastsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastsPagesWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastsPagesWithContext), varargs...)
}

// ListForecastsRequest mocks base method
func (m *MockForecastServiceAPI) ListForecastsRequest(arg0 *forecastservice.ListForecastsInput) (*request.Request, *forecastservice.ListForecastsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListForecastsOutput)
	return ret0, ret1
}

// ListForecastsRequest indicates an expected call of ListForecastsRequest
func (mr *MockForecastServiceAPIMockRecorder) ListForecastsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastsRequest), arg0)
}

// ListForecastsWithContext mocks base method
func (m *MockForecastServiceAPI) ListForecastsWithContext(arg0 context.Context, arg1 *forecastservice.ListForecastsInput, arg2 ...request.Option) (*forecastservice.ListForecastsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListForecastsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListForecastsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecastsWithContext indicates an expected call of ListForecastsWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListForecastsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListForecastsWithContext), varargs...)
}

// ListPredictorBacktestExportJobs mocks base method
func (m *MockForecastServiceAPI) ListPredictorBacktestExportJobs(arg0 *forecastservice.ListPredictorBacktestExportJobsInput) (*forecastservice.ListPredictorBacktestExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPredictorBacktestExportJobs", arg0)
	ret0, _ := ret[0].(*forecastservice.ListPredictorBacktestExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPredictorBacktestExportJobs indicates an expected call of ListPredictorBacktestExportJobs
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorBacktestExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorBacktestExportJobs", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorBacktestExportJobs), arg0)
}

// ListPredictorBacktestExportJobsPages mocks base method
func (m *MockForecastServiceAPI) ListPredictorBacktestExportJobsPages(arg0 *forecastservice.ListPredictorBacktestExportJobsInput, arg1 func(*forecastservice.ListPredictorBacktestExportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPredictorBacktestExportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPredictorBacktestExportJobsPages indicates an expected call of ListPredictorBacktestExportJobsPages
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorBacktestExportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorBacktestExportJobsPages", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorBacktestExportJobsPages), arg0, arg1)
}

// ListPredictorBacktestExportJobsPagesWithContext mocks base method
func (m *MockForecastServiceAPI) ListPredictorBacktestExportJobsPagesWithContext(arg0 context.Context, arg1 *forecastservice.ListPredictorBacktestExportJobsInput, arg2 func(*forecastservice.ListPredictorBacktestExportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPredictorBacktestExportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPredictorBacktestExportJobsPagesWithContext indicates an expected call of ListPredictorBacktestExportJobsPagesWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorBacktestExportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorBacktestExportJobsPagesWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorBacktestExportJobsPagesWithContext), varargs...)
}

// ListPredictorBacktestExportJobsRequest mocks base method
func (m *MockForecastServiceAPI) ListPredictorBacktestExportJobsRequest(arg0 *forecastservice.ListPredictorBacktestExportJobsInput) (*request.Request, *forecastservice.ListPredictorBacktestExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPredictorBacktestExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListPredictorBacktestExportJobsOutput)
	return ret0, ret1
}

// ListPredictorBacktestExportJobsRequest indicates an expected call of ListPredictorBacktestExportJobsRequest
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorBacktestExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorBacktestExportJobsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorBacktestExportJobsRequest), arg0)
}

// ListPredictorBacktestExportJobsWithContext mocks base method
func (m *MockForecastServiceAPI) ListPredictorBacktestExportJobsWithContext(arg0 context.Context, arg1 *forecastservice.ListPredictorBacktestExportJobsInput, arg2 ...request.Option) (*forecastservice.ListPredictorBacktestExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPredictorBacktestExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListPredictorBacktestExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPredictorBacktestExportJobsWithContext indicates an expected call of ListPredictorBacktestExportJobsWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorBacktestExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorBacktestExportJobsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorBacktestExportJobsWithContext), varargs...)
}

// ListPredictors mocks base method
func (m *MockForecastServiceAPI) ListPredictors(arg0 *forecastservice.ListPredictorsInput) (*forecastservice.ListPredictorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPredictors", arg0)
	ret0, _ := ret[0].(*forecastservice.ListPredictorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPredictors indicates an expected call of ListPredictors
func (mr *MockForecastServiceAPIMockRecorder) ListPredictors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictors", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictors), arg0)
}

// ListPredictorsPages mocks base method
func (m *MockForecastServiceAPI) ListPredictorsPages(arg0 *forecastservice.ListPredictorsInput, arg1 func(*forecastservice.ListPredictorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPredictorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPredictorsPages indicates an expected call of ListPredictorsPages
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorsPages", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorsPages), arg0, arg1)
}

// ListPredictorsPagesWithContext mocks base method
func (m *MockForecastServiceAPI) ListPredictorsPagesWithContext(arg0 context.Context, arg1 *forecastservice.ListPredictorsInput, arg2 func(*forecastservice.ListPredictorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPredictorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPredictorsPagesWithContext indicates an expected call of ListPredictorsPagesWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorsPagesWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorsPagesWithContext), varargs...)
}

// ListPredictorsRequest mocks base method
func (m *MockForecastServiceAPI) ListPredictorsRequest(arg0 *forecastservice.ListPredictorsInput) (*request.Request, *forecastservice.ListPredictorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPredictorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListPredictorsOutput)
	return ret0, ret1
}

// ListPredictorsRequest indicates an expected call of ListPredictorsRequest
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorsRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorsRequest), arg0)
}

// ListPredictorsWithContext mocks base method
func (m *MockForecastServiceAPI) ListPredictorsWithContext(arg0 context.Context, arg1 *forecastservice.ListPredictorsInput, arg2 ...request.Option) (*forecastservice.ListPredictorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPredictorsWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListPredictorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPredictorsWithContext indicates an expected call of ListPredictorsWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListPredictorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPredictorsWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListPredictorsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockForecastServiceAPI) ListTagsForResource(arg0 *forecastservice.ListTagsForResourceInput) (*forecastservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*forecastservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockForecastServiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockForecastServiceAPI) ListTagsForResourceRequest(arg0 *forecastservice.ListTagsForResourceInput) (*request.Request, *forecastservice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockForecastServiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockForecastServiceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *forecastservice.ListTagsForResourceInput, arg2 ...request.Option) (*forecastservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockForecastServiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockForecastServiceAPI) TagResource(arg0 *forecastservice.TagResourceInput) (*forecastservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*forecastservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockForecastServiceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockForecastServiceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockForecastServiceAPI) TagResourceRequest(arg0 *forecastservice.TagResourceInput) (*request.Request, *forecastservice.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockForecastServiceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockForecastServiceAPI) TagResourceWithContext(arg0 context.Context, arg1 *forecastservice.TagResourceInput, arg2 ...request.Option) (*forecastservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockForecastServiceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockForecastServiceAPI) UntagResource(arg0 *forecastservice.UntagResourceInput) (*forecastservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*forecastservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockForecastServiceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockForecastServiceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockForecastServiceAPI) UntagResourceRequest(arg0 *forecastservice.UntagResourceInput) (*request.Request, *forecastservice.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockForecastServiceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockForecastServiceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *forecastservice.UntagResourceInput, arg2 ...request.Option) (*forecastservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockForecastServiceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDatasetGroup mocks base method
func (m *MockForecastServiceAPI) UpdateDatasetGroup(arg0 *forecastservice.UpdateDatasetGroupInput) (*forecastservice.UpdateDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetGroup", arg0)
	ret0, _ := ret[0].(*forecastservice.UpdateDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetGroup indicates an expected call of UpdateDatasetGroup
func (mr *MockForecastServiceAPIMockRecorder) UpdateDatasetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetGroup", reflect.TypeOf((*MockForecastServiceAPI)(nil).UpdateDatasetGroup), arg0)
}

// UpdateDatasetGroupRequest mocks base method
func (m *MockForecastServiceAPI) UpdateDatasetGroupRequest(arg0 *forecastservice.UpdateDatasetGroupInput) (*request.Request, *forecastservice.UpdateDatasetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*forecastservice.UpdateDatasetGroupOutput)
	return ret0, ret1
}

// UpdateDatasetGroupRequest indicates an expected call of UpdateDatasetGroupRequest
func (mr *MockForecastServiceAPIMockRecorder) UpdateDatasetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetGroupRequest", reflect.TypeOf((*MockForecastServiceAPI)(nil).UpdateDatasetGroupRequest), arg0)
}

// UpdateDatasetGroupWithContext mocks base method
func (m *MockForecastServiceAPI) UpdateDatasetGroupWithContext(arg0 context.Context, arg1 *forecastservice.UpdateDatasetGroupInput, arg2 ...request.Option) (*forecastservice.UpdateDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatasetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*forecastservice.UpdateDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetGroupWithContext indicates an expected call of UpdateDatasetGroupWithContext
func (mr *MockForecastServiceAPIMockRecorder) UpdateDatasetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetGroupWithContext", reflect.TypeOf((*MockForecastServiceAPI)(nil).UpdateDatasetGroupWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/gluedatabrew/gluedatabrewiface (interfaces: GlueDataBrewAPI)

// Package gluedatabrewmock is a generated GoMock package.
package gluedatabrewmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	gluedatabrew "github.com/aws/aws-sdk-go/service/gluedatabrew"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGlueDataBrewAPI is a mock of GlueDataBrewAPI interface
type MockGlueDataBrewAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGlueDataBrewAPIMockRecorder
}

// MockGlueDataBrewAPIMockRecorder is the mock recorder for MockGlueDataBrewAPI
type MockGlueDataBrewAPIMockRecorder struct {
	mock *MockGlueDataBrewAPI
}

// NewMockGlueDataBrewAPI creates a new mock instance
func NewMockGlueDataBrewAPI(ctrl *gomock.Controller) *MockGlueDataBrewAPI {
	mock := &MockGlueDataBrewAPI{ctrl: ctrl}
	mock.recorder = &MockGlueDataBrewAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlueDataBrewAPI) EXPECT() *MockGlueDataBrewAPIMockRecorder {
	return m.recorder
}

// BatchDeleteRecipeVersion mocks base method
func (m *MockGlueDataBrewAPI) BatchDeleteRecipeVersion(arg0 *gluedatabrew.BatchDeleteRecipeVersionInput) (*gluedatabrew.BatchDeleteRecipeVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteRecipeVersion", arg0)
	ret0, _ := ret[0].(*gluedatabrew.BatchDeleteRecipeVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteRecipeVersion indicates an expected call of BatchDeleteRecipeVersion
func (mr *MockGlueDataBrewAPIMockRecorder) BatchDeleteRecipeVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteRecipeVersion", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).BatchDeleteRecipeVersion), arg0)
}

// BatchDeleteRecipeVersionRequest mocks base method
func (m *MockGlueDataBrewAPI) BatchDeleteRecipeVersionRequest(arg0 *gluedatabrew.BatchDeleteRecipeVersionInput) (*request.Request, *gluedatabrew.BatchDeleteRecipeVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteRecipeVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.BatchDeleteRecipeVersionOutput)
	return ret0, ret1
}

// BatchDeleteRecipeVersionRequest indicates an expected call of BatchDeleteRecipeVersionRequest
func (mr *MockGlueDataBrewAPIMockRecorder) BatchDeleteRecipeVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteRecipeVersionRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).BatchDeleteRecipeVersionRequest), arg0)
}

// BatchDeleteRecipeVersionWithContext mocks base method
func (m *MockGlueDataBrewAPI) BatchDeleteRecipeVersionWithContext(arg0 context.Context, arg1 *gluedatabrew.BatchDeleteRecipeVersionInput, arg2 ...request.Option) (*gluedatabrew.BatchDeleteRecipeVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteRecipeVersionWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.BatchDeleteRecipeVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteRecipeVersionWithContext indicates an expected call of BatchDeleteRecipeVersionWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) BatchDeleteRecipeVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteRecipeVersionWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).BatchDeleteRecipeVersionWithContext), varargs...)
}

// CreateDataset mocks base method
func (m *MockGlueDataBrewAPI) CreateDataset(arg0 *gluedatabrew.CreateDatasetInput) (*gluedatabrew.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0)
	ret0, _ := ret[0].(*gluedatabrew.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset
func (mr *MockGlueDataBrewAPIMockRecorder) CreateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateDataset), arg0)
}

// CreateDatasetRequest mocks base method
func (m *MockGlueDataBrewAPI) CreateDatasetRequest(arg0 *gluedatabrew.CreateDatasetInput) (*request.Request, *gluedatabrew.CreateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.CreateDatasetOutput)
	return ret0, ret1
}

// CreateDatasetRequest indicates an expected call of CreateDatasetRequest
func (mr *MockGlueDataBrewAPIMockRecorder) CreateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateDatasetRequest), arg0)
}

// CreateDatasetWithContext mocks base method
func (m *MockGlueDataBrewAPI) CreateDatasetWithContext(arg0 context.Context, arg1 *gluedatabrew.CreateDatasetInput, arg2 ...request.Option) (*gluedatabrew.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetWithContext indicates an expected call of CreateDatasetWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) CreateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateDatasetWithContext), varargs...)
}

// CreateProfileJob mocks base method
func (m *MockGlueDataBrewAPI) CreateProfileJob(arg0 *gluedatabrew.CreateProfileJobInput) (*gluedatabrew.CreateProfileJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileJob", arg0)
	ret0, _ := ret[0].(*gluedatabrew.CreateProfileJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileJob indicates an expected call of CreateProfileJob
func (mr *MockGlueDataBrewAPIMockRecorder) CreateProfileJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileJob", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateProfileJob), arg0)
}

// CreateProfileJobRequest mocks base method
func (m *MockGlueDataBrewAPI) CreateProfileJobRequest(arg0 *gluedatabrew.CreateProfileJobInput) (*request.Request, *gluedatabrew.CreateProfileJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.CreateProfileJobOutput)
	return ret0, ret1
}

// CreateProfileJobRequest indicates an expected call of CreateProfileJobRequest
func (mr *MockGlueDataBrewAPIMockRecorder) CreateProfileJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileJobRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateProfileJobRequest), arg0)
}

// CreateProfileJobWithContext mocks base method
func (m *MockGlueDataBrewAPI) CreateProfileJobWithContext(arg0 context.Context, arg1 *gluedatabrew.CreateProfileJobInput, arg2 ...request.Option) (*gluedatabrew.CreateProfileJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfileJobWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.CreateProfileJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfileJobWithContext indicates an expected call of CreateProfileJobWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) CreateProfileJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileJobWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateProfileJobWithContext), varargs...)
}

// CreateProject mocks base method
func (m *MockGlueDataBrewAPI) CreateProject(arg0 *gluedatabrew.CreateProjectInput) (*gluedatabrew.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(*gluedatabrew.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockGlueDataBrewAPIMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateProject), arg0)
}

// CreateProjectRequest mocks base method
func (m *MockGlueDataBrewAPI) CreateProjectRequest(arg0 *gluedatabrew.CreateProjectInput) (*request.Request, *gluedatabrew.CreateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.CreateProjectOutput)
	return ret0, ret1
}

// CreateProjectRequest indicates an expected call of CreateProjectRequest
func (mr *MockGlueDataBrewAPIMockRecorder) CreateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateProjectRequest), arg0)
}

// CreateProjectWithContext mocks base method
func (m *MockGlueDataBrewAPI) CreateProjectWithContext(arg0 context.Context, arg1 *gluedatabrew.CreateProjectInput, arg2 ...request.Option) (*gluedatabrew.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectWithContext indicates an expected call of CreateProjectWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) CreateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateProjectWithContext), varargs...)
}

// CreateRecipe mocks base method
func (m *MockGlueDataBrewAPI) CreateRecipe(arg0 *gluedatabrew.CreateRecipeInput) (*gluedatabrew.CreateRecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", arg0)
	ret0, _ := ret[0].(*gluedatabrew.CreateRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe
func (mr *MockGlueDataBrewAPIMockRecorder) CreateRecipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateRecipe), arg0)
}

// CreateRecipeJob mocks base method
func (m *MockGlueDataBrewAPI) CreateRecipeJob(arg0 *gluedatabrew.CreateRecipeJobInput) (*gluedatabrew.CreateRecipeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipeJob", arg0)
	ret0, _ := ret[0].(*gluedatabrew.CreateRecipeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipeJob indicates an expected call of CreateRecipeJob
func (mr *MockGlueDataBrewAPIMockRecorder) CreateRecipeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeJob", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateRecipeJob), arg0)
}

// CreateRecipeJobRequest mocks base method
func (m *MockGlueDataBrewAPI) CreateRecipeJobRequest(arg0 *gluedatabrew.CreateRecipeJobInput) (*request.Request, *gluedatabrew.CreateRecipeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.CreateRecipeJobOutput)
	return ret0, ret1
}

// CreateRecipeJobRequest indicates an expected call of CreateRecipeJobRequest
func (mr *MockGlueDataBrewAPIMockRecorder) CreateRecipeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeJobRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateRecipeJobRequest), arg0)
}

// CreateRecipeJobWithContext mocks base method
func (m *MockGlueDataBrewAPI) CreateRecipeJobWithContext(arg0 context.Context, arg1 *gluedatabrew.CreateRecipeJobInput, arg2 ...request.Option) (*gluedatabrew.CreateRecipeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecipeJobWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.CreateRecipeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipeJobWithContext indicates an expected call of CreateRecipeJobWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) CreateRecipeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeJobWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateRecipeJobWithContext), varargs...)
}

// CreateRecipeRequest mocks base method
func (m *MockGlueDataBrewAPI) CreateRecipeRequest(arg0 *gluedatabrew.CreateRecipeInput) (*request.Request, *gluedatabrew.CreateRecipeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.CreateRecipeOutput)
	return ret0, ret1
}

// CreateRecipeRequest indicates an expected call of CreateRecipeRequest
func (mr *MockGlueDataBrewAPIMockRecorder) CreateRecipeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateRecipeRequest), arg0)
}

// CreateRecipeWithContext mocks base method
func (m *MockGlueDataBrewAPI) CreateRecipeWithContext(arg0 context.Context, arg1 *gluedatabrew.CreateRecipeInput, arg2 ...request.Option) (*gluedatabrew.CreateRecipeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecipeWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.CreateRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipeWithContext indicates an expected call of CreateRecipeWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) CreateRecipeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateRecipeWithContext), varargs...)
}

// CreateSchedule mocks base method
func (m *MockGlueDataBrewAPI) CreateSchedule(arg0 *gluedatabrew.CreateScheduleInput) (*gluedatabrew.CreateScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", arg0)
	ret0, _ := ret[0].(*gluedatabrew.CreateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule
func (mr *MockGlueDataBrewAPIMockRecorder) CreateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateSchedule), arg0)
}

// CreateScheduleRequest mocks base method
func (m *MockGlueDataBrewAPI) CreateScheduleRequest(arg0 *gluedatabrew.CreateScheduleInput) (*request.Request, *gluedatabrew.CreateScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.CreateScheduleOutput)
	return ret0, ret1
}

// CreateScheduleRequest indicates an expected call of CreateScheduleRequest
func (mr *MockGlueDataBrewAPIMockRecorder) CreateScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateScheduleRequest), arg0)
}

// CreateScheduleWithContext mocks base method
func (m *MockGlueDataBrewAPI) CreateScheduleWithContext(arg0 context.Context, arg1 *gluedatabrew.CreateScheduleInput, arg2 ...request.Option) (*gluedatabrew.CreateScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.CreateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduleWithContext indicates an expected call of CreateScheduleWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) CreateScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).CreateScheduleWithContext), varargs...)
}

// DeleteDataset mocks base method
func (m *MockGlueDataBrewAPI) DeleteDataset(arg0 *gluedatabrew.DeleteDatasetInput) (*gluedatabrew.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteDataset), arg0)
}

// DeleteDatasetRequest mocks base method
func (m *MockGlueDataBrewAPI) DeleteDatasetRequest(arg0 *gluedatabrew.DeleteDatasetInput) (*request.Request, *gluedatabrew.DeleteDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DeleteDatasetOutput)
	return ret0, ret1
}

// DeleteDatasetRequest indicates an expected call of DeleteDatasetRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteDatasetRequest), arg0)
}

// DeleteDatasetWithContext mocks base method
func (m *MockGlueDataBrewAPI) DeleteDatasetWithContext(arg0 context.Context, arg1 *gluedatabrew.DeleteDatasetInput, arg2 ...request.Option) (*gluedatabrew.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetWithContext indicates an expected call of DeleteDatasetWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteDatasetWithContext), varargs...)
}

// DeleteJob mocks base method
func (m *MockGlueDataBrewAPI) DeleteJob(arg0 *gluedatabrew.DeleteJobInput) (*gluedatabrew.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method
func (m *MockGlueDataBrewAPI) DeleteJobRequest(arg0 *gluedatabrew.DeleteJobInput) (*request.Request, *gluedatabrew.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method
func (m *MockGlueDataBrewAPI) DeleteJobWithContext(arg0 context.Context, arg1 *gluedatabrew.DeleteJobInput, arg2 ...request.Option) (*gluedatabrew.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteProject mocks base method
func (m *MockGlueDataBrewAPI) DeleteProject(arg0 *gluedatabrew.DeleteProjectInput) (*gluedatabrew.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteProject), arg0)
}

// DeleteProjectRequest mocks base method
func (m *MockGlueDataBrewAPI) DeleteProjectRequest(arg0 *gluedatabrew.DeleteProjectInput) (*request.Request, *gluedatabrew.DeleteProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DeleteProjectOutput)
	return ret0, ret1
}

// DeleteProjectRequest indicates an expected call of DeleteProjectRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteProjectRequest), arg0)
}

// DeleteProjectWithContext mocks base method
func (m *MockGlueDataBrewAPI) DeleteProjectWithContext(arg0 context.Context, arg1 *gluedatabrew.DeleteProjectInput, arg2 ...request.Option) (*gluedatabrew.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectWithContext indicates an expected call of DeleteProjectWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteProjectWithContext), varargs...)
}

// DeleteRecipeVersion mocks base method
func (m *MockGlueDataBrewAPI) DeleteRecipeVersion(arg0 *gluedatabrew.DeleteRecipeVersionInput) (*gluedatabrew.DeleteRecipeVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeVersion", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DeleteRecipeVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipeVersion indicates an expected call of DeleteRecipeVersion
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteRecipeVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeVersion", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteRecipeVersion), arg0)
}

// DeleteRecipeVersionRequest mocks base method
func (m *MockGlueDataBrewAPI) DeleteRecipeVersionRequest(arg0 *gluedatabrew.DeleteRecipeVersionInput) (*request.Request, *gluedatabrew.DeleteRecipeVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DeleteRecipeVersionOutput)
	return ret0, ret1
}

// DeleteRecipeVersionRequest indicates an expected call of DeleteRecipeVersionRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteRecipeVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeVersionRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteRecipeVersionRequest), arg0)
}

// DeleteRecipeVersionWithContext mocks base method
func (m *MockGlueDataBrewAPI) DeleteRecipeVersionWithContext(arg0 context.Context, arg1 *gluedatabrew.DeleteRecipeVersionInput, arg2 ...request.Option) (*gluedatabrew.DeleteRecipeVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecipeVersionWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DeleteRecipeVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipeVersionWithContext indicates an expected call of DeleteRecipeVersionWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteRecipeVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeVersionWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteRecipeVersionWithContext), varargs...)
}

// DeleteSchedule mocks base method
func (m *MockGlueDataBrewAPI) DeleteSchedule(arg0 *gluedatabrew.DeleteScheduleInput) (*gluedatabrew.DeleteScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DeleteScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchedule indicates an expected call of DeleteSchedule
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteSchedule), arg0)
}

// DeleteScheduleRequest mocks base method
func (m *MockGlueDataBrewAPI) DeleteScheduleRequest(arg0 *gluedatabrew.DeleteScheduleInput) (*request.Request, *gluedatabrew.DeleteScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DeleteScheduleOutput)
	return ret0, ret1
}

// DeleteScheduleRequest indicates an expected call of DeleteScheduleRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduleRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteScheduleRequest), arg0)
}

// DeleteScheduleWithContext mocks base method
func (m *MockGlueDataBrewAPI) DeleteScheduleWithContext(arg0 context.Context, arg1 *gluedatabrew.DeleteScheduleInput, arg2 ...request.Option) (*gluedatabrew.DeleteScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DeleteScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteScheduleWithContext indicates an expected call of DeleteScheduleWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DeleteScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduleWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DeleteScheduleWithContext), varargs...)
}

// DescribeDataset mocks base method
func (m *MockGlueDataBrewAPI) DescribeDataset(arg0 *gluedatabrew.DescribeDatasetInput) (*gluedatabrew.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataset", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataset indicates an expected call of DescribeDataset
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataset", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeDataset), arg0)
}

// DescribeDatasetRequest mocks base method
func (m *MockGlueDataBrewAPI) DescribeDatasetRequest(arg0 *gluedatabrew.DescribeDatasetInput) (*request.Request, *gluedatabrew.DescribeDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DescribeDatasetOutput)
	return ret0, ret1
}

// DescribeDatasetRequest indicates an expected call of DescribeDatasetRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeDatasetRequest), arg0)
}

// DescribeDatasetWithContext mocks base method
func (m *MockGlueDataBrewAPI) DescribeDatasetWithContext(arg0 context.Context, arg1 *gluedatabrew.DescribeDatasetInput, arg2 ...request.Option) (*gluedatabrew.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetWithContext indicates an expected call of DescribeDatasetWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeDatasetWithContext), varargs...)
}

// DescribeJob mocks base method
func (m *MockGlueDataBrewAPI) DescribeJob(arg0 *gluedatabrew.DescribeJobInput) (*gluedatabrew.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJob", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJob indicates an expected call of DescribeJob
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJob", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeJob), arg0)
}

// DescribeJobRequest mocks base method
func (m *MockGlueDataBrewAPI) DescribeJobRequest(arg0 *gluedatabrew.DescribeJobInput) (*request.Request, *gluedatabrew.DescribeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DescribeJobOutput)
	return ret0, ret1
}

// DescribeJobRequest indicates an expected call of DescribeJobRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeJobRequest), arg0)
}

// DescribeJobWithContext mocks base method
func (m *MockGlueDataBrewAPI) DescribeJobWithContext(arg0 context.Context, arg1 *gluedatabrew.DescribeJobInput, arg2 ...request.Option) (*gluedatabrew.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobWithContext indicates an expected call of DescribeJobWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeJobWithContext), varargs...)
}

// DescribeProject mocks base method
func (m *MockGlueDataBrewAPI) DescribeProject(arg0 *gluedatabrew.DescribeProjectInput) (*gluedatabrew.DescribeProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProject", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DescribeProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProject indicates an expected call of DescribeProject
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProject", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeProject), arg0)
}

// DescribeProjectRequest mocks base method
func (m *MockGlueDataBrewAPI) DescribeProjectRequest(arg0 *gluedatabrew.DescribeProjectInput) (*request.Request, *gluedatabrew.DescribeProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DescribeProjectOutput)
	return ret0, ret1
}

// DescribeProjectRequest indicates an expected call of DescribeProjectRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeProjectRequest), arg0)
}

// DescribeProjectWithContext mocks base method
func (m *MockGlueDataBrewAPI) DescribeProjectWithContext(arg0 context.Context, arg1 *gluedatabrew.DescribeProjectInput, arg2 ...request.Option) (*gluedatabrew.DescribeProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProjectWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DescribeProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProjectWithContext indicates an expected call of DescribeProjectWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeProjectWithContext), varargs...)
}

// DescribeRecipe mocks base method
func (m *MockGlueDataBrewAPI) DescribeRecipe(arg0 *gluedatabrew.DescribeRecipeInput) (*gluedatabrew.DescribeRecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecipe", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DescribeRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecipe indicates an expected call of DescribeRecipe
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeRecipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecipe", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeRecipe), arg0)
}

// DescribeRecipeRequest mocks base method
func (m *MockGlueDataBrewAPI) DescribeRecipeRequest(arg0 *gluedatabrew.DescribeRecipeInput) (*request.Request, *gluedatabrew.DescribeRecipeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecipeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DescribeRecipeOutput)
	return ret0, ret1
}

// DescribeRecipeRequest indicates an expected call of DescribeRecipeRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeRecipeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecipeRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeRecipeRequest), arg0)
}

// DescribeRecipeWithContext mocks base method
func (m *MockGlueDataBrewAPI) DescribeRecipeWithContext(arg0 context.Context, arg1 *gluedatabrew.DescribeRecipeInput, arg2 ...request.Option) (*gluedatabrew.DescribeRecipeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecipeWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DescribeRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecipeWithContext indicates an expected call of DescribeRecipeWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeRecipeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecipeWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeRecipeWithContext), varargs...)
}

// DescribeSchedule mocks base method
func (m *MockGlueDataBrewAPI) DescribeSchedule(arg0 *gluedatabrew.DescribeScheduleInput) (*gluedatabrew.DescribeScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchedule", arg0)
	ret0, _ := ret[0].(*gluedatabrew.DescribeScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchedule indicates an expected call of DescribeSchedule
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchedule", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeSchedule), arg0)
}

// DescribeScheduleRequest mocks base method
func (m *MockGlueDataBrewAPI) DescribeScheduleRequest(arg0 *gluedatabrew.DescribeScheduleInput) (*request.Request, *gluedatabrew.DescribeScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.DescribeScheduleOutput)
	return ret0, ret1
}

// DescribeScheduleRequest indicates an expected call of DescribeScheduleRequest
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduleRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeScheduleRequest), arg0)
}

// DescribeScheduleWithContext mocks base method
func (m *MockGlueDataBrewAPI) DescribeScheduleWithContext(arg0 context.Context, arg1 *gluedatabrew.DescribeScheduleInput, arg2 ...request.Option) (*gluedatabrew.DescribeScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.DescribeScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeScheduleWithContext indicates an expected call of DescribeScheduleWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) DescribeScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeScheduleWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).DescribeScheduleWithContext), varargs...)
}

// ListDatasets mocks base method
func (m *MockGlueDataBrewAPI) ListDatasets(arg0 *gluedatabrew.ListDatasetsInput) (*gluedatabrew.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets
func (mr *MockGlueDataBrewAPIMockRecorder) ListDatasets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListDatasets), arg0)
}

// ListDatasetsPages mocks base method
func (m *MockGlueDataBrewAPI) ListDatasetsPages(arg0 *gluedatabrew.ListDatasetsInput, arg1 func(*gluedatabrew.ListDatasetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPages indicates an expected call of ListDatasetsPages
func (mr *MockGlueDataBrewAPIMockRecorder) ListDatasetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPages", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListDatasetsPages), arg0, arg1)
}

// ListDatasetsPagesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListDatasetsPagesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListDatasetsInput, arg2 func(*gluedatabrew.ListDatasetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPagesWithContext indicates an expected call of ListDatasetsPagesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListDatasetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPagesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListDatasetsPagesWithContext), varargs...)
}

// ListDatasetsRequest mocks base method
func (m *MockGlueDataBrewAPI) ListDatasetsRequest(arg0 *gluedatabrew.ListDatasetsInput) (*request.Request, *gluedatabrew.ListDatasetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListDatasetsOutput)
	return ret0, ret1
}

// ListDatasetsRequest indicates an expected call of ListDatasetsRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListDatasetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListDatasetsRequest), arg0)
}

// ListDatasetsWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListDatasetsWithContext(arg0 context.Context, arg1 *gluedatabrew.ListDatasetsInput, arg2 ...request.Option) (*gluedatabrew.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetsWithContext indicates an expected call of ListDatasetsWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListDatasetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListDatasetsWithContext), varargs...)
}

// ListJobRuns mocks base method
func (m *MockGlueDataBrewAPI) ListJobRuns(arg0 *gluedatabrew.ListJobRunsInput) (*gluedatabrew.ListJobRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRuns", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobRuns indicates an expected call of ListJobRuns
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRuns", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobRuns), arg0)
}

// ListJobRunsPages mocks base method
func (m *MockGlueDataBrewAPI) ListJobRunsPages(arg0 *gluedatabrew.ListJobRunsInput, arg1 func(*gluedatabrew.ListJobRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobRunsPages indicates an expected call of ListJobRunsPages
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsPages", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobRunsPages), arg0, arg1)
}

// ListJobRunsPagesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListJobRunsPagesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListJobRunsInput, arg2 func(*gluedatabrew.ListJobRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobRunsPagesWithContext indicates an expected call of ListJobRunsPagesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsPagesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobRunsPagesWithContext), varargs...)
}

// ListJobRunsRequest mocks base method
func (m *MockGlueDataBrewAPI) ListJobRunsRequest(arg0 *gluedatabrew.ListJobRunsInput) (*request.Request, *gluedatabrew.ListJobRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListJobRunsOutput)
	return ret0, ret1
}

// ListJobRunsRequest indicates an expected call of ListJobRunsRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobRunsRequest), arg0)
}

// ListJobRunsWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListJobRunsWithContext(arg0 context.Context, arg1 *gluedatabrew.ListJobRunsInput, arg2 ...request.Option) (*gluedatabrew.ListJobRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobRunsWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobRunsWithContext indicates an expected call of ListJobRunsWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobRunsWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobRunsWithContext), varargs...)
}

// ListJobs mocks base method
func (m *MockGlueDataBrewAPI) ListJobs(arg0 *gluedatabrew.ListJobsInput) (*gluedatabrew.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobs), arg0)
}

// ListJobsPages mocks base method
func (m *MockGlueDataBrewAPI) ListJobsPages(arg0 *gluedatabrew.ListJobsInput, arg1 func(*gluedatabrew.ListJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPages indicates an expected call of ListJobsPages
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPages", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobsPages), arg0, arg1)
}

// ListJobsPagesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListJobsPagesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListJobsInput, arg2 func(*gluedatabrew.ListJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPagesWithContext indicates an expected call of ListJobsPagesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPagesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobsPagesWithContext), varargs...)
}

// ListJobsRequest mocks base method
func (m *MockGlueDataBrewAPI) ListJobsRequest(arg0 *gluedatabrew.ListJobsInput) (*request.Request, *gluedatabrew.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListJobsWithContext(arg0 context.Context, arg1 *gluedatabrew.ListJobsInput, arg2 ...request.Option) (*gluedatabrew.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListJobsWithContext), varargs...)
}

// ListProjects mocks base method
func (m *MockGlueDataBrewAPI) ListProjects(arg0 *gluedatabrew.ListProjectsInput) (*gluedatabrew.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockGlueDataBrewAPIMockRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListProjects), arg0)
}

// ListProjectsPages mocks base method
func (m *MockGlueDataBrewAPI) ListProjectsPages(arg0 *gluedatabrew.ListProjectsInput, arg1 func(*gluedatabrew.ListProjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPages indicates an expected call of ListProjectsPages
func (mr *MockGlueDataBrewAPIMockRecorder) ListProjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPages", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListProjectsPages), arg0, arg1)
}

// ListProjectsPagesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListProjectsPagesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListProjectsInput, arg2 func(*gluedatabrew.ListProjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPagesWithContext indicates an expected call of ListProjectsPagesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListProjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPagesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListProjectsPagesWithContext), varargs...)
}

// ListProjectsRequest mocks base method
func (m *MockGlueDataBrewAPI) ListProjectsRequest(arg0 *gluedatabrew.ListProjectsInput) (*request.Request, *gluedatabrew.ListProjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListProjectsOutput)
	return ret0, ret1
}

// ListProjectsRequest indicates an expected call of ListProjectsRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListProjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListProjectsRequest), arg0)
}

// ListProjectsWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListProjectsWithContext(arg0 context.Context, arg1 *gluedatabrew.ListProjectsInput, arg2 ...request.Option) (*gluedatabrew.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsWithContext indicates an expected call of ListProjectsWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListProjectsWithContext), varargs...)
}

// ListRecipeVersions mocks base method
func (m *MockGlueDataBrewAPI) ListRecipeVersions(arg0 *gluedatabrew.ListRecipeVersionsInput) (*gluedatabrew.ListRecipeVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipeVersions", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListRecipeVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipeVersions indicates an expected call of ListRecipeVersions
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipeVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipeVersions", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipeVersions), arg0)
}

// ListRecipeVersionsPages mocks base method
func (m *MockGlueDataBrewAPI) ListRecipeVersionsPages(arg0 *gluedatabrew.ListRecipeVersionsInput, arg1 func(*gluedatabrew.ListRecipeVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipeVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecipeVersionsPages indicates an expected call of ListRecipeVersionsPages
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipeVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipeVersionsPages", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipeVersionsPages), arg0, arg1)
}

// ListRecipeVersionsPagesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListRecipeVersionsPagesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListRecipeVersionsInput, arg2 func(*gluedatabrew.ListRecipeVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecipeVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecipeVersionsPagesWithContext indicates an expected call of ListRecipeVersionsPagesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipeVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipeVersionsPagesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipeVersionsPagesWithContext), varargs...)
}

// ListRecipeVersionsRequest mocks base method
func (m *MockGlueDataBrewAPI) ListRecipeVersionsRequest(arg0 *gluedatabrew.ListRecipeVersionsInput) (*request.Request, *gluedatabrew.ListRecipeVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipeVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListRecipeVersionsOutput)
	return ret0, ret1
}

// ListRecipeVersionsRequest indicates an expected call of ListRecipeVersionsRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipeVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipeVersionsRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipeVersionsRequest), arg0)
}

// ListRecipeVersionsWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListRecipeVersionsWithContext(arg0 context.Context, arg1 *gluedatabrew.ListRecipeVersionsInput, arg2 ...request.Option) (*gluedatabrew.ListRecipeVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecipeVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListRecipeVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipeVersionsWithContext indicates an expected call of ListRecipeVersionsWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipeVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipeVersionsWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipeVersionsWithContext), varargs...)
}

// ListRecipes mocks base method
func (m *MockGlueDataBrewAPI) ListRecipes(arg0 *gluedatabrew.ListRecipesInput) (*gluedatabrew.ListRecipesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipes", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListRecipesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipes indicates an expected call of ListRecipes
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipes", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipes), arg0)
}

// ListRecipesPages mocks base method
func (m *MockGlueDataBrewAPI) ListRecipesPages(arg0 *gluedatabrew.ListRecipesInput, arg1 func(*gluedatabrew.ListRecipesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecipesPages indicates an expected call of ListRecipesPages
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesPages", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipesPages), arg0, arg1)
}

// ListRecipesPagesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListRecipesPagesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListRecipesInput, arg2 func(*gluedatabrew.ListRecipesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecipesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecipesPagesWithContext indicates an expected call of ListRecipesPagesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesPagesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipesPagesWithContext), varargs...)
}

// ListRecipesRequest mocks base method
func (m *MockGlueDataBrewAPI) ListRecipesRequest(arg0 *gluedatabrew.ListRecipesInput) (*request.Request, *gluedatabrew.ListRecipesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListRecipesOutput)
	return ret0, ret1
}

// ListRecipesRequest indicates an expected call of ListRecipesRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipesRequest), arg0)
}

// ListRecipesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListRecipesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListRecipesInput, arg2 ...request.Option) (*gluedatabrew.ListRecipesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecipesWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListRecipesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipesWithContext indicates an expected call of ListRecipesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListRecipesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListRecipesWithContext), varargs...)
}

// ListSchedules mocks base method
func (m *MockGlueDataBrewAPI) ListSchedules(arg0 *gluedatabrew.ListSchedulesInput) (*gluedatabrew.ListSchedulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedules", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedules indicates an expected call of ListSchedules
func (mr *MockGlueDataBrewAPIMockRecorder) ListSchedules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedules", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListSchedules), arg0)
}

// ListSchedulesPages mocks base method
func (m *MockGlueDataBrewAPI) ListSchedulesPages(arg0 *gluedatabrew.ListSchedulesInput, arg1 func(*gluedatabrew.ListSchedulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchedulesPages indicates an expected call of ListSchedulesPages
func (mr *MockGlueDataBrewAPIMockRecorder) ListSchedulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulesPages", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListSchedulesPages), arg0, arg1)
}

// ListSchedulesPagesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListSchedulesPagesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListSchedulesInput, arg2 func(*gluedatabrew.ListSchedulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchedulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchedulesPagesWithContext indicates an expected call of ListSchedulesPagesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListSchedulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulesPagesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListSchedulesPagesWithContext), varargs...)
}

// ListSchedulesRequest mocks base method
func (m *MockGlueDataBrewAPI) ListSchedulesRequest(arg0 *gluedatabrew.ListSchedulesInput) (*request.Request, *gluedatabrew.ListSchedulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListSchedulesOutput)
	return ret0, ret1
}

// ListSchedulesRequest indicates an expected call of ListSchedulesRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListSchedulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulesRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListSchedulesRequest), arg0)
}

// ListSchedulesWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListSchedulesWithContext(arg0 context.Context, arg1 *gluedatabrew.ListSchedulesInput, arg2 ...request.Option) (*gluedatabrew.ListSchedulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchedulesWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedulesWithContext indicates an expected call of ListSchedulesWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListSchedulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulesWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListSchedulesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockGlueDataBrewAPI) ListTagsForResource(arg0 *gluedatabrew.ListTagsForResourceInput) (*gluedatabrew.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*gluedatabrew.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockGlueDataBrewAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockGlueDataBrewAPI) ListTagsForResourceRequest(arg0 *gluedatabrew.ListTagsForResourceInput) (*request.Request, *gluedatabrew.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockGlueDataBrewAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockGlueDataBrewAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *gluedatabrew.ListTagsForResourceInput, arg2 ...request.Option) (*gluedatabrew.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PublishRecipe mocks base method
func (m *MockGlueDataBrewAPI) PublishRecipe(arg0 *gluedatabrew.PublishRecipeInput) (*gluedatabrew.PublishRecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRecipe", arg0)
	ret0, _ := ret[0].(*gluedatabrew.PublishRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishRecipe indicates an expected call of PublishRecipe
func (mr *MockGlueDataBrewAPIMockRecorder) PublishRecipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRecipe", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).PublishRecipe), arg0)
}

// PublishRecipeRequest mocks base method
func (m *MockGlueDataBrewAPI) PublishRecipeRequest(arg0 *gluedatabrew.PublishRecipeInput) (*request.Request, *gluedatabrew.PublishRecipeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRecipeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.PublishRecipeOutput)
	return ret0, ret1
}

// PublishRecipeRequest indicates an expected call of PublishRecipeRequest
func (mr *MockGlueDataBrewAPIMockRecorder) PublishRecipeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRecipeRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).PublishRecipeRequest), arg0)
}

// PublishRecipeWithContext mocks base method
func (m *MockGlueDataBrewAPI) PublishRecipeWithContext(arg0 context.Context, arg1 *gluedatabrew.PublishRecipeInput, arg2 ...request.Option) (*gluedatabrew.PublishRecipeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishRecipeWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.PublishRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishRecipeWithContext indicates an expected call of PublishRecipeWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) PublishRecipeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRecipeWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).PublishRecipeWithContext), varargs...)
}

// SendProjectSessionAction mocks base method
func (m *MockGlueDataBrewAPI) SendProjectSessionAction(arg0 *gluedatabrew.SendProjectSessionActionInput) (*gluedatabrew.SendProjectSessionActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendProjectSessionAction", arg0)
	ret0, _ := ret[0].(*gluedatabrew.SendProjectSessionActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendProjectSessionAction indicates an expected call of SendProjectSessionAction
func (mr *MockGlueDataBrewAPIMockRecorder) SendProjectSessionAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProjectSessionAction", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).SendProjectSessionAction), arg0)
}

// SendProjectSessionActionRequest mocks base method
func (m *MockGlueDataBrewAPI) SendProjectSessionActionRequest(arg0 *gluedatabrew.SendProjectSessionActionInput) (*request.Request, *gluedatabrew.SendProjectSessionActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendProjectSessionActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.SendProjectSessionActionOutput)
	return ret0, ret1
}

// SendProjectSessionActionRequest indicates an expected call of SendProjectSessionActionRequest
func (mr *MockGlueDataBrewAPIMockRecorder) SendProjectSessionActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProjectSessionActionRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).SendProjectSessionActionRequest), arg0)
}

// SendProjectSessionActionWithContext mocks base method
func (m *MockGlueDataBrewAPI) SendProjectSessionActionWithContext(arg0 context.Context, arg1 *gluedatabrew.SendProjectSessionActionInput, arg2 ...request.Option) (*gluedatabrew.SendProjectSessionActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendProjectSessionActionWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.SendProjectSessionActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendProjectSessionActionWithContext indicates an expected call of SendProjectSessionActionWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) SendProjectSessionActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProjectSessionActionWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).SendProjectSessionActionWithContext), varargs...)
}

// StartJobRun mocks base method
func (m *MockGlueDataBrewAPI) StartJobRun(arg0 *gluedatabrew.StartJobRunInput) (*gluedatabrew.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRun", arg0)
	ret0, _ := ret[0].(*gluedatabrew.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRun indicates an expected call of StartJobRun
func (mr *MockGlueDataBrewAPIMockRecorder) StartJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRun", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StartJobRun), arg0)
}

// StartJobRunRequest mocks base method
func (m *MockGlueDataBrewAPI) StartJobRunRequest(arg0 *gluedatabrew.StartJobRunInput) (*request.Request, *gluedatabrew.StartJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.StartJobRunOutput)
	return ret0, ret1
}

// StartJobRunRequest indicates an expected call of StartJobRunRequest
func (mr *MockGlueDataBrewAPIMockRecorder) StartJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StartJobRunRequest), arg0)
}

// StartJobRunWithContext mocks base method
func (m *MockGlueDataBrewAPI) StartJobRunWithContext(arg0 context.Context, arg1 *gluedatabrew.StartJobRunInput, arg2 ...request.Option) (*gluedatabrew.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRunWithContext indicates an expected call of StartJobRunWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) StartJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StartJobRunWithContext), varargs...)
}

// StartProjectSession mocks base method
func (m *MockGlueDataBrewAPI) StartProjectSession(arg0 *gluedatabrew.StartProjectSessionInput) (*gluedatabrew.StartProjectSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProjectSession", arg0)
	ret0, _ := ret[0].(*gluedatabrew.StartProjectSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProjectSession indicates an expected call of StartProjectSession
func (mr *MockGlueDataBrewAPIMockRecorder) StartProjectSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProjectSession", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StartProjectSession), arg0)
}

// StartProjectSessionRequest mocks base method
func (m *MockGlueDataBrewAPI) StartProjectSessionRequest(arg0 *gluedatabrew.StartProjectSessionInput) (*request.Request, *gluedatabrew.StartProjectSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProjectSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.StartProjectSessionOutput)
	return ret0, ret1
}

// StartProjectSessionRequest indicates an expected call of StartProjectSessionRequest
func (mr *MockGlueDataBrewAPIMockRecorder) StartProjectSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProjectSessionRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StartProjectSessionRequest), arg0)
}

// StartProjectSessionWithContext mocks base method
func (m *MockGlueDataBrewAPI) StartProjectSessionWithContext(arg0 context.Context, arg1 *gluedatabrew.StartProjectSessionInput, arg2 ...request.Option) (*gluedatabrew.StartProjectSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartProjectSessionWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.StartProjectSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProjectSessionWithContext indicates an expected call of StartProjectSessionWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) StartProjectSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProjectSessionWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StartProjectSessionWithContext), varargs...)
}

// StopJobRun mocks base method
func (m *MockGlueDataBrewAPI) StopJobRun(arg0 *gluedatabrew.StopJobRunInput) (*gluedatabrew.StopJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJobRun", arg0)
	ret0, _ := ret[0].(*gluedatabrew.StopJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJobRun indicates an expected call of StopJobRun
func (mr *MockGlueDataBrewAPIMockRecorder) StopJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobRun", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StopJobRun), arg0)
}

// StopJobRunRequest mocks base method
func (m *MockGlueDataBrewAPI) StopJobRunRequest(arg0 *gluedatabrew.StopJobRunInput) (*request.Request, *gluedatabrew.StopJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.StopJobRunOutput)
	return ret0, ret1
}

// StopJobRunRequest indicates an expected call of StopJobRunRequest
func (mr *MockGlueDataBrewAPIMockRecorder) StopJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobRunRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StopJobRunRequest), arg0)
}

// StopJobRunWithContext mocks base method
func (m *MockGlueDataBrewAPI) StopJobRunWithContext(arg0 context.Context, arg1 *gluedatabrew.StopJobRunInput, arg2 ...request.Option) (*gluedatabrew.StopJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.StopJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopJobRunWithContext indicates an expected call of StopJobRunWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) StopJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopJobRunWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).StopJobRunWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockGlueDataBrewAPI) TagResource(arg0 *gluedatabrew.TagResourceInput) (*gluedatabrew.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*gluedatabrew.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockGlueDataBrewAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockGlueDataBrewAPI) TagResourceRequest(arg0 *gluedatabrew.TagResourceInput) (*request.Request, *gluedatabrew.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockGlueDataBrewAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockGlueDataBrewAPI) TagResourceWithContext(arg0 context.Context, arg1 *gluedatabrew.TagResourceInput, arg2 ...request.Option) (*gluedatabrew.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockGlueDataBrewAPI) UntagResource(arg0 *gluedatabrew.UntagResourceInput) (*gluedatabrew.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*gluedatabrew.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockGlueDataBrewAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockGlueDataBrewAPI) UntagResourceRequest(arg0 *gluedatabrew.UntagResourceInput) (*request.Request, *gluedatabrew.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockGlueDataBrewAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockGlueDataBrewAPI) UntagResourceWithContext(arg0 context.Context, arg1 *gluedatabrew.UntagResourceInput, arg2 ...request.Option) (*gluedatabrew.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDataset mocks base method
func (m *MockGlueDataBrewAPI) UpdateDataset(arg0 *gluedatabrew.UpdateDatasetInput) (*gluedatabrew.UpdateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataset", arg0)
	ret0, _ := ret[0].(*gluedatabrew.UpdateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataset indicates an expected call of UpdateDataset
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateDataset), arg0)
}

// UpdateDatasetRequest mocks base method
func (m *MockGlueDataBrewAPI) UpdateDatasetRequest(arg0 *gluedatabrew.UpdateDatasetInput) (*request.Request, *gluedatabrew.UpdateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.UpdateDatasetOutput)
	return ret0, ret1
}

// UpdateDatasetRequest indicates an expected call of UpdateDatasetRequest
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateDatasetRequest), arg0)
}

// UpdateDatasetWithContext mocks base method
func (m *MockGlueDataBrewAPI) UpdateDatasetWithContext(arg0 context.Context, arg1 *gluedatabrew.UpdateDatasetInput, arg2 ...request.Option) (*gluedatabrew.UpdateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.UpdateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetWithContext indicates an expected call of UpdateDatasetWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateDatasetWithContext), varargs...)
}

// UpdateProfileJob mocks base method
func (m *MockGlueDataBrewAPI) UpdateProfileJob(arg0 *gluedatabrew.UpdateProfileJobInput) (*gluedatabrew.UpdateProfileJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileJob", arg0)
	ret0, _ := ret[0].(*gluedatabrew.UpdateProfileJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileJob indicates an expected call of UpdateProfileJob
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateProfileJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileJob", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateProfileJob), arg0)
}

// UpdateProfileJobRequest mocks base method
func (m *MockGlueDataBrewAPI) UpdateProfileJobRequest(arg0 *gluedatabrew.UpdateProfileJobInput) (*request.Request, *gluedatabrew.UpdateProfileJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.UpdateProfileJobOutput)
	return ret0, ret1
}

// UpdateProfileJobRequest indicates an expected call of UpdateProfileJobRequest
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateProfileJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileJobRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateProfileJobRequest), arg0)
}

// UpdateProfileJobWithContext mocks base method
func (m *MockGlueDataBrewAPI) UpdateProfileJobWithContext(arg0 context.Context, arg1 *gluedatabrew.UpdateProfileJobInput, arg2 ...request.Option) (*gluedatabrew.UpdateProfileJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfileJobWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.UpdateProfileJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileJobWithContext indicates an expected call of UpdateProfileJobWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateProfileJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileJobWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateProfileJobWithContext), varargs...)
}

// UpdateProject mocks base method
func (m *MockGlueDataBrewAPI) UpdateProject(arg0 *gluedatabrew.UpdateProjectInput) (*gluedatabrew.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0)
	ret0, _ := ret[0].(*gluedatabrew.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateProject), arg0)
}

// UpdateProjectRequest mocks base method
func (m *MockGlueDataBrewAPI) UpdateProjectRequest(arg0 *gluedatabrew.UpdateProjectInput) (*request.Request, *gluedatabrew.UpdateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.UpdateProjectOutput)
	return ret0, ret1
}

// UpdateProjectRequest indicates an expected call of UpdateProjectRequest
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateProjectRequest), arg0)
}

// UpdateProjectWithContext mocks base method
func (m *MockGlueDataBrewAPI) UpdateProjectWithContext(arg0 context.Context, arg1 *gluedatabrew.UpdateProjectInput, arg2 ...request.Option) (*gluedatabrew.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectWithContext indicates an expected call of UpdateProjectWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateProjectWithContext), varargs...)
}

// UpdateRecipe mocks base method
func (m *MockGlueDataBrewAPI) UpdateRecipe(arg0 *gluedatabrew.UpdateRecipeInput) (*gluedatabrew.UpdateRecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", arg0)
	ret0, _ := ret[0].(*gluedatabrew.UpdateRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipe indicates an expected call of UpdateRecipe
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateRecipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateRecipe), arg0)
}

// UpdateRecipeJob mocks base method
func (m *MockGlueDataBrewAPI) UpdateRecipeJob(arg0 *gluedatabrew.UpdateRecipeJobInput) (*gluedatabrew.UpdateRecipeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeJob", arg0)
	ret0, _ := ret[0].(*gluedatabrew.UpdateRecipeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeJob indicates an expected call of UpdateRecipeJob
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateRecipeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeJob", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateRecipeJob), arg0)
}

// UpdateRecipeJobRequest mocks base method
func (m *MockGlueDataBrewAPI) UpdateRecipeJobRequest(arg0 *gluedatabrew.UpdateRecipeJobInput) (*request.Request, *gluedatabrew.UpdateRecipeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.UpdateRecipeJobOutput)
	return ret0, ret1
}

// UpdateRecipeJobRequest indicates an expected call of UpdateRecipeJobRequest
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateRecipeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeJobRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateRecipeJobRequest), arg0)
}

// UpdateRecipeJobWithContext mocks base method
func (m *MockGlueDataBrewAPI) UpdateRecipeJobWithContext(arg0 context.Context, arg1 *gluedatabrew.UpdateRecipeJobInput, arg2 ...request.Option) (*gluedatabrew.UpdateRecipeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecipeJobWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.UpdateRecipeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeJobWithContext indicates an expected call of UpdateRecipeJobWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateRecipeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeJobWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateRecipeJobWithContext), varargs...)
}

// UpdateRecipeRequest mocks base method
func (m *MockGlueDataBrewAPI) UpdateRecipeRequest(arg0 *gluedatabrew.UpdateRecipeInput) (*request.Request, *gluedatabrew.UpdateRecipeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.UpdateRecipeOutput)
	return ret0, ret1
}

// UpdateRecipeRequest indicates an expected call of UpdateRecipeRequest
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateRecipeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateRecipeRequest), arg0)
}

// UpdateRecipeWithContext mocks base method
func (m *MockGlueDataBrewAPI) UpdateRecipeWithContext(arg0 context.Context, arg1 *gluedatabrew.UpdateRecipeInput, arg2 ...request.Option) (*gluedatabrew.UpdateRecipeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecipeWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.UpdateRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeWithContext indicates an expected call of UpdateRecipeWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateRecipeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateRecipeWithContext), varargs...)
}

// UpdateSchedule mocks base method
func (m *MockGlueDataBrewAPI) UpdateSchedule(arg0 *gluedatabrew.UpdateScheduleInput) (*gluedatabrew.UpdateScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", arg0)
	ret0, _ := ret[0].(*gluedatabrew.UpdateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedule indicates an expected call of UpdateSchedule
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateSchedule), arg0)
}

// UpdateScheduleRequest mocks base method
func (m *MockGlueDataBrewAPI) UpdateScheduleRequest(arg0 *gluedatabrew.UpdateScheduleInput) (*request.Request, *gluedatabrew.UpdateScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*gluedatabrew.UpdateScheduleOutput)
	return ret0, ret1
}

// UpdateScheduleRequest indicates an expected call of UpdateScheduleRequest
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduleRequest", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateScheduleRequest), arg0)
}

// UpdateScheduleWithContext mocks base method
func (m *MockGlueDataBrewAPI) UpdateScheduleWithContext(arg0 context.Context, arg1 *gluedatabrew.UpdateScheduleInput, arg2 ...request.Option) (*gluedatabrew.UpdateScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*gluedatabrew.UpdateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScheduleWithContext indicates an expected call of UpdateScheduleWithContext
func (mr *MockGlueDataBrewAPIMockRecorder) UpdateScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduleWithContext", reflect.TypeOf((*MockGlueDataBrewAPI)(nil).UpdateScheduleWithContext), varargs...)
}

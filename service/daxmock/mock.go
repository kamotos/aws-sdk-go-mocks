// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/dax/daxiface (interfaces: DAXAPI)

// Package daxmock is a generated GoMock package.
package daxmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	dax "github.com/aws/aws-sdk-go/service/dax"
	gomock "github.com/golang/mock/gomock"
)

// MockDAXAPI is a mock of DAXAPI interface.
type MockDAXAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDAXAPIMockRecorder
}

// MockDAXAPIMockRecorder is the mock recorder for MockDAXAPI.
type MockDAXAPIMockRecorder struct {
	mock *MockDAXAPI
}

// NewMockDAXAPI creates a new mock instance.
func NewMockDAXAPI(ctrl *gomock.Controller) *MockDAXAPI {
	mock := &MockDAXAPI{ctrl: ctrl}
	mock.recorder = &MockDAXAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAXAPI) EXPECT() *MockDAXAPIMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockDAXAPI) CreateCluster(arg0 *dax.CreateClusterInput) (*dax.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0)
	ret0, _ := ret[0].(*dax.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockDAXAPIMockRecorder) CreateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockDAXAPI)(nil).CreateCluster), arg0)
}

// CreateClusterRequest mocks base method.
func (m *MockDAXAPI) CreateClusterRequest(arg0 *dax.CreateClusterInput) (*request.Request, *dax.CreateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.CreateClusterOutput)
	return ret0, ret1
}

// CreateClusterRequest indicates an expected call of CreateClusterRequest.
func (mr *MockDAXAPIMockRecorder) CreateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRequest", reflect.TypeOf((*MockDAXAPI)(nil).CreateClusterRequest), arg0)
}

// CreateClusterWithContext mocks base method.
func (m *MockDAXAPI) CreateClusterWithContext(arg0 context.Context, arg1 *dax.CreateClusterInput, arg2 ...request.Option) (*dax.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*dax.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterWithContext indicates an expected call of CreateClusterWithContext.
func (mr *MockDAXAPIMockRecorder) CreateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterWithContext", reflect.TypeOf((*MockDAXAPI)(nil).CreateClusterWithContext), varargs...)
}

// CreateParameterGroup mocks base method.
func (m *MockDAXAPI) CreateParameterGroup(arg0 *dax.CreateParameterGroupInput) (*dax.CreateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParameterGroup", arg0)
	ret0, _ := ret[0].(*dax.CreateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParameterGroup indicates an expected call of CreateParameterGroup.
func (mr *MockDAXAPIMockRecorder) CreateParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParameterGroup", reflect.TypeOf((*MockDAXAPI)(nil).CreateParameterGroup), arg0)
}

// CreateParameterGroupRequest mocks base method.
func (m *MockDAXAPI) CreateParameterGroupRequest(arg0 *dax.CreateParameterGroupInput) (*request.Request, *dax.CreateParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.CreateParameterGroupOutput)
	return ret0, ret1
}

// CreateParameterGroupRequest indicates an expected call of CreateParameterGroupRequest.
func (mr *MockDAXAPIMockRecorder) CreateParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParameterGroupRequest", reflect.TypeOf((*MockDAXAPI)(nil).CreateParameterGroupRequest), arg0)
}

// CreateParameterGroupWithContext mocks base method.
func (m *MockDAXAPI) CreateParameterGroupWithContext(arg0 context.Context, arg1 *dax.CreateParameterGroupInput, arg2 ...request.Option) (*dax.CreateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*dax.CreateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParameterGroupWithContext indicates an expected call of CreateParameterGroupWithContext.
func (mr *MockDAXAPIMockRecorder) CreateParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParameterGroupWithContext", reflect.TypeOf((*MockDAXAPI)(nil).CreateParameterGroupWithContext), varargs...)
}

// CreateSubnetGroup mocks base method.
func (m *MockDAXAPI) CreateSubnetGroup(arg0 *dax.CreateSubnetGroupInput) (*dax.CreateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetGroup", arg0)
	ret0, _ := ret[0].(*dax.CreateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnetGroup indicates an expected call of CreateSubnetGroup.
func (mr *MockDAXAPIMockRecorder) CreateSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetGroup", reflect.TypeOf((*MockDAXAPI)(nil).CreateSubnetGroup), arg0)
}

// CreateSubnetGroupRequest mocks base method.
func (m *MockDAXAPI) CreateSubnetGroupRequest(arg0 *dax.CreateSubnetGroupInput) (*request.Request, *dax.CreateSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.CreateSubnetGroupOutput)
	return ret0, ret1
}

// CreateSubnetGroupRequest indicates an expected call of CreateSubnetGroupRequest.
func (mr *MockDAXAPIMockRecorder) CreateSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetGroupRequest", reflect.TypeOf((*MockDAXAPI)(nil).CreateSubnetGroupRequest), arg0)
}

// CreateSubnetGroupWithContext mocks base method.
func (m *MockDAXAPI) CreateSubnetGroupWithContext(arg0 context.Context, arg1 *dax.CreateSubnetGroupInput, arg2 ...request.Option) (*dax.CreateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*dax.CreateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnetGroupWithContext indicates an expected call of CreateSubnetGroupWithContext.
func (mr *MockDAXAPIMockRecorder) CreateSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetGroupWithContext", reflect.TypeOf((*MockDAXAPI)(nil).CreateSubnetGroupWithContext), varargs...)
}

// DecreaseReplicationFactor mocks base method.
func (m *MockDAXAPI) DecreaseReplicationFactor(arg0 *dax.DecreaseReplicationFactorInput) (*dax.DecreaseReplicationFactorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseReplicationFactor", arg0)
	ret0, _ := ret[0].(*dax.DecreaseReplicationFactorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseReplicationFactor indicates an expected call of DecreaseReplicationFactor.
func (mr *MockDAXAPIMockRecorder) DecreaseReplicationFactor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseReplicationFactor", reflect.TypeOf((*MockDAXAPI)(nil).DecreaseReplicationFactor), arg0)
}

// DecreaseReplicationFactorRequest mocks base method.
func (m *MockDAXAPI) DecreaseReplicationFactorRequest(arg0 *dax.DecreaseReplicationFactorInput) (*request.Request, *dax.DecreaseReplicationFactorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseReplicationFactorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DecreaseReplicationFactorOutput)
	return ret0, ret1
}

// DecreaseReplicationFactorRequest indicates an expected call of DecreaseReplicationFactorRequest.
func (mr *MockDAXAPIMockRecorder) DecreaseReplicationFactorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseReplicationFactorRequest", reflect.TypeOf((*MockDAXAPI)(nil).DecreaseReplicationFactorRequest), arg0)
}

// DecreaseReplicationFactorWithContext mocks base method.
func (m *MockDAXAPI) DecreaseReplicationFactorWithContext(arg0 context.Context, arg1 *dax.DecreaseReplicationFactorInput, arg2 ...request.Option) (*dax.DecreaseReplicationFactorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DecreaseReplicationFactorWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DecreaseReplicationFactorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseReplicationFactorWithContext indicates an expected call of DecreaseReplicationFactorWithContext.
func (mr *MockDAXAPIMockRecorder) DecreaseReplicationFactorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseReplicationFactorWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DecreaseReplicationFactorWithContext), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockDAXAPI) DeleteCluster(arg0 *dax.DeleteClusterInput) (*dax.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(*dax.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockDAXAPIMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockDAXAPI)(nil).DeleteCluster), arg0)
}

// DeleteClusterRequest mocks base method.
func (m *MockDAXAPI) DeleteClusterRequest(arg0 *dax.DeleteClusterInput) (*request.Request, *dax.DeleteClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DeleteClusterOutput)
	return ret0, ret1
}

// DeleteClusterRequest indicates an expected call of DeleteClusterRequest.
func (mr *MockDAXAPIMockRecorder) DeleteClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRequest", reflect.TypeOf((*MockDAXAPI)(nil).DeleteClusterRequest), arg0)
}

// DeleteClusterWithContext mocks base method.
func (m *MockDAXAPI) DeleteClusterWithContext(arg0 context.Context, arg1 *dax.DeleteClusterInput, arg2 ...request.Option) (*dax.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterWithContext indicates an expected call of DeleteClusterWithContext.
func (mr *MockDAXAPIMockRecorder) DeleteClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DeleteClusterWithContext), varargs...)
}

// DeleteParameterGroup mocks base method.
func (m *MockDAXAPI) DeleteParameterGroup(arg0 *dax.DeleteParameterGroupInput) (*dax.DeleteParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParameterGroup", arg0)
	ret0, _ := ret[0].(*dax.DeleteParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteParameterGroup indicates an expected call of DeleteParameterGroup.
func (mr *MockDAXAPIMockRecorder) DeleteParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParameterGroup", reflect.TypeOf((*MockDAXAPI)(nil).DeleteParameterGroup), arg0)
}

// DeleteParameterGroupRequest mocks base method.
func (m *MockDAXAPI) DeleteParameterGroupRequest(arg0 *dax.DeleteParameterGroupInput) (*request.Request, *dax.DeleteParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DeleteParameterGroupOutput)
	return ret0, ret1
}

// DeleteParameterGroupRequest indicates an expected call of DeleteParameterGroupRequest.
func (mr *MockDAXAPIMockRecorder) DeleteParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParameterGroupRequest", reflect.TypeOf((*MockDAXAPI)(nil).DeleteParameterGroupRequest), arg0)
}

// DeleteParameterGroupWithContext mocks base method.
func (m *MockDAXAPI) DeleteParameterGroupWithContext(arg0 context.Context, arg1 *dax.DeleteParameterGroupInput, arg2 ...request.Option) (*dax.DeleteParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DeleteParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteParameterGroupWithContext indicates an expected call of DeleteParameterGroupWithContext.
func (mr *MockDAXAPIMockRecorder) DeleteParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParameterGroupWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DeleteParameterGroupWithContext), varargs...)
}

// DeleteSubnetGroup mocks base method.
func (m *MockDAXAPI) DeleteSubnetGroup(arg0 *dax.DeleteSubnetGroupInput) (*dax.DeleteSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetGroup", arg0)
	ret0, _ := ret[0].(*dax.DeleteSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnetGroup indicates an expected call of DeleteSubnetGroup.
func (mr *MockDAXAPIMockRecorder) DeleteSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetGroup", reflect.TypeOf((*MockDAXAPI)(nil).DeleteSubnetGroup), arg0)
}

// DeleteSubnetGroupRequest mocks base method.
func (m *MockDAXAPI) DeleteSubnetGroupRequest(arg0 *dax.DeleteSubnetGroupInput) (*request.Request, *dax.DeleteSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DeleteSubnetGroupOutput)
	return ret0, ret1
}

// DeleteSubnetGroupRequest indicates an expected call of DeleteSubnetGroupRequest.
func (mr *MockDAXAPIMockRecorder) DeleteSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetGroupRequest", reflect.TypeOf((*MockDAXAPI)(nil).DeleteSubnetGroupRequest), arg0)
}

// DeleteSubnetGroupWithContext mocks base method.
func (m *MockDAXAPI) DeleteSubnetGroupWithContext(arg0 context.Context, arg1 *dax.DeleteSubnetGroupInput, arg2 ...request.Option) (*dax.DeleteSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DeleteSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnetGroupWithContext indicates an expected call of DeleteSubnetGroupWithContext.
func (mr *MockDAXAPIMockRecorder) DeleteSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetGroupWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DeleteSubnetGroupWithContext), varargs...)
}

// DescribeClusters mocks base method.
func (m *MockDAXAPI) DescribeClusters(arg0 *dax.DescribeClustersInput) (*dax.DescribeClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusters", arg0)
	ret0, _ := ret[0].(*dax.DescribeClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusters indicates an expected call of DescribeClusters.
func (mr *MockDAXAPIMockRecorder) DescribeClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusters", reflect.TypeOf((*MockDAXAPI)(nil).DescribeClusters), arg0)
}

// DescribeClustersRequest mocks base method.
func (m *MockDAXAPI) DescribeClustersRequest(arg0 *dax.DescribeClustersInput) (*request.Request, *dax.DescribeClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DescribeClustersOutput)
	return ret0, ret1
}

// DescribeClustersRequest indicates an expected call of DescribeClustersRequest.
func (mr *MockDAXAPIMockRecorder) DescribeClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClustersRequest", reflect.TypeOf((*MockDAXAPI)(nil).DescribeClustersRequest), arg0)
}

// DescribeClustersWithContext mocks base method.
func (m *MockDAXAPI) DescribeClustersWithContext(arg0 context.Context, arg1 *dax.DescribeClustersInput, arg2 ...request.Option) (*dax.DescribeClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClustersWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DescribeClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClustersWithContext indicates an expected call of DescribeClustersWithContext.
func (mr *MockDAXAPIMockRecorder) DescribeClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClustersWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DescribeClustersWithContext), varargs...)
}

// DescribeDefaultParameters mocks base method.
func (m *MockDAXAPI) DescribeDefaultParameters(arg0 *dax.DescribeDefaultParametersInput) (*dax.DescribeDefaultParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDefaultParameters", arg0)
	ret0, _ := ret[0].(*dax.DescribeDefaultParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultParameters indicates an expected call of DescribeDefaultParameters.
func (mr *MockDAXAPIMockRecorder) DescribeDefaultParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultParameters", reflect.TypeOf((*MockDAXAPI)(nil).DescribeDefaultParameters), arg0)
}

// DescribeDefaultParametersRequest mocks base method.
func (m *MockDAXAPI) DescribeDefaultParametersRequest(arg0 *dax.DescribeDefaultParametersInput) (*request.Request, *dax.DescribeDefaultParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDefaultParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DescribeDefaultParametersOutput)
	return ret0, ret1
}

// DescribeDefaultParametersRequest indicates an expected call of DescribeDefaultParametersRequest.
func (mr *MockDAXAPIMockRecorder) DescribeDefaultParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultParametersRequest", reflect.TypeOf((*MockDAXAPI)(nil).DescribeDefaultParametersRequest), arg0)
}

// DescribeDefaultParametersWithContext mocks base method.
func (m *MockDAXAPI) DescribeDefaultParametersWithContext(arg0 context.Context, arg1 *dax.DescribeDefaultParametersInput, arg2 ...request.Option) (*dax.DescribeDefaultParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDefaultParametersWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DescribeDefaultParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultParametersWithContext indicates an expected call of DescribeDefaultParametersWithContext.
func (mr *MockDAXAPIMockRecorder) DescribeDefaultParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultParametersWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DescribeDefaultParametersWithContext), varargs...)
}

// DescribeEvents mocks base method.
func (m *MockDAXAPI) DescribeEvents(arg0 *dax.DescribeEventsInput) (*dax.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEvents", arg0)
	ret0, _ := ret[0].(*dax.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents.
func (mr *MockDAXAPIMockRecorder) DescribeEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockDAXAPI)(nil).DescribeEvents), arg0)
}

// DescribeEventsRequest mocks base method.
func (m *MockDAXAPI) DescribeEventsRequest(arg0 *dax.DescribeEventsInput) (*request.Request, *dax.DescribeEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DescribeEventsOutput)
	return ret0, ret1
}

// DescribeEventsRequest indicates an expected call of DescribeEventsRequest.
func (mr *MockDAXAPIMockRecorder) DescribeEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsRequest", reflect.TypeOf((*MockDAXAPI)(nil).DescribeEventsRequest), arg0)
}

// DescribeEventsWithContext mocks base method.
func (m *MockDAXAPI) DescribeEventsWithContext(arg0 context.Context, arg1 *dax.DescribeEventsInput, arg2 ...request.Option) (*dax.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventsWithContext indicates an expected call of DescribeEventsWithContext.
func (mr *MockDAXAPIMockRecorder) DescribeEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DescribeEventsWithContext), varargs...)
}

// DescribeParameterGroups mocks base method.
func (m *MockDAXAPI) DescribeParameterGroups(arg0 *dax.DescribeParameterGroupsInput) (*dax.DescribeParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParameterGroups", arg0)
	ret0, _ := ret[0].(*dax.DescribeParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameterGroups indicates an expected call of DescribeParameterGroups.
func (mr *MockDAXAPIMockRecorder) DescribeParameterGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameterGroups", reflect.TypeOf((*MockDAXAPI)(nil).DescribeParameterGroups), arg0)
}

// DescribeParameterGroupsRequest mocks base method.
func (m *MockDAXAPI) DescribeParameterGroupsRequest(arg0 *dax.DescribeParameterGroupsInput) (*request.Request, *dax.DescribeParameterGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParameterGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DescribeParameterGroupsOutput)
	return ret0, ret1
}

// DescribeParameterGroupsRequest indicates an expected call of DescribeParameterGroupsRequest.
func (mr *MockDAXAPIMockRecorder) DescribeParameterGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameterGroupsRequest", reflect.TypeOf((*MockDAXAPI)(nil).DescribeParameterGroupsRequest), arg0)
}

// DescribeParameterGroupsWithContext mocks base method.
func (m *MockDAXAPI) DescribeParameterGroupsWithContext(arg0 context.Context, arg1 *dax.DescribeParameterGroupsInput, arg2 ...request.Option) (*dax.DescribeParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeParameterGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DescribeParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameterGroupsWithContext indicates an expected call of DescribeParameterGroupsWithContext.
func (mr *MockDAXAPIMockRecorder) DescribeParameterGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameterGroupsWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DescribeParameterGroupsWithContext), varargs...)
}

// DescribeParameters mocks base method.
func (m *MockDAXAPI) DescribeParameters(arg0 *dax.DescribeParametersInput) (*dax.DescribeParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParameters", arg0)
	ret0, _ := ret[0].(*dax.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameters indicates an expected call of DescribeParameters.
func (mr *MockDAXAPIMockRecorder) DescribeParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameters", reflect.TypeOf((*MockDAXAPI)(nil).DescribeParameters), arg0)
}

// DescribeParametersRequest mocks base method.
func (m *MockDAXAPI) DescribeParametersRequest(arg0 *dax.DescribeParametersInput) (*request.Request, *dax.DescribeParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DescribeParametersOutput)
	return ret0, ret1
}

// DescribeParametersRequest indicates an expected call of DescribeParametersRequest.
func (mr *MockDAXAPIMockRecorder) DescribeParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParametersRequest", reflect.TypeOf((*MockDAXAPI)(nil).DescribeParametersRequest), arg0)
}

// DescribeParametersWithContext mocks base method.
func (m *MockDAXAPI) DescribeParametersWithContext(arg0 context.Context, arg1 *dax.DescribeParametersInput, arg2 ...request.Option) (*dax.DescribeParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeParametersWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParametersWithContext indicates an expected call of DescribeParametersWithContext.
func (mr *MockDAXAPIMockRecorder) DescribeParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParametersWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DescribeParametersWithContext), varargs...)
}

// DescribeSubnetGroups mocks base method.
func (m *MockDAXAPI) DescribeSubnetGroups(arg0 *dax.DescribeSubnetGroupsInput) (*dax.DescribeSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSubnetGroups", arg0)
	ret0, _ := ret[0].(*dax.DescribeSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnetGroups indicates an expected call of DescribeSubnetGroups.
func (mr *MockDAXAPIMockRecorder) DescribeSubnetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnetGroups", reflect.TypeOf((*MockDAXAPI)(nil).DescribeSubnetGroups), arg0)
}

// DescribeSubnetGroupsRequest mocks base method.
func (m *MockDAXAPI) DescribeSubnetGroupsRequest(arg0 *dax.DescribeSubnetGroupsInput) (*request.Request, *dax.DescribeSubnetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSubnetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.DescribeSubnetGroupsOutput)
	return ret0, ret1
}

// DescribeSubnetGroupsRequest indicates an expected call of DescribeSubnetGroupsRequest.
func (mr *MockDAXAPIMockRecorder) DescribeSubnetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnetGroupsRequest", reflect.TypeOf((*MockDAXAPI)(nil).DescribeSubnetGroupsRequest), arg0)
}

// DescribeSubnetGroupsWithContext mocks base method.
func (m *MockDAXAPI) DescribeSubnetGroupsWithContext(arg0 context.Context, arg1 *dax.DescribeSubnetGroupsInput, arg2 ...request.Option) (*dax.DescribeSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSubnetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*dax.DescribeSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnetGroupsWithContext indicates an expected call of DescribeSubnetGroupsWithContext.
func (mr *MockDAXAPIMockRecorder) DescribeSubnetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnetGroupsWithContext", reflect.TypeOf((*MockDAXAPI)(nil).DescribeSubnetGroupsWithContext), varargs...)
}

// IncreaseReplicationFactor mocks base method.
func (m *MockDAXAPI) IncreaseReplicationFactor(arg0 *dax.IncreaseReplicationFactorInput) (*dax.IncreaseReplicationFactorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseReplicationFactor", arg0)
	ret0, _ := ret[0].(*dax.IncreaseReplicationFactorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseReplicationFactor indicates an expected call of IncreaseReplicationFactor.
func (mr *MockDAXAPIMockRecorder) IncreaseReplicationFactor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseReplicationFactor", reflect.TypeOf((*MockDAXAPI)(nil).IncreaseReplicationFactor), arg0)
}

// IncreaseReplicationFactorRequest mocks base method.
func (m *MockDAXAPI) IncreaseReplicationFactorRequest(arg0 *dax.IncreaseReplicationFactorInput) (*request.Request, *dax.IncreaseReplicationFactorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseReplicationFactorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.IncreaseReplicationFactorOutput)
	return ret0, ret1
}

// IncreaseReplicationFactorRequest indicates an expected call of IncreaseReplicationFactorRequest.
func (mr *MockDAXAPIMockRecorder) IncreaseReplicationFactorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseReplicationFactorRequest", reflect.TypeOf((*MockDAXAPI)(nil).IncreaseReplicationFactorRequest), arg0)
}

// IncreaseReplicationFactorWithContext mocks base method.
func (m *MockDAXAPI) IncreaseReplicationFactorWithContext(arg0 context.Context, arg1 *dax.IncreaseReplicationFactorInput, arg2 ...request.Option) (*dax.IncreaseReplicationFactorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncreaseReplicationFactorWithContext", varargs...)
	ret0, _ := ret[0].(*dax.IncreaseReplicationFactorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseReplicationFactorWithContext indicates an expected call of IncreaseReplicationFactorWithContext.
func (mr *MockDAXAPIMockRecorder) IncreaseReplicationFactorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseReplicationFactorWithContext", reflect.TypeOf((*MockDAXAPI)(nil).IncreaseReplicationFactorWithContext), varargs...)
}

// ListTags mocks base method.
func (m *MockDAXAPI) ListTags(arg0 *dax.ListTagsInput) (*dax.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*dax.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockDAXAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockDAXAPI)(nil).ListTags), arg0)
}

// ListTagsRequest mocks base method.
func (m *MockDAXAPI) ListTagsRequest(arg0 *dax.ListTagsInput) (*request.Request, *dax.ListTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest.
func (mr *MockDAXAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockDAXAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method.
func (m *MockDAXAPI) ListTagsWithContext(arg0 context.Context, arg1 *dax.ListTagsInput, arg2 ...request.Option) (*dax.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*dax.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext.
func (mr *MockDAXAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockDAXAPI)(nil).ListTagsWithContext), varargs...)
}

// RebootNode mocks base method.
func (m *MockDAXAPI) RebootNode(arg0 *dax.RebootNodeInput) (*dax.RebootNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootNode", arg0)
	ret0, _ := ret[0].(*dax.RebootNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootNode indicates an expected call of RebootNode.
func (mr *MockDAXAPIMockRecorder) RebootNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootNode", reflect.TypeOf((*MockDAXAPI)(nil).RebootNode), arg0)
}

// RebootNodeRequest mocks base method.
func (m *MockDAXAPI) RebootNodeRequest(arg0 *dax.RebootNodeInput) (*request.Request, *dax.RebootNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.RebootNodeOutput)
	return ret0, ret1
}

// RebootNodeRequest indicates an expected call of RebootNodeRequest.
func (mr *MockDAXAPIMockRecorder) RebootNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootNodeRequest", reflect.TypeOf((*MockDAXAPI)(nil).RebootNodeRequest), arg0)
}

// RebootNodeWithContext mocks base method.
func (m *MockDAXAPI) RebootNodeWithContext(arg0 context.Context, arg1 *dax.RebootNodeInput, arg2 ...request.Option) (*dax.RebootNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootNodeWithContext", varargs...)
	ret0, _ := ret[0].(*dax.RebootNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootNodeWithContext indicates an expected call of RebootNodeWithContext.
func (mr *MockDAXAPIMockRecorder) RebootNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootNodeWithContext", reflect.TypeOf((*MockDAXAPI)(nil).RebootNodeWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockDAXAPI) TagResource(arg0 *dax.TagResourceInput) (*dax.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*dax.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockDAXAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDAXAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockDAXAPI) TagResourceRequest(arg0 *dax.TagResourceInput) (*request.Request, *dax.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockDAXAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDAXAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockDAXAPI) TagResourceWithContext(arg0 context.Context, arg1 *dax.TagResourceInput, arg2 ...request.Option) (*dax.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dax.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockDAXAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDAXAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockDAXAPI) UntagResource(arg0 *dax.UntagResourceInput) (*dax.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*dax.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockDAXAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDAXAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockDAXAPI) UntagResourceRequest(arg0 *dax.UntagResourceInput) (*request.Request, *dax.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockDAXAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDAXAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockDAXAPI) UntagResourceWithContext(arg0 context.Context, arg1 *dax.UntagResourceInput, arg2 ...request.Option) (*dax.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dax.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockDAXAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDAXAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCluster mocks base method.
func (m *MockDAXAPI) UpdateCluster(arg0 *dax.UpdateClusterInput) (*dax.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0)
	ret0, _ := ret[0].(*dax.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockDAXAPIMockRecorder) UpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockDAXAPI)(nil).UpdateCluster), arg0)
}

// UpdateClusterRequest mocks base method.
func (m *MockDAXAPI) UpdateClusterRequest(arg0 *dax.UpdateClusterInput) (*request.Request, *dax.UpdateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.UpdateClusterOutput)
	return ret0, ret1
}

// UpdateClusterRequest indicates an expected call of UpdateClusterRequest.
func (mr *MockDAXAPIMockRecorder) UpdateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRequest", reflect.TypeOf((*MockDAXAPI)(nil).UpdateClusterRequest), arg0)
}

// UpdateClusterWithContext mocks base method.
func (m *MockDAXAPI) UpdateClusterWithContext(arg0 context.Context, arg1 *dax.UpdateClusterInput, arg2 ...request.Option) (*dax.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*dax.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterWithContext indicates an expected call of UpdateClusterWithContext.
func (mr *MockDAXAPIMockRecorder) UpdateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterWithContext", reflect.TypeOf((*MockDAXAPI)(nil).UpdateClusterWithContext), varargs...)
}

// UpdateParameterGroup mocks base method.
func (m *MockDAXAPI) UpdateParameterGroup(arg0 *dax.UpdateParameterGroupInput) (*dax.UpdateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParameterGroup", arg0)
	ret0, _ := ret[0].(*dax.UpdateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParameterGroup indicates an expected call of UpdateParameterGroup.
func (mr *MockDAXAPIMockRecorder) UpdateParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParameterGroup", reflect.TypeOf((*MockDAXAPI)(nil).UpdateParameterGroup), arg0)
}

// UpdateParameterGroupRequest mocks base method.
func (m *MockDAXAPI) UpdateParameterGroupRequest(arg0 *dax.UpdateParameterGroupInput) (*request.Request, *dax.UpdateParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.UpdateParameterGroupOutput)
	return ret0, ret1
}

// UpdateParameterGroupRequest indicates an expected call of UpdateParameterGroupRequest.
func (mr *MockDAXAPIMockRecorder) UpdateParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParameterGroupRequest", reflect.TypeOf((*MockDAXAPI)(nil).UpdateParameterGroupRequest), arg0)
}

// UpdateParameterGroupWithContext mocks base method.
func (m *MockDAXAPI) UpdateParameterGroupWithContext(arg0 context.Context, arg1 *dax.UpdateParameterGroupInput, arg2 ...request.Option) (*dax.UpdateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*dax.UpdateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParameterGroupWithContext indicates an expected call of UpdateParameterGroupWithContext.
func (mr *MockDAXAPIMockRecorder) UpdateParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParameterGroupWithContext", reflect.TypeOf((*MockDAXAPI)(nil).UpdateParameterGroupWithContext), varargs...)
}

// UpdateSubnetGroup mocks base method.
func (m *MockDAXAPI) UpdateSubnetGroup(arg0 *dax.UpdateSubnetGroupInput) (*dax.UpdateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnetGroup", arg0)
	ret0, _ := ret[0].(*dax.UpdateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubnetGroup indicates an expected call of UpdateSubnetGroup.
func (mr *MockDAXAPIMockRecorder) UpdateSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnetGroup", reflect.TypeOf((*MockDAXAPI)(nil).UpdateSubnetGroup), arg0)
}

// UpdateSubnetGroupRequest mocks base method.
func (m *MockDAXAPI) UpdateSubnetGroupRequest(arg0 *dax.UpdateSubnetGroupInput) (*request.Request, *dax.UpdateSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dax.UpdateSubnetGroupOutput)
	return ret0, ret1
}

// UpdateSubnetGroupRequest indicates an expected call of UpdateSubnetGroupRequest.
func (mr *MockDAXAPIMockRecorder) UpdateSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnetGroupRequest", reflect.TypeOf((*MockDAXAPI)(nil).UpdateSubnetGroupRequest), arg0)
}

// UpdateSubnetGroupWithContext mocks base method.
func (m *MockDAXAPI) UpdateSubnetGroupWithContext(arg0 context.Context, arg1 *dax.UpdateSubnetGroupInput, arg2 ...request.Option) (*dax.UpdateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*dax.UpdateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubnetGroupWithContext indicates an expected call of UpdateSubnetGroupWithContext.
func (mr *MockDAXAPIMockRecorder) UpdateSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnetGroupWithContext", reflect.TypeOf((*MockDAXAPI)(nil).UpdateSubnetGroupWithContext), varargs...)
}

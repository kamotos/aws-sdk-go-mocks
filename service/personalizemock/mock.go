// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/personalize/personalizeiface (interfaces: PersonalizeAPI)

// Package personalizemock is a generated GoMock package.
package personalizemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	personalize "github.com/aws/aws-sdk-go/service/personalize"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonalizeAPI is a mock of PersonalizeAPI interface.
type MockPersonalizeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalizeAPIMockRecorder
}

// MockPersonalizeAPIMockRecorder is the mock recorder for MockPersonalizeAPI.
type MockPersonalizeAPIMockRecorder struct {
	mock *MockPersonalizeAPI
}

// NewMockPersonalizeAPI creates a new mock instance.
func NewMockPersonalizeAPI(ctrl *gomock.Controller) *MockPersonalizeAPI {
	mock := &MockPersonalizeAPI{ctrl: ctrl}
	mock.recorder = &MockPersonalizeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonalizeAPI) EXPECT() *MockPersonalizeAPIMockRecorder {
	return m.recorder
}

// CreateBatchInferenceJob mocks base method.
func (m *MockPersonalizeAPI) CreateBatchInferenceJob(arg0 *personalize.CreateBatchInferenceJobInput) (*personalize.CreateBatchInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchInferenceJob", arg0)
	ret0, _ := ret[0].(*personalize.CreateBatchInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatchInferenceJob indicates an expected call of CreateBatchInferenceJob.
func (mr *MockPersonalizeAPIMockRecorder) CreateBatchInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchInferenceJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateBatchInferenceJob), arg0)
}

// CreateBatchInferenceJobRequest mocks base method.
func (m *MockPersonalizeAPI) CreateBatchInferenceJobRequest(arg0 *personalize.CreateBatchInferenceJobInput) (*request.Request, *personalize.CreateBatchInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateBatchInferenceJobOutput)
	return ret0, ret1
}

// CreateBatchInferenceJobRequest indicates an expected call of CreateBatchInferenceJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateBatchInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchInferenceJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateBatchInferenceJobRequest), arg0)
}

// CreateBatchInferenceJobWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateBatchInferenceJobWithContext(arg0 context.Context, arg1 *personalize.CreateBatchInferenceJobInput, arg2 ...request.Option) (*personalize.CreateBatchInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBatchInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateBatchInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatchInferenceJobWithContext indicates an expected call of CreateBatchInferenceJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateBatchInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchInferenceJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateBatchInferenceJobWithContext), varargs...)
}

// CreateBatchSegmentJob mocks base method.
func (m *MockPersonalizeAPI) CreateBatchSegmentJob(arg0 *personalize.CreateBatchSegmentJobInput) (*personalize.CreateBatchSegmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchSegmentJob", arg0)
	ret0, _ := ret[0].(*personalize.CreateBatchSegmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatchSegmentJob indicates an expected call of CreateBatchSegmentJob.
func (mr *MockPersonalizeAPIMockRecorder) CreateBatchSegmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchSegmentJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateBatchSegmentJob), arg0)
}

// CreateBatchSegmentJobRequest mocks base method.
func (m *MockPersonalizeAPI) CreateBatchSegmentJobRequest(arg0 *personalize.CreateBatchSegmentJobInput) (*request.Request, *personalize.CreateBatchSegmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchSegmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateBatchSegmentJobOutput)
	return ret0, ret1
}

// CreateBatchSegmentJobRequest indicates an expected call of CreateBatchSegmentJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateBatchSegmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchSegmentJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateBatchSegmentJobRequest), arg0)
}

// CreateBatchSegmentJobWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateBatchSegmentJobWithContext(arg0 context.Context, arg1 *personalize.CreateBatchSegmentJobInput, arg2 ...request.Option) (*personalize.CreateBatchSegmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBatchSegmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateBatchSegmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatchSegmentJobWithContext indicates an expected call of CreateBatchSegmentJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateBatchSegmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchSegmentJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateBatchSegmentJobWithContext), varargs...)
}

// CreateCampaign mocks base method.
func (m *MockPersonalizeAPI) CreateCampaign(arg0 *personalize.CreateCampaignInput) (*personalize.CreateCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", arg0)
	ret0, _ := ret[0].(*personalize.CreateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockPersonalizeAPIMockRecorder) CreateCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateCampaign), arg0)
}

// CreateCampaignRequest mocks base method.
func (m *MockPersonalizeAPI) CreateCampaignRequest(arg0 *personalize.CreateCampaignInput) (*request.Request, *personalize.CreateCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateCampaignOutput)
	return ret0, ret1
}

// CreateCampaignRequest indicates an expected call of CreateCampaignRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateCampaignRequest), arg0)
}

// CreateCampaignWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateCampaignWithContext(arg0 context.Context, arg1 *personalize.CreateCampaignInput, arg2 ...request.Option) (*personalize.CreateCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaignWithContext indicates an expected call of CreateCampaignWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaignWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateCampaignWithContext), varargs...)
}

// CreateDataset mocks base method.
func (m *MockPersonalizeAPI) CreateDataset(arg0 *personalize.CreateDatasetInput) (*personalize.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0)
	ret0, _ := ret[0].(*personalize.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockPersonalizeAPIMockRecorder) CreateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDataset), arg0)
}

// CreateDatasetExportJob mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetExportJob(arg0 *personalize.CreateDatasetExportJobInput) (*personalize.CreateDatasetExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetExportJob", arg0)
	ret0, _ := ret[0].(*personalize.CreateDatasetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetExportJob indicates an expected call of CreateDatasetExportJob.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetExportJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetExportJob), arg0)
}

// CreateDatasetExportJobRequest mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetExportJobRequest(arg0 *personalize.CreateDatasetExportJobInput) (*request.Request, *personalize.CreateDatasetExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateDatasetExportJobOutput)
	return ret0, ret1
}

// CreateDatasetExportJobRequest indicates an expected call of CreateDatasetExportJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetExportJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetExportJobRequest), arg0)
}

// CreateDatasetExportJobWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetExportJobWithContext(arg0 context.Context, arg1 *personalize.CreateDatasetExportJobInput, arg2 ...request.Option) (*personalize.CreateDatasetExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateDatasetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetExportJobWithContext indicates an expected call of CreateDatasetExportJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetExportJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetExportJobWithContext), varargs...)
}

// CreateDatasetGroup mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetGroup(arg0 *personalize.CreateDatasetGroupInput) (*personalize.CreateDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetGroup", arg0)
	ret0, _ := ret[0].(*personalize.CreateDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetGroup indicates an expected call of CreateDatasetGroup.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetGroup", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetGroup), arg0)
}

// CreateDatasetGroupRequest mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetGroupRequest(arg0 *personalize.CreateDatasetGroupInput) (*request.Request, *personalize.CreateDatasetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateDatasetGroupOutput)
	return ret0, ret1
}

// CreateDatasetGroupRequest indicates an expected call of CreateDatasetGroupRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetGroupRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetGroupRequest), arg0)
}

// CreateDatasetGroupWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetGroupWithContext(arg0 context.Context, arg1 *personalize.CreateDatasetGroupInput, arg2 ...request.Option) (*personalize.CreateDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetGroupWithContext indicates an expected call of CreateDatasetGroupWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetGroupWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetGroupWithContext), varargs...)
}

// CreateDatasetImportJob mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetImportJob(arg0 *personalize.CreateDatasetImportJobInput) (*personalize.CreateDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetImportJob", arg0)
	ret0, _ := ret[0].(*personalize.CreateDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetImportJob indicates an expected call of CreateDatasetImportJob.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetImportJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetImportJob), arg0)
}

// CreateDatasetImportJobRequest mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetImportJobRequest(arg0 *personalize.CreateDatasetImportJobInput) (*request.Request, *personalize.CreateDatasetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateDatasetImportJobOutput)
	return ret0, ret1
}

// CreateDatasetImportJobRequest indicates an expected call of CreateDatasetImportJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetImportJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetImportJobRequest), arg0)
}

// CreateDatasetImportJobWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetImportJobWithContext(arg0 context.Context, arg1 *personalize.CreateDatasetImportJobInput, arg2 ...request.Option) (*personalize.CreateDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetImportJobWithContext indicates an expected call of CreateDatasetImportJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetImportJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetImportJobWithContext), varargs...)
}

// CreateDatasetRequest mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetRequest(arg0 *personalize.CreateDatasetInput) (*request.Request, *personalize.CreateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateDatasetOutput)
	return ret0, ret1
}

// CreateDatasetRequest indicates an expected call of CreateDatasetRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetRequest), arg0)
}

// CreateDatasetWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateDatasetWithContext(arg0 context.Context, arg1 *personalize.CreateDatasetInput, arg2 ...request.Option) (*personalize.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetWithContext indicates an expected call of CreateDatasetWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateDatasetWithContext), varargs...)
}

// CreateEventTracker mocks base method.
func (m *MockPersonalizeAPI) CreateEventTracker(arg0 *personalize.CreateEventTrackerInput) (*personalize.CreateEventTrackerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventTracker", arg0)
	ret0, _ := ret[0].(*personalize.CreateEventTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventTracker indicates an expected call of CreateEventTracker.
func (mr *MockPersonalizeAPIMockRecorder) CreateEventTracker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventTracker", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateEventTracker), arg0)
}

// CreateEventTrackerRequest mocks base method.
func (m *MockPersonalizeAPI) CreateEventTrackerRequest(arg0 *personalize.CreateEventTrackerInput) (*request.Request, *personalize.CreateEventTrackerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventTrackerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateEventTrackerOutput)
	return ret0, ret1
}

// CreateEventTrackerRequest indicates an expected call of CreateEventTrackerRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateEventTrackerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventTrackerRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateEventTrackerRequest), arg0)
}

// CreateEventTrackerWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateEventTrackerWithContext(arg0 context.Context, arg1 *personalize.CreateEventTrackerInput, arg2 ...request.Option) (*personalize.CreateEventTrackerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventTrackerWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateEventTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventTrackerWithContext indicates an expected call of CreateEventTrackerWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateEventTrackerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventTrackerWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateEventTrackerWithContext), varargs...)
}

// CreateFilter mocks base method.
func (m *MockPersonalizeAPI) CreateFilter(arg0 *personalize.CreateFilterInput) (*personalize.CreateFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilter", arg0)
	ret0, _ := ret[0].(*personalize.CreateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilter indicates an expected call of CreateFilter.
func (mr *MockPersonalizeAPIMockRecorder) CreateFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilter", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateFilter), arg0)
}

// CreateFilterRequest mocks base method.
func (m *MockPersonalizeAPI) CreateFilterRequest(arg0 *personalize.CreateFilterInput) (*request.Request, *personalize.CreateFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateFilterOutput)
	return ret0, ret1
}

// CreateFilterRequest indicates an expected call of CreateFilterRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateFilterRequest), arg0)
}

// CreateFilterWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateFilterWithContext(arg0 context.Context, arg1 *personalize.CreateFilterInput, arg2 ...request.Option) (*personalize.CreateFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFilterWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilterWithContext indicates an expected call of CreateFilterWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateFilterWithContext), varargs...)
}

// CreateRecommender mocks base method.
func (m *MockPersonalizeAPI) CreateRecommender(arg0 *personalize.CreateRecommenderInput) (*personalize.CreateRecommenderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecommender", arg0)
	ret0, _ := ret[0].(*personalize.CreateRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecommender indicates an expected call of CreateRecommender.
func (mr *MockPersonalizeAPIMockRecorder) CreateRecommender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommender", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateRecommender), arg0)
}

// CreateRecommenderRequest mocks base method.
func (m *MockPersonalizeAPI) CreateRecommenderRequest(arg0 *personalize.CreateRecommenderInput) (*request.Request, *personalize.CreateRecommenderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecommenderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateRecommenderOutput)
	return ret0, ret1
}

// CreateRecommenderRequest indicates an expected call of CreateRecommenderRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateRecommenderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommenderRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateRecommenderRequest), arg0)
}

// CreateRecommenderWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateRecommenderWithContext(arg0 context.Context, arg1 *personalize.CreateRecommenderInput, arg2 ...request.Option) (*personalize.CreateRecommenderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecommenderWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecommenderWithContext indicates an expected call of CreateRecommenderWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateRecommenderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommenderWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateRecommenderWithContext), varargs...)
}

// CreateSchema mocks base method.
func (m *MockPersonalizeAPI) CreateSchema(arg0 *personalize.CreateSchemaInput) (*personalize.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", arg0)
	ret0, _ := ret[0].(*personalize.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockPersonalizeAPIMockRecorder) CreateSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSchema), arg0)
}

// CreateSchemaRequest mocks base method.
func (m *MockPersonalizeAPI) CreateSchemaRequest(arg0 *personalize.CreateSchemaInput) (*request.Request, *personalize.CreateSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateSchemaOutput)
	return ret0, ret1
}

// CreateSchemaRequest indicates an expected call of CreateSchemaRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSchemaRequest), arg0)
}

// CreateSchemaWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateSchemaWithContext(arg0 context.Context, arg1 *personalize.CreateSchemaInput, arg2 ...request.Option) (*personalize.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaWithContext indicates an expected call of CreateSchemaWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSchemaWithContext), varargs...)
}

// CreateSolution mocks base method.
func (m *MockPersonalizeAPI) CreateSolution(arg0 *personalize.CreateSolutionInput) (*personalize.CreateSolutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolution", arg0)
	ret0, _ := ret[0].(*personalize.CreateSolutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolution indicates an expected call of CreateSolution.
func (mr *MockPersonalizeAPIMockRecorder) CreateSolution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolution", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSolution), arg0)
}

// CreateSolutionRequest mocks base method.
func (m *MockPersonalizeAPI) CreateSolutionRequest(arg0 *personalize.CreateSolutionInput) (*request.Request, *personalize.CreateSolutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateSolutionOutput)
	return ret0, ret1
}

// CreateSolutionRequest indicates an expected call of CreateSolutionRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateSolutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolutionRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSolutionRequest), arg0)
}

// CreateSolutionVersion mocks base method.
func (m *MockPersonalizeAPI) CreateSolutionVersion(arg0 *personalize.CreateSolutionVersionInput) (*personalize.CreateSolutionVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolutionVersion", arg0)
	ret0, _ := ret[0].(*personalize.CreateSolutionVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolutionVersion indicates an expected call of CreateSolutionVersion.
func (mr *MockPersonalizeAPIMockRecorder) CreateSolutionVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolutionVersion", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSolutionVersion), arg0)
}

// CreateSolutionVersionRequest mocks base method.
func (m *MockPersonalizeAPI) CreateSolutionVersionRequest(arg0 *personalize.CreateSolutionVersionInput) (*request.Request, *personalize.CreateSolutionVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolutionVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.CreateSolutionVersionOutput)
	return ret0, ret1
}

// CreateSolutionVersionRequest indicates an expected call of CreateSolutionVersionRequest.
func (mr *MockPersonalizeAPIMockRecorder) CreateSolutionVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolutionVersionRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSolutionVersionRequest), arg0)
}

// CreateSolutionVersionWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateSolutionVersionWithContext(arg0 context.Context, arg1 *personalize.CreateSolutionVersionInput, arg2 ...request.Option) (*personalize.CreateSolutionVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSolutionVersionWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateSolutionVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolutionVersionWithContext indicates an expected call of CreateSolutionVersionWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateSolutionVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolutionVersionWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSolutionVersionWithContext), varargs...)
}

// CreateSolutionWithContext mocks base method.
func (m *MockPersonalizeAPI) CreateSolutionWithContext(arg0 context.Context, arg1 *personalize.CreateSolutionInput, arg2 ...request.Option) (*personalize.CreateSolutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSolutionWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.CreateSolutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolutionWithContext indicates an expected call of CreateSolutionWithContext.
func (mr *MockPersonalizeAPIMockRecorder) CreateSolutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolutionWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).CreateSolutionWithContext), varargs...)
}

// DeleteCampaign mocks base method.
func (m *MockPersonalizeAPI) DeleteCampaign(arg0 *personalize.DeleteCampaignInput) (*personalize.DeleteCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaign", arg0)
	ret0, _ := ret[0].(*personalize.DeleteCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCampaign indicates an expected call of DeleteCampaign.
func (mr *MockPersonalizeAPIMockRecorder) DeleteCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaign", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteCampaign), arg0)
}

// DeleteCampaignRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteCampaignRequest(arg0 *personalize.DeleteCampaignInput) (*request.Request, *personalize.DeleteCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteCampaignOutput)
	return ret0, ret1
}

// DeleteCampaignRequest indicates an expected call of DeleteCampaignRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaignRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteCampaignRequest), arg0)
}

// DeleteCampaignWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteCampaignWithContext(arg0 context.Context, arg1 *personalize.DeleteCampaignInput, arg2 ...request.Option) (*personalize.DeleteCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCampaignWithContext indicates an expected call of DeleteCampaignWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCampaignWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteCampaignWithContext), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockPersonalizeAPI) DeleteDataset(arg0 *personalize.DeleteDatasetInput) (*personalize.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0)
	ret0, _ := ret[0].(*personalize.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockPersonalizeAPIMockRecorder) DeleteDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteDataset), arg0)
}

// DeleteDatasetGroup mocks base method.
func (m *MockPersonalizeAPI) DeleteDatasetGroup(arg0 *personalize.DeleteDatasetGroupInput) (*personalize.DeleteDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetGroup", arg0)
	ret0, _ := ret[0].(*personalize.DeleteDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetGroup indicates an expected call of DeleteDatasetGroup.
func (mr *MockPersonalizeAPIMockRecorder) DeleteDatasetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetGroup", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteDatasetGroup), arg0)
}

// DeleteDatasetGroupRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteDatasetGroupRequest(arg0 *personalize.DeleteDatasetGroupInput) (*request.Request, *personalize.DeleteDatasetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteDatasetGroupOutput)
	return ret0, ret1
}

// DeleteDatasetGroupRequest indicates an expected call of DeleteDatasetGroupRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteDatasetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetGroupRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteDatasetGroupRequest), arg0)
}

// DeleteDatasetGroupWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteDatasetGroupWithContext(arg0 context.Context, arg1 *personalize.DeleteDatasetGroupInput, arg2 ...request.Option) (*personalize.DeleteDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetGroupWithContext indicates an expected call of DeleteDatasetGroupWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteDatasetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetGroupWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteDatasetGroupWithContext), varargs...)
}

// DeleteDatasetRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteDatasetRequest(arg0 *personalize.DeleteDatasetInput) (*request.Request, *personalize.DeleteDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteDatasetOutput)
	return ret0, ret1
}

// DeleteDatasetRequest indicates an expected call of DeleteDatasetRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteDatasetRequest), arg0)
}

// DeleteDatasetWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteDatasetWithContext(arg0 context.Context, arg1 *personalize.DeleteDatasetInput, arg2 ...request.Option) (*personalize.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetWithContext indicates an expected call of DeleteDatasetWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteDatasetWithContext), varargs...)
}

// DeleteEventTracker mocks base method.
func (m *MockPersonalizeAPI) DeleteEventTracker(arg0 *personalize.DeleteEventTrackerInput) (*personalize.DeleteEventTrackerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventTracker", arg0)
	ret0, _ := ret[0].(*personalize.DeleteEventTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventTracker indicates an expected call of DeleteEventTracker.
func (mr *MockPersonalizeAPIMockRecorder) DeleteEventTracker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventTracker", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteEventTracker), arg0)
}

// DeleteEventTrackerRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteEventTrackerRequest(arg0 *personalize.DeleteEventTrackerInput) (*request.Request, *personalize.DeleteEventTrackerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventTrackerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteEventTrackerOutput)
	return ret0, ret1
}

// DeleteEventTrackerRequest indicates an expected call of DeleteEventTrackerRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteEventTrackerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventTrackerRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteEventTrackerRequest), arg0)
}

// DeleteEventTrackerWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteEventTrackerWithContext(arg0 context.Context, arg1 *personalize.DeleteEventTrackerInput, arg2 ...request.Option) (*personalize.DeleteEventTrackerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventTrackerWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteEventTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventTrackerWithContext indicates an expected call of DeleteEventTrackerWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteEventTrackerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventTrackerWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteEventTrackerWithContext), varargs...)
}

// DeleteFilter mocks base method.
func (m *MockPersonalizeAPI) DeleteFilter(arg0 *personalize.DeleteFilterInput) (*personalize.DeleteFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilter", arg0)
	ret0, _ := ret[0].(*personalize.DeleteFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilter indicates an expected call of DeleteFilter.
func (mr *MockPersonalizeAPIMockRecorder) DeleteFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilter", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteFilter), arg0)
}

// DeleteFilterRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteFilterRequest(arg0 *personalize.DeleteFilterInput) (*request.Request, *personalize.DeleteFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteFilterOutput)
	return ret0, ret1
}

// DeleteFilterRequest indicates an expected call of DeleteFilterRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilterRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteFilterRequest), arg0)
}

// DeleteFilterWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteFilterWithContext(arg0 context.Context, arg1 *personalize.DeleteFilterInput, arg2 ...request.Option) (*personalize.DeleteFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFilterWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilterWithContext indicates an expected call of DeleteFilterWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilterWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteFilterWithContext), varargs...)
}

// DeleteRecommender mocks base method.
func (m *MockPersonalizeAPI) DeleteRecommender(arg0 *personalize.DeleteRecommenderInput) (*personalize.DeleteRecommenderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommender", arg0)
	ret0, _ := ret[0].(*personalize.DeleteRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecommender indicates an expected call of DeleteRecommender.
func (mr *MockPersonalizeAPIMockRecorder) DeleteRecommender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommender", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteRecommender), arg0)
}

// DeleteRecommenderRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteRecommenderRequest(arg0 *personalize.DeleteRecommenderInput) (*request.Request, *personalize.DeleteRecommenderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommenderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteRecommenderOutput)
	return ret0, ret1
}

// DeleteRecommenderRequest indicates an expected call of DeleteRecommenderRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteRecommenderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommenderRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteRecommenderRequest), arg0)
}

// DeleteRecommenderWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteRecommenderWithContext(arg0 context.Context, arg1 *personalize.DeleteRecommenderInput, arg2 ...request.Option) (*personalize.DeleteRecommenderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecommenderWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecommenderWithContext indicates an expected call of DeleteRecommenderWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteRecommenderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommenderWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteRecommenderWithContext), varargs...)
}

// DeleteSchema mocks base method.
func (m *MockPersonalizeAPI) DeleteSchema(arg0 *personalize.DeleteSchemaInput) (*personalize.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchema", arg0)
	ret0, _ := ret[0].(*personalize.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchema indicates an expected call of DeleteSchema.
func (mr *MockPersonalizeAPIMockRecorder) DeleteSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteSchema), arg0)
}

// DeleteSchemaRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteSchemaRequest(arg0 *personalize.DeleteSchemaInput) (*request.Request, *personalize.DeleteSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteSchemaOutput)
	return ret0, ret1
}

// DeleteSchemaRequest indicates an expected call of DeleteSchemaRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteSchemaRequest), arg0)
}

// DeleteSchemaWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteSchemaWithContext(arg0 context.Context, arg1 *personalize.DeleteSchemaInput, arg2 ...request.Option) (*personalize.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaWithContext indicates an expected call of DeleteSchemaWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteSchemaWithContext), varargs...)
}

// DeleteSolution mocks base method.
func (m *MockPersonalizeAPI) DeleteSolution(arg0 *personalize.DeleteSolutionInput) (*personalize.DeleteSolutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolution", arg0)
	ret0, _ := ret[0].(*personalize.DeleteSolutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolution indicates an expected call of DeleteSolution.
func (mr *MockPersonalizeAPIMockRecorder) DeleteSolution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolution", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteSolution), arg0)
}

// DeleteSolutionRequest mocks base method.
func (m *MockPersonalizeAPI) DeleteSolutionRequest(arg0 *personalize.DeleteSolutionInput) (*request.Request, *personalize.DeleteSolutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DeleteSolutionOutput)
	return ret0, ret1
}

// DeleteSolutionRequest indicates an expected call of DeleteSolutionRequest.
func (mr *MockPersonalizeAPIMockRecorder) DeleteSolutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolutionRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteSolutionRequest), arg0)
}

// DeleteSolutionWithContext mocks base method.
func (m *MockPersonalizeAPI) DeleteSolutionWithContext(arg0 context.Context, arg1 *personalize.DeleteSolutionInput, arg2 ...request.Option) (*personalize.DeleteSolutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSolutionWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DeleteSolutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSolutionWithContext indicates an expected call of DeleteSolutionWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DeleteSolutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolutionWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DeleteSolutionWithContext), varargs...)
}

// DescribeAlgorithm mocks base method.
func (m *MockPersonalizeAPI) DescribeAlgorithm(arg0 *personalize.DescribeAlgorithmInput) (*personalize.DescribeAlgorithmOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAlgorithm", arg0)
	ret0, _ := ret[0].(*personalize.DescribeAlgorithmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlgorithm indicates an expected call of DescribeAlgorithm.
func (mr *MockPersonalizeAPIMockRecorder) DescribeAlgorithm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlgorithm", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeAlgorithm), arg0)
}

// DescribeAlgorithmRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeAlgorithmRequest(arg0 *personalize.DescribeAlgorithmInput) (*request.Request, *personalize.DescribeAlgorithmOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAlgorithmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeAlgorithmOutput)
	return ret0, ret1
}

// DescribeAlgorithmRequest indicates an expected call of DescribeAlgorithmRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeAlgorithmRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlgorithmRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeAlgorithmRequest), arg0)
}

// DescribeAlgorithmWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeAlgorithmWithContext(arg0 context.Context, arg1 *personalize.DescribeAlgorithmInput, arg2 ...request.Option) (*personalize.DescribeAlgorithmOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlgorithmWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeAlgorithmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlgorithmWithContext indicates an expected call of DescribeAlgorithmWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeAlgorithmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlgorithmWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeAlgorithmWithContext), varargs...)
}

// DescribeBatchInferenceJob mocks base method.
func (m *MockPersonalizeAPI) DescribeBatchInferenceJob(arg0 *personalize.DescribeBatchInferenceJobInput) (*personalize.DescribeBatchInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBatchInferenceJob", arg0)
	ret0, _ := ret[0].(*personalize.DescribeBatchInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBatchInferenceJob indicates an expected call of DescribeBatchInferenceJob.
func (mr *MockPersonalizeAPIMockRecorder) DescribeBatchInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBatchInferenceJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeBatchInferenceJob), arg0)
}

// DescribeBatchInferenceJobRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeBatchInferenceJobRequest(arg0 *personalize.DescribeBatchInferenceJobInput) (*request.Request, *personalize.DescribeBatchInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBatchInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeBatchInferenceJobOutput)
	return ret0, ret1
}

// DescribeBatchInferenceJobRequest indicates an expected call of DescribeBatchInferenceJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeBatchInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBatchInferenceJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeBatchInferenceJobRequest), arg0)
}

// DescribeBatchInferenceJobWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeBatchInferenceJobWithContext(arg0 context.Context, arg1 *personalize.DescribeBatchInferenceJobInput, arg2 ...request.Option) (*personalize.DescribeBatchInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBatchInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeBatchInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBatchInferenceJobWithContext indicates an expected call of DescribeBatchInferenceJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeBatchInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBatchInferenceJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeBatchInferenceJobWithContext), varargs...)
}

// DescribeBatchSegmentJob mocks base method.
func (m *MockPersonalizeAPI) DescribeBatchSegmentJob(arg0 *personalize.DescribeBatchSegmentJobInput) (*personalize.DescribeBatchSegmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBatchSegmentJob", arg0)
	ret0, _ := ret[0].(*personalize.DescribeBatchSegmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBatchSegmentJob indicates an expected call of DescribeBatchSegmentJob.
func (mr *MockPersonalizeAPIMockRecorder) DescribeBatchSegmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBatchSegmentJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeBatchSegmentJob), arg0)
}

// DescribeBatchSegmentJobRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeBatchSegmentJobRequest(arg0 *personalize.DescribeBatchSegmentJobInput) (*request.Request, *personalize.DescribeBatchSegmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBatchSegmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeBatchSegmentJobOutput)
	return ret0, ret1
}

// DescribeBatchSegmentJobRequest indicates an expected call of DescribeBatchSegmentJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeBatchSegmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBatchSegmentJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeBatchSegmentJobRequest), arg0)
}

// DescribeBatchSegmentJobWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeBatchSegmentJobWithContext(arg0 context.Context, arg1 *personalize.DescribeBatchSegmentJobInput, arg2 ...request.Option) (*personalize.DescribeBatchSegmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBatchSegmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeBatchSegmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBatchSegmentJobWithContext indicates an expected call of DescribeBatchSegmentJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeBatchSegmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBatchSegmentJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeBatchSegmentJobWithContext), varargs...)
}

// DescribeCampaign mocks base method.
func (m *MockPersonalizeAPI) DescribeCampaign(arg0 *personalize.DescribeCampaignInput) (*personalize.DescribeCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCampaign", arg0)
	ret0, _ := ret[0].(*personalize.DescribeCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCampaign indicates an expected call of DescribeCampaign.
func (mr *MockPersonalizeAPIMockRecorder) DescribeCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCampaign", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeCampaign), arg0)
}

// DescribeCampaignRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeCampaignRequest(arg0 *personalize.DescribeCampaignInput) (*request.Request, *personalize.DescribeCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeCampaignOutput)
	return ret0, ret1
}

// DescribeCampaignRequest indicates an expected call of DescribeCampaignRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCampaignRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeCampaignRequest), arg0)
}

// DescribeCampaignWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeCampaignWithContext(arg0 context.Context, arg1 *personalize.DescribeCampaignInput, arg2 ...request.Option) (*personalize.DescribeCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCampaignWithContext indicates an expected call of DescribeCampaignWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCampaignWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeCampaignWithContext), varargs...)
}

// DescribeDataset mocks base method.
func (m *MockPersonalizeAPI) DescribeDataset(arg0 *personalize.DescribeDatasetInput) (*personalize.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataset", arg0)
	ret0, _ := ret[0].(*personalize.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataset indicates an expected call of DescribeDataset.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataset", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDataset), arg0)
}

// DescribeDatasetExportJob mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetExportJob(arg0 *personalize.DescribeDatasetExportJobInput) (*personalize.DescribeDatasetExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetExportJob", arg0)
	ret0, _ := ret[0].(*personalize.DescribeDatasetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetExportJob indicates an expected call of DescribeDatasetExportJob.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetExportJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetExportJob), arg0)
}

// DescribeDatasetExportJobRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetExportJobRequest(arg0 *personalize.DescribeDatasetExportJobInput) (*request.Request, *personalize.DescribeDatasetExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeDatasetExportJobOutput)
	return ret0, ret1
}

// DescribeDatasetExportJobRequest indicates an expected call of DescribeDatasetExportJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetExportJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetExportJobRequest), arg0)
}

// DescribeDatasetExportJobWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetExportJobWithContext(arg0 context.Context, arg1 *personalize.DescribeDatasetExportJobInput, arg2 ...request.Option) (*personalize.DescribeDatasetExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeDatasetExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetExportJobWithContext indicates an expected call of DescribeDatasetExportJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetExportJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetExportJobWithContext), varargs...)
}

// DescribeDatasetGroup mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetGroup(arg0 *personalize.DescribeDatasetGroupInput) (*personalize.DescribeDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetGroup", arg0)
	ret0, _ := ret[0].(*personalize.DescribeDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetGroup indicates an expected call of DescribeDatasetGroup.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetGroup", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetGroup), arg0)
}

// DescribeDatasetGroupRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetGroupRequest(arg0 *personalize.DescribeDatasetGroupInput) (*request.Request, *personalize.DescribeDatasetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeDatasetGroupOutput)
	return ret0, ret1
}

// DescribeDatasetGroupRequest indicates an expected call of DescribeDatasetGroupRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetGroupRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetGroupRequest), arg0)
}

// DescribeDatasetGroupWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetGroupWithContext(arg0 context.Context, arg1 *personalize.DescribeDatasetGroupInput, arg2 ...request.Option) (*personalize.DescribeDatasetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeDatasetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetGroupWithContext indicates an expected call of DescribeDatasetGroupWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetGroupWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetGroupWithContext), varargs...)
}

// DescribeDatasetImportJob mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetImportJob(arg0 *personalize.DescribeDatasetImportJobInput) (*personalize.DescribeDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetImportJob", arg0)
	ret0, _ := ret[0].(*personalize.DescribeDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetImportJob indicates an expected call of DescribeDatasetImportJob.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetImportJob", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetImportJob), arg0)
}

// DescribeDatasetImportJobRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetImportJobRequest(arg0 *personalize.DescribeDatasetImportJobInput) (*request.Request, *personalize.DescribeDatasetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeDatasetImportJobOutput)
	return ret0, ret1
}

// DescribeDatasetImportJobRequest indicates an expected call of DescribeDatasetImportJobRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetImportJobRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetImportJobRequest), arg0)
}

// DescribeDatasetImportJobWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetImportJobWithContext(arg0 context.Context, arg1 *personalize.DescribeDatasetImportJobInput, arg2 ...request.Option) (*personalize.DescribeDatasetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeDatasetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetImportJobWithContext indicates an expected call of DescribeDatasetImportJobWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetImportJobWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetImportJobWithContext), varargs...)
}

// DescribeDatasetRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetRequest(arg0 *personalize.DescribeDatasetInput) (*request.Request, *personalize.DescribeDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeDatasetOutput)
	return ret0, ret1
}

// DescribeDatasetRequest indicates an expected call of DescribeDatasetRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetRequest), arg0)
}

// DescribeDatasetWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeDatasetWithContext(arg0 context.Context, arg1 *personalize.DescribeDatasetInput, arg2 ...request.Option) (*personalize.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetWithContext indicates an expected call of DescribeDatasetWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeDatasetWithContext), varargs...)
}

// DescribeEventTracker mocks base method.
func (m *MockPersonalizeAPI) DescribeEventTracker(arg0 *personalize.DescribeEventTrackerInput) (*personalize.DescribeEventTrackerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventTracker", arg0)
	ret0, _ := ret[0].(*personalize.DescribeEventTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventTracker indicates an expected call of DescribeEventTracker.
func (mr *MockPersonalizeAPIMockRecorder) DescribeEventTracker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTracker", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeEventTracker), arg0)
}

// DescribeEventTrackerRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeEventTrackerRequest(arg0 *personalize.DescribeEventTrackerInput) (*request.Request, *personalize.DescribeEventTrackerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventTrackerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeEventTrackerOutput)
	return ret0, ret1
}

// DescribeEventTrackerRequest indicates an expected call of DescribeEventTrackerRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeEventTrackerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTrackerRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeEventTrackerRequest), arg0)
}

// DescribeEventTrackerWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeEventTrackerWithContext(arg0 context.Context, arg1 *personalize.DescribeEventTrackerInput, arg2 ...request.Option) (*personalize.DescribeEventTrackerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventTrackerWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeEventTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventTrackerWithContext indicates an expected call of DescribeEventTrackerWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeEventTrackerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTrackerWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeEventTrackerWithContext), varargs...)
}

// DescribeFeatureTransformation mocks base method.
func (m *MockPersonalizeAPI) DescribeFeatureTransformation(arg0 *personalize.DescribeFeatureTransformationInput) (*personalize.DescribeFeatureTransformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFeatureTransformation", arg0)
	ret0, _ := ret[0].(*personalize.DescribeFeatureTransformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFeatureTransformation indicates an expected call of DescribeFeatureTransformation.
func (mr *MockPersonalizeAPIMockRecorder) DescribeFeatureTransformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFeatureTransformation", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeFeatureTransformation), arg0)
}

// DescribeFeatureTransformationRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeFeatureTransformationRequest(arg0 *personalize.DescribeFeatureTransformationInput) (*request.Request, *personalize.DescribeFeatureTransformationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFeatureTransformationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeFeatureTransformationOutput)
	return ret0, ret1
}

// DescribeFeatureTransformationRequest indicates an expected call of DescribeFeatureTransformationRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeFeatureTransformationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFeatureTransformationRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeFeatureTransformationRequest), arg0)
}

// DescribeFeatureTransformationWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeFeatureTransformationWithContext(arg0 context.Context, arg1 *personalize.DescribeFeatureTransformationInput, arg2 ...request.Option) (*personalize.DescribeFeatureTransformationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFeatureTransformationWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeFeatureTransformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFeatureTransformationWithContext indicates an expected call of DescribeFeatureTransformationWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeFeatureTransformationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFeatureTransformationWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeFeatureTransformationWithContext), varargs...)
}

// DescribeFilter mocks base method.
func (m *MockPersonalizeAPI) DescribeFilter(arg0 *personalize.DescribeFilterInput) (*personalize.DescribeFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFilter", arg0)
	ret0, _ := ret[0].(*personalize.DescribeFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFilter indicates an expected call of DescribeFilter.
func (mr *MockPersonalizeAPIMockRecorder) DescribeFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFilter", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeFilter), arg0)
}

// DescribeFilterRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeFilterRequest(arg0 *personalize.DescribeFilterInput) (*request.Request, *personalize.DescribeFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeFilterOutput)
	return ret0, ret1
}

// DescribeFilterRequest indicates an expected call of DescribeFilterRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFilterRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeFilterRequest), arg0)
}

// DescribeFilterWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeFilterWithContext(arg0 context.Context, arg1 *personalize.DescribeFilterInput, arg2 ...request.Option) (*personalize.DescribeFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFilterWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFilterWithContext indicates an expected call of DescribeFilterWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFilterWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeFilterWithContext), varargs...)
}

// DescribeRecipe mocks base method.
func (m *MockPersonalizeAPI) DescribeRecipe(arg0 *personalize.DescribeRecipeInput) (*personalize.DescribeRecipeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecipe", arg0)
	ret0, _ := ret[0].(*personalize.DescribeRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecipe indicates an expected call of DescribeRecipe.
func (mr *MockPersonalizeAPIMockRecorder) DescribeRecipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecipe", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeRecipe), arg0)
}

// DescribeRecipeRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeRecipeRequest(arg0 *personalize.DescribeRecipeInput) (*request.Request, *personalize.DescribeRecipeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecipeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeRecipeOutput)
	return ret0, ret1
}

// DescribeRecipeRequest indicates an expected call of DescribeRecipeRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeRecipeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecipeRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeRecipeRequest), arg0)
}

// DescribeRecipeWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeRecipeWithContext(arg0 context.Context, arg1 *personalize.DescribeRecipeInput, arg2 ...request.Option) (*personalize.DescribeRecipeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecipeWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeRecipeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecipeWithContext indicates an expected call of DescribeRecipeWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeRecipeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecipeWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeRecipeWithContext), varargs...)
}

// DescribeRecommender mocks base method.
func (m *MockPersonalizeAPI) DescribeRecommender(arg0 *personalize.DescribeRecommenderInput) (*personalize.DescribeRecommenderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecommender", arg0)
	ret0, _ := ret[0].(*personalize.DescribeRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecommender indicates an expected call of DescribeRecommender.
func (mr *MockPersonalizeAPIMockRecorder) DescribeRecommender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecommender", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeRecommender), arg0)
}

// DescribeRecommenderRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeRecommenderRequest(arg0 *personalize.DescribeRecommenderInput) (*request.Request, *personalize.DescribeRecommenderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecommenderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeRecommenderOutput)
	return ret0, ret1
}

// DescribeRecommenderRequest indicates an expected call of DescribeRecommenderRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeRecommenderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecommenderRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeRecommenderRequest), arg0)
}

// DescribeRecommenderWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeRecommenderWithContext(arg0 context.Context, arg1 *personalize.DescribeRecommenderInput, arg2 ...request.Option) (*personalize.DescribeRecommenderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecommenderWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecommenderWithContext indicates an expected call of DescribeRecommenderWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeRecommenderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecommenderWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeRecommenderWithContext), varargs...)
}

// DescribeSchema mocks base method.
func (m *MockPersonalizeAPI) DescribeSchema(arg0 *personalize.DescribeSchemaInput) (*personalize.DescribeSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchema", arg0)
	ret0, _ := ret[0].(*personalize.DescribeSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchema indicates an expected call of DescribeSchema.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchema", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSchema), arg0)
}

// DescribeSchemaRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeSchemaRequest(arg0 *personalize.DescribeSchemaInput) (*request.Request, *personalize.DescribeSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeSchemaOutput)
	return ret0, ret1
}

// DescribeSchemaRequest indicates an expected call of DescribeSchemaRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemaRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSchemaRequest), arg0)
}

// DescribeSchemaWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeSchemaWithContext(arg0 context.Context, arg1 *personalize.DescribeSchemaInput, arg2 ...request.Option) (*personalize.DescribeSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchemaWithContext indicates an expected call of DescribeSchemaWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemaWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSchemaWithContext), varargs...)
}

// DescribeSolution mocks base method.
func (m *MockPersonalizeAPI) DescribeSolution(arg0 *personalize.DescribeSolutionInput) (*personalize.DescribeSolutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSolution", arg0)
	ret0, _ := ret[0].(*personalize.DescribeSolutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSolution indicates an expected call of DescribeSolution.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSolution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSolution", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSolution), arg0)
}

// DescribeSolutionRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeSolutionRequest(arg0 *personalize.DescribeSolutionInput) (*request.Request, *personalize.DescribeSolutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSolutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeSolutionOutput)
	return ret0, ret1
}

// DescribeSolutionRequest indicates an expected call of DescribeSolutionRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSolutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSolutionRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSolutionRequest), arg0)
}

// DescribeSolutionVersion mocks base method.
func (m *MockPersonalizeAPI) DescribeSolutionVersion(arg0 *personalize.DescribeSolutionVersionInput) (*personalize.DescribeSolutionVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSolutionVersion", arg0)
	ret0, _ := ret[0].(*personalize.DescribeSolutionVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSolutionVersion indicates an expected call of DescribeSolutionVersion.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSolutionVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSolutionVersion", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSolutionVersion), arg0)
}

// DescribeSolutionVersionRequest mocks base method.
func (m *MockPersonalizeAPI) DescribeSolutionVersionRequest(arg0 *personalize.DescribeSolutionVersionInput) (*request.Request, *personalize.DescribeSolutionVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSolutionVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.DescribeSolutionVersionOutput)
	return ret0, ret1
}

// DescribeSolutionVersionRequest indicates an expected call of DescribeSolutionVersionRequest.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSolutionVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSolutionVersionRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSolutionVersionRequest), arg0)
}

// DescribeSolutionVersionWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeSolutionVersionWithContext(arg0 context.Context, arg1 *personalize.DescribeSolutionVersionInput, arg2 ...request.Option) (*personalize.DescribeSolutionVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSolutionVersionWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeSolutionVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSolutionVersionWithContext indicates an expected call of DescribeSolutionVersionWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSolutionVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSolutionVersionWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSolutionVersionWithContext), varargs...)
}

// DescribeSolutionWithContext mocks base method.
func (m *MockPersonalizeAPI) DescribeSolutionWithContext(arg0 context.Context, arg1 *personalize.DescribeSolutionInput, arg2 ...request.Option) (*personalize.DescribeSolutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSolutionWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.DescribeSolutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSolutionWithContext indicates an expected call of DescribeSolutionWithContext.
func (mr *MockPersonalizeAPIMockRecorder) DescribeSolutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSolutionWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).DescribeSolutionWithContext), varargs...)
}

// GetSolutionMetrics mocks base method.
func (m *MockPersonalizeAPI) GetSolutionMetrics(arg0 *personalize.GetSolutionMetricsInput) (*personalize.GetSolutionMetricsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionMetrics", arg0)
	ret0, _ := ret[0].(*personalize.GetSolutionMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionMetrics indicates an expected call of GetSolutionMetrics.
func (mr *MockPersonalizeAPIMockRecorder) GetSolutionMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionMetrics", reflect.TypeOf((*MockPersonalizeAPI)(nil).GetSolutionMetrics), arg0)
}

// GetSolutionMetricsRequest mocks base method.
func (m *MockPersonalizeAPI) GetSolutionMetricsRequest(arg0 *personalize.GetSolutionMetricsInput) (*request.Request, *personalize.GetSolutionMetricsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolutionMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.GetSolutionMetricsOutput)
	return ret0, ret1
}

// GetSolutionMetricsRequest indicates an expected call of GetSolutionMetricsRequest.
func (mr *MockPersonalizeAPIMockRecorder) GetSolutionMetricsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionMetricsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).GetSolutionMetricsRequest), arg0)
}

// GetSolutionMetricsWithContext mocks base method.
func (m *MockPersonalizeAPI) GetSolutionMetricsWithContext(arg0 context.Context, arg1 *personalize.GetSolutionMetricsInput, arg2 ...request.Option) (*personalize.GetSolutionMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSolutionMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.GetSolutionMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolutionMetricsWithContext indicates an expected call of GetSolutionMetricsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) GetSolutionMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolutionMetricsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).GetSolutionMetricsWithContext), varargs...)
}

// ListBatchInferenceJobs mocks base method.
func (m *MockPersonalizeAPI) ListBatchInferenceJobs(arg0 *personalize.ListBatchInferenceJobsInput) (*personalize.ListBatchInferenceJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchInferenceJobs", arg0)
	ret0, _ := ret[0].(*personalize.ListBatchInferenceJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchInferenceJobs indicates an expected call of ListBatchInferenceJobs.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchInferenceJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchInferenceJobs", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchInferenceJobs), arg0)
}

// ListBatchInferenceJobsPages mocks base method.
func (m *MockPersonalizeAPI) ListBatchInferenceJobsPages(arg0 *personalize.ListBatchInferenceJobsInput, arg1 func(*personalize.ListBatchInferenceJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchInferenceJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchInferenceJobsPages indicates an expected call of ListBatchInferenceJobsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchInferenceJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchInferenceJobsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchInferenceJobsPages), arg0, arg1)
}

// ListBatchInferenceJobsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListBatchInferenceJobsPagesWithContext(arg0 context.Context, arg1 *personalize.ListBatchInferenceJobsInput, arg2 func(*personalize.ListBatchInferenceJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchInferenceJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchInferenceJobsPagesWithContext indicates an expected call of ListBatchInferenceJobsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchInferenceJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchInferenceJobsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchInferenceJobsPagesWithContext), varargs...)
}

// ListBatchInferenceJobsRequest mocks base method.
func (m *MockPersonalizeAPI) ListBatchInferenceJobsRequest(arg0 *personalize.ListBatchInferenceJobsInput) (*request.Request, *personalize.ListBatchInferenceJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchInferenceJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListBatchInferenceJobsOutput)
	return ret0, ret1
}

// ListBatchInferenceJobsRequest indicates an expected call of ListBatchInferenceJobsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchInferenceJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchInferenceJobsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchInferenceJobsRequest), arg0)
}

// ListBatchInferenceJobsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListBatchInferenceJobsWithContext(arg0 context.Context, arg1 *personalize.ListBatchInferenceJobsInput, arg2 ...request.Option) (*personalize.ListBatchInferenceJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchInferenceJobsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListBatchInferenceJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchInferenceJobsWithContext indicates an expected call of ListBatchInferenceJobsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchInferenceJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchInferenceJobsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchInferenceJobsWithContext), varargs...)
}

// ListBatchSegmentJobs mocks base method.
func (m *MockPersonalizeAPI) ListBatchSegmentJobs(arg0 *personalize.ListBatchSegmentJobsInput) (*personalize.ListBatchSegmentJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchSegmentJobs", arg0)
	ret0, _ := ret[0].(*personalize.ListBatchSegmentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchSegmentJobs indicates an expected call of ListBatchSegmentJobs.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchSegmentJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchSegmentJobs", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchSegmentJobs), arg0)
}

// ListBatchSegmentJobsPages mocks base method.
func (m *MockPersonalizeAPI) ListBatchSegmentJobsPages(arg0 *personalize.ListBatchSegmentJobsInput, arg1 func(*personalize.ListBatchSegmentJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchSegmentJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchSegmentJobsPages indicates an expected call of ListBatchSegmentJobsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchSegmentJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchSegmentJobsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchSegmentJobsPages), arg0, arg1)
}

// ListBatchSegmentJobsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListBatchSegmentJobsPagesWithContext(arg0 context.Context, arg1 *personalize.ListBatchSegmentJobsInput, arg2 func(*personalize.ListBatchSegmentJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchSegmentJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBatchSegmentJobsPagesWithContext indicates an expected call of ListBatchSegmentJobsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchSegmentJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchSegmentJobsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchSegmentJobsPagesWithContext), varargs...)
}

// ListBatchSegmentJobsRequest mocks base method.
func (m *MockPersonalizeAPI) ListBatchSegmentJobsRequest(arg0 *personalize.ListBatchSegmentJobsInput) (*request.Request, *personalize.ListBatchSegmentJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchSegmentJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListBatchSegmentJobsOutput)
	return ret0, ret1
}

// ListBatchSegmentJobsRequest indicates an expected call of ListBatchSegmentJobsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchSegmentJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchSegmentJobsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchSegmentJobsRequest), arg0)
}

// ListBatchSegmentJobsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListBatchSegmentJobsWithContext(arg0 context.Context, arg1 *personalize.ListBatchSegmentJobsInput, arg2 ...request.Option) (*personalize.ListBatchSegmentJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBatchSegmentJobsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListBatchSegmentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchSegmentJobsWithContext indicates an expected call of ListBatchSegmentJobsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListBatchSegmentJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchSegmentJobsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListBatchSegmentJobsWithContext), varargs...)
}

// ListCampaigns mocks base method.
func (m *MockPersonalizeAPI) ListCampaigns(arg0 *personalize.ListCampaignsInput) (*personalize.ListCampaignsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaigns", arg0)
	ret0, _ := ret[0].(*personalize.ListCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCampaigns indicates an expected call of ListCampaigns.
func (mr *MockPersonalizeAPIMockRecorder) ListCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaigns", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListCampaigns), arg0)
}

// ListCampaignsPages mocks base method.
func (m *MockPersonalizeAPI) ListCampaignsPages(arg0 *personalize.ListCampaignsInput, arg1 func(*personalize.ListCampaignsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaignsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCampaignsPages indicates an expected call of ListCampaignsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListCampaignsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListCampaignsPages), arg0, arg1)
}

// ListCampaignsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListCampaignsPagesWithContext(arg0 context.Context, arg1 *personalize.ListCampaignsInput, arg2 func(*personalize.ListCampaignsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCampaignsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCampaignsPagesWithContext indicates an expected call of ListCampaignsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListCampaignsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListCampaignsPagesWithContext), varargs...)
}

// ListCampaignsRequest mocks base method.
func (m *MockPersonalizeAPI) ListCampaignsRequest(arg0 *personalize.ListCampaignsInput) (*request.Request, *personalize.ListCampaignsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCampaignsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListCampaignsOutput)
	return ret0, ret1
}

// ListCampaignsRequest indicates an expected call of ListCampaignsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListCampaignsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListCampaignsRequest), arg0)
}

// ListCampaignsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListCampaignsWithContext(arg0 context.Context, arg1 *personalize.ListCampaignsInput, arg2 ...request.Option) (*personalize.ListCampaignsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCampaignsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCampaignsWithContext indicates an expected call of ListCampaignsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListCampaignsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCampaignsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListCampaignsWithContext), varargs...)
}

// ListDatasetExportJobs mocks base method.
func (m *MockPersonalizeAPI) ListDatasetExportJobs(arg0 *personalize.ListDatasetExportJobsInput) (*personalize.ListDatasetExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetExportJobs", arg0)
	ret0, _ := ret[0].(*personalize.ListDatasetExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetExportJobs indicates an expected call of ListDatasetExportJobs.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetExportJobs", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetExportJobs), arg0)
}

// ListDatasetExportJobsPages mocks base method.
func (m *MockPersonalizeAPI) ListDatasetExportJobsPages(arg0 *personalize.ListDatasetExportJobsInput, arg1 func(*personalize.ListDatasetExportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetExportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetExportJobsPages indicates an expected call of ListDatasetExportJobsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetExportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetExportJobsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetExportJobsPages), arg0, arg1)
}

// ListDatasetExportJobsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetExportJobsPagesWithContext(arg0 context.Context, arg1 *personalize.ListDatasetExportJobsInput, arg2 func(*personalize.ListDatasetExportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetExportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetExportJobsPagesWithContext indicates an expected call of ListDatasetExportJobsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetExportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetExportJobsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetExportJobsPagesWithContext), varargs...)
}

// ListDatasetExportJobsRequest mocks base method.
func (m *MockPersonalizeAPI) ListDatasetExportJobsRequest(arg0 *personalize.ListDatasetExportJobsInput) (*request.Request, *personalize.ListDatasetExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListDatasetExportJobsOutput)
	return ret0, ret1
}

// ListDatasetExportJobsRequest indicates an expected call of ListDatasetExportJobsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetExportJobsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetExportJobsRequest), arg0)
}

// ListDatasetExportJobsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetExportJobsWithContext(arg0 context.Context, arg1 *personalize.ListDatasetExportJobsInput, arg2 ...request.Option) (*personalize.ListDatasetExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListDatasetExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetExportJobsWithContext indicates an expected call of ListDatasetExportJobsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetExportJobsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetExportJobsWithContext), varargs...)
}

// ListDatasetGroups mocks base method.
func (m *MockPersonalizeAPI) ListDatasetGroups(arg0 *personalize.ListDatasetGroupsInput) (*personalize.ListDatasetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetGroups", arg0)
	ret0, _ := ret[0].(*personalize.ListDatasetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetGroups indicates an expected call of ListDatasetGroups.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroups", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetGroups), arg0)
}

// ListDatasetGroupsPages mocks base method.
func (m *MockPersonalizeAPI) ListDatasetGroupsPages(arg0 *personalize.ListDatasetGroupsInput, arg1 func(*personalize.ListDatasetGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetGroupsPages indicates an expected call of ListDatasetGroupsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetGroupsPages), arg0, arg1)
}

// ListDatasetGroupsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetGroupsPagesWithContext(arg0 context.Context, arg1 *personalize.ListDatasetGroupsInput, arg2 func(*personalize.ListDatasetGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetGroupsPagesWithContext indicates an expected call of ListDatasetGroupsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetGroupsPagesWithContext), varargs...)
}

// ListDatasetGroupsRequest mocks base method.
func (m *MockPersonalizeAPI) ListDatasetGroupsRequest(arg0 *personalize.ListDatasetGroupsInput) (*request.Request, *personalize.ListDatasetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListDatasetGroupsOutput)
	return ret0, ret1
}

// ListDatasetGroupsRequest indicates an expected call of ListDatasetGroupsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetGroupsRequest), arg0)
}

// ListDatasetGroupsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetGroupsWithContext(arg0 context.Context, arg1 *personalize.ListDatasetGroupsInput, arg2 ...request.Option) (*personalize.ListDatasetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListDatasetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetGroupsWithContext indicates an expected call of ListDatasetGroupsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetGroupsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetGroupsWithContext), varargs...)
}

// ListDatasetImportJobs mocks base method.
func (m *MockPersonalizeAPI) ListDatasetImportJobs(arg0 *personalize.ListDatasetImportJobsInput) (*personalize.ListDatasetImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetImportJobs", arg0)
	ret0, _ := ret[0].(*personalize.ListDatasetImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetImportJobs indicates an expected call of ListDatasetImportJobs.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobs", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetImportJobs), arg0)
}

// ListDatasetImportJobsPages mocks base method.
func (m *MockPersonalizeAPI) ListDatasetImportJobsPages(arg0 *personalize.ListDatasetImportJobsInput, arg1 func(*personalize.ListDatasetImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetImportJobsPages indicates an expected call of ListDatasetImportJobsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetImportJobsPages), arg0, arg1)
}

// ListDatasetImportJobsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetImportJobsPagesWithContext(arg0 context.Context, arg1 *personalize.ListDatasetImportJobsInput, arg2 func(*personalize.ListDatasetImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetImportJobsPagesWithContext indicates an expected call of ListDatasetImportJobsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetImportJobsPagesWithContext), varargs...)
}

// ListDatasetImportJobsRequest mocks base method.
func (m *MockPersonalizeAPI) ListDatasetImportJobsRequest(arg0 *personalize.ListDatasetImportJobsInput) (*request.Request, *personalize.ListDatasetImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListDatasetImportJobsOutput)
	return ret0, ret1
}

// ListDatasetImportJobsRequest indicates an expected call of ListDatasetImportJobsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetImportJobsRequest), arg0)
}

// ListDatasetImportJobsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetImportJobsWithContext(arg0 context.Context, arg1 *personalize.ListDatasetImportJobsInput, arg2 ...request.Option) (*personalize.ListDatasetImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListDatasetImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetImportJobsWithContext indicates an expected call of ListDatasetImportJobsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetImportJobsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetImportJobsWithContext), varargs...)
}

// ListDatasets mocks base method.
func (m *MockPersonalizeAPI) ListDatasets(arg0 *personalize.ListDatasetsInput) (*personalize.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", arg0)
	ret0, _ := ret[0].(*personalize.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasets), arg0)
}

// ListDatasetsPages mocks base method.
func (m *MockPersonalizeAPI) ListDatasetsPages(arg0 *personalize.ListDatasetsInput, arg1 func(*personalize.ListDatasetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPages indicates an expected call of ListDatasetsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetsPages), arg0, arg1)
}

// ListDatasetsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetsPagesWithContext(arg0 context.Context, arg1 *personalize.ListDatasetsInput, arg2 func(*personalize.ListDatasetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPagesWithContext indicates an expected call of ListDatasetsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetsPagesWithContext), varargs...)
}

// ListDatasetsRequest mocks base method.
func (m *MockPersonalizeAPI) ListDatasetsRequest(arg0 *personalize.ListDatasetsInput) (*request.Request, *personalize.ListDatasetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListDatasetsOutput)
	return ret0, ret1
}

// ListDatasetsRequest indicates an expected call of ListDatasetsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetsRequest), arg0)
}

// ListDatasetsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListDatasetsWithContext(arg0 context.Context, arg1 *personalize.ListDatasetsInput, arg2 ...request.Option) (*personalize.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetsWithContext indicates an expected call of ListDatasetsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListDatasetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListDatasetsWithContext), varargs...)
}

// ListEventTrackers mocks base method.
func (m *MockPersonalizeAPI) ListEventTrackers(arg0 *personalize.ListEventTrackersInput) (*personalize.ListEventTrackersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventTrackers", arg0)
	ret0, _ := ret[0].(*personalize.ListEventTrackersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventTrackers indicates an expected call of ListEventTrackers.
func (mr *MockPersonalizeAPIMockRecorder) ListEventTrackers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventTrackers", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListEventTrackers), arg0)
}

// ListEventTrackersPages mocks base method.
func (m *MockPersonalizeAPI) ListEventTrackersPages(arg0 *personalize.ListEventTrackersInput, arg1 func(*personalize.ListEventTrackersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventTrackersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventTrackersPages indicates an expected call of ListEventTrackersPages.
func (mr *MockPersonalizeAPIMockRecorder) ListEventTrackersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventTrackersPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListEventTrackersPages), arg0, arg1)
}

// ListEventTrackersPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListEventTrackersPagesWithContext(arg0 context.Context, arg1 *personalize.ListEventTrackersInput, arg2 func(*personalize.ListEventTrackersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventTrackersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventTrackersPagesWithContext indicates an expected call of ListEventTrackersPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListEventTrackersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventTrackersPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListEventTrackersPagesWithContext), varargs...)
}

// ListEventTrackersRequest mocks base method.
func (m *MockPersonalizeAPI) ListEventTrackersRequest(arg0 *personalize.ListEventTrackersInput) (*request.Request, *personalize.ListEventTrackersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventTrackersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListEventTrackersOutput)
	return ret0, ret1
}

// ListEventTrackersRequest indicates an expected call of ListEventTrackersRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListEventTrackersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventTrackersRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListEventTrackersRequest), arg0)
}

// ListEventTrackersWithContext mocks base method.
func (m *MockPersonalizeAPI) ListEventTrackersWithContext(arg0 context.Context, arg1 *personalize.ListEventTrackersInput, arg2 ...request.Option) (*personalize.ListEventTrackersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventTrackersWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListEventTrackersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventTrackersWithContext indicates an expected call of ListEventTrackersWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListEventTrackersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventTrackersWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListEventTrackersWithContext), varargs...)
}

// ListFilters mocks base method.
func (m *MockPersonalizeAPI) ListFilters(arg0 *personalize.ListFiltersInput) (*personalize.ListFiltersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilters", arg0)
	ret0, _ := ret[0].(*personalize.ListFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilters indicates an expected call of ListFilters.
func (mr *MockPersonalizeAPIMockRecorder) ListFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilters", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListFilters), arg0)
}

// ListFiltersPages mocks base method.
func (m *MockPersonalizeAPI) ListFiltersPages(arg0 *personalize.ListFiltersInput, arg1 func(*personalize.ListFiltersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiltersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFiltersPages indicates an expected call of ListFiltersPages.
func (mr *MockPersonalizeAPIMockRecorder) ListFiltersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListFiltersPages), arg0, arg1)
}

// ListFiltersPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListFiltersPagesWithContext(arg0 context.Context, arg1 *personalize.ListFiltersInput, arg2 func(*personalize.ListFiltersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFiltersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFiltersPagesWithContext indicates an expected call of ListFiltersPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListFiltersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListFiltersPagesWithContext), varargs...)
}

// ListFiltersRequest mocks base method.
func (m *MockPersonalizeAPI) ListFiltersRequest(arg0 *personalize.ListFiltersInput) (*request.Request, *personalize.ListFiltersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiltersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListFiltersOutput)
	return ret0, ret1
}

// ListFiltersRequest indicates an expected call of ListFiltersRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListFiltersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListFiltersRequest), arg0)
}

// ListFiltersWithContext mocks base method.
func (m *MockPersonalizeAPI) ListFiltersWithContext(arg0 context.Context, arg1 *personalize.ListFiltersInput, arg2 ...request.Option) (*personalize.ListFiltersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFiltersWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiltersWithContext indicates an expected call of ListFiltersWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListFiltersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListFiltersWithContext), varargs...)
}

// ListRecipes mocks base method.
func (m *MockPersonalizeAPI) ListRecipes(arg0 *personalize.ListRecipesInput) (*personalize.ListRecipesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipes", arg0)
	ret0, _ := ret[0].(*personalize.ListRecipesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipes indicates an expected call of ListRecipes.
func (mr *MockPersonalizeAPIMockRecorder) ListRecipes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipes", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecipes), arg0)
}

// ListRecipesPages mocks base method.
func (m *MockPersonalizeAPI) ListRecipesPages(arg0 *personalize.ListRecipesInput, arg1 func(*personalize.ListRecipesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecipesPages indicates an expected call of ListRecipesPages.
func (mr *MockPersonalizeAPIMockRecorder) ListRecipesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecipesPages), arg0, arg1)
}

// ListRecipesPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListRecipesPagesWithContext(arg0 context.Context, arg1 *personalize.ListRecipesInput, arg2 func(*personalize.ListRecipesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecipesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecipesPagesWithContext indicates an expected call of ListRecipesPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListRecipesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecipesPagesWithContext), varargs...)
}

// ListRecipesRequest mocks base method.
func (m *MockPersonalizeAPI) ListRecipesRequest(arg0 *personalize.ListRecipesInput) (*request.Request, *personalize.ListRecipesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListRecipesOutput)
	return ret0, ret1
}

// ListRecipesRequest indicates an expected call of ListRecipesRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListRecipesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecipesRequest), arg0)
}

// ListRecipesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListRecipesWithContext(arg0 context.Context, arg1 *personalize.ListRecipesInput, arg2 ...request.Option) (*personalize.ListRecipesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecipesWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListRecipesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipesWithContext indicates an expected call of ListRecipesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListRecipesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecipesWithContext), varargs...)
}

// ListRecommenders mocks base method.
func (m *MockPersonalizeAPI) ListRecommenders(arg0 *personalize.ListRecommendersInput) (*personalize.ListRecommendersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommenders", arg0)
	ret0, _ := ret[0].(*personalize.ListRecommendersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommenders indicates an expected call of ListRecommenders.
func (mr *MockPersonalizeAPIMockRecorder) ListRecommenders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommenders", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecommenders), arg0)
}

// ListRecommendersPages mocks base method.
func (m *MockPersonalizeAPI) ListRecommendersPages(arg0 *personalize.ListRecommendersInput, arg1 func(*personalize.ListRecommendersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendersPages indicates an expected call of ListRecommendersPages.
func (mr *MockPersonalizeAPIMockRecorder) ListRecommendersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendersPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecommendersPages), arg0, arg1)
}

// ListRecommendersPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListRecommendersPagesWithContext(arg0 context.Context, arg1 *personalize.ListRecommendersInput, arg2 func(*personalize.ListRecommendersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendersPagesWithContext indicates an expected call of ListRecommendersPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListRecommendersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendersPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecommendersPagesWithContext), varargs...)
}

// ListRecommendersRequest mocks base method.
func (m *MockPersonalizeAPI) ListRecommendersRequest(arg0 *personalize.ListRecommendersInput) (*request.Request, *personalize.ListRecommendersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListRecommendersOutput)
	return ret0, ret1
}

// ListRecommendersRequest indicates an expected call of ListRecommendersRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListRecommendersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendersRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecommendersRequest), arg0)
}

// ListRecommendersWithContext mocks base method.
func (m *MockPersonalizeAPI) ListRecommendersWithContext(arg0 context.Context, arg1 *personalize.ListRecommendersInput, arg2 ...request.Option) (*personalize.ListRecommendersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendersWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListRecommendersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendersWithContext indicates an expected call of ListRecommendersWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListRecommendersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendersWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListRecommendersWithContext), varargs...)
}

// ListSchemas mocks base method.
func (m *MockPersonalizeAPI) ListSchemas(arg0 *personalize.ListSchemasInput) (*personalize.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemas", arg0)
	ret0, _ := ret[0].(*personalize.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemas indicates an expected call of ListSchemas.
func (mr *MockPersonalizeAPIMockRecorder) ListSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemas", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSchemas), arg0)
}

// ListSchemasPages mocks base method.
func (m *MockPersonalizeAPI) ListSchemasPages(arg0 *personalize.ListSchemasInput, arg1 func(*personalize.ListSchemasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPages indicates an expected call of ListSchemasPages.
func (mr *MockPersonalizeAPIMockRecorder) ListSchemasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSchemasPages), arg0, arg1)
}

// ListSchemasPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListSchemasPagesWithContext(arg0 context.Context, arg1 *personalize.ListSchemasInput, arg2 func(*personalize.ListSchemasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPagesWithContext indicates an expected call of ListSchemasPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListSchemasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSchemasPagesWithContext), varargs...)
}

// ListSchemasRequest mocks base method.
func (m *MockPersonalizeAPI) ListSchemasRequest(arg0 *personalize.ListSchemasInput) (*request.Request, *personalize.ListSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListSchemasOutput)
	return ret0, ret1
}

// ListSchemasRequest indicates an expected call of ListSchemasRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSchemasRequest), arg0)
}

// ListSchemasWithContext mocks base method.
func (m *MockPersonalizeAPI) ListSchemasWithContext(arg0 context.Context, arg1 *personalize.ListSchemasInput, arg2 ...request.Option) (*personalize.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemasWithContext indicates an expected call of ListSchemasWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSchemasWithContext), varargs...)
}

// ListSolutionVersions mocks base method.
func (m *MockPersonalizeAPI) ListSolutionVersions(arg0 *personalize.ListSolutionVersionsInput) (*personalize.ListSolutionVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolutionVersions", arg0)
	ret0, _ := ret[0].(*personalize.ListSolutionVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolutionVersions indicates an expected call of ListSolutionVersions.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionVersions", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionVersions), arg0)
}

// ListSolutionVersionsPages mocks base method.
func (m *MockPersonalizeAPI) ListSolutionVersionsPages(arg0 *personalize.ListSolutionVersionsInput, arg1 func(*personalize.ListSolutionVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolutionVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolutionVersionsPages indicates an expected call of ListSolutionVersionsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionVersionsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionVersionsPages), arg0, arg1)
}

// ListSolutionVersionsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListSolutionVersionsPagesWithContext(arg0 context.Context, arg1 *personalize.ListSolutionVersionsInput, arg2 func(*personalize.ListSolutionVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolutionVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolutionVersionsPagesWithContext indicates an expected call of ListSolutionVersionsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionVersionsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionVersionsPagesWithContext), varargs...)
}

// ListSolutionVersionsRequest mocks base method.
func (m *MockPersonalizeAPI) ListSolutionVersionsRequest(arg0 *personalize.ListSolutionVersionsInput) (*request.Request, *personalize.ListSolutionVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolutionVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListSolutionVersionsOutput)
	return ret0, ret1
}

// ListSolutionVersionsRequest indicates an expected call of ListSolutionVersionsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionVersionsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionVersionsRequest), arg0)
}

// ListSolutionVersionsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListSolutionVersionsWithContext(arg0 context.Context, arg1 *personalize.ListSolutionVersionsInput, arg2 ...request.Option) (*personalize.ListSolutionVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolutionVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListSolutionVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolutionVersionsWithContext indicates an expected call of ListSolutionVersionsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionVersionsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionVersionsWithContext), varargs...)
}

// ListSolutions mocks base method.
func (m *MockPersonalizeAPI) ListSolutions(arg0 *personalize.ListSolutionsInput) (*personalize.ListSolutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolutions", arg0)
	ret0, _ := ret[0].(*personalize.ListSolutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolutions indicates an expected call of ListSolutions.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutions", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutions), arg0)
}

// ListSolutionsPages mocks base method.
func (m *MockPersonalizeAPI) ListSolutionsPages(arg0 *personalize.ListSolutionsInput, arg1 func(*personalize.ListSolutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolutionsPages indicates an expected call of ListSolutionsPages.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionsPages", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionsPages), arg0, arg1)
}

// ListSolutionsPagesWithContext mocks base method.
func (m *MockPersonalizeAPI) ListSolutionsPagesWithContext(arg0 context.Context, arg1 *personalize.ListSolutionsInput, arg2 func(*personalize.ListSolutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSolutionsPagesWithContext indicates an expected call of ListSolutionsPagesWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionsPagesWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionsPagesWithContext), varargs...)
}

// ListSolutionsRequest mocks base method.
func (m *MockPersonalizeAPI) ListSolutionsRequest(arg0 *personalize.ListSolutionsInput) (*request.Request, *personalize.ListSolutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSolutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.ListSolutionsOutput)
	return ret0, ret1
}

// ListSolutionsRequest indicates an expected call of ListSolutionsRequest.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionsRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionsRequest), arg0)
}

// ListSolutionsWithContext mocks base method.
func (m *MockPersonalizeAPI) ListSolutionsWithContext(arg0 context.Context, arg1 *personalize.ListSolutionsInput, arg2 ...request.Option) (*personalize.ListSolutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSolutionsWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.ListSolutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSolutionsWithContext indicates an expected call of ListSolutionsWithContext.
func (mr *MockPersonalizeAPIMockRecorder) ListSolutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSolutionsWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).ListSolutionsWithContext), varargs...)
}

// StopSolutionVersionCreation mocks base method.
func (m *MockPersonalizeAPI) StopSolutionVersionCreation(arg0 *personalize.StopSolutionVersionCreationInput) (*personalize.StopSolutionVersionCreationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSolutionVersionCreation", arg0)
	ret0, _ := ret[0].(*personalize.StopSolutionVersionCreationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSolutionVersionCreation indicates an expected call of StopSolutionVersionCreation.
func (mr *MockPersonalizeAPIMockRecorder) StopSolutionVersionCreation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSolutionVersionCreation", reflect.TypeOf((*MockPersonalizeAPI)(nil).StopSolutionVersionCreation), arg0)
}

// StopSolutionVersionCreationRequest mocks base method.
func (m *MockPersonalizeAPI) StopSolutionVersionCreationRequest(arg0 *personalize.StopSolutionVersionCreationInput) (*request.Request, *personalize.StopSolutionVersionCreationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSolutionVersionCreationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.StopSolutionVersionCreationOutput)
	return ret0, ret1
}

// StopSolutionVersionCreationRequest indicates an expected call of StopSolutionVersionCreationRequest.
func (mr *MockPersonalizeAPIMockRecorder) StopSolutionVersionCreationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSolutionVersionCreationRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).StopSolutionVersionCreationRequest), arg0)
}

// StopSolutionVersionCreationWithContext mocks base method.
func (m *MockPersonalizeAPI) StopSolutionVersionCreationWithContext(arg0 context.Context, arg1 *personalize.StopSolutionVersionCreationInput, arg2 ...request.Option) (*personalize.StopSolutionVersionCreationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopSolutionVersionCreationWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.StopSolutionVersionCreationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSolutionVersionCreationWithContext indicates an expected call of StopSolutionVersionCreationWithContext.
func (mr *MockPersonalizeAPIMockRecorder) StopSolutionVersionCreationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSolutionVersionCreationWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).StopSolutionVersionCreationWithContext), varargs...)
}

// UpdateCampaign mocks base method.
func (m *MockPersonalizeAPI) UpdateCampaign(arg0 *personalize.UpdateCampaignInput) (*personalize.UpdateCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaign", arg0)
	ret0, _ := ret[0].(*personalize.UpdateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaign indicates an expected call of UpdateCampaign.
func (mr *MockPersonalizeAPIMockRecorder) UpdateCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaign", reflect.TypeOf((*MockPersonalizeAPI)(nil).UpdateCampaign), arg0)
}

// UpdateCampaignRequest mocks base method.
func (m *MockPersonalizeAPI) UpdateCampaignRequest(arg0 *personalize.UpdateCampaignInput) (*request.Request, *personalize.UpdateCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.UpdateCampaignOutput)
	return ret0, ret1
}

// UpdateCampaignRequest indicates an expected call of UpdateCampaignRequest.
func (mr *MockPersonalizeAPIMockRecorder) UpdateCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).UpdateCampaignRequest), arg0)
}

// UpdateCampaignWithContext mocks base method.
func (m *MockPersonalizeAPI) UpdateCampaignWithContext(arg0 context.Context, arg1 *personalize.UpdateCampaignInput, arg2 ...request.Option) (*personalize.UpdateCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.UpdateCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCampaignWithContext indicates an expected call of UpdateCampaignWithContext.
func (mr *MockPersonalizeAPIMockRecorder) UpdateCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).UpdateCampaignWithContext), varargs...)
}

// UpdateRecommender mocks base method.
func (m *MockPersonalizeAPI) UpdateRecommender(arg0 *personalize.UpdateRecommenderInput) (*personalize.UpdateRecommenderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommender", arg0)
	ret0, _ := ret[0].(*personalize.UpdateRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecommender indicates an expected call of UpdateRecommender.
func (mr *MockPersonalizeAPIMockRecorder) UpdateRecommender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommender", reflect.TypeOf((*MockPersonalizeAPI)(nil).UpdateRecommender), arg0)
}

// UpdateRecommenderRequest mocks base method.
func (m *MockPersonalizeAPI) UpdateRecommenderRequest(arg0 *personalize.UpdateRecommenderInput) (*request.Request, *personalize.UpdateRecommenderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommenderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*personalize.UpdateRecommenderOutput)
	return ret0, ret1
}

// UpdateRecommenderRequest indicates an expected call of UpdateRecommenderRequest.
func (mr *MockPersonalizeAPIMockRecorder) UpdateRecommenderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommenderRequest", reflect.TypeOf((*MockPersonalizeAPI)(nil).UpdateRecommenderRequest), arg0)
}

// UpdateRecommenderWithContext mocks base method.
func (m *MockPersonalizeAPI) UpdateRecommenderWithContext(arg0 context.Context, arg1 *personalize.UpdateRecommenderInput, arg2 ...request.Option) (*personalize.UpdateRecommenderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecommenderWithContext", varargs...)
	ret0, _ := ret[0].(*personalize.UpdateRecommenderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecommenderWithContext indicates an expected call of UpdateRecommenderWithContext.
func (mr *MockPersonalizeAPIMockRecorder) UpdateRecommenderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommenderWithContext", reflect.TypeOf((*MockPersonalizeAPI)(nil).UpdateRecommenderWithContext), varargs...)
}

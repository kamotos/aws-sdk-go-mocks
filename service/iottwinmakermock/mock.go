// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iottwinmaker/iottwinmakeriface (interfaces: IoTTwinMakerAPI)

// Package iottwinmakermock is a generated GoMock package.
package iottwinmakermock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	iottwinmaker "github.com/aws/aws-sdk-go/service/iottwinmaker"
	gomock "github.com/golang/mock/gomock"
)

// MockIoTTwinMakerAPI is a mock of IoTTwinMakerAPI interface.
type MockIoTTwinMakerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTTwinMakerAPIMockRecorder
}

// MockIoTTwinMakerAPIMockRecorder is the mock recorder for MockIoTTwinMakerAPI.
type MockIoTTwinMakerAPIMockRecorder struct {
	mock *MockIoTTwinMakerAPI
}

// NewMockIoTTwinMakerAPI creates a new mock instance.
func NewMockIoTTwinMakerAPI(ctrl *gomock.Controller) *MockIoTTwinMakerAPI {
	mock := &MockIoTTwinMakerAPI{ctrl: ctrl}
	mock.recorder = &MockIoTTwinMakerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoTTwinMakerAPI) EXPECT() *MockIoTTwinMakerAPIMockRecorder {
	return m.recorder
}

// BatchPutPropertyValues mocks base method.
func (m *MockIoTTwinMakerAPI) BatchPutPropertyValues(arg0 *iottwinmaker.BatchPutPropertyValuesInput) (*iottwinmaker.BatchPutPropertyValuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutPropertyValues", arg0)
	ret0, _ := ret[0].(*iottwinmaker.BatchPutPropertyValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutPropertyValues indicates an expected call of BatchPutPropertyValues.
func (mr *MockIoTTwinMakerAPIMockRecorder) BatchPutPropertyValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutPropertyValues", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).BatchPutPropertyValues), arg0)
}

// BatchPutPropertyValuesRequest mocks base method.
func (m *MockIoTTwinMakerAPI) BatchPutPropertyValuesRequest(arg0 *iottwinmaker.BatchPutPropertyValuesInput) (*request.Request, *iottwinmaker.BatchPutPropertyValuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutPropertyValuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.BatchPutPropertyValuesOutput)
	return ret0, ret1
}

// BatchPutPropertyValuesRequest indicates an expected call of BatchPutPropertyValuesRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) BatchPutPropertyValuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutPropertyValuesRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).BatchPutPropertyValuesRequest), arg0)
}

// BatchPutPropertyValuesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) BatchPutPropertyValuesWithContext(arg0 context.Context, arg1 *iottwinmaker.BatchPutPropertyValuesInput, arg2 ...request.Option) (*iottwinmaker.BatchPutPropertyValuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutPropertyValuesWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.BatchPutPropertyValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutPropertyValuesWithContext indicates an expected call of BatchPutPropertyValuesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) BatchPutPropertyValuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutPropertyValuesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).BatchPutPropertyValuesWithContext), varargs...)
}

// CreateComponentType mocks base method.
func (m *MockIoTTwinMakerAPI) CreateComponentType(arg0 *iottwinmaker.CreateComponentTypeInput) (*iottwinmaker.CreateComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponentType", arg0)
	ret0, _ := ret[0].(*iottwinmaker.CreateComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponentType indicates an expected call of CreateComponentType.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateComponentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponentType", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateComponentType), arg0)
}

// CreateComponentTypeRequest mocks base method.
func (m *MockIoTTwinMakerAPI) CreateComponentTypeRequest(arg0 *iottwinmaker.CreateComponentTypeInput) (*request.Request, *iottwinmaker.CreateComponentTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponentTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.CreateComponentTypeOutput)
	return ret0, ret1
}

// CreateComponentTypeRequest indicates an expected call of CreateComponentTypeRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateComponentTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponentTypeRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateComponentTypeRequest), arg0)
}

// CreateComponentTypeWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) CreateComponentTypeWithContext(arg0 context.Context, arg1 *iottwinmaker.CreateComponentTypeInput, arg2 ...request.Option) (*iottwinmaker.CreateComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComponentTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.CreateComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponentTypeWithContext indicates an expected call of CreateComponentTypeWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateComponentTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponentTypeWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateComponentTypeWithContext), varargs...)
}

// CreateEntity mocks base method.
func (m *MockIoTTwinMakerAPI) CreateEntity(arg0 *iottwinmaker.CreateEntityInput) (*iottwinmaker.CreateEntityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", arg0)
	ret0, _ := ret[0].(*iottwinmaker.CreateEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateEntity), arg0)
}

// CreateEntityRequest mocks base method.
func (m *MockIoTTwinMakerAPI) CreateEntityRequest(arg0 *iottwinmaker.CreateEntityInput) (*request.Request, *iottwinmaker.CreateEntityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.CreateEntityOutput)
	return ret0, ret1
}

// CreateEntityRequest indicates an expected call of CreateEntityRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateEntityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateEntityRequest), arg0)
}

// CreateEntityWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) CreateEntityWithContext(arg0 context.Context, arg1 *iottwinmaker.CreateEntityInput, arg2 ...request.Option) (*iottwinmaker.CreateEntityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEntityWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.CreateEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityWithContext indicates an expected call of CreateEntityWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateEntityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateEntityWithContext), varargs...)
}

// CreateScene mocks base method.
func (m *MockIoTTwinMakerAPI) CreateScene(arg0 *iottwinmaker.CreateSceneInput) (*iottwinmaker.CreateSceneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScene", arg0)
	ret0, _ := ret[0].(*iottwinmaker.CreateSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScene indicates an expected call of CreateScene.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateScene(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScene", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateScene), arg0)
}

// CreateSceneRequest mocks base method.
func (m *MockIoTTwinMakerAPI) CreateSceneRequest(arg0 *iottwinmaker.CreateSceneInput) (*request.Request, *iottwinmaker.CreateSceneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSceneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.CreateSceneOutput)
	return ret0, ret1
}

// CreateSceneRequest indicates an expected call of CreateSceneRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateSceneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSceneRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateSceneRequest), arg0)
}

// CreateSceneWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) CreateSceneWithContext(arg0 context.Context, arg1 *iottwinmaker.CreateSceneInput, arg2 ...request.Option) (*iottwinmaker.CreateSceneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSceneWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.CreateSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSceneWithContext indicates an expected call of CreateSceneWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateSceneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSceneWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateSceneWithContext), varargs...)
}

// CreateWorkspace mocks base method.
func (m *MockIoTTwinMakerAPI) CreateWorkspace(arg0 *iottwinmaker.CreateWorkspaceInput) (*iottwinmaker.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", arg0)
	ret0, _ := ret[0].(*iottwinmaker.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateWorkspace), arg0)
}

// CreateWorkspaceRequest mocks base method.
func (m *MockIoTTwinMakerAPI) CreateWorkspaceRequest(arg0 *iottwinmaker.CreateWorkspaceInput) (*request.Request, *iottwinmaker.CreateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.CreateWorkspaceOutput)
	return ret0, ret1
}

// CreateWorkspaceRequest indicates an expected call of CreateWorkspaceRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateWorkspaceRequest), arg0)
}

// CreateWorkspaceWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) CreateWorkspaceWithContext(arg0 context.Context, arg1 *iottwinmaker.CreateWorkspaceInput, arg2 ...request.Option) (*iottwinmaker.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceWithContext indicates an expected call of CreateWorkspaceWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) CreateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).CreateWorkspaceWithContext), varargs...)
}

// DeleteComponentType mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteComponentType(arg0 *iottwinmaker.DeleteComponentTypeInput) (*iottwinmaker.DeleteComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponentType", arg0)
	ret0, _ := ret[0].(*iottwinmaker.DeleteComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComponentType indicates an expected call of DeleteComponentType.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteComponentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponentType", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteComponentType), arg0)
}

// DeleteComponentTypeRequest mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteComponentTypeRequest(arg0 *iottwinmaker.DeleteComponentTypeInput) (*request.Request, *iottwinmaker.DeleteComponentTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponentTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.DeleteComponentTypeOutput)
	return ret0, ret1
}

// DeleteComponentTypeRequest indicates an expected call of DeleteComponentTypeRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteComponentTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponentTypeRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteComponentTypeRequest), arg0)
}

// DeleteComponentTypeWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteComponentTypeWithContext(arg0 context.Context, arg1 *iottwinmaker.DeleteComponentTypeInput, arg2 ...request.Option) (*iottwinmaker.DeleteComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComponentTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.DeleteComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComponentTypeWithContext indicates an expected call of DeleteComponentTypeWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteComponentTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponentTypeWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteComponentTypeWithContext), varargs...)
}

// DeleteEntity mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteEntity(arg0 *iottwinmaker.DeleteEntityInput) (*iottwinmaker.DeleteEntityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", arg0)
	ret0, _ := ret[0].(*iottwinmaker.DeleteEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteEntity), arg0)
}

// DeleteEntityRequest mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteEntityRequest(arg0 *iottwinmaker.DeleteEntityInput) (*request.Request, *iottwinmaker.DeleteEntityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.DeleteEntityOutput)
	return ret0, ret1
}

// DeleteEntityRequest indicates an expected call of DeleteEntityRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteEntityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteEntityRequest), arg0)
}

// DeleteEntityWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteEntityWithContext(arg0 context.Context, arg1 *iottwinmaker.DeleteEntityInput, arg2 ...request.Option) (*iottwinmaker.DeleteEntityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEntityWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.DeleteEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntityWithContext indicates an expected call of DeleteEntityWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteEntityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteEntityWithContext), varargs...)
}

// DeleteScene mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteScene(arg0 *iottwinmaker.DeleteSceneInput) (*iottwinmaker.DeleteSceneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScene", arg0)
	ret0, _ := ret[0].(*iottwinmaker.DeleteSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteScene indicates an expected call of DeleteScene.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteScene(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScene", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteScene), arg0)
}

// DeleteSceneRequest mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteSceneRequest(arg0 *iottwinmaker.DeleteSceneInput) (*request.Request, *iottwinmaker.DeleteSceneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSceneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.DeleteSceneOutput)
	return ret0, ret1
}

// DeleteSceneRequest indicates an expected call of DeleteSceneRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteSceneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSceneRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteSceneRequest), arg0)
}

// DeleteSceneWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteSceneWithContext(arg0 context.Context, arg1 *iottwinmaker.DeleteSceneInput, arg2 ...request.Option) (*iottwinmaker.DeleteSceneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSceneWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.DeleteSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSceneWithContext indicates an expected call of DeleteSceneWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteSceneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSceneWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteSceneWithContext), varargs...)
}

// DeleteWorkspace mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteWorkspace(arg0 *iottwinmaker.DeleteWorkspaceInput) (*iottwinmaker.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0)
	ret0, _ := ret[0].(*iottwinmaker.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteWorkspace), arg0)
}

// DeleteWorkspaceRequest mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteWorkspaceRequest(arg0 *iottwinmaker.DeleteWorkspaceInput) (*request.Request, *iottwinmaker.DeleteWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.DeleteWorkspaceOutput)
	return ret0, ret1
}

// DeleteWorkspaceRequest indicates an expected call of DeleteWorkspaceRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteWorkspaceRequest), arg0)
}

// DeleteWorkspaceWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) DeleteWorkspaceWithContext(arg0 context.Context, arg1 *iottwinmaker.DeleteWorkspaceInput, arg2 ...request.Option) (*iottwinmaker.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceWithContext indicates an expected call of DeleteWorkspaceWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) DeleteWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).DeleteWorkspaceWithContext), varargs...)
}

// GetComponentType mocks base method.
func (m *MockIoTTwinMakerAPI) GetComponentType(arg0 *iottwinmaker.GetComponentTypeInput) (*iottwinmaker.GetComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentType", arg0)
	ret0, _ := ret[0].(*iottwinmaker.GetComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentType indicates an expected call of GetComponentType.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetComponentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentType", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetComponentType), arg0)
}

// GetComponentTypeRequest mocks base method.
func (m *MockIoTTwinMakerAPI) GetComponentTypeRequest(arg0 *iottwinmaker.GetComponentTypeInput) (*request.Request, *iottwinmaker.GetComponentTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.GetComponentTypeOutput)
	return ret0, ret1
}

// GetComponentTypeRequest indicates an expected call of GetComponentTypeRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetComponentTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentTypeRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetComponentTypeRequest), arg0)
}

// GetComponentTypeWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) GetComponentTypeWithContext(arg0 context.Context, arg1 *iottwinmaker.GetComponentTypeInput, arg2 ...request.Option) (*iottwinmaker.GetComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetComponentTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.GetComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentTypeWithContext indicates an expected call of GetComponentTypeWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetComponentTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentTypeWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetComponentTypeWithContext), varargs...)
}

// GetEntity mocks base method.
func (m *MockIoTTwinMakerAPI) GetEntity(arg0 *iottwinmaker.GetEntityInput) (*iottwinmaker.GetEntityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", arg0)
	ret0, _ := ret[0].(*iottwinmaker.GetEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetEntity), arg0)
}

// GetEntityRequest mocks base method.
func (m *MockIoTTwinMakerAPI) GetEntityRequest(arg0 *iottwinmaker.GetEntityInput) (*request.Request, *iottwinmaker.GetEntityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.GetEntityOutput)
	return ret0, ret1
}

// GetEntityRequest indicates an expected call of GetEntityRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetEntityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetEntityRequest), arg0)
}

// GetEntityWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) GetEntityWithContext(arg0 context.Context, arg1 *iottwinmaker.GetEntityInput, arg2 ...request.Option) (*iottwinmaker.GetEntityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.GetEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityWithContext indicates an expected call of GetEntityWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetEntityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetEntityWithContext), varargs...)
}

// GetPropertyValue mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValue(arg0 *iottwinmaker.GetPropertyValueInput) (*iottwinmaker.GetPropertyValueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyValue", arg0)
	ret0, _ := ret[0].(*iottwinmaker.GetPropertyValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyValue indicates an expected call of GetPropertyValue.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValue", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValue), arg0)
}

// GetPropertyValueHistory mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValueHistory(arg0 *iottwinmaker.GetPropertyValueHistoryInput) (*iottwinmaker.GetPropertyValueHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyValueHistory", arg0)
	ret0, _ := ret[0].(*iottwinmaker.GetPropertyValueHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyValueHistory indicates an expected call of GetPropertyValueHistory.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValueHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValueHistory", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValueHistory), arg0)
}

// GetPropertyValueHistoryPages mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValueHistoryPages(arg0 *iottwinmaker.GetPropertyValueHistoryInput, arg1 func(*iottwinmaker.GetPropertyValueHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyValueHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPropertyValueHistoryPages indicates an expected call of GetPropertyValueHistoryPages.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValueHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValueHistoryPages", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValueHistoryPages), arg0, arg1)
}

// GetPropertyValueHistoryPagesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValueHistoryPagesWithContext(arg0 context.Context, arg1 *iottwinmaker.GetPropertyValueHistoryInput, arg2 func(*iottwinmaker.GetPropertyValueHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPropertyValueHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPropertyValueHistoryPagesWithContext indicates an expected call of GetPropertyValueHistoryPagesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValueHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValueHistoryPagesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValueHistoryPagesWithContext), varargs...)
}

// GetPropertyValueHistoryRequest mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValueHistoryRequest(arg0 *iottwinmaker.GetPropertyValueHistoryInput) (*request.Request, *iottwinmaker.GetPropertyValueHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyValueHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.GetPropertyValueHistoryOutput)
	return ret0, ret1
}

// GetPropertyValueHistoryRequest indicates an expected call of GetPropertyValueHistoryRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValueHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValueHistoryRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValueHistoryRequest), arg0)
}

// GetPropertyValueHistoryWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValueHistoryWithContext(arg0 context.Context, arg1 *iottwinmaker.GetPropertyValueHistoryInput, arg2 ...request.Option) (*iottwinmaker.GetPropertyValueHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPropertyValueHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.GetPropertyValueHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyValueHistoryWithContext indicates an expected call of GetPropertyValueHistoryWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValueHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValueHistoryWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValueHistoryWithContext), varargs...)
}

// GetPropertyValueRequest mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValueRequest(arg0 *iottwinmaker.GetPropertyValueInput) (*request.Request, *iottwinmaker.GetPropertyValueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyValueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.GetPropertyValueOutput)
	return ret0, ret1
}

// GetPropertyValueRequest indicates an expected call of GetPropertyValueRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValueRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValueRequest), arg0)
}

// GetPropertyValueWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) GetPropertyValueWithContext(arg0 context.Context, arg1 *iottwinmaker.GetPropertyValueInput, arg2 ...request.Option) (*iottwinmaker.GetPropertyValueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPropertyValueWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.GetPropertyValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyValueWithContext indicates an expected call of GetPropertyValueWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetPropertyValueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyValueWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetPropertyValueWithContext), varargs...)
}

// GetScene mocks base method.
func (m *MockIoTTwinMakerAPI) GetScene(arg0 *iottwinmaker.GetSceneInput) (*iottwinmaker.GetSceneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScene", arg0)
	ret0, _ := ret[0].(*iottwinmaker.GetSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScene indicates an expected call of GetScene.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetScene(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScene", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetScene), arg0)
}

// GetSceneRequest mocks base method.
func (m *MockIoTTwinMakerAPI) GetSceneRequest(arg0 *iottwinmaker.GetSceneInput) (*request.Request, *iottwinmaker.GetSceneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSceneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.GetSceneOutput)
	return ret0, ret1
}

// GetSceneRequest indicates an expected call of GetSceneRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetSceneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSceneRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetSceneRequest), arg0)
}

// GetSceneWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) GetSceneWithContext(arg0 context.Context, arg1 *iottwinmaker.GetSceneInput, arg2 ...request.Option) (*iottwinmaker.GetSceneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSceneWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.GetSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSceneWithContext indicates an expected call of GetSceneWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetSceneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSceneWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetSceneWithContext), varargs...)
}

// GetWorkspace mocks base method.
func (m *MockIoTTwinMakerAPI) GetWorkspace(arg0 *iottwinmaker.GetWorkspaceInput) (*iottwinmaker.GetWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", arg0)
	ret0, _ := ret[0].(*iottwinmaker.GetWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetWorkspace), arg0)
}

// GetWorkspaceRequest mocks base method.
func (m *MockIoTTwinMakerAPI) GetWorkspaceRequest(arg0 *iottwinmaker.GetWorkspaceInput) (*request.Request, *iottwinmaker.GetWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.GetWorkspaceOutput)
	return ret0, ret1
}

// GetWorkspaceRequest indicates an expected call of GetWorkspaceRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetWorkspaceRequest), arg0)
}

// GetWorkspaceWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) GetWorkspaceWithContext(arg0 context.Context, arg1 *iottwinmaker.GetWorkspaceInput, arg2 ...request.Option) (*iottwinmaker.GetWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.GetWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceWithContext indicates an expected call of GetWorkspaceWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) GetWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).GetWorkspaceWithContext), varargs...)
}

// ListComponentTypes mocks base method.
func (m *MockIoTTwinMakerAPI) ListComponentTypes(arg0 *iottwinmaker.ListComponentTypesInput) (*iottwinmaker.ListComponentTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentTypes", arg0)
	ret0, _ := ret[0].(*iottwinmaker.ListComponentTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComponentTypes indicates an expected call of ListComponentTypes.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListComponentTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentTypes", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListComponentTypes), arg0)
}

// ListComponentTypesPages mocks base method.
func (m *MockIoTTwinMakerAPI) ListComponentTypesPages(arg0 *iottwinmaker.ListComponentTypesInput, arg1 func(*iottwinmaker.ListComponentTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListComponentTypesPages indicates an expected call of ListComponentTypesPages.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListComponentTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentTypesPages", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListComponentTypesPages), arg0, arg1)
}

// ListComponentTypesPagesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListComponentTypesPagesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListComponentTypesInput, arg2 func(*iottwinmaker.ListComponentTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComponentTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListComponentTypesPagesWithContext indicates an expected call of ListComponentTypesPagesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListComponentTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentTypesPagesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListComponentTypesPagesWithContext), varargs...)
}

// ListComponentTypesRequest mocks base method.
func (m *MockIoTTwinMakerAPI) ListComponentTypesRequest(arg0 *iottwinmaker.ListComponentTypesInput) (*request.Request, *iottwinmaker.ListComponentTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComponentTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.ListComponentTypesOutput)
	return ret0, ret1
}

// ListComponentTypesRequest indicates an expected call of ListComponentTypesRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListComponentTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentTypesRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListComponentTypesRequest), arg0)
}

// ListComponentTypesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListComponentTypesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListComponentTypesInput, arg2 ...request.Option) (*iottwinmaker.ListComponentTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComponentTypesWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.ListComponentTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComponentTypesWithContext indicates an expected call of ListComponentTypesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListComponentTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComponentTypesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListComponentTypesWithContext), varargs...)
}

// ListEntities mocks base method.
func (m *MockIoTTwinMakerAPI) ListEntities(arg0 *iottwinmaker.ListEntitiesInput) (*iottwinmaker.ListEntitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntities", arg0)
	ret0, _ := ret[0].(*iottwinmaker.ListEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListEntities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListEntities), arg0)
}

// ListEntitiesPages mocks base method.
func (m *MockIoTTwinMakerAPI) ListEntitiesPages(arg0 *iottwinmaker.ListEntitiesInput, arg1 func(*iottwinmaker.ListEntitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitiesPages indicates an expected call of ListEntitiesPages.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListEntitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesPages", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListEntitiesPages), arg0, arg1)
}

// ListEntitiesPagesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListEntitiesPagesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListEntitiesInput, arg2 func(*iottwinmaker.ListEntitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEntitiesPagesWithContext indicates an expected call of ListEntitiesPagesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListEntitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesPagesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListEntitiesPagesWithContext), varargs...)
}

// ListEntitiesRequest mocks base method.
func (m *MockIoTTwinMakerAPI) ListEntitiesRequest(arg0 *iottwinmaker.ListEntitiesInput) (*request.Request, *iottwinmaker.ListEntitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.ListEntitiesOutput)
	return ret0, ret1
}

// ListEntitiesRequest indicates an expected call of ListEntitiesRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListEntitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListEntitiesRequest), arg0)
}

// ListEntitiesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListEntitiesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListEntitiesInput, arg2 ...request.Option) (*iottwinmaker.ListEntitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitiesWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.ListEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitiesWithContext indicates an expected call of ListEntitiesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListEntitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListEntitiesWithContext), varargs...)
}

// ListScenes mocks base method.
func (m *MockIoTTwinMakerAPI) ListScenes(arg0 *iottwinmaker.ListScenesInput) (*iottwinmaker.ListScenesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScenes", arg0)
	ret0, _ := ret[0].(*iottwinmaker.ListScenesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScenes indicates an expected call of ListScenes.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListScenes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScenes", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListScenes), arg0)
}

// ListScenesPages mocks base method.
func (m *MockIoTTwinMakerAPI) ListScenesPages(arg0 *iottwinmaker.ListScenesInput, arg1 func(*iottwinmaker.ListScenesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScenesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListScenesPages indicates an expected call of ListScenesPages.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListScenesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScenesPages", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListScenesPages), arg0, arg1)
}

// ListScenesPagesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListScenesPagesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListScenesInput, arg2 func(*iottwinmaker.ListScenesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScenesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListScenesPagesWithContext indicates an expected call of ListScenesPagesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListScenesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScenesPagesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListScenesPagesWithContext), varargs...)
}

// ListScenesRequest mocks base method.
func (m *MockIoTTwinMakerAPI) ListScenesRequest(arg0 *iottwinmaker.ListScenesInput) (*request.Request, *iottwinmaker.ListScenesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScenesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.ListScenesOutput)
	return ret0, ret1
}

// ListScenesRequest indicates an expected call of ListScenesRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListScenesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScenesRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListScenesRequest), arg0)
}

// ListScenesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListScenesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListScenesInput, arg2 ...request.Option) (*iottwinmaker.ListScenesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScenesWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.ListScenesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScenesWithContext indicates an expected call of ListScenesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListScenesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScenesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListScenesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockIoTTwinMakerAPI) ListTagsForResource(arg0 *iottwinmaker.ListTagsForResourceInput) (*iottwinmaker.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*iottwinmaker.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockIoTTwinMakerAPI) ListTagsForResourceRequest(arg0 *iottwinmaker.ListTagsForResourceInput) (*request.Request, *iottwinmaker.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *iottwinmaker.ListTagsForResourceInput, arg2 ...request.Option) (*iottwinmaker.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWorkspaces mocks base method.
func (m *MockIoTTwinMakerAPI) ListWorkspaces(arg0 *iottwinmaker.ListWorkspacesInput) (*iottwinmaker.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaces", arg0)
	ret0, _ := ret[0].(*iottwinmaker.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaces indicates an expected call of ListWorkspaces.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaces", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListWorkspaces), arg0)
}

// ListWorkspacesPages mocks base method.
func (m *MockIoTTwinMakerAPI) ListWorkspacesPages(arg0 *iottwinmaker.ListWorkspacesInput, arg1 func(*iottwinmaker.ListWorkspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPages indicates an expected call of ListWorkspacesPages.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListWorkspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPages", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListWorkspacesPages), arg0, arg1)
}

// ListWorkspacesPagesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListWorkspacesPagesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListWorkspacesInput, arg2 func(*iottwinmaker.ListWorkspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPagesWithContext indicates an expected call of ListWorkspacesPagesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListWorkspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPagesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListWorkspacesPagesWithContext), varargs...)
}

// ListWorkspacesRequest mocks base method.
func (m *MockIoTTwinMakerAPI) ListWorkspacesRequest(arg0 *iottwinmaker.ListWorkspacesInput) (*request.Request, *iottwinmaker.ListWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.ListWorkspacesOutput)
	return ret0, ret1
}

// ListWorkspacesRequest indicates an expected call of ListWorkspacesRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListWorkspacesRequest), arg0)
}

// ListWorkspacesWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) ListWorkspacesWithContext(arg0 context.Context, arg1 *iottwinmaker.ListWorkspacesInput, arg2 ...request.Option) (*iottwinmaker.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacesWithContext indicates an expected call of ListWorkspacesWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) ListWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).ListWorkspacesWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockIoTTwinMakerAPI) TagResource(arg0 *iottwinmaker.TagResourceInput) (*iottwinmaker.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*iottwinmaker.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockIoTTwinMakerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockIoTTwinMakerAPI) TagResourceRequest(arg0 *iottwinmaker.TagResourceInput) (*request.Request, *iottwinmaker.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) TagResourceWithContext(arg0 context.Context, arg1 *iottwinmaker.TagResourceInput, arg2 ...request.Option) (*iottwinmaker.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockIoTTwinMakerAPI) UntagResource(arg0 *iottwinmaker.UntagResourceInput) (*iottwinmaker.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*iottwinmaker.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockIoTTwinMakerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockIoTTwinMakerAPI) UntagResourceRequest(arg0 *iottwinmaker.UntagResourceInput) (*request.Request, *iottwinmaker.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *iottwinmaker.UntagResourceInput, arg2 ...request.Option) (*iottwinmaker.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateComponentType mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateComponentType(arg0 *iottwinmaker.UpdateComponentTypeInput) (*iottwinmaker.UpdateComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponentType", arg0)
	ret0, _ := ret[0].(*iottwinmaker.UpdateComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComponentType indicates an expected call of UpdateComponentType.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateComponentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentType", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateComponentType), arg0)
}

// UpdateComponentTypeRequest mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateComponentTypeRequest(arg0 *iottwinmaker.UpdateComponentTypeInput) (*request.Request, *iottwinmaker.UpdateComponentTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponentTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.UpdateComponentTypeOutput)
	return ret0, ret1
}

// UpdateComponentTypeRequest indicates an expected call of UpdateComponentTypeRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateComponentTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentTypeRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateComponentTypeRequest), arg0)
}

// UpdateComponentTypeWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateComponentTypeWithContext(arg0 context.Context, arg1 *iottwinmaker.UpdateComponentTypeInput, arg2 ...request.Option) (*iottwinmaker.UpdateComponentTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComponentTypeWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.UpdateComponentTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComponentTypeWithContext indicates an expected call of UpdateComponentTypeWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateComponentTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentTypeWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateComponentTypeWithContext), varargs...)
}

// UpdateEntity mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateEntity(arg0 *iottwinmaker.UpdateEntityInput) (*iottwinmaker.UpdateEntityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", arg0)
	ret0, _ := ret[0].(*iottwinmaker.UpdateEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateEntity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateEntity), arg0)
}

// UpdateEntityRequest mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateEntityRequest(arg0 *iottwinmaker.UpdateEntityInput) (*request.Request, *iottwinmaker.UpdateEntityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.UpdateEntityOutput)
	return ret0, ret1
}

// UpdateEntityRequest indicates an expected call of UpdateEntityRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateEntityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateEntityRequest), arg0)
}

// UpdateEntityWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateEntityWithContext(arg0 context.Context, arg1 *iottwinmaker.UpdateEntityInput, arg2 ...request.Option) (*iottwinmaker.UpdateEntityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEntityWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.UpdateEntityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityWithContext indicates an expected call of UpdateEntityWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateEntityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateEntityWithContext), varargs...)
}

// UpdateScene mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateScene(arg0 *iottwinmaker.UpdateSceneInput) (*iottwinmaker.UpdateSceneOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScene", arg0)
	ret0, _ := ret[0].(*iottwinmaker.UpdateSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScene indicates an expected call of UpdateScene.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateScene(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScene", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateScene), arg0)
}

// UpdateSceneRequest mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateSceneRequest(arg0 *iottwinmaker.UpdateSceneInput) (*request.Request, *iottwinmaker.UpdateSceneOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSceneRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.UpdateSceneOutput)
	return ret0, ret1
}

// UpdateSceneRequest indicates an expected call of UpdateSceneRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateSceneRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSceneRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateSceneRequest), arg0)
}

// UpdateSceneWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateSceneWithContext(arg0 context.Context, arg1 *iottwinmaker.UpdateSceneInput, arg2 ...request.Option) (*iottwinmaker.UpdateSceneOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSceneWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.UpdateSceneOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSceneWithContext indicates an expected call of UpdateSceneWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateSceneWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSceneWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateSceneWithContext), varargs...)
}

// UpdateWorkspace mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateWorkspace(arg0 *iottwinmaker.UpdateWorkspaceInput) (*iottwinmaker.UpdateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", arg0)
	ret0, _ := ret[0].(*iottwinmaker.UpdateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateWorkspace), arg0)
}

// UpdateWorkspaceRequest mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateWorkspaceRequest(arg0 *iottwinmaker.UpdateWorkspaceInput) (*request.Request, *iottwinmaker.UpdateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iottwinmaker.UpdateWorkspaceOutput)
	return ret0, ret1
}

// UpdateWorkspaceRequest indicates an expected call of UpdateWorkspaceRequest.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceRequest", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateWorkspaceRequest), arg0)
}

// UpdateWorkspaceWithContext mocks base method.
func (m *MockIoTTwinMakerAPI) UpdateWorkspaceWithContext(arg0 context.Context, arg1 *iottwinmaker.UpdateWorkspaceInput, arg2 ...request.Option) (*iottwinmaker.UpdateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*iottwinmaker.UpdateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceWithContext indicates an expected call of UpdateWorkspaceWithContext.
func (mr *MockIoTTwinMakerAPIMockRecorder) UpdateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceWithContext", reflect.TypeOf((*MockIoTTwinMakerAPI)(nil).UpdateWorkspaceWithContext), varargs...)
}

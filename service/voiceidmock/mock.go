// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/voiceid/voiceidiface (interfaces: VoiceIDAPI)

// Package voiceidmock is a generated GoMock package.
package voiceidmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	voiceid "github.com/aws/aws-sdk-go/service/voiceid"
	gomock "github.com/golang/mock/gomock"
)

// MockVoiceIDAPI is a mock of VoiceIDAPI interface.
type MockVoiceIDAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVoiceIDAPIMockRecorder
}

// MockVoiceIDAPIMockRecorder is the mock recorder for MockVoiceIDAPI.
type MockVoiceIDAPIMockRecorder struct {
	mock *MockVoiceIDAPI
}

// NewMockVoiceIDAPI creates a new mock instance.
func NewMockVoiceIDAPI(ctrl *gomock.Controller) *MockVoiceIDAPI {
	mock := &MockVoiceIDAPI{ctrl: ctrl}
	mock.recorder = &MockVoiceIDAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoiceIDAPI) EXPECT() *MockVoiceIDAPIMockRecorder {
	return m.recorder
}

// CreateDomain mocks base method.
func (m *MockVoiceIDAPI) CreateDomain(arg0 *voiceid.CreateDomainInput) (*voiceid.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(*voiceid.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockVoiceIDAPIMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockVoiceIDAPI)(nil).CreateDomain), arg0)
}

// CreateDomainRequest mocks base method.
func (m *MockVoiceIDAPI) CreateDomainRequest(arg0 *voiceid.CreateDomainInput) (*request.Request, *voiceid.CreateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.CreateDomainOutput)
	return ret0, ret1
}

// CreateDomainRequest indicates an expected call of CreateDomainRequest.
func (mr *MockVoiceIDAPIMockRecorder) CreateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).CreateDomainRequest), arg0)
}

// CreateDomainWithContext mocks base method.
func (m *MockVoiceIDAPI) CreateDomainWithContext(arg0 context.Context, arg1 *voiceid.CreateDomainInput, arg2 ...request.Option) (*voiceid.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithContext indicates an expected call of CreateDomainWithContext.
func (mr *MockVoiceIDAPIMockRecorder) CreateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).CreateDomainWithContext), varargs...)
}

// DeleteDomain mocks base method.
func (m *MockVoiceIDAPI) DeleteDomain(arg0 *voiceid.DeleteDomainInput) (*voiceid.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0)
	ret0, _ := ret[0].(*voiceid.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomain indicates an expected call of DeleteDomain.
func (mr *MockVoiceIDAPIMockRecorder) DeleteDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteDomain), arg0)
}

// DeleteDomainRequest mocks base method.
func (m *MockVoiceIDAPI) DeleteDomainRequest(arg0 *voiceid.DeleteDomainInput) (*request.Request, *voiceid.DeleteDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DeleteDomainOutput)
	return ret0, ret1
}

// DeleteDomainRequest indicates an expected call of DeleteDomainRequest.
func (mr *MockVoiceIDAPIMockRecorder) DeleteDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteDomainRequest), arg0)
}

// DeleteDomainWithContext mocks base method.
func (m *MockVoiceIDAPI) DeleteDomainWithContext(arg0 context.Context, arg1 *voiceid.DeleteDomainInput, arg2 ...request.Option) (*voiceid.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainWithContext indicates an expected call of DeleteDomainWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DeleteDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteDomainWithContext), varargs...)
}

// DeleteFraudster mocks base method.
func (m *MockVoiceIDAPI) DeleteFraudster(arg0 *voiceid.DeleteFraudsterInput) (*voiceid.DeleteFraudsterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFraudster", arg0)
	ret0, _ := ret[0].(*voiceid.DeleteFraudsterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFraudster indicates an expected call of DeleteFraudster.
func (mr *MockVoiceIDAPIMockRecorder) DeleteFraudster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFraudster", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteFraudster), arg0)
}

// DeleteFraudsterRequest mocks base method.
func (m *MockVoiceIDAPI) DeleteFraudsterRequest(arg0 *voiceid.DeleteFraudsterInput) (*request.Request, *voiceid.DeleteFraudsterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFraudsterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DeleteFraudsterOutput)
	return ret0, ret1
}

// DeleteFraudsterRequest indicates an expected call of DeleteFraudsterRequest.
func (mr *MockVoiceIDAPIMockRecorder) DeleteFraudsterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFraudsterRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteFraudsterRequest), arg0)
}

// DeleteFraudsterWithContext mocks base method.
func (m *MockVoiceIDAPI) DeleteFraudsterWithContext(arg0 context.Context, arg1 *voiceid.DeleteFraudsterInput, arg2 ...request.Option) (*voiceid.DeleteFraudsterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFraudsterWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DeleteFraudsterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFraudsterWithContext indicates an expected call of DeleteFraudsterWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DeleteFraudsterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFraudsterWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteFraudsterWithContext), varargs...)
}

// DeleteSpeaker mocks base method.
func (m *MockVoiceIDAPI) DeleteSpeaker(arg0 *voiceid.DeleteSpeakerInput) (*voiceid.DeleteSpeakerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpeaker", arg0)
	ret0, _ := ret[0].(*voiceid.DeleteSpeakerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSpeaker indicates an expected call of DeleteSpeaker.
func (mr *MockVoiceIDAPIMockRecorder) DeleteSpeaker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpeaker", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteSpeaker), arg0)
}

// DeleteSpeakerRequest mocks base method.
func (m *MockVoiceIDAPI) DeleteSpeakerRequest(arg0 *voiceid.DeleteSpeakerInput) (*request.Request, *voiceid.DeleteSpeakerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpeakerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DeleteSpeakerOutput)
	return ret0, ret1
}

// DeleteSpeakerRequest indicates an expected call of DeleteSpeakerRequest.
func (mr *MockVoiceIDAPIMockRecorder) DeleteSpeakerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpeakerRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteSpeakerRequest), arg0)
}

// DeleteSpeakerWithContext mocks base method.
func (m *MockVoiceIDAPI) DeleteSpeakerWithContext(arg0 context.Context, arg1 *voiceid.DeleteSpeakerInput, arg2 ...request.Option) (*voiceid.DeleteSpeakerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSpeakerWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DeleteSpeakerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSpeakerWithContext indicates an expected call of DeleteSpeakerWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DeleteSpeakerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpeakerWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DeleteSpeakerWithContext), varargs...)
}

// DescribeDomain mocks base method.
func (m *MockVoiceIDAPI) DescribeDomain(arg0 *voiceid.DescribeDomainInput) (*voiceid.DescribeDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomain", arg0)
	ret0, _ := ret[0].(*voiceid.DescribeDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomain indicates an expected call of DescribeDomain.
func (mr *MockVoiceIDAPIMockRecorder) DescribeDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomain", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeDomain), arg0)
}

// DescribeDomainRequest mocks base method.
func (m *MockVoiceIDAPI) DescribeDomainRequest(arg0 *voiceid.DescribeDomainInput) (*request.Request, *voiceid.DescribeDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DescribeDomainOutput)
	return ret0, ret1
}

// DescribeDomainRequest indicates an expected call of DescribeDomainRequest.
func (mr *MockVoiceIDAPIMockRecorder) DescribeDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeDomainRequest), arg0)
}

// DescribeDomainWithContext mocks base method.
func (m *MockVoiceIDAPI) DescribeDomainWithContext(arg0 context.Context, arg1 *voiceid.DescribeDomainInput, arg2 ...request.Option) (*voiceid.DescribeDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DescribeDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainWithContext indicates an expected call of DescribeDomainWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DescribeDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeDomainWithContext), varargs...)
}

// DescribeFraudster mocks base method.
func (m *MockVoiceIDAPI) DescribeFraudster(arg0 *voiceid.DescribeFraudsterInput) (*voiceid.DescribeFraudsterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFraudster", arg0)
	ret0, _ := ret[0].(*voiceid.DescribeFraudsterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFraudster indicates an expected call of DescribeFraudster.
func (mr *MockVoiceIDAPIMockRecorder) DescribeFraudster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFraudster", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeFraudster), arg0)
}

// DescribeFraudsterRegistrationJob mocks base method.
func (m *MockVoiceIDAPI) DescribeFraudsterRegistrationJob(arg0 *voiceid.DescribeFraudsterRegistrationJobInput) (*voiceid.DescribeFraudsterRegistrationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFraudsterRegistrationJob", arg0)
	ret0, _ := ret[0].(*voiceid.DescribeFraudsterRegistrationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFraudsterRegistrationJob indicates an expected call of DescribeFraudsterRegistrationJob.
func (mr *MockVoiceIDAPIMockRecorder) DescribeFraudsterRegistrationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFraudsterRegistrationJob", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeFraudsterRegistrationJob), arg0)
}

// DescribeFraudsterRegistrationJobRequest mocks base method.
func (m *MockVoiceIDAPI) DescribeFraudsterRegistrationJobRequest(arg0 *voiceid.DescribeFraudsterRegistrationJobInput) (*request.Request, *voiceid.DescribeFraudsterRegistrationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFraudsterRegistrationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DescribeFraudsterRegistrationJobOutput)
	return ret0, ret1
}

// DescribeFraudsterRegistrationJobRequest indicates an expected call of DescribeFraudsterRegistrationJobRequest.
func (mr *MockVoiceIDAPIMockRecorder) DescribeFraudsterRegistrationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFraudsterRegistrationJobRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeFraudsterRegistrationJobRequest), arg0)
}

// DescribeFraudsterRegistrationJobWithContext mocks base method.
func (m *MockVoiceIDAPI) DescribeFraudsterRegistrationJobWithContext(arg0 context.Context, arg1 *voiceid.DescribeFraudsterRegistrationJobInput, arg2 ...request.Option) (*voiceid.DescribeFraudsterRegistrationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFraudsterRegistrationJobWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DescribeFraudsterRegistrationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFraudsterRegistrationJobWithContext indicates an expected call of DescribeFraudsterRegistrationJobWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DescribeFraudsterRegistrationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFraudsterRegistrationJobWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeFraudsterRegistrationJobWithContext), varargs...)
}

// DescribeFraudsterRequest mocks base method.
func (m *MockVoiceIDAPI) DescribeFraudsterRequest(arg0 *voiceid.DescribeFraudsterInput) (*request.Request, *voiceid.DescribeFraudsterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFraudsterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DescribeFraudsterOutput)
	return ret0, ret1
}

// DescribeFraudsterRequest indicates an expected call of DescribeFraudsterRequest.
func (mr *MockVoiceIDAPIMockRecorder) DescribeFraudsterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFraudsterRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeFraudsterRequest), arg0)
}

// DescribeFraudsterWithContext mocks base method.
func (m *MockVoiceIDAPI) DescribeFraudsterWithContext(arg0 context.Context, arg1 *voiceid.DescribeFraudsterInput, arg2 ...request.Option) (*voiceid.DescribeFraudsterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFraudsterWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DescribeFraudsterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFraudsterWithContext indicates an expected call of DescribeFraudsterWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DescribeFraudsterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFraudsterWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeFraudsterWithContext), varargs...)
}

// DescribeSpeaker mocks base method.
func (m *MockVoiceIDAPI) DescribeSpeaker(arg0 *voiceid.DescribeSpeakerInput) (*voiceid.DescribeSpeakerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSpeaker", arg0)
	ret0, _ := ret[0].(*voiceid.DescribeSpeakerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpeaker indicates an expected call of DescribeSpeaker.
func (mr *MockVoiceIDAPIMockRecorder) DescribeSpeaker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpeaker", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeSpeaker), arg0)
}

// DescribeSpeakerEnrollmentJob mocks base method.
func (m *MockVoiceIDAPI) DescribeSpeakerEnrollmentJob(arg0 *voiceid.DescribeSpeakerEnrollmentJobInput) (*voiceid.DescribeSpeakerEnrollmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSpeakerEnrollmentJob", arg0)
	ret0, _ := ret[0].(*voiceid.DescribeSpeakerEnrollmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpeakerEnrollmentJob indicates an expected call of DescribeSpeakerEnrollmentJob.
func (mr *MockVoiceIDAPIMockRecorder) DescribeSpeakerEnrollmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpeakerEnrollmentJob", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeSpeakerEnrollmentJob), arg0)
}

// DescribeSpeakerEnrollmentJobRequest mocks base method.
func (m *MockVoiceIDAPI) DescribeSpeakerEnrollmentJobRequest(arg0 *voiceid.DescribeSpeakerEnrollmentJobInput) (*request.Request, *voiceid.DescribeSpeakerEnrollmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSpeakerEnrollmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DescribeSpeakerEnrollmentJobOutput)
	return ret0, ret1
}

// DescribeSpeakerEnrollmentJobRequest indicates an expected call of DescribeSpeakerEnrollmentJobRequest.
func (mr *MockVoiceIDAPIMockRecorder) DescribeSpeakerEnrollmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpeakerEnrollmentJobRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeSpeakerEnrollmentJobRequest), arg0)
}

// DescribeSpeakerEnrollmentJobWithContext mocks base method.
func (m *MockVoiceIDAPI) DescribeSpeakerEnrollmentJobWithContext(arg0 context.Context, arg1 *voiceid.DescribeSpeakerEnrollmentJobInput, arg2 ...request.Option) (*voiceid.DescribeSpeakerEnrollmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpeakerEnrollmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DescribeSpeakerEnrollmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpeakerEnrollmentJobWithContext indicates an expected call of DescribeSpeakerEnrollmentJobWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DescribeSpeakerEnrollmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpeakerEnrollmentJobWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeSpeakerEnrollmentJobWithContext), varargs...)
}

// DescribeSpeakerRequest mocks base method.
func (m *MockVoiceIDAPI) DescribeSpeakerRequest(arg0 *voiceid.DescribeSpeakerInput) (*request.Request, *voiceid.DescribeSpeakerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSpeakerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.DescribeSpeakerOutput)
	return ret0, ret1
}

// DescribeSpeakerRequest indicates an expected call of DescribeSpeakerRequest.
func (mr *MockVoiceIDAPIMockRecorder) DescribeSpeakerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpeakerRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeSpeakerRequest), arg0)
}

// DescribeSpeakerWithContext mocks base method.
func (m *MockVoiceIDAPI) DescribeSpeakerWithContext(arg0 context.Context, arg1 *voiceid.DescribeSpeakerInput, arg2 ...request.Option) (*voiceid.DescribeSpeakerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpeakerWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.DescribeSpeakerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpeakerWithContext indicates an expected call of DescribeSpeakerWithContext.
func (mr *MockVoiceIDAPIMockRecorder) DescribeSpeakerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpeakerWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).DescribeSpeakerWithContext), varargs...)
}

// EvaluateSession mocks base method.
func (m *MockVoiceIDAPI) EvaluateSession(arg0 *voiceid.EvaluateSessionInput) (*voiceid.EvaluateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateSession", arg0)
	ret0, _ := ret[0].(*voiceid.EvaluateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateSession indicates an expected call of EvaluateSession.
func (mr *MockVoiceIDAPIMockRecorder) EvaluateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateSession", reflect.TypeOf((*MockVoiceIDAPI)(nil).EvaluateSession), arg0)
}

// EvaluateSessionRequest mocks base method.
func (m *MockVoiceIDAPI) EvaluateSessionRequest(arg0 *voiceid.EvaluateSessionInput) (*request.Request, *voiceid.EvaluateSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.EvaluateSessionOutput)
	return ret0, ret1
}

// EvaluateSessionRequest indicates an expected call of EvaluateSessionRequest.
func (mr *MockVoiceIDAPIMockRecorder) EvaluateSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateSessionRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).EvaluateSessionRequest), arg0)
}

// EvaluateSessionWithContext mocks base method.
func (m *MockVoiceIDAPI) EvaluateSessionWithContext(arg0 context.Context, arg1 *voiceid.EvaluateSessionInput, arg2 ...request.Option) (*voiceid.EvaluateSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvaluateSessionWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.EvaluateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateSessionWithContext indicates an expected call of EvaluateSessionWithContext.
func (mr *MockVoiceIDAPIMockRecorder) EvaluateSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateSessionWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).EvaluateSessionWithContext), varargs...)
}

// ListDomains mocks base method.
func (m *MockVoiceIDAPI) ListDomains(arg0 *voiceid.ListDomainsInput) (*voiceid.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].(*voiceid.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains.
func (mr *MockVoiceIDAPIMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListDomains), arg0)
}

// ListDomainsPages mocks base method.
func (m *MockVoiceIDAPI) ListDomainsPages(arg0 *voiceid.ListDomainsInput, arg1 func(*voiceid.ListDomainsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPages indicates an expected call of ListDomainsPages.
func (mr *MockVoiceIDAPIMockRecorder) ListDomainsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPages", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListDomainsPages), arg0, arg1)
}

// ListDomainsPagesWithContext mocks base method.
func (m *MockVoiceIDAPI) ListDomainsPagesWithContext(arg0 context.Context, arg1 *voiceid.ListDomainsInput, arg2 func(*voiceid.ListDomainsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPagesWithContext indicates an expected call of ListDomainsPagesWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListDomainsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPagesWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListDomainsPagesWithContext), varargs...)
}

// ListDomainsRequest mocks base method.
func (m *MockVoiceIDAPI) ListDomainsRequest(arg0 *voiceid.ListDomainsInput) (*request.Request, *voiceid.ListDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.ListDomainsOutput)
	return ret0, ret1
}

// ListDomainsRequest indicates an expected call of ListDomainsRequest.
func (mr *MockVoiceIDAPIMockRecorder) ListDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListDomainsRequest), arg0)
}

// ListDomainsWithContext mocks base method.
func (m *MockVoiceIDAPI) ListDomainsWithContext(arg0 context.Context, arg1 *voiceid.ListDomainsInput, arg2 ...request.Option) (*voiceid.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsWithContext indicates an expected call of ListDomainsWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListDomainsWithContext), varargs...)
}

// ListFraudsterRegistrationJobs mocks base method.
func (m *MockVoiceIDAPI) ListFraudsterRegistrationJobs(arg0 *voiceid.ListFraudsterRegistrationJobsInput) (*voiceid.ListFraudsterRegistrationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFraudsterRegistrationJobs", arg0)
	ret0, _ := ret[0].(*voiceid.ListFraudsterRegistrationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFraudsterRegistrationJobs indicates an expected call of ListFraudsterRegistrationJobs.
func (mr *MockVoiceIDAPIMockRecorder) ListFraudsterRegistrationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFraudsterRegistrationJobs", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListFraudsterRegistrationJobs), arg0)
}

// ListFraudsterRegistrationJobsPages mocks base method.
func (m *MockVoiceIDAPI) ListFraudsterRegistrationJobsPages(arg0 *voiceid.ListFraudsterRegistrationJobsInput, arg1 func(*voiceid.ListFraudsterRegistrationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFraudsterRegistrationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFraudsterRegistrationJobsPages indicates an expected call of ListFraudsterRegistrationJobsPages.
func (mr *MockVoiceIDAPIMockRecorder) ListFraudsterRegistrationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFraudsterRegistrationJobsPages", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListFraudsterRegistrationJobsPages), arg0, arg1)
}

// ListFraudsterRegistrationJobsPagesWithContext mocks base method.
func (m *MockVoiceIDAPI) ListFraudsterRegistrationJobsPagesWithContext(arg0 context.Context, arg1 *voiceid.ListFraudsterRegistrationJobsInput, arg2 func(*voiceid.ListFraudsterRegistrationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFraudsterRegistrationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFraudsterRegistrationJobsPagesWithContext indicates an expected call of ListFraudsterRegistrationJobsPagesWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListFraudsterRegistrationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFraudsterRegistrationJobsPagesWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListFraudsterRegistrationJobsPagesWithContext), varargs...)
}

// ListFraudsterRegistrationJobsRequest mocks base method.
func (m *MockVoiceIDAPI) ListFraudsterRegistrationJobsRequest(arg0 *voiceid.ListFraudsterRegistrationJobsInput) (*request.Request, *voiceid.ListFraudsterRegistrationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFraudsterRegistrationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.ListFraudsterRegistrationJobsOutput)
	return ret0, ret1
}

// ListFraudsterRegistrationJobsRequest indicates an expected call of ListFraudsterRegistrationJobsRequest.
func (mr *MockVoiceIDAPIMockRecorder) ListFraudsterRegistrationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFraudsterRegistrationJobsRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListFraudsterRegistrationJobsRequest), arg0)
}

// ListFraudsterRegistrationJobsWithContext mocks base method.
func (m *MockVoiceIDAPI) ListFraudsterRegistrationJobsWithContext(arg0 context.Context, arg1 *voiceid.ListFraudsterRegistrationJobsInput, arg2 ...request.Option) (*voiceid.ListFraudsterRegistrationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFraudsterRegistrationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.ListFraudsterRegistrationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFraudsterRegistrationJobsWithContext indicates an expected call of ListFraudsterRegistrationJobsWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListFraudsterRegistrationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFraudsterRegistrationJobsWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListFraudsterRegistrationJobsWithContext), varargs...)
}

// ListSpeakerEnrollmentJobs mocks base method.
func (m *MockVoiceIDAPI) ListSpeakerEnrollmentJobs(arg0 *voiceid.ListSpeakerEnrollmentJobsInput) (*voiceid.ListSpeakerEnrollmentJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpeakerEnrollmentJobs", arg0)
	ret0, _ := ret[0].(*voiceid.ListSpeakerEnrollmentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpeakerEnrollmentJobs indicates an expected call of ListSpeakerEnrollmentJobs.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakerEnrollmentJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakerEnrollmentJobs", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakerEnrollmentJobs), arg0)
}

// ListSpeakerEnrollmentJobsPages mocks base method.
func (m *MockVoiceIDAPI) ListSpeakerEnrollmentJobsPages(arg0 *voiceid.ListSpeakerEnrollmentJobsInput, arg1 func(*voiceid.ListSpeakerEnrollmentJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpeakerEnrollmentJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSpeakerEnrollmentJobsPages indicates an expected call of ListSpeakerEnrollmentJobsPages.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakerEnrollmentJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakerEnrollmentJobsPages", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakerEnrollmentJobsPages), arg0, arg1)
}

// ListSpeakerEnrollmentJobsPagesWithContext mocks base method.
func (m *MockVoiceIDAPI) ListSpeakerEnrollmentJobsPagesWithContext(arg0 context.Context, arg1 *voiceid.ListSpeakerEnrollmentJobsInput, arg2 func(*voiceid.ListSpeakerEnrollmentJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpeakerEnrollmentJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSpeakerEnrollmentJobsPagesWithContext indicates an expected call of ListSpeakerEnrollmentJobsPagesWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakerEnrollmentJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakerEnrollmentJobsPagesWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakerEnrollmentJobsPagesWithContext), varargs...)
}

// ListSpeakerEnrollmentJobsRequest mocks base method.
func (m *MockVoiceIDAPI) ListSpeakerEnrollmentJobsRequest(arg0 *voiceid.ListSpeakerEnrollmentJobsInput) (*request.Request, *voiceid.ListSpeakerEnrollmentJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpeakerEnrollmentJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.ListSpeakerEnrollmentJobsOutput)
	return ret0, ret1
}

// ListSpeakerEnrollmentJobsRequest indicates an expected call of ListSpeakerEnrollmentJobsRequest.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakerEnrollmentJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakerEnrollmentJobsRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakerEnrollmentJobsRequest), arg0)
}

// ListSpeakerEnrollmentJobsWithContext mocks base method.
func (m *MockVoiceIDAPI) ListSpeakerEnrollmentJobsWithContext(arg0 context.Context, arg1 *voiceid.ListSpeakerEnrollmentJobsInput, arg2 ...request.Option) (*voiceid.ListSpeakerEnrollmentJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpeakerEnrollmentJobsWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.ListSpeakerEnrollmentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpeakerEnrollmentJobsWithContext indicates an expected call of ListSpeakerEnrollmentJobsWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakerEnrollmentJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakerEnrollmentJobsWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakerEnrollmentJobsWithContext), varargs...)
}

// ListSpeakers mocks base method.
func (m *MockVoiceIDAPI) ListSpeakers(arg0 *voiceid.ListSpeakersInput) (*voiceid.ListSpeakersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpeakers", arg0)
	ret0, _ := ret[0].(*voiceid.ListSpeakersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpeakers indicates an expected call of ListSpeakers.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakers", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakers), arg0)
}

// ListSpeakersPages mocks base method.
func (m *MockVoiceIDAPI) ListSpeakersPages(arg0 *voiceid.ListSpeakersInput, arg1 func(*voiceid.ListSpeakersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpeakersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSpeakersPages indicates an expected call of ListSpeakersPages.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakersPages", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakersPages), arg0, arg1)
}

// ListSpeakersPagesWithContext mocks base method.
func (m *MockVoiceIDAPI) ListSpeakersPagesWithContext(arg0 context.Context, arg1 *voiceid.ListSpeakersInput, arg2 func(*voiceid.ListSpeakersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpeakersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSpeakersPagesWithContext indicates an expected call of ListSpeakersPagesWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakersPagesWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakersPagesWithContext), varargs...)
}

// ListSpeakersRequest mocks base method.
func (m *MockVoiceIDAPI) ListSpeakersRequest(arg0 *voiceid.ListSpeakersInput) (*request.Request, *voiceid.ListSpeakersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpeakersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.ListSpeakersOutput)
	return ret0, ret1
}

// ListSpeakersRequest indicates an expected call of ListSpeakersRequest.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakersRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakersRequest), arg0)
}

// ListSpeakersWithContext mocks base method.
func (m *MockVoiceIDAPI) ListSpeakersWithContext(arg0 context.Context, arg1 *voiceid.ListSpeakersInput, arg2 ...request.Option) (*voiceid.ListSpeakersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSpeakersWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.ListSpeakersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpeakersWithContext indicates an expected call of ListSpeakersWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListSpeakersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpeakersWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListSpeakersWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockVoiceIDAPI) ListTagsForResource(arg0 *voiceid.ListTagsForResourceInput) (*voiceid.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*voiceid.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockVoiceIDAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockVoiceIDAPI) ListTagsForResourceRequest(arg0 *voiceid.ListTagsForResourceInput) (*request.Request, *voiceid.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockVoiceIDAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockVoiceIDAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *voiceid.ListTagsForResourceInput, arg2 ...request.Option) (*voiceid.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockVoiceIDAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// OptOutSpeaker mocks base method.
func (m *MockVoiceIDAPI) OptOutSpeaker(arg0 *voiceid.OptOutSpeakerInput) (*voiceid.OptOutSpeakerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptOutSpeaker", arg0)
	ret0, _ := ret[0].(*voiceid.OptOutSpeakerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptOutSpeaker indicates an expected call of OptOutSpeaker.
func (mr *MockVoiceIDAPIMockRecorder) OptOutSpeaker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptOutSpeaker", reflect.TypeOf((*MockVoiceIDAPI)(nil).OptOutSpeaker), arg0)
}

// OptOutSpeakerRequest mocks base method.
func (m *MockVoiceIDAPI) OptOutSpeakerRequest(arg0 *voiceid.OptOutSpeakerInput) (*request.Request, *voiceid.OptOutSpeakerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptOutSpeakerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.OptOutSpeakerOutput)
	return ret0, ret1
}

// OptOutSpeakerRequest indicates an expected call of OptOutSpeakerRequest.
func (mr *MockVoiceIDAPIMockRecorder) OptOutSpeakerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptOutSpeakerRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).OptOutSpeakerRequest), arg0)
}

// OptOutSpeakerWithContext mocks base method.
func (m *MockVoiceIDAPI) OptOutSpeakerWithContext(arg0 context.Context, arg1 *voiceid.OptOutSpeakerInput, arg2 ...request.Option) (*voiceid.OptOutSpeakerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OptOutSpeakerWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.OptOutSpeakerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptOutSpeakerWithContext indicates an expected call of OptOutSpeakerWithContext.
func (mr *MockVoiceIDAPIMockRecorder) OptOutSpeakerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptOutSpeakerWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).OptOutSpeakerWithContext), varargs...)
}

// StartFraudsterRegistrationJob mocks base method.
func (m *MockVoiceIDAPI) StartFraudsterRegistrationJob(arg0 *voiceid.StartFraudsterRegistrationJobInput) (*voiceid.StartFraudsterRegistrationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFraudsterRegistrationJob", arg0)
	ret0, _ := ret[0].(*voiceid.StartFraudsterRegistrationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFraudsterRegistrationJob indicates an expected call of StartFraudsterRegistrationJob.
func (mr *MockVoiceIDAPIMockRecorder) StartFraudsterRegistrationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFraudsterRegistrationJob", reflect.TypeOf((*MockVoiceIDAPI)(nil).StartFraudsterRegistrationJob), arg0)
}

// StartFraudsterRegistrationJobRequest mocks base method.
func (m *MockVoiceIDAPI) StartFraudsterRegistrationJobRequest(arg0 *voiceid.StartFraudsterRegistrationJobInput) (*request.Request, *voiceid.StartFraudsterRegistrationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFraudsterRegistrationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.StartFraudsterRegistrationJobOutput)
	return ret0, ret1
}

// StartFraudsterRegistrationJobRequest indicates an expected call of StartFraudsterRegistrationJobRequest.
func (mr *MockVoiceIDAPIMockRecorder) StartFraudsterRegistrationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFraudsterRegistrationJobRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).StartFraudsterRegistrationJobRequest), arg0)
}

// StartFraudsterRegistrationJobWithContext mocks base method.
func (m *MockVoiceIDAPI) StartFraudsterRegistrationJobWithContext(arg0 context.Context, arg1 *voiceid.StartFraudsterRegistrationJobInput, arg2 ...request.Option) (*voiceid.StartFraudsterRegistrationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFraudsterRegistrationJobWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.StartFraudsterRegistrationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFraudsterRegistrationJobWithContext indicates an expected call of StartFraudsterRegistrationJobWithContext.
func (mr *MockVoiceIDAPIMockRecorder) StartFraudsterRegistrationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFraudsterRegistrationJobWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).StartFraudsterRegistrationJobWithContext), varargs...)
}

// StartSpeakerEnrollmentJob mocks base method.
func (m *MockVoiceIDAPI) StartSpeakerEnrollmentJob(arg0 *voiceid.StartSpeakerEnrollmentJobInput) (*voiceid.StartSpeakerEnrollmentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpeakerEnrollmentJob", arg0)
	ret0, _ := ret[0].(*voiceid.StartSpeakerEnrollmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSpeakerEnrollmentJob indicates an expected call of StartSpeakerEnrollmentJob.
func (mr *MockVoiceIDAPIMockRecorder) StartSpeakerEnrollmentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpeakerEnrollmentJob", reflect.TypeOf((*MockVoiceIDAPI)(nil).StartSpeakerEnrollmentJob), arg0)
}

// StartSpeakerEnrollmentJobRequest mocks base method.
func (m *MockVoiceIDAPI) StartSpeakerEnrollmentJobRequest(arg0 *voiceid.StartSpeakerEnrollmentJobInput) (*request.Request, *voiceid.StartSpeakerEnrollmentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpeakerEnrollmentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.StartSpeakerEnrollmentJobOutput)
	return ret0, ret1
}

// StartSpeakerEnrollmentJobRequest indicates an expected call of StartSpeakerEnrollmentJobRequest.
func (mr *MockVoiceIDAPIMockRecorder) StartSpeakerEnrollmentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpeakerEnrollmentJobRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).StartSpeakerEnrollmentJobRequest), arg0)
}

// StartSpeakerEnrollmentJobWithContext mocks base method.
func (m *MockVoiceIDAPI) StartSpeakerEnrollmentJobWithContext(arg0 context.Context, arg1 *voiceid.StartSpeakerEnrollmentJobInput, arg2 ...request.Option) (*voiceid.StartSpeakerEnrollmentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpeakerEnrollmentJobWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.StartSpeakerEnrollmentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSpeakerEnrollmentJobWithContext indicates an expected call of StartSpeakerEnrollmentJobWithContext.
func (mr *MockVoiceIDAPIMockRecorder) StartSpeakerEnrollmentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpeakerEnrollmentJobWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).StartSpeakerEnrollmentJobWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockVoiceIDAPI) TagResource(arg0 *voiceid.TagResourceInput) (*voiceid.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*voiceid.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockVoiceIDAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockVoiceIDAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockVoiceIDAPI) TagResourceRequest(arg0 *voiceid.TagResourceInput) (*request.Request, *voiceid.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockVoiceIDAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockVoiceIDAPI) TagResourceWithContext(arg0 context.Context, arg1 *voiceid.TagResourceInput, arg2 ...request.Option) (*voiceid.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockVoiceIDAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockVoiceIDAPI) UntagResource(arg0 *voiceid.UntagResourceInput) (*voiceid.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*voiceid.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockVoiceIDAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockVoiceIDAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockVoiceIDAPI) UntagResourceRequest(arg0 *voiceid.UntagResourceInput) (*request.Request, *voiceid.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockVoiceIDAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockVoiceIDAPI) UntagResourceWithContext(arg0 context.Context, arg1 *voiceid.UntagResourceInput, arg2 ...request.Option) (*voiceid.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockVoiceIDAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDomain mocks base method.
func (m *MockVoiceIDAPI) UpdateDomain(arg0 *voiceid.UpdateDomainInput) (*voiceid.UpdateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomain", arg0)
	ret0, _ := ret[0].(*voiceid.UpdateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomain indicates an expected call of UpdateDomain.
func (mr *MockVoiceIDAPIMockRecorder) UpdateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomain", reflect.TypeOf((*MockVoiceIDAPI)(nil).UpdateDomain), arg0)
}

// UpdateDomainRequest mocks base method.
func (m *MockVoiceIDAPI) UpdateDomainRequest(arg0 *voiceid.UpdateDomainInput) (*request.Request, *voiceid.UpdateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*voiceid.UpdateDomainOutput)
	return ret0, ret1
}

// UpdateDomainRequest indicates an expected call of UpdateDomainRequest.
func (mr *MockVoiceIDAPIMockRecorder) UpdateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainRequest", reflect.TypeOf((*MockVoiceIDAPI)(nil).UpdateDomainRequest), arg0)
}

// UpdateDomainWithContext mocks base method.
func (m *MockVoiceIDAPI) UpdateDomainWithContext(arg0 context.Context, arg1 *voiceid.UpdateDomainInput, arg2 ...request.Option) (*voiceid.UpdateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*voiceid.UpdateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainWithContext indicates an expected call of UpdateDomainWithContext.
func (mr *MockVoiceIDAPIMockRecorder) UpdateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainWithContext", reflect.TypeOf((*MockVoiceIDAPI)(nil).UpdateDomainWithContext), varargs...)
}

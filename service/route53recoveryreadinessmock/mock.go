// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/route53recoveryreadiness/route53recoveryreadinessiface (interfaces: Route53RecoveryReadinessAPI)

// Package route53recoveryreadinessmock is a generated GoMock package.
package route53recoveryreadinessmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	route53recoveryreadiness "github.com/aws/aws-sdk-go/service/route53recoveryreadiness"
	gomock "github.com/golang/mock/gomock"
)

// MockRoute53RecoveryReadinessAPI is a mock of Route53RecoveryReadinessAPI interface.
type MockRoute53RecoveryReadinessAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoute53RecoveryReadinessAPIMockRecorder
}

// MockRoute53RecoveryReadinessAPIMockRecorder is the mock recorder for MockRoute53RecoveryReadinessAPI.
type MockRoute53RecoveryReadinessAPIMockRecorder struct {
	mock *MockRoute53RecoveryReadinessAPI
}

// NewMockRoute53RecoveryReadinessAPI creates a new mock instance.
func NewMockRoute53RecoveryReadinessAPI(ctrl *gomock.Controller) *MockRoute53RecoveryReadinessAPI {
	mock := &MockRoute53RecoveryReadinessAPI{ctrl: ctrl}
	mock.recorder = &MockRoute53RecoveryReadinessAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute53RecoveryReadinessAPI) EXPECT() *MockRoute53RecoveryReadinessAPIMockRecorder {
	return m.recorder
}

// CreateCell mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateCell(arg0 *route53recoveryreadiness.CreateCellInput) (*route53recoveryreadiness.CreateCellOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCell", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCell indicates an expected call of CreateCell.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateCell(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCell", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateCell), arg0)
}

// CreateCellRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateCellRequest(arg0 *route53recoveryreadiness.CreateCellInput) (*request.Request, *route53recoveryreadiness.CreateCellOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCellRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.CreateCellOutput)
	return ret0, ret1
}

// CreateCellRequest indicates an expected call of CreateCellRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateCellRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCellRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateCellRequest), arg0)
}

// CreateCellWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateCellWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.CreateCellInput, arg2 ...request.Option) (*route53recoveryreadiness.CreateCellOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCellWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCellWithContext indicates an expected call of CreateCellWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateCellWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCellWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateCellWithContext), varargs...)
}

// CreateCrossAccountAuthorization mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateCrossAccountAuthorization(arg0 *route53recoveryreadiness.CreateCrossAccountAuthorizationInput) (*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCrossAccountAuthorization", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCrossAccountAuthorization indicates an expected call of CreateCrossAccountAuthorization.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateCrossAccountAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrossAccountAuthorization", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateCrossAccountAuthorization), arg0)
}

// CreateCrossAccountAuthorizationRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateCrossAccountAuthorizationRequest(arg0 *route53recoveryreadiness.CreateCrossAccountAuthorizationInput) (*request.Request, *route53recoveryreadiness.CreateCrossAccountAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCrossAccountAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput)
	return ret0, ret1
}

// CreateCrossAccountAuthorizationRequest indicates an expected call of CreateCrossAccountAuthorizationRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateCrossAccountAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrossAccountAuthorizationRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateCrossAccountAuthorizationRequest), arg0)
}

// CreateCrossAccountAuthorizationWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateCrossAccountAuthorizationWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.CreateCrossAccountAuthorizationInput, arg2 ...request.Option) (*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCrossAccountAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCrossAccountAuthorizationWithContext indicates an expected call of CreateCrossAccountAuthorizationWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateCrossAccountAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrossAccountAuthorizationWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateCrossAccountAuthorizationWithContext), varargs...)
}

// CreateReadinessCheck mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateReadinessCheck(arg0 *route53recoveryreadiness.CreateReadinessCheckInput) (*route53recoveryreadiness.CreateReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReadinessCheck", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReadinessCheck indicates an expected call of CreateReadinessCheck.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateReadinessCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReadinessCheck", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateReadinessCheck), arg0)
}

// CreateReadinessCheckRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateReadinessCheckRequest(arg0 *route53recoveryreadiness.CreateReadinessCheckInput) (*request.Request, *route53recoveryreadiness.CreateReadinessCheckOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReadinessCheckRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.CreateReadinessCheckOutput)
	return ret0, ret1
}

// CreateReadinessCheckRequest indicates an expected call of CreateReadinessCheckRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateReadinessCheckRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReadinessCheckRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateReadinessCheckRequest), arg0)
}

// CreateReadinessCheckWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateReadinessCheckWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.CreateReadinessCheckInput, arg2 ...request.Option) (*route53recoveryreadiness.CreateReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReadinessCheckWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReadinessCheckWithContext indicates an expected call of CreateReadinessCheckWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateReadinessCheckWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReadinessCheckWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateReadinessCheckWithContext), varargs...)
}

// CreateRecoveryGroup mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateRecoveryGroup(arg0 *route53recoveryreadiness.CreateRecoveryGroupInput) (*route53recoveryreadiness.CreateRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryGroup", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryGroup indicates an expected call of CreateRecoveryGroup.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateRecoveryGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryGroup", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateRecoveryGroup), arg0)
}

// CreateRecoveryGroupRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateRecoveryGroupRequest(arg0 *route53recoveryreadiness.CreateRecoveryGroupInput) (*request.Request, *route53recoveryreadiness.CreateRecoveryGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.CreateRecoveryGroupOutput)
	return ret0, ret1
}

// CreateRecoveryGroupRequest indicates an expected call of CreateRecoveryGroupRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateRecoveryGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryGroupRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateRecoveryGroupRequest), arg0)
}

// CreateRecoveryGroupWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateRecoveryGroupWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.CreateRecoveryGroupInput, arg2 ...request.Option) (*route53recoveryreadiness.CreateRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRecoveryGroupWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryGroupWithContext indicates an expected call of CreateRecoveryGroupWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateRecoveryGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryGroupWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateRecoveryGroupWithContext), varargs...)
}

// CreateResourceSet mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateResourceSet(arg0 *route53recoveryreadiness.CreateResourceSetInput) (*route53recoveryreadiness.CreateResourceSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceSet", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceSet indicates an expected call of CreateResourceSet.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateResourceSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceSet", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateResourceSet), arg0)
}

// CreateResourceSetRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateResourceSetRequest(arg0 *route53recoveryreadiness.CreateResourceSetInput) (*request.Request, *route53recoveryreadiness.CreateResourceSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.CreateResourceSetOutput)
	return ret0, ret1
}

// CreateResourceSetRequest indicates an expected call of CreateResourceSetRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateResourceSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceSetRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateResourceSetRequest), arg0)
}

// CreateResourceSetWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) CreateResourceSetWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.CreateResourceSetInput, arg2 ...request.Option) (*route53recoveryreadiness.CreateResourceSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourceSetWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.CreateResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceSetWithContext indicates an expected call of CreateResourceSetWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) CreateResourceSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceSetWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).CreateResourceSetWithContext), varargs...)
}

// DeleteCell mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteCell(arg0 *route53recoveryreadiness.DeleteCellInput) (*route53recoveryreadiness.DeleteCellOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCell", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCell indicates an expected call of DeleteCell.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteCell(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCell", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteCell), arg0)
}

// DeleteCellRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteCellRequest(arg0 *route53recoveryreadiness.DeleteCellInput) (*request.Request, *route53recoveryreadiness.DeleteCellOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCellRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.DeleteCellOutput)
	return ret0, ret1
}

// DeleteCellRequest indicates an expected call of DeleteCellRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteCellRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCellRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteCellRequest), arg0)
}

// DeleteCellWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteCellWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.DeleteCellInput, arg2 ...request.Option) (*route53recoveryreadiness.DeleteCellOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCellWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCellWithContext indicates an expected call of DeleteCellWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteCellWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCellWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteCellWithContext), varargs...)
}

// DeleteCrossAccountAuthorization mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteCrossAccountAuthorization(arg0 *route53recoveryreadiness.DeleteCrossAccountAuthorizationInput) (*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrossAccountAuthorization", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCrossAccountAuthorization indicates an expected call of DeleteCrossAccountAuthorization.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteCrossAccountAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrossAccountAuthorization", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteCrossAccountAuthorization), arg0)
}

// DeleteCrossAccountAuthorizationRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteCrossAccountAuthorizationRequest(arg0 *route53recoveryreadiness.DeleteCrossAccountAuthorizationInput) (*request.Request, *route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrossAccountAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput)
	return ret0, ret1
}

// DeleteCrossAccountAuthorizationRequest indicates an expected call of DeleteCrossAccountAuthorizationRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteCrossAccountAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrossAccountAuthorizationRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteCrossAccountAuthorizationRequest), arg0)
}

// DeleteCrossAccountAuthorizationWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteCrossAccountAuthorizationWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.DeleteCrossAccountAuthorizationInput, arg2 ...request.Option) (*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCrossAccountAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCrossAccountAuthorizationWithContext indicates an expected call of DeleteCrossAccountAuthorizationWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteCrossAccountAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrossAccountAuthorizationWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteCrossAccountAuthorizationWithContext), varargs...)
}

// DeleteReadinessCheck mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteReadinessCheck(arg0 *route53recoveryreadiness.DeleteReadinessCheckInput) (*route53recoveryreadiness.DeleteReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReadinessCheck", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReadinessCheck indicates an expected call of DeleteReadinessCheck.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteReadinessCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReadinessCheck", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteReadinessCheck), arg0)
}

// DeleteReadinessCheckRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteReadinessCheckRequest(arg0 *route53recoveryreadiness.DeleteReadinessCheckInput) (*request.Request, *route53recoveryreadiness.DeleteReadinessCheckOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReadinessCheckRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.DeleteReadinessCheckOutput)
	return ret0, ret1
}

// DeleteReadinessCheckRequest indicates an expected call of DeleteReadinessCheckRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteReadinessCheckRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReadinessCheckRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteReadinessCheckRequest), arg0)
}

// DeleteReadinessCheckWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteReadinessCheckWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.DeleteReadinessCheckInput, arg2 ...request.Option) (*route53recoveryreadiness.DeleteReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReadinessCheckWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReadinessCheckWithContext indicates an expected call of DeleteReadinessCheckWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteReadinessCheckWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReadinessCheckWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteReadinessCheckWithContext), varargs...)
}

// DeleteRecoveryGroup mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteRecoveryGroup(arg0 *route53recoveryreadiness.DeleteRecoveryGroupInput) (*route53recoveryreadiness.DeleteRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryGroup", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryGroup indicates an expected call of DeleteRecoveryGroup.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteRecoveryGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryGroup", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteRecoveryGroup), arg0)
}

// DeleteRecoveryGroupRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteRecoveryGroupRequest(arg0 *route53recoveryreadiness.DeleteRecoveryGroupInput) (*request.Request, *route53recoveryreadiness.DeleteRecoveryGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.DeleteRecoveryGroupOutput)
	return ret0, ret1
}

// DeleteRecoveryGroupRequest indicates an expected call of DeleteRecoveryGroupRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteRecoveryGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryGroupRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteRecoveryGroupRequest), arg0)
}

// DeleteRecoveryGroupWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteRecoveryGroupWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.DeleteRecoveryGroupInput, arg2 ...request.Option) (*route53recoveryreadiness.DeleteRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecoveryGroupWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryGroupWithContext indicates an expected call of DeleteRecoveryGroupWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteRecoveryGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryGroupWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteRecoveryGroupWithContext), varargs...)
}

// DeleteResourceSet mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteResourceSet(arg0 *route53recoveryreadiness.DeleteResourceSetInput) (*route53recoveryreadiness.DeleteResourceSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceSet", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceSet indicates an expected call of DeleteResourceSet.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteResourceSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceSet", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteResourceSet), arg0)
}

// DeleteResourceSetRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteResourceSetRequest(arg0 *route53recoveryreadiness.DeleteResourceSetInput) (*request.Request, *route53recoveryreadiness.DeleteResourceSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.DeleteResourceSetOutput)
	return ret0, ret1
}

// DeleteResourceSetRequest indicates an expected call of DeleteResourceSetRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteResourceSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceSetRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteResourceSetRequest), arg0)
}

// DeleteResourceSetWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) DeleteResourceSetWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.DeleteResourceSetInput, arg2 ...request.Option) (*route53recoveryreadiness.DeleteResourceSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourceSetWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.DeleteResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceSetWithContext indicates an expected call of DeleteResourceSetWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) DeleteResourceSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceSetWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).DeleteResourceSetWithContext), varargs...)
}

// GetArchitectureRecommendations mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetArchitectureRecommendations(arg0 *route53recoveryreadiness.GetArchitectureRecommendationsInput) (*route53recoveryreadiness.GetArchitectureRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchitectureRecommendations", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetArchitectureRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchitectureRecommendations indicates an expected call of GetArchitectureRecommendations.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetArchitectureRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchitectureRecommendations", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetArchitectureRecommendations), arg0)
}

// GetArchitectureRecommendationsRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetArchitectureRecommendationsRequest(arg0 *route53recoveryreadiness.GetArchitectureRecommendationsInput) (*request.Request, *route53recoveryreadiness.GetArchitectureRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchitectureRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetArchitectureRecommendationsOutput)
	return ret0, ret1
}

// GetArchitectureRecommendationsRequest indicates an expected call of GetArchitectureRecommendationsRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetArchitectureRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchitectureRecommendationsRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetArchitectureRecommendationsRequest), arg0)
}

// GetArchitectureRecommendationsWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetArchitectureRecommendationsWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetArchitectureRecommendationsInput, arg2 ...request.Option) (*route53recoveryreadiness.GetArchitectureRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchitectureRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetArchitectureRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchitectureRecommendationsWithContext indicates an expected call of GetArchitectureRecommendationsWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetArchitectureRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchitectureRecommendationsWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetArchitectureRecommendationsWithContext), varargs...)
}

// GetCell mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCell(arg0 *route53recoveryreadiness.GetCellInput) (*route53recoveryreadiness.GetCellOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCell", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCell indicates an expected call of GetCell.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCell(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCell", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCell), arg0)
}

// GetCellReadinessSummary mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCellReadinessSummary(arg0 *route53recoveryreadiness.GetCellReadinessSummaryInput) (*route53recoveryreadiness.GetCellReadinessSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellReadinessSummary", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetCellReadinessSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellReadinessSummary indicates an expected call of GetCellReadinessSummary.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCellReadinessSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellReadinessSummary", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCellReadinessSummary), arg0)
}

// GetCellReadinessSummaryPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCellReadinessSummaryPages(arg0 *route53recoveryreadiness.GetCellReadinessSummaryInput, arg1 func(*route53recoveryreadiness.GetCellReadinessSummaryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellReadinessSummaryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCellReadinessSummaryPages indicates an expected call of GetCellReadinessSummaryPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCellReadinessSummaryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellReadinessSummaryPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCellReadinessSummaryPages), arg0, arg1)
}

// GetCellReadinessSummaryPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCellReadinessSummaryPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetCellReadinessSummaryInput, arg2 func(*route53recoveryreadiness.GetCellReadinessSummaryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCellReadinessSummaryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCellReadinessSummaryPagesWithContext indicates an expected call of GetCellReadinessSummaryPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCellReadinessSummaryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellReadinessSummaryPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCellReadinessSummaryPagesWithContext), varargs...)
}

// GetCellReadinessSummaryRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCellReadinessSummaryRequest(arg0 *route53recoveryreadiness.GetCellReadinessSummaryInput) (*request.Request, *route53recoveryreadiness.GetCellReadinessSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellReadinessSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetCellReadinessSummaryOutput)
	return ret0, ret1
}

// GetCellReadinessSummaryRequest indicates an expected call of GetCellReadinessSummaryRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCellReadinessSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellReadinessSummaryRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCellReadinessSummaryRequest), arg0)
}

// GetCellReadinessSummaryWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCellReadinessSummaryWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetCellReadinessSummaryInput, arg2 ...request.Option) (*route53recoveryreadiness.GetCellReadinessSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCellReadinessSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetCellReadinessSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellReadinessSummaryWithContext indicates an expected call of GetCellReadinessSummaryWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCellReadinessSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellReadinessSummaryWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCellReadinessSummaryWithContext), varargs...)
}

// GetCellRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCellRequest(arg0 *route53recoveryreadiness.GetCellInput) (*request.Request, *route53recoveryreadiness.GetCellOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetCellOutput)
	return ret0, ret1
}

// GetCellRequest indicates an expected call of GetCellRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCellRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCellRequest), arg0)
}

// GetCellWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetCellWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetCellInput, arg2 ...request.Option) (*route53recoveryreadiness.GetCellOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCellWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCellWithContext indicates an expected call of GetCellWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetCellWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetCellWithContext), varargs...)
}

// GetReadinessCheck mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheck(arg0 *route53recoveryreadiness.GetReadinessCheckInput) (*route53recoveryreadiness.GetReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheck", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheck indicates an expected call of GetReadinessCheck.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheck", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheck), arg0)
}

// GetReadinessCheckRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckRequest(arg0 *route53recoveryreadiness.GetReadinessCheckInput) (*request.Request, *route53recoveryreadiness.GetReadinessCheckOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheckRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetReadinessCheckOutput)
	return ret0, ret1
}

// GetReadinessCheckRequest indicates an expected call of GetReadinessCheckRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckRequest), arg0)
}

// GetReadinessCheckResourceStatus mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckResourceStatus(arg0 *route53recoveryreadiness.GetReadinessCheckResourceStatusInput) (*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheckResourceStatus", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheckResourceStatus indicates an expected call of GetReadinessCheckResourceStatus.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckResourceStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckResourceStatus", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckResourceStatus), arg0)
}

// GetReadinessCheckResourceStatusPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckResourceStatusPages(arg0 *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, arg1 func(*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheckResourceStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReadinessCheckResourceStatusPages indicates an expected call of GetReadinessCheckResourceStatusPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckResourceStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckResourceStatusPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckResourceStatusPages), arg0, arg1)
}

// GetReadinessCheckResourceStatusPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckResourceStatusPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, arg2 func(*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheckResourceStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReadinessCheckResourceStatusPagesWithContext indicates an expected call of GetReadinessCheckResourceStatusPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckResourceStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckResourceStatusPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckResourceStatusPagesWithContext), varargs...)
}

// GetReadinessCheckResourceStatusRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckResourceStatusRequest(arg0 *route53recoveryreadiness.GetReadinessCheckResourceStatusInput) (*request.Request, *route53recoveryreadiness.GetReadinessCheckResourceStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheckResourceStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput)
	return ret0, ret1
}

// GetReadinessCheckResourceStatusRequest indicates an expected call of GetReadinessCheckResourceStatusRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckResourceStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckResourceStatusRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckResourceStatusRequest), arg0)
}

// GetReadinessCheckResourceStatusWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckResourceStatusWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, arg2 ...request.Option) (*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheckResourceStatusWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheckResourceStatusWithContext indicates an expected call of GetReadinessCheckResourceStatusWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckResourceStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckResourceStatusWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckResourceStatusWithContext), varargs...)
}

// GetReadinessCheckStatus mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckStatus(arg0 *route53recoveryreadiness.GetReadinessCheckStatusInput) (*route53recoveryreadiness.GetReadinessCheckStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheckStatus", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheckStatus indicates an expected call of GetReadinessCheckStatus.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckStatus", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckStatus), arg0)
}

// GetReadinessCheckStatusPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckStatusPages(arg0 *route53recoveryreadiness.GetReadinessCheckStatusInput, arg1 func(*route53recoveryreadiness.GetReadinessCheckStatusOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheckStatusPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReadinessCheckStatusPages indicates an expected call of GetReadinessCheckStatusPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckStatusPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckStatusPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckStatusPages), arg0, arg1)
}

// GetReadinessCheckStatusPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckStatusPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckStatusInput, arg2 func(*route53recoveryreadiness.GetReadinessCheckStatusOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheckStatusPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReadinessCheckStatusPagesWithContext indicates an expected call of GetReadinessCheckStatusPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckStatusPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckStatusPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckStatusPagesWithContext), varargs...)
}

// GetReadinessCheckStatusRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckStatusRequest(arg0 *route53recoveryreadiness.GetReadinessCheckStatusInput) (*request.Request, *route53recoveryreadiness.GetReadinessCheckStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadinessCheckStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetReadinessCheckStatusOutput)
	return ret0, ret1
}

// GetReadinessCheckStatusRequest indicates an expected call of GetReadinessCheckStatusRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckStatusRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckStatusRequest), arg0)
}

// GetReadinessCheckStatusWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckStatusWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckStatusInput, arg2 ...request.Option) (*route53recoveryreadiness.GetReadinessCheckStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheckStatusWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheckStatusWithContext indicates an expected call of GetReadinessCheckStatusWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckStatusWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckStatusWithContext), varargs...)
}

// GetReadinessCheckWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetReadinessCheckWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetReadinessCheckInput, arg2 ...request.Option) (*route53recoveryreadiness.GetReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReadinessCheckWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadinessCheckWithContext indicates an expected call of GetReadinessCheckWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetReadinessCheckWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadinessCheckWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetReadinessCheckWithContext), varargs...)
}

// GetRecoveryGroup mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroup(arg0 *route53recoveryreadiness.GetRecoveryGroupInput) (*route53recoveryreadiness.GetRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryGroup", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryGroup indicates an expected call of GetRecoveryGroup.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroup", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroup), arg0)
}

// GetRecoveryGroupReadinessSummary mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroupReadinessSummary(arg0 *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput) (*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryGroupReadinessSummary", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryGroupReadinessSummary indicates an expected call of GetRecoveryGroupReadinessSummary.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroupReadinessSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupReadinessSummary", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroupReadinessSummary), arg0)
}

// GetRecoveryGroupReadinessSummaryPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroupReadinessSummaryPages(arg0 *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, arg1 func(*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryGroupReadinessSummaryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecoveryGroupReadinessSummaryPages indicates an expected call of GetRecoveryGroupReadinessSummaryPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroupReadinessSummaryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupReadinessSummaryPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroupReadinessSummaryPages), arg0, arg1)
}

// GetRecoveryGroupReadinessSummaryPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroupReadinessSummaryPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, arg2 func(*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecoveryGroupReadinessSummaryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecoveryGroupReadinessSummaryPagesWithContext indicates an expected call of GetRecoveryGroupReadinessSummaryPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroupReadinessSummaryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupReadinessSummaryPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroupReadinessSummaryPagesWithContext), varargs...)
}

// GetRecoveryGroupReadinessSummaryRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroupReadinessSummaryRequest(arg0 *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput) (*request.Request, *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryGroupReadinessSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput)
	return ret0, ret1
}

// GetRecoveryGroupReadinessSummaryRequest indicates an expected call of GetRecoveryGroupReadinessSummaryRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroupReadinessSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupReadinessSummaryRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroupReadinessSummaryRequest), arg0)
}

// GetRecoveryGroupReadinessSummaryWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroupReadinessSummaryWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, arg2 ...request.Option) (*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecoveryGroupReadinessSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryGroupReadinessSummaryWithContext indicates an expected call of GetRecoveryGroupReadinessSummaryWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroupReadinessSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupReadinessSummaryWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroupReadinessSummaryWithContext), varargs...)
}

// GetRecoveryGroupRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroupRequest(arg0 *route53recoveryreadiness.GetRecoveryGroupInput) (*request.Request, *route53recoveryreadiness.GetRecoveryGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecoveryGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetRecoveryGroupOutput)
	return ret0, ret1
}

// GetRecoveryGroupRequest indicates an expected call of GetRecoveryGroupRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroupRequest), arg0)
}

// GetRecoveryGroupWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetRecoveryGroupWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetRecoveryGroupInput, arg2 ...request.Option) (*route53recoveryreadiness.GetRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecoveryGroupWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecoveryGroupWithContext indicates an expected call of GetRecoveryGroupWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetRecoveryGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecoveryGroupWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetRecoveryGroupWithContext), varargs...)
}

// GetResourceSet mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetResourceSet(arg0 *route53recoveryreadiness.GetResourceSetInput) (*route53recoveryreadiness.GetResourceSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSet", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSet indicates an expected call of GetResourceSet.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetResourceSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSet", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetResourceSet), arg0)
}

// GetResourceSetRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetResourceSetRequest(arg0 *route53recoveryreadiness.GetResourceSetInput) (*request.Request, *route53recoveryreadiness.GetResourceSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.GetResourceSetOutput)
	return ret0, ret1
}

// GetResourceSetRequest indicates an expected call of GetResourceSetRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetResourceSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSetRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetResourceSetRequest), arg0)
}

// GetResourceSetWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) GetResourceSetWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.GetResourceSetInput, arg2 ...request.Option) (*route53recoveryreadiness.GetResourceSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceSetWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.GetResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceSetWithContext indicates an expected call of GetResourceSetWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) GetResourceSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSetWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).GetResourceSetWithContext), varargs...)
}

// ListCells mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCells(arg0 *route53recoveryreadiness.ListCellsInput) (*route53recoveryreadiness.ListCellsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCells", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListCellsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCells indicates an expected call of ListCells.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCells(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCells", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCells), arg0)
}

// ListCellsPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCellsPages(arg0 *route53recoveryreadiness.ListCellsInput, arg1 func(*route53recoveryreadiness.ListCellsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCellsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCellsPages indicates an expected call of ListCellsPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCellsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCellsPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCellsPages), arg0, arg1)
}

// ListCellsPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCellsPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListCellsInput, arg2 func(*route53recoveryreadiness.ListCellsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCellsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCellsPagesWithContext indicates an expected call of ListCellsPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCellsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCellsPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCellsPagesWithContext), varargs...)
}

// ListCellsRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCellsRequest(arg0 *route53recoveryreadiness.ListCellsInput) (*request.Request, *route53recoveryreadiness.ListCellsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCellsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.ListCellsOutput)
	return ret0, ret1
}

// ListCellsRequest indicates an expected call of ListCellsRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCellsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCellsRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCellsRequest), arg0)
}

// ListCellsWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCellsWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListCellsInput, arg2 ...request.Option) (*route53recoveryreadiness.ListCellsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCellsWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListCellsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCellsWithContext indicates an expected call of ListCellsWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCellsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCellsWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCellsWithContext), varargs...)
}

// ListCrossAccountAuthorizations mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCrossAccountAuthorizations(arg0 *route53recoveryreadiness.ListCrossAccountAuthorizationsInput) (*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrossAccountAuthorizations", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrossAccountAuthorizations indicates an expected call of ListCrossAccountAuthorizations.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCrossAccountAuthorizations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrossAccountAuthorizations", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCrossAccountAuthorizations), arg0)
}

// ListCrossAccountAuthorizationsPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCrossAccountAuthorizationsPages(arg0 *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, arg1 func(*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrossAccountAuthorizationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCrossAccountAuthorizationsPages indicates an expected call of ListCrossAccountAuthorizationsPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCrossAccountAuthorizationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrossAccountAuthorizationsPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCrossAccountAuthorizationsPages), arg0, arg1)
}

// ListCrossAccountAuthorizationsPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCrossAccountAuthorizationsPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, arg2 func(*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrossAccountAuthorizationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCrossAccountAuthorizationsPagesWithContext indicates an expected call of ListCrossAccountAuthorizationsPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCrossAccountAuthorizationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrossAccountAuthorizationsPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCrossAccountAuthorizationsPagesWithContext), varargs...)
}

// ListCrossAccountAuthorizationsRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCrossAccountAuthorizationsRequest(arg0 *route53recoveryreadiness.ListCrossAccountAuthorizationsInput) (*request.Request, *route53recoveryreadiness.ListCrossAccountAuthorizationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrossAccountAuthorizationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput)
	return ret0, ret1
}

// ListCrossAccountAuthorizationsRequest indicates an expected call of ListCrossAccountAuthorizationsRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCrossAccountAuthorizationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrossAccountAuthorizationsRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCrossAccountAuthorizationsRequest), arg0)
}

// ListCrossAccountAuthorizationsWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListCrossAccountAuthorizationsWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, arg2 ...request.Option) (*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrossAccountAuthorizationsWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrossAccountAuthorizationsWithContext indicates an expected call of ListCrossAccountAuthorizationsWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListCrossAccountAuthorizationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrossAccountAuthorizationsWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListCrossAccountAuthorizationsWithContext), varargs...)
}

// ListReadinessChecks mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListReadinessChecks(arg0 *route53recoveryreadiness.ListReadinessChecksInput) (*route53recoveryreadiness.ListReadinessChecksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadinessChecks", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListReadinessChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadinessChecks indicates an expected call of ListReadinessChecks.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListReadinessChecks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadinessChecks", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListReadinessChecks), arg0)
}

// ListReadinessChecksPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListReadinessChecksPages(arg0 *route53recoveryreadiness.ListReadinessChecksInput, arg1 func(*route53recoveryreadiness.ListReadinessChecksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadinessChecksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadinessChecksPages indicates an expected call of ListReadinessChecksPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListReadinessChecksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadinessChecksPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListReadinessChecksPages), arg0, arg1)
}

// ListReadinessChecksPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListReadinessChecksPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListReadinessChecksInput, arg2 func(*route53recoveryreadiness.ListReadinessChecksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadinessChecksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReadinessChecksPagesWithContext indicates an expected call of ListReadinessChecksPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListReadinessChecksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadinessChecksPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListReadinessChecksPagesWithContext), varargs...)
}

// ListReadinessChecksRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListReadinessChecksRequest(arg0 *route53recoveryreadiness.ListReadinessChecksInput) (*request.Request, *route53recoveryreadiness.ListReadinessChecksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadinessChecksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.ListReadinessChecksOutput)
	return ret0, ret1
}

// ListReadinessChecksRequest indicates an expected call of ListReadinessChecksRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListReadinessChecksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadinessChecksRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListReadinessChecksRequest), arg0)
}

// ListReadinessChecksWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListReadinessChecksWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListReadinessChecksInput, arg2 ...request.Option) (*route53recoveryreadiness.ListReadinessChecksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReadinessChecksWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListReadinessChecksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadinessChecksWithContext indicates an expected call of ListReadinessChecksWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListReadinessChecksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadinessChecksWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListReadinessChecksWithContext), varargs...)
}

// ListRecoveryGroups mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRecoveryGroups(arg0 *route53recoveryreadiness.ListRecoveryGroupsInput) (*route53recoveryreadiness.ListRecoveryGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryGroups", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListRecoveryGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryGroups indicates an expected call of ListRecoveryGroups.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRecoveryGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryGroups", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRecoveryGroups), arg0)
}

// ListRecoveryGroupsPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRecoveryGroupsPages(arg0 *route53recoveryreadiness.ListRecoveryGroupsInput, arg1 func(*route53recoveryreadiness.ListRecoveryGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryGroupsPages indicates an expected call of ListRecoveryGroupsPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRecoveryGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryGroupsPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRecoveryGroupsPages), arg0, arg1)
}

// ListRecoveryGroupsPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRecoveryGroupsPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListRecoveryGroupsInput, arg2 func(*route53recoveryreadiness.ListRecoveryGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecoveryGroupsPagesWithContext indicates an expected call of ListRecoveryGroupsPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRecoveryGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryGroupsPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRecoveryGroupsPagesWithContext), varargs...)
}

// ListRecoveryGroupsRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRecoveryGroupsRequest(arg0 *route53recoveryreadiness.ListRecoveryGroupsInput) (*request.Request, *route53recoveryreadiness.ListRecoveryGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecoveryGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.ListRecoveryGroupsOutput)
	return ret0, ret1
}

// ListRecoveryGroupsRequest indicates an expected call of ListRecoveryGroupsRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRecoveryGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryGroupsRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRecoveryGroupsRequest), arg0)
}

// ListRecoveryGroupsWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRecoveryGroupsWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListRecoveryGroupsInput, arg2 ...request.Option) (*route53recoveryreadiness.ListRecoveryGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecoveryGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListRecoveryGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecoveryGroupsWithContext indicates an expected call of ListRecoveryGroupsWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRecoveryGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecoveryGroupsWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRecoveryGroupsWithContext), varargs...)
}

// ListResourceSets mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListResourceSets(arg0 *route53recoveryreadiness.ListResourceSetsInput) (*route53recoveryreadiness.ListResourceSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceSets", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListResourceSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceSets indicates an expected call of ListResourceSets.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListResourceSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceSets", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListResourceSets), arg0)
}

// ListResourceSetsPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListResourceSetsPages(arg0 *route53recoveryreadiness.ListResourceSetsInput, arg1 func(*route53recoveryreadiness.ListResourceSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourceSetsPages indicates an expected call of ListResourceSetsPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListResourceSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceSetsPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListResourceSetsPages), arg0, arg1)
}

// ListResourceSetsPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListResourceSetsPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListResourceSetsInput, arg2 func(*route53recoveryreadiness.ListResourceSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourceSetsPagesWithContext indicates an expected call of ListResourceSetsPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListResourceSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceSetsPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListResourceSetsPagesWithContext), varargs...)
}

// ListResourceSetsRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListResourceSetsRequest(arg0 *route53recoveryreadiness.ListResourceSetsInput) (*request.Request, *route53recoveryreadiness.ListResourceSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.ListResourceSetsOutput)
	return ret0, ret1
}

// ListResourceSetsRequest indicates an expected call of ListResourceSetsRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListResourceSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceSetsRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListResourceSetsRequest), arg0)
}

// ListResourceSetsWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListResourceSetsWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListResourceSetsInput, arg2 ...request.Option) (*route53recoveryreadiness.ListResourceSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceSetsWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListResourceSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceSetsWithContext indicates an expected call of ListResourceSetsWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListResourceSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceSetsWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListResourceSetsWithContext), varargs...)
}

// ListRules mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRules(arg0 *route53recoveryreadiness.ListRulesInput) (*route53recoveryreadiness.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRules), arg0)
}

// ListRulesPages mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRulesPages(arg0 *route53recoveryreadiness.ListRulesInput, arg1 func(*route53recoveryreadiness.ListRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPages indicates an expected call of ListRulesPages.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPages", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRulesPages), arg0, arg1)
}

// ListRulesPagesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRulesPagesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListRulesInput, arg2 func(*route53recoveryreadiness.ListRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPagesWithContext indicates an expected call of ListRulesPagesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPagesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRulesPagesWithContext), varargs...)
}

// ListRulesRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRulesRequest(arg0 *route53recoveryreadiness.ListRulesInput) (*request.Request, *route53recoveryreadiness.ListRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.ListRulesOutput)
	return ret0, ret1
}

// ListRulesRequest indicates an expected call of ListRulesRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRulesRequest), arg0)
}

// ListRulesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListRulesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListRulesInput, arg2 ...request.Option) (*route53recoveryreadiness.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesWithContext indicates an expected call of ListRulesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListRulesWithContext), varargs...)
}

// ListTagsForResources mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListTagsForResources(arg0 *route53recoveryreadiness.ListTagsForResourcesInput) (*route53recoveryreadiness.ListTagsForResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResources", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListTagsForResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResources indicates an expected call of ListTagsForResources.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListTagsForResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResources", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListTagsForResources), arg0)
}

// ListTagsForResourcesRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListTagsForResourcesRequest(arg0 *route53recoveryreadiness.ListTagsForResourcesInput) (*request.Request, *route53recoveryreadiness.ListTagsForResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.ListTagsForResourcesOutput)
	return ret0, ret1
}

// ListTagsForResourcesRequest indicates an expected call of ListTagsForResourcesRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListTagsForResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcesRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListTagsForResourcesRequest), arg0)
}

// ListTagsForResourcesWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) ListTagsForResourcesWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.ListTagsForResourcesInput, arg2 ...request.Option) (*route53recoveryreadiness.ListTagsForResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.ListTagsForResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourcesWithContext indicates an expected call of ListTagsForResourcesWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) ListTagsForResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcesWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).ListTagsForResourcesWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) TagResource(arg0 *route53recoveryreadiness.TagResourceInput) (*route53recoveryreadiness.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) TagResourceRequest(arg0 *route53recoveryreadiness.TagResourceInput) (*request.Request, *route53recoveryreadiness.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) TagResourceWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.TagResourceInput, arg2 ...request.Option) (*route53recoveryreadiness.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UntagResource(arg0 *route53recoveryreadiness.UntagResourceInput) (*route53recoveryreadiness.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UntagResourceRequest(arg0 *route53recoveryreadiness.UntagResourceInput) (*request.Request, *route53recoveryreadiness.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UntagResourceWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.UntagResourceInput, arg2 ...request.Option) (*route53recoveryreadiness.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCell mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateCell(arg0 *route53recoveryreadiness.UpdateCellInput) (*route53recoveryreadiness.UpdateCellOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCell", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCell indicates an expected call of UpdateCell.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateCell(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCell", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateCell), arg0)
}

// UpdateCellRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateCellRequest(arg0 *route53recoveryreadiness.UpdateCellInput) (*request.Request, *route53recoveryreadiness.UpdateCellOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCellRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.UpdateCellOutput)
	return ret0, ret1
}

// UpdateCellRequest indicates an expected call of UpdateCellRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateCellRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCellRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateCellRequest), arg0)
}

// UpdateCellWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateCellWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.UpdateCellInput, arg2 ...request.Option) (*route53recoveryreadiness.UpdateCellOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCellWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateCellOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCellWithContext indicates an expected call of UpdateCellWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateCellWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCellWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateCellWithContext), varargs...)
}

// UpdateReadinessCheck mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateReadinessCheck(arg0 *route53recoveryreadiness.UpdateReadinessCheckInput) (*route53recoveryreadiness.UpdateReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadinessCheck", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReadinessCheck indicates an expected call of UpdateReadinessCheck.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateReadinessCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadinessCheck", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateReadinessCheck), arg0)
}

// UpdateReadinessCheckRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateReadinessCheckRequest(arg0 *route53recoveryreadiness.UpdateReadinessCheckInput) (*request.Request, *route53recoveryreadiness.UpdateReadinessCheckOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadinessCheckRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.UpdateReadinessCheckOutput)
	return ret0, ret1
}

// UpdateReadinessCheckRequest indicates an expected call of UpdateReadinessCheckRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateReadinessCheckRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadinessCheckRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateReadinessCheckRequest), arg0)
}

// UpdateReadinessCheckWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateReadinessCheckWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.UpdateReadinessCheckInput, arg2 ...request.Option) (*route53recoveryreadiness.UpdateReadinessCheckOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReadinessCheckWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateReadinessCheckOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReadinessCheckWithContext indicates an expected call of UpdateReadinessCheckWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateReadinessCheckWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadinessCheckWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateReadinessCheckWithContext), varargs...)
}

// UpdateRecoveryGroup mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateRecoveryGroup(arg0 *route53recoveryreadiness.UpdateRecoveryGroupInput) (*route53recoveryreadiness.UpdateRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecoveryGroup", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecoveryGroup indicates an expected call of UpdateRecoveryGroup.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateRecoveryGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoveryGroup", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateRecoveryGroup), arg0)
}

// UpdateRecoveryGroupRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateRecoveryGroupRequest(arg0 *route53recoveryreadiness.UpdateRecoveryGroupInput) (*request.Request, *route53recoveryreadiness.UpdateRecoveryGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecoveryGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.UpdateRecoveryGroupOutput)
	return ret0, ret1
}

// UpdateRecoveryGroupRequest indicates an expected call of UpdateRecoveryGroupRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateRecoveryGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoveryGroupRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateRecoveryGroupRequest), arg0)
}

// UpdateRecoveryGroupWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateRecoveryGroupWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.UpdateRecoveryGroupInput, arg2 ...request.Option) (*route53recoveryreadiness.UpdateRecoveryGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecoveryGroupWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateRecoveryGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecoveryGroupWithContext indicates an expected call of UpdateRecoveryGroupWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateRecoveryGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecoveryGroupWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateRecoveryGroupWithContext), varargs...)
}

// UpdateResourceSet mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateResourceSet(arg0 *route53recoveryreadiness.UpdateResourceSetInput) (*route53recoveryreadiness.UpdateResourceSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceSet", arg0)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceSet indicates an expected call of UpdateResourceSet.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateResourceSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSet", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateResourceSet), arg0)
}

// UpdateResourceSetRequest mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateResourceSetRequest(arg0 *route53recoveryreadiness.UpdateResourceSetInput) (*request.Request, *route53recoveryreadiness.UpdateResourceSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*route53recoveryreadiness.UpdateResourceSetOutput)
	return ret0, ret1
}

// UpdateResourceSetRequest indicates an expected call of UpdateResourceSetRequest.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateResourceSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSetRequest", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateResourceSetRequest), arg0)
}

// UpdateResourceSetWithContext mocks base method.
func (m *MockRoute53RecoveryReadinessAPI) UpdateResourceSetWithContext(arg0 context.Context, arg1 *route53recoveryreadiness.UpdateResourceSetInput, arg2 ...request.Option) (*route53recoveryreadiness.UpdateResourceSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceSetWithContext", varargs...)
	ret0, _ := ret[0].(*route53recoveryreadiness.UpdateResourceSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceSetWithContext indicates an expected call of UpdateResourceSetWithContext.
func (mr *MockRoute53RecoveryReadinessAPIMockRecorder) UpdateResourceSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSetWithContext", reflect.TypeOf((*MockRoute53RecoveryReadinessAPI)(nil).UpdateResourceSetWithContext), varargs...)
}

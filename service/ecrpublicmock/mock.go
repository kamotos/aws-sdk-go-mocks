// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ecrpublic/ecrpubliciface (interfaces: ECRPublicAPI)

// Package ecrpublicmock is a generated GoMock package.
package ecrpublicmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	ecrpublic "github.com/aws/aws-sdk-go/service/ecrpublic"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockECRPublicAPI is a mock of ECRPublicAPI interface
type MockECRPublicAPI struct {
	ctrl     *gomock.Controller
	recorder *MockECRPublicAPIMockRecorder
}

// MockECRPublicAPIMockRecorder is the mock recorder for MockECRPublicAPI
type MockECRPublicAPIMockRecorder struct {
	mock *MockECRPublicAPI
}

// NewMockECRPublicAPI creates a new mock instance
func NewMockECRPublicAPI(ctrl *gomock.Controller) *MockECRPublicAPI {
	mock := &MockECRPublicAPI{ctrl: ctrl}
	mock.recorder = &MockECRPublicAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockECRPublicAPI) EXPECT() *MockECRPublicAPIMockRecorder {
	return m.recorder
}

// BatchCheckLayerAvailability mocks base method
func (m *MockECRPublicAPI) BatchCheckLayerAvailability(arg0 *ecrpublic.BatchCheckLayerAvailabilityInput) (*ecrpublic.BatchCheckLayerAvailabilityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCheckLayerAvailability", arg0)
	ret0, _ := ret[0].(*ecrpublic.BatchCheckLayerAvailabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCheckLayerAvailability indicates an expected call of BatchCheckLayerAvailability
func (mr *MockECRPublicAPIMockRecorder) BatchCheckLayerAvailability(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheckLayerAvailability", reflect.TypeOf((*MockECRPublicAPI)(nil).BatchCheckLayerAvailability), arg0)
}

// BatchCheckLayerAvailabilityRequest mocks base method
func (m *MockECRPublicAPI) BatchCheckLayerAvailabilityRequest(arg0 *ecrpublic.BatchCheckLayerAvailabilityInput) (*request.Request, *ecrpublic.BatchCheckLayerAvailabilityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCheckLayerAvailabilityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.BatchCheckLayerAvailabilityOutput)
	return ret0, ret1
}

// BatchCheckLayerAvailabilityRequest indicates an expected call of BatchCheckLayerAvailabilityRequest
func (mr *MockECRPublicAPIMockRecorder) BatchCheckLayerAvailabilityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheckLayerAvailabilityRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).BatchCheckLayerAvailabilityRequest), arg0)
}

// BatchCheckLayerAvailabilityWithContext mocks base method
func (m *MockECRPublicAPI) BatchCheckLayerAvailabilityWithContext(arg0 context.Context, arg1 *ecrpublic.BatchCheckLayerAvailabilityInput, arg2 ...request.Option) (*ecrpublic.BatchCheckLayerAvailabilityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCheckLayerAvailabilityWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.BatchCheckLayerAvailabilityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCheckLayerAvailabilityWithContext indicates an expected call of BatchCheckLayerAvailabilityWithContext
func (mr *MockECRPublicAPIMockRecorder) BatchCheckLayerAvailabilityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheckLayerAvailabilityWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).BatchCheckLayerAvailabilityWithContext), varargs...)
}

// BatchDeleteImage mocks base method
func (m *MockECRPublicAPI) BatchDeleteImage(arg0 *ecrpublic.BatchDeleteImageInput) (*ecrpublic.BatchDeleteImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteImage", arg0)
	ret0, _ := ret[0].(*ecrpublic.BatchDeleteImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteImage indicates an expected call of BatchDeleteImage
func (mr *MockECRPublicAPIMockRecorder) BatchDeleteImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteImage", reflect.TypeOf((*MockECRPublicAPI)(nil).BatchDeleteImage), arg0)
}

// BatchDeleteImageRequest mocks base method
func (m *MockECRPublicAPI) BatchDeleteImageRequest(arg0 *ecrpublic.BatchDeleteImageInput) (*request.Request, *ecrpublic.BatchDeleteImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.BatchDeleteImageOutput)
	return ret0, ret1
}

// BatchDeleteImageRequest indicates an expected call of BatchDeleteImageRequest
func (mr *MockECRPublicAPIMockRecorder) BatchDeleteImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteImageRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).BatchDeleteImageRequest), arg0)
}

// BatchDeleteImageWithContext mocks base method
func (m *MockECRPublicAPI) BatchDeleteImageWithContext(arg0 context.Context, arg1 *ecrpublic.BatchDeleteImageInput, arg2 ...request.Option) (*ecrpublic.BatchDeleteImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteImageWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.BatchDeleteImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteImageWithContext indicates an expected call of BatchDeleteImageWithContext
func (mr *MockECRPublicAPIMockRecorder) BatchDeleteImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteImageWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).BatchDeleteImageWithContext), varargs...)
}

// CompleteLayerUpload mocks base method
func (m *MockECRPublicAPI) CompleteLayerUpload(arg0 *ecrpublic.CompleteLayerUploadInput) (*ecrpublic.CompleteLayerUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteLayerUpload", arg0)
	ret0, _ := ret[0].(*ecrpublic.CompleteLayerUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteLayerUpload indicates an expected call of CompleteLayerUpload
func (mr *MockECRPublicAPIMockRecorder) CompleteLayerUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteLayerUpload", reflect.TypeOf((*MockECRPublicAPI)(nil).CompleteLayerUpload), arg0)
}

// CompleteLayerUploadRequest mocks base method
func (m *MockECRPublicAPI) CompleteLayerUploadRequest(arg0 *ecrpublic.CompleteLayerUploadInput) (*request.Request, *ecrpublic.CompleteLayerUploadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteLayerUploadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.CompleteLayerUploadOutput)
	return ret0, ret1
}

// CompleteLayerUploadRequest indicates an expected call of CompleteLayerUploadRequest
func (mr *MockECRPublicAPIMockRecorder) CompleteLayerUploadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteLayerUploadRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).CompleteLayerUploadRequest), arg0)
}

// CompleteLayerUploadWithContext mocks base method
func (m *MockECRPublicAPI) CompleteLayerUploadWithContext(arg0 context.Context, arg1 *ecrpublic.CompleteLayerUploadInput, arg2 ...request.Option) (*ecrpublic.CompleteLayerUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteLayerUploadWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.CompleteLayerUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteLayerUploadWithContext indicates an expected call of CompleteLayerUploadWithContext
func (mr *MockECRPublicAPIMockRecorder) CompleteLayerUploadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteLayerUploadWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).CompleteLayerUploadWithContext), varargs...)
}

// CreateRepository mocks base method
func (m *MockECRPublicAPI) CreateRepository(arg0 *ecrpublic.CreateRepositoryInput) (*ecrpublic.CreateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", arg0)
	ret0, _ := ret[0].(*ecrpublic.CreateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockECRPublicAPIMockRecorder) CreateRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockECRPublicAPI)(nil).CreateRepository), arg0)
}

// CreateRepositoryRequest mocks base method
func (m *MockECRPublicAPI) CreateRepositoryRequest(arg0 *ecrpublic.CreateRepositoryInput) (*request.Request, *ecrpublic.CreateRepositoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepositoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.CreateRepositoryOutput)
	return ret0, ret1
}

// CreateRepositoryRequest indicates an expected call of CreateRepositoryRequest
func (mr *MockECRPublicAPIMockRecorder) CreateRepositoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).CreateRepositoryRequest), arg0)
}

// CreateRepositoryWithContext mocks base method
func (m *MockECRPublicAPI) CreateRepositoryWithContext(arg0 context.Context, arg1 *ecrpublic.CreateRepositoryInput, arg2 ...request.Option) (*ecrpublic.CreateRepositoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRepositoryWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.CreateRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepositoryWithContext indicates an expected call of CreateRepositoryWithContext
func (mr *MockECRPublicAPIMockRecorder) CreateRepositoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepositoryWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).CreateRepositoryWithContext), varargs...)
}

// DeleteRepository mocks base method
func (m *MockECRPublicAPI) DeleteRepository(arg0 *ecrpublic.DeleteRepositoryInput) (*ecrpublic.DeleteRepositoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0)
	ret0, _ := ret[0].(*ecrpublic.DeleteRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepository indicates an expected call of DeleteRepository
func (mr *MockECRPublicAPIMockRecorder) DeleteRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockECRPublicAPI)(nil).DeleteRepository), arg0)
}

// DeleteRepositoryPolicy mocks base method
func (m *MockECRPublicAPI) DeleteRepositoryPolicy(arg0 *ecrpublic.DeleteRepositoryPolicyInput) (*ecrpublic.DeleteRepositoryPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryPolicy", arg0)
	ret0, _ := ret[0].(*ecrpublic.DeleteRepositoryPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryPolicy indicates an expected call of DeleteRepositoryPolicy
func (mr *MockECRPublicAPIMockRecorder) DeleteRepositoryPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryPolicy", reflect.TypeOf((*MockECRPublicAPI)(nil).DeleteRepositoryPolicy), arg0)
}

// DeleteRepositoryPolicyRequest mocks base method
func (m *MockECRPublicAPI) DeleteRepositoryPolicyRequest(arg0 *ecrpublic.DeleteRepositoryPolicyInput) (*request.Request, *ecrpublic.DeleteRepositoryPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.DeleteRepositoryPolicyOutput)
	return ret0, ret1
}

// DeleteRepositoryPolicyRequest indicates an expected call of DeleteRepositoryPolicyRequest
func (mr *MockECRPublicAPIMockRecorder) DeleteRepositoryPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryPolicyRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).DeleteRepositoryPolicyRequest), arg0)
}

// DeleteRepositoryPolicyWithContext mocks base method
func (m *MockECRPublicAPI) DeleteRepositoryPolicyWithContext(arg0 context.Context, arg1 *ecrpublic.DeleteRepositoryPolicyInput, arg2 ...request.Option) (*ecrpublic.DeleteRepositoryPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepositoryPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.DeleteRepositoryPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryPolicyWithContext indicates an expected call of DeleteRepositoryPolicyWithContext
func (mr *MockECRPublicAPIMockRecorder) DeleteRepositoryPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryPolicyWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DeleteRepositoryPolicyWithContext), varargs...)
}

// DeleteRepositoryRequest mocks base method
func (m *MockECRPublicAPI) DeleteRepositoryRequest(arg0 *ecrpublic.DeleteRepositoryInput) (*request.Request, *ecrpublic.DeleteRepositoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.DeleteRepositoryOutput)
	return ret0, ret1
}

// DeleteRepositoryRequest indicates an expected call of DeleteRepositoryRequest
func (mr *MockECRPublicAPIMockRecorder) DeleteRepositoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).DeleteRepositoryRequest), arg0)
}

// DeleteRepositoryWithContext mocks base method
func (m *MockECRPublicAPI) DeleteRepositoryWithContext(arg0 context.Context, arg1 *ecrpublic.DeleteRepositoryInput, arg2 ...request.Option) (*ecrpublic.DeleteRepositoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepositoryWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.DeleteRepositoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepositoryWithContext indicates an expected call of DeleteRepositoryWithContext
func (mr *MockECRPublicAPIMockRecorder) DeleteRepositoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DeleteRepositoryWithContext), varargs...)
}

// DescribeImageTags mocks base method
func (m *MockECRPublicAPI) DescribeImageTags(arg0 *ecrpublic.DescribeImageTagsInput) (*ecrpublic.DescribeImageTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImageTags", arg0)
	ret0, _ := ret[0].(*ecrpublic.DescribeImageTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImageTags indicates an expected call of DescribeImageTags
func (mr *MockECRPublicAPIMockRecorder) DescribeImageTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageTags", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImageTags), arg0)
}

// DescribeImageTagsPages mocks base method
func (m *MockECRPublicAPI) DescribeImageTagsPages(arg0 *ecrpublic.DescribeImageTagsInput, arg1 func(*ecrpublic.DescribeImageTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImageTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImageTagsPages indicates an expected call of DescribeImageTagsPages
func (mr *MockECRPublicAPIMockRecorder) DescribeImageTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageTagsPages", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImageTagsPages), arg0, arg1)
}

// DescribeImageTagsPagesWithContext mocks base method
func (m *MockECRPublicAPI) DescribeImageTagsPagesWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeImageTagsInput, arg2 func(*ecrpublic.DescribeImageTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImageTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImageTagsPagesWithContext indicates an expected call of DescribeImageTagsPagesWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeImageTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageTagsPagesWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImageTagsPagesWithContext), varargs...)
}

// DescribeImageTagsRequest mocks base method
func (m *MockECRPublicAPI) DescribeImageTagsRequest(arg0 *ecrpublic.DescribeImageTagsInput) (*request.Request, *ecrpublic.DescribeImageTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImageTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.DescribeImageTagsOutput)
	return ret0, ret1
}

// DescribeImageTagsRequest indicates an expected call of DescribeImageTagsRequest
func (mr *MockECRPublicAPIMockRecorder) DescribeImageTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageTagsRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImageTagsRequest), arg0)
}

// DescribeImageTagsWithContext mocks base method
func (m *MockECRPublicAPI) DescribeImageTagsWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeImageTagsInput, arg2 ...request.Option) (*ecrpublic.DescribeImageTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImageTagsWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.DescribeImageTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImageTagsWithContext indicates an expected call of DescribeImageTagsWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeImageTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImageTagsWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImageTagsWithContext), varargs...)
}

// DescribeImages mocks base method
func (m *MockECRPublicAPI) DescribeImages(arg0 *ecrpublic.DescribeImagesInput) (*ecrpublic.DescribeImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImages", arg0)
	ret0, _ := ret[0].(*ecrpublic.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImages indicates an expected call of DescribeImages
func (mr *MockECRPublicAPIMockRecorder) DescribeImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImages", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImages), arg0)
}

// DescribeImagesPages mocks base method
func (m *MockECRPublicAPI) DescribeImagesPages(arg0 *ecrpublic.DescribeImagesInput, arg1 func(*ecrpublic.DescribeImagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImagesPages indicates an expected call of DescribeImagesPages
func (mr *MockECRPublicAPIMockRecorder) DescribeImagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesPages", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImagesPages), arg0, arg1)
}

// DescribeImagesPagesWithContext mocks base method
func (m *MockECRPublicAPI) DescribeImagesPagesWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeImagesInput, arg2 func(*ecrpublic.DescribeImagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeImagesPagesWithContext indicates an expected call of DescribeImagesPagesWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeImagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesPagesWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImagesPagesWithContext), varargs...)
}

// DescribeImagesRequest mocks base method
func (m *MockECRPublicAPI) DescribeImagesRequest(arg0 *ecrpublic.DescribeImagesInput) (*request.Request, *ecrpublic.DescribeImagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.DescribeImagesOutput)
	return ret0, ret1
}

// DescribeImagesRequest indicates an expected call of DescribeImagesRequest
func (mr *MockECRPublicAPIMockRecorder) DescribeImagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImagesRequest), arg0)
}

// DescribeImagesWithContext mocks base method
func (m *MockECRPublicAPI) DescribeImagesWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeImagesInput, arg2 ...request.Option) (*ecrpublic.DescribeImagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImagesWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.DescribeImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImagesWithContext indicates an expected call of DescribeImagesWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImagesWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeImagesWithContext), varargs...)
}

// DescribeRegistries mocks base method
func (m *MockECRPublicAPI) DescribeRegistries(arg0 *ecrpublic.DescribeRegistriesInput) (*ecrpublic.DescribeRegistriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistries", arg0)
	ret0, _ := ret[0].(*ecrpublic.DescribeRegistriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistries indicates an expected call of DescribeRegistries
func (mr *MockECRPublicAPIMockRecorder) DescribeRegistries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistries", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRegistries), arg0)
}

// DescribeRegistriesPages mocks base method
func (m *MockECRPublicAPI) DescribeRegistriesPages(arg0 *ecrpublic.DescribeRegistriesInput, arg1 func(*ecrpublic.DescribeRegistriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistriesPages indicates an expected call of DescribeRegistriesPages
func (mr *MockECRPublicAPIMockRecorder) DescribeRegistriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistriesPages", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRegistriesPages), arg0, arg1)
}

// DescribeRegistriesPagesWithContext mocks base method
func (m *MockECRPublicAPI) DescribeRegistriesPagesWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeRegistriesInput, arg2 func(*ecrpublic.DescribeRegistriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistriesPagesWithContext indicates an expected call of DescribeRegistriesPagesWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeRegistriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistriesPagesWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRegistriesPagesWithContext), varargs...)
}

// DescribeRegistriesRequest mocks base method
func (m *MockECRPublicAPI) DescribeRegistriesRequest(arg0 *ecrpublic.DescribeRegistriesInput) (*request.Request, *ecrpublic.DescribeRegistriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.DescribeRegistriesOutput)
	return ret0, ret1
}

// DescribeRegistriesRequest indicates an expected call of DescribeRegistriesRequest
func (mr *MockECRPublicAPIMockRecorder) DescribeRegistriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistriesRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRegistriesRequest), arg0)
}

// DescribeRegistriesWithContext mocks base method
func (m *MockECRPublicAPI) DescribeRegistriesWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeRegistriesInput, arg2 ...request.Option) (*ecrpublic.DescribeRegistriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistriesWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.DescribeRegistriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistriesWithContext indicates an expected call of DescribeRegistriesWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeRegistriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistriesWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRegistriesWithContext), varargs...)
}

// DescribeRepositories mocks base method
func (m *MockECRPublicAPI) DescribeRepositories(arg0 *ecrpublic.DescribeRepositoriesInput) (*ecrpublic.DescribeRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRepositories", arg0)
	ret0, _ := ret[0].(*ecrpublic.DescribeRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRepositories indicates an expected call of DescribeRepositories
func (mr *MockECRPublicAPIMockRecorder) DescribeRepositories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositories", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRepositories), arg0)
}

// DescribeRepositoriesPages mocks base method
func (m *MockECRPublicAPI) DescribeRepositoriesPages(arg0 *ecrpublic.DescribeRepositoriesInput, arg1 func(*ecrpublic.DescribeRepositoriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRepositoriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRepositoriesPages indicates an expected call of DescribeRepositoriesPages
func (mr *MockECRPublicAPIMockRecorder) DescribeRepositoriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositoriesPages", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRepositoriesPages), arg0, arg1)
}

// DescribeRepositoriesPagesWithContext mocks base method
func (m *MockECRPublicAPI) DescribeRepositoriesPagesWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeRepositoriesInput, arg2 func(*ecrpublic.DescribeRepositoriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRepositoriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRepositoriesPagesWithContext indicates an expected call of DescribeRepositoriesPagesWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeRepositoriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositoriesPagesWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRepositoriesPagesWithContext), varargs...)
}

// DescribeRepositoriesRequest mocks base method
func (m *MockECRPublicAPI) DescribeRepositoriesRequest(arg0 *ecrpublic.DescribeRepositoriesInput) (*request.Request, *ecrpublic.DescribeRepositoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRepositoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.DescribeRepositoriesOutput)
	return ret0, ret1
}

// DescribeRepositoriesRequest indicates an expected call of DescribeRepositoriesRequest
func (mr *MockECRPublicAPIMockRecorder) DescribeRepositoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositoriesRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRepositoriesRequest), arg0)
}

// DescribeRepositoriesWithContext mocks base method
func (m *MockECRPublicAPI) DescribeRepositoriesWithContext(arg0 context.Context, arg1 *ecrpublic.DescribeRepositoriesInput, arg2 ...request.Option) (*ecrpublic.DescribeRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRepositoriesWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.DescribeRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRepositoriesWithContext indicates an expected call of DescribeRepositoriesWithContext
func (mr *MockECRPublicAPIMockRecorder) DescribeRepositoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositoriesWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).DescribeRepositoriesWithContext), varargs...)
}

// GetAuthorizationToken mocks base method
func (m *MockECRPublicAPI) GetAuthorizationToken(arg0 *ecrpublic.GetAuthorizationTokenInput) (*ecrpublic.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationToken", arg0)
	ret0, _ := ret[0].(*ecrpublic.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationToken indicates an expected call of GetAuthorizationToken
func (mr *MockECRPublicAPIMockRecorder) GetAuthorizationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationToken", reflect.TypeOf((*MockECRPublicAPI)(nil).GetAuthorizationToken), arg0)
}

// GetAuthorizationTokenRequest mocks base method
func (m *MockECRPublicAPI) GetAuthorizationTokenRequest(arg0 *ecrpublic.GetAuthorizationTokenInput) (*request.Request, *ecrpublic.GetAuthorizationTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.GetAuthorizationTokenOutput)
	return ret0, ret1
}

// GetAuthorizationTokenRequest indicates an expected call of GetAuthorizationTokenRequest
func (mr *MockECRPublicAPIMockRecorder) GetAuthorizationTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationTokenRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).GetAuthorizationTokenRequest), arg0)
}

// GetAuthorizationTokenWithContext mocks base method
func (m *MockECRPublicAPI) GetAuthorizationTokenWithContext(arg0 context.Context, arg1 *ecrpublic.GetAuthorizationTokenInput, arg2 ...request.Option) (*ecrpublic.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizationTokenWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationTokenWithContext indicates an expected call of GetAuthorizationTokenWithContext
func (mr *MockECRPublicAPIMockRecorder) GetAuthorizationTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationTokenWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).GetAuthorizationTokenWithContext), varargs...)
}

// GetRegistryCatalogData mocks base method
func (m *MockECRPublicAPI) GetRegistryCatalogData(arg0 *ecrpublic.GetRegistryCatalogDataInput) (*ecrpublic.GetRegistryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryCatalogData", arg0)
	ret0, _ := ret[0].(*ecrpublic.GetRegistryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryCatalogData indicates an expected call of GetRegistryCatalogData
func (mr *MockECRPublicAPIMockRecorder) GetRegistryCatalogData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryCatalogData", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRegistryCatalogData), arg0)
}

// GetRegistryCatalogDataRequest mocks base method
func (m *MockECRPublicAPI) GetRegistryCatalogDataRequest(arg0 *ecrpublic.GetRegistryCatalogDataInput) (*request.Request, *ecrpublic.GetRegistryCatalogDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryCatalogDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.GetRegistryCatalogDataOutput)
	return ret0, ret1
}

// GetRegistryCatalogDataRequest indicates an expected call of GetRegistryCatalogDataRequest
func (mr *MockECRPublicAPIMockRecorder) GetRegistryCatalogDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryCatalogDataRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRegistryCatalogDataRequest), arg0)
}

// GetRegistryCatalogDataWithContext mocks base method
func (m *MockECRPublicAPI) GetRegistryCatalogDataWithContext(arg0 context.Context, arg1 *ecrpublic.GetRegistryCatalogDataInput, arg2 ...request.Option) (*ecrpublic.GetRegistryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegistryCatalogDataWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.GetRegistryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryCatalogDataWithContext indicates an expected call of GetRegistryCatalogDataWithContext
func (mr *MockECRPublicAPIMockRecorder) GetRegistryCatalogDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryCatalogDataWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRegistryCatalogDataWithContext), varargs...)
}

// GetRepositoryCatalogData mocks base method
func (m *MockECRPublicAPI) GetRepositoryCatalogData(arg0 *ecrpublic.GetRepositoryCatalogDataInput) (*ecrpublic.GetRepositoryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryCatalogData", arg0)
	ret0, _ := ret[0].(*ecrpublic.GetRepositoryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryCatalogData indicates an expected call of GetRepositoryCatalogData
func (mr *MockECRPublicAPIMockRecorder) GetRepositoryCatalogData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryCatalogData", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRepositoryCatalogData), arg0)
}

// GetRepositoryCatalogDataRequest mocks base method
func (m *MockECRPublicAPI) GetRepositoryCatalogDataRequest(arg0 *ecrpublic.GetRepositoryCatalogDataInput) (*request.Request, *ecrpublic.GetRepositoryCatalogDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryCatalogDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.GetRepositoryCatalogDataOutput)
	return ret0, ret1
}

// GetRepositoryCatalogDataRequest indicates an expected call of GetRepositoryCatalogDataRequest
func (mr *MockECRPublicAPIMockRecorder) GetRepositoryCatalogDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryCatalogDataRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRepositoryCatalogDataRequest), arg0)
}

// GetRepositoryCatalogDataWithContext mocks base method
func (m *MockECRPublicAPI) GetRepositoryCatalogDataWithContext(arg0 context.Context, arg1 *ecrpublic.GetRepositoryCatalogDataInput, arg2 ...request.Option) (*ecrpublic.GetRepositoryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositoryCatalogDataWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.GetRepositoryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryCatalogDataWithContext indicates an expected call of GetRepositoryCatalogDataWithContext
func (mr *MockECRPublicAPIMockRecorder) GetRepositoryCatalogDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryCatalogDataWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRepositoryCatalogDataWithContext), varargs...)
}

// GetRepositoryPolicy mocks base method
func (m *MockECRPublicAPI) GetRepositoryPolicy(arg0 *ecrpublic.GetRepositoryPolicyInput) (*ecrpublic.GetRepositoryPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryPolicy", arg0)
	ret0, _ := ret[0].(*ecrpublic.GetRepositoryPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryPolicy indicates an expected call of GetRepositoryPolicy
func (mr *MockECRPublicAPIMockRecorder) GetRepositoryPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryPolicy", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRepositoryPolicy), arg0)
}

// GetRepositoryPolicyRequest mocks base method
func (m *MockECRPublicAPI) GetRepositoryPolicyRequest(arg0 *ecrpublic.GetRepositoryPolicyInput) (*request.Request, *ecrpublic.GetRepositoryPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.GetRepositoryPolicyOutput)
	return ret0, ret1
}

// GetRepositoryPolicyRequest indicates an expected call of GetRepositoryPolicyRequest
func (mr *MockECRPublicAPIMockRecorder) GetRepositoryPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryPolicyRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRepositoryPolicyRequest), arg0)
}

// GetRepositoryPolicyWithContext mocks base method
func (m *MockECRPublicAPI) GetRepositoryPolicyWithContext(arg0 context.Context, arg1 *ecrpublic.GetRepositoryPolicyInput, arg2 ...request.Option) (*ecrpublic.GetRepositoryPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepositoryPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.GetRepositoryPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryPolicyWithContext indicates an expected call of GetRepositoryPolicyWithContext
func (mr *MockECRPublicAPIMockRecorder) GetRepositoryPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryPolicyWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).GetRepositoryPolicyWithContext), varargs...)
}

// InitiateLayerUpload mocks base method
func (m *MockECRPublicAPI) InitiateLayerUpload(arg0 *ecrpublic.InitiateLayerUploadInput) (*ecrpublic.InitiateLayerUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateLayerUpload", arg0)
	ret0, _ := ret[0].(*ecrpublic.InitiateLayerUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateLayerUpload indicates an expected call of InitiateLayerUpload
func (mr *MockECRPublicAPIMockRecorder) InitiateLayerUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateLayerUpload", reflect.TypeOf((*MockECRPublicAPI)(nil).InitiateLayerUpload), arg0)
}

// InitiateLayerUploadRequest mocks base method
func (m *MockECRPublicAPI) InitiateLayerUploadRequest(arg0 *ecrpublic.InitiateLayerUploadInput) (*request.Request, *ecrpublic.InitiateLayerUploadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateLayerUploadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.InitiateLayerUploadOutput)
	return ret0, ret1
}

// InitiateLayerUploadRequest indicates an expected call of InitiateLayerUploadRequest
func (mr *MockECRPublicAPIMockRecorder) InitiateLayerUploadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateLayerUploadRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).InitiateLayerUploadRequest), arg0)
}

// InitiateLayerUploadWithContext mocks base method
func (m *MockECRPublicAPI) InitiateLayerUploadWithContext(arg0 context.Context, arg1 *ecrpublic.InitiateLayerUploadInput, arg2 ...request.Option) (*ecrpublic.InitiateLayerUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiateLayerUploadWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.InitiateLayerUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateLayerUploadWithContext indicates an expected call of InitiateLayerUploadWithContext
func (mr *MockECRPublicAPIMockRecorder) InitiateLayerUploadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateLayerUploadWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).InitiateLayerUploadWithContext), varargs...)
}

// PutImage mocks base method
func (m *MockECRPublicAPI) PutImage(arg0 *ecrpublic.PutImageInput) (*ecrpublic.PutImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutImage", arg0)
	ret0, _ := ret[0].(*ecrpublic.PutImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutImage indicates an expected call of PutImage
func (mr *MockECRPublicAPIMockRecorder) PutImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutImage", reflect.TypeOf((*MockECRPublicAPI)(nil).PutImage), arg0)
}

// PutImageRequest mocks base method
func (m *MockECRPublicAPI) PutImageRequest(arg0 *ecrpublic.PutImageInput) (*request.Request, *ecrpublic.PutImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.PutImageOutput)
	return ret0, ret1
}

// PutImageRequest indicates an expected call of PutImageRequest
func (mr *MockECRPublicAPIMockRecorder) PutImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutImageRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).PutImageRequest), arg0)
}

// PutImageWithContext mocks base method
func (m *MockECRPublicAPI) PutImageWithContext(arg0 context.Context, arg1 *ecrpublic.PutImageInput, arg2 ...request.Option) (*ecrpublic.PutImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutImageWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.PutImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutImageWithContext indicates an expected call of PutImageWithContext
func (mr *MockECRPublicAPIMockRecorder) PutImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutImageWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).PutImageWithContext), varargs...)
}

// PutRegistryCatalogData mocks base method
func (m *MockECRPublicAPI) PutRegistryCatalogData(arg0 *ecrpublic.PutRegistryCatalogDataInput) (*ecrpublic.PutRegistryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRegistryCatalogData", arg0)
	ret0, _ := ret[0].(*ecrpublic.PutRegistryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRegistryCatalogData indicates an expected call of PutRegistryCatalogData
func (mr *MockECRPublicAPIMockRecorder) PutRegistryCatalogData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRegistryCatalogData", reflect.TypeOf((*MockECRPublicAPI)(nil).PutRegistryCatalogData), arg0)
}

// PutRegistryCatalogDataRequest mocks base method
func (m *MockECRPublicAPI) PutRegistryCatalogDataRequest(arg0 *ecrpublic.PutRegistryCatalogDataInput) (*request.Request, *ecrpublic.PutRegistryCatalogDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRegistryCatalogDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.PutRegistryCatalogDataOutput)
	return ret0, ret1
}

// PutRegistryCatalogDataRequest indicates an expected call of PutRegistryCatalogDataRequest
func (mr *MockECRPublicAPIMockRecorder) PutRegistryCatalogDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRegistryCatalogDataRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).PutRegistryCatalogDataRequest), arg0)
}

// PutRegistryCatalogDataWithContext mocks base method
func (m *MockECRPublicAPI) PutRegistryCatalogDataWithContext(arg0 context.Context, arg1 *ecrpublic.PutRegistryCatalogDataInput, arg2 ...request.Option) (*ecrpublic.PutRegistryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRegistryCatalogDataWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.PutRegistryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRegistryCatalogDataWithContext indicates an expected call of PutRegistryCatalogDataWithContext
func (mr *MockECRPublicAPIMockRecorder) PutRegistryCatalogDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRegistryCatalogDataWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).PutRegistryCatalogDataWithContext), varargs...)
}

// PutRepositoryCatalogData mocks base method
func (m *MockECRPublicAPI) PutRepositoryCatalogData(arg0 *ecrpublic.PutRepositoryCatalogDataInput) (*ecrpublic.PutRepositoryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRepositoryCatalogData", arg0)
	ret0, _ := ret[0].(*ecrpublic.PutRepositoryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRepositoryCatalogData indicates an expected call of PutRepositoryCatalogData
func (mr *MockECRPublicAPIMockRecorder) PutRepositoryCatalogData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRepositoryCatalogData", reflect.TypeOf((*MockECRPublicAPI)(nil).PutRepositoryCatalogData), arg0)
}

// PutRepositoryCatalogDataRequest mocks base method
func (m *MockECRPublicAPI) PutRepositoryCatalogDataRequest(arg0 *ecrpublic.PutRepositoryCatalogDataInput) (*request.Request, *ecrpublic.PutRepositoryCatalogDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRepositoryCatalogDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.PutRepositoryCatalogDataOutput)
	return ret0, ret1
}

// PutRepositoryCatalogDataRequest indicates an expected call of PutRepositoryCatalogDataRequest
func (mr *MockECRPublicAPIMockRecorder) PutRepositoryCatalogDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRepositoryCatalogDataRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).PutRepositoryCatalogDataRequest), arg0)
}

// PutRepositoryCatalogDataWithContext mocks base method
func (m *MockECRPublicAPI) PutRepositoryCatalogDataWithContext(arg0 context.Context, arg1 *ecrpublic.PutRepositoryCatalogDataInput, arg2 ...request.Option) (*ecrpublic.PutRepositoryCatalogDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRepositoryCatalogDataWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.PutRepositoryCatalogDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRepositoryCatalogDataWithContext indicates an expected call of PutRepositoryCatalogDataWithContext
func (mr *MockECRPublicAPIMockRecorder) PutRepositoryCatalogDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRepositoryCatalogDataWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).PutRepositoryCatalogDataWithContext), varargs...)
}

// SetRepositoryPolicy mocks base method
func (m *MockECRPublicAPI) SetRepositoryPolicy(arg0 *ecrpublic.SetRepositoryPolicyInput) (*ecrpublic.SetRepositoryPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositoryPolicy", arg0)
	ret0, _ := ret[0].(*ecrpublic.SetRepositoryPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRepositoryPolicy indicates an expected call of SetRepositoryPolicy
func (mr *MockECRPublicAPIMockRecorder) SetRepositoryPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositoryPolicy", reflect.TypeOf((*MockECRPublicAPI)(nil).SetRepositoryPolicy), arg0)
}

// SetRepositoryPolicyRequest mocks base method
func (m *MockECRPublicAPI) SetRepositoryPolicyRequest(arg0 *ecrpublic.SetRepositoryPolicyInput) (*request.Request, *ecrpublic.SetRepositoryPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositoryPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.SetRepositoryPolicyOutput)
	return ret0, ret1
}

// SetRepositoryPolicyRequest indicates an expected call of SetRepositoryPolicyRequest
func (mr *MockECRPublicAPIMockRecorder) SetRepositoryPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositoryPolicyRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).SetRepositoryPolicyRequest), arg0)
}

// SetRepositoryPolicyWithContext mocks base method
func (m *MockECRPublicAPI) SetRepositoryPolicyWithContext(arg0 context.Context, arg1 *ecrpublic.SetRepositoryPolicyInput, arg2 ...request.Option) (*ecrpublic.SetRepositoryPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRepositoryPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.SetRepositoryPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRepositoryPolicyWithContext indicates an expected call of SetRepositoryPolicyWithContext
func (mr *MockECRPublicAPIMockRecorder) SetRepositoryPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositoryPolicyWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).SetRepositoryPolicyWithContext), varargs...)
}

// UploadLayerPart mocks base method
func (m *MockECRPublicAPI) UploadLayerPart(arg0 *ecrpublic.UploadLayerPartInput) (*ecrpublic.UploadLayerPartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadLayerPart", arg0)
	ret0, _ := ret[0].(*ecrpublic.UploadLayerPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadLayerPart indicates an expected call of UploadLayerPart
func (mr *MockECRPublicAPIMockRecorder) UploadLayerPart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLayerPart", reflect.TypeOf((*MockECRPublicAPI)(nil).UploadLayerPart), arg0)
}

// UploadLayerPartRequest mocks base method
func (m *MockECRPublicAPI) UploadLayerPartRequest(arg0 *ecrpublic.UploadLayerPartInput) (*request.Request, *ecrpublic.UploadLayerPartOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadLayerPartRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ecrpublic.UploadLayerPartOutput)
	return ret0, ret1
}

// UploadLayerPartRequest indicates an expected call of UploadLayerPartRequest
func (mr *MockECRPublicAPIMockRecorder) UploadLayerPartRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLayerPartRequest", reflect.TypeOf((*MockECRPublicAPI)(nil).UploadLayerPartRequest), arg0)
}

// UploadLayerPartWithContext mocks base method
func (m *MockECRPublicAPI) UploadLayerPartWithContext(arg0 context.Context, arg1 *ecrpublic.UploadLayerPartInput, arg2 ...request.Option) (*ecrpublic.UploadLayerPartOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadLayerPartWithContext", varargs...)
	ret0, _ := ret[0].(*ecrpublic.UploadLayerPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadLayerPartWithContext indicates an expected call of UploadLayerPartWithContext
func (mr *MockECRPublicAPIMockRecorder) UploadLayerPartWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLayerPartWithContext", reflect.TypeOf((*MockECRPublicAPI)(nil).UploadLayerPartWithContext), varargs...)
}

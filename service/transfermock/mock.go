// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/transfer/transferiface (interfaces: TransferAPI)

// Package transfermock is a generated GoMock package.
package transfermock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	transfer "github.com/aws/aws-sdk-go/service/transfer"
	gomock "github.com/golang/mock/gomock"
)

// MockTransferAPI is a mock of TransferAPI interface.
type MockTransferAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTransferAPIMockRecorder
}

// MockTransferAPIMockRecorder is the mock recorder for MockTransferAPI.
type MockTransferAPIMockRecorder struct {
	mock *MockTransferAPI
}

// NewMockTransferAPI creates a new mock instance.
func NewMockTransferAPI(ctrl *gomock.Controller) *MockTransferAPI {
	mock := &MockTransferAPI{ctrl: ctrl}
	mock.recorder = &MockTransferAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferAPI) EXPECT() *MockTransferAPIMockRecorder {
	return m.recorder
}

// CreateAccess mocks base method.
func (m *MockTransferAPI) CreateAccess(arg0 *transfer.CreateAccessInput) (*transfer.CreateAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccess", arg0)
	ret0, _ := ret[0].(*transfer.CreateAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccess indicates an expected call of CreateAccess.
func (mr *MockTransferAPIMockRecorder) CreateAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccess", reflect.TypeOf((*MockTransferAPI)(nil).CreateAccess), arg0)
}

// CreateAccessRequest mocks base method.
func (m *MockTransferAPI) CreateAccessRequest(arg0 *transfer.CreateAccessInput) (*request.Request, *transfer.CreateAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.CreateAccessOutput)
	return ret0, ret1
}

// CreateAccessRequest indicates an expected call of CreateAccessRequest.
func (mr *MockTransferAPIMockRecorder) CreateAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRequest", reflect.TypeOf((*MockTransferAPI)(nil).CreateAccessRequest), arg0)
}

// CreateAccessWithContext mocks base method.
func (m *MockTransferAPI) CreateAccessWithContext(arg0 context.Context, arg1 *transfer.CreateAccessInput, arg2 ...request.Option) (*transfer.CreateAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.CreateAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessWithContext indicates an expected call of CreateAccessWithContext.
func (mr *MockTransferAPIMockRecorder) CreateAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessWithContext", reflect.TypeOf((*MockTransferAPI)(nil).CreateAccessWithContext), varargs...)
}

// CreateServer mocks base method.
func (m *MockTransferAPI) CreateServer(arg0 *transfer.CreateServerInput) (*transfer.CreateServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", arg0)
	ret0, _ := ret[0].(*transfer.CreateServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockTransferAPIMockRecorder) CreateServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockTransferAPI)(nil).CreateServer), arg0)
}

// CreateServerRequest mocks base method.
func (m *MockTransferAPI) CreateServerRequest(arg0 *transfer.CreateServerInput) (*request.Request, *transfer.CreateServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.CreateServerOutput)
	return ret0, ret1
}

// CreateServerRequest indicates an expected call of CreateServerRequest.
func (mr *MockTransferAPIMockRecorder) CreateServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerRequest", reflect.TypeOf((*MockTransferAPI)(nil).CreateServerRequest), arg0)
}

// CreateServerWithContext mocks base method.
func (m *MockTransferAPI) CreateServerWithContext(arg0 context.Context, arg1 *transfer.CreateServerInput, arg2 ...request.Option) (*transfer.CreateServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServerWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.CreateServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerWithContext indicates an expected call of CreateServerWithContext.
func (mr *MockTransferAPIMockRecorder) CreateServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerWithContext", reflect.TypeOf((*MockTransferAPI)(nil).CreateServerWithContext), varargs...)
}

// CreateUser mocks base method.
func (m *MockTransferAPI) CreateUser(arg0 *transfer.CreateUserInput) (*transfer.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*transfer.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTransferAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTransferAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method.
func (m *MockTransferAPI) CreateUserRequest(arg0 *transfer.CreateUserInput) (*request.Request, *transfer.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest.
func (mr *MockTransferAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockTransferAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method.
func (m *MockTransferAPI) CreateUserWithContext(arg0 context.Context, arg1 *transfer.CreateUserInput, arg2 ...request.Option) (*transfer.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext.
func (mr *MockTransferAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockTransferAPI)(nil).CreateUserWithContext), varargs...)
}

// CreateWorkflow mocks base method.
func (m *MockTransferAPI) CreateWorkflow(arg0 *transfer.CreateWorkflowInput) (*transfer.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0)
	ret0, _ := ret[0].(*transfer.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockTransferAPIMockRecorder) CreateWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockTransferAPI)(nil).CreateWorkflow), arg0)
}

// CreateWorkflowRequest mocks base method.
func (m *MockTransferAPI) CreateWorkflowRequest(arg0 *transfer.CreateWorkflowInput) (*request.Request, *transfer.CreateWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.CreateWorkflowOutput)
	return ret0, ret1
}

// CreateWorkflowRequest indicates an expected call of CreateWorkflowRequest.
func (mr *MockTransferAPIMockRecorder) CreateWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowRequest", reflect.TypeOf((*MockTransferAPI)(nil).CreateWorkflowRequest), arg0)
}

// CreateWorkflowWithContext mocks base method.
func (m *MockTransferAPI) CreateWorkflowWithContext(arg0 context.Context, arg1 *transfer.CreateWorkflowInput, arg2 ...request.Option) (*transfer.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowWithContext indicates an expected call of CreateWorkflowWithContext.
func (mr *MockTransferAPIMockRecorder) CreateWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowWithContext", reflect.TypeOf((*MockTransferAPI)(nil).CreateWorkflowWithContext), varargs...)
}

// DeleteAccess mocks base method.
func (m *MockTransferAPI) DeleteAccess(arg0 *transfer.DeleteAccessInput) (*transfer.DeleteAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccess", arg0)
	ret0, _ := ret[0].(*transfer.DeleteAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccess indicates an expected call of DeleteAccess.
func (mr *MockTransferAPIMockRecorder) DeleteAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccess", reflect.TypeOf((*MockTransferAPI)(nil).DeleteAccess), arg0)
}

// DeleteAccessRequest mocks base method.
func (m *MockTransferAPI) DeleteAccessRequest(arg0 *transfer.DeleteAccessInput) (*request.Request, *transfer.DeleteAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DeleteAccessOutput)
	return ret0, ret1
}

// DeleteAccessRequest indicates an expected call of DeleteAccessRequest.
func (mr *MockTransferAPIMockRecorder) DeleteAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessRequest", reflect.TypeOf((*MockTransferAPI)(nil).DeleteAccessRequest), arg0)
}

// DeleteAccessWithContext mocks base method.
func (m *MockTransferAPI) DeleteAccessWithContext(arg0 context.Context, arg1 *transfer.DeleteAccessInput, arg2 ...request.Option) (*transfer.DeleteAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DeleteAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessWithContext indicates an expected call of DeleteAccessWithContext.
func (mr *MockTransferAPIMockRecorder) DeleteAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DeleteAccessWithContext), varargs...)
}

// DeleteServer mocks base method.
func (m *MockTransferAPI) DeleteServer(arg0 *transfer.DeleteServerInput) (*transfer.DeleteServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", arg0)
	ret0, _ := ret[0].(*transfer.DeleteServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockTransferAPIMockRecorder) DeleteServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockTransferAPI)(nil).DeleteServer), arg0)
}

// DeleteServerRequest mocks base method.
func (m *MockTransferAPI) DeleteServerRequest(arg0 *transfer.DeleteServerInput) (*request.Request, *transfer.DeleteServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DeleteServerOutput)
	return ret0, ret1
}

// DeleteServerRequest indicates an expected call of DeleteServerRequest.
func (mr *MockTransferAPIMockRecorder) DeleteServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerRequest", reflect.TypeOf((*MockTransferAPI)(nil).DeleteServerRequest), arg0)
}

// DeleteServerWithContext mocks base method.
func (m *MockTransferAPI) DeleteServerWithContext(arg0 context.Context, arg1 *transfer.DeleteServerInput, arg2 ...request.Option) (*transfer.DeleteServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServerWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DeleteServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServerWithContext indicates an expected call of DeleteServerWithContext.
func (mr *MockTransferAPIMockRecorder) DeleteServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DeleteServerWithContext), varargs...)
}

// DeleteSshPublicKey mocks base method.
func (m *MockTransferAPI) DeleteSshPublicKey(arg0 *transfer.DeleteSshPublicKeyInput) (*transfer.DeleteSshPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSshPublicKey", arg0)
	ret0, _ := ret[0].(*transfer.DeleteSshPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSshPublicKey indicates an expected call of DeleteSshPublicKey.
func (mr *MockTransferAPIMockRecorder) DeleteSshPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSshPublicKey", reflect.TypeOf((*MockTransferAPI)(nil).DeleteSshPublicKey), arg0)
}

// DeleteSshPublicKeyRequest mocks base method.
func (m *MockTransferAPI) DeleteSshPublicKeyRequest(arg0 *transfer.DeleteSshPublicKeyInput) (*request.Request, *transfer.DeleteSshPublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSshPublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DeleteSshPublicKeyOutput)
	return ret0, ret1
}

// DeleteSshPublicKeyRequest indicates an expected call of DeleteSshPublicKeyRequest.
func (mr *MockTransferAPIMockRecorder) DeleteSshPublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSshPublicKeyRequest", reflect.TypeOf((*MockTransferAPI)(nil).DeleteSshPublicKeyRequest), arg0)
}

// DeleteSshPublicKeyWithContext mocks base method.
func (m *MockTransferAPI) DeleteSshPublicKeyWithContext(arg0 context.Context, arg1 *transfer.DeleteSshPublicKeyInput, arg2 ...request.Option) (*transfer.DeleteSshPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSshPublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DeleteSshPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSshPublicKeyWithContext indicates an expected call of DeleteSshPublicKeyWithContext.
func (mr *MockTransferAPIMockRecorder) DeleteSshPublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSshPublicKeyWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DeleteSshPublicKeyWithContext), varargs...)
}

// DeleteUser mocks base method.
func (m *MockTransferAPI) DeleteUser(arg0 *transfer.DeleteUserInput) (*transfer.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*transfer.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockTransferAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockTransferAPI)(nil).DeleteUser), arg0)
}

// DeleteUserRequest mocks base method.
func (m *MockTransferAPI) DeleteUserRequest(arg0 *transfer.DeleteUserInput) (*request.Request, *transfer.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest.
func (mr *MockTransferAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockTransferAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method.
func (m *MockTransferAPI) DeleteUserWithContext(arg0 context.Context, arg1 *transfer.DeleteUserInput, arg2 ...request.Option) (*transfer.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext.
func (mr *MockTransferAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DeleteUserWithContext), varargs...)
}

// DeleteWorkflow mocks base method.
func (m *MockTransferAPI) DeleteWorkflow(arg0 *transfer.DeleteWorkflowInput) (*transfer.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", arg0)
	ret0, _ := ret[0].(*transfer.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockTransferAPIMockRecorder) DeleteWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockTransferAPI)(nil).DeleteWorkflow), arg0)
}

// DeleteWorkflowRequest mocks base method.
func (m *MockTransferAPI) DeleteWorkflowRequest(arg0 *transfer.DeleteWorkflowInput) (*request.Request, *transfer.DeleteWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DeleteWorkflowOutput)
	return ret0, ret1
}

// DeleteWorkflowRequest indicates an expected call of DeleteWorkflowRequest.
func (mr *MockTransferAPIMockRecorder) DeleteWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRequest", reflect.TypeOf((*MockTransferAPI)(nil).DeleteWorkflowRequest), arg0)
}

// DeleteWorkflowWithContext mocks base method.
func (m *MockTransferAPI) DeleteWorkflowWithContext(arg0 context.Context, arg1 *transfer.DeleteWorkflowInput, arg2 ...request.Option) (*transfer.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowWithContext indicates an expected call of DeleteWorkflowWithContext.
func (mr *MockTransferAPIMockRecorder) DeleteWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DeleteWorkflowWithContext), varargs...)
}

// DescribeAccess mocks base method.
func (m *MockTransferAPI) DescribeAccess(arg0 *transfer.DescribeAccessInput) (*transfer.DescribeAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccess", arg0)
	ret0, _ := ret[0].(*transfer.DescribeAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccess indicates an expected call of DescribeAccess.
func (mr *MockTransferAPIMockRecorder) DescribeAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccess", reflect.TypeOf((*MockTransferAPI)(nil).DescribeAccess), arg0)
}

// DescribeAccessRequest mocks base method.
func (m *MockTransferAPI) DescribeAccessRequest(arg0 *transfer.DescribeAccessInput) (*request.Request, *transfer.DescribeAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DescribeAccessOutput)
	return ret0, ret1
}

// DescribeAccessRequest indicates an expected call of DescribeAccessRequest.
func (mr *MockTransferAPIMockRecorder) DescribeAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessRequest", reflect.TypeOf((*MockTransferAPI)(nil).DescribeAccessRequest), arg0)
}

// DescribeAccessWithContext mocks base method.
func (m *MockTransferAPI) DescribeAccessWithContext(arg0 context.Context, arg1 *transfer.DescribeAccessInput, arg2 ...request.Option) (*transfer.DescribeAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccessWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DescribeAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessWithContext indicates an expected call of DescribeAccessWithContext.
func (mr *MockTransferAPIMockRecorder) DescribeAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DescribeAccessWithContext), varargs...)
}

// DescribeExecution mocks base method.
func (m *MockTransferAPI) DescribeExecution(arg0 *transfer.DescribeExecutionInput) (*transfer.DescribeExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExecution", arg0)
	ret0, _ := ret[0].(*transfer.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecution indicates an expected call of DescribeExecution.
func (mr *MockTransferAPIMockRecorder) DescribeExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecution", reflect.TypeOf((*MockTransferAPI)(nil).DescribeExecution), arg0)
}

// DescribeExecutionRequest mocks base method.
func (m *MockTransferAPI) DescribeExecutionRequest(arg0 *transfer.DescribeExecutionInput) (*request.Request, *transfer.DescribeExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DescribeExecutionOutput)
	return ret0, ret1
}

// DescribeExecutionRequest indicates an expected call of DescribeExecutionRequest.
func (mr *MockTransferAPIMockRecorder) DescribeExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecutionRequest", reflect.TypeOf((*MockTransferAPI)(nil).DescribeExecutionRequest), arg0)
}

// DescribeExecutionWithContext mocks base method.
func (m *MockTransferAPI) DescribeExecutionWithContext(arg0 context.Context, arg1 *transfer.DescribeExecutionInput, arg2 ...request.Option) (*transfer.DescribeExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecutionWithContext indicates an expected call of DescribeExecutionWithContext.
func (mr *MockTransferAPIMockRecorder) DescribeExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecutionWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DescribeExecutionWithContext), varargs...)
}

// DescribeSecurityPolicy mocks base method.
func (m *MockTransferAPI) DescribeSecurityPolicy(arg0 *transfer.DescribeSecurityPolicyInput) (*transfer.DescribeSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSecurityPolicy", arg0)
	ret0, _ := ret[0].(*transfer.DescribeSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityPolicy indicates an expected call of DescribeSecurityPolicy.
func (mr *MockTransferAPIMockRecorder) DescribeSecurityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityPolicy", reflect.TypeOf((*MockTransferAPI)(nil).DescribeSecurityPolicy), arg0)
}

// DescribeSecurityPolicyRequest mocks base method.
func (m *MockTransferAPI) DescribeSecurityPolicyRequest(arg0 *transfer.DescribeSecurityPolicyInput) (*request.Request, *transfer.DescribeSecurityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSecurityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DescribeSecurityPolicyOutput)
	return ret0, ret1
}

// DescribeSecurityPolicyRequest indicates an expected call of DescribeSecurityPolicyRequest.
func (mr *MockTransferAPIMockRecorder) DescribeSecurityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityPolicyRequest", reflect.TypeOf((*MockTransferAPI)(nil).DescribeSecurityPolicyRequest), arg0)
}

// DescribeSecurityPolicyWithContext mocks base method.
func (m *MockTransferAPI) DescribeSecurityPolicyWithContext(arg0 context.Context, arg1 *transfer.DescribeSecurityPolicyInput, arg2 ...request.Option) (*transfer.DescribeSecurityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSecurityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DescribeSecurityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityPolicyWithContext indicates an expected call of DescribeSecurityPolicyWithContext.
func (mr *MockTransferAPIMockRecorder) DescribeSecurityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityPolicyWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DescribeSecurityPolicyWithContext), varargs...)
}

// DescribeServer mocks base method.
func (m *MockTransferAPI) DescribeServer(arg0 *transfer.DescribeServerInput) (*transfer.DescribeServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServer", arg0)
	ret0, _ := ret[0].(*transfer.DescribeServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServer indicates an expected call of DescribeServer.
func (mr *MockTransferAPIMockRecorder) DescribeServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServer", reflect.TypeOf((*MockTransferAPI)(nil).DescribeServer), arg0)
}

// DescribeServerRequest mocks base method.
func (m *MockTransferAPI) DescribeServerRequest(arg0 *transfer.DescribeServerInput) (*request.Request, *transfer.DescribeServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DescribeServerOutput)
	return ret0, ret1
}

// DescribeServerRequest indicates an expected call of DescribeServerRequest.
func (mr *MockTransferAPIMockRecorder) DescribeServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServerRequest", reflect.TypeOf((*MockTransferAPI)(nil).DescribeServerRequest), arg0)
}

// DescribeServerWithContext mocks base method.
func (m *MockTransferAPI) DescribeServerWithContext(arg0 context.Context, arg1 *transfer.DescribeServerInput, arg2 ...request.Option) (*transfer.DescribeServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServerWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DescribeServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServerWithContext indicates an expected call of DescribeServerWithContext.
func (mr *MockTransferAPIMockRecorder) DescribeServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServerWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DescribeServerWithContext), varargs...)
}

// DescribeUser mocks base method.
func (m *MockTransferAPI) DescribeUser(arg0 *transfer.DescribeUserInput) (*transfer.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUser", arg0)
	ret0, _ := ret[0].(*transfer.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUser indicates an expected call of DescribeUser.
func (mr *MockTransferAPIMockRecorder) DescribeUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUser", reflect.TypeOf((*MockTransferAPI)(nil).DescribeUser), arg0)
}

// DescribeUserRequest mocks base method.
func (m *MockTransferAPI) DescribeUserRequest(arg0 *transfer.DescribeUserInput) (*request.Request, *transfer.DescribeUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DescribeUserOutput)
	return ret0, ret1
}

// DescribeUserRequest indicates an expected call of DescribeUserRequest.
func (mr *MockTransferAPIMockRecorder) DescribeUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserRequest", reflect.TypeOf((*MockTransferAPI)(nil).DescribeUserRequest), arg0)
}

// DescribeUserWithContext mocks base method.
func (m *MockTransferAPI) DescribeUserWithContext(arg0 context.Context, arg1 *transfer.DescribeUserInput, arg2 ...request.Option) (*transfer.DescribeUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DescribeUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserWithContext indicates an expected call of DescribeUserWithContext.
func (mr *MockTransferAPIMockRecorder) DescribeUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DescribeUserWithContext), varargs...)
}

// DescribeWorkflow mocks base method.
func (m *MockTransferAPI) DescribeWorkflow(arg0 *transfer.DescribeWorkflowInput) (*transfer.DescribeWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkflow", arg0)
	ret0, _ := ret[0].(*transfer.DescribeWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkflow indicates an expected call of DescribeWorkflow.
func (mr *MockTransferAPIMockRecorder) DescribeWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkflow", reflect.TypeOf((*MockTransferAPI)(nil).DescribeWorkflow), arg0)
}

// DescribeWorkflowRequest mocks base method.
func (m *MockTransferAPI) DescribeWorkflowRequest(arg0 *transfer.DescribeWorkflowInput) (*request.Request, *transfer.DescribeWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.DescribeWorkflowOutput)
	return ret0, ret1
}

// DescribeWorkflowRequest indicates an expected call of DescribeWorkflowRequest.
func (mr *MockTransferAPIMockRecorder) DescribeWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkflowRequest", reflect.TypeOf((*MockTransferAPI)(nil).DescribeWorkflowRequest), arg0)
}

// DescribeWorkflowWithContext mocks base method.
func (m *MockTransferAPI) DescribeWorkflowWithContext(arg0 context.Context, arg1 *transfer.DescribeWorkflowInput, arg2 ...request.Option) (*transfer.DescribeWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.DescribeWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkflowWithContext indicates an expected call of DescribeWorkflowWithContext.
func (mr *MockTransferAPIMockRecorder) DescribeWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkflowWithContext", reflect.TypeOf((*MockTransferAPI)(nil).DescribeWorkflowWithContext), varargs...)
}

// ImportSshPublicKey mocks base method.
func (m *MockTransferAPI) ImportSshPublicKey(arg0 *transfer.ImportSshPublicKeyInput) (*transfer.ImportSshPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSshPublicKey", arg0)
	ret0, _ := ret[0].(*transfer.ImportSshPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSshPublicKey indicates an expected call of ImportSshPublicKey.
func (mr *MockTransferAPIMockRecorder) ImportSshPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSshPublicKey", reflect.TypeOf((*MockTransferAPI)(nil).ImportSshPublicKey), arg0)
}

// ImportSshPublicKeyRequest mocks base method.
func (m *MockTransferAPI) ImportSshPublicKeyRequest(arg0 *transfer.ImportSshPublicKeyInput) (*request.Request, *transfer.ImportSshPublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSshPublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ImportSshPublicKeyOutput)
	return ret0, ret1
}

// ImportSshPublicKeyRequest indicates an expected call of ImportSshPublicKeyRequest.
func (mr *MockTransferAPIMockRecorder) ImportSshPublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSshPublicKeyRequest", reflect.TypeOf((*MockTransferAPI)(nil).ImportSshPublicKeyRequest), arg0)
}

// ImportSshPublicKeyWithContext mocks base method.
func (m *MockTransferAPI) ImportSshPublicKeyWithContext(arg0 context.Context, arg1 *transfer.ImportSshPublicKeyInput, arg2 ...request.Option) (*transfer.ImportSshPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportSshPublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ImportSshPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSshPublicKeyWithContext indicates an expected call of ImportSshPublicKeyWithContext.
func (mr *MockTransferAPIMockRecorder) ImportSshPublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSshPublicKeyWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ImportSshPublicKeyWithContext), varargs...)
}

// ListAccesses mocks base method.
func (m *MockTransferAPI) ListAccesses(arg0 *transfer.ListAccessesInput) (*transfer.ListAccessesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccesses", arg0)
	ret0, _ := ret[0].(*transfer.ListAccessesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccesses indicates an expected call of ListAccesses.
func (mr *MockTransferAPIMockRecorder) ListAccesses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccesses", reflect.TypeOf((*MockTransferAPI)(nil).ListAccesses), arg0)
}

// ListAccessesPages mocks base method.
func (m *MockTransferAPI) ListAccessesPages(arg0 *transfer.ListAccessesInput, arg1 func(*transfer.ListAccessesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessesPages indicates an expected call of ListAccessesPages.
func (mr *MockTransferAPIMockRecorder) ListAccessesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessesPages", reflect.TypeOf((*MockTransferAPI)(nil).ListAccessesPages), arg0, arg1)
}

// ListAccessesPagesWithContext mocks base method.
func (m *MockTransferAPI) ListAccessesPagesWithContext(arg0 context.Context, arg1 *transfer.ListAccessesInput, arg2 func(*transfer.ListAccessesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessesPagesWithContext indicates an expected call of ListAccessesPagesWithContext.
func (mr *MockTransferAPIMockRecorder) ListAccessesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessesPagesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListAccessesPagesWithContext), varargs...)
}

// ListAccessesRequest mocks base method.
func (m *MockTransferAPI) ListAccessesRequest(arg0 *transfer.ListAccessesInput) (*request.Request, *transfer.ListAccessesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ListAccessesOutput)
	return ret0, ret1
}

// ListAccessesRequest indicates an expected call of ListAccessesRequest.
func (mr *MockTransferAPIMockRecorder) ListAccessesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessesRequest", reflect.TypeOf((*MockTransferAPI)(nil).ListAccessesRequest), arg0)
}

// ListAccessesWithContext mocks base method.
func (m *MockTransferAPI) ListAccessesWithContext(arg0 context.Context, arg1 *transfer.ListAccessesInput, arg2 ...request.Option) (*transfer.ListAccessesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessesWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ListAccessesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessesWithContext indicates an expected call of ListAccessesWithContext.
func (mr *MockTransferAPIMockRecorder) ListAccessesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListAccessesWithContext), varargs...)
}

// ListExecutions mocks base method.
func (m *MockTransferAPI) ListExecutions(arg0 *transfer.ListExecutionsInput) (*transfer.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutions", arg0)
	ret0, _ := ret[0].(*transfer.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutions indicates an expected call of ListExecutions.
func (mr *MockTransferAPIMockRecorder) ListExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutions", reflect.TypeOf((*MockTransferAPI)(nil).ListExecutions), arg0)
}

// ListExecutionsPages mocks base method.
func (m *MockTransferAPI) ListExecutionsPages(arg0 *transfer.ListExecutionsInput, arg1 func(*transfer.ListExecutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPages indicates an expected call of ListExecutionsPages.
func (mr *MockTransferAPIMockRecorder) ListExecutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPages", reflect.TypeOf((*MockTransferAPI)(nil).ListExecutionsPages), arg0, arg1)
}

// ListExecutionsPagesWithContext mocks base method.
func (m *MockTransferAPI) ListExecutionsPagesWithContext(arg0 context.Context, arg1 *transfer.ListExecutionsInput, arg2 func(*transfer.ListExecutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPagesWithContext indicates an expected call of ListExecutionsPagesWithContext.
func (mr *MockTransferAPIMockRecorder) ListExecutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPagesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListExecutionsPagesWithContext), varargs...)
}

// ListExecutionsRequest mocks base method.
func (m *MockTransferAPI) ListExecutionsRequest(arg0 *transfer.ListExecutionsInput) (*request.Request, *transfer.ListExecutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ListExecutionsOutput)
	return ret0, ret1
}

// ListExecutionsRequest indicates an expected call of ListExecutionsRequest.
func (mr *MockTransferAPIMockRecorder) ListExecutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsRequest", reflect.TypeOf((*MockTransferAPI)(nil).ListExecutionsRequest), arg0)
}

// ListExecutionsWithContext mocks base method.
func (m *MockTransferAPI) ListExecutionsWithContext(arg0 context.Context, arg1 *transfer.ListExecutionsInput, arg2 ...request.Option) (*transfer.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutionsWithContext indicates an expected call of ListExecutionsWithContext.
func (mr *MockTransferAPIMockRecorder) ListExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListExecutionsWithContext), varargs...)
}

// ListSecurityPolicies mocks base method.
func (m *MockTransferAPI) ListSecurityPolicies(arg0 *transfer.ListSecurityPoliciesInput) (*transfer.ListSecurityPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityPolicies", arg0)
	ret0, _ := ret[0].(*transfer.ListSecurityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityPolicies indicates an expected call of ListSecurityPolicies.
func (mr *MockTransferAPIMockRecorder) ListSecurityPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPolicies", reflect.TypeOf((*MockTransferAPI)(nil).ListSecurityPolicies), arg0)
}

// ListSecurityPoliciesPages mocks base method.
func (m *MockTransferAPI) ListSecurityPoliciesPages(arg0 *transfer.ListSecurityPoliciesInput, arg1 func(*transfer.ListSecurityPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityPoliciesPages indicates an expected call of ListSecurityPoliciesPages.
func (mr *MockTransferAPIMockRecorder) ListSecurityPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesPages", reflect.TypeOf((*MockTransferAPI)(nil).ListSecurityPoliciesPages), arg0, arg1)
}

// ListSecurityPoliciesPagesWithContext mocks base method.
func (m *MockTransferAPI) ListSecurityPoliciesPagesWithContext(arg0 context.Context, arg1 *transfer.ListSecurityPoliciesInput, arg2 func(*transfer.ListSecurityPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSecurityPoliciesPagesWithContext indicates an expected call of ListSecurityPoliciesPagesWithContext.
func (mr *MockTransferAPIMockRecorder) ListSecurityPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesPagesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListSecurityPoliciesPagesWithContext), varargs...)
}

// ListSecurityPoliciesRequest mocks base method.
func (m *MockTransferAPI) ListSecurityPoliciesRequest(arg0 *transfer.ListSecurityPoliciesInput) (*request.Request, *transfer.ListSecurityPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ListSecurityPoliciesOutput)
	return ret0, ret1
}

// ListSecurityPoliciesRequest indicates an expected call of ListSecurityPoliciesRequest.
func (mr *MockTransferAPIMockRecorder) ListSecurityPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesRequest", reflect.TypeOf((*MockTransferAPI)(nil).ListSecurityPoliciesRequest), arg0)
}

// ListSecurityPoliciesWithContext mocks base method.
func (m *MockTransferAPI) ListSecurityPoliciesWithContext(arg0 context.Context, arg1 *transfer.ListSecurityPoliciesInput, arg2 ...request.Option) (*transfer.ListSecurityPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ListSecurityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityPoliciesWithContext indicates an expected call of ListSecurityPoliciesWithContext.
func (mr *MockTransferAPIMockRecorder) ListSecurityPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityPoliciesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListSecurityPoliciesWithContext), varargs...)
}

// ListServers mocks base method.
func (m *MockTransferAPI) ListServers(arg0 *transfer.ListServersInput) (*transfer.ListServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", arg0)
	ret0, _ := ret[0].(*transfer.ListServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockTransferAPIMockRecorder) ListServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockTransferAPI)(nil).ListServers), arg0)
}

// ListServersPages mocks base method.
func (m *MockTransferAPI) ListServersPages(arg0 *transfer.ListServersInput, arg1 func(*transfer.ListServersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServersPages indicates an expected call of ListServersPages.
func (mr *MockTransferAPIMockRecorder) ListServersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServersPages", reflect.TypeOf((*MockTransferAPI)(nil).ListServersPages), arg0, arg1)
}

// ListServersPagesWithContext mocks base method.
func (m *MockTransferAPI) ListServersPagesWithContext(arg0 context.Context, arg1 *transfer.ListServersInput, arg2 func(*transfer.ListServersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServersPagesWithContext indicates an expected call of ListServersPagesWithContext.
func (mr *MockTransferAPIMockRecorder) ListServersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServersPagesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListServersPagesWithContext), varargs...)
}

// ListServersRequest mocks base method.
func (m *MockTransferAPI) ListServersRequest(arg0 *transfer.ListServersInput) (*request.Request, *transfer.ListServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ListServersOutput)
	return ret0, ret1
}

// ListServersRequest indicates an expected call of ListServersRequest.
func (mr *MockTransferAPIMockRecorder) ListServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServersRequest", reflect.TypeOf((*MockTransferAPI)(nil).ListServersRequest), arg0)
}

// ListServersWithContext mocks base method.
func (m *MockTransferAPI) ListServersWithContext(arg0 context.Context, arg1 *transfer.ListServersInput, arg2 ...request.Option) (*transfer.ListServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServersWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ListServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServersWithContext indicates an expected call of ListServersWithContext.
func (mr *MockTransferAPIMockRecorder) ListServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServersWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListServersWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockTransferAPI) ListTagsForResource(arg0 *transfer.ListTagsForResourceInput) (*transfer.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*transfer.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockTransferAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockTransferAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method.
func (m *MockTransferAPI) ListTagsForResourcePages(arg0 *transfer.ListTagsForResourceInput, arg1 func(*transfer.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages.
func (mr *MockTransferAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockTransferAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method.
func (m *MockTransferAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *transfer.ListTagsForResourceInput, arg2 func(*transfer.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext.
func (mr *MockTransferAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockTransferAPI) ListTagsForResourceRequest(arg0 *transfer.ListTagsForResourceInput) (*request.Request, *transfer.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockTransferAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockTransferAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockTransferAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *transfer.ListTagsForResourceInput, arg2 ...request.Option) (*transfer.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockTransferAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUsers mocks base method.
func (m *MockTransferAPI) ListUsers(arg0 *transfer.ListUsersInput) (*transfer.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*transfer.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockTransferAPIMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockTransferAPI)(nil).ListUsers), arg0)
}

// ListUsersPages mocks base method.
func (m *MockTransferAPI) ListUsersPages(arg0 *transfer.ListUsersInput, arg1 func(*transfer.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages.
func (mr *MockTransferAPIMockRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockTransferAPI)(nil).ListUsersPages), arg0, arg1)
}

// ListUsersPagesWithContext mocks base method.
func (m *MockTransferAPI) ListUsersPagesWithContext(arg0 context.Context, arg1 *transfer.ListUsersInput, arg2 func(*transfer.ListUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPagesWithContext indicates an expected call of ListUsersPagesWithContext.
func (mr *MockTransferAPIMockRecorder) ListUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPagesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListUsersPagesWithContext), varargs...)
}

// ListUsersRequest mocks base method.
func (m *MockTransferAPI) ListUsersRequest(arg0 *transfer.ListUsersInput) (*request.Request, *transfer.ListUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ListUsersOutput)
	return ret0, ret1
}

// ListUsersRequest indicates an expected call of ListUsersRequest.
func (mr *MockTransferAPIMockRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersRequest", reflect.TypeOf((*MockTransferAPI)(nil).ListUsersRequest), arg0)
}

// ListUsersWithContext mocks base method.
func (m *MockTransferAPI) ListUsersWithContext(arg0 context.Context, arg1 *transfer.ListUsersInput, arg2 ...request.Option) (*transfer.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithContext indicates an expected call of ListUsersWithContext.
func (mr *MockTransferAPIMockRecorder) ListUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListUsersWithContext), varargs...)
}

// ListWorkflows mocks base method.
func (m *MockTransferAPI) ListWorkflows(arg0 *transfer.ListWorkflowsInput) (*transfer.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", arg0)
	ret0, _ := ret[0].(*transfer.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockTransferAPIMockRecorder) ListWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockTransferAPI)(nil).ListWorkflows), arg0)
}

// ListWorkflowsPages mocks base method.
func (m *MockTransferAPI) ListWorkflowsPages(arg0 *transfer.ListWorkflowsInput, arg1 func(*transfer.ListWorkflowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPages indicates an expected call of ListWorkflowsPages.
func (mr *MockTransferAPIMockRecorder) ListWorkflowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPages", reflect.TypeOf((*MockTransferAPI)(nil).ListWorkflowsPages), arg0, arg1)
}

// ListWorkflowsPagesWithContext mocks base method.
func (m *MockTransferAPI) ListWorkflowsPagesWithContext(arg0 context.Context, arg1 *transfer.ListWorkflowsInput, arg2 func(*transfer.ListWorkflowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPagesWithContext indicates an expected call of ListWorkflowsPagesWithContext.
func (mr *MockTransferAPIMockRecorder) ListWorkflowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPagesWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListWorkflowsPagesWithContext), varargs...)
}

// ListWorkflowsRequest mocks base method.
func (m *MockTransferAPI) ListWorkflowsRequest(arg0 *transfer.ListWorkflowsInput) (*request.Request, *transfer.ListWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.ListWorkflowsOutput)
	return ret0, ret1
}

// ListWorkflowsRequest indicates an expected call of ListWorkflowsRequest.
func (mr *MockTransferAPIMockRecorder) ListWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsRequest", reflect.TypeOf((*MockTransferAPI)(nil).ListWorkflowsRequest), arg0)
}

// ListWorkflowsWithContext mocks base method.
func (m *MockTransferAPI) ListWorkflowsWithContext(arg0 context.Context, arg1 *transfer.ListWorkflowsInput, arg2 ...request.Option) (*transfer.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowsWithContext indicates an expected call of ListWorkflowsWithContext.
func (mr *MockTransferAPIMockRecorder) ListWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsWithContext", reflect.TypeOf((*MockTransferAPI)(nil).ListWorkflowsWithContext), varargs...)
}

// SendWorkflowStepState mocks base method.
func (m *MockTransferAPI) SendWorkflowStepState(arg0 *transfer.SendWorkflowStepStateInput) (*transfer.SendWorkflowStepStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWorkflowStepState", arg0)
	ret0, _ := ret[0].(*transfer.SendWorkflowStepStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWorkflowStepState indicates an expected call of SendWorkflowStepState.
func (mr *MockTransferAPIMockRecorder) SendWorkflowStepState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkflowStepState", reflect.TypeOf((*MockTransferAPI)(nil).SendWorkflowStepState), arg0)
}

// SendWorkflowStepStateRequest mocks base method.
func (m *MockTransferAPI) SendWorkflowStepStateRequest(arg0 *transfer.SendWorkflowStepStateInput) (*request.Request, *transfer.SendWorkflowStepStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWorkflowStepStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.SendWorkflowStepStateOutput)
	return ret0, ret1
}

// SendWorkflowStepStateRequest indicates an expected call of SendWorkflowStepStateRequest.
func (mr *MockTransferAPIMockRecorder) SendWorkflowStepStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkflowStepStateRequest", reflect.TypeOf((*MockTransferAPI)(nil).SendWorkflowStepStateRequest), arg0)
}

// SendWorkflowStepStateWithContext mocks base method.
func (m *MockTransferAPI) SendWorkflowStepStateWithContext(arg0 context.Context, arg1 *transfer.SendWorkflowStepStateInput, arg2 ...request.Option) (*transfer.SendWorkflowStepStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendWorkflowStepStateWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.SendWorkflowStepStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWorkflowStepStateWithContext indicates an expected call of SendWorkflowStepStateWithContext.
func (mr *MockTransferAPIMockRecorder) SendWorkflowStepStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkflowStepStateWithContext", reflect.TypeOf((*MockTransferAPI)(nil).SendWorkflowStepStateWithContext), varargs...)
}

// StartServer mocks base method.
func (m *MockTransferAPI) StartServer(arg0 *transfer.StartServerInput) (*transfer.StartServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer", arg0)
	ret0, _ := ret[0].(*transfer.StartServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartServer indicates an expected call of StartServer.
func (mr *MockTransferAPIMockRecorder) StartServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockTransferAPI)(nil).StartServer), arg0)
}

// StartServerRequest mocks base method.
func (m *MockTransferAPI) StartServerRequest(arg0 *transfer.StartServerInput) (*request.Request, *transfer.StartServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.StartServerOutput)
	return ret0, ret1
}

// StartServerRequest indicates an expected call of StartServerRequest.
func (mr *MockTransferAPIMockRecorder) StartServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServerRequest", reflect.TypeOf((*MockTransferAPI)(nil).StartServerRequest), arg0)
}

// StartServerWithContext mocks base method.
func (m *MockTransferAPI) StartServerWithContext(arg0 context.Context, arg1 *transfer.StartServerInput, arg2 ...request.Option) (*transfer.StartServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartServerWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.StartServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartServerWithContext indicates an expected call of StartServerWithContext.
func (mr *MockTransferAPIMockRecorder) StartServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServerWithContext", reflect.TypeOf((*MockTransferAPI)(nil).StartServerWithContext), varargs...)
}

// StopServer mocks base method.
func (m *MockTransferAPI) StopServer(arg0 *transfer.StopServerInput) (*transfer.StopServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServer", arg0)
	ret0, _ := ret[0].(*transfer.StopServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopServer indicates an expected call of StopServer.
func (mr *MockTransferAPIMockRecorder) StopServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServer", reflect.TypeOf((*MockTransferAPI)(nil).StopServer), arg0)
}

// StopServerRequest mocks base method.
func (m *MockTransferAPI) StopServerRequest(arg0 *transfer.StopServerInput) (*request.Request, *transfer.StopServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.StopServerOutput)
	return ret0, ret1
}

// StopServerRequest indicates an expected call of StopServerRequest.
func (mr *MockTransferAPIMockRecorder) StopServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServerRequest", reflect.TypeOf((*MockTransferAPI)(nil).StopServerRequest), arg0)
}

// StopServerWithContext mocks base method.
func (m *MockTransferAPI) StopServerWithContext(arg0 context.Context, arg1 *transfer.StopServerInput, arg2 ...request.Option) (*transfer.StopServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopServerWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.StopServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopServerWithContext indicates an expected call of StopServerWithContext.
func (mr *MockTransferAPIMockRecorder) StopServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServerWithContext", reflect.TypeOf((*MockTransferAPI)(nil).StopServerWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockTransferAPI) TagResource(arg0 *transfer.TagResourceInput) (*transfer.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*transfer.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockTransferAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockTransferAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockTransferAPI) TagResourceRequest(arg0 *transfer.TagResourceInput) (*request.Request, *transfer.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockTransferAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockTransferAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockTransferAPI) TagResourceWithContext(arg0 context.Context, arg1 *transfer.TagResourceInput, arg2 ...request.Option) (*transfer.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockTransferAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockTransferAPI)(nil).TagResourceWithContext), varargs...)
}

// TestIdentityProvider mocks base method.
func (m *MockTransferAPI) TestIdentityProvider(arg0 *transfer.TestIdentityProviderInput) (*transfer.TestIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestIdentityProvider", arg0)
	ret0, _ := ret[0].(*transfer.TestIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestIdentityProvider indicates an expected call of TestIdentityProvider.
func (mr *MockTransferAPIMockRecorder) TestIdentityProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestIdentityProvider", reflect.TypeOf((*MockTransferAPI)(nil).TestIdentityProvider), arg0)
}

// TestIdentityProviderRequest mocks base method.
func (m *MockTransferAPI) TestIdentityProviderRequest(arg0 *transfer.TestIdentityProviderInput) (*request.Request, *transfer.TestIdentityProviderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestIdentityProviderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.TestIdentityProviderOutput)
	return ret0, ret1
}

// TestIdentityProviderRequest indicates an expected call of TestIdentityProviderRequest.
func (mr *MockTransferAPIMockRecorder) TestIdentityProviderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestIdentityProviderRequest", reflect.TypeOf((*MockTransferAPI)(nil).TestIdentityProviderRequest), arg0)
}

// TestIdentityProviderWithContext mocks base method.
func (m *MockTransferAPI) TestIdentityProviderWithContext(arg0 context.Context, arg1 *transfer.TestIdentityProviderInput, arg2 ...request.Option) (*transfer.TestIdentityProviderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestIdentityProviderWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.TestIdentityProviderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestIdentityProviderWithContext indicates an expected call of TestIdentityProviderWithContext.
func (mr *MockTransferAPIMockRecorder) TestIdentityProviderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestIdentityProviderWithContext", reflect.TypeOf((*MockTransferAPI)(nil).TestIdentityProviderWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockTransferAPI) UntagResource(arg0 *transfer.UntagResourceInput) (*transfer.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*transfer.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockTransferAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockTransferAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockTransferAPI) UntagResourceRequest(arg0 *transfer.UntagResourceInput) (*request.Request, *transfer.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockTransferAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockTransferAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockTransferAPI) UntagResourceWithContext(arg0 context.Context, arg1 *transfer.UntagResourceInput, arg2 ...request.Option) (*transfer.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockTransferAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockTransferAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccess mocks base method.
func (m *MockTransferAPI) UpdateAccess(arg0 *transfer.UpdateAccessInput) (*transfer.UpdateAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccess", arg0)
	ret0, _ := ret[0].(*transfer.UpdateAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccess indicates an expected call of UpdateAccess.
func (mr *MockTransferAPIMockRecorder) UpdateAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccess", reflect.TypeOf((*MockTransferAPI)(nil).UpdateAccess), arg0)
}

// UpdateAccessRequest mocks base method.
func (m *MockTransferAPI) UpdateAccessRequest(arg0 *transfer.UpdateAccessInput) (*request.Request, *transfer.UpdateAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.UpdateAccessOutput)
	return ret0, ret1
}

// UpdateAccessRequest indicates an expected call of UpdateAccessRequest.
func (mr *MockTransferAPIMockRecorder) UpdateAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessRequest", reflect.TypeOf((*MockTransferAPI)(nil).UpdateAccessRequest), arg0)
}

// UpdateAccessWithContext mocks base method.
func (m *MockTransferAPI) UpdateAccessWithContext(arg0 context.Context, arg1 *transfer.UpdateAccessInput, arg2 ...request.Option) (*transfer.UpdateAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.UpdateAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessWithContext indicates an expected call of UpdateAccessWithContext.
func (mr *MockTransferAPIMockRecorder) UpdateAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessWithContext", reflect.TypeOf((*MockTransferAPI)(nil).UpdateAccessWithContext), varargs...)
}

// UpdateServer mocks base method.
func (m *MockTransferAPI) UpdateServer(arg0 *transfer.UpdateServerInput) (*transfer.UpdateServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", arg0)
	ret0, _ := ret[0].(*transfer.UpdateServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockTransferAPIMockRecorder) UpdateServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockTransferAPI)(nil).UpdateServer), arg0)
}

// UpdateServerRequest mocks base method.
func (m *MockTransferAPI) UpdateServerRequest(arg0 *transfer.UpdateServerInput) (*request.Request, *transfer.UpdateServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.UpdateServerOutput)
	return ret0, ret1
}

// UpdateServerRequest indicates an expected call of UpdateServerRequest.
func (mr *MockTransferAPIMockRecorder) UpdateServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServerRequest", reflect.TypeOf((*MockTransferAPI)(nil).UpdateServerRequest), arg0)
}

// UpdateServerWithContext mocks base method.
func (m *MockTransferAPI) UpdateServerWithContext(arg0 context.Context, arg1 *transfer.UpdateServerInput, arg2 ...request.Option) (*transfer.UpdateServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServerWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.UpdateServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServerWithContext indicates an expected call of UpdateServerWithContext.
func (mr *MockTransferAPIMockRecorder) UpdateServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServerWithContext", reflect.TypeOf((*MockTransferAPI)(nil).UpdateServerWithContext), varargs...)
}

// UpdateUser mocks base method.
func (m *MockTransferAPI) UpdateUser(arg0 *transfer.UpdateUserInput) (*transfer.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*transfer.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransferAPIMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransferAPI)(nil).UpdateUser), arg0)
}

// UpdateUserRequest mocks base method.
func (m *MockTransferAPI) UpdateUserRequest(arg0 *transfer.UpdateUserInput) (*request.Request, *transfer.UpdateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*transfer.UpdateUserOutput)
	return ret0, ret1
}

// UpdateUserRequest indicates an expected call of UpdateUserRequest.
func (mr *MockTransferAPIMockRecorder) UpdateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRequest", reflect.TypeOf((*MockTransferAPI)(nil).UpdateUserRequest), arg0)
}

// UpdateUserWithContext mocks base method.
func (m *MockTransferAPI) UpdateUserWithContext(arg0 context.Context, arg1 *transfer.UpdateUserInput, arg2 ...request.Option) (*transfer.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserWithContext", varargs...)
	ret0, _ := ret[0].(*transfer.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWithContext indicates an expected call of UpdateUserWithContext.
func (mr *MockTransferAPIMockRecorder) UpdateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWithContext", reflect.TypeOf((*MockTransferAPI)(nil).UpdateUserWithContext), varargs...)
}

// WaitUntilServerOffline mocks base method.
func (m *MockTransferAPI) WaitUntilServerOffline(arg0 *transfer.DescribeServerInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServerOffline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServerOffline indicates an expected call of WaitUntilServerOffline.
func (mr *MockTransferAPIMockRecorder) WaitUntilServerOffline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServerOffline", reflect.TypeOf((*MockTransferAPI)(nil).WaitUntilServerOffline), arg0)
}

// WaitUntilServerOfflineWithContext mocks base method.
func (m *MockTransferAPI) WaitUntilServerOfflineWithContext(arg0 context.Context, arg1 *transfer.DescribeServerInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServerOfflineWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServerOfflineWithContext indicates an expected call of WaitUntilServerOfflineWithContext.
func (mr *MockTransferAPIMockRecorder) WaitUntilServerOfflineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServerOfflineWithContext", reflect.TypeOf((*MockTransferAPI)(nil).WaitUntilServerOfflineWithContext), varargs...)
}

// WaitUntilServerOnline mocks base method.
func (m *MockTransferAPI) WaitUntilServerOnline(arg0 *transfer.DescribeServerInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilServerOnline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServerOnline indicates an expected call of WaitUntilServerOnline.
func (mr *MockTransferAPIMockRecorder) WaitUntilServerOnline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServerOnline", reflect.TypeOf((*MockTransferAPI)(nil).WaitUntilServerOnline), arg0)
}

// WaitUntilServerOnlineWithContext mocks base method.
func (m *MockTransferAPI) WaitUntilServerOnlineWithContext(arg0 context.Context, arg1 *transfer.DescribeServerInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilServerOnlineWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilServerOnlineWithContext indicates an expected call of WaitUntilServerOnlineWithContext.
func (mr *MockTransferAPIMockRecorder) WaitUntilServerOnlineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilServerOnlineWithContext", reflect.TypeOf((*MockTransferAPI)(nil).WaitUntilServerOnlineWithContext), varargs...)
}

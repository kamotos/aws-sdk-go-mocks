// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mediapackage/mediapackageiface (interfaces: MediaPackageAPI)

// Package mediapackagemock is a generated GoMock package.
package mediapackagemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	mediapackage "github.com/aws/aws-sdk-go/service/mediapackage"
	gomock "github.com/golang/mock/gomock"
)

// MockMediaPackageAPI is a mock of MediaPackageAPI interface.
type MockMediaPackageAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMediaPackageAPIMockRecorder
}

// MockMediaPackageAPIMockRecorder is the mock recorder for MockMediaPackageAPI.
type MockMediaPackageAPIMockRecorder struct {
	mock *MockMediaPackageAPI
}

// NewMockMediaPackageAPI creates a new mock instance.
func NewMockMediaPackageAPI(ctrl *gomock.Controller) *MockMediaPackageAPI {
	mock := &MockMediaPackageAPI{ctrl: ctrl}
	mock.recorder = &MockMediaPackageAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaPackageAPI) EXPECT() *MockMediaPackageAPIMockRecorder {
	return m.recorder
}

// ConfigureLogs mocks base method.
func (m *MockMediaPackageAPI) ConfigureLogs(arg0 *mediapackage.ConfigureLogsInput) (*mediapackage.ConfigureLogsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureLogs", arg0)
	ret0, _ := ret[0].(*mediapackage.ConfigureLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLogs indicates an expected call of ConfigureLogs.
func (mr *MockMediaPackageAPIMockRecorder) ConfigureLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLogs", reflect.TypeOf((*MockMediaPackageAPI)(nil).ConfigureLogs), arg0)
}

// ConfigureLogsRequest mocks base method.
func (m *MockMediaPackageAPI) ConfigureLogsRequest(arg0 *mediapackage.ConfigureLogsInput) (*request.Request, *mediapackage.ConfigureLogsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureLogsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.ConfigureLogsOutput)
	return ret0, ret1
}

// ConfigureLogsRequest indicates an expected call of ConfigureLogsRequest.
func (mr *MockMediaPackageAPIMockRecorder) ConfigureLogsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLogsRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).ConfigureLogsRequest), arg0)
}

// ConfigureLogsWithContext mocks base method.
func (m *MockMediaPackageAPI) ConfigureLogsWithContext(arg0 context.Context, arg1 *mediapackage.ConfigureLogsInput, arg2 ...request.Option) (*mediapackage.ConfigureLogsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureLogsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.ConfigureLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLogsWithContext indicates an expected call of ConfigureLogsWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ConfigureLogsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLogsWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ConfigureLogsWithContext), varargs...)
}

// CreateChannel mocks base method.
func (m *MockMediaPackageAPI) CreateChannel(arg0 *mediapackage.CreateChannelInput) (*mediapackage.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0)
	ret0, _ := ret[0].(*mediapackage.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockMediaPackageAPIMockRecorder) CreateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateChannel), arg0)
}

// CreateChannelRequest mocks base method.
func (m *MockMediaPackageAPI) CreateChannelRequest(arg0 *mediapackage.CreateChannelInput) (*request.Request, *mediapackage.CreateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.CreateChannelOutput)
	return ret0, ret1
}

// CreateChannelRequest indicates an expected call of CreateChannelRequest.
func (mr *MockMediaPackageAPIMockRecorder) CreateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateChannelRequest), arg0)
}

// CreateChannelWithContext mocks base method.
func (m *MockMediaPackageAPI) CreateChannelWithContext(arg0 context.Context, arg1 *mediapackage.CreateChannelInput, arg2 ...request.Option) (*mediapackage.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelWithContext indicates an expected call of CreateChannelWithContext.
func (mr *MockMediaPackageAPIMockRecorder) CreateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateChannelWithContext), varargs...)
}

// CreateHarvestJob mocks base method.
func (m *MockMediaPackageAPI) CreateHarvestJob(arg0 *mediapackage.CreateHarvestJobInput) (*mediapackage.CreateHarvestJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHarvestJob", arg0)
	ret0, _ := ret[0].(*mediapackage.CreateHarvestJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHarvestJob indicates an expected call of CreateHarvestJob.
func (mr *MockMediaPackageAPIMockRecorder) CreateHarvestJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHarvestJob", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateHarvestJob), arg0)
}

// CreateHarvestJobRequest mocks base method.
func (m *MockMediaPackageAPI) CreateHarvestJobRequest(arg0 *mediapackage.CreateHarvestJobInput) (*request.Request, *mediapackage.CreateHarvestJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHarvestJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.CreateHarvestJobOutput)
	return ret0, ret1
}

// CreateHarvestJobRequest indicates an expected call of CreateHarvestJobRequest.
func (mr *MockMediaPackageAPIMockRecorder) CreateHarvestJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHarvestJobRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateHarvestJobRequest), arg0)
}

// CreateHarvestJobWithContext mocks base method.
func (m *MockMediaPackageAPI) CreateHarvestJobWithContext(arg0 context.Context, arg1 *mediapackage.CreateHarvestJobInput, arg2 ...request.Option) (*mediapackage.CreateHarvestJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateHarvestJobWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.CreateHarvestJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHarvestJobWithContext indicates an expected call of CreateHarvestJobWithContext.
func (mr *MockMediaPackageAPIMockRecorder) CreateHarvestJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHarvestJobWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateHarvestJobWithContext), varargs...)
}

// CreateOriginEndpoint mocks base method.
func (m *MockMediaPackageAPI) CreateOriginEndpoint(arg0 *mediapackage.CreateOriginEndpointInput) (*mediapackage.CreateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackage.CreateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOriginEndpoint indicates an expected call of CreateOriginEndpoint.
func (mr *MockMediaPackageAPIMockRecorder) CreateOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginEndpoint", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateOriginEndpoint), arg0)
}

// CreateOriginEndpointRequest mocks base method.
func (m *MockMediaPackageAPI) CreateOriginEndpointRequest(arg0 *mediapackage.CreateOriginEndpointInput) (*request.Request, *mediapackage.CreateOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.CreateOriginEndpointOutput)
	return ret0, ret1
}

// CreateOriginEndpointRequest indicates an expected call of CreateOriginEndpointRequest.
func (mr *MockMediaPackageAPIMockRecorder) CreateOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateOriginEndpointRequest), arg0)
}

// CreateOriginEndpointWithContext mocks base method.
func (m *MockMediaPackageAPI) CreateOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackage.CreateOriginEndpointInput, arg2 ...request.Option) (*mediapackage.CreateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.CreateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOriginEndpointWithContext indicates an expected call of CreateOriginEndpointWithContext.
func (mr *MockMediaPackageAPIMockRecorder) CreateOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).CreateOriginEndpointWithContext), varargs...)
}

// DeleteChannel mocks base method.
func (m *MockMediaPackageAPI) DeleteChannel(arg0 *mediapackage.DeleteChannelInput) (*mediapackage.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(*mediapackage.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockMediaPackageAPIMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockMediaPackageAPI)(nil).DeleteChannel), arg0)
}

// DeleteChannelRequest mocks base method.
func (m *MockMediaPackageAPI) DeleteChannelRequest(arg0 *mediapackage.DeleteChannelInput) (*request.Request, *mediapackage.DeleteChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.DeleteChannelOutput)
	return ret0, ret1
}

// DeleteChannelRequest indicates an expected call of DeleteChannelRequest.
func (mr *MockMediaPackageAPIMockRecorder) DeleteChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).DeleteChannelRequest), arg0)
}

// DeleteChannelWithContext mocks base method.
func (m *MockMediaPackageAPI) DeleteChannelWithContext(arg0 context.Context, arg1 *mediapackage.DeleteChannelInput, arg2 ...request.Option) (*mediapackage.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannelWithContext indicates an expected call of DeleteChannelWithContext.
func (mr *MockMediaPackageAPIMockRecorder) DeleteChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).DeleteChannelWithContext), varargs...)
}

// DeleteOriginEndpoint mocks base method.
func (m *MockMediaPackageAPI) DeleteOriginEndpoint(arg0 *mediapackage.DeleteOriginEndpointInput) (*mediapackage.DeleteOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackage.DeleteOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginEndpoint indicates an expected call of DeleteOriginEndpoint.
func (mr *MockMediaPackageAPIMockRecorder) DeleteOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpoint", reflect.TypeOf((*MockMediaPackageAPI)(nil).DeleteOriginEndpoint), arg0)
}

// DeleteOriginEndpointRequest mocks base method.
func (m *MockMediaPackageAPI) DeleteOriginEndpointRequest(arg0 *mediapackage.DeleteOriginEndpointInput) (*request.Request, *mediapackage.DeleteOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.DeleteOriginEndpointOutput)
	return ret0, ret1
}

// DeleteOriginEndpointRequest indicates an expected call of DeleteOriginEndpointRequest.
func (mr *MockMediaPackageAPIMockRecorder) DeleteOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).DeleteOriginEndpointRequest), arg0)
}

// DeleteOriginEndpointWithContext mocks base method.
func (m *MockMediaPackageAPI) DeleteOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackage.DeleteOriginEndpointInput, arg2 ...request.Option) (*mediapackage.DeleteOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.DeleteOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginEndpointWithContext indicates an expected call of DeleteOriginEndpointWithContext.
func (mr *MockMediaPackageAPIMockRecorder) DeleteOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).DeleteOriginEndpointWithContext), varargs...)
}

// DescribeChannel mocks base method.
func (m *MockMediaPackageAPI) DescribeChannel(arg0 *mediapackage.DescribeChannelInput) (*mediapackage.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannel", arg0)
	ret0, _ := ret[0].(*mediapackage.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannel indicates an expected call of DescribeChannel.
func (mr *MockMediaPackageAPIMockRecorder) DescribeChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannel", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeChannel), arg0)
}

// DescribeChannelRequest mocks base method.
func (m *MockMediaPackageAPI) DescribeChannelRequest(arg0 *mediapackage.DescribeChannelInput) (*request.Request, *mediapackage.DescribeChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.DescribeChannelOutput)
	return ret0, ret1
}

// DescribeChannelRequest indicates an expected call of DescribeChannelRequest.
func (mr *MockMediaPackageAPIMockRecorder) DescribeChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeChannelRequest), arg0)
}

// DescribeChannelWithContext mocks base method.
func (m *MockMediaPackageAPI) DescribeChannelWithContext(arg0 context.Context, arg1 *mediapackage.DescribeChannelInput, arg2 ...request.Option) (*mediapackage.DescribeChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.DescribeChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeChannelWithContext indicates an expected call of DescribeChannelWithContext.
func (mr *MockMediaPackageAPIMockRecorder) DescribeChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeChannelWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeChannelWithContext), varargs...)
}

// DescribeHarvestJob mocks base method.
func (m *MockMediaPackageAPI) DescribeHarvestJob(arg0 *mediapackage.DescribeHarvestJobInput) (*mediapackage.DescribeHarvestJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeHarvestJob", arg0)
	ret0, _ := ret[0].(*mediapackage.DescribeHarvestJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHarvestJob indicates an expected call of DescribeHarvestJob.
func (mr *MockMediaPackageAPIMockRecorder) DescribeHarvestJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHarvestJob", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeHarvestJob), arg0)
}

// DescribeHarvestJobRequest mocks base method.
func (m *MockMediaPackageAPI) DescribeHarvestJobRequest(arg0 *mediapackage.DescribeHarvestJobInput) (*request.Request, *mediapackage.DescribeHarvestJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeHarvestJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.DescribeHarvestJobOutput)
	return ret0, ret1
}

// DescribeHarvestJobRequest indicates an expected call of DescribeHarvestJobRequest.
func (mr *MockMediaPackageAPIMockRecorder) DescribeHarvestJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHarvestJobRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeHarvestJobRequest), arg0)
}

// DescribeHarvestJobWithContext mocks base method.
func (m *MockMediaPackageAPI) DescribeHarvestJobWithContext(arg0 context.Context, arg1 *mediapackage.DescribeHarvestJobInput, arg2 ...request.Option) (*mediapackage.DescribeHarvestJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeHarvestJobWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.DescribeHarvestJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeHarvestJobWithContext indicates an expected call of DescribeHarvestJobWithContext.
func (mr *MockMediaPackageAPIMockRecorder) DescribeHarvestJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeHarvestJobWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeHarvestJobWithContext), varargs...)
}

// DescribeOriginEndpoint mocks base method.
func (m *MockMediaPackageAPI) DescribeOriginEndpoint(arg0 *mediapackage.DescribeOriginEndpointInput) (*mediapackage.DescribeOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackage.DescribeOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOriginEndpoint indicates an expected call of DescribeOriginEndpoint.
func (mr *MockMediaPackageAPIMockRecorder) DescribeOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOriginEndpoint", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeOriginEndpoint), arg0)
}

// DescribeOriginEndpointRequest mocks base method.
func (m *MockMediaPackageAPI) DescribeOriginEndpointRequest(arg0 *mediapackage.DescribeOriginEndpointInput) (*request.Request, *mediapackage.DescribeOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.DescribeOriginEndpointOutput)
	return ret0, ret1
}

// DescribeOriginEndpointRequest indicates an expected call of DescribeOriginEndpointRequest.
func (mr *MockMediaPackageAPIMockRecorder) DescribeOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeOriginEndpointRequest), arg0)
}

// DescribeOriginEndpointWithContext mocks base method.
func (m *MockMediaPackageAPI) DescribeOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackage.DescribeOriginEndpointInput, arg2 ...request.Option) (*mediapackage.DescribeOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.DescribeOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOriginEndpointWithContext indicates an expected call of DescribeOriginEndpointWithContext.
func (mr *MockMediaPackageAPIMockRecorder) DescribeOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).DescribeOriginEndpointWithContext), varargs...)
}

// ListChannels mocks base method.
func (m *MockMediaPackageAPI) ListChannels(arg0 *mediapackage.ListChannelsInput) (*mediapackage.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannels", arg0)
	ret0, _ := ret[0].(*mediapackage.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannels indicates an expected call of ListChannels.
func (mr *MockMediaPackageAPIMockRecorder) ListChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannels", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListChannels), arg0)
}

// ListChannelsPages mocks base method.
func (m *MockMediaPackageAPI) ListChannelsPages(arg0 *mediapackage.ListChannelsInput, arg1 func(*mediapackage.ListChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPages indicates an expected call of ListChannelsPages.
func (mr *MockMediaPackageAPIMockRecorder) ListChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPages", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListChannelsPages), arg0, arg1)
}

// ListChannelsPagesWithContext mocks base method.
func (m *MockMediaPackageAPI) ListChannelsPagesWithContext(arg0 context.Context, arg1 *mediapackage.ListChannelsInput, arg2 func(*mediapackage.ListChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChannelsPagesWithContext indicates an expected call of ListChannelsPagesWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ListChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsPagesWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListChannelsPagesWithContext), varargs...)
}

// ListChannelsRequest mocks base method.
func (m *MockMediaPackageAPI) ListChannelsRequest(arg0 *mediapackage.ListChannelsInput) (*request.Request, *mediapackage.ListChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.ListChannelsOutput)
	return ret0, ret1
}

// ListChannelsRequest indicates an expected call of ListChannelsRequest.
func (mr *MockMediaPackageAPIMockRecorder) ListChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListChannelsRequest), arg0)
}

// ListChannelsWithContext mocks base method.
func (m *MockMediaPackageAPI) ListChannelsWithContext(arg0 context.Context, arg1 *mediapackage.ListChannelsInput, arg2 ...request.Option) (*mediapackage.ListChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.ListChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsWithContext indicates an expected call of ListChannelsWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ListChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListChannelsWithContext), varargs...)
}

// ListHarvestJobs mocks base method.
func (m *MockMediaPackageAPI) ListHarvestJobs(arg0 *mediapackage.ListHarvestJobsInput) (*mediapackage.ListHarvestJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHarvestJobs", arg0)
	ret0, _ := ret[0].(*mediapackage.ListHarvestJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHarvestJobs indicates an expected call of ListHarvestJobs.
func (mr *MockMediaPackageAPIMockRecorder) ListHarvestJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHarvestJobs", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListHarvestJobs), arg0)
}

// ListHarvestJobsPages mocks base method.
func (m *MockMediaPackageAPI) ListHarvestJobsPages(arg0 *mediapackage.ListHarvestJobsInput, arg1 func(*mediapackage.ListHarvestJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHarvestJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHarvestJobsPages indicates an expected call of ListHarvestJobsPages.
func (mr *MockMediaPackageAPIMockRecorder) ListHarvestJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHarvestJobsPages", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListHarvestJobsPages), arg0, arg1)
}

// ListHarvestJobsPagesWithContext mocks base method.
func (m *MockMediaPackageAPI) ListHarvestJobsPagesWithContext(arg0 context.Context, arg1 *mediapackage.ListHarvestJobsInput, arg2 func(*mediapackage.ListHarvestJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHarvestJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListHarvestJobsPagesWithContext indicates an expected call of ListHarvestJobsPagesWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ListHarvestJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHarvestJobsPagesWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListHarvestJobsPagesWithContext), varargs...)
}

// ListHarvestJobsRequest mocks base method.
func (m *MockMediaPackageAPI) ListHarvestJobsRequest(arg0 *mediapackage.ListHarvestJobsInput) (*request.Request, *mediapackage.ListHarvestJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHarvestJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.ListHarvestJobsOutput)
	return ret0, ret1
}

// ListHarvestJobsRequest indicates an expected call of ListHarvestJobsRequest.
func (mr *MockMediaPackageAPIMockRecorder) ListHarvestJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHarvestJobsRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListHarvestJobsRequest), arg0)
}

// ListHarvestJobsWithContext mocks base method.
func (m *MockMediaPackageAPI) ListHarvestJobsWithContext(arg0 context.Context, arg1 *mediapackage.ListHarvestJobsInput, arg2 ...request.Option) (*mediapackage.ListHarvestJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHarvestJobsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.ListHarvestJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHarvestJobsWithContext indicates an expected call of ListHarvestJobsWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ListHarvestJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHarvestJobsWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListHarvestJobsWithContext), varargs...)
}

// ListOriginEndpoints mocks base method.
func (m *MockMediaPackageAPI) ListOriginEndpoints(arg0 *mediapackage.ListOriginEndpointsInput) (*mediapackage.ListOriginEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginEndpoints", arg0)
	ret0, _ := ret[0].(*mediapackage.ListOriginEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginEndpoints indicates an expected call of ListOriginEndpoints.
func (mr *MockMediaPackageAPIMockRecorder) ListOriginEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpoints", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListOriginEndpoints), arg0)
}

// ListOriginEndpointsPages mocks base method.
func (m *MockMediaPackageAPI) ListOriginEndpointsPages(arg0 *mediapackage.ListOriginEndpointsInput, arg1 func(*mediapackage.ListOriginEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOriginEndpointsPages indicates an expected call of ListOriginEndpointsPages.
func (mr *MockMediaPackageAPIMockRecorder) ListOriginEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsPages", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListOriginEndpointsPages), arg0, arg1)
}

// ListOriginEndpointsPagesWithContext mocks base method.
func (m *MockMediaPackageAPI) ListOriginEndpointsPagesWithContext(arg0 context.Context, arg1 *mediapackage.ListOriginEndpointsInput, arg2 func(*mediapackage.ListOriginEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOriginEndpointsPagesWithContext indicates an expected call of ListOriginEndpointsPagesWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ListOriginEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsPagesWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListOriginEndpointsPagesWithContext), varargs...)
}

// ListOriginEndpointsRequest mocks base method.
func (m *MockMediaPackageAPI) ListOriginEndpointsRequest(arg0 *mediapackage.ListOriginEndpointsInput) (*request.Request, *mediapackage.ListOriginEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.ListOriginEndpointsOutput)
	return ret0, ret1
}

// ListOriginEndpointsRequest indicates an expected call of ListOriginEndpointsRequest.
func (mr *MockMediaPackageAPIMockRecorder) ListOriginEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListOriginEndpointsRequest), arg0)
}

// ListOriginEndpointsWithContext mocks base method.
func (m *MockMediaPackageAPI) ListOriginEndpointsWithContext(arg0 context.Context, arg1 *mediapackage.ListOriginEndpointsInput, arg2 ...request.Option) (*mediapackage.ListOriginEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.ListOriginEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginEndpointsWithContext indicates an expected call of ListOriginEndpointsWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ListOriginEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginEndpointsWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListOriginEndpointsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockMediaPackageAPI) ListTagsForResource(arg0 *mediapackage.ListTagsForResourceInput) (*mediapackage.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mediapackage.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockMediaPackageAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockMediaPackageAPI) ListTagsForResourceRequest(arg0 *mediapackage.ListTagsForResourceInput) (*request.Request, *mediapackage.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockMediaPackageAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockMediaPackageAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mediapackage.ListTagsForResourceInput, arg2 ...request.Option) (*mediapackage.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockMediaPackageAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RotateChannelCredentials mocks base method.
func (m *MockMediaPackageAPI) RotateChannelCredentials(arg0 *mediapackage.RotateChannelCredentialsInput) (*mediapackage.RotateChannelCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateChannelCredentials", arg0)
	ret0, _ := ret[0].(*mediapackage.RotateChannelCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateChannelCredentials indicates an expected call of RotateChannelCredentials.
func (mr *MockMediaPackageAPIMockRecorder) RotateChannelCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateChannelCredentials", reflect.TypeOf((*MockMediaPackageAPI)(nil).RotateChannelCredentials), arg0)
}

// RotateChannelCredentialsRequest mocks base method.
func (m *MockMediaPackageAPI) RotateChannelCredentialsRequest(arg0 *mediapackage.RotateChannelCredentialsInput) (*request.Request, *mediapackage.RotateChannelCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateChannelCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.RotateChannelCredentialsOutput)
	return ret0, ret1
}

// RotateChannelCredentialsRequest indicates an expected call of RotateChannelCredentialsRequest.
func (mr *MockMediaPackageAPIMockRecorder) RotateChannelCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateChannelCredentialsRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).RotateChannelCredentialsRequest), arg0)
}

// RotateChannelCredentialsWithContext mocks base method.
func (m *MockMediaPackageAPI) RotateChannelCredentialsWithContext(arg0 context.Context, arg1 *mediapackage.RotateChannelCredentialsInput, arg2 ...request.Option) (*mediapackage.RotateChannelCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateChannelCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.RotateChannelCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateChannelCredentialsWithContext indicates an expected call of RotateChannelCredentialsWithContext.
func (mr *MockMediaPackageAPIMockRecorder) RotateChannelCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateChannelCredentialsWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).RotateChannelCredentialsWithContext), varargs...)
}

// RotateIngestEndpointCredentials mocks base method.
func (m *MockMediaPackageAPI) RotateIngestEndpointCredentials(arg0 *mediapackage.RotateIngestEndpointCredentialsInput) (*mediapackage.RotateIngestEndpointCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateIngestEndpointCredentials", arg0)
	ret0, _ := ret[0].(*mediapackage.RotateIngestEndpointCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateIngestEndpointCredentials indicates an expected call of RotateIngestEndpointCredentials.
func (mr *MockMediaPackageAPIMockRecorder) RotateIngestEndpointCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateIngestEndpointCredentials", reflect.TypeOf((*MockMediaPackageAPI)(nil).RotateIngestEndpointCredentials), arg0)
}

// RotateIngestEndpointCredentialsRequest mocks base method.
func (m *MockMediaPackageAPI) RotateIngestEndpointCredentialsRequest(arg0 *mediapackage.RotateIngestEndpointCredentialsInput) (*request.Request, *mediapackage.RotateIngestEndpointCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateIngestEndpointCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.RotateIngestEndpointCredentialsOutput)
	return ret0, ret1
}

// RotateIngestEndpointCredentialsRequest indicates an expected call of RotateIngestEndpointCredentialsRequest.
func (mr *MockMediaPackageAPIMockRecorder) RotateIngestEndpointCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateIngestEndpointCredentialsRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).RotateIngestEndpointCredentialsRequest), arg0)
}

// RotateIngestEndpointCredentialsWithContext mocks base method.
func (m *MockMediaPackageAPI) RotateIngestEndpointCredentialsWithContext(arg0 context.Context, arg1 *mediapackage.RotateIngestEndpointCredentialsInput, arg2 ...request.Option) (*mediapackage.RotateIngestEndpointCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateIngestEndpointCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.RotateIngestEndpointCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateIngestEndpointCredentialsWithContext indicates an expected call of RotateIngestEndpointCredentialsWithContext.
func (mr *MockMediaPackageAPIMockRecorder) RotateIngestEndpointCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateIngestEndpointCredentialsWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).RotateIngestEndpointCredentialsWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockMediaPackageAPI) TagResource(arg0 *mediapackage.TagResourceInput) (*mediapackage.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mediapackage.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockMediaPackageAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMediaPackageAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockMediaPackageAPI) TagResourceRequest(arg0 *mediapackage.TagResourceInput) (*request.Request, *mediapackage.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockMediaPackageAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockMediaPackageAPI) TagResourceWithContext(arg0 context.Context, arg1 *mediapackage.TagResourceInput, arg2 ...request.Option) (*mediapackage.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockMediaPackageAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockMediaPackageAPI) UntagResource(arg0 *mediapackage.UntagResourceInput) (*mediapackage.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mediapackage.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockMediaPackageAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMediaPackageAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockMediaPackageAPI) UntagResourceRequest(arg0 *mediapackage.UntagResourceInput) (*request.Request, *mediapackage.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockMediaPackageAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockMediaPackageAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mediapackage.UntagResourceInput, arg2 ...request.Option) (*mediapackage.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockMediaPackageAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateChannel mocks base method.
func (m *MockMediaPackageAPI) UpdateChannel(arg0 *mediapackage.UpdateChannelInput) (*mediapackage.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*mediapackage.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockMediaPackageAPIMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockMediaPackageAPI)(nil).UpdateChannel), arg0)
}

// UpdateChannelRequest mocks base method.
func (m *MockMediaPackageAPI) UpdateChannelRequest(arg0 *mediapackage.UpdateChannelInput) (*request.Request, *mediapackage.UpdateChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.UpdateChannelOutput)
	return ret0, ret1
}

// UpdateChannelRequest indicates an expected call of UpdateChannelRequest.
func (mr *MockMediaPackageAPIMockRecorder) UpdateChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).UpdateChannelRequest), arg0)
}

// UpdateChannelWithContext mocks base method.
func (m *MockMediaPackageAPI) UpdateChannelWithContext(arg0 context.Context, arg1 *mediapackage.UpdateChannelInput, arg2 ...request.Option) (*mediapackage.UpdateChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChannelWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.UpdateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannelWithContext indicates an expected call of UpdateChannelWithContext.
func (mr *MockMediaPackageAPIMockRecorder) UpdateChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannelWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).UpdateChannelWithContext), varargs...)
}

// UpdateOriginEndpoint mocks base method.
func (m *MockMediaPackageAPI) UpdateOriginEndpoint(arg0 *mediapackage.UpdateOriginEndpointInput) (*mediapackage.UpdateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOriginEndpoint", arg0)
	ret0, _ := ret[0].(*mediapackage.UpdateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOriginEndpoint indicates an expected call of UpdateOriginEndpoint.
func (mr *MockMediaPackageAPIMockRecorder) UpdateOriginEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginEndpoint", reflect.TypeOf((*MockMediaPackageAPI)(nil).UpdateOriginEndpoint), arg0)
}

// UpdateOriginEndpointRequest mocks base method.
func (m *MockMediaPackageAPI) UpdateOriginEndpointRequest(arg0 *mediapackage.UpdateOriginEndpointInput) (*request.Request, *mediapackage.UpdateOriginEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOriginEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediapackage.UpdateOriginEndpointOutput)
	return ret0, ret1
}

// UpdateOriginEndpointRequest indicates an expected call of UpdateOriginEndpointRequest.
func (mr *MockMediaPackageAPIMockRecorder) UpdateOriginEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginEndpointRequest", reflect.TypeOf((*MockMediaPackageAPI)(nil).UpdateOriginEndpointRequest), arg0)
}

// UpdateOriginEndpointWithContext mocks base method.
func (m *MockMediaPackageAPI) UpdateOriginEndpointWithContext(arg0 context.Context, arg1 *mediapackage.UpdateOriginEndpointInput, arg2 ...request.Option) (*mediapackage.UpdateOriginEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOriginEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*mediapackage.UpdateOriginEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOriginEndpointWithContext indicates an expected call of UpdateOriginEndpointWithContext.
func (mr *MockMediaPackageAPIMockRecorder) UpdateOriginEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginEndpointWithContext", reflect.TypeOf((*MockMediaPackageAPI)(nil).UpdateOriginEndpointWithContext), varargs...)
}

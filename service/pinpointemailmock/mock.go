// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/pinpointemail/pinpointemailiface (interfaces: PinpointEmailAPI)

// Package pinpointemailmock is a generated GoMock package.
package pinpointemailmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	pinpointemail "github.com/aws/aws-sdk-go/service/pinpointemail"
	gomock "github.com/golang/mock/gomock"
)

// MockPinpointEmailAPI is a mock of PinpointEmailAPI interface.
type MockPinpointEmailAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPinpointEmailAPIMockRecorder
}

// MockPinpointEmailAPIMockRecorder is the mock recorder for MockPinpointEmailAPI.
type MockPinpointEmailAPIMockRecorder struct {
	mock *MockPinpointEmailAPI
}

// NewMockPinpointEmailAPI creates a new mock instance.
func NewMockPinpointEmailAPI(ctrl *gomock.Controller) *MockPinpointEmailAPI {
	mock := &MockPinpointEmailAPI{ctrl: ctrl}
	mock.recorder = &MockPinpointEmailAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinpointEmailAPI) EXPECT() *MockPinpointEmailAPIMockRecorder {
	return m.recorder
}

// CreateConfigurationSet mocks base method.
func (m *MockPinpointEmailAPI) CreateConfigurationSet(arg0 *pinpointemail.CreateConfigurationSetInput) (*pinpointemail.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSet", arg0)
	ret0, _ := ret[0].(*pinpointemail.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSet indicates an expected call of CreateConfigurationSet.
func (mr *MockPinpointEmailAPIMockRecorder) CreateConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSet", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateConfigurationSet), arg0)
}

// CreateConfigurationSetEventDestination mocks base method.
func (m *MockPinpointEmailAPI) CreateConfigurationSetEventDestination(arg0 *pinpointemail.CreateConfigurationSetEventDestinationInput) (*pinpointemail.CreateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*pinpointemail.CreateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetEventDestination indicates an expected call of CreateConfigurationSetEventDestination.
func (mr *MockPinpointEmailAPIMockRecorder) CreateConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestination", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateConfigurationSetEventDestination), arg0)
}

// CreateConfigurationSetEventDestinationRequest mocks base method.
func (m *MockPinpointEmailAPI) CreateConfigurationSetEventDestinationRequest(arg0 *pinpointemail.CreateConfigurationSetEventDestinationInput) (*request.Request, *pinpointemail.CreateConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.CreateConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// CreateConfigurationSetEventDestinationRequest indicates an expected call of CreateConfigurationSetEventDestinationRequest.
func (mr *MockPinpointEmailAPIMockRecorder) CreateConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateConfigurationSetEventDestinationRequest), arg0)
}

// CreateConfigurationSetEventDestinationWithContext mocks base method.
func (m *MockPinpointEmailAPI) CreateConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *pinpointemail.CreateConfigurationSetEventDestinationInput, arg2 ...request.Option) (*pinpointemail.CreateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.CreateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetEventDestinationWithContext indicates an expected call of CreateConfigurationSetEventDestinationWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) CreateConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateConfigurationSetEventDestinationWithContext), varargs...)
}

// CreateConfigurationSetRequest mocks base method.
func (m *MockPinpointEmailAPI) CreateConfigurationSetRequest(arg0 *pinpointemail.CreateConfigurationSetInput) (*request.Request, *pinpointemail.CreateConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.CreateConfigurationSetOutput)
	return ret0, ret1
}

// CreateConfigurationSetRequest indicates an expected call of CreateConfigurationSetRequest.
func (mr *MockPinpointEmailAPIMockRecorder) CreateConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateConfigurationSetRequest), arg0)
}

// CreateConfigurationSetWithContext mocks base method.
func (m *MockPinpointEmailAPI) CreateConfigurationSetWithContext(arg0 context.Context, arg1 *pinpointemail.CreateConfigurationSetInput, arg2 ...request.Option) (*pinpointemail.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetWithContext indicates an expected call of CreateConfigurationSetWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) CreateConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateConfigurationSetWithContext), varargs...)
}

// CreateDedicatedIpPool mocks base method.
func (m *MockPinpointEmailAPI) CreateDedicatedIpPool(arg0 *pinpointemail.CreateDedicatedIpPoolInput) (*pinpointemail.CreateDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDedicatedIpPool", arg0)
	ret0, _ := ret[0].(*pinpointemail.CreateDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDedicatedIpPool indicates an expected call of CreateDedicatedIpPool.
func (mr *MockPinpointEmailAPIMockRecorder) CreateDedicatedIpPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPool", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateDedicatedIpPool), arg0)
}

// CreateDedicatedIpPoolRequest mocks base method.
func (m *MockPinpointEmailAPI) CreateDedicatedIpPoolRequest(arg0 *pinpointemail.CreateDedicatedIpPoolInput) (*request.Request, *pinpointemail.CreateDedicatedIpPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDedicatedIpPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.CreateDedicatedIpPoolOutput)
	return ret0, ret1
}

// CreateDedicatedIpPoolRequest indicates an expected call of CreateDedicatedIpPoolRequest.
func (mr *MockPinpointEmailAPIMockRecorder) CreateDedicatedIpPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPoolRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateDedicatedIpPoolRequest), arg0)
}

// CreateDedicatedIpPoolWithContext mocks base method.
func (m *MockPinpointEmailAPI) CreateDedicatedIpPoolWithContext(arg0 context.Context, arg1 *pinpointemail.CreateDedicatedIpPoolInput, arg2 ...request.Option) (*pinpointemail.CreateDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDedicatedIpPoolWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.CreateDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDedicatedIpPoolWithContext indicates an expected call of CreateDedicatedIpPoolWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) CreateDedicatedIpPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPoolWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateDedicatedIpPoolWithContext), varargs...)
}

// CreateDeliverabilityTestReport mocks base method.
func (m *MockPinpointEmailAPI) CreateDeliverabilityTestReport(arg0 *pinpointemail.CreateDeliverabilityTestReportInput) (*pinpointemail.CreateDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReport", arg0)
	ret0, _ := ret[0].(*pinpointemail.CreateDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliverabilityTestReport indicates an expected call of CreateDeliverabilityTestReport.
func (mr *MockPinpointEmailAPIMockRecorder) CreateDeliverabilityTestReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReport", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateDeliverabilityTestReport), arg0)
}

// CreateDeliverabilityTestReportRequest mocks base method.
func (m *MockPinpointEmailAPI) CreateDeliverabilityTestReportRequest(arg0 *pinpointemail.CreateDeliverabilityTestReportInput) (*request.Request, *pinpointemail.CreateDeliverabilityTestReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.CreateDeliverabilityTestReportOutput)
	return ret0, ret1
}

// CreateDeliverabilityTestReportRequest indicates an expected call of CreateDeliverabilityTestReportRequest.
func (mr *MockPinpointEmailAPIMockRecorder) CreateDeliverabilityTestReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReportRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateDeliverabilityTestReportRequest), arg0)
}

// CreateDeliverabilityTestReportWithContext mocks base method.
func (m *MockPinpointEmailAPI) CreateDeliverabilityTestReportWithContext(arg0 context.Context, arg1 *pinpointemail.CreateDeliverabilityTestReportInput, arg2 ...request.Option) (*pinpointemail.CreateDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReportWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.CreateDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliverabilityTestReportWithContext indicates an expected call of CreateDeliverabilityTestReportWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) CreateDeliverabilityTestReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReportWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateDeliverabilityTestReportWithContext), varargs...)
}

// CreateEmailIdentity mocks base method.
func (m *MockPinpointEmailAPI) CreateEmailIdentity(arg0 *pinpointemail.CreateEmailIdentityInput) (*pinpointemail.CreateEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentity", arg0)
	ret0, _ := ret[0].(*pinpointemail.CreateEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentity indicates an expected call of CreateEmailIdentity.
func (mr *MockPinpointEmailAPIMockRecorder) CreateEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentity", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateEmailIdentity), arg0)
}

// CreateEmailIdentityRequest mocks base method.
func (m *MockPinpointEmailAPI) CreateEmailIdentityRequest(arg0 *pinpointemail.CreateEmailIdentityInput) (*request.Request, *pinpointemail.CreateEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.CreateEmailIdentityOutput)
	return ret0, ret1
}

// CreateEmailIdentityRequest indicates an expected call of CreateEmailIdentityRequest.
func (mr *MockPinpointEmailAPIMockRecorder) CreateEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateEmailIdentityRequest), arg0)
}

// CreateEmailIdentityWithContext mocks base method.
func (m *MockPinpointEmailAPI) CreateEmailIdentityWithContext(arg0 context.Context, arg1 *pinpointemail.CreateEmailIdentityInput, arg2 ...request.Option) (*pinpointemail.CreateEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.CreateEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentityWithContext indicates an expected call of CreateEmailIdentityWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) CreateEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).CreateEmailIdentityWithContext), varargs...)
}

// DeleteConfigurationSet mocks base method.
func (m *MockPinpointEmailAPI) DeleteConfigurationSet(arg0 *pinpointemail.DeleteConfigurationSetInput) (*pinpointemail.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSet", arg0)
	ret0, _ := ret[0].(*pinpointemail.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSet indicates an expected call of DeleteConfigurationSet.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSet", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteConfigurationSet), arg0)
}

// DeleteConfigurationSetEventDestination mocks base method.
func (m *MockPinpointEmailAPI) DeleteConfigurationSetEventDestination(arg0 *pinpointemail.DeleteConfigurationSetEventDestinationInput) (*pinpointemail.DeleteConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*pinpointemail.DeleteConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestination indicates an expected call of DeleteConfigurationSetEventDestination.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestination", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteConfigurationSetEventDestination), arg0)
}

// DeleteConfigurationSetEventDestinationRequest mocks base method.
func (m *MockPinpointEmailAPI) DeleteConfigurationSetEventDestinationRequest(arg0 *pinpointemail.DeleteConfigurationSetEventDestinationInput) (*request.Request, *pinpointemail.DeleteConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.DeleteConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestinationRequest indicates an expected call of DeleteConfigurationSetEventDestinationRequest.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteConfigurationSetEventDestinationRequest), arg0)
}

// DeleteConfigurationSetEventDestinationWithContext mocks base method.
func (m *MockPinpointEmailAPI) DeleteConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *pinpointemail.DeleteConfigurationSetEventDestinationInput, arg2 ...request.Option) (*pinpointemail.DeleteConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.DeleteConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestinationWithContext indicates an expected call of DeleteConfigurationSetEventDestinationWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteConfigurationSetEventDestinationWithContext), varargs...)
}

// DeleteConfigurationSetRequest mocks base method.
func (m *MockPinpointEmailAPI) DeleteConfigurationSetRequest(arg0 *pinpointemail.DeleteConfigurationSetInput) (*request.Request, *pinpointemail.DeleteConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.DeleteConfigurationSetOutput)
	return ret0, ret1
}

// DeleteConfigurationSetRequest indicates an expected call of DeleteConfigurationSetRequest.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteConfigurationSetRequest), arg0)
}

// DeleteConfigurationSetWithContext mocks base method.
func (m *MockPinpointEmailAPI) DeleteConfigurationSetWithContext(arg0 context.Context, arg1 *pinpointemail.DeleteConfigurationSetInput, arg2 ...request.Option) (*pinpointemail.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetWithContext indicates an expected call of DeleteConfigurationSetWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteConfigurationSetWithContext), varargs...)
}

// DeleteDedicatedIpPool mocks base method.
func (m *MockPinpointEmailAPI) DeleteDedicatedIpPool(arg0 *pinpointemail.DeleteDedicatedIpPoolInput) (*pinpointemail.DeleteDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPool", arg0)
	ret0, _ := ret[0].(*pinpointemail.DeleteDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDedicatedIpPool indicates an expected call of DeleteDedicatedIpPool.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteDedicatedIpPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPool", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteDedicatedIpPool), arg0)
}

// DeleteDedicatedIpPoolRequest mocks base method.
func (m *MockPinpointEmailAPI) DeleteDedicatedIpPoolRequest(arg0 *pinpointemail.DeleteDedicatedIpPoolInput) (*request.Request, *pinpointemail.DeleteDedicatedIpPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.DeleteDedicatedIpPoolOutput)
	return ret0, ret1
}

// DeleteDedicatedIpPoolRequest indicates an expected call of DeleteDedicatedIpPoolRequest.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteDedicatedIpPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPoolRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteDedicatedIpPoolRequest), arg0)
}

// DeleteDedicatedIpPoolWithContext mocks base method.
func (m *MockPinpointEmailAPI) DeleteDedicatedIpPoolWithContext(arg0 context.Context, arg1 *pinpointemail.DeleteDedicatedIpPoolInput, arg2 ...request.Option) (*pinpointemail.DeleteDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPoolWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.DeleteDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDedicatedIpPoolWithContext indicates an expected call of DeleteDedicatedIpPoolWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteDedicatedIpPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPoolWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteDedicatedIpPoolWithContext), varargs...)
}

// DeleteEmailIdentity mocks base method.
func (m *MockPinpointEmailAPI) DeleteEmailIdentity(arg0 *pinpointemail.DeleteEmailIdentityInput) (*pinpointemail.DeleteEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentity", arg0)
	ret0, _ := ret[0].(*pinpointemail.DeleteEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentity indicates an expected call of DeleteEmailIdentity.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentity", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteEmailIdentity), arg0)
}

// DeleteEmailIdentityRequest mocks base method.
func (m *MockPinpointEmailAPI) DeleteEmailIdentityRequest(arg0 *pinpointemail.DeleteEmailIdentityInput) (*request.Request, *pinpointemail.DeleteEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.DeleteEmailIdentityOutput)
	return ret0, ret1
}

// DeleteEmailIdentityRequest indicates an expected call of DeleteEmailIdentityRequest.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteEmailIdentityRequest), arg0)
}

// DeleteEmailIdentityWithContext mocks base method.
func (m *MockPinpointEmailAPI) DeleteEmailIdentityWithContext(arg0 context.Context, arg1 *pinpointemail.DeleteEmailIdentityInput, arg2 ...request.Option) (*pinpointemail.DeleteEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.DeleteEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentityWithContext indicates an expected call of DeleteEmailIdentityWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) DeleteEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).DeleteEmailIdentityWithContext), varargs...)
}

// GetAccount mocks base method.
func (m *MockPinpointEmailAPI) GetAccount(arg0 *pinpointemail.GetAccountInput) (*pinpointemail.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockPinpointEmailAPIMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetAccount), arg0)
}

// GetAccountRequest mocks base method.
func (m *MockPinpointEmailAPI) GetAccountRequest(arg0 *pinpointemail.GetAccountInput) (*request.Request, *pinpointemail.GetAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetAccountOutput)
	return ret0, ret1
}

// GetAccountRequest indicates an expected call of GetAccountRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetAccountRequest), arg0)
}

// GetAccountWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetAccountWithContext(arg0 context.Context, arg1 *pinpointemail.GetAccountInput, arg2 ...request.Option) (*pinpointemail.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithContext indicates an expected call of GetAccountWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetAccountWithContext), varargs...)
}

// GetBlacklistReports mocks base method.
func (m *MockPinpointEmailAPI) GetBlacklistReports(arg0 *pinpointemail.GetBlacklistReportsInput) (*pinpointemail.GetBlacklistReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklistReports", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetBlacklistReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlacklistReports indicates an expected call of GetBlacklistReports.
func (mr *MockPinpointEmailAPIMockRecorder) GetBlacklistReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReports", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetBlacklistReports), arg0)
}

// GetBlacklistReportsRequest mocks base method.
func (m *MockPinpointEmailAPI) GetBlacklistReportsRequest(arg0 *pinpointemail.GetBlacklistReportsInput) (*request.Request, *pinpointemail.GetBlacklistReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklistReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetBlacklistReportsOutput)
	return ret0, ret1
}

// GetBlacklistReportsRequest indicates an expected call of GetBlacklistReportsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetBlacklistReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReportsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetBlacklistReportsRequest), arg0)
}

// GetBlacklistReportsWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetBlacklistReportsWithContext(arg0 context.Context, arg1 *pinpointemail.GetBlacklistReportsInput, arg2 ...request.Option) (*pinpointemail.GetBlacklistReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlacklistReportsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetBlacklistReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlacklistReportsWithContext indicates an expected call of GetBlacklistReportsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetBlacklistReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReportsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetBlacklistReportsWithContext), varargs...)
}

// GetConfigurationSet mocks base method.
func (m *MockPinpointEmailAPI) GetConfigurationSet(arg0 *pinpointemail.GetConfigurationSetInput) (*pinpointemail.GetConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSet", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSet indicates an expected call of GetConfigurationSet.
func (mr *MockPinpointEmailAPIMockRecorder) GetConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSet", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetConfigurationSet), arg0)
}

// GetConfigurationSetEventDestinations mocks base method.
func (m *MockPinpointEmailAPI) GetConfigurationSetEventDestinations(arg0 *pinpointemail.GetConfigurationSetEventDestinationsInput) (*pinpointemail.GetConfigurationSetEventDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinations", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetConfigurationSetEventDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetEventDestinations indicates an expected call of GetConfigurationSetEventDestinations.
func (mr *MockPinpointEmailAPIMockRecorder) GetConfigurationSetEventDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinations", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetConfigurationSetEventDestinations), arg0)
}

// GetConfigurationSetEventDestinationsRequest mocks base method.
func (m *MockPinpointEmailAPI) GetConfigurationSetEventDestinationsRequest(arg0 *pinpointemail.GetConfigurationSetEventDestinationsInput) (*request.Request, *pinpointemail.GetConfigurationSetEventDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetConfigurationSetEventDestinationsOutput)
	return ret0, ret1
}

// GetConfigurationSetEventDestinationsRequest indicates an expected call of GetConfigurationSetEventDestinationsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetConfigurationSetEventDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinationsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetConfigurationSetEventDestinationsRequest), arg0)
}

// GetConfigurationSetEventDestinationsWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetConfigurationSetEventDestinationsWithContext(arg0 context.Context, arg1 *pinpointemail.GetConfigurationSetEventDestinationsInput, arg2 ...request.Option) (*pinpointemail.GetConfigurationSetEventDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetConfigurationSetEventDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetEventDestinationsWithContext indicates an expected call of GetConfigurationSetEventDestinationsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetConfigurationSetEventDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinationsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetConfigurationSetEventDestinationsWithContext), varargs...)
}

// GetConfigurationSetRequest mocks base method.
func (m *MockPinpointEmailAPI) GetConfigurationSetRequest(arg0 *pinpointemail.GetConfigurationSetInput) (*request.Request, *pinpointemail.GetConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetConfigurationSetOutput)
	return ret0, ret1
}

// GetConfigurationSetRequest indicates an expected call of GetConfigurationSetRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetConfigurationSetRequest), arg0)
}

// GetConfigurationSetWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetConfigurationSetWithContext(arg0 context.Context, arg1 *pinpointemail.GetConfigurationSetInput, arg2 ...request.Option) (*pinpointemail.GetConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetWithContext indicates an expected call of GetConfigurationSetWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetConfigurationSetWithContext), varargs...)
}

// GetDedicatedIp mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIp(arg0 *pinpointemail.GetDedicatedIpInput) (*pinpointemail.GetDedicatedIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIp", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetDedicatedIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIp indicates an expected call of GetDedicatedIp.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIp", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIp), arg0)
}

// GetDedicatedIpRequest mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIpRequest(arg0 *pinpointemail.GetDedicatedIpInput) (*request.Request, *pinpointemail.GetDedicatedIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetDedicatedIpOutput)
	return ret0, ret1
}

// GetDedicatedIpRequest indicates an expected call of GetDedicatedIpRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIpRequest), arg0)
}

// GetDedicatedIpWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIpWithContext(arg0 context.Context, arg1 *pinpointemail.GetDedicatedIpInput, arg2 ...request.Option) (*pinpointemail.GetDedicatedIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetDedicatedIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIpWithContext indicates an expected call of GetDedicatedIpWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIpWithContext), varargs...)
}

// GetDedicatedIps mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIps(arg0 *pinpointemail.GetDedicatedIpsInput) (*pinpointemail.GetDedicatedIpsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIps", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetDedicatedIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIps indicates an expected call of GetDedicatedIps.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIps", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIps), arg0)
}

// GetDedicatedIpsPages mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIpsPages(arg0 *pinpointemail.GetDedicatedIpsInput, arg1 func(*pinpointemail.GetDedicatedIpsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDedicatedIpsPages indicates an expected call of GetDedicatedIpsPages.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIpsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsPages", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIpsPages), arg0, arg1)
}

// GetDedicatedIpsPagesWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIpsPagesWithContext(arg0 context.Context, arg1 *pinpointemail.GetDedicatedIpsInput, arg2 func(*pinpointemail.GetDedicatedIpsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDedicatedIpsPagesWithContext indicates an expected call of GetDedicatedIpsPagesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIpsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsPagesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIpsPagesWithContext), varargs...)
}

// GetDedicatedIpsRequest mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIpsRequest(arg0 *pinpointemail.GetDedicatedIpsInput) (*request.Request, *pinpointemail.GetDedicatedIpsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetDedicatedIpsOutput)
	return ret0, ret1
}

// GetDedicatedIpsRequest indicates an expected call of GetDedicatedIpsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIpsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIpsRequest), arg0)
}

// GetDedicatedIpsWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetDedicatedIpsWithContext(arg0 context.Context, arg1 *pinpointemail.GetDedicatedIpsInput, arg2 ...request.Option) (*pinpointemail.GetDedicatedIpsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetDedicatedIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIpsWithContext indicates an expected call of GetDedicatedIpsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetDedicatedIpsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDedicatedIpsWithContext), varargs...)
}

// GetDeliverabilityDashboardOptions mocks base method.
func (m *MockPinpointEmailAPI) GetDeliverabilityDashboardOptions(arg0 *pinpointemail.GetDeliverabilityDashboardOptionsInput) (*pinpointemail.GetDeliverabilityDashboardOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptions", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetDeliverabilityDashboardOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptions indicates an expected call of GetDeliverabilityDashboardOptions.
func (mr *MockPinpointEmailAPIMockRecorder) GetDeliverabilityDashboardOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptions", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDeliverabilityDashboardOptions), arg0)
}

// GetDeliverabilityDashboardOptionsRequest mocks base method.
func (m *MockPinpointEmailAPI) GetDeliverabilityDashboardOptionsRequest(arg0 *pinpointemail.GetDeliverabilityDashboardOptionsInput) (*request.Request, *pinpointemail.GetDeliverabilityDashboardOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetDeliverabilityDashboardOptionsOutput)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptionsRequest indicates an expected call of GetDeliverabilityDashboardOptionsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetDeliverabilityDashboardOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptionsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDeliverabilityDashboardOptionsRequest), arg0)
}

// GetDeliverabilityDashboardOptionsWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetDeliverabilityDashboardOptionsWithContext(arg0 context.Context, arg1 *pinpointemail.GetDeliverabilityDashboardOptionsInput, arg2 ...request.Option) (*pinpointemail.GetDeliverabilityDashboardOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetDeliverabilityDashboardOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptionsWithContext indicates an expected call of GetDeliverabilityDashboardOptionsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetDeliverabilityDashboardOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptionsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDeliverabilityDashboardOptionsWithContext), varargs...)
}

// GetDeliverabilityTestReport mocks base method.
func (m *MockPinpointEmailAPI) GetDeliverabilityTestReport(arg0 *pinpointemail.GetDeliverabilityTestReportInput) (*pinpointemail.GetDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReport", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityTestReport indicates an expected call of GetDeliverabilityTestReport.
func (mr *MockPinpointEmailAPIMockRecorder) GetDeliverabilityTestReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReport", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDeliverabilityTestReport), arg0)
}

// GetDeliverabilityTestReportRequest mocks base method.
func (m *MockPinpointEmailAPI) GetDeliverabilityTestReportRequest(arg0 *pinpointemail.GetDeliverabilityTestReportInput) (*request.Request, *pinpointemail.GetDeliverabilityTestReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetDeliverabilityTestReportOutput)
	return ret0, ret1
}

// GetDeliverabilityTestReportRequest indicates an expected call of GetDeliverabilityTestReportRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetDeliverabilityTestReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReportRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDeliverabilityTestReportRequest), arg0)
}

// GetDeliverabilityTestReportWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetDeliverabilityTestReportWithContext(arg0 context.Context, arg1 *pinpointemail.GetDeliverabilityTestReportInput, arg2 ...request.Option) (*pinpointemail.GetDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReportWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityTestReportWithContext indicates an expected call of GetDeliverabilityTestReportWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetDeliverabilityTestReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReportWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDeliverabilityTestReportWithContext), varargs...)
}

// GetDomainDeliverabilityCampaign mocks base method.
func (m *MockPinpointEmailAPI) GetDomainDeliverabilityCampaign(arg0 *pinpointemail.GetDomainDeliverabilityCampaignInput) (*pinpointemail.GetDomainDeliverabilityCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaign", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetDomainDeliverabilityCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaign indicates an expected call of GetDomainDeliverabilityCampaign.
func (mr *MockPinpointEmailAPIMockRecorder) GetDomainDeliverabilityCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaign", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDomainDeliverabilityCampaign), arg0)
}

// GetDomainDeliverabilityCampaignRequest mocks base method.
func (m *MockPinpointEmailAPI) GetDomainDeliverabilityCampaignRequest(arg0 *pinpointemail.GetDomainDeliverabilityCampaignInput) (*request.Request, *pinpointemail.GetDomainDeliverabilityCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetDomainDeliverabilityCampaignOutput)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaignRequest indicates an expected call of GetDomainDeliverabilityCampaignRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetDomainDeliverabilityCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaignRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDomainDeliverabilityCampaignRequest), arg0)
}

// GetDomainDeliverabilityCampaignWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetDomainDeliverabilityCampaignWithContext(arg0 context.Context, arg1 *pinpointemail.GetDomainDeliverabilityCampaignInput, arg2 ...request.Option) (*pinpointemail.GetDomainDeliverabilityCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetDomainDeliverabilityCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaignWithContext indicates an expected call of GetDomainDeliverabilityCampaignWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetDomainDeliverabilityCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaignWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDomainDeliverabilityCampaignWithContext), varargs...)
}

// GetDomainStatisticsReport mocks base method.
func (m *MockPinpointEmailAPI) GetDomainStatisticsReport(arg0 *pinpointemail.GetDomainStatisticsReportInput) (*pinpointemail.GetDomainStatisticsReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStatisticsReport", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetDomainStatisticsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStatisticsReport indicates an expected call of GetDomainStatisticsReport.
func (mr *MockPinpointEmailAPIMockRecorder) GetDomainStatisticsReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReport", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDomainStatisticsReport), arg0)
}

// GetDomainStatisticsReportRequest mocks base method.
func (m *MockPinpointEmailAPI) GetDomainStatisticsReportRequest(arg0 *pinpointemail.GetDomainStatisticsReportInput) (*request.Request, *pinpointemail.GetDomainStatisticsReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStatisticsReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetDomainStatisticsReportOutput)
	return ret0, ret1
}

// GetDomainStatisticsReportRequest indicates an expected call of GetDomainStatisticsReportRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetDomainStatisticsReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReportRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDomainStatisticsReportRequest), arg0)
}

// GetDomainStatisticsReportWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetDomainStatisticsReportWithContext(arg0 context.Context, arg1 *pinpointemail.GetDomainStatisticsReportInput, arg2 ...request.Option) (*pinpointemail.GetDomainStatisticsReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainStatisticsReportWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetDomainStatisticsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStatisticsReportWithContext indicates an expected call of GetDomainStatisticsReportWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetDomainStatisticsReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReportWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetDomainStatisticsReportWithContext), varargs...)
}

// GetEmailIdentity mocks base method.
func (m *MockPinpointEmailAPI) GetEmailIdentity(arg0 *pinpointemail.GetEmailIdentityInput) (*pinpointemail.GetEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentity", arg0)
	ret0, _ := ret[0].(*pinpointemail.GetEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentity indicates an expected call of GetEmailIdentity.
func (mr *MockPinpointEmailAPIMockRecorder) GetEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentity", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetEmailIdentity), arg0)
}

// GetEmailIdentityRequest mocks base method.
func (m *MockPinpointEmailAPI) GetEmailIdentityRequest(arg0 *pinpointemail.GetEmailIdentityInput) (*request.Request, *pinpointemail.GetEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.GetEmailIdentityOutput)
	return ret0, ret1
}

// GetEmailIdentityRequest indicates an expected call of GetEmailIdentityRequest.
func (mr *MockPinpointEmailAPIMockRecorder) GetEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetEmailIdentityRequest), arg0)
}

// GetEmailIdentityWithContext mocks base method.
func (m *MockPinpointEmailAPI) GetEmailIdentityWithContext(arg0 context.Context, arg1 *pinpointemail.GetEmailIdentityInput, arg2 ...request.Option) (*pinpointemail.GetEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.GetEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentityWithContext indicates an expected call of GetEmailIdentityWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) GetEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).GetEmailIdentityWithContext), varargs...)
}

// ListConfigurationSets mocks base method.
func (m *MockPinpointEmailAPI) ListConfigurationSets(arg0 *pinpointemail.ListConfigurationSetsInput) (*pinpointemail.ListConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSets", arg0)
	ret0, _ := ret[0].(*pinpointemail.ListConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSets indicates an expected call of ListConfigurationSets.
func (mr *MockPinpointEmailAPIMockRecorder) ListConfigurationSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSets", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListConfigurationSets), arg0)
}

// ListConfigurationSetsPages mocks base method.
func (m *MockPinpointEmailAPI) ListConfigurationSetsPages(arg0 *pinpointemail.ListConfigurationSetsInput, arg1 func(*pinpointemail.ListConfigurationSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationSetsPages indicates an expected call of ListConfigurationSetsPages.
func (mr *MockPinpointEmailAPIMockRecorder) ListConfigurationSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsPages", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListConfigurationSetsPages), arg0, arg1)
}

// ListConfigurationSetsPagesWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListConfigurationSetsPagesWithContext(arg0 context.Context, arg1 *pinpointemail.ListConfigurationSetsInput, arg2 func(*pinpointemail.ListConfigurationSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationSetsPagesWithContext indicates an expected call of ListConfigurationSetsPagesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListConfigurationSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsPagesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListConfigurationSetsPagesWithContext), varargs...)
}

// ListConfigurationSetsRequest mocks base method.
func (m *MockPinpointEmailAPI) ListConfigurationSetsRequest(arg0 *pinpointemail.ListConfigurationSetsInput) (*request.Request, *pinpointemail.ListConfigurationSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.ListConfigurationSetsOutput)
	return ret0, ret1
}

// ListConfigurationSetsRequest indicates an expected call of ListConfigurationSetsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) ListConfigurationSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListConfigurationSetsRequest), arg0)
}

// ListConfigurationSetsWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListConfigurationSetsWithContext(arg0 context.Context, arg1 *pinpointemail.ListConfigurationSetsInput, arg2 ...request.Option) (*pinpointemail.ListConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationSetsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.ListConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSetsWithContext indicates an expected call of ListConfigurationSetsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListConfigurationSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListConfigurationSetsWithContext), varargs...)
}

// ListDedicatedIpPools mocks base method.
func (m *MockPinpointEmailAPI) ListDedicatedIpPools(arg0 *pinpointemail.ListDedicatedIpPoolsInput) (*pinpointemail.ListDedicatedIpPoolsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPools", arg0)
	ret0, _ := ret[0].(*pinpointemail.ListDedicatedIpPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDedicatedIpPools indicates an expected call of ListDedicatedIpPools.
func (mr *MockPinpointEmailAPIMockRecorder) ListDedicatedIpPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPools", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDedicatedIpPools), arg0)
}

// ListDedicatedIpPoolsPages mocks base method.
func (m *MockPinpointEmailAPI) ListDedicatedIpPoolsPages(arg0 *pinpointemail.ListDedicatedIpPoolsInput, arg1 func(*pinpointemail.ListDedicatedIpPoolsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDedicatedIpPoolsPages indicates an expected call of ListDedicatedIpPoolsPages.
func (mr *MockPinpointEmailAPIMockRecorder) ListDedicatedIpPoolsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsPages", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDedicatedIpPoolsPages), arg0, arg1)
}

// ListDedicatedIpPoolsPagesWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListDedicatedIpPoolsPagesWithContext(arg0 context.Context, arg1 *pinpointemail.ListDedicatedIpPoolsInput, arg2 func(*pinpointemail.ListDedicatedIpPoolsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDedicatedIpPoolsPagesWithContext indicates an expected call of ListDedicatedIpPoolsPagesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListDedicatedIpPoolsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsPagesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDedicatedIpPoolsPagesWithContext), varargs...)
}

// ListDedicatedIpPoolsRequest mocks base method.
func (m *MockPinpointEmailAPI) ListDedicatedIpPoolsRequest(arg0 *pinpointemail.ListDedicatedIpPoolsInput) (*request.Request, *pinpointemail.ListDedicatedIpPoolsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.ListDedicatedIpPoolsOutput)
	return ret0, ret1
}

// ListDedicatedIpPoolsRequest indicates an expected call of ListDedicatedIpPoolsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) ListDedicatedIpPoolsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDedicatedIpPoolsRequest), arg0)
}

// ListDedicatedIpPoolsWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListDedicatedIpPoolsWithContext(arg0 context.Context, arg1 *pinpointemail.ListDedicatedIpPoolsInput, arg2 ...request.Option) (*pinpointemail.ListDedicatedIpPoolsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.ListDedicatedIpPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDedicatedIpPoolsWithContext indicates an expected call of ListDedicatedIpPoolsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListDedicatedIpPoolsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDedicatedIpPoolsWithContext), varargs...)
}

// ListDeliverabilityTestReports mocks base method.
func (m *MockPinpointEmailAPI) ListDeliverabilityTestReports(arg0 *pinpointemail.ListDeliverabilityTestReportsInput) (*pinpointemail.ListDeliverabilityTestReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReports", arg0)
	ret0, _ := ret[0].(*pinpointemail.ListDeliverabilityTestReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliverabilityTestReports indicates an expected call of ListDeliverabilityTestReports.
func (mr *MockPinpointEmailAPIMockRecorder) ListDeliverabilityTestReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReports", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDeliverabilityTestReports), arg0)
}

// ListDeliverabilityTestReportsPages mocks base method.
func (m *MockPinpointEmailAPI) ListDeliverabilityTestReportsPages(arg0 *pinpointemail.ListDeliverabilityTestReportsInput, arg1 func(*pinpointemail.ListDeliverabilityTestReportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeliverabilityTestReportsPages indicates an expected call of ListDeliverabilityTestReportsPages.
func (mr *MockPinpointEmailAPIMockRecorder) ListDeliverabilityTestReportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsPages", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDeliverabilityTestReportsPages), arg0, arg1)
}

// ListDeliverabilityTestReportsPagesWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListDeliverabilityTestReportsPagesWithContext(arg0 context.Context, arg1 *pinpointemail.ListDeliverabilityTestReportsInput, arg2 func(*pinpointemail.ListDeliverabilityTestReportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeliverabilityTestReportsPagesWithContext indicates an expected call of ListDeliverabilityTestReportsPagesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListDeliverabilityTestReportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsPagesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDeliverabilityTestReportsPagesWithContext), varargs...)
}

// ListDeliverabilityTestReportsRequest mocks base method.
func (m *MockPinpointEmailAPI) ListDeliverabilityTestReportsRequest(arg0 *pinpointemail.ListDeliverabilityTestReportsInput) (*request.Request, *pinpointemail.ListDeliverabilityTestReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.ListDeliverabilityTestReportsOutput)
	return ret0, ret1
}

// ListDeliverabilityTestReportsRequest indicates an expected call of ListDeliverabilityTestReportsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) ListDeliverabilityTestReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDeliverabilityTestReportsRequest), arg0)
}

// ListDeliverabilityTestReportsWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListDeliverabilityTestReportsWithContext(arg0 context.Context, arg1 *pinpointemail.ListDeliverabilityTestReportsInput, arg2 ...request.Option) (*pinpointemail.ListDeliverabilityTestReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.ListDeliverabilityTestReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliverabilityTestReportsWithContext indicates an expected call of ListDeliverabilityTestReportsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListDeliverabilityTestReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDeliverabilityTestReportsWithContext), varargs...)
}

// ListDomainDeliverabilityCampaigns mocks base method.
func (m *MockPinpointEmailAPI) ListDomainDeliverabilityCampaigns(arg0 *pinpointemail.ListDomainDeliverabilityCampaignsInput) (*pinpointemail.ListDomainDeliverabilityCampaignsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaigns", arg0)
	ret0, _ := ret[0].(*pinpointemail.ListDomainDeliverabilityCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaigns indicates an expected call of ListDomainDeliverabilityCampaigns.
func (mr *MockPinpointEmailAPIMockRecorder) ListDomainDeliverabilityCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaigns", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDomainDeliverabilityCampaigns), arg0)
}

// ListDomainDeliverabilityCampaignsPages mocks base method.
func (m *MockPinpointEmailAPI) ListDomainDeliverabilityCampaignsPages(arg0 *pinpointemail.ListDomainDeliverabilityCampaignsInput, arg1 func(*pinpointemail.ListDomainDeliverabilityCampaignsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainDeliverabilityCampaignsPages indicates an expected call of ListDomainDeliverabilityCampaignsPages.
func (mr *MockPinpointEmailAPIMockRecorder) ListDomainDeliverabilityCampaignsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsPages", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDomainDeliverabilityCampaignsPages), arg0, arg1)
}

// ListDomainDeliverabilityCampaignsPagesWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListDomainDeliverabilityCampaignsPagesWithContext(arg0 context.Context, arg1 *pinpointemail.ListDomainDeliverabilityCampaignsInput, arg2 func(*pinpointemail.ListDomainDeliverabilityCampaignsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainDeliverabilityCampaignsPagesWithContext indicates an expected call of ListDomainDeliverabilityCampaignsPagesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListDomainDeliverabilityCampaignsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsPagesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDomainDeliverabilityCampaignsPagesWithContext), varargs...)
}

// ListDomainDeliverabilityCampaignsRequest mocks base method.
func (m *MockPinpointEmailAPI) ListDomainDeliverabilityCampaignsRequest(arg0 *pinpointemail.ListDomainDeliverabilityCampaignsInput) (*request.Request, *pinpointemail.ListDomainDeliverabilityCampaignsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.ListDomainDeliverabilityCampaignsOutput)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaignsRequest indicates an expected call of ListDomainDeliverabilityCampaignsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) ListDomainDeliverabilityCampaignsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDomainDeliverabilityCampaignsRequest), arg0)
}

// ListDomainDeliverabilityCampaignsWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListDomainDeliverabilityCampaignsWithContext(arg0 context.Context, arg1 *pinpointemail.ListDomainDeliverabilityCampaignsInput, arg2 ...request.Option) (*pinpointemail.ListDomainDeliverabilityCampaignsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.ListDomainDeliverabilityCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaignsWithContext indicates an expected call of ListDomainDeliverabilityCampaignsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListDomainDeliverabilityCampaignsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListDomainDeliverabilityCampaignsWithContext), varargs...)
}

// ListEmailIdentities mocks base method.
func (m *MockPinpointEmailAPI) ListEmailIdentities(arg0 *pinpointemail.ListEmailIdentitiesInput) (*pinpointemail.ListEmailIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentities", arg0)
	ret0, _ := ret[0].(*pinpointemail.ListEmailIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailIdentities indicates an expected call of ListEmailIdentities.
func (mr *MockPinpointEmailAPIMockRecorder) ListEmailIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentities", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListEmailIdentities), arg0)
}

// ListEmailIdentitiesPages mocks base method.
func (m *MockPinpointEmailAPI) ListEmailIdentitiesPages(arg0 *pinpointemail.ListEmailIdentitiesInput, arg1 func(*pinpointemail.ListEmailIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailIdentitiesPages indicates an expected call of ListEmailIdentitiesPages.
func (mr *MockPinpointEmailAPIMockRecorder) ListEmailIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesPages", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListEmailIdentitiesPages), arg0, arg1)
}

// ListEmailIdentitiesPagesWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListEmailIdentitiesPagesWithContext(arg0 context.Context, arg1 *pinpointemail.ListEmailIdentitiesInput, arg2 func(*pinpointemail.ListEmailIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailIdentitiesPagesWithContext indicates an expected call of ListEmailIdentitiesPagesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListEmailIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesPagesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListEmailIdentitiesPagesWithContext), varargs...)
}

// ListEmailIdentitiesRequest mocks base method.
func (m *MockPinpointEmailAPI) ListEmailIdentitiesRequest(arg0 *pinpointemail.ListEmailIdentitiesInput) (*request.Request, *pinpointemail.ListEmailIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.ListEmailIdentitiesOutput)
	return ret0, ret1
}

// ListEmailIdentitiesRequest indicates an expected call of ListEmailIdentitiesRequest.
func (mr *MockPinpointEmailAPIMockRecorder) ListEmailIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListEmailIdentitiesRequest), arg0)
}

// ListEmailIdentitiesWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListEmailIdentitiesWithContext(arg0 context.Context, arg1 *pinpointemail.ListEmailIdentitiesInput, arg2 ...request.Option) (*pinpointemail.ListEmailIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.ListEmailIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailIdentitiesWithContext indicates an expected call of ListEmailIdentitiesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListEmailIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListEmailIdentitiesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockPinpointEmailAPI) ListTagsForResource(arg0 *pinpointemail.ListTagsForResourceInput) (*pinpointemail.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*pinpointemail.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockPinpointEmailAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockPinpointEmailAPI) ListTagsForResourceRequest(arg0 *pinpointemail.ListTagsForResourceInput) (*request.Request, *pinpointemail.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockPinpointEmailAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockPinpointEmailAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *pinpointemail.ListTagsForResourceInput, arg2 ...request.Option) (*pinpointemail.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutAccountDedicatedIpWarmupAttributes mocks base method.
func (m *MockPinpointEmailAPI) PutAccountDedicatedIpWarmupAttributes(arg0 *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput) (*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributes", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributes indicates an expected call of PutAccountDedicatedIpWarmupAttributes.
func (mr *MockPinpointEmailAPIMockRecorder) PutAccountDedicatedIpWarmupAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributes", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutAccountDedicatedIpWarmupAttributes), arg0)
}

// PutAccountDedicatedIpWarmupAttributesRequest mocks base method.
func (m *MockPinpointEmailAPI) PutAccountDedicatedIpWarmupAttributesRequest(arg0 *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput) (*request.Request, *pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributesRequest indicates an expected call of PutAccountDedicatedIpWarmupAttributesRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutAccountDedicatedIpWarmupAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributesRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutAccountDedicatedIpWarmupAttributesRequest), arg0)
}

// PutAccountDedicatedIpWarmupAttributesWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutAccountDedicatedIpWarmupAttributesWithContext(arg0 context.Context, arg1 *pinpointemail.PutAccountDedicatedIpWarmupAttributesInput, arg2 ...request.Option) (*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutAccountDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributesWithContext indicates an expected call of PutAccountDedicatedIpWarmupAttributesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutAccountDedicatedIpWarmupAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutAccountDedicatedIpWarmupAttributesWithContext), varargs...)
}

// PutAccountSendingAttributes mocks base method.
func (m *MockPinpointEmailAPI) PutAccountSendingAttributes(arg0 *pinpointemail.PutAccountSendingAttributesInput) (*pinpointemail.PutAccountSendingAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSendingAttributes", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutAccountSendingAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSendingAttributes indicates an expected call of PutAccountSendingAttributes.
func (mr *MockPinpointEmailAPIMockRecorder) PutAccountSendingAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributes", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutAccountSendingAttributes), arg0)
}

// PutAccountSendingAttributesRequest mocks base method.
func (m *MockPinpointEmailAPI) PutAccountSendingAttributesRequest(arg0 *pinpointemail.PutAccountSendingAttributesInput) (*request.Request, *pinpointemail.PutAccountSendingAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSendingAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutAccountSendingAttributesOutput)
	return ret0, ret1
}

// PutAccountSendingAttributesRequest indicates an expected call of PutAccountSendingAttributesRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutAccountSendingAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributesRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutAccountSendingAttributesRequest), arg0)
}

// PutAccountSendingAttributesWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutAccountSendingAttributesWithContext(arg0 context.Context, arg1 *pinpointemail.PutAccountSendingAttributesInput, arg2 ...request.Option) (*pinpointemail.PutAccountSendingAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountSendingAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutAccountSendingAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSendingAttributesWithContext indicates an expected call of PutAccountSendingAttributesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutAccountSendingAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutAccountSendingAttributesWithContext), varargs...)
}

// PutConfigurationSetDeliveryOptions mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetDeliveryOptions(arg0 *pinpointemail.PutConfigurationSetDeliveryOptionsInput) (*pinpointemail.PutConfigurationSetDeliveryOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptions", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetDeliveryOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptions indicates an expected call of PutConfigurationSetDeliveryOptions.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetDeliveryOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptions", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetDeliveryOptions), arg0)
}

// PutConfigurationSetDeliveryOptionsRequest mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetDeliveryOptionsRequest(arg0 *pinpointemail.PutConfigurationSetDeliveryOptionsInput) (*request.Request, *pinpointemail.PutConfigurationSetDeliveryOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutConfigurationSetDeliveryOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptionsRequest indicates an expected call of PutConfigurationSetDeliveryOptionsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetDeliveryOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptionsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetDeliveryOptionsRequest), arg0)
}

// PutConfigurationSetDeliveryOptionsWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetDeliveryOptionsWithContext(arg0 context.Context, arg1 *pinpointemail.PutConfigurationSetDeliveryOptionsInput, arg2 ...request.Option) (*pinpointemail.PutConfigurationSetDeliveryOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetDeliveryOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptionsWithContext indicates an expected call of PutConfigurationSetDeliveryOptionsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetDeliveryOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptionsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetDeliveryOptionsWithContext), varargs...)
}

// PutConfigurationSetReputationOptions mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetReputationOptions(arg0 *pinpointemail.PutConfigurationSetReputationOptionsInput) (*pinpointemail.PutConfigurationSetReputationOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptions", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetReputationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetReputationOptions indicates an expected call of PutConfigurationSetReputationOptions.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetReputationOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptions", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetReputationOptions), arg0)
}

// PutConfigurationSetReputationOptionsRequest mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetReputationOptionsRequest(arg0 *pinpointemail.PutConfigurationSetReputationOptionsInput) (*request.Request, *pinpointemail.PutConfigurationSetReputationOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutConfigurationSetReputationOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetReputationOptionsRequest indicates an expected call of PutConfigurationSetReputationOptionsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetReputationOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptionsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetReputationOptionsRequest), arg0)
}

// PutConfigurationSetReputationOptionsWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetReputationOptionsWithContext(arg0 context.Context, arg1 *pinpointemail.PutConfigurationSetReputationOptionsInput, arg2 ...request.Option) (*pinpointemail.PutConfigurationSetReputationOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetReputationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetReputationOptionsWithContext indicates an expected call of PutConfigurationSetReputationOptionsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetReputationOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptionsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetReputationOptionsWithContext), varargs...)
}

// PutConfigurationSetSendingOptions mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetSendingOptions(arg0 *pinpointemail.PutConfigurationSetSendingOptionsInput) (*pinpointemail.PutConfigurationSetSendingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptions", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetSendingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSendingOptions indicates an expected call of PutConfigurationSetSendingOptions.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetSendingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptions", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetSendingOptions), arg0)
}

// PutConfigurationSetSendingOptionsRequest mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetSendingOptionsRequest(arg0 *pinpointemail.PutConfigurationSetSendingOptionsInput) (*request.Request, *pinpointemail.PutConfigurationSetSendingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutConfigurationSetSendingOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetSendingOptionsRequest indicates an expected call of PutConfigurationSetSendingOptionsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetSendingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptionsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetSendingOptionsRequest), arg0)
}

// PutConfigurationSetSendingOptionsWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetSendingOptionsWithContext(arg0 context.Context, arg1 *pinpointemail.PutConfigurationSetSendingOptionsInput, arg2 ...request.Option) (*pinpointemail.PutConfigurationSetSendingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetSendingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSendingOptionsWithContext indicates an expected call of PutConfigurationSetSendingOptionsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetSendingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptionsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetSendingOptionsWithContext), varargs...)
}

// PutConfigurationSetTrackingOptions mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetTrackingOptions(arg0 *pinpointemail.PutConfigurationSetTrackingOptionsInput) (*pinpointemail.PutConfigurationSetTrackingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptions", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetTrackingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptions indicates an expected call of PutConfigurationSetTrackingOptions.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetTrackingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptions", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetTrackingOptions), arg0)
}

// PutConfigurationSetTrackingOptionsRequest mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetTrackingOptionsRequest(arg0 *pinpointemail.PutConfigurationSetTrackingOptionsInput) (*request.Request, *pinpointemail.PutConfigurationSetTrackingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutConfigurationSetTrackingOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptionsRequest indicates an expected call of PutConfigurationSetTrackingOptionsRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetTrackingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptionsRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetTrackingOptionsRequest), arg0)
}

// PutConfigurationSetTrackingOptionsWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutConfigurationSetTrackingOptionsWithContext(arg0 context.Context, arg1 *pinpointemail.PutConfigurationSetTrackingOptionsInput, arg2 ...request.Option) (*pinpointemail.PutConfigurationSetTrackingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutConfigurationSetTrackingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptionsWithContext indicates an expected call of PutConfigurationSetTrackingOptionsWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutConfigurationSetTrackingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptionsWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutConfigurationSetTrackingOptionsWithContext), varargs...)
}

// PutDedicatedIpInPool mocks base method.
func (m *MockPinpointEmailAPI) PutDedicatedIpInPool(arg0 *pinpointemail.PutDedicatedIpInPoolInput) (*pinpointemail.PutDedicatedIpInPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpInPool", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutDedicatedIpInPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpInPool indicates an expected call of PutDedicatedIpInPool.
func (mr *MockPinpointEmailAPIMockRecorder) PutDedicatedIpInPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPool", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDedicatedIpInPool), arg0)
}

// PutDedicatedIpInPoolRequest mocks base method.
func (m *MockPinpointEmailAPI) PutDedicatedIpInPoolRequest(arg0 *pinpointemail.PutDedicatedIpInPoolInput) (*request.Request, *pinpointemail.PutDedicatedIpInPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpInPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutDedicatedIpInPoolOutput)
	return ret0, ret1
}

// PutDedicatedIpInPoolRequest indicates an expected call of PutDedicatedIpInPoolRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutDedicatedIpInPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPoolRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDedicatedIpInPoolRequest), arg0)
}

// PutDedicatedIpInPoolWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutDedicatedIpInPoolWithContext(arg0 context.Context, arg1 *pinpointemail.PutDedicatedIpInPoolInput, arg2 ...request.Option) (*pinpointemail.PutDedicatedIpInPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDedicatedIpInPoolWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutDedicatedIpInPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpInPoolWithContext indicates an expected call of PutDedicatedIpInPoolWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutDedicatedIpInPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPoolWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDedicatedIpInPoolWithContext), varargs...)
}

// PutDedicatedIpWarmupAttributes mocks base method.
func (m *MockPinpointEmailAPI) PutDedicatedIpWarmupAttributes(arg0 *pinpointemail.PutDedicatedIpWarmupAttributesInput) (*pinpointemail.PutDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributes", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributes indicates an expected call of PutDedicatedIpWarmupAttributes.
func (mr *MockPinpointEmailAPIMockRecorder) PutDedicatedIpWarmupAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributes", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDedicatedIpWarmupAttributes), arg0)
}

// PutDedicatedIpWarmupAttributesRequest mocks base method.
func (m *MockPinpointEmailAPI) PutDedicatedIpWarmupAttributesRequest(arg0 *pinpointemail.PutDedicatedIpWarmupAttributesInput) (*request.Request, *pinpointemail.PutDedicatedIpWarmupAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutDedicatedIpWarmupAttributesOutput)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributesRequest indicates an expected call of PutDedicatedIpWarmupAttributesRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutDedicatedIpWarmupAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributesRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDedicatedIpWarmupAttributesRequest), arg0)
}

// PutDedicatedIpWarmupAttributesWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutDedicatedIpWarmupAttributesWithContext(arg0 context.Context, arg1 *pinpointemail.PutDedicatedIpWarmupAttributesInput, arg2 ...request.Option) (*pinpointemail.PutDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributesWithContext indicates an expected call of PutDedicatedIpWarmupAttributesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutDedicatedIpWarmupAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDedicatedIpWarmupAttributesWithContext), varargs...)
}

// PutDeliverabilityDashboardOption mocks base method.
func (m *MockPinpointEmailAPI) PutDeliverabilityDashboardOption(arg0 *pinpointemail.PutDeliverabilityDashboardOptionInput) (*pinpointemail.PutDeliverabilityDashboardOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOption", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutDeliverabilityDashboardOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliverabilityDashboardOption indicates an expected call of PutDeliverabilityDashboardOption.
func (mr *MockPinpointEmailAPIMockRecorder) PutDeliverabilityDashboardOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOption", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDeliverabilityDashboardOption), arg0)
}

// PutDeliverabilityDashboardOptionRequest mocks base method.
func (m *MockPinpointEmailAPI) PutDeliverabilityDashboardOptionRequest(arg0 *pinpointemail.PutDeliverabilityDashboardOptionInput) (*request.Request, *pinpointemail.PutDeliverabilityDashboardOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutDeliverabilityDashboardOptionOutput)
	return ret0, ret1
}

// PutDeliverabilityDashboardOptionRequest indicates an expected call of PutDeliverabilityDashboardOptionRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutDeliverabilityDashboardOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOptionRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDeliverabilityDashboardOptionRequest), arg0)
}

// PutDeliverabilityDashboardOptionWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutDeliverabilityDashboardOptionWithContext(arg0 context.Context, arg1 *pinpointemail.PutDeliverabilityDashboardOptionInput, arg2 ...request.Option) (*pinpointemail.PutDeliverabilityDashboardOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOptionWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutDeliverabilityDashboardOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliverabilityDashboardOptionWithContext indicates an expected call of PutDeliverabilityDashboardOptionWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutDeliverabilityDashboardOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOptionWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutDeliverabilityDashboardOptionWithContext), varargs...)
}

// PutEmailIdentityDkimAttributes mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityDkimAttributes(arg0 *pinpointemail.PutEmailIdentityDkimAttributesInput) (*pinpointemail.PutEmailIdentityDkimAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributes", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutEmailIdentityDkimAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributes indicates an expected call of PutEmailIdentityDkimAttributes.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityDkimAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributes", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityDkimAttributes), arg0)
}

// PutEmailIdentityDkimAttributesRequest mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityDkimAttributesRequest(arg0 *pinpointemail.PutEmailIdentityDkimAttributesInput) (*request.Request, *pinpointemail.PutEmailIdentityDkimAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutEmailIdentityDkimAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributesRequest indicates an expected call of PutEmailIdentityDkimAttributesRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityDkimAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributesRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityDkimAttributesRequest), arg0)
}

// PutEmailIdentityDkimAttributesWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityDkimAttributesWithContext(arg0 context.Context, arg1 *pinpointemail.PutEmailIdentityDkimAttributesInput, arg2 ...request.Option) (*pinpointemail.PutEmailIdentityDkimAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutEmailIdentityDkimAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributesWithContext indicates an expected call of PutEmailIdentityDkimAttributesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityDkimAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityDkimAttributesWithContext), varargs...)
}

// PutEmailIdentityFeedbackAttributes mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityFeedbackAttributes(arg0 *pinpointemail.PutEmailIdentityFeedbackAttributesInput) (*pinpointemail.PutEmailIdentityFeedbackAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributes", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutEmailIdentityFeedbackAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributes indicates an expected call of PutEmailIdentityFeedbackAttributes.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityFeedbackAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributes", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityFeedbackAttributes), arg0)
}

// PutEmailIdentityFeedbackAttributesRequest mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityFeedbackAttributesRequest(arg0 *pinpointemail.PutEmailIdentityFeedbackAttributesInput) (*request.Request, *pinpointemail.PutEmailIdentityFeedbackAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutEmailIdentityFeedbackAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributesRequest indicates an expected call of PutEmailIdentityFeedbackAttributesRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityFeedbackAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributesRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityFeedbackAttributesRequest), arg0)
}

// PutEmailIdentityFeedbackAttributesWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityFeedbackAttributesWithContext(arg0 context.Context, arg1 *pinpointemail.PutEmailIdentityFeedbackAttributesInput, arg2 ...request.Option) (*pinpointemail.PutEmailIdentityFeedbackAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutEmailIdentityFeedbackAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributesWithContext indicates an expected call of PutEmailIdentityFeedbackAttributesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityFeedbackAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityFeedbackAttributesWithContext), varargs...)
}

// PutEmailIdentityMailFromAttributes mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityMailFromAttributes(arg0 *pinpointemail.PutEmailIdentityMailFromAttributesInput) (*pinpointemail.PutEmailIdentityMailFromAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributes", arg0)
	ret0, _ := ret[0].(*pinpointemail.PutEmailIdentityMailFromAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributes indicates an expected call of PutEmailIdentityMailFromAttributes.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityMailFromAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributes", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityMailFromAttributes), arg0)
}

// PutEmailIdentityMailFromAttributesRequest mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityMailFromAttributesRequest(arg0 *pinpointemail.PutEmailIdentityMailFromAttributesInput) (*request.Request, *pinpointemail.PutEmailIdentityMailFromAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.PutEmailIdentityMailFromAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributesRequest indicates an expected call of PutEmailIdentityMailFromAttributesRequest.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityMailFromAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributesRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityMailFromAttributesRequest), arg0)
}

// PutEmailIdentityMailFromAttributesWithContext mocks base method.
func (m *MockPinpointEmailAPI) PutEmailIdentityMailFromAttributesWithContext(arg0 context.Context, arg1 *pinpointemail.PutEmailIdentityMailFromAttributesInput, arg2 ...request.Option) (*pinpointemail.PutEmailIdentityMailFromAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.PutEmailIdentityMailFromAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributesWithContext indicates an expected call of PutEmailIdentityMailFromAttributesWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) PutEmailIdentityMailFromAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributesWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).PutEmailIdentityMailFromAttributesWithContext), varargs...)
}

// SendEmail mocks base method.
func (m *MockPinpointEmailAPI) SendEmail(arg0 *pinpointemail.SendEmailInput) (*pinpointemail.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0)
	ret0, _ := ret[0].(*pinpointemail.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockPinpointEmailAPIMockRecorder) SendEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockPinpointEmailAPI)(nil).SendEmail), arg0)
}

// SendEmailRequest mocks base method.
func (m *MockPinpointEmailAPI) SendEmailRequest(arg0 *pinpointemail.SendEmailInput) (*request.Request, *pinpointemail.SendEmailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.SendEmailOutput)
	return ret0, ret1
}

// SendEmailRequest indicates an expected call of SendEmailRequest.
func (mr *MockPinpointEmailAPIMockRecorder) SendEmailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).SendEmailRequest), arg0)
}

// SendEmailWithContext mocks base method.
func (m *MockPinpointEmailAPI) SendEmailWithContext(arg0 context.Context, arg1 *pinpointemail.SendEmailInput, arg2 ...request.Option) (*pinpointemail.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmailWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailWithContext indicates an expected call of SendEmailWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) SendEmailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).SendEmailWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockPinpointEmailAPI) TagResource(arg0 *pinpointemail.TagResourceInput) (*pinpointemail.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*pinpointemail.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockPinpointEmailAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockPinpointEmailAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockPinpointEmailAPI) TagResourceRequest(arg0 *pinpointemail.TagResourceInput) (*request.Request, *pinpointemail.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockPinpointEmailAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockPinpointEmailAPI) TagResourceWithContext(arg0 context.Context, arg1 *pinpointemail.TagResourceInput, arg2 ...request.Option) (*pinpointemail.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockPinpointEmailAPI) UntagResource(arg0 *pinpointemail.UntagResourceInput) (*pinpointemail.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*pinpointemail.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockPinpointEmailAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockPinpointEmailAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockPinpointEmailAPI) UntagResourceRequest(arg0 *pinpointemail.UntagResourceInput) (*request.Request, *pinpointemail.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockPinpointEmailAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockPinpointEmailAPI) UntagResourceWithContext(arg0 context.Context, arg1 *pinpointemail.UntagResourceInput, arg2 ...request.Option) (*pinpointemail.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateConfigurationSetEventDestination mocks base method.
func (m *MockPinpointEmailAPI) UpdateConfigurationSetEventDestination(arg0 *pinpointemail.UpdateConfigurationSetEventDestinationInput) (*pinpointemail.UpdateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*pinpointemail.UpdateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestination indicates an expected call of UpdateConfigurationSetEventDestination.
func (mr *MockPinpointEmailAPIMockRecorder) UpdateConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestination", reflect.TypeOf((*MockPinpointEmailAPI)(nil).UpdateConfigurationSetEventDestination), arg0)
}

// UpdateConfigurationSetEventDestinationRequest mocks base method.
func (m *MockPinpointEmailAPI) UpdateConfigurationSetEventDestinationRequest(arg0 *pinpointemail.UpdateConfigurationSetEventDestinationInput) (*request.Request, *pinpointemail.UpdateConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointemail.UpdateConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestinationRequest indicates an expected call of UpdateConfigurationSetEventDestinationRequest.
func (mr *MockPinpointEmailAPIMockRecorder) UpdateConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockPinpointEmailAPI)(nil).UpdateConfigurationSetEventDestinationRequest), arg0)
}

// UpdateConfigurationSetEventDestinationWithContext mocks base method.
func (m *MockPinpointEmailAPI) UpdateConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *pinpointemail.UpdateConfigurationSetEventDestinationInput, arg2 ...request.Option) (*pinpointemail.UpdateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointemail.UpdateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestinationWithContext indicates an expected call of UpdateConfigurationSetEventDestinationWithContext.
func (mr *MockPinpointEmailAPIMockRecorder) UpdateConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockPinpointEmailAPI)(nil).UpdateConfigurationSetEventDestinationWithContext), varargs...)
}

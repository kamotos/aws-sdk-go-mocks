// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/networkmanager/networkmanageriface (interfaces: NetworkManagerAPI)

// Package networkmanagermock is a generated GoMock package.
package networkmanagermock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	networkmanager "github.com/aws/aws-sdk-go/service/networkmanager"
	gomock "github.com/golang/mock/gomock"
)

// MockNetworkManagerAPI is a mock of NetworkManagerAPI interface.
type MockNetworkManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkManagerAPIMockRecorder
}

// MockNetworkManagerAPIMockRecorder is the mock recorder for MockNetworkManagerAPI.
type MockNetworkManagerAPIMockRecorder struct {
	mock *MockNetworkManagerAPI
}

// NewMockNetworkManagerAPI creates a new mock instance.
func NewMockNetworkManagerAPI(ctrl *gomock.Controller) *MockNetworkManagerAPI {
	mock := &MockNetworkManagerAPI{ctrl: ctrl}
	mock.recorder = &MockNetworkManagerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkManagerAPI) EXPECT() *MockNetworkManagerAPIMockRecorder {
	return m.recorder
}

// AcceptAttachment mocks base method.
func (m *MockNetworkManagerAPI) AcceptAttachment(arg0 *networkmanager.AcceptAttachmentInput) (*networkmanager.AcceptAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.AcceptAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptAttachment indicates an expected call of AcceptAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) AcceptAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AcceptAttachment), arg0)
}

// AcceptAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) AcceptAttachmentRequest(arg0 *networkmanager.AcceptAttachmentInput) (*request.Request, *networkmanager.AcceptAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.AcceptAttachmentOutput)
	return ret0, ret1
}

// AcceptAttachmentRequest indicates an expected call of AcceptAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) AcceptAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AcceptAttachmentRequest), arg0)
}

// AcceptAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) AcceptAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.AcceptAttachmentInput, arg2 ...request.Option) (*networkmanager.AcceptAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.AcceptAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptAttachmentWithContext indicates an expected call of AcceptAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) AcceptAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AcceptAttachmentWithContext), varargs...)
}

// AssociateConnectPeer mocks base method.
func (m *MockNetworkManagerAPI) AssociateConnectPeer(arg0 *networkmanager.AssociateConnectPeerInput) (*networkmanager.AssociateConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateConnectPeer", arg0)
	ret0, _ := ret[0].(*networkmanager.AssociateConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateConnectPeer indicates an expected call of AssociateConnectPeer.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateConnectPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateConnectPeer", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateConnectPeer), arg0)
}

// AssociateConnectPeerRequest mocks base method.
func (m *MockNetworkManagerAPI) AssociateConnectPeerRequest(arg0 *networkmanager.AssociateConnectPeerInput) (*request.Request, *networkmanager.AssociateConnectPeerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateConnectPeerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.AssociateConnectPeerOutput)
	return ret0, ret1
}

// AssociateConnectPeerRequest indicates an expected call of AssociateConnectPeerRequest.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateConnectPeerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateConnectPeerRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateConnectPeerRequest), arg0)
}

// AssociateConnectPeerWithContext mocks base method.
func (m *MockNetworkManagerAPI) AssociateConnectPeerWithContext(arg0 context.Context, arg1 *networkmanager.AssociateConnectPeerInput, arg2 ...request.Option) (*networkmanager.AssociateConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateConnectPeerWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.AssociateConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateConnectPeerWithContext indicates an expected call of AssociateConnectPeerWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateConnectPeerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateConnectPeerWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateConnectPeerWithContext), varargs...)
}

// AssociateCustomerGateway mocks base method.
func (m *MockNetworkManagerAPI) AssociateCustomerGateway(arg0 *networkmanager.AssociateCustomerGatewayInput) (*networkmanager.AssociateCustomerGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateCustomerGateway", arg0)
	ret0, _ := ret[0].(*networkmanager.AssociateCustomerGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateCustomerGateway indicates an expected call of AssociateCustomerGateway.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateCustomerGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCustomerGateway", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateCustomerGateway), arg0)
}

// AssociateCustomerGatewayRequest mocks base method.
func (m *MockNetworkManagerAPI) AssociateCustomerGatewayRequest(arg0 *networkmanager.AssociateCustomerGatewayInput) (*request.Request, *networkmanager.AssociateCustomerGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateCustomerGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.AssociateCustomerGatewayOutput)
	return ret0, ret1
}

// AssociateCustomerGatewayRequest indicates an expected call of AssociateCustomerGatewayRequest.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateCustomerGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCustomerGatewayRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateCustomerGatewayRequest), arg0)
}

// AssociateCustomerGatewayWithContext mocks base method.
func (m *MockNetworkManagerAPI) AssociateCustomerGatewayWithContext(arg0 context.Context, arg1 *networkmanager.AssociateCustomerGatewayInput, arg2 ...request.Option) (*networkmanager.AssociateCustomerGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateCustomerGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.AssociateCustomerGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateCustomerGatewayWithContext indicates an expected call of AssociateCustomerGatewayWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateCustomerGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCustomerGatewayWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateCustomerGatewayWithContext), varargs...)
}

// AssociateLink mocks base method.
func (m *MockNetworkManagerAPI) AssociateLink(arg0 *networkmanager.AssociateLinkInput) (*networkmanager.AssociateLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLink", arg0)
	ret0, _ := ret[0].(*networkmanager.AssociateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLink indicates an expected call of AssociateLink.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLink", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateLink), arg0)
}

// AssociateLinkRequest mocks base method.
func (m *MockNetworkManagerAPI) AssociateLinkRequest(arg0 *networkmanager.AssociateLinkInput) (*request.Request, *networkmanager.AssociateLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.AssociateLinkOutput)
	return ret0, ret1
}

// AssociateLinkRequest indicates an expected call of AssociateLinkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLinkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateLinkRequest), arg0)
}

// AssociateLinkWithContext mocks base method.
func (m *MockNetworkManagerAPI) AssociateLinkWithContext(arg0 context.Context, arg1 *networkmanager.AssociateLinkInput, arg2 ...request.Option) (*networkmanager.AssociateLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLinkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.AssociateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLinkWithContext indicates an expected call of AssociateLinkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLinkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateLinkWithContext), varargs...)
}

// AssociateTransitGatewayConnectPeer mocks base method.
func (m *MockNetworkManagerAPI) AssociateTransitGatewayConnectPeer(arg0 *networkmanager.AssociateTransitGatewayConnectPeerInput) (*networkmanager.AssociateTransitGatewayConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTransitGatewayConnectPeer", arg0)
	ret0, _ := ret[0].(*networkmanager.AssociateTransitGatewayConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTransitGatewayConnectPeer indicates an expected call of AssociateTransitGatewayConnectPeer.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateTransitGatewayConnectPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTransitGatewayConnectPeer", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateTransitGatewayConnectPeer), arg0)
}

// AssociateTransitGatewayConnectPeerRequest mocks base method.
func (m *MockNetworkManagerAPI) AssociateTransitGatewayConnectPeerRequest(arg0 *networkmanager.AssociateTransitGatewayConnectPeerInput) (*request.Request, *networkmanager.AssociateTransitGatewayConnectPeerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTransitGatewayConnectPeerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.AssociateTransitGatewayConnectPeerOutput)
	return ret0, ret1
}

// AssociateTransitGatewayConnectPeerRequest indicates an expected call of AssociateTransitGatewayConnectPeerRequest.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateTransitGatewayConnectPeerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTransitGatewayConnectPeerRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateTransitGatewayConnectPeerRequest), arg0)
}

// AssociateTransitGatewayConnectPeerWithContext mocks base method.
func (m *MockNetworkManagerAPI) AssociateTransitGatewayConnectPeerWithContext(arg0 context.Context, arg1 *networkmanager.AssociateTransitGatewayConnectPeerInput, arg2 ...request.Option) (*networkmanager.AssociateTransitGatewayConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateTransitGatewayConnectPeerWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.AssociateTransitGatewayConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTransitGatewayConnectPeerWithContext indicates an expected call of AssociateTransitGatewayConnectPeerWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) AssociateTransitGatewayConnectPeerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTransitGatewayConnectPeerWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).AssociateTransitGatewayConnectPeerWithContext), varargs...)
}

// CreateConnectAttachment mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectAttachment(arg0 *networkmanager.CreateConnectAttachmentInput) (*networkmanager.CreateConnectAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateConnectAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectAttachment indicates an expected call of CreateConnectAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectAttachment), arg0)
}

// CreateConnectAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectAttachmentRequest(arg0 *networkmanager.CreateConnectAttachmentInput) (*request.Request, *networkmanager.CreateConnectAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateConnectAttachmentOutput)
	return ret0, ret1
}

// CreateConnectAttachmentRequest indicates an expected call of CreateConnectAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectAttachmentRequest), arg0)
}

// CreateConnectAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.CreateConnectAttachmentInput, arg2 ...request.Option) (*networkmanager.CreateConnectAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateConnectAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectAttachmentWithContext indicates an expected call of CreateConnectAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectAttachmentWithContext), varargs...)
}

// CreateConnectPeer mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectPeer(arg0 *networkmanager.CreateConnectPeerInput) (*networkmanager.CreateConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectPeer", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectPeer indicates an expected call of CreateConnectPeer.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectPeer", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectPeer), arg0)
}

// CreateConnectPeerRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectPeerRequest(arg0 *networkmanager.CreateConnectPeerInput) (*request.Request, *networkmanager.CreateConnectPeerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectPeerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateConnectPeerOutput)
	return ret0, ret1
}

// CreateConnectPeerRequest indicates an expected call of CreateConnectPeerRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectPeerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectPeerRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectPeerRequest), arg0)
}

// CreateConnectPeerWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectPeerWithContext(arg0 context.Context, arg1 *networkmanager.CreateConnectPeerInput, arg2 ...request.Option) (*networkmanager.CreateConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectPeerWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectPeerWithContext indicates an expected call of CreateConnectPeerWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectPeerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectPeerWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectPeerWithContext), varargs...)
}

// CreateConnection mocks base method.
func (m *MockNetworkManagerAPI) CreateConnection(arg0 *networkmanager.CreateConnectionInput) (*networkmanager.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnection), arg0)
}

// CreateConnectionRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectionRequest(arg0 *networkmanager.CreateConnectionInput) (*request.Request, *networkmanager.CreateConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateConnectionOutput)
	return ret0, ret1
}

// CreateConnectionRequest indicates an expected call of CreateConnectionRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectionRequest), arg0)
}

// CreateConnectionWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateConnectionWithContext(arg0 context.Context, arg1 *networkmanager.CreateConnectionInput, arg2 ...request.Option) (*networkmanager.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectionWithContext indicates an expected call of CreateConnectionWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateConnectionWithContext), varargs...)
}

// CreateCoreNetwork mocks base method.
func (m *MockNetworkManagerAPI) CreateCoreNetwork(arg0 *networkmanager.CreateCoreNetworkInput) (*networkmanager.CreateCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoreNetwork", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoreNetwork indicates an expected call of CreateCoreNetwork.
func (mr *MockNetworkManagerAPIMockRecorder) CreateCoreNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoreNetwork", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateCoreNetwork), arg0)
}

// CreateCoreNetworkRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateCoreNetworkRequest(arg0 *networkmanager.CreateCoreNetworkInput) (*request.Request, *networkmanager.CreateCoreNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoreNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateCoreNetworkOutput)
	return ret0, ret1
}

// CreateCoreNetworkRequest indicates an expected call of CreateCoreNetworkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateCoreNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoreNetworkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateCoreNetworkRequest), arg0)
}

// CreateCoreNetworkWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateCoreNetworkWithContext(arg0 context.Context, arg1 *networkmanager.CreateCoreNetworkInput, arg2 ...request.Option) (*networkmanager.CreateCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCoreNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoreNetworkWithContext indicates an expected call of CreateCoreNetworkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateCoreNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoreNetworkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateCoreNetworkWithContext), varargs...)
}

// CreateDevice mocks base method.
func (m *MockNetworkManagerAPI) CreateDevice(arg0 *networkmanager.CreateDeviceInput) (*networkmanager.CreateDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockNetworkManagerAPIMockRecorder) CreateDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateDevice), arg0)
}

// CreateDeviceRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateDeviceRequest(arg0 *networkmanager.CreateDeviceInput) (*request.Request, *networkmanager.CreateDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateDeviceOutput)
	return ret0, ret1
}

// CreateDeviceRequest indicates an expected call of CreateDeviceRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateDeviceRequest), arg0)
}

// CreateDeviceWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateDeviceWithContext(arg0 context.Context, arg1 *networkmanager.CreateDeviceInput, arg2 ...request.Option) (*networkmanager.CreateDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceWithContext indicates an expected call of CreateDeviceWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateDeviceWithContext), varargs...)
}

// CreateGlobalNetwork mocks base method.
func (m *MockNetworkManagerAPI) CreateGlobalNetwork(arg0 *networkmanager.CreateGlobalNetworkInput) (*networkmanager.CreateGlobalNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlobalNetwork", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateGlobalNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlobalNetwork indicates an expected call of CreateGlobalNetwork.
func (mr *MockNetworkManagerAPIMockRecorder) CreateGlobalNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalNetwork", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateGlobalNetwork), arg0)
}

// CreateGlobalNetworkRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateGlobalNetworkRequest(arg0 *networkmanager.CreateGlobalNetworkInput) (*request.Request, *networkmanager.CreateGlobalNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlobalNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateGlobalNetworkOutput)
	return ret0, ret1
}

// CreateGlobalNetworkRequest indicates an expected call of CreateGlobalNetworkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateGlobalNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalNetworkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateGlobalNetworkRequest), arg0)
}

// CreateGlobalNetworkWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateGlobalNetworkWithContext(arg0 context.Context, arg1 *networkmanager.CreateGlobalNetworkInput, arg2 ...request.Option) (*networkmanager.CreateGlobalNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGlobalNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateGlobalNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlobalNetworkWithContext indicates an expected call of CreateGlobalNetworkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateGlobalNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalNetworkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateGlobalNetworkWithContext), varargs...)
}

// CreateLink mocks base method.
func (m *MockNetworkManagerAPI) CreateLink(arg0 *networkmanager.CreateLinkInput) (*networkmanager.CreateLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockNetworkManagerAPIMockRecorder) CreateLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateLink), arg0)
}

// CreateLinkRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateLinkRequest(arg0 *networkmanager.CreateLinkInput) (*request.Request, *networkmanager.CreateLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateLinkOutput)
	return ret0, ret1
}

// CreateLinkRequest indicates an expected call of CreateLinkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateLinkRequest), arg0)
}

// CreateLinkWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateLinkWithContext(arg0 context.Context, arg1 *networkmanager.CreateLinkInput, arg2 ...request.Option) (*networkmanager.CreateLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLinkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkWithContext indicates an expected call of CreateLinkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateLinkWithContext), varargs...)
}

// CreateSite mocks base method.
func (m *MockNetworkManagerAPI) CreateSite(arg0 *networkmanager.CreateSiteInput) (*networkmanager.CreateSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSite", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSite indicates an expected call of CreateSite.
func (mr *MockNetworkManagerAPIMockRecorder) CreateSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSite", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateSite), arg0)
}

// CreateSiteRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateSiteRequest(arg0 *networkmanager.CreateSiteInput) (*request.Request, *networkmanager.CreateSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateSiteOutput)
	return ret0, ret1
}

// CreateSiteRequest indicates an expected call of CreateSiteRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateSiteRequest), arg0)
}

// CreateSiteToSiteVpnAttachment mocks base method.
func (m *MockNetworkManagerAPI) CreateSiteToSiteVpnAttachment(arg0 *networkmanager.CreateSiteToSiteVpnAttachmentInput) (*networkmanager.CreateSiteToSiteVpnAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSiteToSiteVpnAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateSiteToSiteVpnAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSiteToSiteVpnAttachment indicates an expected call of CreateSiteToSiteVpnAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) CreateSiteToSiteVpnAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteToSiteVpnAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateSiteToSiteVpnAttachment), arg0)
}

// CreateSiteToSiteVpnAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateSiteToSiteVpnAttachmentRequest(arg0 *networkmanager.CreateSiteToSiteVpnAttachmentInput) (*request.Request, *networkmanager.CreateSiteToSiteVpnAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSiteToSiteVpnAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateSiteToSiteVpnAttachmentOutput)
	return ret0, ret1
}

// CreateSiteToSiteVpnAttachmentRequest indicates an expected call of CreateSiteToSiteVpnAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateSiteToSiteVpnAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteToSiteVpnAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateSiteToSiteVpnAttachmentRequest), arg0)
}

// CreateSiteToSiteVpnAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateSiteToSiteVpnAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.CreateSiteToSiteVpnAttachmentInput, arg2 ...request.Option) (*networkmanager.CreateSiteToSiteVpnAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSiteToSiteVpnAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateSiteToSiteVpnAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSiteToSiteVpnAttachmentWithContext indicates an expected call of CreateSiteToSiteVpnAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateSiteToSiteVpnAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteToSiteVpnAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateSiteToSiteVpnAttachmentWithContext), varargs...)
}

// CreateSiteWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateSiteWithContext(arg0 context.Context, arg1 *networkmanager.CreateSiteInput, arg2 ...request.Option) (*networkmanager.CreateSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSiteWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSiteWithContext indicates an expected call of CreateSiteWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSiteWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateSiteWithContext), varargs...)
}

// CreateVpcAttachment mocks base method.
func (m *MockNetworkManagerAPI) CreateVpcAttachment(arg0 *networkmanager.CreateVpcAttachmentInput) (*networkmanager.CreateVpcAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.CreateVpcAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcAttachment indicates an expected call of CreateVpcAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) CreateVpcAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateVpcAttachment), arg0)
}

// CreateVpcAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) CreateVpcAttachmentRequest(arg0 *networkmanager.CreateVpcAttachmentInput) (*request.Request, *networkmanager.CreateVpcAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.CreateVpcAttachmentOutput)
	return ret0, ret1
}

// CreateVpcAttachmentRequest indicates an expected call of CreateVpcAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) CreateVpcAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateVpcAttachmentRequest), arg0)
}

// CreateVpcAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) CreateVpcAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.CreateVpcAttachmentInput, arg2 ...request.Option) (*networkmanager.CreateVpcAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVpcAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.CreateVpcAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcAttachmentWithContext indicates an expected call of CreateVpcAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) CreateVpcAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).CreateVpcAttachmentWithContext), varargs...)
}

// DeleteAttachment mocks base method.
func (m *MockNetworkManagerAPI) DeleteAttachment(arg0 *networkmanager.DeleteAttachmentInput) (*networkmanager.DeleteAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteAttachment), arg0)
}

// DeleteAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteAttachmentRequest(arg0 *networkmanager.DeleteAttachmentInput) (*request.Request, *networkmanager.DeleteAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteAttachmentOutput)
	return ret0, ret1
}

// DeleteAttachmentRequest indicates an expected call of DeleteAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteAttachmentRequest), arg0)
}

// DeleteAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.DeleteAttachmentInput, arg2 ...request.Option) (*networkmanager.DeleteAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachmentWithContext indicates an expected call of DeleteAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteAttachmentWithContext), varargs...)
}

// DeleteConnectPeer mocks base method.
func (m *MockNetworkManagerAPI) DeleteConnectPeer(arg0 *networkmanager.DeleteConnectPeerInput) (*networkmanager.DeleteConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectPeer", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectPeer indicates an expected call of DeleteConnectPeer.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteConnectPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectPeer", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteConnectPeer), arg0)
}

// DeleteConnectPeerRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteConnectPeerRequest(arg0 *networkmanager.DeleteConnectPeerInput) (*request.Request, *networkmanager.DeleteConnectPeerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectPeerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteConnectPeerOutput)
	return ret0, ret1
}

// DeleteConnectPeerRequest indicates an expected call of DeleteConnectPeerRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteConnectPeerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectPeerRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteConnectPeerRequest), arg0)
}

// DeleteConnectPeerWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteConnectPeerWithContext(arg0 context.Context, arg1 *networkmanager.DeleteConnectPeerInput, arg2 ...request.Option) (*networkmanager.DeleteConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectPeerWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectPeerWithContext indicates an expected call of DeleteConnectPeerWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteConnectPeerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectPeerWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteConnectPeerWithContext), varargs...)
}

// DeleteConnection mocks base method.
func (m *MockNetworkManagerAPI) DeleteConnection(arg0 *networkmanager.DeleteConnectionInput) (*networkmanager.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnection indicates an expected call of DeleteConnection.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteConnection), arg0)
}

// DeleteConnectionRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteConnectionRequest(arg0 *networkmanager.DeleteConnectionInput) (*request.Request, *networkmanager.DeleteConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteConnectionOutput)
	return ret0, ret1
}

// DeleteConnectionRequest indicates an expected call of DeleteConnectionRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteConnectionRequest), arg0)
}

// DeleteConnectionWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteConnectionWithContext(arg0 context.Context, arg1 *networkmanager.DeleteConnectionInput, arg2 ...request.Option) (*networkmanager.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectionWithContext indicates an expected call of DeleteConnectionWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteConnectionWithContext), varargs...)
}

// DeleteCoreNetwork mocks base method.
func (m *MockNetworkManagerAPI) DeleteCoreNetwork(arg0 *networkmanager.DeleteCoreNetworkInput) (*networkmanager.DeleteCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoreNetwork", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoreNetwork indicates an expected call of DeleteCoreNetwork.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteCoreNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoreNetwork", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteCoreNetwork), arg0)
}

// DeleteCoreNetworkPolicyVersion mocks base method.
func (m *MockNetworkManagerAPI) DeleteCoreNetworkPolicyVersion(arg0 *networkmanager.DeleteCoreNetworkPolicyVersionInput) (*networkmanager.DeleteCoreNetworkPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoreNetworkPolicyVersion", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteCoreNetworkPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoreNetworkPolicyVersion indicates an expected call of DeleteCoreNetworkPolicyVersion.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteCoreNetworkPolicyVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoreNetworkPolicyVersion", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteCoreNetworkPolicyVersion), arg0)
}

// DeleteCoreNetworkPolicyVersionRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteCoreNetworkPolicyVersionRequest(arg0 *networkmanager.DeleteCoreNetworkPolicyVersionInput) (*request.Request, *networkmanager.DeleteCoreNetworkPolicyVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoreNetworkPolicyVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteCoreNetworkPolicyVersionOutput)
	return ret0, ret1
}

// DeleteCoreNetworkPolicyVersionRequest indicates an expected call of DeleteCoreNetworkPolicyVersionRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteCoreNetworkPolicyVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoreNetworkPolicyVersionRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteCoreNetworkPolicyVersionRequest), arg0)
}

// DeleteCoreNetworkPolicyVersionWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteCoreNetworkPolicyVersionWithContext(arg0 context.Context, arg1 *networkmanager.DeleteCoreNetworkPolicyVersionInput, arg2 ...request.Option) (*networkmanager.DeleteCoreNetworkPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCoreNetworkPolicyVersionWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteCoreNetworkPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoreNetworkPolicyVersionWithContext indicates an expected call of DeleteCoreNetworkPolicyVersionWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteCoreNetworkPolicyVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoreNetworkPolicyVersionWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteCoreNetworkPolicyVersionWithContext), varargs...)
}

// DeleteCoreNetworkRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteCoreNetworkRequest(arg0 *networkmanager.DeleteCoreNetworkInput) (*request.Request, *networkmanager.DeleteCoreNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoreNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteCoreNetworkOutput)
	return ret0, ret1
}

// DeleteCoreNetworkRequest indicates an expected call of DeleteCoreNetworkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteCoreNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoreNetworkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteCoreNetworkRequest), arg0)
}

// DeleteCoreNetworkWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteCoreNetworkWithContext(arg0 context.Context, arg1 *networkmanager.DeleteCoreNetworkInput, arg2 ...request.Option) (*networkmanager.DeleteCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCoreNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCoreNetworkWithContext indicates an expected call of DeleteCoreNetworkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteCoreNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoreNetworkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteCoreNetworkWithContext), varargs...)
}

// DeleteDevice mocks base method.
func (m *MockNetworkManagerAPI) DeleteDevice(arg0 *networkmanager.DeleteDeviceInput) (*networkmanager.DeleteDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteDevice), arg0)
}

// DeleteDeviceRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteDeviceRequest(arg0 *networkmanager.DeleteDeviceInput) (*request.Request, *networkmanager.DeleteDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteDeviceOutput)
	return ret0, ret1
}

// DeleteDeviceRequest indicates an expected call of DeleteDeviceRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteDeviceRequest), arg0)
}

// DeleteDeviceWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteDeviceWithContext(arg0 context.Context, arg1 *networkmanager.DeleteDeviceInput, arg2 ...request.Option) (*networkmanager.DeleteDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeviceWithContext indicates an expected call of DeleteDeviceWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteDeviceWithContext), varargs...)
}

// DeleteGlobalNetwork mocks base method.
func (m *MockNetworkManagerAPI) DeleteGlobalNetwork(arg0 *networkmanager.DeleteGlobalNetworkInput) (*networkmanager.DeleteGlobalNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlobalNetwork", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteGlobalNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGlobalNetwork indicates an expected call of DeleteGlobalNetwork.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteGlobalNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlobalNetwork", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteGlobalNetwork), arg0)
}

// DeleteGlobalNetworkRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteGlobalNetworkRequest(arg0 *networkmanager.DeleteGlobalNetworkInput) (*request.Request, *networkmanager.DeleteGlobalNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlobalNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteGlobalNetworkOutput)
	return ret0, ret1
}

// DeleteGlobalNetworkRequest indicates an expected call of DeleteGlobalNetworkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteGlobalNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlobalNetworkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteGlobalNetworkRequest), arg0)
}

// DeleteGlobalNetworkWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteGlobalNetworkWithContext(arg0 context.Context, arg1 *networkmanager.DeleteGlobalNetworkInput, arg2 ...request.Option) (*networkmanager.DeleteGlobalNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGlobalNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteGlobalNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGlobalNetworkWithContext indicates an expected call of DeleteGlobalNetworkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteGlobalNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlobalNetworkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteGlobalNetworkWithContext), varargs...)
}

// DeleteLink mocks base method.
func (m *MockNetworkManagerAPI) DeleteLink(arg0 *networkmanager.DeleteLinkInput) (*networkmanager.DeleteLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLink", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLink indicates an expected call of DeleteLink.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLink", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteLink), arg0)
}

// DeleteLinkRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteLinkRequest(arg0 *networkmanager.DeleteLinkInput) (*request.Request, *networkmanager.DeleteLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteLinkOutput)
	return ret0, ret1
}

// DeleteLinkRequest indicates an expected call of DeleteLinkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteLinkRequest), arg0)
}

// DeleteLinkWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteLinkWithContext(arg0 context.Context, arg1 *networkmanager.DeleteLinkInput, arg2 ...request.Option) (*networkmanager.DeleteLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLinkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLinkWithContext indicates an expected call of DeleteLinkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteLinkWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockNetworkManagerAPI) DeleteResourcePolicy(arg0 *networkmanager.DeleteResourcePolicyInput) (*networkmanager.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteResourcePolicyRequest(arg0 *networkmanager.DeleteResourcePolicyInput) (*request.Request, *networkmanager.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteResourcePolicyWithContext(arg0 context.Context, arg1 *networkmanager.DeleteResourcePolicyInput, arg2 ...request.Option) (*networkmanager.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteSite mocks base method.
func (m *MockNetworkManagerAPI) DeleteSite(arg0 *networkmanager.DeleteSiteInput) (*networkmanager.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSite", arg0)
	ret0, _ := ret[0].(*networkmanager.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSite indicates an expected call of DeleteSite.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSite", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteSite), arg0)
}

// DeleteSiteRequest mocks base method.
func (m *MockNetworkManagerAPI) DeleteSiteRequest(arg0 *networkmanager.DeleteSiteInput) (*request.Request, *networkmanager.DeleteSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeleteSiteOutput)
	return ret0, ret1
}

// DeleteSiteRequest indicates an expected call of DeleteSiteRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteSiteRequest), arg0)
}

// DeleteSiteWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeleteSiteWithContext(arg0 context.Context, arg1 *networkmanager.DeleteSiteInput, arg2 ...request.Option) (*networkmanager.DeleteSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSiteWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeleteSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSiteWithContext indicates an expected call of DeleteSiteWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeleteSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSiteWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeleteSiteWithContext), varargs...)
}

// DeregisterTransitGateway mocks base method.
func (m *MockNetworkManagerAPI) DeregisterTransitGateway(arg0 *networkmanager.DeregisterTransitGatewayInput) (*networkmanager.DeregisterTransitGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTransitGateway", arg0)
	ret0, _ := ret[0].(*networkmanager.DeregisterTransitGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterTransitGateway indicates an expected call of DeregisterTransitGateway.
func (mr *MockNetworkManagerAPIMockRecorder) DeregisterTransitGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTransitGateway", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeregisterTransitGateway), arg0)
}

// DeregisterTransitGatewayRequest mocks base method.
func (m *MockNetworkManagerAPI) DeregisterTransitGatewayRequest(arg0 *networkmanager.DeregisterTransitGatewayInput) (*request.Request, *networkmanager.DeregisterTransitGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterTransitGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DeregisterTransitGatewayOutput)
	return ret0, ret1
}

// DeregisterTransitGatewayRequest indicates an expected call of DeregisterTransitGatewayRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DeregisterTransitGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTransitGatewayRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeregisterTransitGatewayRequest), arg0)
}

// DeregisterTransitGatewayWithContext mocks base method.
func (m *MockNetworkManagerAPI) DeregisterTransitGatewayWithContext(arg0 context.Context, arg1 *networkmanager.DeregisterTransitGatewayInput, arg2 ...request.Option) (*networkmanager.DeregisterTransitGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterTransitGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DeregisterTransitGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterTransitGatewayWithContext indicates an expected call of DeregisterTransitGatewayWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DeregisterTransitGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterTransitGatewayWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DeregisterTransitGatewayWithContext), varargs...)
}

// DescribeGlobalNetworks mocks base method.
func (m *MockNetworkManagerAPI) DescribeGlobalNetworks(arg0 *networkmanager.DescribeGlobalNetworksInput) (*networkmanager.DescribeGlobalNetworksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalNetworks", arg0)
	ret0, _ := ret[0].(*networkmanager.DescribeGlobalNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalNetworks indicates an expected call of DescribeGlobalNetworks.
func (mr *MockNetworkManagerAPIMockRecorder) DescribeGlobalNetworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalNetworks", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DescribeGlobalNetworks), arg0)
}

// DescribeGlobalNetworksPages mocks base method.
func (m *MockNetworkManagerAPI) DescribeGlobalNetworksPages(arg0 *networkmanager.DescribeGlobalNetworksInput, arg1 func(*networkmanager.DescribeGlobalNetworksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalNetworksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeGlobalNetworksPages indicates an expected call of DescribeGlobalNetworksPages.
func (mr *MockNetworkManagerAPIMockRecorder) DescribeGlobalNetworksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalNetworksPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DescribeGlobalNetworksPages), arg0, arg1)
}

// DescribeGlobalNetworksPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) DescribeGlobalNetworksPagesWithContext(arg0 context.Context, arg1 *networkmanager.DescribeGlobalNetworksInput, arg2 func(*networkmanager.DescribeGlobalNetworksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalNetworksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeGlobalNetworksPagesWithContext indicates an expected call of DescribeGlobalNetworksPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DescribeGlobalNetworksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalNetworksPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DescribeGlobalNetworksPagesWithContext), varargs...)
}

// DescribeGlobalNetworksRequest mocks base method.
func (m *MockNetworkManagerAPI) DescribeGlobalNetworksRequest(arg0 *networkmanager.DescribeGlobalNetworksInput) (*request.Request, *networkmanager.DescribeGlobalNetworksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalNetworksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DescribeGlobalNetworksOutput)
	return ret0, ret1
}

// DescribeGlobalNetworksRequest indicates an expected call of DescribeGlobalNetworksRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DescribeGlobalNetworksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalNetworksRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DescribeGlobalNetworksRequest), arg0)
}

// DescribeGlobalNetworksWithContext mocks base method.
func (m *MockNetworkManagerAPI) DescribeGlobalNetworksWithContext(arg0 context.Context, arg1 *networkmanager.DescribeGlobalNetworksInput, arg2 ...request.Option) (*networkmanager.DescribeGlobalNetworksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalNetworksWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DescribeGlobalNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalNetworksWithContext indicates an expected call of DescribeGlobalNetworksWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DescribeGlobalNetworksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalNetworksWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DescribeGlobalNetworksWithContext), varargs...)
}

// DisassociateConnectPeer mocks base method.
func (m *MockNetworkManagerAPI) DisassociateConnectPeer(arg0 *networkmanager.DisassociateConnectPeerInput) (*networkmanager.DisassociateConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateConnectPeer", arg0)
	ret0, _ := ret[0].(*networkmanager.DisassociateConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateConnectPeer indicates an expected call of DisassociateConnectPeer.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateConnectPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectPeer", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateConnectPeer), arg0)
}

// DisassociateConnectPeerRequest mocks base method.
func (m *MockNetworkManagerAPI) DisassociateConnectPeerRequest(arg0 *networkmanager.DisassociateConnectPeerInput) (*request.Request, *networkmanager.DisassociateConnectPeerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateConnectPeerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DisassociateConnectPeerOutput)
	return ret0, ret1
}

// DisassociateConnectPeerRequest indicates an expected call of DisassociateConnectPeerRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateConnectPeerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectPeerRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateConnectPeerRequest), arg0)
}

// DisassociateConnectPeerWithContext mocks base method.
func (m *MockNetworkManagerAPI) DisassociateConnectPeerWithContext(arg0 context.Context, arg1 *networkmanager.DisassociateConnectPeerInput, arg2 ...request.Option) (*networkmanager.DisassociateConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateConnectPeerWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DisassociateConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateConnectPeerWithContext indicates an expected call of DisassociateConnectPeerWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateConnectPeerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectPeerWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateConnectPeerWithContext), varargs...)
}

// DisassociateCustomerGateway mocks base method.
func (m *MockNetworkManagerAPI) DisassociateCustomerGateway(arg0 *networkmanager.DisassociateCustomerGatewayInput) (*networkmanager.DisassociateCustomerGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateCustomerGateway", arg0)
	ret0, _ := ret[0].(*networkmanager.DisassociateCustomerGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateCustomerGateway indicates an expected call of DisassociateCustomerGateway.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateCustomerGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCustomerGateway", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateCustomerGateway), arg0)
}

// DisassociateCustomerGatewayRequest mocks base method.
func (m *MockNetworkManagerAPI) DisassociateCustomerGatewayRequest(arg0 *networkmanager.DisassociateCustomerGatewayInput) (*request.Request, *networkmanager.DisassociateCustomerGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateCustomerGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DisassociateCustomerGatewayOutput)
	return ret0, ret1
}

// DisassociateCustomerGatewayRequest indicates an expected call of DisassociateCustomerGatewayRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateCustomerGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCustomerGatewayRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateCustomerGatewayRequest), arg0)
}

// DisassociateCustomerGatewayWithContext mocks base method.
func (m *MockNetworkManagerAPI) DisassociateCustomerGatewayWithContext(arg0 context.Context, arg1 *networkmanager.DisassociateCustomerGatewayInput, arg2 ...request.Option) (*networkmanager.DisassociateCustomerGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateCustomerGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DisassociateCustomerGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateCustomerGatewayWithContext indicates an expected call of DisassociateCustomerGatewayWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateCustomerGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCustomerGatewayWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateCustomerGatewayWithContext), varargs...)
}

// DisassociateLink mocks base method.
func (m *MockNetworkManagerAPI) DisassociateLink(arg0 *networkmanager.DisassociateLinkInput) (*networkmanager.DisassociateLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLink", arg0)
	ret0, _ := ret[0].(*networkmanager.DisassociateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLink indicates an expected call of DisassociateLink.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLink", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateLink), arg0)
}

// DisassociateLinkRequest mocks base method.
func (m *MockNetworkManagerAPI) DisassociateLinkRequest(arg0 *networkmanager.DisassociateLinkInput) (*request.Request, *networkmanager.DisassociateLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DisassociateLinkOutput)
	return ret0, ret1
}

// DisassociateLinkRequest indicates an expected call of DisassociateLinkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLinkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateLinkRequest), arg0)
}

// DisassociateLinkWithContext mocks base method.
func (m *MockNetworkManagerAPI) DisassociateLinkWithContext(arg0 context.Context, arg1 *networkmanager.DisassociateLinkInput, arg2 ...request.Option) (*networkmanager.DisassociateLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLinkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DisassociateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLinkWithContext indicates an expected call of DisassociateLinkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLinkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateLinkWithContext), varargs...)
}

// DisassociateTransitGatewayConnectPeer mocks base method.
func (m *MockNetworkManagerAPI) DisassociateTransitGatewayConnectPeer(arg0 *networkmanager.DisassociateTransitGatewayConnectPeerInput) (*networkmanager.DisassociateTransitGatewayConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateTransitGatewayConnectPeer", arg0)
	ret0, _ := ret[0].(*networkmanager.DisassociateTransitGatewayConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateTransitGatewayConnectPeer indicates an expected call of DisassociateTransitGatewayConnectPeer.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateTransitGatewayConnectPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTransitGatewayConnectPeer", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateTransitGatewayConnectPeer), arg0)
}

// DisassociateTransitGatewayConnectPeerRequest mocks base method.
func (m *MockNetworkManagerAPI) DisassociateTransitGatewayConnectPeerRequest(arg0 *networkmanager.DisassociateTransitGatewayConnectPeerInput) (*request.Request, *networkmanager.DisassociateTransitGatewayConnectPeerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateTransitGatewayConnectPeerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.DisassociateTransitGatewayConnectPeerOutput)
	return ret0, ret1
}

// DisassociateTransitGatewayConnectPeerRequest indicates an expected call of DisassociateTransitGatewayConnectPeerRequest.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateTransitGatewayConnectPeerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTransitGatewayConnectPeerRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateTransitGatewayConnectPeerRequest), arg0)
}

// DisassociateTransitGatewayConnectPeerWithContext mocks base method.
func (m *MockNetworkManagerAPI) DisassociateTransitGatewayConnectPeerWithContext(arg0 context.Context, arg1 *networkmanager.DisassociateTransitGatewayConnectPeerInput, arg2 ...request.Option) (*networkmanager.DisassociateTransitGatewayConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateTransitGatewayConnectPeerWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.DisassociateTransitGatewayConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateTransitGatewayConnectPeerWithContext indicates an expected call of DisassociateTransitGatewayConnectPeerWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) DisassociateTransitGatewayConnectPeerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTransitGatewayConnectPeerWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).DisassociateTransitGatewayConnectPeerWithContext), varargs...)
}

// ExecuteCoreNetworkChangeSet mocks base method.
func (m *MockNetworkManagerAPI) ExecuteCoreNetworkChangeSet(arg0 *networkmanager.ExecuteCoreNetworkChangeSetInput) (*networkmanager.ExecuteCoreNetworkChangeSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCoreNetworkChangeSet", arg0)
	ret0, _ := ret[0].(*networkmanager.ExecuteCoreNetworkChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCoreNetworkChangeSet indicates an expected call of ExecuteCoreNetworkChangeSet.
func (mr *MockNetworkManagerAPIMockRecorder) ExecuteCoreNetworkChangeSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCoreNetworkChangeSet", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ExecuteCoreNetworkChangeSet), arg0)
}

// ExecuteCoreNetworkChangeSetRequest mocks base method.
func (m *MockNetworkManagerAPI) ExecuteCoreNetworkChangeSetRequest(arg0 *networkmanager.ExecuteCoreNetworkChangeSetInput) (*request.Request, *networkmanager.ExecuteCoreNetworkChangeSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCoreNetworkChangeSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.ExecuteCoreNetworkChangeSetOutput)
	return ret0, ret1
}

// ExecuteCoreNetworkChangeSetRequest indicates an expected call of ExecuteCoreNetworkChangeSetRequest.
func (mr *MockNetworkManagerAPIMockRecorder) ExecuteCoreNetworkChangeSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCoreNetworkChangeSetRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ExecuteCoreNetworkChangeSetRequest), arg0)
}

// ExecuteCoreNetworkChangeSetWithContext mocks base method.
func (m *MockNetworkManagerAPI) ExecuteCoreNetworkChangeSetWithContext(arg0 context.Context, arg1 *networkmanager.ExecuteCoreNetworkChangeSetInput, arg2 ...request.Option) (*networkmanager.ExecuteCoreNetworkChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteCoreNetworkChangeSetWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.ExecuteCoreNetworkChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCoreNetworkChangeSetWithContext indicates an expected call of ExecuteCoreNetworkChangeSetWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ExecuteCoreNetworkChangeSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCoreNetworkChangeSetWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ExecuteCoreNetworkChangeSetWithContext), varargs...)
}

// GetConnectAttachment mocks base method.
func (m *MockNetworkManagerAPI) GetConnectAttachment(arg0 *networkmanager.GetConnectAttachmentInput) (*networkmanager.GetConnectAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.GetConnectAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectAttachment indicates an expected call of GetConnectAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectAttachment), arg0)
}

// GetConnectAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) GetConnectAttachmentRequest(arg0 *networkmanager.GetConnectAttachmentInput) (*request.Request, *networkmanager.GetConnectAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetConnectAttachmentOutput)
	return ret0, ret1
}

// GetConnectAttachmentRequest indicates an expected call of GetConnectAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectAttachmentRequest), arg0)
}

// GetConnectAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetConnectAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.GetConnectAttachmentInput, arg2 ...request.Option) (*networkmanager.GetConnectAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectAttachmentWithContext indicates an expected call of GetConnectAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectAttachmentWithContext), varargs...)
}

// GetConnectPeer mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeer(arg0 *networkmanager.GetConnectPeerInput) (*networkmanager.GetConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectPeer", arg0)
	ret0, _ := ret[0].(*networkmanager.GetConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectPeer indicates an expected call of GetConnectPeer.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeer", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeer), arg0)
}

// GetConnectPeerAssociations mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeerAssociations(arg0 *networkmanager.GetConnectPeerAssociationsInput) (*networkmanager.GetConnectPeerAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectPeerAssociations", arg0)
	ret0, _ := ret[0].(*networkmanager.GetConnectPeerAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectPeerAssociations indicates an expected call of GetConnectPeerAssociations.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeerAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerAssociations", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeerAssociations), arg0)
}

// GetConnectPeerAssociationsPages mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeerAssociationsPages(arg0 *networkmanager.GetConnectPeerAssociationsInput, arg1 func(*networkmanager.GetConnectPeerAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectPeerAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectPeerAssociationsPages indicates an expected call of GetConnectPeerAssociationsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeerAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerAssociationsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeerAssociationsPages), arg0, arg1)
}

// GetConnectPeerAssociationsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeerAssociationsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetConnectPeerAssociationsInput, arg2 func(*networkmanager.GetConnectPeerAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectPeerAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectPeerAssociationsPagesWithContext indicates an expected call of GetConnectPeerAssociationsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeerAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerAssociationsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeerAssociationsPagesWithContext), varargs...)
}

// GetConnectPeerAssociationsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeerAssociationsRequest(arg0 *networkmanager.GetConnectPeerAssociationsInput) (*request.Request, *networkmanager.GetConnectPeerAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectPeerAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetConnectPeerAssociationsOutput)
	return ret0, ret1
}

// GetConnectPeerAssociationsRequest indicates an expected call of GetConnectPeerAssociationsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeerAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerAssociationsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeerAssociationsRequest), arg0)
}

// GetConnectPeerAssociationsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeerAssociationsWithContext(arg0 context.Context, arg1 *networkmanager.GetConnectPeerAssociationsInput, arg2 ...request.Option) (*networkmanager.GetConnectPeerAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectPeerAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectPeerAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectPeerAssociationsWithContext indicates an expected call of GetConnectPeerAssociationsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeerAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerAssociationsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeerAssociationsWithContext), varargs...)
}

// GetConnectPeerRequest mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeerRequest(arg0 *networkmanager.GetConnectPeerInput) (*request.Request, *networkmanager.GetConnectPeerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectPeerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetConnectPeerOutput)
	return ret0, ret1
}

// GetConnectPeerRequest indicates an expected call of GetConnectPeerRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeerRequest), arg0)
}

// GetConnectPeerWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetConnectPeerWithContext(arg0 context.Context, arg1 *networkmanager.GetConnectPeerInput, arg2 ...request.Option) (*networkmanager.GetConnectPeerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectPeerWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectPeerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectPeerWithContext indicates an expected call of GetConnectPeerWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectPeerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectPeerWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectPeerWithContext), varargs...)
}

// GetConnections mocks base method.
func (m *MockNetworkManagerAPI) GetConnections(arg0 *networkmanager.GetConnectionsInput) (*networkmanager.GetConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnections", arg0)
	ret0, _ := ret[0].(*networkmanager.GetConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnections indicates an expected call of GetConnections.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnections", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnections), arg0)
}

// GetConnectionsPages mocks base method.
func (m *MockNetworkManagerAPI) GetConnectionsPages(arg0 *networkmanager.GetConnectionsInput, arg1 func(*networkmanager.GetConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectionsPages indicates an expected call of GetConnectionsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectionsPages), arg0, arg1)
}

// GetConnectionsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetConnectionsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetConnectionsInput, arg2 func(*networkmanager.GetConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectionsPagesWithContext indicates an expected call of GetConnectionsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectionsPagesWithContext), varargs...)
}

// GetConnectionsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetConnectionsRequest(arg0 *networkmanager.GetConnectionsInput) (*request.Request, *networkmanager.GetConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetConnectionsOutput)
	return ret0, ret1
}

// GetConnectionsRequest indicates an expected call of GetConnectionsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectionsRequest), arg0)
}

// GetConnectionsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetConnectionsWithContext(arg0 context.Context, arg1 *networkmanager.GetConnectionsInput, arg2 ...request.Option) (*networkmanager.GetConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionsWithContext indicates an expected call of GetConnectionsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetConnectionsWithContext), varargs...)
}

// GetCoreNetwork mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetwork(arg0 *networkmanager.GetCoreNetworkInput) (*networkmanager.GetCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreNetwork", arg0)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetwork indicates an expected call of GetCoreNetwork.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetwork", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetwork), arg0)
}

// GetCoreNetworkChangeSet mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkChangeSet(arg0 *networkmanager.GetCoreNetworkChangeSetInput) (*networkmanager.GetCoreNetworkChangeSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreNetworkChangeSet", arg0)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkChangeSet indicates an expected call of GetCoreNetworkChangeSet.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkChangeSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkChangeSet", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkChangeSet), arg0)
}

// GetCoreNetworkChangeSetPages mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkChangeSetPages(arg0 *networkmanager.GetCoreNetworkChangeSetInput, arg1 func(*networkmanager.GetCoreNetworkChangeSetOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreNetworkChangeSetPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCoreNetworkChangeSetPages indicates an expected call of GetCoreNetworkChangeSetPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkChangeSetPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkChangeSetPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkChangeSetPages), arg0, arg1)
}

// GetCoreNetworkChangeSetPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkChangeSetPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkChangeSetInput, arg2 func(*networkmanager.GetCoreNetworkChangeSetOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetworkChangeSetPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCoreNetworkChangeSetPagesWithContext indicates an expected call of GetCoreNetworkChangeSetPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkChangeSetPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkChangeSetPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkChangeSetPagesWithContext), varargs...)
}

// GetCoreNetworkChangeSetRequest mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkChangeSetRequest(arg0 *networkmanager.GetCoreNetworkChangeSetInput) (*request.Request, *networkmanager.GetCoreNetworkChangeSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreNetworkChangeSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetCoreNetworkChangeSetOutput)
	return ret0, ret1
}

// GetCoreNetworkChangeSetRequest indicates an expected call of GetCoreNetworkChangeSetRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkChangeSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkChangeSetRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkChangeSetRequest), arg0)
}

// GetCoreNetworkChangeSetWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkChangeSetWithContext(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkChangeSetInput, arg2 ...request.Option) (*networkmanager.GetCoreNetworkChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetworkChangeSetWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkChangeSetWithContext indicates an expected call of GetCoreNetworkChangeSetWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkChangeSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkChangeSetWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkChangeSetWithContext), varargs...)
}

// GetCoreNetworkPolicy mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkPolicy(arg0 *networkmanager.GetCoreNetworkPolicyInput) (*networkmanager.GetCoreNetworkPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreNetworkPolicy", arg0)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkPolicy indicates an expected call of GetCoreNetworkPolicy.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkPolicy", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkPolicy), arg0)
}

// GetCoreNetworkPolicyRequest mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkPolicyRequest(arg0 *networkmanager.GetCoreNetworkPolicyInput) (*request.Request, *networkmanager.GetCoreNetworkPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreNetworkPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetCoreNetworkPolicyOutput)
	return ret0, ret1
}

// GetCoreNetworkPolicyRequest indicates an expected call of GetCoreNetworkPolicyRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkPolicyRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkPolicyRequest), arg0)
}

// GetCoreNetworkPolicyWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkPolicyWithContext(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkPolicyInput, arg2 ...request.Option) (*networkmanager.GetCoreNetworkPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetworkPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkPolicyWithContext indicates an expected call of GetCoreNetworkPolicyWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkPolicyWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkPolicyWithContext), varargs...)
}

// GetCoreNetworkRequest mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkRequest(arg0 *networkmanager.GetCoreNetworkInput) (*request.Request, *networkmanager.GetCoreNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoreNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetCoreNetworkOutput)
	return ret0, ret1
}

// GetCoreNetworkRequest indicates an expected call of GetCoreNetworkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkRequest), arg0)
}

// GetCoreNetworkWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetCoreNetworkWithContext(arg0 context.Context, arg1 *networkmanager.GetCoreNetworkInput, arg2 ...request.Option) (*networkmanager.GetCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCoreNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoreNetworkWithContext indicates an expected call of GetCoreNetworkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetCoreNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoreNetworkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCoreNetworkWithContext), varargs...)
}

// GetCustomerGatewayAssociations mocks base method.
func (m *MockNetworkManagerAPI) GetCustomerGatewayAssociations(arg0 *networkmanager.GetCustomerGatewayAssociationsInput) (*networkmanager.GetCustomerGatewayAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerGatewayAssociations", arg0)
	ret0, _ := ret[0].(*networkmanager.GetCustomerGatewayAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerGatewayAssociations indicates an expected call of GetCustomerGatewayAssociations.
func (mr *MockNetworkManagerAPIMockRecorder) GetCustomerGatewayAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGatewayAssociations", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCustomerGatewayAssociations), arg0)
}

// GetCustomerGatewayAssociationsPages mocks base method.
func (m *MockNetworkManagerAPI) GetCustomerGatewayAssociationsPages(arg0 *networkmanager.GetCustomerGatewayAssociationsInput, arg1 func(*networkmanager.GetCustomerGatewayAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerGatewayAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCustomerGatewayAssociationsPages indicates an expected call of GetCustomerGatewayAssociationsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetCustomerGatewayAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGatewayAssociationsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCustomerGatewayAssociationsPages), arg0, arg1)
}

// GetCustomerGatewayAssociationsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetCustomerGatewayAssociationsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetCustomerGatewayAssociationsInput, arg2 func(*networkmanager.GetCustomerGatewayAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomerGatewayAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCustomerGatewayAssociationsPagesWithContext indicates an expected call of GetCustomerGatewayAssociationsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetCustomerGatewayAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGatewayAssociationsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCustomerGatewayAssociationsPagesWithContext), varargs...)
}

// GetCustomerGatewayAssociationsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetCustomerGatewayAssociationsRequest(arg0 *networkmanager.GetCustomerGatewayAssociationsInput) (*request.Request, *networkmanager.GetCustomerGatewayAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerGatewayAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetCustomerGatewayAssociationsOutput)
	return ret0, ret1
}

// GetCustomerGatewayAssociationsRequest indicates an expected call of GetCustomerGatewayAssociationsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetCustomerGatewayAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGatewayAssociationsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCustomerGatewayAssociationsRequest), arg0)
}

// GetCustomerGatewayAssociationsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetCustomerGatewayAssociationsWithContext(arg0 context.Context, arg1 *networkmanager.GetCustomerGatewayAssociationsInput, arg2 ...request.Option) (*networkmanager.GetCustomerGatewayAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomerGatewayAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetCustomerGatewayAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerGatewayAssociationsWithContext indicates an expected call of GetCustomerGatewayAssociationsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetCustomerGatewayAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGatewayAssociationsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetCustomerGatewayAssociationsWithContext), varargs...)
}

// GetDevices mocks base method.
func (m *MockNetworkManagerAPI) GetDevices(arg0 *networkmanager.GetDevicesInput) (*networkmanager.GetDevicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", arg0)
	ret0, _ := ret[0].(*networkmanager.GetDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockNetworkManagerAPIMockRecorder) GetDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetDevices), arg0)
}

// GetDevicesPages mocks base method.
func (m *MockNetworkManagerAPI) GetDevicesPages(arg0 *networkmanager.GetDevicesInput, arg1 func(*networkmanager.GetDevicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDevicesPages indicates an expected call of GetDevicesPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetDevicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetDevicesPages), arg0, arg1)
}

// GetDevicesPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetDevicesPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetDevicesInput, arg2 func(*networkmanager.GetDevicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDevicesPagesWithContext indicates an expected call of GetDevicesPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetDevicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetDevicesPagesWithContext), varargs...)
}

// GetDevicesRequest mocks base method.
func (m *MockNetworkManagerAPI) GetDevicesRequest(arg0 *networkmanager.GetDevicesInput) (*request.Request, *networkmanager.GetDevicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetDevicesOutput)
	return ret0, ret1
}

// GetDevicesRequest indicates an expected call of GetDevicesRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetDevicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetDevicesRequest), arg0)
}

// GetDevicesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetDevicesWithContext(arg0 context.Context, arg1 *networkmanager.GetDevicesInput, arg2 ...request.Option) (*networkmanager.GetDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevicesWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesWithContext indicates an expected call of GetDevicesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetDevicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetDevicesWithContext), varargs...)
}

// GetLinkAssociations mocks base method.
func (m *MockNetworkManagerAPI) GetLinkAssociations(arg0 *networkmanager.GetLinkAssociationsInput) (*networkmanager.GetLinkAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkAssociations", arg0)
	ret0, _ := ret[0].(*networkmanager.GetLinkAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkAssociations indicates an expected call of GetLinkAssociations.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinkAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAssociations", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinkAssociations), arg0)
}

// GetLinkAssociationsPages mocks base method.
func (m *MockNetworkManagerAPI) GetLinkAssociationsPages(arg0 *networkmanager.GetLinkAssociationsInput, arg1 func(*networkmanager.GetLinkAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLinkAssociationsPages indicates an expected call of GetLinkAssociationsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinkAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAssociationsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinkAssociationsPages), arg0, arg1)
}

// GetLinkAssociationsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetLinkAssociationsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetLinkAssociationsInput, arg2 func(*networkmanager.GetLinkAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLinkAssociationsPagesWithContext indicates an expected call of GetLinkAssociationsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinkAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAssociationsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinkAssociationsPagesWithContext), varargs...)
}

// GetLinkAssociationsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetLinkAssociationsRequest(arg0 *networkmanager.GetLinkAssociationsInput) (*request.Request, *networkmanager.GetLinkAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetLinkAssociationsOutput)
	return ret0, ret1
}

// GetLinkAssociationsRequest indicates an expected call of GetLinkAssociationsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinkAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAssociationsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinkAssociationsRequest), arg0)
}

// GetLinkAssociationsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetLinkAssociationsWithContext(arg0 context.Context, arg1 *networkmanager.GetLinkAssociationsInput, arg2 ...request.Option) (*networkmanager.GetLinkAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetLinkAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkAssociationsWithContext indicates an expected call of GetLinkAssociationsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinkAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAssociationsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinkAssociationsWithContext), varargs...)
}

// GetLinks mocks base method.
func (m *MockNetworkManagerAPI) GetLinks(arg0 *networkmanager.GetLinksInput) (*networkmanager.GetLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", arg0)
	ret0, _ := ret[0].(*networkmanager.GetLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinks), arg0)
}

// GetLinksPages mocks base method.
func (m *MockNetworkManagerAPI) GetLinksPages(arg0 *networkmanager.GetLinksInput, arg1 func(*networkmanager.GetLinksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLinksPages indicates an expected call of GetLinksPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinksPages), arg0, arg1)
}

// GetLinksPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetLinksPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetLinksInput, arg2 func(*networkmanager.GetLinksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLinksPagesWithContext indicates an expected call of GetLinksPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinksPagesWithContext), varargs...)
}

// GetLinksRequest mocks base method.
func (m *MockNetworkManagerAPI) GetLinksRequest(arg0 *networkmanager.GetLinksInput) (*request.Request, *networkmanager.GetLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetLinksOutput)
	return ret0, ret1
}

// GetLinksRequest indicates an expected call of GetLinksRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinksRequest), arg0)
}

// GetLinksWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetLinksWithContext(arg0 context.Context, arg1 *networkmanager.GetLinksInput, arg2 ...request.Option) (*networkmanager.GetLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinksWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinksWithContext indicates an expected call of GetLinksWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetLinksWithContext), varargs...)
}

// GetNetworkResourceCounts mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceCounts(arg0 *networkmanager.GetNetworkResourceCountsInput) (*networkmanager.GetNetworkResourceCountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourceCounts", arg0)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourceCountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResourceCounts indicates an expected call of GetNetworkResourceCounts.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceCounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceCounts", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceCounts), arg0)
}

// GetNetworkResourceCountsPages mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceCountsPages(arg0 *networkmanager.GetNetworkResourceCountsInput, arg1 func(*networkmanager.GetNetworkResourceCountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourceCountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkResourceCountsPages indicates an expected call of GetNetworkResourceCountsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceCountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceCountsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceCountsPages), arg0, arg1)
}

// GetNetworkResourceCountsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceCountsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkResourceCountsInput, arg2 func(*networkmanager.GetNetworkResourceCountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourceCountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkResourceCountsPagesWithContext indicates an expected call of GetNetworkResourceCountsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceCountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceCountsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceCountsPagesWithContext), varargs...)
}

// GetNetworkResourceCountsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceCountsRequest(arg0 *networkmanager.GetNetworkResourceCountsInput) (*request.Request, *networkmanager.GetNetworkResourceCountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourceCountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetNetworkResourceCountsOutput)
	return ret0, ret1
}

// GetNetworkResourceCountsRequest indicates an expected call of GetNetworkResourceCountsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceCountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceCountsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceCountsRequest), arg0)
}

// GetNetworkResourceCountsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceCountsWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkResourceCountsInput, arg2 ...request.Option) (*networkmanager.GetNetworkResourceCountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourceCountsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourceCountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResourceCountsWithContext indicates an expected call of GetNetworkResourceCountsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceCountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceCountsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceCountsWithContext), varargs...)
}

// GetNetworkResourceRelationships mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceRelationships(arg0 *networkmanager.GetNetworkResourceRelationshipsInput) (*networkmanager.GetNetworkResourceRelationshipsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourceRelationships", arg0)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourceRelationshipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResourceRelationships indicates an expected call of GetNetworkResourceRelationships.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceRelationships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceRelationships", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceRelationships), arg0)
}

// GetNetworkResourceRelationshipsPages mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceRelationshipsPages(arg0 *networkmanager.GetNetworkResourceRelationshipsInput, arg1 func(*networkmanager.GetNetworkResourceRelationshipsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourceRelationshipsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkResourceRelationshipsPages indicates an expected call of GetNetworkResourceRelationshipsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceRelationshipsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceRelationshipsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceRelationshipsPages), arg0, arg1)
}

// GetNetworkResourceRelationshipsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceRelationshipsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkResourceRelationshipsInput, arg2 func(*networkmanager.GetNetworkResourceRelationshipsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourceRelationshipsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkResourceRelationshipsPagesWithContext indicates an expected call of GetNetworkResourceRelationshipsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceRelationshipsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceRelationshipsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceRelationshipsPagesWithContext), varargs...)
}

// GetNetworkResourceRelationshipsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceRelationshipsRequest(arg0 *networkmanager.GetNetworkResourceRelationshipsInput) (*request.Request, *networkmanager.GetNetworkResourceRelationshipsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourceRelationshipsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetNetworkResourceRelationshipsOutput)
	return ret0, ret1
}

// GetNetworkResourceRelationshipsRequest indicates an expected call of GetNetworkResourceRelationshipsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceRelationshipsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceRelationshipsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceRelationshipsRequest), arg0)
}

// GetNetworkResourceRelationshipsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourceRelationshipsWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkResourceRelationshipsInput, arg2 ...request.Option) (*networkmanager.GetNetworkResourceRelationshipsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourceRelationshipsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourceRelationshipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResourceRelationshipsWithContext indicates an expected call of GetNetworkResourceRelationshipsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourceRelationshipsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourceRelationshipsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourceRelationshipsWithContext), varargs...)
}

// GetNetworkResources mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResources(arg0 *networkmanager.GetNetworkResourcesInput) (*networkmanager.GetNetworkResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResources", arg0)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResources indicates an expected call of GetNetworkResources.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResources", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResources), arg0)
}

// GetNetworkResourcesPages mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourcesPages(arg0 *networkmanager.GetNetworkResourcesInput, arg1 func(*networkmanager.GetNetworkResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkResourcesPages indicates an expected call of GetNetworkResourcesPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourcesPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourcesPages), arg0, arg1)
}

// GetNetworkResourcesPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourcesPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkResourcesInput, arg2 func(*networkmanager.GetNetworkResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkResourcesPagesWithContext indicates an expected call of GetNetworkResourcesPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourcesPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourcesPagesWithContext), varargs...)
}

// GetNetworkResourcesRequest mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourcesRequest(arg0 *networkmanager.GetNetworkResourcesInput) (*request.Request, *networkmanager.GetNetworkResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetNetworkResourcesOutput)
	return ret0, ret1
}

// GetNetworkResourcesRequest indicates an expected call of GetNetworkResourcesRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourcesRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourcesRequest), arg0)
}

// GetNetworkResourcesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkResourcesWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkResourcesInput, arg2 ...request.Option) (*networkmanager.GetNetworkResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkResourcesWithContext indicates an expected call of GetNetworkResourcesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkResourcesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkResourcesWithContext), varargs...)
}

// GetNetworkRoutes mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkRoutes(arg0 *networkmanager.GetNetworkRoutesInput) (*networkmanager.GetNetworkRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRoutes", arg0)
	ret0, _ := ret[0].(*networkmanager.GetNetworkRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRoutes indicates an expected call of GetNetworkRoutes.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRoutes", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkRoutes), arg0)
}

// GetNetworkRoutesRequest mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkRoutesRequest(arg0 *networkmanager.GetNetworkRoutesInput) (*request.Request, *networkmanager.GetNetworkRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetNetworkRoutesOutput)
	return ret0, ret1
}

// GetNetworkRoutesRequest indicates an expected call of GetNetworkRoutesRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRoutesRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkRoutesRequest), arg0)
}

// GetNetworkRoutesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkRoutesWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkRoutesInput, arg2 ...request.Option) (*networkmanager.GetNetworkRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkRoutesWithContext indicates an expected call of GetNetworkRoutesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkRoutesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkRoutesWithContext), varargs...)
}

// GetNetworkTelemetry mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkTelemetry(arg0 *networkmanager.GetNetworkTelemetryInput) (*networkmanager.GetNetworkTelemetryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTelemetry", arg0)
	ret0, _ := ret[0].(*networkmanager.GetNetworkTelemetryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTelemetry indicates an expected call of GetNetworkTelemetry.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkTelemetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTelemetry", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkTelemetry), arg0)
}

// GetNetworkTelemetryPages mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkTelemetryPages(arg0 *networkmanager.GetNetworkTelemetryInput, arg1 func(*networkmanager.GetNetworkTelemetryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTelemetryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkTelemetryPages indicates an expected call of GetNetworkTelemetryPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkTelemetryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTelemetryPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkTelemetryPages), arg0, arg1)
}

// GetNetworkTelemetryPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkTelemetryPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkTelemetryInput, arg2 func(*networkmanager.GetNetworkTelemetryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkTelemetryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNetworkTelemetryPagesWithContext indicates an expected call of GetNetworkTelemetryPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkTelemetryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTelemetryPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkTelemetryPagesWithContext), varargs...)
}

// GetNetworkTelemetryRequest mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkTelemetryRequest(arg0 *networkmanager.GetNetworkTelemetryInput) (*request.Request, *networkmanager.GetNetworkTelemetryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTelemetryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetNetworkTelemetryOutput)
	return ret0, ret1
}

// GetNetworkTelemetryRequest indicates an expected call of GetNetworkTelemetryRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkTelemetryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTelemetryRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkTelemetryRequest), arg0)
}

// GetNetworkTelemetryWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetNetworkTelemetryWithContext(arg0 context.Context, arg1 *networkmanager.GetNetworkTelemetryInput, arg2 ...request.Option) (*networkmanager.GetNetworkTelemetryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkTelemetryWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetNetworkTelemetryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkTelemetryWithContext indicates an expected call of GetNetworkTelemetryWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetNetworkTelemetryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTelemetryWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetNetworkTelemetryWithContext), varargs...)
}

// GetResourcePolicy mocks base method.
func (m *MockNetworkManagerAPI) GetResourcePolicy(arg0 *networkmanager.GetResourcePolicyInput) (*networkmanager.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0)
	ret0, _ := ret[0].(*networkmanager.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy.
func (mr *MockNetworkManagerAPIMockRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetResourcePolicy), arg0)
}

// GetResourcePolicyRequest mocks base method.
func (m *MockNetworkManagerAPI) GetResourcePolicyRequest(arg0 *networkmanager.GetResourcePolicyInput) (*request.Request, *networkmanager.GetResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetResourcePolicyOutput)
	return ret0, ret1
}

// GetResourcePolicyRequest indicates an expected call of GetResourcePolicyRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetResourcePolicyRequest), arg0)
}

// GetResourcePolicyWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetResourcePolicyWithContext(arg0 context.Context, arg1 *networkmanager.GetResourcePolicyInput, arg2 ...request.Option) (*networkmanager.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicyWithContext indicates an expected call of GetResourcePolicyWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetResourcePolicyWithContext), varargs...)
}

// GetRouteAnalysis mocks base method.
func (m *MockNetworkManagerAPI) GetRouteAnalysis(arg0 *networkmanager.GetRouteAnalysisInput) (*networkmanager.GetRouteAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteAnalysis", arg0)
	ret0, _ := ret[0].(*networkmanager.GetRouteAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteAnalysis indicates an expected call of GetRouteAnalysis.
func (mr *MockNetworkManagerAPIMockRecorder) GetRouteAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteAnalysis", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetRouteAnalysis), arg0)
}

// GetRouteAnalysisRequest mocks base method.
func (m *MockNetworkManagerAPI) GetRouteAnalysisRequest(arg0 *networkmanager.GetRouteAnalysisInput) (*request.Request, *networkmanager.GetRouteAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetRouteAnalysisOutput)
	return ret0, ret1
}

// GetRouteAnalysisRequest indicates an expected call of GetRouteAnalysisRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetRouteAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteAnalysisRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetRouteAnalysisRequest), arg0)
}

// GetRouteAnalysisWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetRouteAnalysisWithContext(arg0 context.Context, arg1 *networkmanager.GetRouteAnalysisInput, arg2 ...request.Option) (*networkmanager.GetRouteAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetRouteAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteAnalysisWithContext indicates an expected call of GetRouteAnalysisWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetRouteAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteAnalysisWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetRouteAnalysisWithContext), varargs...)
}

// GetSiteToSiteVpnAttachment mocks base method.
func (m *MockNetworkManagerAPI) GetSiteToSiteVpnAttachment(arg0 *networkmanager.GetSiteToSiteVpnAttachmentInput) (*networkmanager.GetSiteToSiteVpnAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteToSiteVpnAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.GetSiteToSiteVpnAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteToSiteVpnAttachment indicates an expected call of GetSiteToSiteVpnAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) GetSiteToSiteVpnAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteToSiteVpnAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSiteToSiteVpnAttachment), arg0)
}

// GetSiteToSiteVpnAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) GetSiteToSiteVpnAttachmentRequest(arg0 *networkmanager.GetSiteToSiteVpnAttachmentInput) (*request.Request, *networkmanager.GetSiteToSiteVpnAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteToSiteVpnAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetSiteToSiteVpnAttachmentOutput)
	return ret0, ret1
}

// GetSiteToSiteVpnAttachmentRequest indicates an expected call of GetSiteToSiteVpnAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetSiteToSiteVpnAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteToSiteVpnAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSiteToSiteVpnAttachmentRequest), arg0)
}

// GetSiteToSiteVpnAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetSiteToSiteVpnAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.GetSiteToSiteVpnAttachmentInput, arg2 ...request.Option) (*networkmanager.GetSiteToSiteVpnAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSiteToSiteVpnAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetSiteToSiteVpnAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteToSiteVpnAttachmentWithContext indicates an expected call of GetSiteToSiteVpnAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetSiteToSiteVpnAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteToSiteVpnAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSiteToSiteVpnAttachmentWithContext), varargs...)
}

// GetSites mocks base method.
func (m *MockNetworkManagerAPI) GetSites(arg0 *networkmanager.GetSitesInput) (*networkmanager.GetSitesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSites", arg0)
	ret0, _ := ret[0].(*networkmanager.GetSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSites indicates an expected call of GetSites.
func (mr *MockNetworkManagerAPIMockRecorder) GetSites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSites", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSites), arg0)
}

// GetSitesPages mocks base method.
func (m *MockNetworkManagerAPI) GetSitesPages(arg0 *networkmanager.GetSitesInput, arg1 func(*networkmanager.GetSitesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSitesPages indicates an expected call of GetSitesPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetSitesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSitesPages), arg0, arg1)
}

// GetSitesPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetSitesPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetSitesInput, arg2 func(*networkmanager.GetSitesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSitesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSitesPagesWithContext indicates an expected call of GetSitesPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetSitesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSitesPagesWithContext), varargs...)
}

// GetSitesRequest mocks base method.
func (m *MockNetworkManagerAPI) GetSitesRequest(arg0 *networkmanager.GetSitesInput) (*request.Request, *networkmanager.GetSitesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetSitesOutput)
	return ret0, ret1
}

// GetSitesRequest indicates an expected call of GetSitesRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetSitesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSitesRequest), arg0)
}

// GetSitesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetSitesWithContext(arg0 context.Context, arg1 *networkmanager.GetSitesInput, arg2 ...request.Option) (*networkmanager.GetSitesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSitesWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetSitesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitesWithContext indicates an expected call of GetSitesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetSitesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetSitesWithContext), varargs...)
}

// GetTransitGatewayConnectPeerAssociations mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayConnectPeerAssociations(arg0 *networkmanager.GetTransitGatewayConnectPeerAssociationsInput) (*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayConnectPeerAssociations", arg0)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayConnectPeerAssociations indicates an expected call of GetTransitGatewayConnectPeerAssociations.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayConnectPeerAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayConnectPeerAssociations", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayConnectPeerAssociations), arg0)
}

// GetTransitGatewayConnectPeerAssociationsPages mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayConnectPeerAssociationsPages(arg0 *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, arg1 func(*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayConnectPeerAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTransitGatewayConnectPeerAssociationsPages indicates an expected call of GetTransitGatewayConnectPeerAssociationsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayConnectPeerAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayConnectPeerAssociationsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayConnectPeerAssociationsPages), arg0, arg1)
}

// GetTransitGatewayConnectPeerAssociationsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayConnectPeerAssociationsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, arg2 func(*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayConnectPeerAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTransitGatewayConnectPeerAssociationsPagesWithContext indicates an expected call of GetTransitGatewayConnectPeerAssociationsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayConnectPeerAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayConnectPeerAssociationsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayConnectPeerAssociationsPagesWithContext), varargs...)
}

// GetTransitGatewayConnectPeerAssociationsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayConnectPeerAssociationsRequest(arg0 *networkmanager.GetTransitGatewayConnectPeerAssociationsInput) (*request.Request, *networkmanager.GetTransitGatewayConnectPeerAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayConnectPeerAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput)
	return ret0, ret1
}

// GetTransitGatewayConnectPeerAssociationsRequest indicates an expected call of GetTransitGatewayConnectPeerAssociationsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayConnectPeerAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayConnectPeerAssociationsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayConnectPeerAssociationsRequest), arg0)
}

// GetTransitGatewayConnectPeerAssociationsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayConnectPeerAssociationsWithContext(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, arg2 ...request.Option) (*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayConnectPeerAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayConnectPeerAssociationsWithContext indicates an expected call of GetTransitGatewayConnectPeerAssociationsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayConnectPeerAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayConnectPeerAssociationsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayConnectPeerAssociationsWithContext), varargs...)
}

// GetTransitGatewayRegistrations mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayRegistrations(arg0 *networkmanager.GetTransitGatewayRegistrationsInput) (*networkmanager.GetTransitGatewayRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayRegistrations", arg0)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayRegistrations indicates an expected call of GetTransitGatewayRegistrations.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayRegistrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRegistrations", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayRegistrations), arg0)
}

// GetTransitGatewayRegistrationsPages mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayRegistrationsPages(arg0 *networkmanager.GetTransitGatewayRegistrationsInput, arg1 func(*networkmanager.GetTransitGatewayRegistrationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayRegistrationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTransitGatewayRegistrationsPages indicates an expected call of GetTransitGatewayRegistrationsPages.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayRegistrationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRegistrationsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayRegistrationsPages), arg0, arg1)
}

// GetTransitGatewayRegistrationsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayRegistrationsPagesWithContext(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayRegistrationsInput, arg2 func(*networkmanager.GetTransitGatewayRegistrationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayRegistrationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTransitGatewayRegistrationsPagesWithContext indicates an expected call of GetTransitGatewayRegistrationsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayRegistrationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRegistrationsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayRegistrationsPagesWithContext), varargs...)
}

// GetTransitGatewayRegistrationsRequest mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayRegistrationsRequest(arg0 *networkmanager.GetTransitGatewayRegistrationsInput) (*request.Request, *networkmanager.GetTransitGatewayRegistrationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitGatewayRegistrationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetTransitGatewayRegistrationsOutput)
	return ret0, ret1
}

// GetTransitGatewayRegistrationsRequest indicates an expected call of GetTransitGatewayRegistrationsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayRegistrationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRegistrationsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayRegistrationsRequest), arg0)
}

// GetTransitGatewayRegistrationsWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetTransitGatewayRegistrationsWithContext(arg0 context.Context, arg1 *networkmanager.GetTransitGatewayRegistrationsInput, arg2 ...request.Option) (*networkmanager.GetTransitGatewayRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransitGatewayRegistrationsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetTransitGatewayRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitGatewayRegistrationsWithContext indicates an expected call of GetTransitGatewayRegistrationsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetTransitGatewayRegistrationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitGatewayRegistrationsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetTransitGatewayRegistrationsWithContext), varargs...)
}

// GetVpcAttachment mocks base method.
func (m *MockNetworkManagerAPI) GetVpcAttachment(arg0 *networkmanager.GetVpcAttachmentInput) (*networkmanager.GetVpcAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.GetVpcAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcAttachment indicates an expected call of GetVpcAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) GetVpcAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetVpcAttachment), arg0)
}

// GetVpcAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) GetVpcAttachmentRequest(arg0 *networkmanager.GetVpcAttachmentInput) (*request.Request, *networkmanager.GetVpcAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.GetVpcAttachmentOutput)
	return ret0, ret1
}

// GetVpcAttachmentRequest indicates an expected call of GetVpcAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) GetVpcAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetVpcAttachmentRequest), arg0)
}

// GetVpcAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) GetVpcAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.GetVpcAttachmentInput, arg2 ...request.Option) (*networkmanager.GetVpcAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.GetVpcAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcAttachmentWithContext indicates an expected call of GetVpcAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) GetVpcAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).GetVpcAttachmentWithContext), varargs...)
}

// ListAttachments mocks base method.
func (m *MockNetworkManagerAPI) ListAttachments(arg0 *networkmanager.ListAttachmentsInput) (*networkmanager.ListAttachmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachments", arg0)
	ret0, _ := ret[0].(*networkmanager.ListAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachments indicates an expected call of ListAttachments.
func (mr *MockNetworkManagerAPIMockRecorder) ListAttachments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachments", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListAttachments), arg0)
}

// ListAttachmentsPages mocks base method.
func (m *MockNetworkManagerAPI) ListAttachmentsPages(arg0 *networkmanager.ListAttachmentsInput, arg1 func(*networkmanager.ListAttachmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttachmentsPages indicates an expected call of ListAttachmentsPages.
func (mr *MockNetworkManagerAPIMockRecorder) ListAttachmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachmentsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListAttachmentsPages), arg0, arg1)
}

// ListAttachmentsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListAttachmentsPagesWithContext(arg0 context.Context, arg1 *networkmanager.ListAttachmentsInput, arg2 func(*networkmanager.ListAttachmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttachmentsPagesWithContext indicates an expected call of ListAttachmentsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListAttachmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachmentsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListAttachmentsPagesWithContext), varargs...)
}

// ListAttachmentsRequest mocks base method.
func (m *MockNetworkManagerAPI) ListAttachmentsRequest(arg0 *networkmanager.ListAttachmentsInput) (*request.Request, *networkmanager.ListAttachmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.ListAttachmentsOutput)
	return ret0, ret1
}

// ListAttachmentsRequest indicates an expected call of ListAttachmentsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) ListAttachmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachmentsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListAttachmentsRequest), arg0)
}

// ListAttachmentsWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListAttachmentsWithContext(arg0 context.Context, arg1 *networkmanager.ListAttachmentsInput, arg2 ...request.Option) (*networkmanager.ListAttachmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachmentsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachmentsWithContext indicates an expected call of ListAttachmentsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListAttachmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachmentsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListAttachmentsWithContext), varargs...)
}

// ListConnectPeers mocks base method.
func (m *MockNetworkManagerAPI) ListConnectPeers(arg0 *networkmanager.ListConnectPeersInput) (*networkmanager.ListConnectPeersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectPeers", arg0)
	ret0, _ := ret[0].(*networkmanager.ListConnectPeersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectPeers indicates an expected call of ListConnectPeers.
func (mr *MockNetworkManagerAPIMockRecorder) ListConnectPeers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectPeers", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListConnectPeers), arg0)
}

// ListConnectPeersPages mocks base method.
func (m *MockNetworkManagerAPI) ListConnectPeersPages(arg0 *networkmanager.ListConnectPeersInput, arg1 func(*networkmanager.ListConnectPeersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectPeersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectPeersPages indicates an expected call of ListConnectPeersPages.
func (mr *MockNetworkManagerAPIMockRecorder) ListConnectPeersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectPeersPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListConnectPeersPages), arg0, arg1)
}

// ListConnectPeersPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListConnectPeersPagesWithContext(arg0 context.Context, arg1 *networkmanager.ListConnectPeersInput, arg2 func(*networkmanager.ListConnectPeersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectPeersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectPeersPagesWithContext indicates an expected call of ListConnectPeersPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListConnectPeersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectPeersPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListConnectPeersPagesWithContext), varargs...)
}

// ListConnectPeersRequest mocks base method.
func (m *MockNetworkManagerAPI) ListConnectPeersRequest(arg0 *networkmanager.ListConnectPeersInput) (*request.Request, *networkmanager.ListConnectPeersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectPeersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.ListConnectPeersOutput)
	return ret0, ret1
}

// ListConnectPeersRequest indicates an expected call of ListConnectPeersRequest.
func (mr *MockNetworkManagerAPIMockRecorder) ListConnectPeersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectPeersRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListConnectPeersRequest), arg0)
}

// ListConnectPeersWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListConnectPeersWithContext(arg0 context.Context, arg1 *networkmanager.ListConnectPeersInput, arg2 ...request.Option) (*networkmanager.ListConnectPeersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectPeersWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListConnectPeersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectPeersWithContext indicates an expected call of ListConnectPeersWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListConnectPeersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectPeersWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListConnectPeersWithContext), varargs...)
}

// ListCoreNetworkPolicyVersions mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworkPolicyVersions(arg0 *networkmanager.ListCoreNetworkPolicyVersionsInput) (*networkmanager.ListCoreNetworkPolicyVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoreNetworkPolicyVersions", arg0)
	ret0, _ := ret[0].(*networkmanager.ListCoreNetworkPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoreNetworkPolicyVersions indicates an expected call of ListCoreNetworkPolicyVersions.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworkPolicyVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworkPolicyVersions", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworkPolicyVersions), arg0)
}

// ListCoreNetworkPolicyVersionsPages mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworkPolicyVersionsPages(arg0 *networkmanager.ListCoreNetworkPolicyVersionsInput, arg1 func(*networkmanager.ListCoreNetworkPolicyVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoreNetworkPolicyVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoreNetworkPolicyVersionsPages indicates an expected call of ListCoreNetworkPolicyVersionsPages.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworkPolicyVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworkPolicyVersionsPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworkPolicyVersionsPages), arg0, arg1)
}

// ListCoreNetworkPolicyVersionsPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworkPolicyVersionsPagesWithContext(arg0 context.Context, arg1 *networkmanager.ListCoreNetworkPolicyVersionsInput, arg2 func(*networkmanager.ListCoreNetworkPolicyVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoreNetworkPolicyVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoreNetworkPolicyVersionsPagesWithContext indicates an expected call of ListCoreNetworkPolicyVersionsPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworkPolicyVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworkPolicyVersionsPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworkPolicyVersionsPagesWithContext), varargs...)
}

// ListCoreNetworkPolicyVersionsRequest mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworkPolicyVersionsRequest(arg0 *networkmanager.ListCoreNetworkPolicyVersionsInput) (*request.Request, *networkmanager.ListCoreNetworkPolicyVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoreNetworkPolicyVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.ListCoreNetworkPolicyVersionsOutput)
	return ret0, ret1
}

// ListCoreNetworkPolicyVersionsRequest indicates an expected call of ListCoreNetworkPolicyVersionsRequest.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworkPolicyVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworkPolicyVersionsRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworkPolicyVersionsRequest), arg0)
}

// ListCoreNetworkPolicyVersionsWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworkPolicyVersionsWithContext(arg0 context.Context, arg1 *networkmanager.ListCoreNetworkPolicyVersionsInput, arg2 ...request.Option) (*networkmanager.ListCoreNetworkPolicyVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoreNetworkPolicyVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListCoreNetworkPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoreNetworkPolicyVersionsWithContext indicates an expected call of ListCoreNetworkPolicyVersionsWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworkPolicyVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworkPolicyVersionsWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworkPolicyVersionsWithContext), varargs...)
}

// ListCoreNetworks mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworks(arg0 *networkmanager.ListCoreNetworksInput) (*networkmanager.ListCoreNetworksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoreNetworks", arg0)
	ret0, _ := ret[0].(*networkmanager.ListCoreNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoreNetworks indicates an expected call of ListCoreNetworks.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworks", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworks), arg0)
}

// ListCoreNetworksPages mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworksPages(arg0 *networkmanager.ListCoreNetworksInput, arg1 func(*networkmanager.ListCoreNetworksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoreNetworksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoreNetworksPages indicates an expected call of ListCoreNetworksPages.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworksPages", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworksPages), arg0, arg1)
}

// ListCoreNetworksPagesWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworksPagesWithContext(arg0 context.Context, arg1 *networkmanager.ListCoreNetworksInput, arg2 func(*networkmanager.ListCoreNetworksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoreNetworksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoreNetworksPagesWithContext indicates an expected call of ListCoreNetworksPagesWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworksPagesWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworksPagesWithContext), varargs...)
}

// ListCoreNetworksRequest mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworksRequest(arg0 *networkmanager.ListCoreNetworksInput) (*request.Request, *networkmanager.ListCoreNetworksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoreNetworksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.ListCoreNetworksOutput)
	return ret0, ret1
}

// ListCoreNetworksRequest indicates an expected call of ListCoreNetworksRequest.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworksRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworksRequest), arg0)
}

// ListCoreNetworksWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListCoreNetworksWithContext(arg0 context.Context, arg1 *networkmanager.ListCoreNetworksInput, arg2 ...request.Option) (*networkmanager.ListCoreNetworksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoreNetworksWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListCoreNetworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoreNetworksWithContext indicates an expected call of ListCoreNetworksWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListCoreNetworksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoreNetworksWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListCoreNetworksWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockNetworkManagerAPI) ListTagsForResource(arg0 *networkmanager.ListTagsForResourceInput) (*networkmanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*networkmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockNetworkManagerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockNetworkManagerAPI) ListTagsForResourceRequest(arg0 *networkmanager.ListTagsForResourceInput) (*request.Request, *networkmanager.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockNetworkManagerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockNetworkManagerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *networkmanager.ListTagsForResourceInput, arg2 ...request.Option) (*networkmanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutCoreNetworkPolicy mocks base method.
func (m *MockNetworkManagerAPI) PutCoreNetworkPolicy(arg0 *networkmanager.PutCoreNetworkPolicyInput) (*networkmanager.PutCoreNetworkPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCoreNetworkPolicy", arg0)
	ret0, _ := ret[0].(*networkmanager.PutCoreNetworkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCoreNetworkPolicy indicates an expected call of PutCoreNetworkPolicy.
func (mr *MockNetworkManagerAPIMockRecorder) PutCoreNetworkPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCoreNetworkPolicy", reflect.TypeOf((*MockNetworkManagerAPI)(nil).PutCoreNetworkPolicy), arg0)
}

// PutCoreNetworkPolicyRequest mocks base method.
func (m *MockNetworkManagerAPI) PutCoreNetworkPolicyRequest(arg0 *networkmanager.PutCoreNetworkPolicyInput) (*request.Request, *networkmanager.PutCoreNetworkPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCoreNetworkPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.PutCoreNetworkPolicyOutput)
	return ret0, ret1
}

// PutCoreNetworkPolicyRequest indicates an expected call of PutCoreNetworkPolicyRequest.
func (mr *MockNetworkManagerAPIMockRecorder) PutCoreNetworkPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCoreNetworkPolicyRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).PutCoreNetworkPolicyRequest), arg0)
}

// PutCoreNetworkPolicyWithContext mocks base method.
func (m *MockNetworkManagerAPI) PutCoreNetworkPolicyWithContext(arg0 context.Context, arg1 *networkmanager.PutCoreNetworkPolicyInput, arg2 ...request.Option) (*networkmanager.PutCoreNetworkPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutCoreNetworkPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.PutCoreNetworkPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCoreNetworkPolicyWithContext indicates an expected call of PutCoreNetworkPolicyWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) PutCoreNetworkPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCoreNetworkPolicyWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).PutCoreNetworkPolicyWithContext), varargs...)
}

// PutResourcePolicy mocks base method.
func (m *MockNetworkManagerAPI) PutResourcePolicy(arg0 *networkmanager.PutResourcePolicyInput) (*networkmanager.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*networkmanager.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy.
func (mr *MockNetworkManagerAPIMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockNetworkManagerAPI)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method.
func (m *MockNetworkManagerAPI) PutResourcePolicyRequest(arg0 *networkmanager.PutResourcePolicyInput) (*request.Request, *networkmanager.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest.
func (mr *MockNetworkManagerAPIMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method.
func (m *MockNetworkManagerAPI) PutResourcePolicyWithContext(arg0 context.Context, arg1 *networkmanager.PutResourcePolicyInput, arg2 ...request.Option) (*networkmanager.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).PutResourcePolicyWithContext), varargs...)
}

// RegisterTransitGateway mocks base method.
func (m *MockNetworkManagerAPI) RegisterTransitGateway(arg0 *networkmanager.RegisterTransitGatewayInput) (*networkmanager.RegisterTransitGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTransitGateway", arg0)
	ret0, _ := ret[0].(*networkmanager.RegisterTransitGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTransitGateway indicates an expected call of RegisterTransitGateway.
func (mr *MockNetworkManagerAPIMockRecorder) RegisterTransitGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTransitGateway", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RegisterTransitGateway), arg0)
}

// RegisterTransitGatewayRequest mocks base method.
func (m *MockNetworkManagerAPI) RegisterTransitGatewayRequest(arg0 *networkmanager.RegisterTransitGatewayInput) (*request.Request, *networkmanager.RegisterTransitGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTransitGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.RegisterTransitGatewayOutput)
	return ret0, ret1
}

// RegisterTransitGatewayRequest indicates an expected call of RegisterTransitGatewayRequest.
func (mr *MockNetworkManagerAPIMockRecorder) RegisterTransitGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTransitGatewayRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RegisterTransitGatewayRequest), arg0)
}

// RegisterTransitGatewayWithContext mocks base method.
func (m *MockNetworkManagerAPI) RegisterTransitGatewayWithContext(arg0 context.Context, arg1 *networkmanager.RegisterTransitGatewayInput, arg2 ...request.Option) (*networkmanager.RegisterTransitGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterTransitGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.RegisterTransitGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTransitGatewayWithContext indicates an expected call of RegisterTransitGatewayWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) RegisterTransitGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTransitGatewayWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RegisterTransitGatewayWithContext), varargs...)
}

// RejectAttachment mocks base method.
func (m *MockNetworkManagerAPI) RejectAttachment(arg0 *networkmanager.RejectAttachmentInput) (*networkmanager.RejectAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.RejectAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectAttachment indicates an expected call of RejectAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) RejectAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RejectAttachment), arg0)
}

// RejectAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) RejectAttachmentRequest(arg0 *networkmanager.RejectAttachmentInput) (*request.Request, *networkmanager.RejectAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.RejectAttachmentOutput)
	return ret0, ret1
}

// RejectAttachmentRequest indicates an expected call of RejectAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) RejectAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RejectAttachmentRequest), arg0)
}

// RejectAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) RejectAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.RejectAttachmentInput, arg2 ...request.Option) (*networkmanager.RejectAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.RejectAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectAttachmentWithContext indicates an expected call of RejectAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) RejectAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RejectAttachmentWithContext), varargs...)
}

// RestoreCoreNetworkPolicyVersion mocks base method.
func (m *MockNetworkManagerAPI) RestoreCoreNetworkPolicyVersion(arg0 *networkmanager.RestoreCoreNetworkPolicyVersionInput) (*networkmanager.RestoreCoreNetworkPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCoreNetworkPolicyVersion", arg0)
	ret0, _ := ret[0].(*networkmanager.RestoreCoreNetworkPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCoreNetworkPolicyVersion indicates an expected call of RestoreCoreNetworkPolicyVersion.
func (mr *MockNetworkManagerAPIMockRecorder) RestoreCoreNetworkPolicyVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCoreNetworkPolicyVersion", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RestoreCoreNetworkPolicyVersion), arg0)
}

// RestoreCoreNetworkPolicyVersionRequest mocks base method.
func (m *MockNetworkManagerAPI) RestoreCoreNetworkPolicyVersionRequest(arg0 *networkmanager.RestoreCoreNetworkPolicyVersionInput) (*request.Request, *networkmanager.RestoreCoreNetworkPolicyVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCoreNetworkPolicyVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.RestoreCoreNetworkPolicyVersionOutput)
	return ret0, ret1
}

// RestoreCoreNetworkPolicyVersionRequest indicates an expected call of RestoreCoreNetworkPolicyVersionRequest.
func (mr *MockNetworkManagerAPIMockRecorder) RestoreCoreNetworkPolicyVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCoreNetworkPolicyVersionRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RestoreCoreNetworkPolicyVersionRequest), arg0)
}

// RestoreCoreNetworkPolicyVersionWithContext mocks base method.
func (m *MockNetworkManagerAPI) RestoreCoreNetworkPolicyVersionWithContext(arg0 context.Context, arg1 *networkmanager.RestoreCoreNetworkPolicyVersionInput, arg2 ...request.Option) (*networkmanager.RestoreCoreNetworkPolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreCoreNetworkPolicyVersionWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.RestoreCoreNetworkPolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCoreNetworkPolicyVersionWithContext indicates an expected call of RestoreCoreNetworkPolicyVersionWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) RestoreCoreNetworkPolicyVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCoreNetworkPolicyVersionWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).RestoreCoreNetworkPolicyVersionWithContext), varargs...)
}

// StartRouteAnalysis mocks base method.
func (m *MockNetworkManagerAPI) StartRouteAnalysis(arg0 *networkmanager.StartRouteAnalysisInput) (*networkmanager.StartRouteAnalysisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRouteAnalysis", arg0)
	ret0, _ := ret[0].(*networkmanager.StartRouteAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRouteAnalysis indicates an expected call of StartRouteAnalysis.
func (mr *MockNetworkManagerAPIMockRecorder) StartRouteAnalysis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRouteAnalysis", reflect.TypeOf((*MockNetworkManagerAPI)(nil).StartRouteAnalysis), arg0)
}

// StartRouteAnalysisRequest mocks base method.
func (m *MockNetworkManagerAPI) StartRouteAnalysisRequest(arg0 *networkmanager.StartRouteAnalysisInput) (*request.Request, *networkmanager.StartRouteAnalysisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRouteAnalysisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.StartRouteAnalysisOutput)
	return ret0, ret1
}

// StartRouteAnalysisRequest indicates an expected call of StartRouteAnalysisRequest.
func (mr *MockNetworkManagerAPIMockRecorder) StartRouteAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRouteAnalysisRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).StartRouteAnalysisRequest), arg0)
}

// StartRouteAnalysisWithContext mocks base method.
func (m *MockNetworkManagerAPI) StartRouteAnalysisWithContext(arg0 context.Context, arg1 *networkmanager.StartRouteAnalysisInput, arg2 ...request.Option) (*networkmanager.StartRouteAnalysisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartRouteAnalysisWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.StartRouteAnalysisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRouteAnalysisWithContext indicates an expected call of StartRouteAnalysisWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) StartRouteAnalysisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRouteAnalysisWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).StartRouteAnalysisWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockNetworkManagerAPI) TagResource(arg0 *networkmanager.TagResourceInput) (*networkmanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*networkmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockNetworkManagerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockNetworkManagerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockNetworkManagerAPI) TagResourceRequest(arg0 *networkmanager.TagResourceInput) (*request.Request, *networkmanager.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockNetworkManagerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockNetworkManagerAPI) TagResourceWithContext(arg0 context.Context, arg1 *networkmanager.TagResourceInput, arg2 ...request.Option) (*networkmanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockNetworkManagerAPI) UntagResource(arg0 *networkmanager.UntagResourceInput) (*networkmanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*networkmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockNetworkManagerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockNetworkManagerAPI) UntagResourceRequest(arg0 *networkmanager.UntagResourceInput) (*request.Request, *networkmanager.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockNetworkManagerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *networkmanager.UntagResourceInput, arg2 ...request.Option) (*networkmanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateConnection mocks base method.
func (m *MockNetworkManagerAPI) UpdateConnection(arg0 *networkmanager.UpdateConnectionInput) (*networkmanager.UpdateConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnection", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnection indicates an expected call of UpdateConnection.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnection", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateConnection), arg0)
}

// UpdateConnectionRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateConnectionRequest(arg0 *networkmanager.UpdateConnectionInput) (*request.Request, *networkmanager.UpdateConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateConnectionOutput)
	return ret0, ret1
}

// UpdateConnectionRequest indicates an expected call of UpdateConnectionRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateConnectionRequest), arg0)
}

// UpdateConnectionWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateConnectionWithContext(arg0 context.Context, arg1 *networkmanager.UpdateConnectionInput, arg2 ...request.Option) (*networkmanager.UpdateConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectionWithContext indicates an expected call of UpdateConnectionWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateConnectionWithContext), varargs...)
}

// UpdateCoreNetwork mocks base method.
func (m *MockNetworkManagerAPI) UpdateCoreNetwork(arg0 *networkmanager.UpdateCoreNetworkInput) (*networkmanager.UpdateCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoreNetwork", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoreNetwork indicates an expected call of UpdateCoreNetwork.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateCoreNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoreNetwork", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateCoreNetwork), arg0)
}

// UpdateCoreNetworkRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateCoreNetworkRequest(arg0 *networkmanager.UpdateCoreNetworkInput) (*request.Request, *networkmanager.UpdateCoreNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoreNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateCoreNetworkOutput)
	return ret0, ret1
}

// UpdateCoreNetworkRequest indicates an expected call of UpdateCoreNetworkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateCoreNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoreNetworkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateCoreNetworkRequest), arg0)
}

// UpdateCoreNetworkWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateCoreNetworkWithContext(arg0 context.Context, arg1 *networkmanager.UpdateCoreNetworkInput, arg2 ...request.Option) (*networkmanager.UpdateCoreNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCoreNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateCoreNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoreNetworkWithContext indicates an expected call of UpdateCoreNetworkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateCoreNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoreNetworkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateCoreNetworkWithContext), varargs...)
}

// UpdateDevice mocks base method.
func (m *MockNetworkManagerAPI) UpdateDevice(arg0 *networkmanager.UpdateDeviceInput) (*networkmanager.UpdateDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateDevice), arg0)
}

// UpdateDeviceRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateDeviceRequest(arg0 *networkmanager.UpdateDeviceInput) (*request.Request, *networkmanager.UpdateDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateDeviceOutput)
	return ret0, ret1
}

// UpdateDeviceRequest indicates an expected call of UpdateDeviceRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateDeviceRequest), arg0)
}

// UpdateDeviceWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateDeviceWithContext(arg0 context.Context, arg1 *networkmanager.UpdateDeviceInput, arg2 ...request.Option) (*networkmanager.UpdateDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceWithContext indicates an expected call of UpdateDeviceWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateDeviceWithContext), varargs...)
}

// UpdateGlobalNetwork mocks base method.
func (m *MockNetworkManagerAPI) UpdateGlobalNetwork(arg0 *networkmanager.UpdateGlobalNetworkInput) (*networkmanager.UpdateGlobalNetworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalNetwork", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateGlobalNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalNetwork indicates an expected call of UpdateGlobalNetwork.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateGlobalNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalNetwork", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateGlobalNetwork), arg0)
}

// UpdateGlobalNetworkRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateGlobalNetworkRequest(arg0 *networkmanager.UpdateGlobalNetworkInput) (*request.Request, *networkmanager.UpdateGlobalNetworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalNetworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateGlobalNetworkOutput)
	return ret0, ret1
}

// UpdateGlobalNetworkRequest indicates an expected call of UpdateGlobalNetworkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateGlobalNetworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalNetworkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateGlobalNetworkRequest), arg0)
}

// UpdateGlobalNetworkWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateGlobalNetworkWithContext(arg0 context.Context, arg1 *networkmanager.UpdateGlobalNetworkInput, arg2 ...request.Option) (*networkmanager.UpdateGlobalNetworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalNetworkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateGlobalNetworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalNetworkWithContext indicates an expected call of UpdateGlobalNetworkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateGlobalNetworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalNetworkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateGlobalNetworkWithContext), varargs...)
}

// UpdateLink mocks base method.
func (m *MockNetworkManagerAPI) UpdateLink(arg0 *networkmanager.UpdateLinkInput) (*networkmanager.UpdateLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLink", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLink indicates an expected call of UpdateLink.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLink", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateLink), arg0)
}

// UpdateLinkRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateLinkRequest(arg0 *networkmanager.UpdateLinkInput) (*request.Request, *networkmanager.UpdateLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateLinkOutput)
	return ret0, ret1
}

// UpdateLinkRequest indicates an expected call of UpdateLinkRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateLinkRequest), arg0)
}

// UpdateLinkWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateLinkWithContext(arg0 context.Context, arg1 *networkmanager.UpdateLinkInput, arg2 ...request.Option) (*networkmanager.UpdateLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLinkWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkWithContext indicates an expected call of UpdateLinkWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateLinkWithContext), varargs...)
}

// UpdateNetworkResourceMetadata mocks base method.
func (m *MockNetworkManagerAPI) UpdateNetworkResourceMetadata(arg0 *networkmanager.UpdateNetworkResourceMetadataInput) (*networkmanager.UpdateNetworkResourceMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkResourceMetadata", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateNetworkResourceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkResourceMetadata indicates an expected call of UpdateNetworkResourceMetadata.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateNetworkResourceMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkResourceMetadata", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateNetworkResourceMetadata), arg0)
}

// UpdateNetworkResourceMetadataRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateNetworkResourceMetadataRequest(arg0 *networkmanager.UpdateNetworkResourceMetadataInput) (*request.Request, *networkmanager.UpdateNetworkResourceMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkResourceMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateNetworkResourceMetadataOutput)
	return ret0, ret1
}

// UpdateNetworkResourceMetadataRequest indicates an expected call of UpdateNetworkResourceMetadataRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateNetworkResourceMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkResourceMetadataRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateNetworkResourceMetadataRequest), arg0)
}

// UpdateNetworkResourceMetadataWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateNetworkResourceMetadataWithContext(arg0 context.Context, arg1 *networkmanager.UpdateNetworkResourceMetadataInput, arg2 ...request.Option) (*networkmanager.UpdateNetworkResourceMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNetworkResourceMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateNetworkResourceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkResourceMetadataWithContext indicates an expected call of UpdateNetworkResourceMetadataWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateNetworkResourceMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkResourceMetadataWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateNetworkResourceMetadataWithContext), varargs...)
}

// UpdateSite mocks base method.
func (m *MockNetworkManagerAPI) UpdateSite(arg0 *networkmanager.UpdateSiteInput) (*networkmanager.UpdateSiteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSite", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSite indicates an expected call of UpdateSite.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateSite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSite", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateSite), arg0)
}

// UpdateSiteRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateSiteRequest(arg0 *networkmanager.UpdateSiteInput) (*request.Request, *networkmanager.UpdateSiteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSiteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateSiteOutput)
	return ret0, ret1
}

// UpdateSiteRequest indicates an expected call of UpdateSiteRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateSiteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateSiteRequest), arg0)
}

// UpdateSiteWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateSiteWithContext(arg0 context.Context, arg1 *networkmanager.UpdateSiteInput, arg2 ...request.Option) (*networkmanager.UpdateSiteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSiteWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateSiteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSiteWithContext indicates an expected call of UpdateSiteWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateSiteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSiteWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateSiteWithContext), varargs...)
}

// UpdateVpcAttachment mocks base method.
func (m *MockNetworkManagerAPI) UpdateVpcAttachment(arg0 *networkmanager.UpdateVpcAttachmentInput) (*networkmanager.UpdateVpcAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpcAttachment", arg0)
	ret0, _ := ret[0].(*networkmanager.UpdateVpcAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpcAttachment indicates an expected call of UpdateVpcAttachment.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateVpcAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcAttachment", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateVpcAttachment), arg0)
}

// UpdateVpcAttachmentRequest mocks base method.
func (m *MockNetworkManagerAPI) UpdateVpcAttachmentRequest(arg0 *networkmanager.UpdateVpcAttachmentInput) (*request.Request, *networkmanager.UpdateVpcAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpcAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*networkmanager.UpdateVpcAttachmentOutput)
	return ret0, ret1
}

// UpdateVpcAttachmentRequest indicates an expected call of UpdateVpcAttachmentRequest.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateVpcAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcAttachmentRequest", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateVpcAttachmentRequest), arg0)
}

// UpdateVpcAttachmentWithContext mocks base method.
func (m *MockNetworkManagerAPI) UpdateVpcAttachmentWithContext(arg0 context.Context, arg1 *networkmanager.UpdateVpcAttachmentInput, arg2 ...request.Option) (*networkmanager.UpdateVpcAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVpcAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*networkmanager.UpdateVpcAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpcAttachmentWithContext indicates an expected call of UpdateVpcAttachmentWithContext.
func (mr *MockNetworkManagerAPIMockRecorder) UpdateVpcAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcAttachmentWithContext", reflect.TypeOf((*MockNetworkManagerAPI)(nil).UpdateVpcAttachmentWithContext), varargs...)
}

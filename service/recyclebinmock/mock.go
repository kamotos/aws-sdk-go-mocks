// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/recyclebin/recyclebiniface (interfaces: RecycleBinAPI)

// Package recyclebinmock is a generated GoMock package.
package recyclebinmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	recyclebin "github.com/aws/aws-sdk-go/service/recyclebin"
	gomock "github.com/golang/mock/gomock"
)

// MockRecycleBinAPI is a mock of RecycleBinAPI interface.
type MockRecycleBinAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRecycleBinAPIMockRecorder
}

// MockRecycleBinAPIMockRecorder is the mock recorder for MockRecycleBinAPI.
type MockRecycleBinAPIMockRecorder struct {
	mock *MockRecycleBinAPI
}

// NewMockRecycleBinAPI creates a new mock instance.
func NewMockRecycleBinAPI(ctrl *gomock.Controller) *MockRecycleBinAPI {
	mock := &MockRecycleBinAPI{ctrl: ctrl}
	mock.recorder = &MockRecycleBinAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecycleBinAPI) EXPECT() *MockRecycleBinAPIMockRecorder {
	return m.recorder
}

// CreateRule mocks base method.
func (m *MockRecycleBinAPI) CreateRule(arg0 *recyclebin.CreateRuleInput) (*recyclebin.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0)
	ret0, _ := ret[0].(*recyclebin.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockRecycleBinAPIMockRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockRecycleBinAPI)(nil).CreateRule), arg0)
}

// CreateRuleRequest mocks base method.
func (m *MockRecycleBinAPI) CreateRuleRequest(arg0 *recyclebin.CreateRuleInput) (*request.Request, *recyclebin.CreateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.CreateRuleOutput)
	return ret0, ret1
}

// CreateRuleRequest indicates an expected call of CreateRuleRequest.
func (mr *MockRecycleBinAPIMockRecorder) CreateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).CreateRuleRequest), arg0)
}

// CreateRuleWithContext mocks base method.
func (m *MockRecycleBinAPI) CreateRuleWithContext(arg0 context.Context, arg1 *recyclebin.CreateRuleInput, arg2 ...request.Option) (*recyclebin.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleWithContext indicates an expected call of CreateRuleWithContext.
func (mr *MockRecycleBinAPIMockRecorder) CreateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).CreateRuleWithContext), varargs...)
}

// DeleteRule mocks base method.
func (m *MockRecycleBinAPI) DeleteRule(arg0 *recyclebin.DeleteRuleInput) (*recyclebin.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(*recyclebin.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockRecycleBinAPIMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockRecycleBinAPI)(nil).DeleteRule), arg0)
}

// DeleteRuleRequest mocks base method.
func (m *MockRecycleBinAPI) DeleteRuleRequest(arg0 *recyclebin.DeleteRuleInput) (*request.Request, *recyclebin.DeleteRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.DeleteRuleOutput)
	return ret0, ret1
}

// DeleteRuleRequest indicates an expected call of DeleteRuleRequest.
func (mr *MockRecycleBinAPIMockRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).DeleteRuleRequest), arg0)
}

// DeleteRuleWithContext mocks base method.
func (m *MockRecycleBinAPI) DeleteRuleWithContext(arg0 context.Context, arg1 *recyclebin.DeleteRuleInput, arg2 ...request.Option) (*recyclebin.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleWithContext indicates an expected call of DeleteRuleWithContext.
func (mr *MockRecycleBinAPIMockRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).DeleteRuleWithContext), varargs...)
}

// GetRule mocks base method.
func (m *MockRecycleBinAPI) GetRule(arg0 *recyclebin.GetRuleInput) (*recyclebin.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0)
	ret0, _ := ret[0].(*recyclebin.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockRecycleBinAPIMockRecorder) GetRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockRecycleBinAPI)(nil).GetRule), arg0)
}

// GetRuleRequest mocks base method.
func (m *MockRecycleBinAPI) GetRuleRequest(arg0 *recyclebin.GetRuleInput) (*request.Request, *recyclebin.GetRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.GetRuleOutput)
	return ret0, ret1
}

// GetRuleRequest indicates an expected call of GetRuleRequest.
func (mr *MockRecycleBinAPIMockRecorder) GetRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).GetRuleRequest), arg0)
}

// GetRuleWithContext mocks base method.
func (m *MockRecycleBinAPI) GetRuleWithContext(arg0 context.Context, arg1 *recyclebin.GetRuleInput, arg2 ...request.Option) (*recyclebin.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleWithContext indicates an expected call of GetRuleWithContext.
func (mr *MockRecycleBinAPIMockRecorder) GetRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).GetRuleWithContext), varargs...)
}

// ListRules mocks base method.
func (m *MockRecycleBinAPI) ListRules(arg0 *recyclebin.ListRulesInput) (*recyclebin.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].(*recyclebin.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockRecycleBinAPIMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListRules), arg0)
}

// ListRulesPages mocks base method.
func (m *MockRecycleBinAPI) ListRulesPages(arg0 *recyclebin.ListRulesInput, arg1 func(*recyclebin.ListRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPages indicates an expected call of ListRulesPages.
func (mr *MockRecycleBinAPIMockRecorder) ListRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPages", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListRulesPages), arg0, arg1)
}

// ListRulesPagesWithContext mocks base method.
func (m *MockRecycleBinAPI) ListRulesPagesWithContext(arg0 context.Context, arg1 *recyclebin.ListRulesInput, arg2 func(*recyclebin.ListRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRulesPagesWithContext indicates an expected call of ListRulesPagesWithContext.
func (mr *MockRecycleBinAPIMockRecorder) ListRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesPagesWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListRulesPagesWithContext), varargs...)
}

// ListRulesRequest mocks base method.
func (m *MockRecycleBinAPI) ListRulesRequest(arg0 *recyclebin.ListRulesInput) (*request.Request, *recyclebin.ListRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.ListRulesOutput)
	return ret0, ret1
}

// ListRulesRequest indicates an expected call of ListRulesRequest.
func (mr *MockRecycleBinAPIMockRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListRulesRequest), arg0)
}

// ListRulesWithContext mocks base method.
func (m *MockRecycleBinAPI) ListRulesWithContext(arg0 context.Context, arg1 *recyclebin.ListRulesInput, arg2 ...request.Option) (*recyclebin.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesWithContext indicates an expected call of ListRulesWithContext.
func (mr *MockRecycleBinAPIMockRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListRulesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRecycleBinAPI) ListTagsForResource(arg0 *recyclebin.ListTagsForResourceInput) (*recyclebin.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*recyclebin.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRecycleBinAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockRecycleBinAPI) ListTagsForResourceRequest(arg0 *recyclebin.ListTagsForResourceInput) (*request.Request, *recyclebin.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockRecycleBinAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockRecycleBinAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *recyclebin.ListTagsForResourceInput, arg2 ...request.Option) (*recyclebin.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockRecycleBinAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockRecycleBinAPI) TagResource(arg0 *recyclebin.TagResourceInput) (*recyclebin.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*recyclebin.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockRecycleBinAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRecycleBinAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockRecycleBinAPI) TagResourceRequest(arg0 *recyclebin.TagResourceInput) (*request.Request, *recyclebin.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockRecycleBinAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockRecycleBinAPI) TagResourceWithContext(arg0 context.Context, arg1 *recyclebin.TagResourceInput, arg2 ...request.Option) (*recyclebin.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockRecycleBinAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockRecycleBinAPI) UntagResource(arg0 *recyclebin.UntagResourceInput) (*recyclebin.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*recyclebin.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockRecycleBinAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRecycleBinAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockRecycleBinAPI) UntagResourceRequest(arg0 *recyclebin.UntagResourceInput) (*request.Request, *recyclebin.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockRecycleBinAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockRecycleBinAPI) UntagResourceWithContext(arg0 context.Context, arg1 *recyclebin.UntagResourceInput, arg2 ...request.Option) (*recyclebin.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockRecycleBinAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateRule mocks base method.
func (m *MockRecycleBinAPI) UpdateRule(arg0 *recyclebin.UpdateRuleInput) (*recyclebin.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", arg0)
	ret0, _ := ret[0].(*recyclebin.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule.
func (mr *MockRecycleBinAPIMockRecorder) UpdateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockRecycleBinAPI)(nil).UpdateRule), arg0)
}

// UpdateRuleRequest mocks base method.
func (m *MockRecycleBinAPI) UpdateRuleRequest(arg0 *recyclebin.UpdateRuleInput) (*request.Request, *recyclebin.UpdateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*recyclebin.UpdateRuleOutput)
	return ret0, ret1
}

// UpdateRuleRequest indicates an expected call of UpdateRuleRequest.
func (mr *MockRecycleBinAPIMockRecorder) UpdateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleRequest", reflect.TypeOf((*MockRecycleBinAPI)(nil).UpdateRuleRequest), arg0)
}

// UpdateRuleWithContext mocks base method.
func (m *MockRecycleBinAPI) UpdateRuleWithContext(arg0 context.Context, arg1 *recyclebin.UpdateRuleInput, arg2 ...request.Option) (*recyclebin.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*recyclebin.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleWithContext indicates an expected call of UpdateRuleWithContext.
func (mr *MockRecycleBinAPIMockRecorder) UpdateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleWithContext", reflect.TypeOf((*MockRecycleBinAPI)(nil).UpdateRuleWithContext), varargs...)
}

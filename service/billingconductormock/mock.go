// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/billingconductor/billingconductoriface (interfaces: BillingConductorAPI)

// Package billingconductormock is a generated GoMock package.
package billingconductormock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	billingconductor "github.com/aws/aws-sdk-go/service/billingconductor"
	gomock "github.com/golang/mock/gomock"
)

// MockBillingConductorAPI is a mock of BillingConductorAPI interface.
type MockBillingConductorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBillingConductorAPIMockRecorder
}

// MockBillingConductorAPIMockRecorder is the mock recorder for MockBillingConductorAPI.
type MockBillingConductorAPIMockRecorder struct {
	mock *MockBillingConductorAPI
}

// NewMockBillingConductorAPI creates a new mock instance.
func NewMockBillingConductorAPI(ctrl *gomock.Controller) *MockBillingConductorAPI {
	mock := &MockBillingConductorAPI{ctrl: ctrl}
	mock.recorder = &MockBillingConductorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingConductorAPI) EXPECT() *MockBillingConductorAPIMockRecorder {
	return m.recorder
}

// AssociateAccounts mocks base method.
func (m *MockBillingConductorAPI) AssociateAccounts(arg0 *billingconductor.AssociateAccountsInput) (*billingconductor.AssociateAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAccounts", arg0)
	ret0, _ := ret[0].(*billingconductor.AssociateAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAccounts indicates an expected call of AssociateAccounts.
func (mr *MockBillingConductorAPIMockRecorder) AssociateAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAccounts", reflect.TypeOf((*MockBillingConductorAPI)(nil).AssociateAccounts), arg0)
}

// AssociateAccountsRequest mocks base method.
func (m *MockBillingConductorAPI) AssociateAccountsRequest(arg0 *billingconductor.AssociateAccountsInput) (*request.Request, *billingconductor.AssociateAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.AssociateAccountsOutput)
	return ret0, ret1
}

// AssociateAccountsRequest indicates an expected call of AssociateAccountsRequest.
func (mr *MockBillingConductorAPIMockRecorder) AssociateAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAccountsRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).AssociateAccountsRequest), arg0)
}

// AssociateAccountsWithContext mocks base method.
func (m *MockBillingConductorAPI) AssociateAccountsWithContext(arg0 context.Context, arg1 *billingconductor.AssociateAccountsInput, arg2 ...request.Option) (*billingconductor.AssociateAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.AssociateAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAccountsWithContext indicates an expected call of AssociateAccountsWithContext.
func (mr *MockBillingConductorAPIMockRecorder) AssociateAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAccountsWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).AssociateAccountsWithContext), varargs...)
}

// AssociatePricingRules mocks base method.
func (m *MockBillingConductorAPI) AssociatePricingRules(arg0 *billingconductor.AssociatePricingRulesInput) (*billingconductor.AssociatePricingRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePricingRules", arg0)
	ret0, _ := ret[0].(*billingconductor.AssociatePricingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePricingRules indicates an expected call of AssociatePricingRules.
func (mr *MockBillingConductorAPIMockRecorder) AssociatePricingRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePricingRules", reflect.TypeOf((*MockBillingConductorAPI)(nil).AssociatePricingRules), arg0)
}

// AssociatePricingRulesRequest mocks base method.
func (m *MockBillingConductorAPI) AssociatePricingRulesRequest(arg0 *billingconductor.AssociatePricingRulesInput) (*request.Request, *billingconductor.AssociatePricingRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociatePricingRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.AssociatePricingRulesOutput)
	return ret0, ret1
}

// AssociatePricingRulesRequest indicates an expected call of AssociatePricingRulesRequest.
func (mr *MockBillingConductorAPIMockRecorder) AssociatePricingRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePricingRulesRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).AssociatePricingRulesRequest), arg0)
}

// AssociatePricingRulesWithContext mocks base method.
func (m *MockBillingConductorAPI) AssociatePricingRulesWithContext(arg0 context.Context, arg1 *billingconductor.AssociatePricingRulesInput, arg2 ...request.Option) (*billingconductor.AssociatePricingRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociatePricingRulesWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.AssociatePricingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociatePricingRulesWithContext indicates an expected call of AssociatePricingRulesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) AssociatePricingRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePricingRulesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).AssociatePricingRulesWithContext), varargs...)
}

// BatchAssociateResourcesToCustomLineItem mocks base method.
func (m *MockBillingConductorAPI) BatchAssociateResourcesToCustomLineItem(arg0 *billingconductor.BatchAssociateResourcesToCustomLineItemInput) (*billingconductor.BatchAssociateResourcesToCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateResourcesToCustomLineItem", arg0)
	ret0, _ := ret[0].(*billingconductor.BatchAssociateResourcesToCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateResourcesToCustomLineItem indicates an expected call of BatchAssociateResourcesToCustomLineItem.
func (mr *MockBillingConductorAPIMockRecorder) BatchAssociateResourcesToCustomLineItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateResourcesToCustomLineItem", reflect.TypeOf((*MockBillingConductorAPI)(nil).BatchAssociateResourcesToCustomLineItem), arg0)
}

// BatchAssociateResourcesToCustomLineItemRequest mocks base method.
func (m *MockBillingConductorAPI) BatchAssociateResourcesToCustomLineItemRequest(arg0 *billingconductor.BatchAssociateResourcesToCustomLineItemInput) (*request.Request, *billingconductor.BatchAssociateResourcesToCustomLineItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateResourcesToCustomLineItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.BatchAssociateResourcesToCustomLineItemOutput)
	return ret0, ret1
}

// BatchAssociateResourcesToCustomLineItemRequest indicates an expected call of BatchAssociateResourcesToCustomLineItemRequest.
func (mr *MockBillingConductorAPIMockRecorder) BatchAssociateResourcesToCustomLineItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateResourcesToCustomLineItemRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).BatchAssociateResourcesToCustomLineItemRequest), arg0)
}

// BatchAssociateResourcesToCustomLineItemWithContext mocks base method.
func (m *MockBillingConductorAPI) BatchAssociateResourcesToCustomLineItemWithContext(arg0 context.Context, arg1 *billingconductor.BatchAssociateResourcesToCustomLineItemInput, arg2 ...request.Option) (*billingconductor.BatchAssociateResourcesToCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAssociateResourcesToCustomLineItemWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.BatchAssociateResourcesToCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateResourcesToCustomLineItemWithContext indicates an expected call of BatchAssociateResourcesToCustomLineItemWithContext.
func (mr *MockBillingConductorAPIMockRecorder) BatchAssociateResourcesToCustomLineItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateResourcesToCustomLineItemWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).BatchAssociateResourcesToCustomLineItemWithContext), varargs...)
}

// BatchDisassociateResourcesFromCustomLineItem mocks base method.
func (m *MockBillingConductorAPI) BatchDisassociateResourcesFromCustomLineItem(arg0 *billingconductor.BatchDisassociateResourcesFromCustomLineItemInput) (*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateResourcesFromCustomLineItem", arg0)
	ret0, _ := ret[0].(*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateResourcesFromCustomLineItem indicates an expected call of BatchDisassociateResourcesFromCustomLineItem.
func (mr *MockBillingConductorAPIMockRecorder) BatchDisassociateResourcesFromCustomLineItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateResourcesFromCustomLineItem", reflect.TypeOf((*MockBillingConductorAPI)(nil).BatchDisassociateResourcesFromCustomLineItem), arg0)
}

// BatchDisassociateResourcesFromCustomLineItemRequest mocks base method.
func (m *MockBillingConductorAPI) BatchDisassociateResourcesFromCustomLineItemRequest(arg0 *billingconductor.BatchDisassociateResourcesFromCustomLineItemInput) (*request.Request, *billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateResourcesFromCustomLineItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput)
	return ret0, ret1
}

// BatchDisassociateResourcesFromCustomLineItemRequest indicates an expected call of BatchDisassociateResourcesFromCustomLineItemRequest.
func (mr *MockBillingConductorAPIMockRecorder) BatchDisassociateResourcesFromCustomLineItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateResourcesFromCustomLineItemRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).BatchDisassociateResourcesFromCustomLineItemRequest), arg0)
}

// BatchDisassociateResourcesFromCustomLineItemWithContext mocks base method.
func (m *MockBillingConductorAPI) BatchDisassociateResourcesFromCustomLineItemWithContext(arg0 context.Context, arg1 *billingconductor.BatchDisassociateResourcesFromCustomLineItemInput, arg2 ...request.Option) (*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisassociateResourcesFromCustomLineItemWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateResourcesFromCustomLineItemWithContext indicates an expected call of BatchDisassociateResourcesFromCustomLineItemWithContext.
func (mr *MockBillingConductorAPIMockRecorder) BatchDisassociateResourcesFromCustomLineItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateResourcesFromCustomLineItemWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).BatchDisassociateResourcesFromCustomLineItemWithContext), varargs...)
}

// CreateBillingGroup mocks base method.
func (m *MockBillingConductorAPI) CreateBillingGroup(arg0 *billingconductor.CreateBillingGroupInput) (*billingconductor.CreateBillingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBillingGroup", arg0)
	ret0, _ := ret[0].(*billingconductor.CreateBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBillingGroup indicates an expected call of CreateBillingGroup.
func (mr *MockBillingConductorAPIMockRecorder) CreateBillingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBillingGroup", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreateBillingGroup), arg0)
}

// CreateBillingGroupRequest mocks base method.
func (m *MockBillingConductorAPI) CreateBillingGroupRequest(arg0 *billingconductor.CreateBillingGroupInput) (*request.Request, *billingconductor.CreateBillingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBillingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.CreateBillingGroupOutput)
	return ret0, ret1
}

// CreateBillingGroupRequest indicates an expected call of CreateBillingGroupRequest.
func (mr *MockBillingConductorAPIMockRecorder) CreateBillingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBillingGroupRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreateBillingGroupRequest), arg0)
}

// CreateBillingGroupWithContext mocks base method.
func (m *MockBillingConductorAPI) CreateBillingGroupWithContext(arg0 context.Context, arg1 *billingconductor.CreateBillingGroupInput, arg2 ...request.Option) (*billingconductor.CreateBillingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBillingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.CreateBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBillingGroupWithContext indicates an expected call of CreateBillingGroupWithContext.
func (mr *MockBillingConductorAPIMockRecorder) CreateBillingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBillingGroupWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreateBillingGroupWithContext), varargs...)
}

// CreateCustomLineItem mocks base method.
func (m *MockBillingConductorAPI) CreateCustomLineItem(arg0 *billingconductor.CreateCustomLineItemInput) (*billingconductor.CreateCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomLineItem", arg0)
	ret0, _ := ret[0].(*billingconductor.CreateCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomLineItem indicates an expected call of CreateCustomLineItem.
func (mr *MockBillingConductorAPIMockRecorder) CreateCustomLineItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLineItem", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreateCustomLineItem), arg0)
}

// CreateCustomLineItemRequest mocks base method.
func (m *MockBillingConductorAPI) CreateCustomLineItemRequest(arg0 *billingconductor.CreateCustomLineItemInput) (*request.Request, *billingconductor.CreateCustomLineItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomLineItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.CreateCustomLineItemOutput)
	return ret0, ret1
}

// CreateCustomLineItemRequest indicates an expected call of CreateCustomLineItemRequest.
func (mr *MockBillingConductorAPIMockRecorder) CreateCustomLineItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLineItemRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreateCustomLineItemRequest), arg0)
}

// CreateCustomLineItemWithContext mocks base method.
func (m *MockBillingConductorAPI) CreateCustomLineItemWithContext(arg0 context.Context, arg1 *billingconductor.CreateCustomLineItemInput, arg2 ...request.Option) (*billingconductor.CreateCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomLineItemWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.CreateCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomLineItemWithContext indicates an expected call of CreateCustomLineItemWithContext.
func (mr *MockBillingConductorAPIMockRecorder) CreateCustomLineItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomLineItemWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreateCustomLineItemWithContext), varargs...)
}

// CreatePricingPlan mocks base method.
func (m *MockBillingConductorAPI) CreatePricingPlan(arg0 *billingconductor.CreatePricingPlanInput) (*billingconductor.CreatePricingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePricingPlan", arg0)
	ret0, _ := ret[0].(*billingconductor.CreatePricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePricingPlan indicates an expected call of CreatePricingPlan.
func (mr *MockBillingConductorAPIMockRecorder) CreatePricingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePricingPlan", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreatePricingPlan), arg0)
}

// CreatePricingPlanRequest mocks base method.
func (m *MockBillingConductorAPI) CreatePricingPlanRequest(arg0 *billingconductor.CreatePricingPlanInput) (*request.Request, *billingconductor.CreatePricingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePricingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.CreatePricingPlanOutput)
	return ret0, ret1
}

// CreatePricingPlanRequest indicates an expected call of CreatePricingPlanRequest.
func (mr *MockBillingConductorAPIMockRecorder) CreatePricingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePricingPlanRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreatePricingPlanRequest), arg0)
}

// CreatePricingPlanWithContext mocks base method.
func (m *MockBillingConductorAPI) CreatePricingPlanWithContext(arg0 context.Context, arg1 *billingconductor.CreatePricingPlanInput, arg2 ...request.Option) (*billingconductor.CreatePricingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePricingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.CreatePricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePricingPlanWithContext indicates an expected call of CreatePricingPlanWithContext.
func (mr *MockBillingConductorAPIMockRecorder) CreatePricingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePricingPlanWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreatePricingPlanWithContext), varargs...)
}

// CreatePricingRule mocks base method.
func (m *MockBillingConductorAPI) CreatePricingRule(arg0 *billingconductor.CreatePricingRuleInput) (*billingconductor.CreatePricingRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePricingRule", arg0)
	ret0, _ := ret[0].(*billingconductor.CreatePricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePricingRule indicates an expected call of CreatePricingRule.
func (mr *MockBillingConductorAPIMockRecorder) CreatePricingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePricingRule", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreatePricingRule), arg0)
}

// CreatePricingRuleRequest mocks base method.
func (m *MockBillingConductorAPI) CreatePricingRuleRequest(arg0 *billingconductor.CreatePricingRuleInput) (*request.Request, *billingconductor.CreatePricingRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePricingRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.CreatePricingRuleOutput)
	return ret0, ret1
}

// CreatePricingRuleRequest indicates an expected call of CreatePricingRuleRequest.
func (mr *MockBillingConductorAPIMockRecorder) CreatePricingRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePricingRuleRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreatePricingRuleRequest), arg0)
}

// CreatePricingRuleWithContext mocks base method.
func (m *MockBillingConductorAPI) CreatePricingRuleWithContext(arg0 context.Context, arg1 *billingconductor.CreatePricingRuleInput, arg2 ...request.Option) (*billingconductor.CreatePricingRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePricingRuleWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.CreatePricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePricingRuleWithContext indicates an expected call of CreatePricingRuleWithContext.
func (mr *MockBillingConductorAPIMockRecorder) CreatePricingRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePricingRuleWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).CreatePricingRuleWithContext), varargs...)
}

// DeleteBillingGroup mocks base method.
func (m *MockBillingConductorAPI) DeleteBillingGroup(arg0 *billingconductor.DeleteBillingGroupInput) (*billingconductor.DeleteBillingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBillingGroup", arg0)
	ret0, _ := ret[0].(*billingconductor.DeleteBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBillingGroup indicates an expected call of DeleteBillingGroup.
func (mr *MockBillingConductorAPIMockRecorder) DeleteBillingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBillingGroup", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeleteBillingGroup), arg0)
}

// DeleteBillingGroupRequest mocks base method.
func (m *MockBillingConductorAPI) DeleteBillingGroupRequest(arg0 *billingconductor.DeleteBillingGroupInput) (*request.Request, *billingconductor.DeleteBillingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBillingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.DeleteBillingGroupOutput)
	return ret0, ret1
}

// DeleteBillingGroupRequest indicates an expected call of DeleteBillingGroupRequest.
func (mr *MockBillingConductorAPIMockRecorder) DeleteBillingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBillingGroupRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeleteBillingGroupRequest), arg0)
}

// DeleteBillingGroupWithContext mocks base method.
func (m *MockBillingConductorAPI) DeleteBillingGroupWithContext(arg0 context.Context, arg1 *billingconductor.DeleteBillingGroupInput, arg2 ...request.Option) (*billingconductor.DeleteBillingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBillingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.DeleteBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBillingGroupWithContext indicates an expected call of DeleteBillingGroupWithContext.
func (mr *MockBillingConductorAPIMockRecorder) DeleteBillingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBillingGroupWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeleteBillingGroupWithContext), varargs...)
}

// DeleteCustomLineItem mocks base method.
func (m *MockBillingConductorAPI) DeleteCustomLineItem(arg0 *billingconductor.DeleteCustomLineItemInput) (*billingconductor.DeleteCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomLineItem", arg0)
	ret0, _ := ret[0].(*billingconductor.DeleteCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomLineItem indicates an expected call of DeleteCustomLineItem.
func (mr *MockBillingConductorAPIMockRecorder) DeleteCustomLineItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLineItem", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeleteCustomLineItem), arg0)
}

// DeleteCustomLineItemRequest mocks base method.
func (m *MockBillingConductorAPI) DeleteCustomLineItemRequest(arg0 *billingconductor.DeleteCustomLineItemInput) (*request.Request, *billingconductor.DeleteCustomLineItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomLineItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.DeleteCustomLineItemOutput)
	return ret0, ret1
}

// DeleteCustomLineItemRequest indicates an expected call of DeleteCustomLineItemRequest.
func (mr *MockBillingConductorAPIMockRecorder) DeleteCustomLineItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLineItemRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeleteCustomLineItemRequest), arg0)
}

// DeleteCustomLineItemWithContext mocks base method.
func (m *MockBillingConductorAPI) DeleteCustomLineItemWithContext(arg0 context.Context, arg1 *billingconductor.DeleteCustomLineItemInput, arg2 ...request.Option) (*billingconductor.DeleteCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomLineItemWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.DeleteCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomLineItemWithContext indicates an expected call of DeleteCustomLineItemWithContext.
func (mr *MockBillingConductorAPIMockRecorder) DeleteCustomLineItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomLineItemWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeleteCustomLineItemWithContext), varargs...)
}

// DeletePricingPlan mocks base method.
func (m *MockBillingConductorAPI) DeletePricingPlan(arg0 *billingconductor.DeletePricingPlanInput) (*billingconductor.DeletePricingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePricingPlan", arg0)
	ret0, _ := ret[0].(*billingconductor.DeletePricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePricingPlan indicates an expected call of DeletePricingPlan.
func (mr *MockBillingConductorAPIMockRecorder) DeletePricingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePricingPlan", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeletePricingPlan), arg0)
}

// DeletePricingPlanRequest mocks base method.
func (m *MockBillingConductorAPI) DeletePricingPlanRequest(arg0 *billingconductor.DeletePricingPlanInput) (*request.Request, *billingconductor.DeletePricingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePricingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.DeletePricingPlanOutput)
	return ret0, ret1
}

// DeletePricingPlanRequest indicates an expected call of DeletePricingPlanRequest.
func (mr *MockBillingConductorAPIMockRecorder) DeletePricingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePricingPlanRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeletePricingPlanRequest), arg0)
}

// DeletePricingPlanWithContext mocks base method.
func (m *MockBillingConductorAPI) DeletePricingPlanWithContext(arg0 context.Context, arg1 *billingconductor.DeletePricingPlanInput, arg2 ...request.Option) (*billingconductor.DeletePricingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePricingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.DeletePricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePricingPlanWithContext indicates an expected call of DeletePricingPlanWithContext.
func (mr *MockBillingConductorAPIMockRecorder) DeletePricingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePricingPlanWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeletePricingPlanWithContext), varargs...)
}

// DeletePricingRule mocks base method.
func (m *MockBillingConductorAPI) DeletePricingRule(arg0 *billingconductor.DeletePricingRuleInput) (*billingconductor.DeletePricingRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePricingRule", arg0)
	ret0, _ := ret[0].(*billingconductor.DeletePricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePricingRule indicates an expected call of DeletePricingRule.
func (mr *MockBillingConductorAPIMockRecorder) DeletePricingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePricingRule", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeletePricingRule), arg0)
}

// DeletePricingRuleRequest mocks base method.
func (m *MockBillingConductorAPI) DeletePricingRuleRequest(arg0 *billingconductor.DeletePricingRuleInput) (*request.Request, *billingconductor.DeletePricingRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePricingRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.DeletePricingRuleOutput)
	return ret0, ret1
}

// DeletePricingRuleRequest indicates an expected call of DeletePricingRuleRequest.
func (mr *MockBillingConductorAPIMockRecorder) DeletePricingRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePricingRuleRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeletePricingRuleRequest), arg0)
}

// DeletePricingRuleWithContext mocks base method.
func (m *MockBillingConductorAPI) DeletePricingRuleWithContext(arg0 context.Context, arg1 *billingconductor.DeletePricingRuleInput, arg2 ...request.Option) (*billingconductor.DeletePricingRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePricingRuleWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.DeletePricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePricingRuleWithContext indicates an expected call of DeletePricingRuleWithContext.
func (mr *MockBillingConductorAPIMockRecorder) DeletePricingRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePricingRuleWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).DeletePricingRuleWithContext), varargs...)
}

// DisassociateAccounts mocks base method.
func (m *MockBillingConductorAPI) DisassociateAccounts(arg0 *billingconductor.DisassociateAccountsInput) (*billingconductor.DisassociateAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAccounts", arg0)
	ret0, _ := ret[0].(*billingconductor.DisassociateAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAccounts indicates an expected call of DisassociateAccounts.
func (mr *MockBillingConductorAPIMockRecorder) DisassociateAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAccounts", reflect.TypeOf((*MockBillingConductorAPI)(nil).DisassociateAccounts), arg0)
}

// DisassociateAccountsRequest mocks base method.
func (m *MockBillingConductorAPI) DisassociateAccountsRequest(arg0 *billingconductor.DisassociateAccountsInput) (*request.Request, *billingconductor.DisassociateAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.DisassociateAccountsOutput)
	return ret0, ret1
}

// DisassociateAccountsRequest indicates an expected call of DisassociateAccountsRequest.
func (mr *MockBillingConductorAPIMockRecorder) DisassociateAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAccountsRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).DisassociateAccountsRequest), arg0)
}

// DisassociateAccountsWithContext mocks base method.
func (m *MockBillingConductorAPI) DisassociateAccountsWithContext(arg0 context.Context, arg1 *billingconductor.DisassociateAccountsInput, arg2 ...request.Option) (*billingconductor.DisassociateAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.DisassociateAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAccountsWithContext indicates an expected call of DisassociateAccountsWithContext.
func (mr *MockBillingConductorAPIMockRecorder) DisassociateAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAccountsWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).DisassociateAccountsWithContext), varargs...)
}

// DisassociatePricingRules mocks base method.
func (m *MockBillingConductorAPI) DisassociatePricingRules(arg0 *billingconductor.DisassociatePricingRulesInput) (*billingconductor.DisassociatePricingRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePricingRules", arg0)
	ret0, _ := ret[0].(*billingconductor.DisassociatePricingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePricingRules indicates an expected call of DisassociatePricingRules.
func (mr *MockBillingConductorAPIMockRecorder) DisassociatePricingRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePricingRules", reflect.TypeOf((*MockBillingConductorAPI)(nil).DisassociatePricingRules), arg0)
}

// DisassociatePricingRulesRequest mocks base method.
func (m *MockBillingConductorAPI) DisassociatePricingRulesRequest(arg0 *billingconductor.DisassociatePricingRulesInput) (*request.Request, *billingconductor.DisassociatePricingRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociatePricingRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.DisassociatePricingRulesOutput)
	return ret0, ret1
}

// DisassociatePricingRulesRequest indicates an expected call of DisassociatePricingRulesRequest.
func (mr *MockBillingConductorAPIMockRecorder) DisassociatePricingRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePricingRulesRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).DisassociatePricingRulesRequest), arg0)
}

// DisassociatePricingRulesWithContext mocks base method.
func (m *MockBillingConductorAPI) DisassociatePricingRulesWithContext(arg0 context.Context, arg1 *billingconductor.DisassociatePricingRulesInput, arg2 ...request.Option) (*billingconductor.DisassociatePricingRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociatePricingRulesWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.DisassociatePricingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociatePricingRulesWithContext indicates an expected call of DisassociatePricingRulesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) DisassociatePricingRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociatePricingRulesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).DisassociatePricingRulesWithContext), varargs...)
}

// ListAccountAssociations mocks base method.
func (m *MockBillingConductorAPI) ListAccountAssociations(arg0 *billingconductor.ListAccountAssociationsInput) (*billingconductor.ListAccountAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssociations", arg0)
	ret0, _ := ret[0].(*billingconductor.ListAccountAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssociations indicates an expected call of ListAccountAssociations.
func (mr *MockBillingConductorAPIMockRecorder) ListAccountAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssociations", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListAccountAssociations), arg0)
}

// ListAccountAssociationsPages mocks base method.
func (m *MockBillingConductorAPI) ListAccountAssociationsPages(arg0 *billingconductor.ListAccountAssociationsInput, arg1 func(*billingconductor.ListAccountAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssociationsPages indicates an expected call of ListAccountAssociationsPages.
func (mr *MockBillingConductorAPIMockRecorder) ListAccountAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssociationsPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListAccountAssociationsPages), arg0, arg1)
}

// ListAccountAssociationsPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListAccountAssociationsPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListAccountAssociationsInput, arg2 func(*billingconductor.ListAccountAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountAssociationsPagesWithContext indicates an expected call of ListAccountAssociationsPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListAccountAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssociationsPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListAccountAssociationsPagesWithContext), varargs...)
}

// ListAccountAssociationsRequest mocks base method.
func (m *MockBillingConductorAPI) ListAccountAssociationsRequest(arg0 *billingconductor.ListAccountAssociationsInput) (*request.Request, *billingconductor.ListAccountAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListAccountAssociationsOutput)
	return ret0, ret1
}

// ListAccountAssociationsRequest indicates an expected call of ListAccountAssociationsRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListAccountAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssociationsRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListAccountAssociationsRequest), arg0)
}

// ListAccountAssociationsWithContext mocks base method.
func (m *MockBillingConductorAPI) ListAccountAssociationsWithContext(arg0 context.Context, arg1 *billingconductor.ListAccountAssociationsInput, arg2 ...request.Option) (*billingconductor.ListAccountAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListAccountAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountAssociationsWithContext indicates an expected call of ListAccountAssociationsWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListAccountAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountAssociationsWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListAccountAssociationsWithContext), varargs...)
}

// ListBillingGroupCostReports mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupCostReports(arg0 *billingconductor.ListBillingGroupCostReportsInput) (*billingconductor.ListBillingGroupCostReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingGroupCostReports", arg0)
	ret0, _ := ret[0].(*billingconductor.ListBillingGroupCostReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBillingGroupCostReports indicates an expected call of ListBillingGroupCostReports.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupCostReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupCostReports", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupCostReports), arg0)
}

// ListBillingGroupCostReportsPages mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupCostReportsPages(arg0 *billingconductor.ListBillingGroupCostReportsInput, arg1 func(*billingconductor.ListBillingGroupCostReportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingGroupCostReportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBillingGroupCostReportsPages indicates an expected call of ListBillingGroupCostReportsPages.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupCostReportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupCostReportsPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupCostReportsPages), arg0, arg1)
}

// ListBillingGroupCostReportsPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupCostReportsPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListBillingGroupCostReportsInput, arg2 func(*billingconductor.ListBillingGroupCostReportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBillingGroupCostReportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBillingGroupCostReportsPagesWithContext indicates an expected call of ListBillingGroupCostReportsPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupCostReportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupCostReportsPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupCostReportsPagesWithContext), varargs...)
}

// ListBillingGroupCostReportsRequest mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupCostReportsRequest(arg0 *billingconductor.ListBillingGroupCostReportsInput) (*request.Request, *billingconductor.ListBillingGroupCostReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingGroupCostReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListBillingGroupCostReportsOutput)
	return ret0, ret1
}

// ListBillingGroupCostReportsRequest indicates an expected call of ListBillingGroupCostReportsRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupCostReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupCostReportsRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupCostReportsRequest), arg0)
}

// ListBillingGroupCostReportsWithContext mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupCostReportsWithContext(arg0 context.Context, arg1 *billingconductor.ListBillingGroupCostReportsInput, arg2 ...request.Option) (*billingconductor.ListBillingGroupCostReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBillingGroupCostReportsWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListBillingGroupCostReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBillingGroupCostReportsWithContext indicates an expected call of ListBillingGroupCostReportsWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupCostReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupCostReportsWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupCostReportsWithContext), varargs...)
}

// ListBillingGroups mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroups(arg0 *billingconductor.ListBillingGroupsInput) (*billingconductor.ListBillingGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingGroups", arg0)
	ret0, _ := ret[0].(*billingconductor.ListBillingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBillingGroups indicates an expected call of ListBillingGroups.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroups", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroups), arg0)
}

// ListBillingGroupsPages mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupsPages(arg0 *billingconductor.ListBillingGroupsInput, arg1 func(*billingconductor.ListBillingGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBillingGroupsPages indicates an expected call of ListBillingGroupsPages.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupsPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupsPages), arg0, arg1)
}

// ListBillingGroupsPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupsPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListBillingGroupsInput, arg2 func(*billingconductor.ListBillingGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBillingGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBillingGroupsPagesWithContext indicates an expected call of ListBillingGroupsPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupsPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupsPagesWithContext), varargs...)
}

// ListBillingGroupsRequest mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupsRequest(arg0 *billingconductor.ListBillingGroupsInput) (*request.Request, *billingconductor.ListBillingGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListBillingGroupsOutput)
	return ret0, ret1
}

// ListBillingGroupsRequest indicates an expected call of ListBillingGroupsRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupsRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupsRequest), arg0)
}

// ListBillingGroupsWithContext mocks base method.
func (m *MockBillingConductorAPI) ListBillingGroupsWithContext(arg0 context.Context, arg1 *billingconductor.ListBillingGroupsInput, arg2 ...request.Option) (*billingconductor.ListBillingGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBillingGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListBillingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBillingGroupsWithContext indicates an expected call of ListBillingGroupsWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListBillingGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingGroupsWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListBillingGroupsWithContext), varargs...)
}

// ListCustomLineItems mocks base method.
func (m *MockBillingConductorAPI) ListCustomLineItems(arg0 *billingconductor.ListCustomLineItemsInput) (*billingconductor.ListCustomLineItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomLineItems", arg0)
	ret0, _ := ret[0].(*billingconductor.ListCustomLineItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomLineItems indicates an expected call of ListCustomLineItems.
func (mr *MockBillingConductorAPIMockRecorder) ListCustomLineItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomLineItems", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListCustomLineItems), arg0)
}

// ListCustomLineItemsPages mocks base method.
func (m *MockBillingConductorAPI) ListCustomLineItemsPages(arg0 *billingconductor.ListCustomLineItemsInput, arg1 func(*billingconductor.ListCustomLineItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomLineItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomLineItemsPages indicates an expected call of ListCustomLineItemsPages.
func (mr *MockBillingConductorAPIMockRecorder) ListCustomLineItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomLineItemsPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListCustomLineItemsPages), arg0, arg1)
}

// ListCustomLineItemsPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListCustomLineItemsPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListCustomLineItemsInput, arg2 func(*billingconductor.ListCustomLineItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomLineItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomLineItemsPagesWithContext indicates an expected call of ListCustomLineItemsPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListCustomLineItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomLineItemsPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListCustomLineItemsPagesWithContext), varargs...)
}

// ListCustomLineItemsRequest mocks base method.
func (m *MockBillingConductorAPI) ListCustomLineItemsRequest(arg0 *billingconductor.ListCustomLineItemsInput) (*request.Request, *billingconductor.ListCustomLineItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomLineItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListCustomLineItemsOutput)
	return ret0, ret1
}

// ListCustomLineItemsRequest indicates an expected call of ListCustomLineItemsRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListCustomLineItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomLineItemsRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListCustomLineItemsRequest), arg0)
}

// ListCustomLineItemsWithContext mocks base method.
func (m *MockBillingConductorAPI) ListCustomLineItemsWithContext(arg0 context.Context, arg1 *billingconductor.ListCustomLineItemsInput, arg2 ...request.Option) (*billingconductor.ListCustomLineItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomLineItemsWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListCustomLineItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomLineItemsWithContext indicates an expected call of ListCustomLineItemsWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListCustomLineItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomLineItemsWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListCustomLineItemsWithContext), varargs...)
}

// ListPricingPlans mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlans(arg0 *billingconductor.ListPricingPlansInput) (*billingconductor.ListPricingPlansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingPlans", arg0)
	ret0, _ := ret[0].(*billingconductor.ListPricingPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingPlans indicates an expected call of ListPricingPlans.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlans", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlans), arg0)
}

// ListPricingPlansAssociatedWithPricingRule mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansAssociatedWithPricingRule(arg0 *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput) (*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingPlansAssociatedWithPricingRule", arg0)
	ret0, _ := ret[0].(*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingPlansAssociatedWithPricingRule indicates an expected call of ListPricingPlansAssociatedWithPricingRule.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansAssociatedWithPricingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansAssociatedWithPricingRule", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansAssociatedWithPricingRule), arg0)
}

// ListPricingPlansAssociatedWithPricingRulePages mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansAssociatedWithPricingRulePages(arg0 *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput, arg1 func(*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingPlansAssociatedWithPricingRulePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingPlansAssociatedWithPricingRulePages indicates an expected call of ListPricingPlansAssociatedWithPricingRulePages.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansAssociatedWithPricingRulePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansAssociatedWithPricingRulePages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansAssociatedWithPricingRulePages), arg0, arg1)
}

// ListPricingPlansAssociatedWithPricingRulePagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansAssociatedWithPricingRulePagesWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput, arg2 func(*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingPlansAssociatedWithPricingRulePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingPlansAssociatedWithPricingRulePagesWithContext indicates an expected call of ListPricingPlansAssociatedWithPricingRulePagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansAssociatedWithPricingRulePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansAssociatedWithPricingRulePagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansAssociatedWithPricingRulePagesWithContext), varargs...)
}

// ListPricingPlansAssociatedWithPricingRuleRequest mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansAssociatedWithPricingRuleRequest(arg0 *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput) (*request.Request, *billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingPlansAssociatedWithPricingRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput)
	return ret0, ret1
}

// ListPricingPlansAssociatedWithPricingRuleRequest indicates an expected call of ListPricingPlansAssociatedWithPricingRuleRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansAssociatedWithPricingRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansAssociatedWithPricingRuleRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansAssociatedWithPricingRuleRequest), arg0)
}

// ListPricingPlansAssociatedWithPricingRuleWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansAssociatedWithPricingRuleWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput, arg2 ...request.Option) (*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingPlansAssociatedWithPricingRuleWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingPlansAssociatedWithPricingRuleWithContext indicates an expected call of ListPricingPlansAssociatedWithPricingRuleWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansAssociatedWithPricingRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansAssociatedWithPricingRuleWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansAssociatedWithPricingRuleWithContext), varargs...)
}

// ListPricingPlansPages mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansPages(arg0 *billingconductor.ListPricingPlansInput, arg1 func(*billingconductor.ListPricingPlansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingPlansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingPlansPages indicates an expected call of ListPricingPlansPages.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansPages), arg0, arg1)
}

// ListPricingPlansPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingPlansInput, arg2 func(*billingconductor.ListPricingPlansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingPlansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingPlansPagesWithContext indicates an expected call of ListPricingPlansPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansPagesWithContext), varargs...)
}

// ListPricingPlansRequest mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansRequest(arg0 *billingconductor.ListPricingPlansInput) (*request.Request, *billingconductor.ListPricingPlansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingPlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListPricingPlansOutput)
	return ret0, ret1
}

// ListPricingPlansRequest indicates an expected call of ListPricingPlansRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansRequest), arg0)
}

// ListPricingPlansWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingPlansWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingPlansInput, arg2 ...request.Option) (*billingconductor.ListPricingPlansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingPlansWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListPricingPlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingPlansWithContext indicates an expected call of ListPricingPlansWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingPlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingPlansWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingPlansWithContext), varargs...)
}

// ListPricingRules mocks base method.
func (m *MockBillingConductorAPI) ListPricingRules(arg0 *billingconductor.ListPricingRulesInput) (*billingconductor.ListPricingRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingRules", arg0)
	ret0, _ := ret[0].(*billingconductor.ListPricingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingRules indicates an expected call of ListPricingRules.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRules", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRules), arg0)
}

// ListPricingRulesAssociatedToPricingPlan mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesAssociatedToPricingPlan(arg0 *billingconductor.ListPricingRulesAssociatedToPricingPlanInput) (*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingRulesAssociatedToPricingPlan", arg0)
	ret0, _ := ret[0].(*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingRulesAssociatedToPricingPlan indicates an expected call of ListPricingRulesAssociatedToPricingPlan.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesAssociatedToPricingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesAssociatedToPricingPlan", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesAssociatedToPricingPlan), arg0)
}

// ListPricingRulesAssociatedToPricingPlanPages mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesAssociatedToPricingPlanPages(arg0 *billingconductor.ListPricingRulesAssociatedToPricingPlanInput, arg1 func(*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingRulesAssociatedToPricingPlanPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingRulesAssociatedToPricingPlanPages indicates an expected call of ListPricingRulesAssociatedToPricingPlanPages.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesAssociatedToPricingPlanPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesAssociatedToPricingPlanPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesAssociatedToPricingPlanPages), arg0, arg1)
}

// ListPricingRulesAssociatedToPricingPlanPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesAssociatedToPricingPlanPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingRulesAssociatedToPricingPlanInput, arg2 func(*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingRulesAssociatedToPricingPlanPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingRulesAssociatedToPricingPlanPagesWithContext indicates an expected call of ListPricingRulesAssociatedToPricingPlanPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesAssociatedToPricingPlanPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesAssociatedToPricingPlanPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesAssociatedToPricingPlanPagesWithContext), varargs...)
}

// ListPricingRulesAssociatedToPricingPlanRequest mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesAssociatedToPricingPlanRequest(arg0 *billingconductor.ListPricingRulesAssociatedToPricingPlanInput) (*request.Request, *billingconductor.ListPricingRulesAssociatedToPricingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingRulesAssociatedToPricingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput)
	return ret0, ret1
}

// ListPricingRulesAssociatedToPricingPlanRequest indicates an expected call of ListPricingRulesAssociatedToPricingPlanRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesAssociatedToPricingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesAssociatedToPricingPlanRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesAssociatedToPricingPlanRequest), arg0)
}

// ListPricingRulesAssociatedToPricingPlanWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesAssociatedToPricingPlanWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingRulesAssociatedToPricingPlanInput, arg2 ...request.Option) (*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingRulesAssociatedToPricingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingRulesAssociatedToPricingPlanWithContext indicates an expected call of ListPricingRulesAssociatedToPricingPlanWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesAssociatedToPricingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesAssociatedToPricingPlanWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesAssociatedToPricingPlanWithContext), varargs...)
}

// ListPricingRulesPages mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesPages(arg0 *billingconductor.ListPricingRulesInput, arg1 func(*billingconductor.ListPricingRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingRulesPages indicates an expected call of ListPricingRulesPages.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesPages), arg0, arg1)
}

// ListPricingRulesPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingRulesInput, arg2 func(*billingconductor.ListPricingRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPricingRulesPagesWithContext indicates an expected call of ListPricingRulesPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesPagesWithContext), varargs...)
}

// ListPricingRulesRequest mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesRequest(arg0 *billingconductor.ListPricingRulesInput) (*request.Request, *billingconductor.ListPricingRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPricingRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListPricingRulesOutput)
	return ret0, ret1
}

// ListPricingRulesRequest indicates an expected call of ListPricingRulesRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesRequest), arg0)
}

// ListPricingRulesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListPricingRulesWithContext(arg0 context.Context, arg1 *billingconductor.ListPricingRulesInput, arg2 ...request.Option) (*billingconductor.ListPricingRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPricingRulesWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListPricingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPricingRulesWithContext indicates an expected call of ListPricingRulesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListPricingRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPricingRulesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListPricingRulesWithContext), varargs...)
}

// ListResourcesAssociatedToCustomLineItem mocks base method.
func (m *MockBillingConductorAPI) ListResourcesAssociatedToCustomLineItem(arg0 *billingconductor.ListResourcesAssociatedToCustomLineItemInput) (*billingconductor.ListResourcesAssociatedToCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesAssociatedToCustomLineItem", arg0)
	ret0, _ := ret[0].(*billingconductor.ListResourcesAssociatedToCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesAssociatedToCustomLineItem indicates an expected call of ListResourcesAssociatedToCustomLineItem.
func (mr *MockBillingConductorAPIMockRecorder) ListResourcesAssociatedToCustomLineItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesAssociatedToCustomLineItem", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListResourcesAssociatedToCustomLineItem), arg0)
}

// ListResourcesAssociatedToCustomLineItemPages mocks base method.
func (m *MockBillingConductorAPI) ListResourcesAssociatedToCustomLineItemPages(arg0 *billingconductor.ListResourcesAssociatedToCustomLineItemInput, arg1 func(*billingconductor.ListResourcesAssociatedToCustomLineItemOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesAssociatedToCustomLineItemPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesAssociatedToCustomLineItemPages indicates an expected call of ListResourcesAssociatedToCustomLineItemPages.
func (mr *MockBillingConductorAPIMockRecorder) ListResourcesAssociatedToCustomLineItemPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesAssociatedToCustomLineItemPages", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListResourcesAssociatedToCustomLineItemPages), arg0, arg1)
}

// ListResourcesAssociatedToCustomLineItemPagesWithContext mocks base method.
func (m *MockBillingConductorAPI) ListResourcesAssociatedToCustomLineItemPagesWithContext(arg0 context.Context, arg1 *billingconductor.ListResourcesAssociatedToCustomLineItemInput, arg2 func(*billingconductor.ListResourcesAssociatedToCustomLineItemOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesAssociatedToCustomLineItemPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesAssociatedToCustomLineItemPagesWithContext indicates an expected call of ListResourcesAssociatedToCustomLineItemPagesWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListResourcesAssociatedToCustomLineItemPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesAssociatedToCustomLineItemPagesWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListResourcesAssociatedToCustomLineItemPagesWithContext), varargs...)
}

// ListResourcesAssociatedToCustomLineItemRequest mocks base method.
func (m *MockBillingConductorAPI) ListResourcesAssociatedToCustomLineItemRequest(arg0 *billingconductor.ListResourcesAssociatedToCustomLineItemInput) (*request.Request, *billingconductor.ListResourcesAssociatedToCustomLineItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesAssociatedToCustomLineItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListResourcesAssociatedToCustomLineItemOutput)
	return ret0, ret1
}

// ListResourcesAssociatedToCustomLineItemRequest indicates an expected call of ListResourcesAssociatedToCustomLineItemRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListResourcesAssociatedToCustomLineItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesAssociatedToCustomLineItemRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListResourcesAssociatedToCustomLineItemRequest), arg0)
}

// ListResourcesAssociatedToCustomLineItemWithContext mocks base method.
func (m *MockBillingConductorAPI) ListResourcesAssociatedToCustomLineItemWithContext(arg0 context.Context, arg1 *billingconductor.ListResourcesAssociatedToCustomLineItemInput, arg2 ...request.Option) (*billingconductor.ListResourcesAssociatedToCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesAssociatedToCustomLineItemWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListResourcesAssociatedToCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesAssociatedToCustomLineItemWithContext indicates an expected call of ListResourcesAssociatedToCustomLineItemWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListResourcesAssociatedToCustomLineItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesAssociatedToCustomLineItemWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListResourcesAssociatedToCustomLineItemWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockBillingConductorAPI) ListTagsForResource(arg0 *billingconductor.ListTagsForResourceInput) (*billingconductor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*billingconductor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockBillingConductorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockBillingConductorAPI) ListTagsForResourceRequest(arg0 *billingconductor.ListTagsForResourceInput) (*request.Request, *billingconductor.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockBillingConductorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockBillingConductorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *billingconductor.ListTagsForResourceInput, arg2 ...request.Option) (*billingconductor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockBillingConductorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockBillingConductorAPI) TagResource(arg0 *billingconductor.TagResourceInput) (*billingconductor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*billingconductor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockBillingConductorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockBillingConductorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockBillingConductorAPI) TagResourceRequest(arg0 *billingconductor.TagResourceInput) (*request.Request, *billingconductor.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockBillingConductorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockBillingConductorAPI) TagResourceWithContext(arg0 context.Context, arg1 *billingconductor.TagResourceInput, arg2 ...request.Option) (*billingconductor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockBillingConductorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockBillingConductorAPI) UntagResource(arg0 *billingconductor.UntagResourceInput) (*billingconductor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*billingconductor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockBillingConductorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockBillingConductorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockBillingConductorAPI) UntagResourceRequest(arg0 *billingconductor.UntagResourceInput) (*request.Request, *billingconductor.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockBillingConductorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockBillingConductorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *billingconductor.UntagResourceInput, arg2 ...request.Option) (*billingconductor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockBillingConductorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateBillingGroup mocks base method.
func (m *MockBillingConductorAPI) UpdateBillingGroup(arg0 *billingconductor.UpdateBillingGroupInput) (*billingconductor.UpdateBillingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingGroup", arg0)
	ret0, _ := ret[0].(*billingconductor.UpdateBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillingGroup indicates an expected call of UpdateBillingGroup.
func (mr *MockBillingConductorAPIMockRecorder) UpdateBillingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingGroup", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdateBillingGroup), arg0)
}

// UpdateBillingGroupRequest mocks base method.
func (m *MockBillingConductorAPI) UpdateBillingGroupRequest(arg0 *billingconductor.UpdateBillingGroupInput) (*request.Request, *billingconductor.UpdateBillingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.UpdateBillingGroupOutput)
	return ret0, ret1
}

// UpdateBillingGroupRequest indicates an expected call of UpdateBillingGroupRequest.
func (mr *MockBillingConductorAPIMockRecorder) UpdateBillingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingGroupRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdateBillingGroupRequest), arg0)
}

// UpdateBillingGroupWithContext mocks base method.
func (m *MockBillingConductorAPI) UpdateBillingGroupWithContext(arg0 context.Context, arg1 *billingconductor.UpdateBillingGroupInput, arg2 ...request.Option) (*billingconductor.UpdateBillingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBillingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.UpdateBillingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillingGroupWithContext indicates an expected call of UpdateBillingGroupWithContext.
func (mr *MockBillingConductorAPIMockRecorder) UpdateBillingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingGroupWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdateBillingGroupWithContext), varargs...)
}

// UpdateCustomLineItem mocks base method.
func (m *MockBillingConductorAPI) UpdateCustomLineItem(arg0 *billingconductor.UpdateCustomLineItemInput) (*billingconductor.UpdateCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomLineItem", arg0)
	ret0, _ := ret[0].(*billingconductor.UpdateCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomLineItem indicates an expected call of UpdateCustomLineItem.
func (mr *MockBillingConductorAPIMockRecorder) UpdateCustomLineItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomLineItem", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdateCustomLineItem), arg0)
}

// UpdateCustomLineItemRequest mocks base method.
func (m *MockBillingConductorAPI) UpdateCustomLineItemRequest(arg0 *billingconductor.UpdateCustomLineItemInput) (*request.Request, *billingconductor.UpdateCustomLineItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomLineItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.UpdateCustomLineItemOutput)
	return ret0, ret1
}

// UpdateCustomLineItemRequest indicates an expected call of UpdateCustomLineItemRequest.
func (mr *MockBillingConductorAPIMockRecorder) UpdateCustomLineItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomLineItemRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdateCustomLineItemRequest), arg0)
}

// UpdateCustomLineItemWithContext mocks base method.
func (m *MockBillingConductorAPI) UpdateCustomLineItemWithContext(arg0 context.Context, arg1 *billingconductor.UpdateCustomLineItemInput, arg2 ...request.Option) (*billingconductor.UpdateCustomLineItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomLineItemWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.UpdateCustomLineItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomLineItemWithContext indicates an expected call of UpdateCustomLineItemWithContext.
func (mr *MockBillingConductorAPIMockRecorder) UpdateCustomLineItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomLineItemWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdateCustomLineItemWithContext), varargs...)
}

// UpdatePricingPlan mocks base method.
func (m *MockBillingConductorAPI) UpdatePricingPlan(arg0 *billingconductor.UpdatePricingPlanInput) (*billingconductor.UpdatePricingPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePricingPlan", arg0)
	ret0, _ := ret[0].(*billingconductor.UpdatePricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePricingPlan indicates an expected call of UpdatePricingPlan.
func (mr *MockBillingConductorAPIMockRecorder) UpdatePricingPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePricingPlan", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdatePricingPlan), arg0)
}

// UpdatePricingPlanRequest mocks base method.
func (m *MockBillingConductorAPI) UpdatePricingPlanRequest(arg0 *billingconductor.UpdatePricingPlanInput) (*request.Request, *billingconductor.UpdatePricingPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePricingPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.UpdatePricingPlanOutput)
	return ret0, ret1
}

// UpdatePricingPlanRequest indicates an expected call of UpdatePricingPlanRequest.
func (mr *MockBillingConductorAPIMockRecorder) UpdatePricingPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePricingPlanRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdatePricingPlanRequest), arg0)
}

// UpdatePricingPlanWithContext mocks base method.
func (m *MockBillingConductorAPI) UpdatePricingPlanWithContext(arg0 context.Context, arg1 *billingconductor.UpdatePricingPlanInput, arg2 ...request.Option) (*billingconductor.UpdatePricingPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePricingPlanWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.UpdatePricingPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePricingPlanWithContext indicates an expected call of UpdatePricingPlanWithContext.
func (mr *MockBillingConductorAPIMockRecorder) UpdatePricingPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePricingPlanWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdatePricingPlanWithContext), varargs...)
}

// UpdatePricingRule mocks base method.
func (m *MockBillingConductorAPI) UpdatePricingRule(arg0 *billingconductor.UpdatePricingRuleInput) (*billingconductor.UpdatePricingRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePricingRule", arg0)
	ret0, _ := ret[0].(*billingconductor.UpdatePricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePricingRule indicates an expected call of UpdatePricingRule.
func (mr *MockBillingConductorAPIMockRecorder) UpdatePricingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePricingRule", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdatePricingRule), arg0)
}

// UpdatePricingRuleRequest mocks base method.
func (m *MockBillingConductorAPI) UpdatePricingRuleRequest(arg0 *billingconductor.UpdatePricingRuleInput) (*request.Request, *billingconductor.UpdatePricingRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePricingRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*billingconductor.UpdatePricingRuleOutput)
	return ret0, ret1
}

// UpdatePricingRuleRequest indicates an expected call of UpdatePricingRuleRequest.
func (mr *MockBillingConductorAPIMockRecorder) UpdatePricingRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePricingRuleRequest", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdatePricingRuleRequest), arg0)
}

// UpdatePricingRuleWithContext mocks base method.
func (m *MockBillingConductorAPI) UpdatePricingRuleWithContext(arg0 context.Context, arg1 *billingconductor.UpdatePricingRuleInput, arg2 ...request.Option) (*billingconductor.UpdatePricingRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePricingRuleWithContext", varargs...)
	ret0, _ := ret[0].(*billingconductor.UpdatePricingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePricingRuleWithContext indicates an expected call of UpdatePricingRuleWithContext.
func (mr *MockBillingConductorAPIMockRecorder) UpdatePricingRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePricingRuleWithContext", reflect.TypeOf((*MockBillingConductorAPI)(nil).UpdatePricingRuleWithContext), varargs...)
}

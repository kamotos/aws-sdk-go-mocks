// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/qldbsession/qldbsessioniface (interfaces: QLDBSessionAPI)

// Package qldbsessionmock is a generated GoMock package.
package qldbsessionmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	qldbsession "github.com/aws/aws-sdk-go/service/qldbsession"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQLDBSessionAPI is a mock of QLDBSessionAPI interface
type MockQLDBSessionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockQLDBSessionAPIMockRecorder
}

// MockQLDBSessionAPIMockRecorder is the mock recorder for MockQLDBSessionAPI
type MockQLDBSessionAPIMockRecorder struct {
	mock *MockQLDBSessionAPI
}

// NewMockQLDBSessionAPI creates a new mock instance
func NewMockQLDBSessionAPI(ctrl *gomock.Controller) *MockQLDBSessionAPI {
	mock := &MockQLDBSessionAPI{ctrl: ctrl}
	mock.recorder = &MockQLDBSessionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQLDBSessionAPI) EXPECT() *MockQLDBSessionAPIMockRecorder {
	return m.recorder
}

// SendCommand mocks base method
func (m *MockQLDBSessionAPI) SendCommand(arg0 *qldbsession.SendCommandInput) (*qldbsession.SendCommandOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCommand", arg0)
	ret0, _ := ret[0].(*qldbsession.SendCommandOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCommand indicates an expected call of SendCommand
func (mr *MockQLDBSessionAPIMockRecorder) SendCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCommand", reflect.TypeOf((*MockQLDBSessionAPI)(nil).SendCommand), arg0)
}

// SendCommandRequest mocks base method
func (m *MockQLDBSessionAPI) SendCommandRequest(arg0 *qldbsession.SendCommandInput) (*request.Request, *qldbsession.SendCommandOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCommandRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldbsession.SendCommandOutput)
	return ret0, ret1
}

// SendCommandRequest indicates an expected call of SendCommandRequest
func (mr *MockQLDBSessionAPIMockRecorder) SendCommandRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCommandRequest", reflect.TypeOf((*MockQLDBSessionAPI)(nil).SendCommandRequest), arg0)
}

// SendCommandWithContext mocks base method
func (m *MockQLDBSessionAPI) SendCommandWithContext(arg0 context.Context, arg1 *qldbsession.SendCommandInput, arg2 ...request.Option) (*qldbsession.SendCommandOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCommandWithContext", varargs...)
	ret0, _ := ret[0].(*qldbsession.SendCommandOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCommandWithContext indicates an expected call of SendCommandWithContext
func (mr *MockQLDBSessionAPIMockRecorder) SendCommandWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCommandWithContext", reflect.TypeOf((*MockQLDBSessionAPI)(nil).SendCommandWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/xray/xrayiface (interfaces: XRayAPI)

// Package xraymock is a generated GoMock package.
package xraymock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	xray "github.com/aws/aws-sdk-go/service/xray"
	gomock "github.com/golang/mock/gomock"
)

// MockXRayAPI is a mock of XRayAPI interface.
type MockXRayAPI struct {
	ctrl     *gomock.Controller
	recorder *MockXRayAPIMockRecorder
}

// MockXRayAPIMockRecorder is the mock recorder for MockXRayAPI.
type MockXRayAPIMockRecorder struct {
	mock *MockXRayAPI
}

// NewMockXRayAPI creates a new mock instance.
func NewMockXRayAPI(ctrl *gomock.Controller) *MockXRayAPI {
	mock := &MockXRayAPI{ctrl: ctrl}
	mock.recorder = &MockXRayAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXRayAPI) EXPECT() *MockXRayAPIMockRecorder {
	return m.recorder
}

// BatchGetTraces mocks base method.
func (m *MockXRayAPI) BatchGetTraces(arg0 *xray.BatchGetTracesInput) (*xray.BatchGetTracesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTraces", arg0)
	ret0, _ := ret[0].(*xray.BatchGetTracesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTraces indicates an expected call of BatchGetTraces.
func (mr *MockXRayAPIMockRecorder) BatchGetTraces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTraces", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTraces), arg0)
}

// BatchGetTracesPages mocks base method.
func (m *MockXRayAPI) BatchGetTracesPages(arg0 *xray.BatchGetTracesInput, arg1 func(*xray.BatchGetTracesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTracesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetTracesPages indicates an expected call of BatchGetTracesPages.
func (mr *MockXRayAPIMockRecorder) BatchGetTracesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesPages", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesPages), arg0, arg1)
}

// BatchGetTracesPagesWithContext mocks base method.
func (m *MockXRayAPI) BatchGetTracesPagesWithContext(arg0 context.Context, arg1 *xray.BatchGetTracesInput, arg2 func(*xray.BatchGetTracesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTracesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetTracesPagesWithContext indicates an expected call of BatchGetTracesPagesWithContext.
func (mr *MockXRayAPIMockRecorder) BatchGetTracesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesPagesWithContext), varargs...)
}

// BatchGetTracesRequest mocks base method.
func (m *MockXRayAPI) BatchGetTracesRequest(arg0 *xray.BatchGetTracesInput) (*request.Request, *xray.BatchGetTracesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTracesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.BatchGetTracesOutput)
	return ret0, ret1
}

// BatchGetTracesRequest indicates an expected call of BatchGetTracesRequest.
func (mr *MockXRayAPIMockRecorder) BatchGetTracesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesRequest", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesRequest), arg0)
}

// BatchGetTracesWithContext mocks base method.
func (m *MockXRayAPI) BatchGetTracesWithContext(arg0 context.Context, arg1 *xray.BatchGetTracesInput, arg2 ...request.Option) (*xray.BatchGetTracesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTracesWithContext", varargs...)
	ret0, _ := ret[0].(*xray.BatchGetTracesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTracesWithContext indicates an expected call of BatchGetTracesWithContext.
func (mr *MockXRayAPIMockRecorder) BatchGetTracesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).BatchGetTracesWithContext), varargs...)
}

// CreateGroup mocks base method.
func (m *MockXRayAPI) CreateGroup(arg0 *xray.CreateGroupInput) (*xray.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(*xray.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockXRayAPIMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockXRayAPI)(nil).CreateGroup), arg0)
}

// CreateGroupRequest mocks base method.
func (m *MockXRayAPI) CreateGroupRequest(arg0 *xray.CreateGroupInput) (*request.Request, *xray.CreateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.CreateGroupOutput)
	return ret0, ret1
}

// CreateGroupRequest indicates an expected call of CreateGroupRequest.
func (mr *MockXRayAPIMockRecorder) CreateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupRequest", reflect.TypeOf((*MockXRayAPI)(nil).CreateGroupRequest), arg0)
}

// CreateGroupWithContext mocks base method.
func (m *MockXRayAPI) CreateGroupWithContext(arg0 context.Context, arg1 *xray.CreateGroupInput, arg2 ...request.Option) (*xray.CreateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*xray.CreateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupWithContext indicates an expected call of CreateGroupWithContext.
func (mr *MockXRayAPIMockRecorder) CreateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWithContext", reflect.TypeOf((*MockXRayAPI)(nil).CreateGroupWithContext), varargs...)
}

// CreateSamplingRule mocks base method.
func (m *MockXRayAPI) CreateSamplingRule(arg0 *xray.CreateSamplingRuleInput) (*xray.CreateSamplingRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSamplingRule", arg0)
	ret0, _ := ret[0].(*xray.CreateSamplingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSamplingRule indicates an expected call of CreateSamplingRule.
func (mr *MockXRayAPIMockRecorder) CreateSamplingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSamplingRule", reflect.TypeOf((*MockXRayAPI)(nil).CreateSamplingRule), arg0)
}

// CreateSamplingRuleRequest mocks base method.
func (m *MockXRayAPI) CreateSamplingRuleRequest(arg0 *xray.CreateSamplingRuleInput) (*request.Request, *xray.CreateSamplingRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSamplingRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.CreateSamplingRuleOutput)
	return ret0, ret1
}

// CreateSamplingRuleRequest indicates an expected call of CreateSamplingRuleRequest.
func (mr *MockXRayAPIMockRecorder) CreateSamplingRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSamplingRuleRequest", reflect.TypeOf((*MockXRayAPI)(nil).CreateSamplingRuleRequest), arg0)
}

// CreateSamplingRuleWithContext mocks base method.
func (m *MockXRayAPI) CreateSamplingRuleWithContext(arg0 context.Context, arg1 *xray.CreateSamplingRuleInput, arg2 ...request.Option) (*xray.CreateSamplingRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSamplingRuleWithContext", varargs...)
	ret0, _ := ret[0].(*xray.CreateSamplingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSamplingRuleWithContext indicates an expected call of CreateSamplingRuleWithContext.
func (mr *MockXRayAPIMockRecorder) CreateSamplingRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSamplingRuleWithContext", reflect.TypeOf((*MockXRayAPI)(nil).CreateSamplingRuleWithContext), varargs...)
}

// DeleteGroup mocks base method.
func (m *MockXRayAPI) DeleteGroup(arg0 *xray.DeleteGroupInput) (*xray.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(*xray.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockXRayAPIMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockXRayAPI)(nil).DeleteGroup), arg0)
}

// DeleteGroupRequest mocks base method.
func (m *MockXRayAPI) DeleteGroupRequest(arg0 *xray.DeleteGroupInput) (*request.Request, *xray.DeleteGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.DeleteGroupOutput)
	return ret0, ret1
}

// DeleteGroupRequest indicates an expected call of DeleteGroupRequest.
func (mr *MockXRayAPIMockRecorder) DeleteGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupRequest", reflect.TypeOf((*MockXRayAPI)(nil).DeleteGroupRequest), arg0)
}

// DeleteGroupWithContext mocks base method.
func (m *MockXRayAPI) DeleteGroupWithContext(arg0 context.Context, arg1 *xray.DeleteGroupInput, arg2 ...request.Option) (*xray.DeleteGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWithContext", varargs...)
	ret0, _ := ret[0].(*xray.DeleteGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWithContext indicates an expected call of DeleteGroupWithContext.
func (mr *MockXRayAPIMockRecorder) DeleteGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWithContext", reflect.TypeOf((*MockXRayAPI)(nil).DeleteGroupWithContext), varargs...)
}

// DeleteSamplingRule mocks base method.
func (m *MockXRayAPI) DeleteSamplingRule(arg0 *xray.DeleteSamplingRuleInput) (*xray.DeleteSamplingRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSamplingRule", arg0)
	ret0, _ := ret[0].(*xray.DeleteSamplingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSamplingRule indicates an expected call of DeleteSamplingRule.
func (mr *MockXRayAPIMockRecorder) DeleteSamplingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSamplingRule", reflect.TypeOf((*MockXRayAPI)(nil).DeleteSamplingRule), arg0)
}

// DeleteSamplingRuleRequest mocks base method.
func (m *MockXRayAPI) DeleteSamplingRuleRequest(arg0 *xray.DeleteSamplingRuleInput) (*request.Request, *xray.DeleteSamplingRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSamplingRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.DeleteSamplingRuleOutput)
	return ret0, ret1
}

// DeleteSamplingRuleRequest indicates an expected call of DeleteSamplingRuleRequest.
func (mr *MockXRayAPIMockRecorder) DeleteSamplingRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSamplingRuleRequest", reflect.TypeOf((*MockXRayAPI)(nil).DeleteSamplingRuleRequest), arg0)
}

// DeleteSamplingRuleWithContext mocks base method.
func (m *MockXRayAPI) DeleteSamplingRuleWithContext(arg0 context.Context, arg1 *xray.DeleteSamplingRuleInput, arg2 ...request.Option) (*xray.DeleteSamplingRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSamplingRuleWithContext", varargs...)
	ret0, _ := ret[0].(*xray.DeleteSamplingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSamplingRuleWithContext indicates an expected call of DeleteSamplingRuleWithContext.
func (mr *MockXRayAPIMockRecorder) DeleteSamplingRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSamplingRuleWithContext", reflect.TypeOf((*MockXRayAPI)(nil).DeleteSamplingRuleWithContext), varargs...)
}

// GetEncryptionConfig mocks base method.
func (m *MockXRayAPI) GetEncryptionConfig(arg0 *xray.GetEncryptionConfigInput) (*xray.GetEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionConfig", arg0)
	ret0, _ := ret[0].(*xray.GetEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionConfig indicates an expected call of GetEncryptionConfig.
func (mr *MockXRayAPIMockRecorder) GetEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfig", reflect.TypeOf((*MockXRayAPI)(nil).GetEncryptionConfig), arg0)
}

// GetEncryptionConfigRequest mocks base method.
func (m *MockXRayAPI) GetEncryptionConfigRequest(arg0 *xray.GetEncryptionConfigInput) (*request.Request, *xray.GetEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetEncryptionConfigOutput)
	return ret0, ret1
}

// GetEncryptionConfigRequest indicates an expected call of GetEncryptionConfigRequest.
func (mr *MockXRayAPIMockRecorder) GetEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfigRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetEncryptionConfigRequest), arg0)
}

// GetEncryptionConfigWithContext mocks base method.
func (m *MockXRayAPI) GetEncryptionConfigWithContext(arg0 context.Context, arg1 *xray.GetEncryptionConfigInput, arg2 ...request.Option) (*xray.GetEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptionConfigWithContext indicates an expected call of GetEncryptionConfigWithContext.
func (mr *MockXRayAPIMockRecorder) GetEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptionConfigWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetEncryptionConfigWithContext), varargs...)
}

// GetGroup mocks base method.
func (m *MockXRayAPI) GetGroup(arg0 *xray.GetGroupInput) (*xray.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0)
	ret0, _ := ret[0].(*xray.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockXRayAPIMockRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockXRayAPI)(nil).GetGroup), arg0)
}

// GetGroupRequest mocks base method.
func (m *MockXRayAPI) GetGroupRequest(arg0 *xray.GetGroupInput) (*request.Request, *xray.GetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetGroupOutput)
	return ret0, ret1
}

// GetGroupRequest indicates an expected call of GetGroupRequest.
func (mr *MockXRayAPIMockRecorder) GetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetGroupRequest), arg0)
}

// GetGroupWithContext mocks base method.
func (m *MockXRayAPI) GetGroupWithContext(arg0 context.Context, arg1 *xray.GetGroupInput, arg2 ...request.Option) (*xray.GetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupWithContext indicates an expected call of GetGroupWithContext.
func (mr *MockXRayAPIMockRecorder) GetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetGroupWithContext), varargs...)
}

// GetGroups mocks base method.
func (m *MockXRayAPI) GetGroups(arg0 *xray.GetGroupsInput) (*xray.GetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0)
	ret0, _ := ret[0].(*xray.GetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockXRayAPIMockRecorder) GetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockXRayAPI)(nil).GetGroups), arg0)
}

// GetGroupsPages mocks base method.
func (m *MockXRayAPI) GetGroupsPages(arg0 *xray.GetGroupsInput, arg1 func(*xray.GetGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGroupsPages indicates an expected call of GetGroupsPages.
func (mr *MockXRayAPIMockRecorder) GetGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsPages", reflect.TypeOf((*MockXRayAPI)(nil).GetGroupsPages), arg0, arg1)
}

// GetGroupsPagesWithContext mocks base method.
func (m *MockXRayAPI) GetGroupsPagesWithContext(arg0 context.Context, arg1 *xray.GetGroupsInput, arg2 func(*xray.GetGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGroupsPagesWithContext indicates an expected call of GetGroupsPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetGroupsPagesWithContext), varargs...)
}

// GetGroupsRequest mocks base method.
func (m *MockXRayAPI) GetGroupsRequest(arg0 *xray.GetGroupsInput) (*request.Request, *xray.GetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetGroupsOutput)
	return ret0, ret1
}

// GetGroupsRequest indicates an expected call of GetGroupsRequest.
func (mr *MockXRayAPIMockRecorder) GetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetGroupsRequest), arg0)
}

// GetGroupsWithContext mocks base method.
func (m *MockXRayAPI) GetGroupsWithContext(arg0 context.Context, arg1 *xray.GetGroupsInput, arg2 ...request.Option) (*xray.GetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsWithContext indicates an expected call of GetGroupsWithContext.
func (mr *MockXRayAPIMockRecorder) GetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetGroupsWithContext), varargs...)
}

// GetInsight mocks base method.
func (m *MockXRayAPI) GetInsight(arg0 *xray.GetInsightInput) (*xray.GetInsightOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsight", arg0)
	ret0, _ := ret[0].(*xray.GetInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsight indicates an expected call of GetInsight.
func (mr *MockXRayAPIMockRecorder) GetInsight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsight", reflect.TypeOf((*MockXRayAPI)(nil).GetInsight), arg0)
}

// GetInsightEvents mocks base method.
func (m *MockXRayAPI) GetInsightEvents(arg0 *xray.GetInsightEventsInput) (*xray.GetInsightEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightEvents", arg0)
	ret0, _ := ret[0].(*xray.GetInsightEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightEvents indicates an expected call of GetInsightEvents.
func (mr *MockXRayAPIMockRecorder) GetInsightEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightEvents", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightEvents), arg0)
}

// GetInsightEventsPages mocks base method.
func (m *MockXRayAPI) GetInsightEventsPages(arg0 *xray.GetInsightEventsInput, arg1 func(*xray.GetInsightEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightEventsPages indicates an expected call of GetInsightEventsPages.
func (mr *MockXRayAPIMockRecorder) GetInsightEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightEventsPages", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightEventsPages), arg0, arg1)
}

// GetInsightEventsPagesWithContext mocks base method.
func (m *MockXRayAPI) GetInsightEventsPagesWithContext(arg0 context.Context, arg1 *xray.GetInsightEventsInput, arg2 func(*xray.GetInsightEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightEventsPagesWithContext indicates an expected call of GetInsightEventsPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetInsightEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightEventsPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightEventsPagesWithContext), varargs...)
}

// GetInsightEventsRequest mocks base method.
func (m *MockXRayAPI) GetInsightEventsRequest(arg0 *xray.GetInsightEventsInput) (*request.Request, *xray.GetInsightEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetInsightEventsOutput)
	return ret0, ret1
}

// GetInsightEventsRequest indicates an expected call of GetInsightEventsRequest.
func (mr *MockXRayAPIMockRecorder) GetInsightEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightEventsRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightEventsRequest), arg0)
}

// GetInsightEventsWithContext mocks base method.
func (m *MockXRayAPI) GetInsightEventsWithContext(arg0 context.Context, arg1 *xray.GetInsightEventsInput, arg2 ...request.Option) (*xray.GetInsightEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightEventsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightEventsWithContext indicates an expected call of GetInsightEventsWithContext.
func (mr *MockXRayAPIMockRecorder) GetInsightEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightEventsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightEventsWithContext), varargs...)
}

// GetInsightImpactGraph mocks base method.
func (m *MockXRayAPI) GetInsightImpactGraph(arg0 *xray.GetInsightImpactGraphInput) (*xray.GetInsightImpactGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightImpactGraph", arg0)
	ret0, _ := ret[0].(*xray.GetInsightImpactGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightImpactGraph indicates an expected call of GetInsightImpactGraph.
func (mr *MockXRayAPIMockRecorder) GetInsightImpactGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightImpactGraph", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightImpactGraph), arg0)
}

// GetInsightImpactGraphRequest mocks base method.
func (m *MockXRayAPI) GetInsightImpactGraphRequest(arg0 *xray.GetInsightImpactGraphInput) (*request.Request, *xray.GetInsightImpactGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightImpactGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetInsightImpactGraphOutput)
	return ret0, ret1
}

// GetInsightImpactGraphRequest indicates an expected call of GetInsightImpactGraphRequest.
func (mr *MockXRayAPIMockRecorder) GetInsightImpactGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightImpactGraphRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightImpactGraphRequest), arg0)
}

// GetInsightImpactGraphWithContext mocks base method.
func (m *MockXRayAPI) GetInsightImpactGraphWithContext(arg0 context.Context, arg1 *xray.GetInsightImpactGraphInput, arg2 ...request.Option) (*xray.GetInsightImpactGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightImpactGraphWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightImpactGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightImpactGraphWithContext indicates an expected call of GetInsightImpactGraphWithContext.
func (mr *MockXRayAPIMockRecorder) GetInsightImpactGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightImpactGraphWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightImpactGraphWithContext), varargs...)
}

// GetInsightRequest mocks base method.
func (m *MockXRayAPI) GetInsightRequest(arg0 *xray.GetInsightInput) (*request.Request, *xray.GetInsightOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetInsightOutput)
	return ret0, ret1
}

// GetInsightRequest indicates an expected call of GetInsightRequest.
func (mr *MockXRayAPIMockRecorder) GetInsightRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightRequest), arg0)
}

// GetInsightSummaries mocks base method.
func (m *MockXRayAPI) GetInsightSummaries(arg0 *xray.GetInsightSummariesInput) (*xray.GetInsightSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightSummaries", arg0)
	ret0, _ := ret[0].(*xray.GetInsightSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightSummaries indicates an expected call of GetInsightSummaries.
func (mr *MockXRayAPIMockRecorder) GetInsightSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightSummaries", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightSummaries), arg0)
}

// GetInsightSummariesPages mocks base method.
func (m *MockXRayAPI) GetInsightSummariesPages(arg0 *xray.GetInsightSummariesInput, arg1 func(*xray.GetInsightSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightSummariesPages indicates an expected call of GetInsightSummariesPages.
func (mr *MockXRayAPIMockRecorder) GetInsightSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightSummariesPages", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightSummariesPages), arg0, arg1)
}

// GetInsightSummariesPagesWithContext mocks base method.
func (m *MockXRayAPI) GetInsightSummariesPagesWithContext(arg0 context.Context, arg1 *xray.GetInsightSummariesInput, arg2 func(*xray.GetInsightSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInsightSummariesPagesWithContext indicates an expected call of GetInsightSummariesPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetInsightSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightSummariesPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightSummariesPagesWithContext), varargs...)
}

// GetInsightSummariesRequest mocks base method.
func (m *MockXRayAPI) GetInsightSummariesRequest(arg0 *xray.GetInsightSummariesInput) (*request.Request, *xray.GetInsightSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetInsightSummariesOutput)
	return ret0, ret1
}

// GetInsightSummariesRequest indicates an expected call of GetInsightSummariesRequest.
func (mr *MockXRayAPIMockRecorder) GetInsightSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightSummariesRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightSummariesRequest), arg0)
}

// GetInsightSummariesWithContext mocks base method.
func (m *MockXRayAPI) GetInsightSummariesWithContext(arg0 context.Context, arg1 *xray.GetInsightSummariesInput, arg2 ...request.Option) (*xray.GetInsightSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightSummariesWithContext indicates an expected call of GetInsightSummariesWithContext.
func (mr *MockXRayAPIMockRecorder) GetInsightSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightSummariesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightSummariesWithContext), varargs...)
}

// GetInsightWithContext mocks base method.
func (m *MockXRayAPI) GetInsightWithContext(arg0 context.Context, arg1 *xray.GetInsightInput, arg2 ...request.Option) (*xray.GetInsightOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetInsightOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightWithContext indicates an expected call of GetInsightWithContext.
func (mr *MockXRayAPIMockRecorder) GetInsightWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetInsightWithContext), varargs...)
}

// GetSamplingRules mocks base method.
func (m *MockXRayAPI) GetSamplingRules(arg0 *xray.GetSamplingRulesInput) (*xray.GetSamplingRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingRules", arg0)
	ret0, _ := ret[0].(*xray.GetSamplingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingRules indicates an expected call of GetSamplingRules.
func (mr *MockXRayAPIMockRecorder) GetSamplingRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingRules", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingRules), arg0)
}

// GetSamplingRulesPages mocks base method.
func (m *MockXRayAPI) GetSamplingRulesPages(arg0 *xray.GetSamplingRulesInput, arg1 func(*xray.GetSamplingRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSamplingRulesPages indicates an expected call of GetSamplingRulesPages.
func (mr *MockXRayAPIMockRecorder) GetSamplingRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingRulesPages", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingRulesPages), arg0, arg1)
}

// GetSamplingRulesPagesWithContext mocks base method.
func (m *MockXRayAPI) GetSamplingRulesPagesWithContext(arg0 context.Context, arg1 *xray.GetSamplingRulesInput, arg2 func(*xray.GetSamplingRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSamplingRulesPagesWithContext indicates an expected call of GetSamplingRulesPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetSamplingRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingRulesPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingRulesPagesWithContext), varargs...)
}

// GetSamplingRulesRequest mocks base method.
func (m *MockXRayAPI) GetSamplingRulesRequest(arg0 *xray.GetSamplingRulesInput) (*request.Request, *xray.GetSamplingRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetSamplingRulesOutput)
	return ret0, ret1
}

// GetSamplingRulesRequest indicates an expected call of GetSamplingRulesRequest.
func (mr *MockXRayAPIMockRecorder) GetSamplingRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingRulesRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingRulesRequest), arg0)
}

// GetSamplingRulesWithContext mocks base method.
func (m *MockXRayAPI) GetSamplingRulesWithContext(arg0 context.Context, arg1 *xray.GetSamplingRulesInput, arg2 ...request.Option) (*xray.GetSamplingRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingRulesWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetSamplingRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingRulesWithContext indicates an expected call of GetSamplingRulesWithContext.
func (mr *MockXRayAPIMockRecorder) GetSamplingRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingRulesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingRulesWithContext), varargs...)
}

// GetSamplingStatisticSummaries mocks base method.
func (m *MockXRayAPI) GetSamplingStatisticSummaries(arg0 *xray.GetSamplingStatisticSummariesInput) (*xray.GetSamplingStatisticSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingStatisticSummaries", arg0)
	ret0, _ := ret[0].(*xray.GetSamplingStatisticSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingStatisticSummaries indicates an expected call of GetSamplingStatisticSummaries.
func (mr *MockXRayAPIMockRecorder) GetSamplingStatisticSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingStatisticSummaries", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingStatisticSummaries), arg0)
}

// GetSamplingStatisticSummariesPages mocks base method.
func (m *MockXRayAPI) GetSamplingStatisticSummariesPages(arg0 *xray.GetSamplingStatisticSummariesInput, arg1 func(*xray.GetSamplingStatisticSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingStatisticSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSamplingStatisticSummariesPages indicates an expected call of GetSamplingStatisticSummariesPages.
func (mr *MockXRayAPIMockRecorder) GetSamplingStatisticSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingStatisticSummariesPages", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingStatisticSummariesPages), arg0, arg1)
}

// GetSamplingStatisticSummariesPagesWithContext mocks base method.
func (m *MockXRayAPI) GetSamplingStatisticSummariesPagesWithContext(arg0 context.Context, arg1 *xray.GetSamplingStatisticSummariesInput, arg2 func(*xray.GetSamplingStatisticSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingStatisticSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSamplingStatisticSummariesPagesWithContext indicates an expected call of GetSamplingStatisticSummariesPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetSamplingStatisticSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingStatisticSummariesPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingStatisticSummariesPagesWithContext), varargs...)
}

// GetSamplingStatisticSummariesRequest mocks base method.
func (m *MockXRayAPI) GetSamplingStatisticSummariesRequest(arg0 *xray.GetSamplingStatisticSummariesInput) (*request.Request, *xray.GetSamplingStatisticSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingStatisticSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetSamplingStatisticSummariesOutput)
	return ret0, ret1
}

// GetSamplingStatisticSummariesRequest indicates an expected call of GetSamplingStatisticSummariesRequest.
func (mr *MockXRayAPIMockRecorder) GetSamplingStatisticSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingStatisticSummariesRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingStatisticSummariesRequest), arg0)
}

// GetSamplingStatisticSummariesWithContext mocks base method.
func (m *MockXRayAPI) GetSamplingStatisticSummariesWithContext(arg0 context.Context, arg1 *xray.GetSamplingStatisticSummariesInput, arg2 ...request.Option) (*xray.GetSamplingStatisticSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingStatisticSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetSamplingStatisticSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingStatisticSummariesWithContext indicates an expected call of GetSamplingStatisticSummariesWithContext.
func (mr *MockXRayAPIMockRecorder) GetSamplingStatisticSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingStatisticSummariesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingStatisticSummariesWithContext), varargs...)
}

// GetSamplingTargets mocks base method.
func (m *MockXRayAPI) GetSamplingTargets(arg0 *xray.GetSamplingTargetsInput) (*xray.GetSamplingTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingTargets", arg0)
	ret0, _ := ret[0].(*xray.GetSamplingTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingTargets indicates an expected call of GetSamplingTargets.
func (mr *MockXRayAPIMockRecorder) GetSamplingTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingTargets", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingTargets), arg0)
}

// GetSamplingTargetsRequest mocks base method.
func (m *MockXRayAPI) GetSamplingTargetsRequest(arg0 *xray.GetSamplingTargetsInput) (*request.Request, *xray.GetSamplingTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSamplingTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetSamplingTargetsOutput)
	return ret0, ret1
}

// GetSamplingTargetsRequest indicates an expected call of GetSamplingTargetsRequest.
func (mr *MockXRayAPIMockRecorder) GetSamplingTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingTargetsRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingTargetsRequest), arg0)
}

// GetSamplingTargetsWithContext mocks base method.
func (m *MockXRayAPI) GetSamplingTargetsWithContext(arg0 context.Context, arg1 *xray.GetSamplingTargetsInput, arg2 ...request.Option) (*xray.GetSamplingTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSamplingTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetSamplingTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSamplingTargetsWithContext indicates an expected call of GetSamplingTargetsWithContext.
func (mr *MockXRayAPIMockRecorder) GetSamplingTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSamplingTargetsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetSamplingTargetsWithContext), varargs...)
}

// GetServiceGraph mocks base method.
func (m *MockXRayAPI) GetServiceGraph(arg0 *xray.GetServiceGraphInput) (*xray.GetServiceGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceGraph", arg0)
	ret0, _ := ret[0].(*xray.GetServiceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceGraph indicates an expected call of GetServiceGraph.
func (mr *MockXRayAPIMockRecorder) GetServiceGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraph", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraph), arg0)
}

// GetServiceGraphPages mocks base method.
func (m *MockXRayAPI) GetServiceGraphPages(arg0 *xray.GetServiceGraphInput, arg1 func(*xray.GetServiceGraphOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceGraphPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetServiceGraphPages indicates an expected call of GetServiceGraphPages.
func (mr *MockXRayAPIMockRecorder) GetServiceGraphPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphPages", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphPages), arg0, arg1)
}

// GetServiceGraphPagesWithContext mocks base method.
func (m *MockXRayAPI) GetServiceGraphPagesWithContext(arg0 context.Context, arg1 *xray.GetServiceGraphInput, arg2 func(*xray.GetServiceGraphOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceGraphPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetServiceGraphPagesWithContext indicates an expected call of GetServiceGraphPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetServiceGraphPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphPagesWithContext), varargs...)
}

// GetServiceGraphRequest mocks base method.
func (m *MockXRayAPI) GetServiceGraphRequest(arg0 *xray.GetServiceGraphInput) (*request.Request, *xray.GetServiceGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetServiceGraphOutput)
	return ret0, ret1
}

// GetServiceGraphRequest indicates an expected call of GetServiceGraphRequest.
func (mr *MockXRayAPIMockRecorder) GetServiceGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphRequest), arg0)
}

// GetServiceGraphWithContext mocks base method.
func (m *MockXRayAPI) GetServiceGraphWithContext(arg0 context.Context, arg1 *xray.GetServiceGraphInput, arg2 ...request.Option) (*xray.GetServiceGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceGraphWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetServiceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceGraphWithContext indicates an expected call of GetServiceGraphWithContext.
func (mr *MockXRayAPIMockRecorder) GetServiceGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGraphWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetServiceGraphWithContext), varargs...)
}

// GetTimeSeriesServiceStatistics mocks base method.
func (m *MockXRayAPI) GetTimeSeriesServiceStatistics(arg0 *xray.GetTimeSeriesServiceStatisticsInput) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeriesServiceStatistics", arg0)
	ret0, _ := ret[0].(*xray.GetTimeSeriesServiceStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSeriesServiceStatistics indicates an expected call of GetTimeSeriesServiceStatistics.
func (mr *MockXRayAPIMockRecorder) GetTimeSeriesServiceStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesServiceStatistics", reflect.TypeOf((*MockXRayAPI)(nil).GetTimeSeriesServiceStatistics), arg0)
}

// GetTimeSeriesServiceStatisticsPages mocks base method.
func (m *MockXRayAPI) GetTimeSeriesServiceStatisticsPages(arg0 *xray.GetTimeSeriesServiceStatisticsInput, arg1 func(*xray.GetTimeSeriesServiceStatisticsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeriesServiceStatisticsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTimeSeriesServiceStatisticsPages indicates an expected call of GetTimeSeriesServiceStatisticsPages.
func (mr *MockXRayAPIMockRecorder) GetTimeSeriesServiceStatisticsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesServiceStatisticsPages", reflect.TypeOf((*MockXRayAPI)(nil).GetTimeSeriesServiceStatisticsPages), arg0, arg1)
}

// GetTimeSeriesServiceStatisticsPagesWithContext mocks base method.
func (m *MockXRayAPI) GetTimeSeriesServiceStatisticsPagesWithContext(arg0 context.Context, arg1 *xray.GetTimeSeriesServiceStatisticsInput, arg2 func(*xray.GetTimeSeriesServiceStatisticsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeSeriesServiceStatisticsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTimeSeriesServiceStatisticsPagesWithContext indicates an expected call of GetTimeSeriesServiceStatisticsPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetTimeSeriesServiceStatisticsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesServiceStatisticsPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTimeSeriesServiceStatisticsPagesWithContext), varargs...)
}

// GetTimeSeriesServiceStatisticsRequest mocks base method.
func (m *MockXRayAPI) GetTimeSeriesServiceStatisticsRequest(arg0 *xray.GetTimeSeriesServiceStatisticsInput) (*request.Request, *xray.GetTimeSeriesServiceStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSeriesServiceStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetTimeSeriesServiceStatisticsOutput)
	return ret0, ret1
}

// GetTimeSeriesServiceStatisticsRequest indicates an expected call of GetTimeSeriesServiceStatisticsRequest.
func (mr *MockXRayAPIMockRecorder) GetTimeSeriesServiceStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesServiceStatisticsRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetTimeSeriesServiceStatisticsRequest), arg0)
}

// GetTimeSeriesServiceStatisticsWithContext mocks base method.
func (m *MockXRayAPI) GetTimeSeriesServiceStatisticsWithContext(arg0 context.Context, arg1 *xray.GetTimeSeriesServiceStatisticsInput, arg2 ...request.Option) (*xray.GetTimeSeriesServiceStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeSeriesServiceStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetTimeSeriesServiceStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSeriesServiceStatisticsWithContext indicates an expected call of GetTimeSeriesServiceStatisticsWithContext.
func (mr *MockXRayAPIMockRecorder) GetTimeSeriesServiceStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSeriesServiceStatisticsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTimeSeriesServiceStatisticsWithContext), varargs...)
}

// GetTraceGraph mocks base method.
func (m *MockXRayAPI) GetTraceGraph(arg0 *xray.GetTraceGraphInput) (*xray.GetTraceGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceGraph", arg0)
	ret0, _ := ret[0].(*xray.GetTraceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceGraph indicates an expected call of GetTraceGraph.
func (mr *MockXRayAPIMockRecorder) GetTraceGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraph", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraph), arg0)
}

// GetTraceGraphPages mocks base method.
func (m *MockXRayAPI) GetTraceGraphPages(arg0 *xray.GetTraceGraphInput, arg1 func(*xray.GetTraceGraphOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceGraphPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceGraphPages indicates an expected call of GetTraceGraphPages.
func (mr *MockXRayAPIMockRecorder) GetTraceGraphPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphPages", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphPages), arg0, arg1)
}

// GetTraceGraphPagesWithContext mocks base method.
func (m *MockXRayAPI) GetTraceGraphPagesWithContext(arg0 context.Context, arg1 *xray.GetTraceGraphInput, arg2 func(*xray.GetTraceGraphOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceGraphPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceGraphPagesWithContext indicates an expected call of GetTraceGraphPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetTraceGraphPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphPagesWithContext), varargs...)
}

// GetTraceGraphRequest mocks base method.
func (m *MockXRayAPI) GetTraceGraphRequest(arg0 *xray.GetTraceGraphInput) (*request.Request, *xray.GetTraceGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetTraceGraphOutput)
	return ret0, ret1
}

// GetTraceGraphRequest indicates an expected call of GetTraceGraphRequest.
func (mr *MockXRayAPIMockRecorder) GetTraceGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphRequest), arg0)
}

// GetTraceGraphWithContext mocks base method.
func (m *MockXRayAPI) GetTraceGraphWithContext(arg0 context.Context, arg1 *xray.GetTraceGraphInput, arg2 ...request.Option) (*xray.GetTraceGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceGraphWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetTraceGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceGraphWithContext indicates an expected call of GetTraceGraphWithContext.
func (mr *MockXRayAPIMockRecorder) GetTraceGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceGraphWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceGraphWithContext), varargs...)
}

// GetTraceSummaries mocks base method.
func (m *MockXRayAPI) GetTraceSummaries(arg0 *xray.GetTraceSummariesInput) (*xray.GetTraceSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSummaries", arg0)
	ret0, _ := ret[0].(*xray.GetTraceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceSummaries indicates an expected call of GetTraceSummaries.
func (mr *MockXRayAPIMockRecorder) GetTraceSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummaries", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummaries), arg0)
}

// GetTraceSummariesPages mocks base method.
func (m *MockXRayAPI) GetTraceSummariesPages(arg0 *xray.GetTraceSummariesInput, arg1 func(*xray.GetTraceSummariesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSummariesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceSummariesPages indicates an expected call of GetTraceSummariesPages.
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesPages", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesPages), arg0, arg1)
}

// GetTraceSummariesPagesWithContext mocks base method.
func (m *MockXRayAPI) GetTraceSummariesPagesWithContext(arg0 context.Context, arg1 *xray.GetTraceSummariesInput, arg2 func(*xray.GetTraceSummariesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceSummariesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTraceSummariesPagesWithContext indicates an expected call of GetTraceSummariesPagesWithContext.
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesPagesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesPagesWithContext), varargs...)
}

// GetTraceSummariesRequest mocks base method.
func (m *MockXRayAPI) GetTraceSummariesRequest(arg0 *xray.GetTraceSummariesInput) (*request.Request, *xray.GetTraceSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.GetTraceSummariesOutput)
	return ret0, ret1
}

// GetTraceSummariesRequest indicates an expected call of GetTraceSummariesRequest.
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesRequest", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesRequest), arg0)
}

// GetTraceSummariesWithContext mocks base method.
func (m *MockXRayAPI) GetTraceSummariesWithContext(arg0 context.Context, arg1 *xray.GetTraceSummariesInput, arg2 ...request.Option) (*xray.GetTraceSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTraceSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*xray.GetTraceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceSummariesWithContext indicates an expected call of GetTraceSummariesWithContext.
func (mr *MockXRayAPIMockRecorder) GetTraceSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceSummariesWithContext", reflect.TypeOf((*MockXRayAPI)(nil).GetTraceSummariesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockXRayAPI) ListTagsForResource(arg0 *xray.ListTagsForResourceInput) (*xray.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*xray.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockXRayAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockXRayAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockXRayAPI) ListTagsForResourceRequest(arg0 *xray.ListTagsForResourceInput) (*request.Request, *xray.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockXRayAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockXRayAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockXRayAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *xray.ListTagsForResourceInput, arg2 ...request.Option) (*xray.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*xray.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockXRayAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockXRayAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutEncryptionConfig mocks base method.
func (m *MockXRayAPI) PutEncryptionConfig(arg0 *xray.PutEncryptionConfigInput) (*xray.PutEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEncryptionConfig", arg0)
	ret0, _ := ret[0].(*xray.PutEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEncryptionConfig indicates an expected call of PutEncryptionConfig.
func (mr *MockXRayAPIMockRecorder) PutEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfig", reflect.TypeOf((*MockXRayAPI)(nil).PutEncryptionConfig), arg0)
}

// PutEncryptionConfigRequest mocks base method.
func (m *MockXRayAPI) PutEncryptionConfigRequest(arg0 *xray.PutEncryptionConfigInput) (*request.Request, *xray.PutEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.PutEncryptionConfigOutput)
	return ret0, ret1
}

// PutEncryptionConfigRequest indicates an expected call of PutEncryptionConfigRequest.
func (mr *MockXRayAPIMockRecorder) PutEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfigRequest", reflect.TypeOf((*MockXRayAPI)(nil).PutEncryptionConfigRequest), arg0)
}

// PutEncryptionConfigWithContext mocks base method.
func (m *MockXRayAPI) PutEncryptionConfigWithContext(arg0 context.Context, arg1 *xray.PutEncryptionConfigInput, arg2 ...request.Option) (*xray.PutEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*xray.PutEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEncryptionConfigWithContext indicates an expected call of PutEncryptionConfigWithContext.
func (mr *MockXRayAPIMockRecorder) PutEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEncryptionConfigWithContext", reflect.TypeOf((*MockXRayAPI)(nil).PutEncryptionConfigWithContext), varargs...)
}

// PutTelemetryRecords mocks base method.
func (m *MockXRayAPI) PutTelemetryRecords(arg0 *xray.PutTelemetryRecordsInput) (*xray.PutTelemetryRecordsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTelemetryRecords", arg0)
	ret0, _ := ret[0].(*xray.PutTelemetryRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTelemetryRecords indicates an expected call of PutTelemetryRecords.
func (mr *MockXRayAPIMockRecorder) PutTelemetryRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTelemetryRecords", reflect.TypeOf((*MockXRayAPI)(nil).PutTelemetryRecords), arg0)
}

// PutTelemetryRecordsRequest mocks base method.
func (m *MockXRayAPI) PutTelemetryRecordsRequest(arg0 *xray.PutTelemetryRecordsInput) (*request.Request, *xray.PutTelemetryRecordsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTelemetryRecordsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.PutTelemetryRecordsOutput)
	return ret0, ret1
}

// PutTelemetryRecordsRequest indicates an expected call of PutTelemetryRecordsRequest.
func (mr *MockXRayAPIMockRecorder) PutTelemetryRecordsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTelemetryRecordsRequest", reflect.TypeOf((*MockXRayAPI)(nil).PutTelemetryRecordsRequest), arg0)
}

// PutTelemetryRecordsWithContext mocks base method.
func (m *MockXRayAPI) PutTelemetryRecordsWithContext(arg0 context.Context, arg1 *xray.PutTelemetryRecordsInput, arg2 ...request.Option) (*xray.PutTelemetryRecordsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTelemetryRecordsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.PutTelemetryRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTelemetryRecordsWithContext indicates an expected call of PutTelemetryRecordsWithContext.
func (mr *MockXRayAPIMockRecorder) PutTelemetryRecordsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTelemetryRecordsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).PutTelemetryRecordsWithContext), varargs...)
}

// PutTraceSegments mocks base method.
func (m *MockXRayAPI) PutTraceSegments(arg0 *xray.PutTraceSegmentsInput) (*xray.PutTraceSegmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTraceSegments", arg0)
	ret0, _ := ret[0].(*xray.PutTraceSegmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTraceSegments indicates an expected call of PutTraceSegments.
func (mr *MockXRayAPIMockRecorder) PutTraceSegments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraceSegments", reflect.TypeOf((*MockXRayAPI)(nil).PutTraceSegments), arg0)
}

// PutTraceSegmentsRequest mocks base method.
func (m *MockXRayAPI) PutTraceSegmentsRequest(arg0 *xray.PutTraceSegmentsInput) (*request.Request, *xray.PutTraceSegmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTraceSegmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.PutTraceSegmentsOutput)
	return ret0, ret1
}

// PutTraceSegmentsRequest indicates an expected call of PutTraceSegmentsRequest.
func (mr *MockXRayAPIMockRecorder) PutTraceSegmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraceSegmentsRequest", reflect.TypeOf((*MockXRayAPI)(nil).PutTraceSegmentsRequest), arg0)
}

// PutTraceSegmentsWithContext mocks base method.
func (m *MockXRayAPI) PutTraceSegmentsWithContext(arg0 context.Context, arg1 *xray.PutTraceSegmentsInput, arg2 ...request.Option) (*xray.PutTraceSegmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTraceSegmentsWithContext", varargs...)
	ret0, _ := ret[0].(*xray.PutTraceSegmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTraceSegmentsWithContext indicates an expected call of PutTraceSegmentsWithContext.
func (mr *MockXRayAPIMockRecorder) PutTraceSegmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraceSegmentsWithContext", reflect.TypeOf((*MockXRayAPI)(nil).PutTraceSegmentsWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockXRayAPI) TagResource(arg0 *xray.TagResourceInput) (*xray.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*xray.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockXRayAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockXRayAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockXRayAPI) TagResourceRequest(arg0 *xray.TagResourceInput) (*request.Request, *xray.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockXRayAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockXRayAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockXRayAPI) TagResourceWithContext(arg0 context.Context, arg1 *xray.TagResourceInput, arg2 ...request.Option) (*xray.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*xray.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockXRayAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockXRayAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockXRayAPI) UntagResource(arg0 *xray.UntagResourceInput) (*xray.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*xray.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockXRayAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockXRayAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockXRayAPI) UntagResourceRequest(arg0 *xray.UntagResourceInput) (*request.Request, *xray.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockXRayAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockXRayAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockXRayAPI) UntagResourceWithContext(arg0 context.Context, arg1 *xray.UntagResourceInput, arg2 ...request.Option) (*xray.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*xray.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockXRayAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockXRayAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateGroup mocks base method.
func (m *MockXRayAPI) UpdateGroup(arg0 *xray.UpdateGroupInput) (*xray.UpdateGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0)
	ret0, _ := ret[0].(*xray.UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockXRayAPIMockRecorder) UpdateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockXRayAPI)(nil).UpdateGroup), arg0)
}

// UpdateGroupRequest mocks base method.
func (m *MockXRayAPI) UpdateGroupRequest(arg0 *xray.UpdateGroupInput) (*request.Request, *xray.UpdateGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.UpdateGroupOutput)
	return ret0, ret1
}

// UpdateGroupRequest indicates an expected call of UpdateGroupRequest.
func (mr *MockXRayAPIMockRecorder) UpdateGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupRequest", reflect.TypeOf((*MockXRayAPI)(nil).UpdateGroupRequest), arg0)
}

// UpdateGroupWithContext mocks base method.
func (m *MockXRayAPI) UpdateGroupWithContext(arg0 context.Context, arg1 *xray.UpdateGroupInput, arg2 ...request.Option) (*xray.UpdateGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupWithContext", varargs...)
	ret0, _ := ret[0].(*xray.UpdateGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroupWithContext indicates an expected call of UpdateGroupWithContext.
func (mr *MockXRayAPIMockRecorder) UpdateGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupWithContext", reflect.TypeOf((*MockXRayAPI)(nil).UpdateGroupWithContext), varargs...)
}

// UpdateSamplingRule mocks base method.
func (m *MockXRayAPI) UpdateSamplingRule(arg0 *xray.UpdateSamplingRuleInput) (*xray.UpdateSamplingRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSamplingRule", arg0)
	ret0, _ := ret[0].(*xray.UpdateSamplingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSamplingRule indicates an expected call of UpdateSamplingRule.
func (mr *MockXRayAPIMockRecorder) UpdateSamplingRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSamplingRule", reflect.TypeOf((*MockXRayAPI)(nil).UpdateSamplingRule), arg0)
}

// UpdateSamplingRuleRequest mocks base method.
func (m *MockXRayAPI) UpdateSamplingRuleRequest(arg0 *xray.UpdateSamplingRuleInput) (*request.Request, *xray.UpdateSamplingRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSamplingRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*xray.UpdateSamplingRuleOutput)
	return ret0, ret1
}

// UpdateSamplingRuleRequest indicates an expected call of UpdateSamplingRuleRequest.
func (mr *MockXRayAPIMockRecorder) UpdateSamplingRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSamplingRuleRequest", reflect.TypeOf((*MockXRayAPI)(nil).UpdateSamplingRuleRequest), arg0)
}

// UpdateSamplingRuleWithContext mocks base method.
func (m *MockXRayAPI) UpdateSamplingRuleWithContext(arg0 context.Context, arg1 *xray.UpdateSamplingRuleInput, arg2 ...request.Option) (*xray.UpdateSamplingRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSamplingRuleWithContext", varargs...)
	ret0, _ := ret[0].(*xray.UpdateSamplingRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSamplingRuleWithContext indicates an expected call of UpdateSamplingRuleWithContext.
func (mr *MockXRayAPIMockRecorder) UpdateSamplingRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSamplingRuleWithContext", reflect.TypeOf((*MockXRayAPI)(nil).UpdateSamplingRuleWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/efs/efsiface (interfaces: EFSAPI)

// Package efsmock is a generated GoMock package.
package efsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	efs "github.com/aws/aws-sdk-go/service/efs"
	gomock "github.com/golang/mock/gomock"
)

// MockEFSAPI is a mock of EFSAPI interface.
type MockEFSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEFSAPIMockRecorder
}

// MockEFSAPIMockRecorder is the mock recorder for MockEFSAPI.
type MockEFSAPIMockRecorder struct {
	mock *MockEFSAPI
}

// NewMockEFSAPI creates a new mock instance.
func NewMockEFSAPI(ctrl *gomock.Controller) *MockEFSAPI {
	mock := &MockEFSAPI{ctrl: ctrl}
	mock.recorder = &MockEFSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEFSAPI) EXPECT() *MockEFSAPIMockRecorder {
	return m.recorder
}

// CreateAccessPoint mocks base method.
func (m *MockEFSAPI) CreateAccessPoint(arg0 *efs.CreateAccessPointInput) (*efs.CreateAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPoint", arg0)
	ret0, _ := ret[0].(*efs.CreateAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPoint indicates an expected call of CreateAccessPoint.
func (mr *MockEFSAPIMockRecorder) CreateAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPoint", reflect.TypeOf((*MockEFSAPI)(nil).CreateAccessPoint), arg0)
}

// CreateAccessPointRequest mocks base method.
func (m *MockEFSAPI) CreateAccessPointRequest(arg0 *efs.CreateAccessPointInput) (*request.Request, *efs.CreateAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.CreateAccessPointOutput)
	return ret0, ret1
}

// CreateAccessPointRequest indicates an expected call of CreateAccessPointRequest.
func (mr *MockEFSAPIMockRecorder) CreateAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPointRequest", reflect.TypeOf((*MockEFSAPI)(nil).CreateAccessPointRequest), arg0)
}

// CreateAccessPointWithContext mocks base method.
func (m *MockEFSAPI) CreateAccessPointWithContext(arg0 context.Context, arg1 *efs.CreateAccessPointInput, arg2 ...request.Option) (*efs.CreateAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*efs.CreateAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPointWithContext indicates an expected call of CreateAccessPointWithContext.
func (mr *MockEFSAPIMockRecorder) CreateAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPointWithContext", reflect.TypeOf((*MockEFSAPI)(nil).CreateAccessPointWithContext), varargs...)
}

// CreateFileSystem mocks base method.
func (m *MockEFSAPI) CreateFileSystem(arg0 *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", arg0)
	ret0, _ := ret[0].(*efs.FileSystemDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockEFSAPIMockRecorder) CreateFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem", reflect.TypeOf((*MockEFSAPI)(nil).CreateFileSystem), arg0)
}

// CreateFileSystemRequest mocks base method.
func (m *MockEFSAPI) CreateFileSystemRequest(arg0 *efs.CreateFileSystemInput) (*request.Request, *efs.FileSystemDescription) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.FileSystemDescription)
	return ret0, ret1
}

// CreateFileSystemRequest indicates an expected call of CreateFileSystemRequest.
func (mr *MockEFSAPIMockRecorder) CreateFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemRequest", reflect.TypeOf((*MockEFSAPI)(nil).CreateFileSystemRequest), arg0)
}

// CreateFileSystemWithContext mocks base method.
func (m *MockEFSAPI) CreateFileSystemWithContext(arg0 context.Context, arg1 *efs.CreateFileSystemInput, arg2 ...request.Option) (*efs.FileSystemDescription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*efs.FileSystemDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystemWithContext indicates an expected call of CreateFileSystemWithContext.
func (mr *MockEFSAPIMockRecorder) CreateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystemWithContext", reflect.TypeOf((*MockEFSAPI)(nil).CreateFileSystemWithContext), varargs...)
}

// CreateMountTarget mocks base method.
func (m *MockEFSAPI) CreateMountTarget(arg0 *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMountTarget", arg0)
	ret0, _ := ret[0].(*efs.MountTargetDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMountTarget indicates an expected call of CreateMountTarget.
func (mr *MockEFSAPIMockRecorder) CreateMountTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMountTarget", reflect.TypeOf((*MockEFSAPI)(nil).CreateMountTarget), arg0)
}

// CreateMountTargetRequest mocks base method.
func (m *MockEFSAPI) CreateMountTargetRequest(arg0 *efs.CreateMountTargetInput) (*request.Request, *efs.MountTargetDescription) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMountTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.MountTargetDescription)
	return ret0, ret1
}

// CreateMountTargetRequest indicates an expected call of CreateMountTargetRequest.
func (mr *MockEFSAPIMockRecorder) CreateMountTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMountTargetRequest", reflect.TypeOf((*MockEFSAPI)(nil).CreateMountTargetRequest), arg0)
}

// CreateMountTargetWithContext mocks base method.
func (m *MockEFSAPI) CreateMountTargetWithContext(arg0 context.Context, arg1 *efs.CreateMountTargetInput, arg2 ...request.Option) (*efs.MountTargetDescription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMountTargetWithContext", varargs...)
	ret0, _ := ret[0].(*efs.MountTargetDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMountTargetWithContext indicates an expected call of CreateMountTargetWithContext.
func (mr *MockEFSAPIMockRecorder) CreateMountTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMountTargetWithContext", reflect.TypeOf((*MockEFSAPI)(nil).CreateMountTargetWithContext), varargs...)
}

// CreateReplicationConfiguration mocks base method.
func (m *MockEFSAPI) CreateReplicationConfiguration(arg0 *efs.CreateReplicationConfigurationInput) (*efs.CreateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*efs.CreateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfiguration indicates an expected call of CreateReplicationConfiguration.
func (mr *MockEFSAPIMockRecorder) CreateReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfiguration", reflect.TypeOf((*MockEFSAPI)(nil).CreateReplicationConfiguration), arg0)
}

// CreateReplicationConfigurationRequest mocks base method.
func (m *MockEFSAPI) CreateReplicationConfigurationRequest(arg0 *efs.CreateReplicationConfigurationInput) (*request.Request, *efs.CreateReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.CreateReplicationConfigurationOutput)
	return ret0, ret1
}

// CreateReplicationConfigurationRequest indicates an expected call of CreateReplicationConfigurationRequest.
func (mr *MockEFSAPIMockRecorder) CreateReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationRequest", reflect.TypeOf((*MockEFSAPI)(nil).CreateReplicationConfigurationRequest), arg0)
}

// CreateReplicationConfigurationWithContext mocks base method.
func (m *MockEFSAPI) CreateReplicationConfigurationWithContext(arg0 context.Context, arg1 *efs.CreateReplicationConfigurationInput, arg2 ...request.Option) (*efs.CreateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*efs.CreateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationWithContext indicates an expected call of CreateReplicationConfigurationWithContext.
func (mr *MockEFSAPIMockRecorder) CreateReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationWithContext", reflect.TypeOf((*MockEFSAPI)(nil).CreateReplicationConfigurationWithContext), varargs...)
}

// CreateTags mocks base method.
func (m *MockEFSAPI) CreateTags(arg0 *efs.CreateTagsInput) (*efs.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", arg0)
	ret0, _ := ret[0].(*efs.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockEFSAPIMockRecorder) CreateTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockEFSAPI)(nil).CreateTags), arg0)
}

// CreateTagsRequest mocks base method.
func (m *MockEFSAPI) CreateTagsRequest(arg0 *efs.CreateTagsInput) (*request.Request, *efs.CreateTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.CreateTagsOutput)
	return ret0, ret1
}

// CreateTagsRequest indicates an expected call of CreateTagsRequest.
func (mr *MockEFSAPIMockRecorder) CreateTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsRequest", reflect.TypeOf((*MockEFSAPI)(nil).CreateTagsRequest), arg0)
}

// CreateTagsWithContext mocks base method.
func (m *MockEFSAPI) CreateTagsWithContext(arg0 context.Context, arg1 *efs.CreateTagsInput, arg2 ...request.Option) (*efs.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTagsWithContext indicates an expected call of CreateTagsWithContext.
func (mr *MockEFSAPIMockRecorder) CreateTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).CreateTagsWithContext), varargs...)
}

// DeleteAccessPoint mocks base method.
func (m *MockEFSAPI) DeleteAccessPoint(arg0 *efs.DeleteAccessPointInput) (*efs.DeleteAccessPointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPoint", arg0)
	ret0, _ := ret[0].(*efs.DeleteAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPoint indicates an expected call of DeleteAccessPoint.
func (mr *MockEFSAPIMockRecorder) DeleteAccessPoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPoint", reflect.TypeOf((*MockEFSAPI)(nil).DeleteAccessPoint), arg0)
}

// DeleteAccessPointRequest mocks base method.
func (m *MockEFSAPI) DeleteAccessPointRequest(arg0 *efs.DeleteAccessPointInput) (*request.Request, *efs.DeleteAccessPointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DeleteAccessPointOutput)
	return ret0, ret1
}

// DeleteAccessPointRequest indicates an expected call of DeleteAccessPointRequest.
func (mr *MockEFSAPIMockRecorder) DeleteAccessPointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointRequest", reflect.TypeOf((*MockEFSAPI)(nil).DeleteAccessPointRequest), arg0)
}

// DeleteAccessPointWithContext mocks base method.
func (m *MockEFSAPI) DeleteAccessPointWithContext(arg0 context.Context, arg1 *efs.DeleteAccessPointInput, arg2 ...request.Option) (*efs.DeleteAccessPointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPointWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DeleteAccessPointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPointWithContext indicates an expected call of DeleteAccessPointWithContext.
func (mr *MockEFSAPIMockRecorder) DeleteAccessPointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPointWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DeleteAccessPointWithContext), varargs...)
}

// DeleteFileSystem mocks base method.
func (m *MockEFSAPI) DeleteFileSystem(arg0 *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", arg0)
	ret0, _ := ret[0].(*efs.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockEFSAPIMockRecorder) DeleteFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem", reflect.TypeOf((*MockEFSAPI)(nil).DeleteFileSystem), arg0)
}

// DeleteFileSystemPolicy mocks base method.
func (m *MockEFSAPI) DeleteFileSystemPolicy(arg0 *efs.DeleteFileSystemPolicyInput) (*efs.DeleteFileSystemPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystemPolicy", arg0)
	ret0, _ := ret[0].(*efs.DeleteFileSystemPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystemPolicy indicates an expected call of DeleteFileSystemPolicy.
func (mr *MockEFSAPIMockRecorder) DeleteFileSystemPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemPolicy", reflect.TypeOf((*MockEFSAPI)(nil).DeleteFileSystemPolicy), arg0)
}

// DeleteFileSystemPolicyRequest mocks base method.
func (m *MockEFSAPI) DeleteFileSystemPolicyRequest(arg0 *efs.DeleteFileSystemPolicyInput) (*request.Request, *efs.DeleteFileSystemPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystemPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DeleteFileSystemPolicyOutput)
	return ret0, ret1
}

// DeleteFileSystemPolicyRequest indicates an expected call of DeleteFileSystemPolicyRequest.
func (mr *MockEFSAPIMockRecorder) DeleteFileSystemPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemPolicyRequest", reflect.TypeOf((*MockEFSAPI)(nil).DeleteFileSystemPolicyRequest), arg0)
}

// DeleteFileSystemPolicyWithContext mocks base method.
func (m *MockEFSAPI) DeleteFileSystemPolicyWithContext(arg0 context.Context, arg1 *efs.DeleteFileSystemPolicyInput, arg2 ...request.Option) (*efs.DeleteFileSystemPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileSystemPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DeleteFileSystemPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystemPolicyWithContext indicates an expected call of DeleteFileSystemPolicyWithContext.
func (mr *MockEFSAPIMockRecorder) DeleteFileSystemPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemPolicyWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DeleteFileSystemPolicyWithContext), varargs...)
}

// DeleteFileSystemRequest mocks base method.
func (m *MockEFSAPI) DeleteFileSystemRequest(arg0 *efs.DeleteFileSystemInput) (*request.Request, *efs.DeleteFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DeleteFileSystemOutput)
	return ret0, ret1
}

// DeleteFileSystemRequest indicates an expected call of DeleteFileSystemRequest.
func (mr *MockEFSAPIMockRecorder) DeleteFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemRequest", reflect.TypeOf((*MockEFSAPI)(nil).DeleteFileSystemRequest), arg0)
}

// DeleteFileSystemWithContext mocks base method.
func (m *MockEFSAPI) DeleteFileSystemWithContext(arg0 context.Context, arg1 *efs.DeleteFileSystemInput, arg2 ...request.Option) (*efs.DeleteFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DeleteFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileSystemWithContext indicates an expected call of DeleteFileSystemWithContext.
func (mr *MockEFSAPIMockRecorder) DeleteFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystemWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DeleteFileSystemWithContext), varargs...)
}

// DeleteMountTarget mocks base method.
func (m *MockEFSAPI) DeleteMountTarget(arg0 *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMountTarget", arg0)
	ret0, _ := ret[0].(*efs.DeleteMountTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMountTarget indicates an expected call of DeleteMountTarget.
func (mr *MockEFSAPIMockRecorder) DeleteMountTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMountTarget", reflect.TypeOf((*MockEFSAPI)(nil).DeleteMountTarget), arg0)
}

// DeleteMountTargetRequest mocks base method.
func (m *MockEFSAPI) DeleteMountTargetRequest(arg0 *efs.DeleteMountTargetInput) (*request.Request, *efs.DeleteMountTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMountTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DeleteMountTargetOutput)
	return ret0, ret1
}

// DeleteMountTargetRequest indicates an expected call of DeleteMountTargetRequest.
func (mr *MockEFSAPIMockRecorder) DeleteMountTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMountTargetRequest", reflect.TypeOf((*MockEFSAPI)(nil).DeleteMountTargetRequest), arg0)
}

// DeleteMountTargetWithContext mocks base method.
func (m *MockEFSAPI) DeleteMountTargetWithContext(arg0 context.Context, arg1 *efs.DeleteMountTargetInput, arg2 ...request.Option) (*efs.DeleteMountTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMountTargetWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DeleteMountTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMountTargetWithContext indicates an expected call of DeleteMountTargetWithContext.
func (mr *MockEFSAPIMockRecorder) DeleteMountTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMountTargetWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DeleteMountTargetWithContext), varargs...)
}

// DeleteReplicationConfiguration mocks base method.
func (m *MockEFSAPI) DeleteReplicationConfiguration(arg0 *efs.DeleteReplicationConfigurationInput) (*efs.DeleteReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*efs.DeleteReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfiguration indicates an expected call of DeleteReplicationConfiguration.
func (mr *MockEFSAPIMockRecorder) DeleteReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfiguration", reflect.TypeOf((*MockEFSAPI)(nil).DeleteReplicationConfiguration), arg0)
}

// DeleteReplicationConfigurationRequest mocks base method.
func (m *MockEFSAPI) DeleteReplicationConfigurationRequest(arg0 *efs.DeleteReplicationConfigurationInput) (*request.Request, *efs.DeleteReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DeleteReplicationConfigurationOutput)
	return ret0, ret1
}

// DeleteReplicationConfigurationRequest indicates an expected call of DeleteReplicationConfigurationRequest.
func (mr *MockEFSAPIMockRecorder) DeleteReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationRequest", reflect.TypeOf((*MockEFSAPI)(nil).DeleteReplicationConfigurationRequest), arg0)
}

// DeleteReplicationConfigurationWithContext mocks base method.
func (m *MockEFSAPI) DeleteReplicationConfigurationWithContext(arg0 context.Context, arg1 *efs.DeleteReplicationConfigurationInput, arg2 ...request.Option) (*efs.DeleteReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DeleteReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationWithContext indicates an expected call of DeleteReplicationConfigurationWithContext.
func (mr *MockEFSAPIMockRecorder) DeleteReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DeleteReplicationConfigurationWithContext), varargs...)
}

// DeleteTags mocks base method.
func (m *MockEFSAPI) DeleteTags(arg0 *efs.DeleteTagsInput) (*efs.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTags", arg0)
	ret0, _ := ret[0].(*efs.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTags indicates an expected call of DeleteTags.
func (mr *MockEFSAPIMockRecorder) DeleteTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockEFSAPI)(nil).DeleteTags), arg0)
}

// DeleteTagsRequest mocks base method.
func (m *MockEFSAPI) DeleteTagsRequest(arg0 *efs.DeleteTagsInput) (*request.Request, *efs.DeleteTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DeleteTagsOutput)
	return ret0, ret1
}

// DeleteTagsRequest indicates an expected call of DeleteTagsRequest.
func (mr *MockEFSAPIMockRecorder) DeleteTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsRequest", reflect.TypeOf((*MockEFSAPI)(nil).DeleteTagsRequest), arg0)
}

// DeleteTagsWithContext mocks base method.
func (m *MockEFSAPI) DeleteTagsWithContext(arg0 context.Context, arg1 *efs.DeleteTagsInput, arg2 ...request.Option) (*efs.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagsWithContext indicates an expected call of DeleteTagsWithContext.
func (mr *MockEFSAPIMockRecorder) DeleteTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DeleteTagsWithContext), varargs...)
}

// DescribeAccessPoints mocks base method.
func (m *MockEFSAPI) DescribeAccessPoints(arg0 *efs.DescribeAccessPointsInput) (*efs.DescribeAccessPointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessPoints", arg0)
	ret0, _ := ret[0].(*efs.DescribeAccessPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessPoints indicates an expected call of DescribeAccessPoints.
func (mr *MockEFSAPIMockRecorder) DescribeAccessPoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPoints", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccessPoints), arg0)
}

// DescribeAccessPointsPages mocks base method.
func (m *MockEFSAPI) DescribeAccessPointsPages(arg0 *efs.DescribeAccessPointsInput, arg1 func(*efs.DescribeAccessPointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessPointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAccessPointsPages indicates an expected call of DescribeAccessPointsPages.
func (mr *MockEFSAPIMockRecorder) DescribeAccessPointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPointsPages", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccessPointsPages), arg0, arg1)
}

// DescribeAccessPointsPagesWithContext mocks base method.
func (m *MockEFSAPI) DescribeAccessPointsPagesWithContext(arg0 context.Context, arg1 *efs.DescribeAccessPointsInput, arg2 func(*efs.DescribeAccessPointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccessPointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAccessPointsPagesWithContext indicates an expected call of DescribeAccessPointsPagesWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeAccessPointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPointsPagesWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccessPointsPagesWithContext), varargs...)
}

// DescribeAccessPointsRequest mocks base method.
func (m *MockEFSAPI) DescribeAccessPointsRequest(arg0 *efs.DescribeAccessPointsInput) (*request.Request, *efs.DescribeAccessPointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessPointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeAccessPointsOutput)
	return ret0, ret1
}

// DescribeAccessPointsRequest indicates an expected call of DescribeAccessPointsRequest.
func (mr *MockEFSAPIMockRecorder) DescribeAccessPointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPointsRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccessPointsRequest), arg0)
}

// DescribeAccessPointsWithContext mocks base method.
func (m *MockEFSAPI) DescribeAccessPointsWithContext(arg0 context.Context, arg1 *efs.DescribeAccessPointsInput, arg2 ...request.Option) (*efs.DescribeAccessPointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccessPointsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeAccessPointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessPointsWithContext indicates an expected call of DescribeAccessPointsWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeAccessPointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPointsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccessPointsWithContext), varargs...)
}

// DescribeAccountPreferences mocks base method.
func (m *MockEFSAPI) DescribeAccountPreferences(arg0 *efs.DescribeAccountPreferencesInput) (*efs.DescribeAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountPreferences", arg0)
	ret0, _ := ret[0].(*efs.DescribeAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountPreferences indicates an expected call of DescribeAccountPreferences.
func (mr *MockEFSAPIMockRecorder) DescribeAccountPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountPreferences", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccountPreferences), arg0)
}

// DescribeAccountPreferencesRequest mocks base method.
func (m *MockEFSAPI) DescribeAccountPreferencesRequest(arg0 *efs.DescribeAccountPreferencesInput) (*request.Request, *efs.DescribeAccountPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeAccountPreferencesOutput)
	return ret0, ret1
}

// DescribeAccountPreferencesRequest indicates an expected call of DescribeAccountPreferencesRequest.
func (mr *MockEFSAPIMockRecorder) DescribeAccountPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountPreferencesRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccountPreferencesRequest), arg0)
}

// DescribeAccountPreferencesWithContext mocks base method.
func (m *MockEFSAPI) DescribeAccountPreferencesWithContext(arg0 context.Context, arg1 *efs.DescribeAccountPreferencesInput, arg2 ...request.Option) (*efs.DescribeAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountPreferencesWithContext indicates an expected call of DescribeAccountPreferencesWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeAccountPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountPreferencesWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeAccountPreferencesWithContext), varargs...)
}

// DescribeBackupPolicy mocks base method.
func (m *MockEFSAPI) DescribeBackupPolicy(arg0 *efs.DescribeBackupPolicyInput) (*efs.DescribeBackupPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupPolicy", arg0)
	ret0, _ := ret[0].(*efs.DescribeBackupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupPolicy indicates an expected call of DescribeBackupPolicy.
func (mr *MockEFSAPIMockRecorder) DescribeBackupPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupPolicy", reflect.TypeOf((*MockEFSAPI)(nil).DescribeBackupPolicy), arg0)
}

// DescribeBackupPolicyRequest mocks base method.
func (m *MockEFSAPI) DescribeBackupPolicyRequest(arg0 *efs.DescribeBackupPolicyInput) (*request.Request, *efs.DescribeBackupPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeBackupPolicyOutput)
	return ret0, ret1
}

// DescribeBackupPolicyRequest indicates an expected call of DescribeBackupPolicyRequest.
func (mr *MockEFSAPIMockRecorder) DescribeBackupPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupPolicyRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeBackupPolicyRequest), arg0)
}

// DescribeBackupPolicyWithContext mocks base method.
func (m *MockEFSAPI) DescribeBackupPolicyWithContext(arg0 context.Context, arg1 *efs.DescribeBackupPolicyInput, arg2 ...request.Option) (*efs.DescribeBackupPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeBackupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupPolicyWithContext indicates an expected call of DescribeBackupPolicyWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeBackupPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupPolicyWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeBackupPolicyWithContext), varargs...)
}

// DescribeFileSystemPolicy mocks base method.
func (m *MockEFSAPI) DescribeFileSystemPolicy(arg0 *efs.DescribeFileSystemPolicyInput) (*efs.DescribeFileSystemPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemPolicy", arg0)
	ret0, _ := ret[0].(*efs.DescribeFileSystemPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemPolicy indicates an expected call of DescribeFileSystemPolicy.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystemPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemPolicy", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystemPolicy), arg0)
}

// DescribeFileSystemPolicyRequest mocks base method.
func (m *MockEFSAPI) DescribeFileSystemPolicyRequest(arg0 *efs.DescribeFileSystemPolicyInput) (*request.Request, *efs.DescribeFileSystemPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeFileSystemPolicyOutput)
	return ret0, ret1
}

// DescribeFileSystemPolicyRequest indicates an expected call of DescribeFileSystemPolicyRequest.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystemPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemPolicyRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystemPolicyRequest), arg0)
}

// DescribeFileSystemPolicyWithContext mocks base method.
func (m *MockEFSAPI) DescribeFileSystemPolicyWithContext(arg0 context.Context, arg1 *efs.DescribeFileSystemPolicyInput, arg2 ...request.Option) (*efs.DescribeFileSystemPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeFileSystemPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemPolicyWithContext indicates an expected call of DescribeFileSystemPolicyWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystemPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemPolicyWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystemPolicyWithContext), varargs...)
}

// DescribeFileSystems mocks base method.
func (m *MockEFSAPI) DescribeFileSystems(arg0 *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystems", arg0)
	ret0, _ := ret[0].(*efs.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystems indicates an expected call of DescribeFileSystems.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystems", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystems), arg0)
}

// DescribeFileSystemsPages mocks base method.
func (m *MockEFSAPI) DescribeFileSystemsPages(arg0 *efs.DescribeFileSystemsInput, arg1 func(*efs.DescribeFileSystemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemsPages indicates an expected call of DescribeFileSystemsPages.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsPages", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystemsPages), arg0, arg1)
}

// DescribeFileSystemsPagesWithContext mocks base method.
func (m *MockEFSAPI) DescribeFileSystemsPagesWithContext(arg0 context.Context, arg1 *efs.DescribeFileSystemsInput, arg2 func(*efs.DescribeFileSystemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeFileSystemsPagesWithContext indicates an expected call of DescribeFileSystemsPagesWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsPagesWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystemsPagesWithContext), varargs...)
}

// DescribeFileSystemsRequest mocks base method.
func (m *MockEFSAPI) DescribeFileSystemsRequest(arg0 *efs.DescribeFileSystemsInput) (*request.Request, *efs.DescribeFileSystemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFileSystemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeFileSystemsOutput)
	return ret0, ret1
}

// DescribeFileSystemsRequest indicates an expected call of DescribeFileSystemsRequest.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystemsRequest), arg0)
}

// DescribeFileSystemsWithContext mocks base method.
func (m *MockEFSAPI) DescribeFileSystemsWithContext(arg0 context.Context, arg1 *efs.DescribeFileSystemsInput, arg2 ...request.Option) (*efs.DescribeFileSystemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFileSystemsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeFileSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFileSystemsWithContext indicates an expected call of DescribeFileSystemsWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeFileSystemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFileSystemsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeFileSystemsWithContext), varargs...)
}

// DescribeLifecycleConfiguration mocks base method.
func (m *MockEFSAPI) DescribeLifecycleConfiguration(arg0 *efs.DescribeLifecycleConfigurationInput) (*efs.DescribeLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLifecycleConfiguration", arg0)
	ret0, _ := ret[0].(*efs.DescribeLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLifecycleConfiguration indicates an expected call of DescribeLifecycleConfiguration.
func (mr *MockEFSAPIMockRecorder) DescribeLifecycleConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLifecycleConfiguration", reflect.TypeOf((*MockEFSAPI)(nil).DescribeLifecycleConfiguration), arg0)
}

// DescribeLifecycleConfigurationRequest mocks base method.
func (m *MockEFSAPI) DescribeLifecycleConfigurationRequest(arg0 *efs.DescribeLifecycleConfigurationInput) (*request.Request, *efs.DescribeLifecycleConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLifecycleConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeLifecycleConfigurationOutput)
	return ret0, ret1
}

// DescribeLifecycleConfigurationRequest indicates an expected call of DescribeLifecycleConfigurationRequest.
func (mr *MockEFSAPIMockRecorder) DescribeLifecycleConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLifecycleConfigurationRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeLifecycleConfigurationRequest), arg0)
}

// DescribeLifecycleConfigurationWithContext mocks base method.
func (m *MockEFSAPI) DescribeLifecycleConfigurationWithContext(arg0 context.Context, arg1 *efs.DescribeLifecycleConfigurationInput, arg2 ...request.Option) (*efs.DescribeLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLifecycleConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLifecycleConfigurationWithContext indicates an expected call of DescribeLifecycleConfigurationWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeLifecycleConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLifecycleConfigurationWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeLifecycleConfigurationWithContext), varargs...)
}

// DescribeMountTargetSecurityGroups mocks base method.
func (m *MockEFSAPI) DescribeMountTargetSecurityGroups(arg0 *efs.DescribeMountTargetSecurityGroupsInput) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMountTargetSecurityGroups", arg0)
	ret0, _ := ret[0].(*efs.DescribeMountTargetSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMountTargetSecurityGroups indicates an expected call of DescribeMountTargetSecurityGroups.
func (mr *MockEFSAPIMockRecorder) DescribeMountTargetSecurityGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargetSecurityGroups", reflect.TypeOf((*MockEFSAPI)(nil).DescribeMountTargetSecurityGroups), arg0)
}

// DescribeMountTargetSecurityGroupsRequest mocks base method.
func (m *MockEFSAPI) DescribeMountTargetSecurityGroupsRequest(arg0 *efs.DescribeMountTargetSecurityGroupsInput) (*request.Request, *efs.DescribeMountTargetSecurityGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMountTargetSecurityGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeMountTargetSecurityGroupsOutput)
	return ret0, ret1
}

// DescribeMountTargetSecurityGroupsRequest indicates an expected call of DescribeMountTargetSecurityGroupsRequest.
func (mr *MockEFSAPIMockRecorder) DescribeMountTargetSecurityGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargetSecurityGroupsRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeMountTargetSecurityGroupsRequest), arg0)
}

// DescribeMountTargetSecurityGroupsWithContext mocks base method.
func (m *MockEFSAPI) DescribeMountTargetSecurityGroupsWithContext(arg0 context.Context, arg1 *efs.DescribeMountTargetSecurityGroupsInput, arg2 ...request.Option) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMountTargetSecurityGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeMountTargetSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMountTargetSecurityGroupsWithContext indicates an expected call of DescribeMountTargetSecurityGroupsWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeMountTargetSecurityGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargetSecurityGroupsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeMountTargetSecurityGroupsWithContext), varargs...)
}

// DescribeMountTargets mocks base method.
func (m *MockEFSAPI) DescribeMountTargets(arg0 *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMountTargets", arg0)
	ret0, _ := ret[0].(*efs.DescribeMountTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMountTargets indicates an expected call of DescribeMountTargets.
func (mr *MockEFSAPIMockRecorder) DescribeMountTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargets", reflect.TypeOf((*MockEFSAPI)(nil).DescribeMountTargets), arg0)
}

// DescribeMountTargetsRequest mocks base method.
func (m *MockEFSAPI) DescribeMountTargetsRequest(arg0 *efs.DescribeMountTargetsInput) (*request.Request, *efs.DescribeMountTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMountTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeMountTargetsOutput)
	return ret0, ret1
}

// DescribeMountTargetsRequest indicates an expected call of DescribeMountTargetsRequest.
func (mr *MockEFSAPIMockRecorder) DescribeMountTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargetsRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeMountTargetsRequest), arg0)
}

// DescribeMountTargetsWithContext mocks base method.
func (m *MockEFSAPI) DescribeMountTargetsWithContext(arg0 context.Context, arg1 *efs.DescribeMountTargetsInput, arg2 ...request.Option) (*efs.DescribeMountTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMountTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeMountTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMountTargetsWithContext indicates an expected call of DescribeMountTargetsWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeMountTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMountTargetsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeMountTargetsWithContext), varargs...)
}

// DescribeReplicationConfigurations mocks base method.
func (m *MockEFSAPI) DescribeReplicationConfigurations(arg0 *efs.DescribeReplicationConfigurationsInput) (*efs.DescribeReplicationConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurations", arg0)
	ret0, _ := ret[0].(*efs.DescribeReplicationConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurations indicates an expected call of DescribeReplicationConfigurations.
func (mr *MockEFSAPIMockRecorder) DescribeReplicationConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurations", reflect.TypeOf((*MockEFSAPI)(nil).DescribeReplicationConfigurations), arg0)
}

// DescribeReplicationConfigurationsRequest mocks base method.
func (m *MockEFSAPI) DescribeReplicationConfigurationsRequest(arg0 *efs.DescribeReplicationConfigurationsInput) (*request.Request, *efs.DescribeReplicationConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeReplicationConfigurationsOutput)
	return ret0, ret1
}

// DescribeReplicationConfigurationsRequest indicates an expected call of DescribeReplicationConfigurationsRequest.
func (mr *MockEFSAPIMockRecorder) DescribeReplicationConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationsRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeReplicationConfigurationsRequest), arg0)
}

// DescribeReplicationConfigurationsWithContext mocks base method.
func (m *MockEFSAPI) DescribeReplicationConfigurationsWithContext(arg0 context.Context, arg1 *efs.DescribeReplicationConfigurationsInput, arg2 ...request.Option) (*efs.DescribeReplicationConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeReplicationConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationsWithContext indicates an expected call of DescribeReplicationConfigurationsWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeReplicationConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeReplicationConfigurationsWithContext), varargs...)
}

// DescribeTags mocks base method.
func (m *MockEFSAPI) DescribeTags(arg0 *efs.DescribeTagsInput) (*efs.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTags", arg0)
	ret0, _ := ret[0].(*efs.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockEFSAPIMockRecorder) DescribeTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockEFSAPI)(nil).DescribeTags), arg0)
}

// DescribeTagsPages mocks base method.
func (m *MockEFSAPI) DescribeTagsPages(arg0 *efs.DescribeTagsInput, arg1 func(*efs.DescribeTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeTagsPages indicates an expected call of DescribeTagsPages.
func (mr *MockEFSAPIMockRecorder) DescribeTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsPages", reflect.TypeOf((*MockEFSAPI)(nil).DescribeTagsPages), arg0, arg1)
}

// DescribeTagsPagesWithContext mocks base method.
func (m *MockEFSAPI) DescribeTagsPagesWithContext(arg0 context.Context, arg1 *efs.DescribeTagsInput, arg2 func(*efs.DescribeTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeTagsPagesWithContext indicates an expected call of DescribeTagsPagesWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsPagesWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeTagsPagesWithContext), varargs...)
}

// DescribeTagsRequest mocks base method.
func (m *MockEFSAPI) DescribeTagsRequest(arg0 *efs.DescribeTagsInput) (*request.Request, *efs.DescribeTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.DescribeTagsOutput)
	return ret0, ret1
}

// DescribeTagsRequest indicates an expected call of DescribeTagsRequest.
func (mr *MockEFSAPIMockRecorder) DescribeTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsRequest", reflect.TypeOf((*MockEFSAPI)(nil).DescribeTagsRequest), arg0)
}

// DescribeTagsWithContext mocks base method.
func (m *MockEFSAPI) DescribeTagsWithContext(arg0 context.Context, arg1 *efs.DescribeTagsInput, arg2 ...request.Option) (*efs.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTagsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTagsWithContext indicates an expected call of DescribeTagsWithContext.
func (mr *MockEFSAPIMockRecorder) DescribeTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).DescribeTagsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockEFSAPI) ListTagsForResource(arg0 *efs.ListTagsForResourceInput) (*efs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*efs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockEFSAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEFSAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method.
func (m *MockEFSAPI) ListTagsForResourcePages(arg0 *efs.ListTagsForResourceInput, arg1 func(*efs.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages.
func (mr *MockEFSAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockEFSAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method.
func (m *MockEFSAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *efs.ListTagsForResourceInput, arg2 func(*efs.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext.
func (mr *MockEFSAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockEFSAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockEFSAPI) ListTagsForResourceRequest(arg0 *efs.ListTagsForResourceInput) (*request.Request, *efs.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockEFSAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockEFSAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockEFSAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *efs.ListTagsForResourceInput, arg2 ...request.Option) (*efs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*efs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockEFSAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockEFSAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ModifyMountTargetSecurityGroups mocks base method.
func (m *MockEFSAPI) ModifyMountTargetSecurityGroups(arg0 *efs.ModifyMountTargetSecurityGroupsInput) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyMountTargetSecurityGroups", arg0)
	ret0, _ := ret[0].(*efs.ModifyMountTargetSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyMountTargetSecurityGroups indicates an expected call of ModifyMountTargetSecurityGroups.
func (mr *MockEFSAPIMockRecorder) ModifyMountTargetSecurityGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMountTargetSecurityGroups", reflect.TypeOf((*MockEFSAPI)(nil).ModifyMountTargetSecurityGroups), arg0)
}

// ModifyMountTargetSecurityGroupsRequest mocks base method.
func (m *MockEFSAPI) ModifyMountTargetSecurityGroupsRequest(arg0 *efs.ModifyMountTargetSecurityGroupsInput) (*request.Request, *efs.ModifyMountTargetSecurityGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyMountTargetSecurityGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.ModifyMountTargetSecurityGroupsOutput)
	return ret0, ret1
}

// ModifyMountTargetSecurityGroupsRequest indicates an expected call of ModifyMountTargetSecurityGroupsRequest.
func (mr *MockEFSAPIMockRecorder) ModifyMountTargetSecurityGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMountTargetSecurityGroupsRequest", reflect.TypeOf((*MockEFSAPI)(nil).ModifyMountTargetSecurityGroupsRequest), arg0)
}

// ModifyMountTargetSecurityGroupsWithContext mocks base method.
func (m *MockEFSAPI) ModifyMountTargetSecurityGroupsWithContext(arg0 context.Context, arg1 *efs.ModifyMountTargetSecurityGroupsInput, arg2 ...request.Option) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyMountTargetSecurityGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*efs.ModifyMountTargetSecurityGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyMountTargetSecurityGroupsWithContext indicates an expected call of ModifyMountTargetSecurityGroupsWithContext.
func (mr *MockEFSAPIMockRecorder) ModifyMountTargetSecurityGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMountTargetSecurityGroupsWithContext", reflect.TypeOf((*MockEFSAPI)(nil).ModifyMountTargetSecurityGroupsWithContext), varargs...)
}

// PutAccountPreferences mocks base method.
func (m *MockEFSAPI) PutAccountPreferences(arg0 *efs.PutAccountPreferencesInput) (*efs.PutAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountPreferences", arg0)
	ret0, _ := ret[0].(*efs.PutAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountPreferences indicates an expected call of PutAccountPreferences.
func (mr *MockEFSAPIMockRecorder) PutAccountPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountPreferences", reflect.TypeOf((*MockEFSAPI)(nil).PutAccountPreferences), arg0)
}

// PutAccountPreferencesRequest mocks base method.
func (m *MockEFSAPI) PutAccountPreferencesRequest(arg0 *efs.PutAccountPreferencesInput) (*request.Request, *efs.PutAccountPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.PutAccountPreferencesOutput)
	return ret0, ret1
}

// PutAccountPreferencesRequest indicates an expected call of PutAccountPreferencesRequest.
func (mr *MockEFSAPIMockRecorder) PutAccountPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountPreferencesRequest", reflect.TypeOf((*MockEFSAPI)(nil).PutAccountPreferencesRequest), arg0)
}

// PutAccountPreferencesWithContext mocks base method.
func (m *MockEFSAPI) PutAccountPreferencesWithContext(arg0 context.Context, arg1 *efs.PutAccountPreferencesInput, arg2 ...request.Option) (*efs.PutAccountPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*efs.PutAccountPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountPreferencesWithContext indicates an expected call of PutAccountPreferencesWithContext.
func (mr *MockEFSAPIMockRecorder) PutAccountPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountPreferencesWithContext", reflect.TypeOf((*MockEFSAPI)(nil).PutAccountPreferencesWithContext), varargs...)
}

// PutBackupPolicy mocks base method.
func (m *MockEFSAPI) PutBackupPolicy(arg0 *efs.PutBackupPolicyInput) (*efs.PutBackupPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupPolicy", arg0)
	ret0, _ := ret[0].(*efs.PutBackupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupPolicy indicates an expected call of PutBackupPolicy.
func (mr *MockEFSAPIMockRecorder) PutBackupPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupPolicy", reflect.TypeOf((*MockEFSAPI)(nil).PutBackupPolicy), arg0)
}

// PutBackupPolicyRequest mocks base method.
func (m *MockEFSAPI) PutBackupPolicyRequest(arg0 *efs.PutBackupPolicyInput) (*request.Request, *efs.PutBackupPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBackupPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.PutBackupPolicyOutput)
	return ret0, ret1
}

// PutBackupPolicyRequest indicates an expected call of PutBackupPolicyRequest.
func (mr *MockEFSAPIMockRecorder) PutBackupPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupPolicyRequest", reflect.TypeOf((*MockEFSAPI)(nil).PutBackupPolicyRequest), arg0)
}

// PutBackupPolicyWithContext mocks base method.
func (m *MockEFSAPI) PutBackupPolicyWithContext(arg0 context.Context, arg1 *efs.PutBackupPolicyInput, arg2 ...request.Option) (*efs.PutBackupPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackupPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*efs.PutBackupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackupPolicyWithContext indicates an expected call of PutBackupPolicyWithContext.
func (mr *MockEFSAPIMockRecorder) PutBackupPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackupPolicyWithContext", reflect.TypeOf((*MockEFSAPI)(nil).PutBackupPolicyWithContext), varargs...)
}

// PutFileSystemPolicy mocks base method.
func (m *MockEFSAPI) PutFileSystemPolicy(arg0 *efs.PutFileSystemPolicyInput) (*efs.PutFileSystemPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileSystemPolicy", arg0)
	ret0, _ := ret[0].(*efs.PutFileSystemPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileSystemPolicy indicates an expected call of PutFileSystemPolicy.
func (mr *MockEFSAPIMockRecorder) PutFileSystemPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileSystemPolicy", reflect.TypeOf((*MockEFSAPI)(nil).PutFileSystemPolicy), arg0)
}

// PutFileSystemPolicyRequest mocks base method.
func (m *MockEFSAPI) PutFileSystemPolicyRequest(arg0 *efs.PutFileSystemPolicyInput) (*request.Request, *efs.PutFileSystemPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileSystemPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.PutFileSystemPolicyOutput)
	return ret0, ret1
}

// PutFileSystemPolicyRequest indicates an expected call of PutFileSystemPolicyRequest.
func (mr *MockEFSAPIMockRecorder) PutFileSystemPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileSystemPolicyRequest", reflect.TypeOf((*MockEFSAPI)(nil).PutFileSystemPolicyRequest), arg0)
}

// PutFileSystemPolicyWithContext mocks base method.
func (m *MockEFSAPI) PutFileSystemPolicyWithContext(arg0 context.Context, arg1 *efs.PutFileSystemPolicyInput, arg2 ...request.Option) (*efs.PutFileSystemPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutFileSystemPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*efs.PutFileSystemPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileSystemPolicyWithContext indicates an expected call of PutFileSystemPolicyWithContext.
func (mr *MockEFSAPIMockRecorder) PutFileSystemPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileSystemPolicyWithContext", reflect.TypeOf((*MockEFSAPI)(nil).PutFileSystemPolicyWithContext), varargs...)
}

// PutLifecycleConfiguration mocks base method.
func (m *MockEFSAPI) PutLifecycleConfiguration(arg0 *efs.PutLifecycleConfigurationInput) (*efs.PutLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLifecycleConfiguration", arg0)
	ret0, _ := ret[0].(*efs.PutLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLifecycleConfiguration indicates an expected call of PutLifecycleConfiguration.
func (mr *MockEFSAPIMockRecorder) PutLifecycleConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLifecycleConfiguration", reflect.TypeOf((*MockEFSAPI)(nil).PutLifecycleConfiguration), arg0)
}

// PutLifecycleConfigurationRequest mocks base method.
func (m *MockEFSAPI) PutLifecycleConfigurationRequest(arg0 *efs.PutLifecycleConfigurationInput) (*request.Request, *efs.PutLifecycleConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLifecycleConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.PutLifecycleConfigurationOutput)
	return ret0, ret1
}

// PutLifecycleConfigurationRequest indicates an expected call of PutLifecycleConfigurationRequest.
func (mr *MockEFSAPIMockRecorder) PutLifecycleConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLifecycleConfigurationRequest", reflect.TypeOf((*MockEFSAPI)(nil).PutLifecycleConfigurationRequest), arg0)
}

// PutLifecycleConfigurationWithContext mocks base method.
func (m *MockEFSAPI) PutLifecycleConfigurationWithContext(arg0 context.Context, arg1 *efs.PutLifecycleConfigurationInput, arg2 ...request.Option) (*efs.PutLifecycleConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLifecycleConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*efs.PutLifecycleConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLifecycleConfigurationWithContext indicates an expected call of PutLifecycleConfigurationWithContext.
func (mr *MockEFSAPIMockRecorder) PutLifecycleConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLifecycleConfigurationWithContext", reflect.TypeOf((*MockEFSAPI)(nil).PutLifecycleConfigurationWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockEFSAPI) TagResource(arg0 *efs.TagResourceInput) (*efs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*efs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockEFSAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockEFSAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockEFSAPI) TagResourceRequest(arg0 *efs.TagResourceInput) (*request.Request, *efs.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockEFSAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockEFSAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockEFSAPI) TagResourceWithContext(arg0 context.Context, arg1 *efs.TagResourceInput, arg2 ...request.Option) (*efs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*efs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockEFSAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockEFSAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockEFSAPI) UntagResource(arg0 *efs.UntagResourceInput) (*efs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*efs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockEFSAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockEFSAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockEFSAPI) UntagResourceRequest(arg0 *efs.UntagResourceInput) (*request.Request, *efs.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockEFSAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockEFSAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockEFSAPI) UntagResourceWithContext(arg0 context.Context, arg1 *efs.UntagResourceInput, arg2 ...request.Option) (*efs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*efs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockEFSAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockEFSAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFileSystem mocks base method.
func (m *MockEFSAPI) UpdateFileSystem(arg0 *efs.UpdateFileSystemInput) (*efs.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystem", arg0)
	ret0, _ := ret[0].(*efs.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystem indicates an expected call of UpdateFileSystem.
func (mr *MockEFSAPIMockRecorder) UpdateFileSystem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystem", reflect.TypeOf((*MockEFSAPI)(nil).UpdateFileSystem), arg0)
}

// UpdateFileSystemRequest mocks base method.
func (m *MockEFSAPI) UpdateFileSystemRequest(arg0 *efs.UpdateFileSystemInput) (*request.Request, *efs.UpdateFileSystemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*efs.UpdateFileSystemOutput)
	return ret0, ret1
}

// UpdateFileSystemRequest indicates an expected call of UpdateFileSystemRequest.
func (mr *MockEFSAPIMockRecorder) UpdateFileSystemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystemRequest", reflect.TypeOf((*MockEFSAPI)(nil).UpdateFileSystemRequest), arg0)
}

// UpdateFileSystemWithContext mocks base method.
func (m *MockEFSAPI) UpdateFileSystemWithContext(arg0 context.Context, arg1 *efs.UpdateFileSystemInput, arg2 ...request.Option) (*efs.UpdateFileSystemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFileSystemWithContext", varargs...)
	ret0, _ := ret[0].(*efs.UpdateFileSystemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFileSystemWithContext indicates an expected call of UpdateFileSystemWithContext.
func (mr *MockEFSAPIMockRecorder) UpdateFileSystemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystemWithContext", reflect.TypeOf((*MockEFSAPI)(nil).UpdateFileSystemWithContext), varargs...)
}

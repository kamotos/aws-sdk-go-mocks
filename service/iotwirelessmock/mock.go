// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotwireless/iotwirelessiface (interfaces: IoTWirelessAPI)

// Package iotwirelessmock is a generated GoMock package.
package iotwirelessmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	iotwireless "github.com/aws/aws-sdk-go/service/iotwireless"
	gomock "github.com/golang/mock/gomock"
)

// MockIoTWirelessAPI is a mock of IoTWirelessAPI interface.
type MockIoTWirelessAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTWirelessAPIMockRecorder
}

// MockIoTWirelessAPIMockRecorder is the mock recorder for MockIoTWirelessAPI.
type MockIoTWirelessAPIMockRecorder struct {
	mock *MockIoTWirelessAPI
}

// NewMockIoTWirelessAPI creates a new mock instance.
func NewMockIoTWirelessAPI(ctrl *gomock.Controller) *MockIoTWirelessAPI {
	mock := &MockIoTWirelessAPI{ctrl: ctrl}
	mock.recorder = &MockIoTWirelessAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoTWirelessAPI) EXPECT() *MockIoTWirelessAPIMockRecorder {
	return m.recorder
}

// AssociateAwsAccountWithPartnerAccount mocks base method.
func (m *MockIoTWirelessAPI) AssociateAwsAccountWithPartnerAccount(arg0 *iotwireless.AssociateAwsAccountWithPartnerAccountInput) (*iotwireless.AssociateAwsAccountWithPartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAwsAccountWithPartnerAccount", arg0)
	ret0, _ := ret[0].(*iotwireless.AssociateAwsAccountWithPartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAwsAccountWithPartnerAccount indicates an expected call of AssociateAwsAccountWithPartnerAccount.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateAwsAccountWithPartnerAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAwsAccountWithPartnerAccount", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateAwsAccountWithPartnerAccount), arg0)
}

// AssociateAwsAccountWithPartnerAccountRequest mocks base method.
func (m *MockIoTWirelessAPI) AssociateAwsAccountWithPartnerAccountRequest(arg0 *iotwireless.AssociateAwsAccountWithPartnerAccountInput) (*request.Request, *iotwireless.AssociateAwsAccountWithPartnerAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAwsAccountWithPartnerAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.AssociateAwsAccountWithPartnerAccountOutput)
	return ret0, ret1
}

// AssociateAwsAccountWithPartnerAccountRequest indicates an expected call of AssociateAwsAccountWithPartnerAccountRequest.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateAwsAccountWithPartnerAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAwsAccountWithPartnerAccountRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateAwsAccountWithPartnerAccountRequest), arg0)
}

// AssociateAwsAccountWithPartnerAccountWithContext mocks base method.
func (m *MockIoTWirelessAPI) AssociateAwsAccountWithPartnerAccountWithContext(arg0 context.Context, arg1 *iotwireless.AssociateAwsAccountWithPartnerAccountInput, arg2 ...request.Option) (*iotwireless.AssociateAwsAccountWithPartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAwsAccountWithPartnerAccountWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.AssociateAwsAccountWithPartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAwsAccountWithPartnerAccountWithContext indicates an expected call of AssociateAwsAccountWithPartnerAccountWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateAwsAccountWithPartnerAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAwsAccountWithPartnerAccountWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateAwsAccountWithPartnerAccountWithContext), varargs...)
}

// AssociateMulticastGroupWithFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) AssociateMulticastGroupWithFuotaTask(arg0 *iotwireless.AssociateMulticastGroupWithFuotaTaskInput) (*iotwireless.AssociateMulticastGroupWithFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMulticastGroupWithFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.AssociateMulticastGroupWithFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMulticastGroupWithFuotaTask indicates an expected call of AssociateMulticastGroupWithFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateMulticastGroupWithFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMulticastGroupWithFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateMulticastGroupWithFuotaTask), arg0)
}

// AssociateMulticastGroupWithFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) AssociateMulticastGroupWithFuotaTaskRequest(arg0 *iotwireless.AssociateMulticastGroupWithFuotaTaskInput) (*request.Request, *iotwireless.AssociateMulticastGroupWithFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMulticastGroupWithFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.AssociateMulticastGroupWithFuotaTaskOutput)
	return ret0, ret1
}

// AssociateMulticastGroupWithFuotaTaskRequest indicates an expected call of AssociateMulticastGroupWithFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateMulticastGroupWithFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMulticastGroupWithFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateMulticastGroupWithFuotaTaskRequest), arg0)
}

// AssociateMulticastGroupWithFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) AssociateMulticastGroupWithFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.AssociateMulticastGroupWithFuotaTaskInput, arg2 ...request.Option) (*iotwireless.AssociateMulticastGroupWithFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMulticastGroupWithFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.AssociateMulticastGroupWithFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMulticastGroupWithFuotaTaskWithContext indicates an expected call of AssociateMulticastGroupWithFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateMulticastGroupWithFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMulticastGroupWithFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateMulticastGroupWithFuotaTaskWithContext), varargs...)
}

// AssociateWirelessDeviceWithFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithFuotaTask(arg0 *iotwireless.AssociateWirelessDeviceWithFuotaTaskInput) (*iotwireless.AssociateWirelessDeviceWithFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessDeviceWithFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessDeviceWithFuotaTask indicates an expected call of AssociateWirelessDeviceWithFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithFuotaTask), arg0)
}

// AssociateWirelessDeviceWithFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithFuotaTaskRequest(arg0 *iotwireless.AssociateWirelessDeviceWithFuotaTaskInput) (*request.Request, *iotwireless.AssociateWirelessDeviceWithFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.AssociateWirelessDeviceWithFuotaTaskOutput)
	return ret0, ret1
}

// AssociateWirelessDeviceWithFuotaTaskRequest indicates an expected call of AssociateWirelessDeviceWithFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithFuotaTaskRequest), arg0)
}

// AssociateWirelessDeviceWithFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.AssociateWirelessDeviceWithFuotaTaskInput, arg2 ...request.Option) (*iotwireless.AssociateWirelessDeviceWithFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessDeviceWithFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessDeviceWithFuotaTaskWithContext indicates an expected call of AssociateWirelessDeviceWithFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithFuotaTaskWithContext), varargs...)
}

// AssociateWirelessDeviceWithMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithMulticastGroup(arg0 *iotwireless.AssociateWirelessDeviceWithMulticastGroupInput) (*iotwireless.AssociateWirelessDeviceWithMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessDeviceWithMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessDeviceWithMulticastGroup indicates an expected call of AssociateWirelessDeviceWithMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithMulticastGroup), arg0)
}

// AssociateWirelessDeviceWithMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithMulticastGroupRequest(arg0 *iotwireless.AssociateWirelessDeviceWithMulticastGroupInput) (*request.Request, *iotwireless.AssociateWirelessDeviceWithMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.AssociateWirelessDeviceWithMulticastGroupOutput)
	return ret0, ret1
}

// AssociateWirelessDeviceWithMulticastGroupRequest indicates an expected call of AssociateWirelessDeviceWithMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithMulticastGroupRequest), arg0)
}

// AssociateWirelessDeviceWithMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.AssociateWirelessDeviceWithMulticastGroupInput, arg2 ...request.Option) (*iotwireless.AssociateWirelessDeviceWithMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessDeviceWithMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessDeviceWithMulticastGroupWithContext indicates an expected call of AssociateWirelessDeviceWithMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithMulticastGroupWithContext), varargs...)
}

// AssociateWirelessDeviceWithThing mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithThing(arg0 *iotwireless.AssociateWirelessDeviceWithThingInput) (*iotwireless.AssociateWirelessDeviceWithThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithThing", arg0)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessDeviceWithThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessDeviceWithThing indicates an expected call of AssociateWirelessDeviceWithThing.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithThing", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithThing), arg0)
}

// AssociateWirelessDeviceWithThingRequest mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithThingRequest(arg0 *iotwireless.AssociateWirelessDeviceWithThingInput) (*request.Request, *iotwireless.AssociateWirelessDeviceWithThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.AssociateWirelessDeviceWithThingOutput)
	return ret0, ret1
}

// AssociateWirelessDeviceWithThingRequest indicates an expected call of AssociateWirelessDeviceWithThingRequest.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithThingRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithThingRequest), arg0)
}

// AssociateWirelessDeviceWithThingWithContext mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessDeviceWithThingWithContext(arg0 context.Context, arg1 *iotwireless.AssociateWirelessDeviceWithThingInput, arg2 ...request.Option) (*iotwireless.AssociateWirelessDeviceWithThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateWirelessDeviceWithThingWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessDeviceWithThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessDeviceWithThingWithContext indicates an expected call of AssociateWirelessDeviceWithThingWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessDeviceWithThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessDeviceWithThingWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessDeviceWithThingWithContext), varargs...)
}

// AssociateWirelessGatewayWithCertificate mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessGatewayWithCertificate(arg0 *iotwireless.AssociateWirelessGatewayWithCertificateInput) (*iotwireless.AssociateWirelessGatewayWithCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessGatewayWithCertificate", arg0)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessGatewayWithCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessGatewayWithCertificate indicates an expected call of AssociateWirelessGatewayWithCertificate.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessGatewayWithCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessGatewayWithCertificate", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessGatewayWithCertificate), arg0)
}

// AssociateWirelessGatewayWithCertificateRequest mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessGatewayWithCertificateRequest(arg0 *iotwireless.AssociateWirelessGatewayWithCertificateInput) (*request.Request, *iotwireless.AssociateWirelessGatewayWithCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessGatewayWithCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.AssociateWirelessGatewayWithCertificateOutput)
	return ret0, ret1
}

// AssociateWirelessGatewayWithCertificateRequest indicates an expected call of AssociateWirelessGatewayWithCertificateRequest.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessGatewayWithCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessGatewayWithCertificateRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessGatewayWithCertificateRequest), arg0)
}

// AssociateWirelessGatewayWithCertificateWithContext mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessGatewayWithCertificateWithContext(arg0 context.Context, arg1 *iotwireless.AssociateWirelessGatewayWithCertificateInput, arg2 ...request.Option) (*iotwireless.AssociateWirelessGatewayWithCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateWirelessGatewayWithCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessGatewayWithCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessGatewayWithCertificateWithContext indicates an expected call of AssociateWirelessGatewayWithCertificateWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessGatewayWithCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessGatewayWithCertificateWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessGatewayWithCertificateWithContext), varargs...)
}

// AssociateWirelessGatewayWithThing mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessGatewayWithThing(arg0 *iotwireless.AssociateWirelessGatewayWithThingInput) (*iotwireless.AssociateWirelessGatewayWithThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessGatewayWithThing", arg0)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessGatewayWithThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessGatewayWithThing indicates an expected call of AssociateWirelessGatewayWithThing.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessGatewayWithThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessGatewayWithThing", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessGatewayWithThing), arg0)
}

// AssociateWirelessGatewayWithThingRequest mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessGatewayWithThingRequest(arg0 *iotwireless.AssociateWirelessGatewayWithThingInput) (*request.Request, *iotwireless.AssociateWirelessGatewayWithThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWirelessGatewayWithThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.AssociateWirelessGatewayWithThingOutput)
	return ret0, ret1
}

// AssociateWirelessGatewayWithThingRequest indicates an expected call of AssociateWirelessGatewayWithThingRequest.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessGatewayWithThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessGatewayWithThingRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessGatewayWithThingRequest), arg0)
}

// AssociateWirelessGatewayWithThingWithContext mocks base method.
func (m *MockIoTWirelessAPI) AssociateWirelessGatewayWithThingWithContext(arg0 context.Context, arg1 *iotwireless.AssociateWirelessGatewayWithThingInput, arg2 ...request.Option) (*iotwireless.AssociateWirelessGatewayWithThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateWirelessGatewayWithThingWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.AssociateWirelessGatewayWithThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWirelessGatewayWithThingWithContext indicates an expected call of AssociateWirelessGatewayWithThingWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) AssociateWirelessGatewayWithThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWirelessGatewayWithThingWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).AssociateWirelessGatewayWithThingWithContext), varargs...)
}

// CancelMulticastGroupSession mocks base method.
func (m *MockIoTWirelessAPI) CancelMulticastGroupSession(arg0 *iotwireless.CancelMulticastGroupSessionInput) (*iotwireless.CancelMulticastGroupSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMulticastGroupSession", arg0)
	ret0, _ := ret[0].(*iotwireless.CancelMulticastGroupSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMulticastGroupSession indicates an expected call of CancelMulticastGroupSession.
func (mr *MockIoTWirelessAPIMockRecorder) CancelMulticastGroupSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMulticastGroupSession", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CancelMulticastGroupSession), arg0)
}

// CancelMulticastGroupSessionRequest mocks base method.
func (m *MockIoTWirelessAPI) CancelMulticastGroupSessionRequest(arg0 *iotwireless.CancelMulticastGroupSessionInput) (*request.Request, *iotwireless.CancelMulticastGroupSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMulticastGroupSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CancelMulticastGroupSessionOutput)
	return ret0, ret1
}

// CancelMulticastGroupSessionRequest indicates an expected call of CancelMulticastGroupSessionRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CancelMulticastGroupSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMulticastGroupSessionRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CancelMulticastGroupSessionRequest), arg0)
}

// CancelMulticastGroupSessionWithContext mocks base method.
func (m *MockIoTWirelessAPI) CancelMulticastGroupSessionWithContext(arg0 context.Context, arg1 *iotwireless.CancelMulticastGroupSessionInput, arg2 ...request.Option) (*iotwireless.CancelMulticastGroupSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMulticastGroupSessionWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CancelMulticastGroupSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMulticastGroupSessionWithContext indicates an expected call of CancelMulticastGroupSessionWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CancelMulticastGroupSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMulticastGroupSessionWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CancelMulticastGroupSessionWithContext), varargs...)
}

// CreateDestination mocks base method.
func (m *MockIoTWirelessAPI) CreateDestination(arg0 *iotwireless.CreateDestinationInput) (*iotwireless.CreateDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDestination", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestination indicates an expected call of CreateDestination.
func (mr *MockIoTWirelessAPIMockRecorder) CreateDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestination", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateDestination), arg0)
}

// CreateDestinationRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateDestinationRequest(arg0 *iotwireless.CreateDestinationInput) (*request.Request, *iotwireless.CreateDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateDestinationOutput)
	return ret0, ret1
}

// CreateDestinationRequest indicates an expected call of CreateDestinationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateDestinationRequest), arg0)
}

// CreateDestinationWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateDestinationWithContext(arg0 context.Context, arg1 *iotwireless.CreateDestinationInput, arg2 ...request.Option) (*iotwireless.CreateDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestinationWithContext indicates an expected call of CreateDestinationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateDestinationWithContext), varargs...)
}

// CreateDeviceProfile mocks base method.
func (m *MockIoTWirelessAPI) CreateDeviceProfile(arg0 *iotwireless.CreateDeviceProfileInput) (*iotwireless.CreateDeviceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceProfile", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateDeviceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceProfile indicates an expected call of CreateDeviceProfile.
func (mr *MockIoTWirelessAPIMockRecorder) CreateDeviceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceProfile", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateDeviceProfile), arg0)
}

// CreateDeviceProfileRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateDeviceProfileRequest(arg0 *iotwireless.CreateDeviceProfileInput) (*request.Request, *iotwireless.CreateDeviceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateDeviceProfileOutput)
	return ret0, ret1
}

// CreateDeviceProfileRequest indicates an expected call of CreateDeviceProfileRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateDeviceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceProfileRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateDeviceProfileRequest), arg0)
}

// CreateDeviceProfileWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateDeviceProfileWithContext(arg0 context.Context, arg1 *iotwireless.CreateDeviceProfileInput, arg2 ...request.Option) (*iotwireless.CreateDeviceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeviceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateDeviceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceProfileWithContext indicates an expected call of CreateDeviceProfileWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateDeviceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceProfileWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateDeviceProfileWithContext), varargs...)
}

// CreateFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) CreateFuotaTask(arg0 *iotwireless.CreateFuotaTaskInput) (*iotwireless.CreateFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFuotaTask indicates an expected call of CreateFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) CreateFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateFuotaTask), arg0)
}

// CreateFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateFuotaTaskRequest(arg0 *iotwireless.CreateFuotaTaskInput) (*request.Request, *iotwireless.CreateFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateFuotaTaskOutput)
	return ret0, ret1
}

// CreateFuotaTaskRequest indicates an expected call of CreateFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateFuotaTaskRequest), arg0)
}

// CreateFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.CreateFuotaTaskInput, arg2 ...request.Option) (*iotwireless.CreateFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFuotaTaskWithContext indicates an expected call of CreateFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateFuotaTaskWithContext), varargs...)
}

// CreateMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) CreateMulticastGroup(arg0 *iotwireless.CreateMulticastGroupInput) (*iotwireless.CreateMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMulticastGroup indicates an expected call of CreateMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) CreateMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateMulticastGroup), arg0)
}

// CreateMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateMulticastGroupRequest(arg0 *iotwireless.CreateMulticastGroupInput) (*request.Request, *iotwireless.CreateMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateMulticastGroupOutput)
	return ret0, ret1
}

// CreateMulticastGroupRequest indicates an expected call of CreateMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateMulticastGroupRequest), arg0)
}

// CreateMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.CreateMulticastGroupInput, arg2 ...request.Option) (*iotwireless.CreateMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMulticastGroupWithContext indicates an expected call of CreateMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateMulticastGroupWithContext), varargs...)
}

// CreateServiceProfile mocks base method.
func (m *MockIoTWirelessAPI) CreateServiceProfile(arg0 *iotwireless.CreateServiceProfileInput) (*iotwireless.CreateServiceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceProfile", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateServiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceProfile indicates an expected call of CreateServiceProfile.
func (mr *MockIoTWirelessAPIMockRecorder) CreateServiceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceProfile", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateServiceProfile), arg0)
}

// CreateServiceProfileRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateServiceProfileRequest(arg0 *iotwireless.CreateServiceProfileInput) (*request.Request, *iotwireless.CreateServiceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateServiceProfileOutput)
	return ret0, ret1
}

// CreateServiceProfileRequest indicates an expected call of CreateServiceProfileRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateServiceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceProfileRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateServiceProfileRequest), arg0)
}

// CreateServiceProfileWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateServiceProfileWithContext(arg0 context.Context, arg1 *iotwireless.CreateServiceProfileInput, arg2 ...request.Option) (*iotwireless.CreateServiceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateServiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceProfileWithContext indicates an expected call of CreateServiceProfileWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateServiceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceProfileWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateServiceProfileWithContext), varargs...)
}

// CreateWirelessDevice mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessDevice(arg0 *iotwireless.CreateWirelessDeviceInput) (*iotwireless.CreateWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessDevice", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessDevice indicates an expected call of CreateWirelessDevice.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessDevice", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessDevice), arg0)
}

// CreateWirelessDeviceRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessDeviceRequest(arg0 *iotwireless.CreateWirelessDeviceInput) (*request.Request, *iotwireless.CreateWirelessDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateWirelessDeviceOutput)
	return ret0, ret1
}

// CreateWirelessDeviceRequest indicates an expected call of CreateWirelessDeviceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessDeviceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessDeviceRequest), arg0)
}

// CreateWirelessDeviceWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessDeviceWithContext(arg0 context.Context, arg1 *iotwireless.CreateWirelessDeviceInput, arg2 ...request.Option) (*iotwireless.CreateWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWirelessDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessDeviceWithContext indicates an expected call of CreateWirelessDeviceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessDeviceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessDeviceWithContext), varargs...)
}

// CreateWirelessGateway mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGateway(arg0 *iotwireless.CreateWirelessGatewayInput) (*iotwireless.CreateWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessGateway", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessGateway indicates an expected call of CreateWirelessGateway.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGateway", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGateway), arg0)
}

// CreateWirelessGatewayRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayRequest(arg0 *iotwireless.CreateWirelessGatewayInput) (*request.Request, *iotwireless.CreateWirelessGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateWirelessGatewayOutput)
	return ret0, ret1
}

// CreateWirelessGatewayRequest indicates an expected call of CreateWirelessGatewayRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayRequest), arg0)
}

// CreateWirelessGatewayTask mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayTask(arg0 *iotwireless.CreateWirelessGatewayTaskInput) (*iotwireless.CreateWirelessGatewayTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessGatewayTask", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessGatewayTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessGatewayTask indicates an expected call of CreateWirelessGatewayTask.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayTask), arg0)
}

// CreateWirelessGatewayTaskDefinition mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayTaskDefinition(arg0 *iotwireless.CreateWirelessGatewayTaskDefinitionInput) (*iotwireless.CreateWirelessGatewayTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessGatewayTaskDefinition", arg0)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessGatewayTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessGatewayTaskDefinition indicates an expected call of CreateWirelessGatewayTaskDefinition.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayTaskDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayTaskDefinition", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayTaskDefinition), arg0)
}

// CreateWirelessGatewayTaskDefinitionRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayTaskDefinitionRequest(arg0 *iotwireless.CreateWirelessGatewayTaskDefinitionInput) (*request.Request, *iotwireless.CreateWirelessGatewayTaskDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessGatewayTaskDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateWirelessGatewayTaskDefinitionOutput)
	return ret0, ret1
}

// CreateWirelessGatewayTaskDefinitionRequest indicates an expected call of CreateWirelessGatewayTaskDefinitionRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayTaskDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayTaskDefinitionRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayTaskDefinitionRequest), arg0)
}

// CreateWirelessGatewayTaskDefinitionWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayTaskDefinitionWithContext(arg0 context.Context, arg1 *iotwireless.CreateWirelessGatewayTaskDefinitionInput, arg2 ...request.Option) (*iotwireless.CreateWirelessGatewayTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWirelessGatewayTaskDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessGatewayTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessGatewayTaskDefinitionWithContext indicates an expected call of CreateWirelessGatewayTaskDefinitionWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayTaskDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayTaskDefinitionWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayTaskDefinitionWithContext), varargs...)
}

// CreateWirelessGatewayTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayTaskRequest(arg0 *iotwireless.CreateWirelessGatewayTaskInput) (*request.Request, *iotwireless.CreateWirelessGatewayTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWirelessGatewayTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.CreateWirelessGatewayTaskOutput)
	return ret0, ret1
}

// CreateWirelessGatewayTaskRequest indicates an expected call of CreateWirelessGatewayTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayTaskRequest), arg0)
}

// CreateWirelessGatewayTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayTaskWithContext(arg0 context.Context, arg1 *iotwireless.CreateWirelessGatewayTaskInput, arg2 ...request.Option) (*iotwireless.CreateWirelessGatewayTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWirelessGatewayTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessGatewayTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessGatewayTaskWithContext indicates an expected call of CreateWirelessGatewayTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayTaskWithContext), varargs...)
}

// CreateWirelessGatewayWithContext mocks base method.
func (m *MockIoTWirelessAPI) CreateWirelessGatewayWithContext(arg0 context.Context, arg1 *iotwireless.CreateWirelessGatewayInput, arg2 ...request.Option) (*iotwireless.CreateWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWirelessGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.CreateWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWirelessGatewayWithContext indicates an expected call of CreateWirelessGatewayWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) CreateWirelessGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWirelessGatewayWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).CreateWirelessGatewayWithContext), varargs...)
}

// DeleteDestination mocks base method.
func (m *MockIoTWirelessAPI) DeleteDestination(arg0 *iotwireless.DeleteDestinationInput) (*iotwireless.DeleteDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDestination", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDestination indicates an expected call of DeleteDestination.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestination", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteDestination), arg0)
}

// DeleteDestinationRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteDestinationRequest(arg0 *iotwireless.DeleteDestinationInput) (*request.Request, *iotwireless.DeleteDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteDestinationOutput)
	return ret0, ret1
}

// DeleteDestinationRequest indicates an expected call of DeleteDestinationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestinationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteDestinationRequest), arg0)
}

// DeleteDestinationWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteDestinationWithContext(arg0 context.Context, arg1 *iotwireless.DeleteDestinationInput, arg2 ...request.Option) (*iotwireless.DeleteDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDestinationWithContext indicates an expected call of DeleteDestinationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestinationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteDestinationWithContext), varargs...)
}

// DeleteDeviceProfile mocks base method.
func (m *MockIoTWirelessAPI) DeleteDeviceProfile(arg0 *iotwireless.DeleteDeviceProfileInput) (*iotwireless.DeleteDeviceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceProfile", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteDeviceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeviceProfile indicates an expected call of DeleteDeviceProfile.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteDeviceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceProfile", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteDeviceProfile), arg0)
}

// DeleteDeviceProfileRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteDeviceProfileRequest(arg0 *iotwireless.DeleteDeviceProfileInput) (*request.Request, *iotwireless.DeleteDeviceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteDeviceProfileOutput)
	return ret0, ret1
}

// DeleteDeviceProfileRequest indicates an expected call of DeleteDeviceProfileRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteDeviceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceProfileRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteDeviceProfileRequest), arg0)
}

// DeleteDeviceProfileWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteDeviceProfileWithContext(arg0 context.Context, arg1 *iotwireless.DeleteDeviceProfileInput, arg2 ...request.Option) (*iotwireless.DeleteDeviceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeviceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteDeviceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeviceProfileWithContext indicates an expected call of DeleteDeviceProfileWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteDeviceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceProfileWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteDeviceProfileWithContext), varargs...)
}

// DeleteFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) DeleteFuotaTask(arg0 *iotwireless.DeleteFuotaTaskInput) (*iotwireless.DeleteFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFuotaTask indicates an expected call of DeleteFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteFuotaTask), arg0)
}

// DeleteFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteFuotaTaskRequest(arg0 *iotwireless.DeleteFuotaTaskInput) (*request.Request, *iotwireless.DeleteFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteFuotaTaskOutput)
	return ret0, ret1
}

// DeleteFuotaTaskRequest indicates an expected call of DeleteFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteFuotaTaskRequest), arg0)
}

// DeleteFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.DeleteFuotaTaskInput, arg2 ...request.Option) (*iotwireless.DeleteFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFuotaTaskWithContext indicates an expected call of DeleteFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteFuotaTaskWithContext), varargs...)
}

// DeleteMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) DeleteMulticastGroup(arg0 *iotwireless.DeleteMulticastGroupInput) (*iotwireless.DeleteMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMulticastGroup indicates an expected call of DeleteMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteMulticastGroup), arg0)
}

// DeleteMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteMulticastGroupRequest(arg0 *iotwireless.DeleteMulticastGroupInput) (*request.Request, *iotwireless.DeleteMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteMulticastGroupOutput)
	return ret0, ret1
}

// DeleteMulticastGroupRequest indicates an expected call of DeleteMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteMulticastGroupRequest), arg0)
}

// DeleteMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.DeleteMulticastGroupInput, arg2 ...request.Option) (*iotwireless.DeleteMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMulticastGroupWithContext indicates an expected call of DeleteMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteMulticastGroupWithContext), varargs...)
}

// DeleteQueuedMessages mocks base method.
func (m *MockIoTWirelessAPI) DeleteQueuedMessages(arg0 *iotwireless.DeleteQueuedMessagesInput) (*iotwireless.DeleteQueuedMessagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueuedMessages", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteQueuedMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueuedMessages indicates an expected call of DeleteQueuedMessages.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteQueuedMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueuedMessages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteQueuedMessages), arg0)
}

// DeleteQueuedMessagesRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteQueuedMessagesRequest(arg0 *iotwireless.DeleteQueuedMessagesInput) (*request.Request, *iotwireless.DeleteQueuedMessagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueuedMessagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteQueuedMessagesOutput)
	return ret0, ret1
}

// DeleteQueuedMessagesRequest indicates an expected call of DeleteQueuedMessagesRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteQueuedMessagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueuedMessagesRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteQueuedMessagesRequest), arg0)
}

// DeleteQueuedMessagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteQueuedMessagesWithContext(arg0 context.Context, arg1 *iotwireless.DeleteQueuedMessagesInput, arg2 ...request.Option) (*iotwireless.DeleteQueuedMessagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQueuedMessagesWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteQueuedMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueuedMessagesWithContext indicates an expected call of DeleteQueuedMessagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteQueuedMessagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueuedMessagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteQueuedMessagesWithContext), varargs...)
}

// DeleteServiceProfile mocks base method.
func (m *MockIoTWirelessAPI) DeleteServiceProfile(arg0 *iotwireless.DeleteServiceProfileInput) (*iotwireless.DeleteServiceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceProfile", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteServiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceProfile indicates an expected call of DeleteServiceProfile.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteServiceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceProfile", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteServiceProfile), arg0)
}

// DeleteServiceProfileRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteServiceProfileRequest(arg0 *iotwireless.DeleteServiceProfileInput) (*request.Request, *iotwireless.DeleteServiceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteServiceProfileOutput)
	return ret0, ret1
}

// DeleteServiceProfileRequest indicates an expected call of DeleteServiceProfileRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteServiceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceProfileRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteServiceProfileRequest), arg0)
}

// DeleteServiceProfileWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteServiceProfileWithContext(arg0 context.Context, arg1 *iotwireless.DeleteServiceProfileInput, arg2 ...request.Option) (*iotwireless.DeleteServiceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteServiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceProfileWithContext indicates an expected call of DeleteServiceProfileWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteServiceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceProfileWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteServiceProfileWithContext), varargs...)
}

// DeleteWirelessDevice mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessDevice(arg0 *iotwireless.DeleteWirelessDeviceInput) (*iotwireless.DeleteWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessDevice", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessDevice indicates an expected call of DeleteWirelessDevice.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessDevice", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessDevice), arg0)
}

// DeleteWirelessDeviceRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessDeviceRequest(arg0 *iotwireless.DeleteWirelessDeviceInput) (*request.Request, *iotwireless.DeleteWirelessDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteWirelessDeviceOutput)
	return ret0, ret1
}

// DeleteWirelessDeviceRequest indicates an expected call of DeleteWirelessDeviceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessDeviceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessDeviceRequest), arg0)
}

// DeleteWirelessDeviceWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessDeviceWithContext(arg0 context.Context, arg1 *iotwireless.DeleteWirelessDeviceInput, arg2 ...request.Option) (*iotwireless.DeleteWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWirelessDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessDeviceWithContext indicates an expected call of DeleteWirelessDeviceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessDeviceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessDeviceWithContext), varargs...)
}

// DeleteWirelessGateway mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGateway(arg0 *iotwireless.DeleteWirelessGatewayInput) (*iotwireless.DeleteWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessGateway", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessGateway indicates an expected call of DeleteWirelessGateway.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGateway", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGateway), arg0)
}

// DeleteWirelessGatewayRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayRequest(arg0 *iotwireless.DeleteWirelessGatewayInput) (*request.Request, *iotwireless.DeleteWirelessGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteWirelessGatewayOutput)
	return ret0, ret1
}

// DeleteWirelessGatewayRequest indicates an expected call of DeleteWirelessGatewayRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayRequest), arg0)
}

// DeleteWirelessGatewayTask mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayTask(arg0 *iotwireless.DeleteWirelessGatewayTaskInput) (*iotwireless.DeleteWirelessGatewayTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayTask", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessGatewayTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessGatewayTask indicates an expected call of DeleteWirelessGatewayTask.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayTask), arg0)
}

// DeleteWirelessGatewayTaskDefinition mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayTaskDefinition(arg0 *iotwireless.DeleteWirelessGatewayTaskDefinitionInput) (*iotwireless.DeleteWirelessGatewayTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayTaskDefinition", arg0)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessGatewayTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessGatewayTaskDefinition indicates an expected call of DeleteWirelessGatewayTaskDefinition.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayTaskDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayTaskDefinition", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayTaskDefinition), arg0)
}

// DeleteWirelessGatewayTaskDefinitionRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayTaskDefinitionRequest(arg0 *iotwireless.DeleteWirelessGatewayTaskDefinitionInput) (*request.Request, *iotwireless.DeleteWirelessGatewayTaskDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayTaskDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteWirelessGatewayTaskDefinitionOutput)
	return ret0, ret1
}

// DeleteWirelessGatewayTaskDefinitionRequest indicates an expected call of DeleteWirelessGatewayTaskDefinitionRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayTaskDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayTaskDefinitionRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayTaskDefinitionRequest), arg0)
}

// DeleteWirelessGatewayTaskDefinitionWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayTaskDefinitionWithContext(arg0 context.Context, arg1 *iotwireless.DeleteWirelessGatewayTaskDefinitionInput, arg2 ...request.Option) (*iotwireless.DeleteWirelessGatewayTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayTaskDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessGatewayTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessGatewayTaskDefinitionWithContext indicates an expected call of DeleteWirelessGatewayTaskDefinitionWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayTaskDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayTaskDefinitionWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayTaskDefinitionWithContext), varargs...)
}

// DeleteWirelessGatewayTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayTaskRequest(arg0 *iotwireless.DeleteWirelessGatewayTaskInput) (*request.Request, *iotwireless.DeleteWirelessGatewayTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DeleteWirelessGatewayTaskOutput)
	return ret0, ret1
}

// DeleteWirelessGatewayTaskRequest indicates an expected call of DeleteWirelessGatewayTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayTaskRequest), arg0)
}

// DeleteWirelessGatewayTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayTaskWithContext(arg0 context.Context, arg1 *iotwireless.DeleteWirelessGatewayTaskInput, arg2 ...request.Option) (*iotwireless.DeleteWirelessGatewayTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessGatewayTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessGatewayTaskWithContext indicates an expected call of DeleteWirelessGatewayTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayTaskWithContext), varargs...)
}

// DeleteWirelessGatewayWithContext mocks base method.
func (m *MockIoTWirelessAPI) DeleteWirelessGatewayWithContext(arg0 context.Context, arg1 *iotwireless.DeleteWirelessGatewayInput, arg2 ...request.Option) (*iotwireless.DeleteWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWirelessGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DeleteWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWirelessGatewayWithContext indicates an expected call of DeleteWirelessGatewayWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DeleteWirelessGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWirelessGatewayWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DeleteWirelessGatewayWithContext), varargs...)
}

// DisassociateAwsAccountFromPartnerAccount mocks base method.
func (m *MockIoTWirelessAPI) DisassociateAwsAccountFromPartnerAccount(arg0 *iotwireless.DisassociateAwsAccountFromPartnerAccountInput) (*iotwireless.DisassociateAwsAccountFromPartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAwsAccountFromPartnerAccount", arg0)
	ret0, _ := ret[0].(*iotwireless.DisassociateAwsAccountFromPartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAwsAccountFromPartnerAccount indicates an expected call of DisassociateAwsAccountFromPartnerAccount.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateAwsAccountFromPartnerAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAwsAccountFromPartnerAccount", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateAwsAccountFromPartnerAccount), arg0)
}

// DisassociateAwsAccountFromPartnerAccountRequest mocks base method.
func (m *MockIoTWirelessAPI) DisassociateAwsAccountFromPartnerAccountRequest(arg0 *iotwireless.DisassociateAwsAccountFromPartnerAccountInput) (*request.Request, *iotwireless.DisassociateAwsAccountFromPartnerAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAwsAccountFromPartnerAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DisassociateAwsAccountFromPartnerAccountOutput)
	return ret0, ret1
}

// DisassociateAwsAccountFromPartnerAccountRequest indicates an expected call of DisassociateAwsAccountFromPartnerAccountRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateAwsAccountFromPartnerAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAwsAccountFromPartnerAccountRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateAwsAccountFromPartnerAccountRequest), arg0)
}

// DisassociateAwsAccountFromPartnerAccountWithContext mocks base method.
func (m *MockIoTWirelessAPI) DisassociateAwsAccountFromPartnerAccountWithContext(arg0 context.Context, arg1 *iotwireless.DisassociateAwsAccountFromPartnerAccountInput, arg2 ...request.Option) (*iotwireless.DisassociateAwsAccountFromPartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateAwsAccountFromPartnerAccountWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DisassociateAwsAccountFromPartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAwsAccountFromPartnerAccountWithContext indicates an expected call of DisassociateAwsAccountFromPartnerAccountWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateAwsAccountFromPartnerAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAwsAccountFromPartnerAccountWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateAwsAccountFromPartnerAccountWithContext), varargs...)
}

// DisassociateMulticastGroupFromFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) DisassociateMulticastGroupFromFuotaTask(arg0 *iotwireless.DisassociateMulticastGroupFromFuotaTaskInput) (*iotwireless.DisassociateMulticastGroupFromFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMulticastGroupFromFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.DisassociateMulticastGroupFromFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMulticastGroupFromFuotaTask indicates an expected call of DisassociateMulticastGroupFromFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateMulticastGroupFromFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMulticastGroupFromFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateMulticastGroupFromFuotaTask), arg0)
}

// DisassociateMulticastGroupFromFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) DisassociateMulticastGroupFromFuotaTaskRequest(arg0 *iotwireless.DisassociateMulticastGroupFromFuotaTaskInput) (*request.Request, *iotwireless.DisassociateMulticastGroupFromFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMulticastGroupFromFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DisassociateMulticastGroupFromFuotaTaskOutput)
	return ret0, ret1
}

// DisassociateMulticastGroupFromFuotaTaskRequest indicates an expected call of DisassociateMulticastGroupFromFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateMulticastGroupFromFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMulticastGroupFromFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateMulticastGroupFromFuotaTaskRequest), arg0)
}

// DisassociateMulticastGroupFromFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) DisassociateMulticastGroupFromFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.DisassociateMulticastGroupFromFuotaTaskInput, arg2 ...request.Option) (*iotwireless.DisassociateMulticastGroupFromFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMulticastGroupFromFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DisassociateMulticastGroupFromFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMulticastGroupFromFuotaTaskWithContext indicates an expected call of DisassociateMulticastGroupFromFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateMulticastGroupFromFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMulticastGroupFromFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateMulticastGroupFromFuotaTaskWithContext), varargs...)
}

// DisassociateWirelessDeviceFromFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromFuotaTask(arg0 *iotwireless.DisassociateWirelessDeviceFromFuotaTaskInput) (*iotwireless.DisassociateWirelessDeviceFromFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessDeviceFromFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromFuotaTask indicates an expected call of DisassociateWirelessDeviceFromFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromFuotaTask), arg0)
}

// DisassociateWirelessDeviceFromFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromFuotaTaskRequest(arg0 *iotwireless.DisassociateWirelessDeviceFromFuotaTaskInput) (*request.Request, *iotwireless.DisassociateWirelessDeviceFromFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DisassociateWirelessDeviceFromFuotaTaskOutput)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromFuotaTaskRequest indicates an expected call of DisassociateWirelessDeviceFromFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromFuotaTaskRequest), arg0)
}

// DisassociateWirelessDeviceFromFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.DisassociateWirelessDeviceFromFuotaTaskInput, arg2 ...request.Option) (*iotwireless.DisassociateWirelessDeviceFromFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessDeviceFromFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromFuotaTaskWithContext indicates an expected call of DisassociateWirelessDeviceFromFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromFuotaTaskWithContext), varargs...)
}

// DisassociateWirelessDeviceFromMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromMulticastGroup(arg0 *iotwireless.DisassociateWirelessDeviceFromMulticastGroupInput) (*iotwireless.DisassociateWirelessDeviceFromMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessDeviceFromMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromMulticastGroup indicates an expected call of DisassociateWirelessDeviceFromMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromMulticastGroup), arg0)
}

// DisassociateWirelessDeviceFromMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromMulticastGroupRequest(arg0 *iotwireless.DisassociateWirelessDeviceFromMulticastGroupInput) (*request.Request, *iotwireless.DisassociateWirelessDeviceFromMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DisassociateWirelessDeviceFromMulticastGroupOutput)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromMulticastGroupRequest indicates an expected call of DisassociateWirelessDeviceFromMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromMulticastGroupRequest), arg0)
}

// DisassociateWirelessDeviceFromMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.DisassociateWirelessDeviceFromMulticastGroupInput, arg2 ...request.Option) (*iotwireless.DisassociateWirelessDeviceFromMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessDeviceFromMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromMulticastGroupWithContext indicates an expected call of DisassociateWirelessDeviceFromMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromMulticastGroupWithContext), varargs...)
}

// DisassociateWirelessDeviceFromThing mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromThing(arg0 *iotwireless.DisassociateWirelessDeviceFromThingInput) (*iotwireless.DisassociateWirelessDeviceFromThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromThing", arg0)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessDeviceFromThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromThing indicates an expected call of DisassociateWirelessDeviceFromThing.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromThing", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromThing), arg0)
}

// DisassociateWirelessDeviceFromThingRequest mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromThingRequest(arg0 *iotwireless.DisassociateWirelessDeviceFromThingInput) (*request.Request, *iotwireless.DisassociateWirelessDeviceFromThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DisassociateWirelessDeviceFromThingOutput)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromThingRequest indicates an expected call of DisassociateWirelessDeviceFromThingRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromThingRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromThingRequest), arg0)
}

// DisassociateWirelessDeviceFromThingWithContext mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessDeviceFromThingWithContext(arg0 context.Context, arg1 *iotwireless.DisassociateWirelessDeviceFromThingInput, arg2 ...request.Option) (*iotwireless.DisassociateWirelessDeviceFromThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateWirelessDeviceFromThingWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessDeviceFromThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessDeviceFromThingWithContext indicates an expected call of DisassociateWirelessDeviceFromThingWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessDeviceFromThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessDeviceFromThingWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessDeviceFromThingWithContext), varargs...)
}

// DisassociateWirelessGatewayFromCertificate mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessGatewayFromCertificate(arg0 *iotwireless.DisassociateWirelessGatewayFromCertificateInput) (*iotwireless.DisassociateWirelessGatewayFromCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessGatewayFromCertificate", arg0)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessGatewayFromCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessGatewayFromCertificate indicates an expected call of DisassociateWirelessGatewayFromCertificate.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessGatewayFromCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessGatewayFromCertificate", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessGatewayFromCertificate), arg0)
}

// DisassociateWirelessGatewayFromCertificateRequest mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessGatewayFromCertificateRequest(arg0 *iotwireless.DisassociateWirelessGatewayFromCertificateInput) (*request.Request, *iotwireless.DisassociateWirelessGatewayFromCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessGatewayFromCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DisassociateWirelessGatewayFromCertificateOutput)
	return ret0, ret1
}

// DisassociateWirelessGatewayFromCertificateRequest indicates an expected call of DisassociateWirelessGatewayFromCertificateRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessGatewayFromCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessGatewayFromCertificateRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessGatewayFromCertificateRequest), arg0)
}

// DisassociateWirelessGatewayFromCertificateWithContext mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessGatewayFromCertificateWithContext(arg0 context.Context, arg1 *iotwireless.DisassociateWirelessGatewayFromCertificateInput, arg2 ...request.Option) (*iotwireless.DisassociateWirelessGatewayFromCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateWirelessGatewayFromCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessGatewayFromCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessGatewayFromCertificateWithContext indicates an expected call of DisassociateWirelessGatewayFromCertificateWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessGatewayFromCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessGatewayFromCertificateWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessGatewayFromCertificateWithContext), varargs...)
}

// DisassociateWirelessGatewayFromThing mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessGatewayFromThing(arg0 *iotwireless.DisassociateWirelessGatewayFromThingInput) (*iotwireless.DisassociateWirelessGatewayFromThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessGatewayFromThing", arg0)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessGatewayFromThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessGatewayFromThing indicates an expected call of DisassociateWirelessGatewayFromThing.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessGatewayFromThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessGatewayFromThing", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessGatewayFromThing), arg0)
}

// DisassociateWirelessGatewayFromThingRequest mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessGatewayFromThingRequest(arg0 *iotwireless.DisassociateWirelessGatewayFromThingInput) (*request.Request, *iotwireless.DisassociateWirelessGatewayFromThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWirelessGatewayFromThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.DisassociateWirelessGatewayFromThingOutput)
	return ret0, ret1
}

// DisassociateWirelessGatewayFromThingRequest indicates an expected call of DisassociateWirelessGatewayFromThingRequest.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessGatewayFromThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessGatewayFromThingRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessGatewayFromThingRequest), arg0)
}

// DisassociateWirelessGatewayFromThingWithContext mocks base method.
func (m *MockIoTWirelessAPI) DisassociateWirelessGatewayFromThingWithContext(arg0 context.Context, arg1 *iotwireless.DisassociateWirelessGatewayFromThingInput, arg2 ...request.Option) (*iotwireless.DisassociateWirelessGatewayFromThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateWirelessGatewayFromThingWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.DisassociateWirelessGatewayFromThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWirelessGatewayFromThingWithContext indicates an expected call of DisassociateWirelessGatewayFromThingWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) DisassociateWirelessGatewayFromThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWirelessGatewayFromThingWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).DisassociateWirelessGatewayFromThingWithContext), varargs...)
}

// GetDestination mocks base method.
func (m *MockIoTWirelessAPI) GetDestination(arg0 *iotwireless.GetDestinationInput) (*iotwireless.GetDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestination", arg0)
	ret0, _ := ret[0].(*iotwireless.GetDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestination indicates an expected call of GetDestination.
func (mr *MockIoTWirelessAPIMockRecorder) GetDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestination", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetDestination), arg0)
}

// GetDestinationRequest mocks base method.
func (m *MockIoTWirelessAPI) GetDestinationRequest(arg0 *iotwireless.GetDestinationInput) (*request.Request, *iotwireless.GetDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetDestinationOutput)
	return ret0, ret1
}

// GetDestinationRequest indicates an expected call of GetDestinationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetDestinationRequest), arg0)
}

// GetDestinationWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetDestinationWithContext(arg0 context.Context, arg1 *iotwireless.GetDestinationInput, arg2 ...request.Option) (*iotwireless.GetDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationWithContext indicates an expected call of GetDestinationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetDestinationWithContext), varargs...)
}

// GetDeviceProfile mocks base method.
func (m *MockIoTWirelessAPI) GetDeviceProfile(arg0 *iotwireless.GetDeviceProfileInput) (*iotwireless.GetDeviceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceProfile", arg0)
	ret0, _ := ret[0].(*iotwireless.GetDeviceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceProfile indicates an expected call of GetDeviceProfile.
func (mr *MockIoTWirelessAPIMockRecorder) GetDeviceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceProfile", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetDeviceProfile), arg0)
}

// GetDeviceProfileRequest mocks base method.
func (m *MockIoTWirelessAPI) GetDeviceProfileRequest(arg0 *iotwireless.GetDeviceProfileInput) (*request.Request, *iotwireless.GetDeviceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetDeviceProfileOutput)
	return ret0, ret1
}

// GetDeviceProfileRequest indicates an expected call of GetDeviceProfileRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetDeviceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceProfileRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetDeviceProfileRequest), arg0)
}

// GetDeviceProfileWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetDeviceProfileWithContext(arg0 context.Context, arg1 *iotwireless.GetDeviceProfileInput, arg2 ...request.Option) (*iotwireless.GetDeviceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeviceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetDeviceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceProfileWithContext indicates an expected call of GetDeviceProfileWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetDeviceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceProfileWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetDeviceProfileWithContext), varargs...)
}

// GetFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) GetFuotaTask(arg0 *iotwireless.GetFuotaTaskInput) (*iotwireless.GetFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.GetFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuotaTask indicates an expected call of GetFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) GetFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetFuotaTask), arg0)
}

// GetFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) GetFuotaTaskRequest(arg0 *iotwireless.GetFuotaTaskInput) (*request.Request, *iotwireless.GetFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetFuotaTaskOutput)
	return ret0, ret1
}

// GetFuotaTaskRequest indicates an expected call of GetFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetFuotaTaskRequest), arg0)
}

// GetFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.GetFuotaTaskInput, arg2 ...request.Option) (*iotwireless.GetFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFuotaTaskWithContext indicates an expected call of GetFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetFuotaTaskWithContext), varargs...)
}

// GetLogLevelsByResourceTypes mocks base method.
func (m *MockIoTWirelessAPI) GetLogLevelsByResourceTypes(arg0 *iotwireless.GetLogLevelsByResourceTypesInput) (*iotwireless.GetLogLevelsByResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogLevelsByResourceTypes", arg0)
	ret0, _ := ret[0].(*iotwireless.GetLogLevelsByResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogLevelsByResourceTypes indicates an expected call of GetLogLevelsByResourceTypes.
func (mr *MockIoTWirelessAPIMockRecorder) GetLogLevelsByResourceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogLevelsByResourceTypes", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetLogLevelsByResourceTypes), arg0)
}

// GetLogLevelsByResourceTypesRequest mocks base method.
func (m *MockIoTWirelessAPI) GetLogLevelsByResourceTypesRequest(arg0 *iotwireless.GetLogLevelsByResourceTypesInput) (*request.Request, *iotwireless.GetLogLevelsByResourceTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogLevelsByResourceTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetLogLevelsByResourceTypesOutput)
	return ret0, ret1
}

// GetLogLevelsByResourceTypesRequest indicates an expected call of GetLogLevelsByResourceTypesRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetLogLevelsByResourceTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogLevelsByResourceTypesRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetLogLevelsByResourceTypesRequest), arg0)
}

// GetLogLevelsByResourceTypesWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetLogLevelsByResourceTypesWithContext(arg0 context.Context, arg1 *iotwireless.GetLogLevelsByResourceTypesInput, arg2 ...request.Option) (*iotwireless.GetLogLevelsByResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogLevelsByResourceTypesWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetLogLevelsByResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogLevelsByResourceTypesWithContext indicates an expected call of GetLogLevelsByResourceTypesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetLogLevelsByResourceTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogLevelsByResourceTypesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetLogLevelsByResourceTypesWithContext), varargs...)
}

// GetMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) GetMulticastGroup(arg0 *iotwireless.GetMulticastGroupInput) (*iotwireless.GetMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.GetMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulticastGroup indicates an expected call of GetMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) GetMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetMulticastGroup), arg0)
}

// GetMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) GetMulticastGroupRequest(arg0 *iotwireless.GetMulticastGroupInput) (*request.Request, *iotwireless.GetMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetMulticastGroupOutput)
	return ret0, ret1
}

// GetMulticastGroupRequest indicates an expected call of GetMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetMulticastGroupRequest), arg0)
}

// GetMulticastGroupSession mocks base method.
func (m *MockIoTWirelessAPI) GetMulticastGroupSession(arg0 *iotwireless.GetMulticastGroupSessionInput) (*iotwireless.GetMulticastGroupSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulticastGroupSession", arg0)
	ret0, _ := ret[0].(*iotwireless.GetMulticastGroupSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulticastGroupSession indicates an expected call of GetMulticastGroupSession.
func (mr *MockIoTWirelessAPIMockRecorder) GetMulticastGroupSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulticastGroupSession", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetMulticastGroupSession), arg0)
}

// GetMulticastGroupSessionRequest mocks base method.
func (m *MockIoTWirelessAPI) GetMulticastGroupSessionRequest(arg0 *iotwireless.GetMulticastGroupSessionInput) (*request.Request, *iotwireless.GetMulticastGroupSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulticastGroupSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetMulticastGroupSessionOutput)
	return ret0, ret1
}

// GetMulticastGroupSessionRequest indicates an expected call of GetMulticastGroupSessionRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetMulticastGroupSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulticastGroupSessionRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetMulticastGroupSessionRequest), arg0)
}

// GetMulticastGroupSessionWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetMulticastGroupSessionWithContext(arg0 context.Context, arg1 *iotwireless.GetMulticastGroupSessionInput, arg2 ...request.Option) (*iotwireless.GetMulticastGroupSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMulticastGroupSessionWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetMulticastGroupSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulticastGroupSessionWithContext indicates an expected call of GetMulticastGroupSessionWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetMulticastGroupSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulticastGroupSessionWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetMulticastGroupSessionWithContext), varargs...)
}

// GetMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.GetMulticastGroupInput, arg2 ...request.Option) (*iotwireless.GetMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulticastGroupWithContext indicates an expected call of GetMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetMulticastGroupWithContext), varargs...)
}

// GetNetworkAnalyzerConfiguration mocks base method.
func (m *MockIoTWirelessAPI) GetNetworkAnalyzerConfiguration(arg0 *iotwireless.GetNetworkAnalyzerConfigurationInput) (*iotwireless.GetNetworkAnalyzerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAnalyzerConfiguration", arg0)
	ret0, _ := ret[0].(*iotwireless.GetNetworkAnalyzerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAnalyzerConfiguration indicates an expected call of GetNetworkAnalyzerConfiguration.
func (mr *MockIoTWirelessAPIMockRecorder) GetNetworkAnalyzerConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAnalyzerConfiguration", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetNetworkAnalyzerConfiguration), arg0)
}

// GetNetworkAnalyzerConfigurationRequest mocks base method.
func (m *MockIoTWirelessAPI) GetNetworkAnalyzerConfigurationRequest(arg0 *iotwireless.GetNetworkAnalyzerConfigurationInput) (*request.Request, *iotwireless.GetNetworkAnalyzerConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAnalyzerConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetNetworkAnalyzerConfigurationOutput)
	return ret0, ret1
}

// GetNetworkAnalyzerConfigurationRequest indicates an expected call of GetNetworkAnalyzerConfigurationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetNetworkAnalyzerConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAnalyzerConfigurationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetNetworkAnalyzerConfigurationRequest), arg0)
}

// GetNetworkAnalyzerConfigurationWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetNetworkAnalyzerConfigurationWithContext(arg0 context.Context, arg1 *iotwireless.GetNetworkAnalyzerConfigurationInput, arg2 ...request.Option) (*iotwireless.GetNetworkAnalyzerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkAnalyzerConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetNetworkAnalyzerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAnalyzerConfigurationWithContext indicates an expected call of GetNetworkAnalyzerConfigurationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetNetworkAnalyzerConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAnalyzerConfigurationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetNetworkAnalyzerConfigurationWithContext), varargs...)
}

// GetPartnerAccount mocks base method.
func (m *MockIoTWirelessAPI) GetPartnerAccount(arg0 *iotwireless.GetPartnerAccountInput) (*iotwireless.GetPartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerAccount", arg0)
	ret0, _ := ret[0].(*iotwireless.GetPartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerAccount indicates an expected call of GetPartnerAccount.
func (mr *MockIoTWirelessAPIMockRecorder) GetPartnerAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerAccount", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetPartnerAccount), arg0)
}

// GetPartnerAccountRequest mocks base method.
func (m *MockIoTWirelessAPI) GetPartnerAccountRequest(arg0 *iotwireless.GetPartnerAccountInput) (*request.Request, *iotwireless.GetPartnerAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetPartnerAccountOutput)
	return ret0, ret1
}

// GetPartnerAccountRequest indicates an expected call of GetPartnerAccountRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetPartnerAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerAccountRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetPartnerAccountRequest), arg0)
}

// GetPartnerAccountWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetPartnerAccountWithContext(arg0 context.Context, arg1 *iotwireless.GetPartnerAccountInput, arg2 ...request.Option) (*iotwireless.GetPartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartnerAccountWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetPartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerAccountWithContext indicates an expected call of GetPartnerAccountWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetPartnerAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerAccountWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetPartnerAccountWithContext), varargs...)
}

// GetResourceEventConfiguration mocks base method.
func (m *MockIoTWirelessAPI) GetResourceEventConfiguration(arg0 *iotwireless.GetResourceEventConfigurationInput) (*iotwireless.GetResourceEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceEventConfiguration", arg0)
	ret0, _ := ret[0].(*iotwireless.GetResourceEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceEventConfiguration indicates an expected call of GetResourceEventConfiguration.
func (mr *MockIoTWirelessAPIMockRecorder) GetResourceEventConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceEventConfiguration", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetResourceEventConfiguration), arg0)
}

// GetResourceEventConfigurationRequest mocks base method.
func (m *MockIoTWirelessAPI) GetResourceEventConfigurationRequest(arg0 *iotwireless.GetResourceEventConfigurationInput) (*request.Request, *iotwireless.GetResourceEventConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceEventConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetResourceEventConfigurationOutput)
	return ret0, ret1
}

// GetResourceEventConfigurationRequest indicates an expected call of GetResourceEventConfigurationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetResourceEventConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceEventConfigurationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetResourceEventConfigurationRequest), arg0)
}

// GetResourceEventConfigurationWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetResourceEventConfigurationWithContext(arg0 context.Context, arg1 *iotwireless.GetResourceEventConfigurationInput, arg2 ...request.Option) (*iotwireless.GetResourceEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceEventConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetResourceEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceEventConfigurationWithContext indicates an expected call of GetResourceEventConfigurationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetResourceEventConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceEventConfigurationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetResourceEventConfigurationWithContext), varargs...)
}

// GetResourceLogLevel mocks base method.
func (m *MockIoTWirelessAPI) GetResourceLogLevel(arg0 *iotwireless.GetResourceLogLevelInput) (*iotwireless.GetResourceLogLevelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceLogLevel", arg0)
	ret0, _ := ret[0].(*iotwireless.GetResourceLogLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceLogLevel indicates an expected call of GetResourceLogLevel.
func (mr *MockIoTWirelessAPIMockRecorder) GetResourceLogLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceLogLevel", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetResourceLogLevel), arg0)
}

// GetResourceLogLevelRequest mocks base method.
func (m *MockIoTWirelessAPI) GetResourceLogLevelRequest(arg0 *iotwireless.GetResourceLogLevelInput) (*request.Request, *iotwireless.GetResourceLogLevelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceLogLevelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetResourceLogLevelOutput)
	return ret0, ret1
}

// GetResourceLogLevelRequest indicates an expected call of GetResourceLogLevelRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetResourceLogLevelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceLogLevelRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetResourceLogLevelRequest), arg0)
}

// GetResourceLogLevelWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetResourceLogLevelWithContext(arg0 context.Context, arg1 *iotwireless.GetResourceLogLevelInput, arg2 ...request.Option) (*iotwireless.GetResourceLogLevelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceLogLevelWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetResourceLogLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceLogLevelWithContext indicates an expected call of GetResourceLogLevelWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetResourceLogLevelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceLogLevelWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetResourceLogLevelWithContext), varargs...)
}

// GetServiceEndpoint mocks base method.
func (m *MockIoTWirelessAPI) GetServiceEndpoint(arg0 *iotwireless.GetServiceEndpointInput) (*iotwireless.GetServiceEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceEndpoint", arg0)
	ret0, _ := ret[0].(*iotwireless.GetServiceEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceEndpoint indicates an expected call of GetServiceEndpoint.
func (mr *MockIoTWirelessAPIMockRecorder) GetServiceEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceEndpoint", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetServiceEndpoint), arg0)
}

// GetServiceEndpointRequest mocks base method.
func (m *MockIoTWirelessAPI) GetServiceEndpointRequest(arg0 *iotwireless.GetServiceEndpointInput) (*request.Request, *iotwireless.GetServiceEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetServiceEndpointOutput)
	return ret0, ret1
}

// GetServiceEndpointRequest indicates an expected call of GetServiceEndpointRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetServiceEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceEndpointRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetServiceEndpointRequest), arg0)
}

// GetServiceEndpointWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetServiceEndpointWithContext(arg0 context.Context, arg1 *iotwireless.GetServiceEndpointInput, arg2 ...request.Option) (*iotwireless.GetServiceEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetServiceEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceEndpointWithContext indicates an expected call of GetServiceEndpointWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetServiceEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceEndpointWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetServiceEndpointWithContext), varargs...)
}

// GetServiceProfile mocks base method.
func (m *MockIoTWirelessAPI) GetServiceProfile(arg0 *iotwireless.GetServiceProfileInput) (*iotwireless.GetServiceProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceProfile", arg0)
	ret0, _ := ret[0].(*iotwireless.GetServiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceProfile indicates an expected call of GetServiceProfile.
func (mr *MockIoTWirelessAPIMockRecorder) GetServiceProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceProfile", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetServiceProfile), arg0)
}

// GetServiceProfileRequest mocks base method.
func (m *MockIoTWirelessAPI) GetServiceProfileRequest(arg0 *iotwireless.GetServiceProfileInput) (*request.Request, *iotwireless.GetServiceProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetServiceProfileOutput)
	return ret0, ret1
}

// GetServiceProfileRequest indicates an expected call of GetServiceProfileRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetServiceProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceProfileRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetServiceProfileRequest), arg0)
}

// GetServiceProfileWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetServiceProfileWithContext(arg0 context.Context, arg1 *iotwireless.GetServiceProfileInput, arg2 ...request.Option) (*iotwireless.GetServiceProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceProfileWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetServiceProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceProfileWithContext indicates an expected call of GetServiceProfileWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetServiceProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceProfileWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetServiceProfileWithContext), varargs...)
}

// GetWirelessDevice mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessDevice(arg0 *iotwireless.GetWirelessDeviceInput) (*iotwireless.GetWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessDevice", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessDevice indicates an expected call of GetWirelessDevice.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessDevice", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessDevice), arg0)
}

// GetWirelessDeviceRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessDeviceRequest(arg0 *iotwireless.GetWirelessDeviceInput) (*request.Request, *iotwireless.GetWirelessDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessDeviceOutput)
	return ret0, ret1
}

// GetWirelessDeviceRequest indicates an expected call of GetWirelessDeviceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessDeviceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessDeviceRequest), arg0)
}

// GetWirelessDeviceStatistics mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessDeviceStatistics(arg0 *iotwireless.GetWirelessDeviceStatisticsInput) (*iotwireless.GetWirelessDeviceStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessDeviceStatistics", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessDeviceStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessDeviceStatistics indicates an expected call of GetWirelessDeviceStatistics.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessDeviceStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessDeviceStatistics", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessDeviceStatistics), arg0)
}

// GetWirelessDeviceStatisticsRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessDeviceStatisticsRequest(arg0 *iotwireless.GetWirelessDeviceStatisticsInput) (*request.Request, *iotwireless.GetWirelessDeviceStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessDeviceStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessDeviceStatisticsOutput)
	return ret0, ret1
}

// GetWirelessDeviceStatisticsRequest indicates an expected call of GetWirelessDeviceStatisticsRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessDeviceStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessDeviceStatisticsRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessDeviceStatisticsRequest), arg0)
}

// GetWirelessDeviceStatisticsWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessDeviceStatisticsWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessDeviceStatisticsInput, arg2 ...request.Option) (*iotwireless.GetWirelessDeviceStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessDeviceStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessDeviceStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessDeviceStatisticsWithContext indicates an expected call of GetWirelessDeviceStatisticsWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessDeviceStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessDeviceStatisticsWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessDeviceStatisticsWithContext), varargs...)
}

// GetWirelessDeviceWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessDeviceWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessDeviceInput, arg2 ...request.Option) (*iotwireless.GetWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessDeviceWithContext indicates an expected call of GetWirelessDeviceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessDeviceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessDeviceWithContext), varargs...)
}

// GetWirelessGateway mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGateway(arg0 *iotwireless.GetWirelessGatewayInput) (*iotwireless.GetWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGateway", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGateway indicates an expected call of GetWirelessGateway.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGateway", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGateway), arg0)
}

// GetWirelessGatewayCertificate mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayCertificate(arg0 *iotwireless.GetWirelessGatewayCertificateInput) (*iotwireless.GetWirelessGatewayCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayCertificate", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayCertificate indicates an expected call of GetWirelessGatewayCertificate.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayCertificate", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayCertificate), arg0)
}

// GetWirelessGatewayCertificateRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayCertificateRequest(arg0 *iotwireless.GetWirelessGatewayCertificateInput) (*request.Request, *iotwireless.GetWirelessGatewayCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessGatewayCertificateOutput)
	return ret0, ret1
}

// GetWirelessGatewayCertificateRequest indicates an expected call of GetWirelessGatewayCertificateRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayCertificateRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayCertificateRequest), arg0)
}

// GetWirelessGatewayCertificateWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayCertificateWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessGatewayCertificateInput, arg2 ...request.Option) (*iotwireless.GetWirelessGatewayCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessGatewayCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayCertificateWithContext indicates an expected call of GetWirelessGatewayCertificateWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayCertificateWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayCertificateWithContext), varargs...)
}

// GetWirelessGatewayFirmwareInformation mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayFirmwareInformation(arg0 *iotwireless.GetWirelessGatewayFirmwareInformationInput) (*iotwireless.GetWirelessGatewayFirmwareInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayFirmwareInformation", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayFirmwareInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayFirmwareInformation indicates an expected call of GetWirelessGatewayFirmwareInformation.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayFirmwareInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayFirmwareInformation", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayFirmwareInformation), arg0)
}

// GetWirelessGatewayFirmwareInformationRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayFirmwareInformationRequest(arg0 *iotwireless.GetWirelessGatewayFirmwareInformationInput) (*request.Request, *iotwireless.GetWirelessGatewayFirmwareInformationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayFirmwareInformationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessGatewayFirmwareInformationOutput)
	return ret0, ret1
}

// GetWirelessGatewayFirmwareInformationRequest indicates an expected call of GetWirelessGatewayFirmwareInformationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayFirmwareInformationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayFirmwareInformationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayFirmwareInformationRequest), arg0)
}

// GetWirelessGatewayFirmwareInformationWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayFirmwareInformationWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessGatewayFirmwareInformationInput, arg2 ...request.Option) (*iotwireless.GetWirelessGatewayFirmwareInformationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessGatewayFirmwareInformationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayFirmwareInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayFirmwareInformationWithContext indicates an expected call of GetWirelessGatewayFirmwareInformationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayFirmwareInformationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayFirmwareInformationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayFirmwareInformationWithContext), varargs...)
}

// GetWirelessGatewayRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayRequest(arg0 *iotwireless.GetWirelessGatewayInput) (*request.Request, *iotwireless.GetWirelessGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessGatewayOutput)
	return ret0, ret1
}

// GetWirelessGatewayRequest indicates an expected call of GetWirelessGatewayRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayRequest), arg0)
}

// GetWirelessGatewayStatistics mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayStatistics(arg0 *iotwireless.GetWirelessGatewayStatisticsInput) (*iotwireless.GetWirelessGatewayStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayStatistics", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayStatistics indicates an expected call of GetWirelessGatewayStatistics.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayStatistics", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayStatistics), arg0)
}

// GetWirelessGatewayStatisticsRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayStatisticsRequest(arg0 *iotwireless.GetWirelessGatewayStatisticsInput) (*request.Request, *iotwireless.GetWirelessGatewayStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessGatewayStatisticsOutput)
	return ret0, ret1
}

// GetWirelessGatewayStatisticsRequest indicates an expected call of GetWirelessGatewayStatisticsRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayStatisticsRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayStatisticsRequest), arg0)
}

// GetWirelessGatewayStatisticsWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayStatisticsWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessGatewayStatisticsInput, arg2 ...request.Option) (*iotwireless.GetWirelessGatewayStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessGatewayStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayStatisticsWithContext indicates an expected call of GetWirelessGatewayStatisticsWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayStatisticsWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayStatisticsWithContext), varargs...)
}

// GetWirelessGatewayTask mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayTask(arg0 *iotwireless.GetWirelessGatewayTaskInput) (*iotwireless.GetWirelessGatewayTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayTask", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayTask indicates an expected call of GetWirelessGatewayTask.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayTask), arg0)
}

// GetWirelessGatewayTaskDefinition mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayTaskDefinition(arg0 *iotwireless.GetWirelessGatewayTaskDefinitionInput) (*iotwireless.GetWirelessGatewayTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayTaskDefinition", arg0)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayTaskDefinition indicates an expected call of GetWirelessGatewayTaskDefinition.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayTaskDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayTaskDefinition", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayTaskDefinition), arg0)
}

// GetWirelessGatewayTaskDefinitionRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayTaskDefinitionRequest(arg0 *iotwireless.GetWirelessGatewayTaskDefinitionInput) (*request.Request, *iotwireless.GetWirelessGatewayTaskDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayTaskDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessGatewayTaskDefinitionOutput)
	return ret0, ret1
}

// GetWirelessGatewayTaskDefinitionRequest indicates an expected call of GetWirelessGatewayTaskDefinitionRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayTaskDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayTaskDefinitionRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayTaskDefinitionRequest), arg0)
}

// GetWirelessGatewayTaskDefinitionWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayTaskDefinitionWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessGatewayTaskDefinitionInput, arg2 ...request.Option) (*iotwireless.GetWirelessGatewayTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessGatewayTaskDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayTaskDefinitionWithContext indicates an expected call of GetWirelessGatewayTaskDefinitionWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayTaskDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayTaskDefinitionWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayTaskDefinitionWithContext), varargs...)
}

// GetWirelessGatewayTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayTaskRequest(arg0 *iotwireless.GetWirelessGatewayTaskInput) (*request.Request, *iotwireless.GetWirelessGatewayTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWirelessGatewayTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.GetWirelessGatewayTaskOutput)
	return ret0, ret1
}

// GetWirelessGatewayTaskRequest indicates an expected call of GetWirelessGatewayTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayTaskRequest), arg0)
}

// GetWirelessGatewayTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayTaskWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessGatewayTaskInput, arg2 ...request.Option) (*iotwireless.GetWirelessGatewayTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessGatewayTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayTaskWithContext indicates an expected call of GetWirelessGatewayTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayTaskWithContext), varargs...)
}

// GetWirelessGatewayWithContext mocks base method.
func (m *MockIoTWirelessAPI) GetWirelessGatewayWithContext(arg0 context.Context, arg1 *iotwireless.GetWirelessGatewayInput, arg2 ...request.Option) (*iotwireless.GetWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWirelessGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.GetWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWirelessGatewayWithContext indicates an expected call of GetWirelessGatewayWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) GetWirelessGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWirelessGatewayWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).GetWirelessGatewayWithContext), varargs...)
}

// ListDestinations mocks base method.
func (m *MockIoTWirelessAPI) ListDestinations(arg0 *iotwireless.ListDestinationsInput) (*iotwireless.ListDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDestinations", arg0)
	ret0, _ := ret[0].(*iotwireless.ListDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDestinations indicates an expected call of ListDestinations.
func (mr *MockIoTWirelessAPIMockRecorder) ListDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinations", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDestinations), arg0)
}

// ListDestinationsPages mocks base method.
func (m *MockIoTWirelessAPI) ListDestinationsPages(arg0 *iotwireless.ListDestinationsInput, arg1 func(*iotwireless.ListDestinationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDestinationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDestinationsPages indicates an expected call of ListDestinationsPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListDestinationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDestinationsPages), arg0, arg1)
}

// ListDestinationsPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListDestinationsPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListDestinationsInput, arg2 func(*iotwireless.ListDestinationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDestinationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDestinationsPagesWithContext indicates an expected call of ListDestinationsPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListDestinationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDestinationsPagesWithContext), varargs...)
}

// ListDestinationsRequest mocks base method.
func (m *MockIoTWirelessAPI) ListDestinationsRequest(arg0 *iotwireless.ListDestinationsInput) (*request.Request, *iotwireless.ListDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListDestinationsOutput)
	return ret0, ret1
}

// ListDestinationsRequest indicates an expected call of ListDestinationsRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDestinationsRequest), arg0)
}

// ListDestinationsWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListDestinationsWithContext(arg0 context.Context, arg1 *iotwireless.ListDestinationsInput, arg2 ...request.Option) (*iotwireless.ListDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDestinationsWithContext indicates an expected call of ListDestinationsWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationsWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDestinationsWithContext), varargs...)
}

// ListDeviceProfiles mocks base method.
func (m *MockIoTWirelessAPI) ListDeviceProfiles(arg0 *iotwireless.ListDeviceProfilesInput) (*iotwireless.ListDeviceProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceProfiles", arg0)
	ret0, _ := ret[0].(*iotwireless.ListDeviceProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeviceProfiles indicates an expected call of ListDeviceProfiles.
func (mr *MockIoTWirelessAPIMockRecorder) ListDeviceProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceProfiles", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDeviceProfiles), arg0)
}

// ListDeviceProfilesPages mocks base method.
func (m *MockIoTWirelessAPI) ListDeviceProfilesPages(arg0 *iotwireless.ListDeviceProfilesInput, arg1 func(*iotwireless.ListDeviceProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeviceProfilesPages indicates an expected call of ListDeviceProfilesPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListDeviceProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceProfilesPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDeviceProfilesPages), arg0, arg1)
}

// ListDeviceProfilesPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListDeviceProfilesPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListDeviceProfilesInput, arg2 func(*iotwireless.ListDeviceProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeviceProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeviceProfilesPagesWithContext indicates an expected call of ListDeviceProfilesPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListDeviceProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceProfilesPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDeviceProfilesPagesWithContext), varargs...)
}

// ListDeviceProfilesRequest mocks base method.
func (m *MockIoTWirelessAPI) ListDeviceProfilesRequest(arg0 *iotwireless.ListDeviceProfilesInput) (*request.Request, *iotwireless.ListDeviceProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListDeviceProfilesOutput)
	return ret0, ret1
}

// ListDeviceProfilesRequest indicates an expected call of ListDeviceProfilesRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListDeviceProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceProfilesRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDeviceProfilesRequest), arg0)
}

// ListDeviceProfilesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListDeviceProfilesWithContext(arg0 context.Context, arg1 *iotwireless.ListDeviceProfilesInput, arg2 ...request.Option) (*iotwireless.ListDeviceProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeviceProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListDeviceProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeviceProfilesWithContext indicates an expected call of ListDeviceProfilesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListDeviceProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceProfilesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListDeviceProfilesWithContext), varargs...)
}

// ListFuotaTasks mocks base method.
func (m *MockIoTWirelessAPI) ListFuotaTasks(arg0 *iotwireless.ListFuotaTasksInput) (*iotwireless.ListFuotaTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFuotaTasks", arg0)
	ret0, _ := ret[0].(*iotwireless.ListFuotaTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFuotaTasks indicates an expected call of ListFuotaTasks.
func (mr *MockIoTWirelessAPIMockRecorder) ListFuotaTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFuotaTasks", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListFuotaTasks), arg0)
}

// ListFuotaTasksPages mocks base method.
func (m *MockIoTWirelessAPI) ListFuotaTasksPages(arg0 *iotwireless.ListFuotaTasksInput, arg1 func(*iotwireless.ListFuotaTasksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFuotaTasksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFuotaTasksPages indicates an expected call of ListFuotaTasksPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListFuotaTasksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFuotaTasksPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListFuotaTasksPages), arg0, arg1)
}

// ListFuotaTasksPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListFuotaTasksPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListFuotaTasksInput, arg2 func(*iotwireless.ListFuotaTasksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFuotaTasksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFuotaTasksPagesWithContext indicates an expected call of ListFuotaTasksPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListFuotaTasksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFuotaTasksPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListFuotaTasksPagesWithContext), varargs...)
}

// ListFuotaTasksRequest mocks base method.
func (m *MockIoTWirelessAPI) ListFuotaTasksRequest(arg0 *iotwireless.ListFuotaTasksInput) (*request.Request, *iotwireless.ListFuotaTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFuotaTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListFuotaTasksOutput)
	return ret0, ret1
}

// ListFuotaTasksRequest indicates an expected call of ListFuotaTasksRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListFuotaTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFuotaTasksRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListFuotaTasksRequest), arg0)
}

// ListFuotaTasksWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListFuotaTasksWithContext(arg0 context.Context, arg1 *iotwireless.ListFuotaTasksInput, arg2 ...request.Option) (*iotwireless.ListFuotaTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFuotaTasksWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListFuotaTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFuotaTasksWithContext indicates an expected call of ListFuotaTasksWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListFuotaTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFuotaTasksWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListFuotaTasksWithContext), varargs...)
}

// ListMulticastGroups mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroups(arg0 *iotwireless.ListMulticastGroupsInput) (*iotwireless.ListMulticastGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMulticastGroups", arg0)
	ret0, _ := ret[0].(*iotwireless.ListMulticastGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMulticastGroups indicates an expected call of ListMulticastGroups.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroups", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroups), arg0)
}

// ListMulticastGroupsByFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsByFuotaTask(arg0 *iotwireless.ListMulticastGroupsByFuotaTaskInput) (*iotwireless.ListMulticastGroupsByFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMulticastGroupsByFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.ListMulticastGroupsByFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMulticastGroupsByFuotaTask indicates an expected call of ListMulticastGroupsByFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsByFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsByFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsByFuotaTask), arg0)
}

// ListMulticastGroupsByFuotaTaskPages mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsByFuotaTaskPages(arg0 *iotwireless.ListMulticastGroupsByFuotaTaskInput, arg1 func(*iotwireless.ListMulticastGroupsByFuotaTaskOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMulticastGroupsByFuotaTaskPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMulticastGroupsByFuotaTaskPages indicates an expected call of ListMulticastGroupsByFuotaTaskPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsByFuotaTaskPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsByFuotaTaskPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsByFuotaTaskPages), arg0, arg1)
}

// ListMulticastGroupsByFuotaTaskPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsByFuotaTaskPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListMulticastGroupsByFuotaTaskInput, arg2 func(*iotwireless.ListMulticastGroupsByFuotaTaskOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMulticastGroupsByFuotaTaskPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMulticastGroupsByFuotaTaskPagesWithContext indicates an expected call of ListMulticastGroupsByFuotaTaskPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsByFuotaTaskPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsByFuotaTaskPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsByFuotaTaskPagesWithContext), varargs...)
}

// ListMulticastGroupsByFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsByFuotaTaskRequest(arg0 *iotwireless.ListMulticastGroupsByFuotaTaskInput) (*request.Request, *iotwireless.ListMulticastGroupsByFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMulticastGroupsByFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListMulticastGroupsByFuotaTaskOutput)
	return ret0, ret1
}

// ListMulticastGroupsByFuotaTaskRequest indicates an expected call of ListMulticastGroupsByFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsByFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsByFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsByFuotaTaskRequest), arg0)
}

// ListMulticastGroupsByFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsByFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.ListMulticastGroupsByFuotaTaskInput, arg2 ...request.Option) (*iotwireless.ListMulticastGroupsByFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMulticastGroupsByFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListMulticastGroupsByFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMulticastGroupsByFuotaTaskWithContext indicates an expected call of ListMulticastGroupsByFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsByFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsByFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsByFuotaTaskWithContext), varargs...)
}

// ListMulticastGroupsPages mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsPages(arg0 *iotwireless.ListMulticastGroupsInput, arg1 func(*iotwireless.ListMulticastGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMulticastGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMulticastGroupsPages indicates an expected call of ListMulticastGroupsPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsPages), arg0, arg1)
}

// ListMulticastGroupsPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListMulticastGroupsInput, arg2 func(*iotwireless.ListMulticastGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMulticastGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMulticastGroupsPagesWithContext indicates an expected call of ListMulticastGroupsPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsPagesWithContext), varargs...)
}

// ListMulticastGroupsRequest mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsRequest(arg0 *iotwireless.ListMulticastGroupsInput) (*request.Request, *iotwireless.ListMulticastGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMulticastGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListMulticastGroupsOutput)
	return ret0, ret1
}

// ListMulticastGroupsRequest indicates an expected call of ListMulticastGroupsRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsRequest), arg0)
}

// ListMulticastGroupsWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListMulticastGroupsWithContext(arg0 context.Context, arg1 *iotwireless.ListMulticastGroupsInput, arg2 ...request.Option) (*iotwireless.ListMulticastGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMulticastGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListMulticastGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMulticastGroupsWithContext indicates an expected call of ListMulticastGroupsWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListMulticastGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMulticastGroupsWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListMulticastGroupsWithContext), varargs...)
}

// ListPartnerAccounts mocks base method.
func (m *MockIoTWirelessAPI) ListPartnerAccounts(arg0 *iotwireless.ListPartnerAccountsInput) (*iotwireless.ListPartnerAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerAccounts", arg0)
	ret0, _ := ret[0].(*iotwireless.ListPartnerAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerAccounts indicates an expected call of ListPartnerAccounts.
func (mr *MockIoTWirelessAPIMockRecorder) ListPartnerAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerAccounts", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListPartnerAccounts), arg0)
}

// ListPartnerAccountsRequest mocks base method.
func (m *MockIoTWirelessAPI) ListPartnerAccountsRequest(arg0 *iotwireless.ListPartnerAccountsInput) (*request.Request, *iotwireless.ListPartnerAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListPartnerAccountsOutput)
	return ret0, ret1
}

// ListPartnerAccountsRequest indicates an expected call of ListPartnerAccountsRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListPartnerAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerAccountsRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListPartnerAccountsRequest), arg0)
}

// ListPartnerAccountsWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListPartnerAccountsWithContext(arg0 context.Context, arg1 *iotwireless.ListPartnerAccountsInput, arg2 ...request.Option) (*iotwireless.ListPartnerAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartnerAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListPartnerAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerAccountsWithContext indicates an expected call of ListPartnerAccountsWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListPartnerAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerAccountsWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListPartnerAccountsWithContext), varargs...)
}

// ListQueuedMessages mocks base method.
func (m *MockIoTWirelessAPI) ListQueuedMessages(arg0 *iotwireless.ListQueuedMessagesInput) (*iotwireless.ListQueuedMessagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuedMessages", arg0)
	ret0, _ := ret[0].(*iotwireless.ListQueuedMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueuedMessages indicates an expected call of ListQueuedMessages.
func (mr *MockIoTWirelessAPIMockRecorder) ListQueuedMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuedMessages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListQueuedMessages), arg0)
}

// ListQueuedMessagesPages mocks base method.
func (m *MockIoTWirelessAPI) ListQueuedMessagesPages(arg0 *iotwireless.ListQueuedMessagesInput, arg1 func(*iotwireless.ListQueuedMessagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuedMessagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuedMessagesPages indicates an expected call of ListQueuedMessagesPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListQueuedMessagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuedMessagesPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListQueuedMessagesPages), arg0, arg1)
}

// ListQueuedMessagesPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListQueuedMessagesPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListQueuedMessagesInput, arg2 func(*iotwireless.ListQueuedMessagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuedMessagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuedMessagesPagesWithContext indicates an expected call of ListQueuedMessagesPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListQueuedMessagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuedMessagesPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListQueuedMessagesPagesWithContext), varargs...)
}

// ListQueuedMessagesRequest mocks base method.
func (m *MockIoTWirelessAPI) ListQueuedMessagesRequest(arg0 *iotwireless.ListQueuedMessagesInput) (*request.Request, *iotwireless.ListQueuedMessagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuedMessagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListQueuedMessagesOutput)
	return ret0, ret1
}

// ListQueuedMessagesRequest indicates an expected call of ListQueuedMessagesRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListQueuedMessagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuedMessagesRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListQueuedMessagesRequest), arg0)
}

// ListQueuedMessagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListQueuedMessagesWithContext(arg0 context.Context, arg1 *iotwireless.ListQueuedMessagesInput, arg2 ...request.Option) (*iotwireless.ListQueuedMessagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuedMessagesWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListQueuedMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueuedMessagesWithContext indicates an expected call of ListQueuedMessagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListQueuedMessagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuedMessagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListQueuedMessagesWithContext), varargs...)
}

// ListServiceProfiles mocks base method.
func (m *MockIoTWirelessAPI) ListServiceProfiles(arg0 *iotwireless.ListServiceProfilesInput) (*iotwireless.ListServiceProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceProfiles", arg0)
	ret0, _ := ret[0].(*iotwireless.ListServiceProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceProfiles indicates an expected call of ListServiceProfiles.
func (mr *MockIoTWirelessAPIMockRecorder) ListServiceProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceProfiles", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListServiceProfiles), arg0)
}

// ListServiceProfilesPages mocks base method.
func (m *MockIoTWirelessAPI) ListServiceProfilesPages(arg0 *iotwireless.ListServiceProfilesInput, arg1 func(*iotwireless.ListServiceProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceProfilesPages indicates an expected call of ListServiceProfilesPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListServiceProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceProfilesPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListServiceProfilesPages), arg0, arg1)
}

// ListServiceProfilesPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListServiceProfilesPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListServiceProfilesInput, arg2 func(*iotwireless.ListServiceProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServiceProfilesPagesWithContext indicates an expected call of ListServiceProfilesPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListServiceProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceProfilesPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListServiceProfilesPagesWithContext), varargs...)
}

// ListServiceProfilesRequest mocks base method.
func (m *MockIoTWirelessAPI) ListServiceProfilesRequest(arg0 *iotwireless.ListServiceProfilesInput) (*request.Request, *iotwireless.ListServiceProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListServiceProfilesOutput)
	return ret0, ret1
}

// ListServiceProfilesRequest indicates an expected call of ListServiceProfilesRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListServiceProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceProfilesRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListServiceProfilesRequest), arg0)
}

// ListServiceProfilesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListServiceProfilesWithContext(arg0 context.Context, arg1 *iotwireless.ListServiceProfilesInput, arg2 ...request.Option) (*iotwireless.ListServiceProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServiceProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListServiceProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceProfilesWithContext indicates an expected call of ListServiceProfilesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListServiceProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceProfilesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListServiceProfilesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockIoTWirelessAPI) ListTagsForResource(arg0 *iotwireless.ListTagsForResourceInput) (*iotwireless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*iotwireless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockIoTWirelessAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockIoTWirelessAPI) ListTagsForResourceRequest(arg0 *iotwireless.ListTagsForResourceInput) (*request.Request, *iotwireless.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *iotwireless.ListTagsForResourceInput, arg2 ...request.Option) (*iotwireless.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWirelessDevices mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessDevices(arg0 *iotwireless.ListWirelessDevicesInput) (*iotwireless.ListWirelessDevicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessDevices", arg0)
	ret0, _ := ret[0].(*iotwireless.ListWirelessDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWirelessDevices indicates an expected call of ListWirelessDevices.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessDevices", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessDevices), arg0)
}

// ListWirelessDevicesPages mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessDevicesPages(arg0 *iotwireless.ListWirelessDevicesInput, arg1 func(*iotwireless.ListWirelessDevicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessDevicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWirelessDevicesPages indicates an expected call of ListWirelessDevicesPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessDevicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessDevicesPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessDevicesPages), arg0, arg1)
}

// ListWirelessDevicesPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessDevicesPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListWirelessDevicesInput, arg2 func(*iotwireless.ListWirelessDevicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWirelessDevicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWirelessDevicesPagesWithContext indicates an expected call of ListWirelessDevicesPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessDevicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessDevicesPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessDevicesPagesWithContext), varargs...)
}

// ListWirelessDevicesRequest mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessDevicesRequest(arg0 *iotwireless.ListWirelessDevicesInput) (*request.Request, *iotwireless.ListWirelessDevicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessDevicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListWirelessDevicesOutput)
	return ret0, ret1
}

// ListWirelessDevicesRequest indicates an expected call of ListWirelessDevicesRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessDevicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessDevicesRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessDevicesRequest), arg0)
}

// ListWirelessDevicesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessDevicesWithContext(arg0 context.Context, arg1 *iotwireless.ListWirelessDevicesInput, arg2 ...request.Option) (*iotwireless.ListWirelessDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWirelessDevicesWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListWirelessDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWirelessDevicesWithContext indicates an expected call of ListWirelessDevicesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessDevicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessDevicesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessDevicesWithContext), varargs...)
}

// ListWirelessGatewayTaskDefinitions mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGatewayTaskDefinitions(arg0 *iotwireless.ListWirelessGatewayTaskDefinitionsInput) (*iotwireless.ListWirelessGatewayTaskDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessGatewayTaskDefinitions", arg0)
	ret0, _ := ret[0].(*iotwireless.ListWirelessGatewayTaskDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWirelessGatewayTaskDefinitions indicates an expected call of ListWirelessGatewayTaskDefinitions.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGatewayTaskDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGatewayTaskDefinitions", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGatewayTaskDefinitions), arg0)
}

// ListWirelessGatewayTaskDefinitionsRequest mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGatewayTaskDefinitionsRequest(arg0 *iotwireless.ListWirelessGatewayTaskDefinitionsInput) (*request.Request, *iotwireless.ListWirelessGatewayTaskDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessGatewayTaskDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListWirelessGatewayTaskDefinitionsOutput)
	return ret0, ret1
}

// ListWirelessGatewayTaskDefinitionsRequest indicates an expected call of ListWirelessGatewayTaskDefinitionsRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGatewayTaskDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGatewayTaskDefinitionsRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGatewayTaskDefinitionsRequest), arg0)
}

// ListWirelessGatewayTaskDefinitionsWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGatewayTaskDefinitionsWithContext(arg0 context.Context, arg1 *iotwireless.ListWirelessGatewayTaskDefinitionsInput, arg2 ...request.Option) (*iotwireless.ListWirelessGatewayTaskDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWirelessGatewayTaskDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListWirelessGatewayTaskDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWirelessGatewayTaskDefinitionsWithContext indicates an expected call of ListWirelessGatewayTaskDefinitionsWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGatewayTaskDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGatewayTaskDefinitionsWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGatewayTaskDefinitionsWithContext), varargs...)
}

// ListWirelessGateways mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGateways(arg0 *iotwireless.ListWirelessGatewaysInput) (*iotwireless.ListWirelessGatewaysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessGateways", arg0)
	ret0, _ := ret[0].(*iotwireless.ListWirelessGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWirelessGateways indicates an expected call of ListWirelessGateways.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGateways", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGateways), arg0)
}

// ListWirelessGatewaysPages mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGatewaysPages(arg0 *iotwireless.ListWirelessGatewaysInput, arg1 func(*iotwireless.ListWirelessGatewaysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessGatewaysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWirelessGatewaysPages indicates an expected call of ListWirelessGatewaysPages.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGatewaysPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGatewaysPages", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGatewaysPages), arg0, arg1)
}

// ListWirelessGatewaysPagesWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGatewaysPagesWithContext(arg0 context.Context, arg1 *iotwireless.ListWirelessGatewaysInput, arg2 func(*iotwireless.ListWirelessGatewaysOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWirelessGatewaysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWirelessGatewaysPagesWithContext indicates an expected call of ListWirelessGatewaysPagesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGatewaysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGatewaysPagesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGatewaysPagesWithContext), varargs...)
}

// ListWirelessGatewaysRequest mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGatewaysRequest(arg0 *iotwireless.ListWirelessGatewaysInput) (*request.Request, *iotwireless.ListWirelessGatewaysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWirelessGatewaysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ListWirelessGatewaysOutput)
	return ret0, ret1
}

// ListWirelessGatewaysRequest indicates an expected call of ListWirelessGatewaysRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGatewaysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGatewaysRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGatewaysRequest), arg0)
}

// ListWirelessGatewaysWithContext mocks base method.
func (m *MockIoTWirelessAPI) ListWirelessGatewaysWithContext(arg0 context.Context, arg1 *iotwireless.ListWirelessGatewaysInput, arg2 ...request.Option) (*iotwireless.ListWirelessGatewaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWirelessGatewaysWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ListWirelessGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWirelessGatewaysWithContext indicates an expected call of ListWirelessGatewaysWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ListWirelessGatewaysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWirelessGatewaysWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ListWirelessGatewaysWithContext), varargs...)
}

// PutResourceLogLevel mocks base method.
func (m *MockIoTWirelessAPI) PutResourceLogLevel(arg0 *iotwireless.PutResourceLogLevelInput) (*iotwireless.PutResourceLogLevelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourceLogLevel", arg0)
	ret0, _ := ret[0].(*iotwireless.PutResourceLogLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourceLogLevel indicates an expected call of PutResourceLogLevel.
func (mr *MockIoTWirelessAPIMockRecorder) PutResourceLogLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourceLogLevel", reflect.TypeOf((*MockIoTWirelessAPI)(nil).PutResourceLogLevel), arg0)
}

// PutResourceLogLevelRequest mocks base method.
func (m *MockIoTWirelessAPI) PutResourceLogLevelRequest(arg0 *iotwireless.PutResourceLogLevelInput) (*request.Request, *iotwireless.PutResourceLogLevelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourceLogLevelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.PutResourceLogLevelOutput)
	return ret0, ret1
}

// PutResourceLogLevelRequest indicates an expected call of PutResourceLogLevelRequest.
func (mr *MockIoTWirelessAPIMockRecorder) PutResourceLogLevelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourceLogLevelRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).PutResourceLogLevelRequest), arg0)
}

// PutResourceLogLevelWithContext mocks base method.
func (m *MockIoTWirelessAPI) PutResourceLogLevelWithContext(arg0 context.Context, arg1 *iotwireless.PutResourceLogLevelInput, arg2 ...request.Option) (*iotwireless.PutResourceLogLevelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourceLogLevelWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.PutResourceLogLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourceLogLevelWithContext indicates an expected call of PutResourceLogLevelWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) PutResourceLogLevelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourceLogLevelWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).PutResourceLogLevelWithContext), varargs...)
}

// ResetAllResourceLogLevels mocks base method.
func (m *MockIoTWirelessAPI) ResetAllResourceLogLevels(arg0 *iotwireless.ResetAllResourceLogLevelsInput) (*iotwireless.ResetAllResourceLogLevelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllResourceLogLevels", arg0)
	ret0, _ := ret[0].(*iotwireless.ResetAllResourceLogLevelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetAllResourceLogLevels indicates an expected call of ResetAllResourceLogLevels.
func (mr *MockIoTWirelessAPIMockRecorder) ResetAllResourceLogLevels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllResourceLogLevels", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ResetAllResourceLogLevels), arg0)
}

// ResetAllResourceLogLevelsRequest mocks base method.
func (m *MockIoTWirelessAPI) ResetAllResourceLogLevelsRequest(arg0 *iotwireless.ResetAllResourceLogLevelsInput) (*request.Request, *iotwireless.ResetAllResourceLogLevelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAllResourceLogLevelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ResetAllResourceLogLevelsOutput)
	return ret0, ret1
}

// ResetAllResourceLogLevelsRequest indicates an expected call of ResetAllResourceLogLevelsRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ResetAllResourceLogLevelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllResourceLogLevelsRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ResetAllResourceLogLevelsRequest), arg0)
}

// ResetAllResourceLogLevelsWithContext mocks base method.
func (m *MockIoTWirelessAPI) ResetAllResourceLogLevelsWithContext(arg0 context.Context, arg1 *iotwireless.ResetAllResourceLogLevelsInput, arg2 ...request.Option) (*iotwireless.ResetAllResourceLogLevelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetAllResourceLogLevelsWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ResetAllResourceLogLevelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetAllResourceLogLevelsWithContext indicates an expected call of ResetAllResourceLogLevelsWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ResetAllResourceLogLevelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAllResourceLogLevelsWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ResetAllResourceLogLevelsWithContext), varargs...)
}

// ResetResourceLogLevel mocks base method.
func (m *MockIoTWirelessAPI) ResetResourceLogLevel(arg0 *iotwireless.ResetResourceLogLevelInput) (*iotwireless.ResetResourceLogLevelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetResourceLogLevel", arg0)
	ret0, _ := ret[0].(*iotwireless.ResetResourceLogLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetResourceLogLevel indicates an expected call of ResetResourceLogLevel.
func (mr *MockIoTWirelessAPIMockRecorder) ResetResourceLogLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetResourceLogLevel", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ResetResourceLogLevel), arg0)
}

// ResetResourceLogLevelRequest mocks base method.
func (m *MockIoTWirelessAPI) ResetResourceLogLevelRequest(arg0 *iotwireless.ResetResourceLogLevelInput) (*request.Request, *iotwireless.ResetResourceLogLevelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetResourceLogLevelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.ResetResourceLogLevelOutput)
	return ret0, ret1
}

// ResetResourceLogLevelRequest indicates an expected call of ResetResourceLogLevelRequest.
func (mr *MockIoTWirelessAPIMockRecorder) ResetResourceLogLevelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetResourceLogLevelRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ResetResourceLogLevelRequest), arg0)
}

// ResetResourceLogLevelWithContext mocks base method.
func (m *MockIoTWirelessAPI) ResetResourceLogLevelWithContext(arg0 context.Context, arg1 *iotwireless.ResetResourceLogLevelInput, arg2 ...request.Option) (*iotwireless.ResetResourceLogLevelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetResourceLogLevelWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.ResetResourceLogLevelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetResourceLogLevelWithContext indicates an expected call of ResetResourceLogLevelWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) ResetResourceLogLevelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetResourceLogLevelWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).ResetResourceLogLevelWithContext), varargs...)
}

// SendDataToMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) SendDataToMulticastGroup(arg0 *iotwireless.SendDataToMulticastGroupInput) (*iotwireless.SendDataToMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDataToMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.SendDataToMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDataToMulticastGroup indicates an expected call of SendDataToMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) SendDataToMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataToMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).SendDataToMulticastGroup), arg0)
}

// SendDataToMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) SendDataToMulticastGroupRequest(arg0 *iotwireless.SendDataToMulticastGroupInput) (*request.Request, *iotwireless.SendDataToMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDataToMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.SendDataToMulticastGroupOutput)
	return ret0, ret1
}

// SendDataToMulticastGroupRequest indicates an expected call of SendDataToMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) SendDataToMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataToMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).SendDataToMulticastGroupRequest), arg0)
}

// SendDataToMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) SendDataToMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.SendDataToMulticastGroupInput, arg2 ...request.Option) (*iotwireless.SendDataToMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendDataToMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.SendDataToMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDataToMulticastGroupWithContext indicates an expected call of SendDataToMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) SendDataToMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataToMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).SendDataToMulticastGroupWithContext), varargs...)
}

// SendDataToWirelessDevice mocks base method.
func (m *MockIoTWirelessAPI) SendDataToWirelessDevice(arg0 *iotwireless.SendDataToWirelessDeviceInput) (*iotwireless.SendDataToWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDataToWirelessDevice", arg0)
	ret0, _ := ret[0].(*iotwireless.SendDataToWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDataToWirelessDevice indicates an expected call of SendDataToWirelessDevice.
func (mr *MockIoTWirelessAPIMockRecorder) SendDataToWirelessDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataToWirelessDevice", reflect.TypeOf((*MockIoTWirelessAPI)(nil).SendDataToWirelessDevice), arg0)
}

// SendDataToWirelessDeviceRequest mocks base method.
func (m *MockIoTWirelessAPI) SendDataToWirelessDeviceRequest(arg0 *iotwireless.SendDataToWirelessDeviceInput) (*request.Request, *iotwireless.SendDataToWirelessDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDataToWirelessDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.SendDataToWirelessDeviceOutput)
	return ret0, ret1
}

// SendDataToWirelessDeviceRequest indicates an expected call of SendDataToWirelessDeviceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) SendDataToWirelessDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataToWirelessDeviceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).SendDataToWirelessDeviceRequest), arg0)
}

// SendDataToWirelessDeviceWithContext mocks base method.
func (m *MockIoTWirelessAPI) SendDataToWirelessDeviceWithContext(arg0 context.Context, arg1 *iotwireless.SendDataToWirelessDeviceInput, arg2 ...request.Option) (*iotwireless.SendDataToWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendDataToWirelessDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.SendDataToWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDataToWirelessDeviceWithContext indicates an expected call of SendDataToWirelessDeviceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) SendDataToWirelessDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDataToWirelessDeviceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).SendDataToWirelessDeviceWithContext), varargs...)
}

// StartBulkAssociateWirelessDeviceWithMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) StartBulkAssociateWirelessDeviceWithMulticastGroup(arg0 *iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupInput) (*iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkAssociateWirelessDeviceWithMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBulkAssociateWirelessDeviceWithMulticastGroup indicates an expected call of StartBulkAssociateWirelessDeviceWithMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) StartBulkAssociateWirelessDeviceWithMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkAssociateWirelessDeviceWithMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartBulkAssociateWirelessDeviceWithMulticastGroup), arg0)
}

// StartBulkAssociateWirelessDeviceWithMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) StartBulkAssociateWirelessDeviceWithMulticastGroupRequest(arg0 *iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupInput) (*request.Request, *iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkAssociateWirelessDeviceWithMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupOutput)
	return ret0, ret1
}

// StartBulkAssociateWirelessDeviceWithMulticastGroupRequest indicates an expected call of StartBulkAssociateWirelessDeviceWithMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) StartBulkAssociateWirelessDeviceWithMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkAssociateWirelessDeviceWithMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartBulkAssociateWirelessDeviceWithMulticastGroupRequest), arg0)
}

// StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupInput, arg2 ...request.Option) (*iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.StartBulkAssociateWirelessDeviceWithMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext indicates an expected call of StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartBulkAssociateWirelessDeviceWithMulticastGroupWithContext), varargs...)
}

// StartBulkDisassociateWirelessDeviceFromMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) StartBulkDisassociateWirelessDeviceFromMulticastGroup(arg0 *iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupInput) (*iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkDisassociateWirelessDeviceFromMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBulkDisassociateWirelessDeviceFromMulticastGroup indicates an expected call of StartBulkDisassociateWirelessDeviceFromMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) StartBulkDisassociateWirelessDeviceFromMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkDisassociateWirelessDeviceFromMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartBulkDisassociateWirelessDeviceFromMulticastGroup), arg0)
}

// StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest(arg0 *iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupInput) (*request.Request, *iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupOutput)
	return ret0, ret1
}

// StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest indicates an expected call of StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest), arg0)
}

// StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupInput, arg2 ...request.Option) (*iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.StartBulkDisassociateWirelessDeviceFromMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext indicates an expected call of StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartBulkDisassociateWirelessDeviceFromMulticastGroupWithContext), varargs...)
}

// StartFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) StartFuotaTask(arg0 *iotwireless.StartFuotaTaskInput) (*iotwireless.StartFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.StartFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFuotaTask indicates an expected call of StartFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) StartFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartFuotaTask), arg0)
}

// StartFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) StartFuotaTaskRequest(arg0 *iotwireless.StartFuotaTaskInput) (*request.Request, *iotwireless.StartFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.StartFuotaTaskOutput)
	return ret0, ret1
}

// StartFuotaTaskRequest indicates an expected call of StartFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) StartFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartFuotaTaskRequest), arg0)
}

// StartFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) StartFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.StartFuotaTaskInput, arg2 ...request.Option) (*iotwireless.StartFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.StartFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFuotaTaskWithContext indicates an expected call of StartFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) StartFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartFuotaTaskWithContext), varargs...)
}

// StartMulticastGroupSession mocks base method.
func (m *MockIoTWirelessAPI) StartMulticastGroupSession(arg0 *iotwireless.StartMulticastGroupSessionInput) (*iotwireless.StartMulticastGroupSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMulticastGroupSession", arg0)
	ret0, _ := ret[0].(*iotwireless.StartMulticastGroupSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMulticastGroupSession indicates an expected call of StartMulticastGroupSession.
func (mr *MockIoTWirelessAPIMockRecorder) StartMulticastGroupSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMulticastGroupSession", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartMulticastGroupSession), arg0)
}

// StartMulticastGroupSessionRequest mocks base method.
func (m *MockIoTWirelessAPI) StartMulticastGroupSessionRequest(arg0 *iotwireless.StartMulticastGroupSessionInput) (*request.Request, *iotwireless.StartMulticastGroupSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMulticastGroupSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.StartMulticastGroupSessionOutput)
	return ret0, ret1
}

// StartMulticastGroupSessionRequest indicates an expected call of StartMulticastGroupSessionRequest.
func (mr *MockIoTWirelessAPIMockRecorder) StartMulticastGroupSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMulticastGroupSessionRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartMulticastGroupSessionRequest), arg0)
}

// StartMulticastGroupSessionWithContext mocks base method.
func (m *MockIoTWirelessAPI) StartMulticastGroupSessionWithContext(arg0 context.Context, arg1 *iotwireless.StartMulticastGroupSessionInput, arg2 ...request.Option) (*iotwireless.StartMulticastGroupSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMulticastGroupSessionWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.StartMulticastGroupSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMulticastGroupSessionWithContext indicates an expected call of StartMulticastGroupSessionWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) StartMulticastGroupSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMulticastGroupSessionWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).StartMulticastGroupSessionWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockIoTWirelessAPI) TagResource(arg0 *iotwireless.TagResourceInput) (*iotwireless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*iotwireless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockIoTWirelessAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIoTWirelessAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockIoTWirelessAPI) TagResourceRequest(arg0 *iotwireless.TagResourceInput) (*request.Request, *iotwireless.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockIoTWirelessAPI) TagResourceWithContext(arg0 context.Context, arg1 *iotwireless.TagResourceInput, arg2 ...request.Option) (*iotwireless.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).TagResourceWithContext), varargs...)
}

// TestWirelessDevice mocks base method.
func (m *MockIoTWirelessAPI) TestWirelessDevice(arg0 *iotwireless.TestWirelessDeviceInput) (*iotwireless.TestWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestWirelessDevice", arg0)
	ret0, _ := ret[0].(*iotwireless.TestWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestWirelessDevice indicates an expected call of TestWirelessDevice.
func (mr *MockIoTWirelessAPIMockRecorder) TestWirelessDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWirelessDevice", reflect.TypeOf((*MockIoTWirelessAPI)(nil).TestWirelessDevice), arg0)
}

// TestWirelessDeviceRequest mocks base method.
func (m *MockIoTWirelessAPI) TestWirelessDeviceRequest(arg0 *iotwireless.TestWirelessDeviceInput) (*request.Request, *iotwireless.TestWirelessDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestWirelessDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.TestWirelessDeviceOutput)
	return ret0, ret1
}

// TestWirelessDeviceRequest indicates an expected call of TestWirelessDeviceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) TestWirelessDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWirelessDeviceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).TestWirelessDeviceRequest), arg0)
}

// TestWirelessDeviceWithContext mocks base method.
func (m *MockIoTWirelessAPI) TestWirelessDeviceWithContext(arg0 context.Context, arg1 *iotwireless.TestWirelessDeviceInput, arg2 ...request.Option) (*iotwireless.TestWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestWirelessDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.TestWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestWirelessDeviceWithContext indicates an expected call of TestWirelessDeviceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) TestWirelessDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWirelessDeviceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).TestWirelessDeviceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockIoTWirelessAPI) UntagResource(arg0 *iotwireless.UntagResourceInput) (*iotwireless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*iotwireless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockIoTWirelessAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockIoTWirelessAPI) UntagResourceRequest(arg0 *iotwireless.UntagResourceInput) (*request.Request, *iotwireless.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockIoTWirelessAPI) UntagResourceWithContext(arg0 context.Context, arg1 *iotwireless.UntagResourceInput, arg2 ...request.Option) (*iotwireless.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDestination mocks base method.
func (m *MockIoTWirelessAPI) UpdateDestination(arg0 *iotwireless.UpdateDestinationInput) (*iotwireless.UpdateDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDestination", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDestination indicates an expected call of UpdateDestination.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestination", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateDestination), arg0)
}

// UpdateDestinationRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateDestinationRequest(arg0 *iotwireless.UpdateDestinationInput) (*request.Request, *iotwireless.UpdateDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateDestinationOutput)
	return ret0, ret1
}

// UpdateDestinationRequest indicates an expected call of UpdateDestinationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestinationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateDestinationRequest), arg0)
}

// UpdateDestinationWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateDestinationWithContext(arg0 context.Context, arg1 *iotwireless.UpdateDestinationInput, arg2 ...request.Option) (*iotwireless.UpdateDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDestinationWithContext indicates an expected call of UpdateDestinationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestinationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateDestinationWithContext), varargs...)
}

// UpdateFuotaTask mocks base method.
func (m *MockIoTWirelessAPI) UpdateFuotaTask(arg0 *iotwireless.UpdateFuotaTaskInput) (*iotwireless.UpdateFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFuotaTask", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFuotaTask indicates an expected call of UpdateFuotaTask.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateFuotaTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFuotaTask", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateFuotaTask), arg0)
}

// UpdateFuotaTaskRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateFuotaTaskRequest(arg0 *iotwireless.UpdateFuotaTaskInput) (*request.Request, *iotwireless.UpdateFuotaTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFuotaTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateFuotaTaskOutput)
	return ret0, ret1
}

// UpdateFuotaTaskRequest indicates an expected call of UpdateFuotaTaskRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateFuotaTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFuotaTaskRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateFuotaTaskRequest), arg0)
}

// UpdateFuotaTaskWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateFuotaTaskWithContext(arg0 context.Context, arg1 *iotwireless.UpdateFuotaTaskInput, arg2 ...request.Option) (*iotwireless.UpdateFuotaTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFuotaTaskWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateFuotaTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFuotaTaskWithContext indicates an expected call of UpdateFuotaTaskWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateFuotaTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFuotaTaskWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateFuotaTaskWithContext), varargs...)
}

// UpdateLogLevelsByResourceTypes mocks base method.
func (m *MockIoTWirelessAPI) UpdateLogLevelsByResourceTypes(arg0 *iotwireless.UpdateLogLevelsByResourceTypesInput) (*iotwireless.UpdateLogLevelsByResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogLevelsByResourceTypes", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateLogLevelsByResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogLevelsByResourceTypes indicates an expected call of UpdateLogLevelsByResourceTypes.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateLogLevelsByResourceTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogLevelsByResourceTypes", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateLogLevelsByResourceTypes), arg0)
}

// UpdateLogLevelsByResourceTypesRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateLogLevelsByResourceTypesRequest(arg0 *iotwireless.UpdateLogLevelsByResourceTypesInput) (*request.Request, *iotwireless.UpdateLogLevelsByResourceTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogLevelsByResourceTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateLogLevelsByResourceTypesOutput)
	return ret0, ret1
}

// UpdateLogLevelsByResourceTypesRequest indicates an expected call of UpdateLogLevelsByResourceTypesRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateLogLevelsByResourceTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogLevelsByResourceTypesRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateLogLevelsByResourceTypesRequest), arg0)
}

// UpdateLogLevelsByResourceTypesWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateLogLevelsByResourceTypesWithContext(arg0 context.Context, arg1 *iotwireless.UpdateLogLevelsByResourceTypesInput, arg2 ...request.Option) (*iotwireless.UpdateLogLevelsByResourceTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLogLevelsByResourceTypesWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateLogLevelsByResourceTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogLevelsByResourceTypesWithContext indicates an expected call of UpdateLogLevelsByResourceTypesWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateLogLevelsByResourceTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogLevelsByResourceTypesWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateLogLevelsByResourceTypesWithContext), varargs...)
}

// UpdateMulticastGroup mocks base method.
func (m *MockIoTWirelessAPI) UpdateMulticastGroup(arg0 *iotwireless.UpdateMulticastGroupInput) (*iotwireless.UpdateMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMulticastGroup", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMulticastGroup indicates an expected call of UpdateMulticastGroup.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateMulticastGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulticastGroup", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateMulticastGroup), arg0)
}

// UpdateMulticastGroupRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateMulticastGroupRequest(arg0 *iotwireless.UpdateMulticastGroupInput) (*request.Request, *iotwireless.UpdateMulticastGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMulticastGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateMulticastGroupOutput)
	return ret0, ret1
}

// UpdateMulticastGroupRequest indicates an expected call of UpdateMulticastGroupRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateMulticastGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulticastGroupRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateMulticastGroupRequest), arg0)
}

// UpdateMulticastGroupWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateMulticastGroupWithContext(arg0 context.Context, arg1 *iotwireless.UpdateMulticastGroupInput, arg2 ...request.Option) (*iotwireless.UpdateMulticastGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMulticastGroupWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateMulticastGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMulticastGroupWithContext indicates an expected call of UpdateMulticastGroupWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateMulticastGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMulticastGroupWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateMulticastGroupWithContext), varargs...)
}

// UpdateNetworkAnalyzerConfiguration mocks base method.
func (m *MockIoTWirelessAPI) UpdateNetworkAnalyzerConfiguration(arg0 *iotwireless.UpdateNetworkAnalyzerConfigurationInput) (*iotwireless.UpdateNetworkAnalyzerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkAnalyzerConfiguration", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateNetworkAnalyzerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkAnalyzerConfiguration indicates an expected call of UpdateNetworkAnalyzerConfiguration.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateNetworkAnalyzerConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkAnalyzerConfiguration", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateNetworkAnalyzerConfiguration), arg0)
}

// UpdateNetworkAnalyzerConfigurationRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateNetworkAnalyzerConfigurationRequest(arg0 *iotwireless.UpdateNetworkAnalyzerConfigurationInput) (*request.Request, *iotwireless.UpdateNetworkAnalyzerConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkAnalyzerConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateNetworkAnalyzerConfigurationOutput)
	return ret0, ret1
}

// UpdateNetworkAnalyzerConfigurationRequest indicates an expected call of UpdateNetworkAnalyzerConfigurationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateNetworkAnalyzerConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkAnalyzerConfigurationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateNetworkAnalyzerConfigurationRequest), arg0)
}

// UpdateNetworkAnalyzerConfigurationWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateNetworkAnalyzerConfigurationWithContext(arg0 context.Context, arg1 *iotwireless.UpdateNetworkAnalyzerConfigurationInput, arg2 ...request.Option) (*iotwireless.UpdateNetworkAnalyzerConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNetworkAnalyzerConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateNetworkAnalyzerConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkAnalyzerConfigurationWithContext indicates an expected call of UpdateNetworkAnalyzerConfigurationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateNetworkAnalyzerConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkAnalyzerConfigurationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateNetworkAnalyzerConfigurationWithContext), varargs...)
}

// UpdatePartnerAccount mocks base method.
func (m *MockIoTWirelessAPI) UpdatePartnerAccount(arg0 *iotwireless.UpdatePartnerAccountInput) (*iotwireless.UpdatePartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartnerAccount", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdatePartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartnerAccount indicates an expected call of UpdatePartnerAccount.
func (mr *MockIoTWirelessAPIMockRecorder) UpdatePartnerAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnerAccount", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdatePartnerAccount), arg0)
}

// UpdatePartnerAccountRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdatePartnerAccountRequest(arg0 *iotwireless.UpdatePartnerAccountInput) (*request.Request, *iotwireless.UpdatePartnerAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartnerAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdatePartnerAccountOutput)
	return ret0, ret1
}

// UpdatePartnerAccountRequest indicates an expected call of UpdatePartnerAccountRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdatePartnerAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnerAccountRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdatePartnerAccountRequest), arg0)
}

// UpdatePartnerAccountWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdatePartnerAccountWithContext(arg0 context.Context, arg1 *iotwireless.UpdatePartnerAccountInput, arg2 ...request.Option) (*iotwireless.UpdatePartnerAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePartnerAccountWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdatePartnerAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartnerAccountWithContext indicates an expected call of UpdatePartnerAccountWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdatePartnerAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartnerAccountWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdatePartnerAccountWithContext), varargs...)
}

// UpdateResourceEventConfiguration mocks base method.
func (m *MockIoTWirelessAPI) UpdateResourceEventConfiguration(arg0 *iotwireless.UpdateResourceEventConfigurationInput) (*iotwireless.UpdateResourceEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceEventConfiguration", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateResourceEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceEventConfiguration indicates an expected call of UpdateResourceEventConfiguration.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateResourceEventConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceEventConfiguration", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateResourceEventConfiguration), arg0)
}

// UpdateResourceEventConfigurationRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateResourceEventConfigurationRequest(arg0 *iotwireless.UpdateResourceEventConfigurationInput) (*request.Request, *iotwireless.UpdateResourceEventConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceEventConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateResourceEventConfigurationOutput)
	return ret0, ret1
}

// UpdateResourceEventConfigurationRequest indicates an expected call of UpdateResourceEventConfigurationRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateResourceEventConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceEventConfigurationRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateResourceEventConfigurationRequest), arg0)
}

// UpdateResourceEventConfigurationWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateResourceEventConfigurationWithContext(arg0 context.Context, arg1 *iotwireless.UpdateResourceEventConfigurationInput, arg2 ...request.Option) (*iotwireless.UpdateResourceEventConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceEventConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateResourceEventConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceEventConfigurationWithContext indicates an expected call of UpdateResourceEventConfigurationWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateResourceEventConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceEventConfigurationWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateResourceEventConfigurationWithContext), varargs...)
}

// UpdateWirelessDevice mocks base method.
func (m *MockIoTWirelessAPI) UpdateWirelessDevice(arg0 *iotwireless.UpdateWirelessDeviceInput) (*iotwireless.UpdateWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWirelessDevice", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWirelessDevice indicates an expected call of UpdateWirelessDevice.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateWirelessDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWirelessDevice", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateWirelessDevice), arg0)
}

// UpdateWirelessDeviceRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateWirelessDeviceRequest(arg0 *iotwireless.UpdateWirelessDeviceInput) (*request.Request, *iotwireless.UpdateWirelessDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWirelessDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateWirelessDeviceOutput)
	return ret0, ret1
}

// UpdateWirelessDeviceRequest indicates an expected call of UpdateWirelessDeviceRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateWirelessDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWirelessDeviceRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateWirelessDeviceRequest), arg0)
}

// UpdateWirelessDeviceWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateWirelessDeviceWithContext(arg0 context.Context, arg1 *iotwireless.UpdateWirelessDeviceInput, arg2 ...request.Option) (*iotwireless.UpdateWirelessDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWirelessDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateWirelessDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWirelessDeviceWithContext indicates an expected call of UpdateWirelessDeviceWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateWirelessDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWirelessDeviceWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateWirelessDeviceWithContext), varargs...)
}

// UpdateWirelessGateway mocks base method.
func (m *MockIoTWirelessAPI) UpdateWirelessGateway(arg0 *iotwireless.UpdateWirelessGatewayInput) (*iotwireless.UpdateWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWirelessGateway", arg0)
	ret0, _ := ret[0].(*iotwireless.UpdateWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWirelessGateway indicates an expected call of UpdateWirelessGateway.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateWirelessGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWirelessGateway", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateWirelessGateway), arg0)
}

// UpdateWirelessGatewayRequest mocks base method.
func (m *MockIoTWirelessAPI) UpdateWirelessGatewayRequest(arg0 *iotwireless.UpdateWirelessGatewayInput) (*request.Request, *iotwireless.UpdateWirelessGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWirelessGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotwireless.UpdateWirelessGatewayOutput)
	return ret0, ret1
}

// UpdateWirelessGatewayRequest indicates an expected call of UpdateWirelessGatewayRequest.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateWirelessGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWirelessGatewayRequest", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateWirelessGatewayRequest), arg0)
}

// UpdateWirelessGatewayWithContext mocks base method.
func (m *MockIoTWirelessAPI) UpdateWirelessGatewayWithContext(arg0 context.Context, arg1 *iotwireless.UpdateWirelessGatewayInput, arg2 ...request.Option) (*iotwireless.UpdateWirelessGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWirelessGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotwireless.UpdateWirelessGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWirelessGatewayWithContext indicates an expected call of UpdateWirelessGatewayWithContext.
func (mr *MockIoTWirelessAPIMockRecorder) UpdateWirelessGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWirelessGatewayWithContext", reflect.TypeOf((*MockIoTWirelessAPI)(nil).UpdateWirelessGatewayWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/locationservice/locationserviceiface (interfaces: LocationServiceAPI)

// Package locationservicemock is a generated GoMock package.
package locationservicemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	locationservice "github.com/aws/aws-sdk-go/service/locationservice"
	gomock "github.com/golang/mock/gomock"
)

// MockLocationServiceAPI is a mock of LocationServiceAPI interface.
type MockLocationServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLocationServiceAPIMockRecorder
}

// MockLocationServiceAPIMockRecorder is the mock recorder for MockLocationServiceAPI.
type MockLocationServiceAPIMockRecorder struct {
	mock *MockLocationServiceAPI
}

// NewMockLocationServiceAPI creates a new mock instance.
func NewMockLocationServiceAPI(ctrl *gomock.Controller) *MockLocationServiceAPI {
	mock := &MockLocationServiceAPI{ctrl: ctrl}
	mock.recorder = &MockLocationServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationServiceAPI) EXPECT() *MockLocationServiceAPIMockRecorder {
	return m.recorder
}

// AssociateTrackerConsumer mocks base method.
func (m *MockLocationServiceAPI) AssociateTrackerConsumer(arg0 *locationservice.AssociateTrackerConsumerInput) (*locationservice.AssociateTrackerConsumerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTrackerConsumer", arg0)
	ret0, _ := ret[0].(*locationservice.AssociateTrackerConsumerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTrackerConsumer indicates an expected call of AssociateTrackerConsumer.
func (mr *MockLocationServiceAPIMockRecorder) AssociateTrackerConsumer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTrackerConsumer", reflect.TypeOf((*MockLocationServiceAPI)(nil).AssociateTrackerConsumer), arg0)
}

// AssociateTrackerConsumerRequest mocks base method.
func (m *MockLocationServiceAPI) AssociateTrackerConsumerRequest(arg0 *locationservice.AssociateTrackerConsumerInput) (*request.Request, *locationservice.AssociateTrackerConsumerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateTrackerConsumerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.AssociateTrackerConsumerOutput)
	return ret0, ret1
}

// AssociateTrackerConsumerRequest indicates an expected call of AssociateTrackerConsumerRequest.
func (mr *MockLocationServiceAPIMockRecorder) AssociateTrackerConsumerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTrackerConsumerRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).AssociateTrackerConsumerRequest), arg0)
}

// AssociateTrackerConsumerWithContext mocks base method.
func (m *MockLocationServiceAPI) AssociateTrackerConsumerWithContext(arg0 context.Context, arg1 *locationservice.AssociateTrackerConsumerInput, arg2 ...request.Option) (*locationservice.AssociateTrackerConsumerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateTrackerConsumerWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.AssociateTrackerConsumerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateTrackerConsumerWithContext indicates an expected call of AssociateTrackerConsumerWithContext.
func (mr *MockLocationServiceAPIMockRecorder) AssociateTrackerConsumerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateTrackerConsumerWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).AssociateTrackerConsumerWithContext), varargs...)
}

// BatchDeleteDevicePositionHistory mocks base method.
func (m *MockLocationServiceAPI) BatchDeleteDevicePositionHistory(arg0 *locationservice.BatchDeleteDevicePositionHistoryInput) (*locationservice.BatchDeleteDevicePositionHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDevicePositionHistory", arg0)
	ret0, _ := ret[0].(*locationservice.BatchDeleteDevicePositionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteDevicePositionHistory indicates an expected call of BatchDeleteDevicePositionHistory.
func (mr *MockLocationServiceAPIMockRecorder) BatchDeleteDevicePositionHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDevicePositionHistory", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchDeleteDevicePositionHistory), arg0)
}

// BatchDeleteDevicePositionHistoryRequest mocks base method.
func (m *MockLocationServiceAPI) BatchDeleteDevicePositionHistoryRequest(arg0 *locationservice.BatchDeleteDevicePositionHistoryInput) (*request.Request, *locationservice.BatchDeleteDevicePositionHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDevicePositionHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.BatchDeleteDevicePositionHistoryOutput)
	return ret0, ret1
}

// BatchDeleteDevicePositionHistoryRequest indicates an expected call of BatchDeleteDevicePositionHistoryRequest.
func (mr *MockLocationServiceAPIMockRecorder) BatchDeleteDevicePositionHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDevicePositionHistoryRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchDeleteDevicePositionHistoryRequest), arg0)
}

// BatchDeleteDevicePositionHistoryWithContext mocks base method.
func (m *MockLocationServiceAPI) BatchDeleteDevicePositionHistoryWithContext(arg0 context.Context, arg1 *locationservice.BatchDeleteDevicePositionHistoryInput, arg2 ...request.Option) (*locationservice.BatchDeleteDevicePositionHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteDevicePositionHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.BatchDeleteDevicePositionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteDevicePositionHistoryWithContext indicates an expected call of BatchDeleteDevicePositionHistoryWithContext.
func (mr *MockLocationServiceAPIMockRecorder) BatchDeleteDevicePositionHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDevicePositionHistoryWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchDeleteDevicePositionHistoryWithContext), varargs...)
}

// BatchDeleteGeofence mocks base method.
func (m *MockLocationServiceAPI) BatchDeleteGeofence(arg0 *locationservice.BatchDeleteGeofenceInput) (*locationservice.BatchDeleteGeofenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteGeofence", arg0)
	ret0, _ := ret[0].(*locationservice.BatchDeleteGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteGeofence indicates an expected call of BatchDeleteGeofence.
func (mr *MockLocationServiceAPIMockRecorder) BatchDeleteGeofence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteGeofence", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchDeleteGeofence), arg0)
}

// BatchDeleteGeofenceRequest mocks base method.
func (m *MockLocationServiceAPI) BatchDeleteGeofenceRequest(arg0 *locationservice.BatchDeleteGeofenceInput) (*request.Request, *locationservice.BatchDeleteGeofenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteGeofenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.BatchDeleteGeofenceOutput)
	return ret0, ret1
}

// BatchDeleteGeofenceRequest indicates an expected call of BatchDeleteGeofenceRequest.
func (mr *MockLocationServiceAPIMockRecorder) BatchDeleteGeofenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteGeofenceRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchDeleteGeofenceRequest), arg0)
}

// BatchDeleteGeofenceWithContext mocks base method.
func (m *MockLocationServiceAPI) BatchDeleteGeofenceWithContext(arg0 context.Context, arg1 *locationservice.BatchDeleteGeofenceInput, arg2 ...request.Option) (*locationservice.BatchDeleteGeofenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteGeofenceWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.BatchDeleteGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteGeofenceWithContext indicates an expected call of BatchDeleteGeofenceWithContext.
func (mr *MockLocationServiceAPIMockRecorder) BatchDeleteGeofenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteGeofenceWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchDeleteGeofenceWithContext), varargs...)
}

// BatchEvaluateGeofences mocks base method.
func (m *MockLocationServiceAPI) BatchEvaluateGeofences(arg0 *locationservice.BatchEvaluateGeofencesInput) (*locationservice.BatchEvaluateGeofencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEvaluateGeofences", arg0)
	ret0, _ := ret[0].(*locationservice.BatchEvaluateGeofencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEvaluateGeofences indicates an expected call of BatchEvaluateGeofences.
func (mr *MockLocationServiceAPIMockRecorder) BatchEvaluateGeofences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEvaluateGeofences", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchEvaluateGeofences), arg0)
}

// BatchEvaluateGeofencesRequest mocks base method.
func (m *MockLocationServiceAPI) BatchEvaluateGeofencesRequest(arg0 *locationservice.BatchEvaluateGeofencesInput) (*request.Request, *locationservice.BatchEvaluateGeofencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEvaluateGeofencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.BatchEvaluateGeofencesOutput)
	return ret0, ret1
}

// BatchEvaluateGeofencesRequest indicates an expected call of BatchEvaluateGeofencesRequest.
func (mr *MockLocationServiceAPIMockRecorder) BatchEvaluateGeofencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEvaluateGeofencesRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchEvaluateGeofencesRequest), arg0)
}

// BatchEvaluateGeofencesWithContext mocks base method.
func (m *MockLocationServiceAPI) BatchEvaluateGeofencesWithContext(arg0 context.Context, arg1 *locationservice.BatchEvaluateGeofencesInput, arg2 ...request.Option) (*locationservice.BatchEvaluateGeofencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchEvaluateGeofencesWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.BatchEvaluateGeofencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEvaluateGeofencesWithContext indicates an expected call of BatchEvaluateGeofencesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) BatchEvaluateGeofencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEvaluateGeofencesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchEvaluateGeofencesWithContext), varargs...)
}

// BatchGetDevicePosition mocks base method.
func (m *MockLocationServiceAPI) BatchGetDevicePosition(arg0 *locationservice.BatchGetDevicePositionInput) (*locationservice.BatchGetDevicePositionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDevicePosition", arg0)
	ret0, _ := ret[0].(*locationservice.BatchGetDevicePositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDevicePosition indicates an expected call of BatchGetDevicePosition.
func (mr *MockLocationServiceAPIMockRecorder) BatchGetDevicePosition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDevicePosition", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchGetDevicePosition), arg0)
}

// BatchGetDevicePositionRequest mocks base method.
func (m *MockLocationServiceAPI) BatchGetDevicePositionRequest(arg0 *locationservice.BatchGetDevicePositionInput) (*request.Request, *locationservice.BatchGetDevicePositionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDevicePositionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.BatchGetDevicePositionOutput)
	return ret0, ret1
}

// BatchGetDevicePositionRequest indicates an expected call of BatchGetDevicePositionRequest.
func (mr *MockLocationServiceAPIMockRecorder) BatchGetDevicePositionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDevicePositionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchGetDevicePositionRequest), arg0)
}

// BatchGetDevicePositionWithContext mocks base method.
func (m *MockLocationServiceAPI) BatchGetDevicePositionWithContext(arg0 context.Context, arg1 *locationservice.BatchGetDevicePositionInput, arg2 ...request.Option) (*locationservice.BatchGetDevicePositionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDevicePositionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.BatchGetDevicePositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDevicePositionWithContext indicates an expected call of BatchGetDevicePositionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) BatchGetDevicePositionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDevicePositionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchGetDevicePositionWithContext), varargs...)
}

// BatchPutGeofence mocks base method.
func (m *MockLocationServiceAPI) BatchPutGeofence(arg0 *locationservice.BatchPutGeofenceInput) (*locationservice.BatchPutGeofenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutGeofence", arg0)
	ret0, _ := ret[0].(*locationservice.BatchPutGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutGeofence indicates an expected call of BatchPutGeofence.
func (mr *MockLocationServiceAPIMockRecorder) BatchPutGeofence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutGeofence", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchPutGeofence), arg0)
}

// BatchPutGeofenceRequest mocks base method.
func (m *MockLocationServiceAPI) BatchPutGeofenceRequest(arg0 *locationservice.BatchPutGeofenceInput) (*request.Request, *locationservice.BatchPutGeofenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutGeofenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.BatchPutGeofenceOutput)
	return ret0, ret1
}

// BatchPutGeofenceRequest indicates an expected call of BatchPutGeofenceRequest.
func (mr *MockLocationServiceAPIMockRecorder) BatchPutGeofenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutGeofenceRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchPutGeofenceRequest), arg0)
}

// BatchPutGeofenceWithContext mocks base method.
func (m *MockLocationServiceAPI) BatchPutGeofenceWithContext(arg0 context.Context, arg1 *locationservice.BatchPutGeofenceInput, arg2 ...request.Option) (*locationservice.BatchPutGeofenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutGeofenceWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.BatchPutGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutGeofenceWithContext indicates an expected call of BatchPutGeofenceWithContext.
func (mr *MockLocationServiceAPIMockRecorder) BatchPutGeofenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutGeofenceWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchPutGeofenceWithContext), varargs...)
}

// BatchUpdateDevicePosition mocks base method.
func (m *MockLocationServiceAPI) BatchUpdateDevicePosition(arg0 *locationservice.BatchUpdateDevicePositionInput) (*locationservice.BatchUpdateDevicePositionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateDevicePosition", arg0)
	ret0, _ := ret[0].(*locationservice.BatchUpdateDevicePositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateDevicePosition indicates an expected call of BatchUpdateDevicePosition.
func (mr *MockLocationServiceAPIMockRecorder) BatchUpdateDevicePosition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateDevicePosition", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchUpdateDevicePosition), arg0)
}

// BatchUpdateDevicePositionRequest mocks base method.
func (m *MockLocationServiceAPI) BatchUpdateDevicePositionRequest(arg0 *locationservice.BatchUpdateDevicePositionInput) (*request.Request, *locationservice.BatchUpdateDevicePositionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateDevicePositionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.BatchUpdateDevicePositionOutput)
	return ret0, ret1
}

// BatchUpdateDevicePositionRequest indicates an expected call of BatchUpdateDevicePositionRequest.
func (mr *MockLocationServiceAPIMockRecorder) BatchUpdateDevicePositionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateDevicePositionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchUpdateDevicePositionRequest), arg0)
}

// BatchUpdateDevicePositionWithContext mocks base method.
func (m *MockLocationServiceAPI) BatchUpdateDevicePositionWithContext(arg0 context.Context, arg1 *locationservice.BatchUpdateDevicePositionInput, arg2 ...request.Option) (*locationservice.BatchUpdateDevicePositionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateDevicePositionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.BatchUpdateDevicePositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateDevicePositionWithContext indicates an expected call of BatchUpdateDevicePositionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) BatchUpdateDevicePositionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateDevicePositionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).BatchUpdateDevicePositionWithContext), varargs...)
}

// CalculateRoute mocks base method.
func (m *MockLocationServiceAPI) CalculateRoute(arg0 *locationservice.CalculateRouteInput) (*locationservice.CalculateRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRoute", arg0)
	ret0, _ := ret[0].(*locationservice.CalculateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateRoute indicates an expected call of CalculateRoute.
func (mr *MockLocationServiceAPIMockRecorder) CalculateRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRoute", reflect.TypeOf((*MockLocationServiceAPI)(nil).CalculateRoute), arg0)
}

// CalculateRouteMatrix mocks base method.
func (m *MockLocationServiceAPI) CalculateRouteMatrix(arg0 *locationservice.CalculateRouteMatrixInput) (*locationservice.CalculateRouteMatrixOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRouteMatrix", arg0)
	ret0, _ := ret[0].(*locationservice.CalculateRouteMatrixOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateRouteMatrix indicates an expected call of CalculateRouteMatrix.
func (mr *MockLocationServiceAPIMockRecorder) CalculateRouteMatrix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRouteMatrix", reflect.TypeOf((*MockLocationServiceAPI)(nil).CalculateRouteMatrix), arg0)
}

// CalculateRouteMatrixRequest mocks base method.
func (m *MockLocationServiceAPI) CalculateRouteMatrixRequest(arg0 *locationservice.CalculateRouteMatrixInput) (*request.Request, *locationservice.CalculateRouteMatrixOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRouteMatrixRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.CalculateRouteMatrixOutput)
	return ret0, ret1
}

// CalculateRouteMatrixRequest indicates an expected call of CalculateRouteMatrixRequest.
func (mr *MockLocationServiceAPIMockRecorder) CalculateRouteMatrixRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRouteMatrixRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).CalculateRouteMatrixRequest), arg0)
}

// CalculateRouteMatrixWithContext mocks base method.
func (m *MockLocationServiceAPI) CalculateRouteMatrixWithContext(arg0 context.Context, arg1 *locationservice.CalculateRouteMatrixInput, arg2 ...request.Option) (*locationservice.CalculateRouteMatrixOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculateRouteMatrixWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.CalculateRouteMatrixOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateRouteMatrixWithContext indicates an expected call of CalculateRouteMatrixWithContext.
func (mr *MockLocationServiceAPIMockRecorder) CalculateRouteMatrixWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRouteMatrixWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).CalculateRouteMatrixWithContext), varargs...)
}

// CalculateRouteRequest mocks base method.
func (m *MockLocationServiceAPI) CalculateRouteRequest(arg0 *locationservice.CalculateRouteInput) (*request.Request, *locationservice.CalculateRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.CalculateRouteOutput)
	return ret0, ret1
}

// CalculateRouteRequest indicates an expected call of CalculateRouteRequest.
func (mr *MockLocationServiceAPIMockRecorder) CalculateRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRouteRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).CalculateRouteRequest), arg0)
}

// CalculateRouteWithContext mocks base method.
func (m *MockLocationServiceAPI) CalculateRouteWithContext(arg0 context.Context, arg1 *locationservice.CalculateRouteInput, arg2 ...request.Option) (*locationservice.CalculateRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculateRouteWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.CalculateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateRouteWithContext indicates an expected call of CalculateRouteWithContext.
func (mr *MockLocationServiceAPIMockRecorder) CalculateRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRouteWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).CalculateRouteWithContext), varargs...)
}

// CreateGeofenceCollection mocks base method.
func (m *MockLocationServiceAPI) CreateGeofenceCollection(arg0 *locationservice.CreateGeofenceCollectionInput) (*locationservice.CreateGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeofenceCollection", arg0)
	ret0, _ := ret[0].(*locationservice.CreateGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeofenceCollection indicates an expected call of CreateGeofenceCollection.
func (mr *MockLocationServiceAPIMockRecorder) CreateGeofenceCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeofenceCollection", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateGeofenceCollection), arg0)
}

// CreateGeofenceCollectionRequest mocks base method.
func (m *MockLocationServiceAPI) CreateGeofenceCollectionRequest(arg0 *locationservice.CreateGeofenceCollectionInput) (*request.Request, *locationservice.CreateGeofenceCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeofenceCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.CreateGeofenceCollectionOutput)
	return ret0, ret1
}

// CreateGeofenceCollectionRequest indicates an expected call of CreateGeofenceCollectionRequest.
func (mr *MockLocationServiceAPIMockRecorder) CreateGeofenceCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeofenceCollectionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateGeofenceCollectionRequest), arg0)
}

// CreateGeofenceCollectionWithContext mocks base method.
func (m *MockLocationServiceAPI) CreateGeofenceCollectionWithContext(arg0 context.Context, arg1 *locationservice.CreateGeofenceCollectionInput, arg2 ...request.Option) (*locationservice.CreateGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGeofenceCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.CreateGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeofenceCollectionWithContext indicates an expected call of CreateGeofenceCollectionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) CreateGeofenceCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeofenceCollectionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateGeofenceCollectionWithContext), varargs...)
}

// CreateMap mocks base method.
func (m *MockLocationServiceAPI) CreateMap(arg0 *locationservice.CreateMapInput) (*locationservice.CreateMapOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMap", arg0)
	ret0, _ := ret[0].(*locationservice.CreateMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockLocationServiceAPIMockRecorder) CreateMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateMap), arg0)
}

// CreateMapRequest mocks base method.
func (m *MockLocationServiceAPI) CreateMapRequest(arg0 *locationservice.CreateMapInput) (*request.Request, *locationservice.CreateMapOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.CreateMapOutput)
	return ret0, ret1
}

// CreateMapRequest indicates an expected call of CreateMapRequest.
func (mr *MockLocationServiceAPIMockRecorder) CreateMapRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateMapRequest), arg0)
}

// CreateMapWithContext mocks base method.
func (m *MockLocationServiceAPI) CreateMapWithContext(arg0 context.Context, arg1 *locationservice.CreateMapInput, arg2 ...request.Option) (*locationservice.CreateMapOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMapWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.CreateMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapWithContext indicates an expected call of CreateMapWithContext.
func (mr *MockLocationServiceAPIMockRecorder) CreateMapWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateMapWithContext), varargs...)
}

// CreatePlaceIndex mocks base method.
func (m *MockLocationServiceAPI) CreatePlaceIndex(arg0 *locationservice.CreatePlaceIndexInput) (*locationservice.CreatePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaceIndex", arg0)
	ret0, _ := ret[0].(*locationservice.CreatePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaceIndex indicates an expected call of CreatePlaceIndex.
func (mr *MockLocationServiceAPIMockRecorder) CreatePlaceIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaceIndex", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreatePlaceIndex), arg0)
}

// CreatePlaceIndexRequest mocks base method.
func (m *MockLocationServiceAPI) CreatePlaceIndexRequest(arg0 *locationservice.CreatePlaceIndexInput) (*request.Request, *locationservice.CreatePlaceIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaceIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.CreatePlaceIndexOutput)
	return ret0, ret1
}

// CreatePlaceIndexRequest indicates an expected call of CreatePlaceIndexRequest.
func (mr *MockLocationServiceAPIMockRecorder) CreatePlaceIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaceIndexRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreatePlaceIndexRequest), arg0)
}

// CreatePlaceIndexWithContext mocks base method.
func (m *MockLocationServiceAPI) CreatePlaceIndexWithContext(arg0 context.Context, arg1 *locationservice.CreatePlaceIndexInput, arg2 ...request.Option) (*locationservice.CreatePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePlaceIndexWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.CreatePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaceIndexWithContext indicates an expected call of CreatePlaceIndexWithContext.
func (mr *MockLocationServiceAPIMockRecorder) CreatePlaceIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaceIndexWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreatePlaceIndexWithContext), varargs...)
}

// CreateRouteCalculator mocks base method.
func (m *MockLocationServiceAPI) CreateRouteCalculator(arg0 *locationservice.CreateRouteCalculatorInput) (*locationservice.CreateRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteCalculator", arg0)
	ret0, _ := ret[0].(*locationservice.CreateRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteCalculator indicates an expected call of CreateRouteCalculator.
func (mr *MockLocationServiceAPIMockRecorder) CreateRouteCalculator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteCalculator", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateRouteCalculator), arg0)
}

// CreateRouteCalculatorRequest mocks base method.
func (m *MockLocationServiceAPI) CreateRouteCalculatorRequest(arg0 *locationservice.CreateRouteCalculatorInput) (*request.Request, *locationservice.CreateRouteCalculatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteCalculatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.CreateRouteCalculatorOutput)
	return ret0, ret1
}

// CreateRouteCalculatorRequest indicates an expected call of CreateRouteCalculatorRequest.
func (mr *MockLocationServiceAPIMockRecorder) CreateRouteCalculatorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteCalculatorRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateRouteCalculatorRequest), arg0)
}

// CreateRouteCalculatorWithContext mocks base method.
func (m *MockLocationServiceAPI) CreateRouteCalculatorWithContext(arg0 context.Context, arg1 *locationservice.CreateRouteCalculatorInput, arg2 ...request.Option) (*locationservice.CreateRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteCalculatorWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.CreateRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteCalculatorWithContext indicates an expected call of CreateRouteCalculatorWithContext.
func (mr *MockLocationServiceAPIMockRecorder) CreateRouteCalculatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteCalculatorWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateRouteCalculatorWithContext), varargs...)
}

// CreateTracker mocks base method.
func (m *MockLocationServiceAPI) CreateTracker(arg0 *locationservice.CreateTrackerInput) (*locationservice.CreateTrackerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTracker", arg0)
	ret0, _ := ret[0].(*locationservice.CreateTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTracker indicates an expected call of CreateTracker.
func (mr *MockLocationServiceAPIMockRecorder) CreateTracker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTracker", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateTracker), arg0)
}

// CreateTrackerRequest mocks base method.
func (m *MockLocationServiceAPI) CreateTrackerRequest(arg0 *locationservice.CreateTrackerInput) (*request.Request, *locationservice.CreateTrackerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrackerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.CreateTrackerOutput)
	return ret0, ret1
}

// CreateTrackerRequest indicates an expected call of CreateTrackerRequest.
func (mr *MockLocationServiceAPIMockRecorder) CreateTrackerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrackerRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateTrackerRequest), arg0)
}

// CreateTrackerWithContext mocks base method.
func (m *MockLocationServiceAPI) CreateTrackerWithContext(arg0 context.Context, arg1 *locationservice.CreateTrackerInput, arg2 ...request.Option) (*locationservice.CreateTrackerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrackerWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.CreateTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrackerWithContext indicates an expected call of CreateTrackerWithContext.
func (mr *MockLocationServiceAPIMockRecorder) CreateTrackerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrackerWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).CreateTrackerWithContext), varargs...)
}

// DeleteGeofenceCollection mocks base method.
func (m *MockLocationServiceAPI) DeleteGeofenceCollection(arg0 *locationservice.DeleteGeofenceCollectionInput) (*locationservice.DeleteGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeofenceCollection", arg0)
	ret0, _ := ret[0].(*locationservice.DeleteGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGeofenceCollection indicates an expected call of DeleteGeofenceCollection.
func (mr *MockLocationServiceAPIMockRecorder) DeleteGeofenceCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeofenceCollection", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteGeofenceCollection), arg0)
}

// DeleteGeofenceCollectionRequest mocks base method.
func (m *MockLocationServiceAPI) DeleteGeofenceCollectionRequest(arg0 *locationservice.DeleteGeofenceCollectionInput) (*request.Request, *locationservice.DeleteGeofenceCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeofenceCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DeleteGeofenceCollectionOutput)
	return ret0, ret1
}

// DeleteGeofenceCollectionRequest indicates an expected call of DeleteGeofenceCollectionRequest.
func (mr *MockLocationServiceAPIMockRecorder) DeleteGeofenceCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeofenceCollectionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteGeofenceCollectionRequest), arg0)
}

// DeleteGeofenceCollectionWithContext mocks base method.
func (m *MockLocationServiceAPI) DeleteGeofenceCollectionWithContext(arg0 context.Context, arg1 *locationservice.DeleteGeofenceCollectionInput, arg2 ...request.Option) (*locationservice.DeleteGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGeofenceCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DeleteGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGeofenceCollectionWithContext indicates an expected call of DeleteGeofenceCollectionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DeleteGeofenceCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeofenceCollectionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteGeofenceCollectionWithContext), varargs...)
}

// DeleteMap mocks base method.
func (m *MockLocationServiceAPI) DeleteMap(arg0 *locationservice.DeleteMapInput) (*locationservice.DeleteMapOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMap", arg0)
	ret0, _ := ret[0].(*locationservice.DeleteMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMap indicates an expected call of DeleteMap.
func (mr *MockLocationServiceAPIMockRecorder) DeleteMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMap", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteMap), arg0)
}

// DeleteMapRequest mocks base method.
func (m *MockLocationServiceAPI) DeleteMapRequest(arg0 *locationservice.DeleteMapInput) (*request.Request, *locationservice.DeleteMapOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DeleteMapOutput)
	return ret0, ret1
}

// DeleteMapRequest indicates an expected call of DeleteMapRequest.
func (mr *MockLocationServiceAPIMockRecorder) DeleteMapRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteMapRequest), arg0)
}

// DeleteMapWithContext mocks base method.
func (m *MockLocationServiceAPI) DeleteMapWithContext(arg0 context.Context, arg1 *locationservice.DeleteMapInput, arg2 ...request.Option) (*locationservice.DeleteMapOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMapWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DeleteMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMapWithContext indicates an expected call of DeleteMapWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DeleteMapWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteMapWithContext), varargs...)
}

// DeletePlaceIndex mocks base method.
func (m *MockLocationServiceAPI) DeletePlaceIndex(arg0 *locationservice.DeletePlaceIndexInput) (*locationservice.DeletePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaceIndex", arg0)
	ret0, _ := ret[0].(*locationservice.DeletePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlaceIndex indicates an expected call of DeletePlaceIndex.
func (mr *MockLocationServiceAPIMockRecorder) DeletePlaceIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaceIndex", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeletePlaceIndex), arg0)
}

// DeletePlaceIndexRequest mocks base method.
func (m *MockLocationServiceAPI) DeletePlaceIndexRequest(arg0 *locationservice.DeletePlaceIndexInput) (*request.Request, *locationservice.DeletePlaceIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaceIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DeletePlaceIndexOutput)
	return ret0, ret1
}

// DeletePlaceIndexRequest indicates an expected call of DeletePlaceIndexRequest.
func (mr *MockLocationServiceAPIMockRecorder) DeletePlaceIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaceIndexRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeletePlaceIndexRequest), arg0)
}

// DeletePlaceIndexWithContext mocks base method.
func (m *MockLocationServiceAPI) DeletePlaceIndexWithContext(arg0 context.Context, arg1 *locationservice.DeletePlaceIndexInput, arg2 ...request.Option) (*locationservice.DeletePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePlaceIndexWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DeletePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlaceIndexWithContext indicates an expected call of DeletePlaceIndexWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DeletePlaceIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaceIndexWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeletePlaceIndexWithContext), varargs...)
}

// DeleteRouteCalculator mocks base method.
func (m *MockLocationServiceAPI) DeleteRouteCalculator(arg0 *locationservice.DeleteRouteCalculatorInput) (*locationservice.DeleteRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteCalculator", arg0)
	ret0, _ := ret[0].(*locationservice.DeleteRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteCalculator indicates an expected call of DeleteRouteCalculator.
func (mr *MockLocationServiceAPIMockRecorder) DeleteRouteCalculator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteCalculator", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteRouteCalculator), arg0)
}

// DeleteRouteCalculatorRequest mocks base method.
func (m *MockLocationServiceAPI) DeleteRouteCalculatorRequest(arg0 *locationservice.DeleteRouteCalculatorInput) (*request.Request, *locationservice.DeleteRouteCalculatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteCalculatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DeleteRouteCalculatorOutput)
	return ret0, ret1
}

// DeleteRouteCalculatorRequest indicates an expected call of DeleteRouteCalculatorRequest.
func (mr *MockLocationServiceAPIMockRecorder) DeleteRouteCalculatorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteCalculatorRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteRouteCalculatorRequest), arg0)
}

// DeleteRouteCalculatorWithContext mocks base method.
func (m *MockLocationServiceAPI) DeleteRouteCalculatorWithContext(arg0 context.Context, arg1 *locationservice.DeleteRouteCalculatorInput, arg2 ...request.Option) (*locationservice.DeleteRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteCalculatorWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DeleteRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteCalculatorWithContext indicates an expected call of DeleteRouteCalculatorWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DeleteRouteCalculatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteCalculatorWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteRouteCalculatorWithContext), varargs...)
}

// DeleteTracker mocks base method.
func (m *MockLocationServiceAPI) DeleteTracker(arg0 *locationservice.DeleteTrackerInput) (*locationservice.DeleteTrackerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTracker", arg0)
	ret0, _ := ret[0].(*locationservice.DeleteTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracker indicates an expected call of DeleteTracker.
func (mr *MockLocationServiceAPIMockRecorder) DeleteTracker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracker", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteTracker), arg0)
}

// DeleteTrackerRequest mocks base method.
func (m *MockLocationServiceAPI) DeleteTrackerRequest(arg0 *locationservice.DeleteTrackerInput) (*request.Request, *locationservice.DeleteTrackerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrackerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DeleteTrackerOutput)
	return ret0, ret1
}

// DeleteTrackerRequest indicates an expected call of DeleteTrackerRequest.
func (mr *MockLocationServiceAPIMockRecorder) DeleteTrackerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrackerRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteTrackerRequest), arg0)
}

// DeleteTrackerWithContext mocks base method.
func (m *MockLocationServiceAPI) DeleteTrackerWithContext(arg0 context.Context, arg1 *locationservice.DeleteTrackerInput, arg2 ...request.Option) (*locationservice.DeleteTrackerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrackerWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DeleteTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrackerWithContext indicates an expected call of DeleteTrackerWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DeleteTrackerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrackerWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DeleteTrackerWithContext), varargs...)
}

// DescribeGeofenceCollection mocks base method.
func (m *MockLocationServiceAPI) DescribeGeofenceCollection(arg0 *locationservice.DescribeGeofenceCollectionInput) (*locationservice.DescribeGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGeofenceCollection", arg0)
	ret0, _ := ret[0].(*locationservice.DescribeGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGeofenceCollection indicates an expected call of DescribeGeofenceCollection.
func (mr *MockLocationServiceAPIMockRecorder) DescribeGeofenceCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGeofenceCollection", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeGeofenceCollection), arg0)
}

// DescribeGeofenceCollectionRequest mocks base method.
func (m *MockLocationServiceAPI) DescribeGeofenceCollectionRequest(arg0 *locationservice.DescribeGeofenceCollectionInput) (*request.Request, *locationservice.DescribeGeofenceCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGeofenceCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DescribeGeofenceCollectionOutput)
	return ret0, ret1
}

// DescribeGeofenceCollectionRequest indicates an expected call of DescribeGeofenceCollectionRequest.
func (mr *MockLocationServiceAPIMockRecorder) DescribeGeofenceCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGeofenceCollectionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeGeofenceCollectionRequest), arg0)
}

// DescribeGeofenceCollectionWithContext mocks base method.
func (m *MockLocationServiceAPI) DescribeGeofenceCollectionWithContext(arg0 context.Context, arg1 *locationservice.DescribeGeofenceCollectionInput, arg2 ...request.Option) (*locationservice.DescribeGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGeofenceCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DescribeGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGeofenceCollectionWithContext indicates an expected call of DescribeGeofenceCollectionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DescribeGeofenceCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGeofenceCollectionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeGeofenceCollectionWithContext), varargs...)
}

// DescribeMap mocks base method.
func (m *MockLocationServiceAPI) DescribeMap(arg0 *locationservice.DescribeMapInput) (*locationservice.DescribeMapOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMap", arg0)
	ret0, _ := ret[0].(*locationservice.DescribeMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMap indicates an expected call of DescribeMap.
func (mr *MockLocationServiceAPIMockRecorder) DescribeMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMap", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeMap), arg0)
}

// DescribeMapRequest mocks base method.
func (m *MockLocationServiceAPI) DescribeMapRequest(arg0 *locationservice.DescribeMapInput) (*request.Request, *locationservice.DescribeMapOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMapRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DescribeMapOutput)
	return ret0, ret1
}

// DescribeMapRequest indicates an expected call of DescribeMapRequest.
func (mr *MockLocationServiceAPIMockRecorder) DescribeMapRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMapRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeMapRequest), arg0)
}

// DescribeMapWithContext mocks base method.
func (m *MockLocationServiceAPI) DescribeMapWithContext(arg0 context.Context, arg1 *locationservice.DescribeMapInput, arg2 ...request.Option) (*locationservice.DescribeMapOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMapWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DescribeMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMapWithContext indicates an expected call of DescribeMapWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DescribeMapWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMapWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeMapWithContext), varargs...)
}

// DescribePlaceIndex mocks base method.
func (m *MockLocationServiceAPI) DescribePlaceIndex(arg0 *locationservice.DescribePlaceIndexInput) (*locationservice.DescribePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePlaceIndex", arg0)
	ret0, _ := ret[0].(*locationservice.DescribePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePlaceIndex indicates an expected call of DescribePlaceIndex.
func (mr *MockLocationServiceAPIMockRecorder) DescribePlaceIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePlaceIndex", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribePlaceIndex), arg0)
}

// DescribePlaceIndexRequest mocks base method.
func (m *MockLocationServiceAPI) DescribePlaceIndexRequest(arg0 *locationservice.DescribePlaceIndexInput) (*request.Request, *locationservice.DescribePlaceIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePlaceIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DescribePlaceIndexOutput)
	return ret0, ret1
}

// DescribePlaceIndexRequest indicates an expected call of DescribePlaceIndexRequest.
func (mr *MockLocationServiceAPIMockRecorder) DescribePlaceIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePlaceIndexRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribePlaceIndexRequest), arg0)
}

// DescribePlaceIndexWithContext mocks base method.
func (m *MockLocationServiceAPI) DescribePlaceIndexWithContext(arg0 context.Context, arg1 *locationservice.DescribePlaceIndexInput, arg2 ...request.Option) (*locationservice.DescribePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePlaceIndexWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DescribePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePlaceIndexWithContext indicates an expected call of DescribePlaceIndexWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DescribePlaceIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePlaceIndexWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribePlaceIndexWithContext), varargs...)
}

// DescribeRouteCalculator mocks base method.
func (m *MockLocationServiceAPI) DescribeRouteCalculator(arg0 *locationservice.DescribeRouteCalculatorInput) (*locationservice.DescribeRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRouteCalculator", arg0)
	ret0, _ := ret[0].(*locationservice.DescribeRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRouteCalculator indicates an expected call of DescribeRouteCalculator.
func (mr *MockLocationServiceAPIMockRecorder) DescribeRouteCalculator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteCalculator", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeRouteCalculator), arg0)
}

// DescribeRouteCalculatorRequest mocks base method.
func (m *MockLocationServiceAPI) DescribeRouteCalculatorRequest(arg0 *locationservice.DescribeRouteCalculatorInput) (*request.Request, *locationservice.DescribeRouteCalculatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRouteCalculatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DescribeRouteCalculatorOutput)
	return ret0, ret1
}

// DescribeRouteCalculatorRequest indicates an expected call of DescribeRouteCalculatorRequest.
func (mr *MockLocationServiceAPIMockRecorder) DescribeRouteCalculatorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteCalculatorRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeRouteCalculatorRequest), arg0)
}

// DescribeRouteCalculatorWithContext mocks base method.
func (m *MockLocationServiceAPI) DescribeRouteCalculatorWithContext(arg0 context.Context, arg1 *locationservice.DescribeRouteCalculatorInput, arg2 ...request.Option) (*locationservice.DescribeRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRouteCalculatorWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DescribeRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRouteCalculatorWithContext indicates an expected call of DescribeRouteCalculatorWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DescribeRouteCalculatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRouteCalculatorWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeRouteCalculatorWithContext), varargs...)
}

// DescribeTracker mocks base method.
func (m *MockLocationServiceAPI) DescribeTracker(arg0 *locationservice.DescribeTrackerInput) (*locationservice.DescribeTrackerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTracker", arg0)
	ret0, _ := ret[0].(*locationservice.DescribeTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTracker indicates an expected call of DescribeTracker.
func (mr *MockLocationServiceAPIMockRecorder) DescribeTracker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTracker", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeTracker), arg0)
}

// DescribeTrackerRequest mocks base method.
func (m *MockLocationServiceAPI) DescribeTrackerRequest(arg0 *locationservice.DescribeTrackerInput) (*request.Request, *locationservice.DescribeTrackerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTrackerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DescribeTrackerOutput)
	return ret0, ret1
}

// DescribeTrackerRequest indicates an expected call of DescribeTrackerRequest.
func (mr *MockLocationServiceAPIMockRecorder) DescribeTrackerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrackerRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeTrackerRequest), arg0)
}

// DescribeTrackerWithContext mocks base method.
func (m *MockLocationServiceAPI) DescribeTrackerWithContext(arg0 context.Context, arg1 *locationservice.DescribeTrackerInput, arg2 ...request.Option) (*locationservice.DescribeTrackerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrackerWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DescribeTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrackerWithContext indicates an expected call of DescribeTrackerWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DescribeTrackerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrackerWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DescribeTrackerWithContext), varargs...)
}

// DisassociateTrackerConsumer mocks base method.
func (m *MockLocationServiceAPI) DisassociateTrackerConsumer(arg0 *locationservice.DisassociateTrackerConsumerInput) (*locationservice.DisassociateTrackerConsumerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateTrackerConsumer", arg0)
	ret0, _ := ret[0].(*locationservice.DisassociateTrackerConsumerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateTrackerConsumer indicates an expected call of DisassociateTrackerConsumer.
func (mr *MockLocationServiceAPIMockRecorder) DisassociateTrackerConsumer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTrackerConsumer", reflect.TypeOf((*MockLocationServiceAPI)(nil).DisassociateTrackerConsumer), arg0)
}

// DisassociateTrackerConsumerRequest mocks base method.
func (m *MockLocationServiceAPI) DisassociateTrackerConsumerRequest(arg0 *locationservice.DisassociateTrackerConsumerInput) (*request.Request, *locationservice.DisassociateTrackerConsumerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateTrackerConsumerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.DisassociateTrackerConsumerOutput)
	return ret0, ret1
}

// DisassociateTrackerConsumerRequest indicates an expected call of DisassociateTrackerConsumerRequest.
func (mr *MockLocationServiceAPIMockRecorder) DisassociateTrackerConsumerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTrackerConsumerRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).DisassociateTrackerConsumerRequest), arg0)
}

// DisassociateTrackerConsumerWithContext mocks base method.
func (m *MockLocationServiceAPI) DisassociateTrackerConsumerWithContext(arg0 context.Context, arg1 *locationservice.DisassociateTrackerConsumerInput, arg2 ...request.Option) (*locationservice.DisassociateTrackerConsumerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateTrackerConsumerWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.DisassociateTrackerConsumerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateTrackerConsumerWithContext indicates an expected call of DisassociateTrackerConsumerWithContext.
func (mr *MockLocationServiceAPIMockRecorder) DisassociateTrackerConsumerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateTrackerConsumerWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).DisassociateTrackerConsumerWithContext), varargs...)
}

// GetDevicePosition mocks base method.
func (m *MockLocationServiceAPI) GetDevicePosition(arg0 *locationservice.GetDevicePositionInput) (*locationservice.GetDevicePositionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePosition", arg0)
	ret0, _ := ret[0].(*locationservice.GetDevicePositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePosition indicates an expected call of GetDevicePosition.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePosition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePosition", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePosition), arg0)
}

// GetDevicePositionHistory mocks base method.
func (m *MockLocationServiceAPI) GetDevicePositionHistory(arg0 *locationservice.GetDevicePositionHistoryInput) (*locationservice.GetDevicePositionHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePositionHistory", arg0)
	ret0, _ := ret[0].(*locationservice.GetDevicePositionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePositionHistory indicates an expected call of GetDevicePositionHistory.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePositionHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePositionHistory", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePositionHistory), arg0)
}

// GetDevicePositionHistoryPages mocks base method.
func (m *MockLocationServiceAPI) GetDevicePositionHistoryPages(arg0 *locationservice.GetDevicePositionHistoryInput, arg1 func(*locationservice.GetDevicePositionHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePositionHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDevicePositionHistoryPages indicates an expected call of GetDevicePositionHistoryPages.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePositionHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePositionHistoryPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePositionHistoryPages), arg0, arg1)
}

// GetDevicePositionHistoryPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) GetDevicePositionHistoryPagesWithContext(arg0 context.Context, arg1 *locationservice.GetDevicePositionHistoryInput, arg2 func(*locationservice.GetDevicePositionHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevicePositionHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDevicePositionHistoryPagesWithContext indicates an expected call of GetDevicePositionHistoryPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePositionHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePositionHistoryPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePositionHistoryPagesWithContext), varargs...)
}

// GetDevicePositionHistoryRequest mocks base method.
func (m *MockLocationServiceAPI) GetDevicePositionHistoryRequest(arg0 *locationservice.GetDevicePositionHistoryInput) (*request.Request, *locationservice.GetDevicePositionHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePositionHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.GetDevicePositionHistoryOutput)
	return ret0, ret1
}

// GetDevicePositionHistoryRequest indicates an expected call of GetDevicePositionHistoryRequest.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePositionHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePositionHistoryRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePositionHistoryRequest), arg0)
}

// GetDevicePositionHistoryWithContext mocks base method.
func (m *MockLocationServiceAPI) GetDevicePositionHistoryWithContext(arg0 context.Context, arg1 *locationservice.GetDevicePositionHistoryInput, arg2 ...request.Option) (*locationservice.GetDevicePositionHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevicePositionHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.GetDevicePositionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePositionHistoryWithContext indicates an expected call of GetDevicePositionHistoryWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePositionHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePositionHistoryWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePositionHistoryWithContext), varargs...)
}

// GetDevicePositionRequest mocks base method.
func (m *MockLocationServiceAPI) GetDevicePositionRequest(arg0 *locationservice.GetDevicePositionInput) (*request.Request, *locationservice.GetDevicePositionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePositionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.GetDevicePositionOutput)
	return ret0, ret1
}

// GetDevicePositionRequest indicates an expected call of GetDevicePositionRequest.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePositionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePositionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePositionRequest), arg0)
}

// GetDevicePositionWithContext mocks base method.
func (m *MockLocationServiceAPI) GetDevicePositionWithContext(arg0 context.Context, arg1 *locationservice.GetDevicePositionInput, arg2 ...request.Option) (*locationservice.GetDevicePositionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevicePositionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.GetDevicePositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePositionWithContext indicates an expected call of GetDevicePositionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetDevicePositionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePositionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetDevicePositionWithContext), varargs...)
}

// GetGeofence mocks base method.
func (m *MockLocationServiceAPI) GetGeofence(arg0 *locationservice.GetGeofenceInput) (*locationservice.GetGeofenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeofence", arg0)
	ret0, _ := ret[0].(*locationservice.GetGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeofence indicates an expected call of GetGeofence.
func (mr *MockLocationServiceAPIMockRecorder) GetGeofence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeofence", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetGeofence), arg0)
}

// GetGeofenceRequest mocks base method.
func (m *MockLocationServiceAPI) GetGeofenceRequest(arg0 *locationservice.GetGeofenceInput) (*request.Request, *locationservice.GetGeofenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeofenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.GetGeofenceOutput)
	return ret0, ret1
}

// GetGeofenceRequest indicates an expected call of GetGeofenceRequest.
func (mr *MockLocationServiceAPIMockRecorder) GetGeofenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeofenceRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetGeofenceRequest), arg0)
}

// GetGeofenceWithContext mocks base method.
func (m *MockLocationServiceAPI) GetGeofenceWithContext(arg0 context.Context, arg1 *locationservice.GetGeofenceInput, arg2 ...request.Option) (*locationservice.GetGeofenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGeofenceWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.GetGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeofenceWithContext indicates an expected call of GetGeofenceWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetGeofenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeofenceWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetGeofenceWithContext), varargs...)
}

// GetMapGlyphs mocks base method.
func (m *MockLocationServiceAPI) GetMapGlyphs(arg0 *locationservice.GetMapGlyphsInput) (*locationservice.GetMapGlyphsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapGlyphs", arg0)
	ret0, _ := ret[0].(*locationservice.GetMapGlyphsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapGlyphs indicates an expected call of GetMapGlyphs.
func (mr *MockLocationServiceAPIMockRecorder) GetMapGlyphs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapGlyphs", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapGlyphs), arg0)
}

// GetMapGlyphsRequest mocks base method.
func (m *MockLocationServiceAPI) GetMapGlyphsRequest(arg0 *locationservice.GetMapGlyphsInput) (*request.Request, *locationservice.GetMapGlyphsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapGlyphsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.GetMapGlyphsOutput)
	return ret0, ret1
}

// GetMapGlyphsRequest indicates an expected call of GetMapGlyphsRequest.
func (mr *MockLocationServiceAPIMockRecorder) GetMapGlyphsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapGlyphsRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapGlyphsRequest), arg0)
}

// GetMapGlyphsWithContext mocks base method.
func (m *MockLocationServiceAPI) GetMapGlyphsWithContext(arg0 context.Context, arg1 *locationservice.GetMapGlyphsInput, arg2 ...request.Option) (*locationservice.GetMapGlyphsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMapGlyphsWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.GetMapGlyphsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapGlyphsWithContext indicates an expected call of GetMapGlyphsWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetMapGlyphsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapGlyphsWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapGlyphsWithContext), varargs...)
}

// GetMapSprites mocks base method.
func (m *MockLocationServiceAPI) GetMapSprites(arg0 *locationservice.GetMapSpritesInput) (*locationservice.GetMapSpritesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapSprites", arg0)
	ret0, _ := ret[0].(*locationservice.GetMapSpritesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapSprites indicates an expected call of GetMapSprites.
func (mr *MockLocationServiceAPIMockRecorder) GetMapSprites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapSprites", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapSprites), arg0)
}

// GetMapSpritesRequest mocks base method.
func (m *MockLocationServiceAPI) GetMapSpritesRequest(arg0 *locationservice.GetMapSpritesInput) (*request.Request, *locationservice.GetMapSpritesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapSpritesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.GetMapSpritesOutput)
	return ret0, ret1
}

// GetMapSpritesRequest indicates an expected call of GetMapSpritesRequest.
func (mr *MockLocationServiceAPIMockRecorder) GetMapSpritesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapSpritesRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapSpritesRequest), arg0)
}

// GetMapSpritesWithContext mocks base method.
func (m *MockLocationServiceAPI) GetMapSpritesWithContext(arg0 context.Context, arg1 *locationservice.GetMapSpritesInput, arg2 ...request.Option) (*locationservice.GetMapSpritesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMapSpritesWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.GetMapSpritesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapSpritesWithContext indicates an expected call of GetMapSpritesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetMapSpritesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapSpritesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapSpritesWithContext), varargs...)
}

// GetMapStyleDescriptor mocks base method.
func (m *MockLocationServiceAPI) GetMapStyleDescriptor(arg0 *locationservice.GetMapStyleDescriptorInput) (*locationservice.GetMapStyleDescriptorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStyleDescriptor", arg0)
	ret0, _ := ret[0].(*locationservice.GetMapStyleDescriptorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStyleDescriptor indicates an expected call of GetMapStyleDescriptor.
func (mr *MockLocationServiceAPIMockRecorder) GetMapStyleDescriptor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStyleDescriptor", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapStyleDescriptor), arg0)
}

// GetMapStyleDescriptorRequest mocks base method.
func (m *MockLocationServiceAPI) GetMapStyleDescriptorRequest(arg0 *locationservice.GetMapStyleDescriptorInput) (*request.Request, *locationservice.GetMapStyleDescriptorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapStyleDescriptorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.GetMapStyleDescriptorOutput)
	return ret0, ret1
}

// GetMapStyleDescriptorRequest indicates an expected call of GetMapStyleDescriptorRequest.
func (mr *MockLocationServiceAPIMockRecorder) GetMapStyleDescriptorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStyleDescriptorRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapStyleDescriptorRequest), arg0)
}

// GetMapStyleDescriptorWithContext mocks base method.
func (m *MockLocationServiceAPI) GetMapStyleDescriptorWithContext(arg0 context.Context, arg1 *locationservice.GetMapStyleDescriptorInput, arg2 ...request.Option) (*locationservice.GetMapStyleDescriptorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMapStyleDescriptorWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.GetMapStyleDescriptorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapStyleDescriptorWithContext indicates an expected call of GetMapStyleDescriptorWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetMapStyleDescriptorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapStyleDescriptorWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapStyleDescriptorWithContext), varargs...)
}

// GetMapTile mocks base method.
func (m *MockLocationServiceAPI) GetMapTile(arg0 *locationservice.GetMapTileInput) (*locationservice.GetMapTileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapTile", arg0)
	ret0, _ := ret[0].(*locationservice.GetMapTileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapTile indicates an expected call of GetMapTile.
func (mr *MockLocationServiceAPIMockRecorder) GetMapTile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapTile", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapTile), arg0)
}

// GetMapTileRequest mocks base method.
func (m *MockLocationServiceAPI) GetMapTileRequest(arg0 *locationservice.GetMapTileInput) (*request.Request, *locationservice.GetMapTileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapTileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.GetMapTileOutput)
	return ret0, ret1
}

// GetMapTileRequest indicates an expected call of GetMapTileRequest.
func (mr *MockLocationServiceAPIMockRecorder) GetMapTileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapTileRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapTileRequest), arg0)
}

// GetMapTileWithContext mocks base method.
func (m *MockLocationServiceAPI) GetMapTileWithContext(arg0 context.Context, arg1 *locationservice.GetMapTileInput, arg2 ...request.Option) (*locationservice.GetMapTileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMapTileWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.GetMapTileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapTileWithContext indicates an expected call of GetMapTileWithContext.
func (mr *MockLocationServiceAPIMockRecorder) GetMapTileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapTileWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).GetMapTileWithContext), varargs...)
}

// ListDevicePositions mocks base method.
func (m *MockLocationServiceAPI) ListDevicePositions(arg0 *locationservice.ListDevicePositionsInput) (*locationservice.ListDevicePositionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicePositions", arg0)
	ret0, _ := ret[0].(*locationservice.ListDevicePositionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicePositions indicates an expected call of ListDevicePositions.
func (mr *MockLocationServiceAPIMockRecorder) ListDevicePositions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicePositions", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListDevicePositions), arg0)
}

// ListDevicePositionsPages mocks base method.
func (m *MockLocationServiceAPI) ListDevicePositionsPages(arg0 *locationservice.ListDevicePositionsInput, arg1 func(*locationservice.ListDevicePositionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicePositionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicePositionsPages indicates an expected call of ListDevicePositionsPages.
func (mr *MockLocationServiceAPIMockRecorder) ListDevicePositionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicePositionsPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListDevicePositionsPages), arg0, arg1)
}

// ListDevicePositionsPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListDevicePositionsPagesWithContext(arg0 context.Context, arg1 *locationservice.ListDevicePositionsInput, arg2 func(*locationservice.ListDevicePositionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicePositionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicePositionsPagesWithContext indicates an expected call of ListDevicePositionsPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListDevicePositionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicePositionsPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListDevicePositionsPagesWithContext), varargs...)
}

// ListDevicePositionsRequest mocks base method.
func (m *MockLocationServiceAPI) ListDevicePositionsRequest(arg0 *locationservice.ListDevicePositionsInput) (*request.Request, *locationservice.ListDevicePositionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicePositionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListDevicePositionsOutput)
	return ret0, ret1
}

// ListDevicePositionsRequest indicates an expected call of ListDevicePositionsRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListDevicePositionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicePositionsRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListDevicePositionsRequest), arg0)
}

// ListDevicePositionsWithContext mocks base method.
func (m *MockLocationServiceAPI) ListDevicePositionsWithContext(arg0 context.Context, arg1 *locationservice.ListDevicePositionsInput, arg2 ...request.Option) (*locationservice.ListDevicePositionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicePositionsWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListDevicePositionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicePositionsWithContext indicates an expected call of ListDevicePositionsWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListDevicePositionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicePositionsWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListDevicePositionsWithContext), varargs...)
}

// ListGeofenceCollections mocks base method.
func (m *MockLocationServiceAPI) ListGeofenceCollections(arg0 *locationservice.ListGeofenceCollectionsInput) (*locationservice.ListGeofenceCollectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeofenceCollections", arg0)
	ret0, _ := ret[0].(*locationservice.ListGeofenceCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeofenceCollections indicates an expected call of ListGeofenceCollections.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofenceCollections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofenceCollections", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofenceCollections), arg0)
}

// ListGeofenceCollectionsPages mocks base method.
func (m *MockLocationServiceAPI) ListGeofenceCollectionsPages(arg0 *locationservice.ListGeofenceCollectionsInput, arg1 func(*locationservice.ListGeofenceCollectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeofenceCollectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGeofenceCollectionsPages indicates an expected call of ListGeofenceCollectionsPages.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofenceCollectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofenceCollectionsPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofenceCollectionsPages), arg0, arg1)
}

// ListGeofenceCollectionsPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListGeofenceCollectionsPagesWithContext(arg0 context.Context, arg1 *locationservice.ListGeofenceCollectionsInput, arg2 func(*locationservice.ListGeofenceCollectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeofenceCollectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGeofenceCollectionsPagesWithContext indicates an expected call of ListGeofenceCollectionsPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofenceCollectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofenceCollectionsPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofenceCollectionsPagesWithContext), varargs...)
}

// ListGeofenceCollectionsRequest mocks base method.
func (m *MockLocationServiceAPI) ListGeofenceCollectionsRequest(arg0 *locationservice.ListGeofenceCollectionsInput) (*request.Request, *locationservice.ListGeofenceCollectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeofenceCollectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListGeofenceCollectionsOutput)
	return ret0, ret1
}

// ListGeofenceCollectionsRequest indicates an expected call of ListGeofenceCollectionsRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofenceCollectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofenceCollectionsRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofenceCollectionsRequest), arg0)
}

// ListGeofenceCollectionsWithContext mocks base method.
func (m *MockLocationServiceAPI) ListGeofenceCollectionsWithContext(arg0 context.Context, arg1 *locationservice.ListGeofenceCollectionsInput, arg2 ...request.Option) (*locationservice.ListGeofenceCollectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeofenceCollectionsWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListGeofenceCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeofenceCollectionsWithContext indicates an expected call of ListGeofenceCollectionsWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofenceCollectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofenceCollectionsWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofenceCollectionsWithContext), varargs...)
}

// ListGeofences mocks base method.
func (m *MockLocationServiceAPI) ListGeofences(arg0 *locationservice.ListGeofencesInput) (*locationservice.ListGeofencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeofences", arg0)
	ret0, _ := ret[0].(*locationservice.ListGeofencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeofences indicates an expected call of ListGeofences.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofences", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofences), arg0)
}

// ListGeofencesPages mocks base method.
func (m *MockLocationServiceAPI) ListGeofencesPages(arg0 *locationservice.ListGeofencesInput, arg1 func(*locationservice.ListGeofencesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeofencesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGeofencesPages indicates an expected call of ListGeofencesPages.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofencesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofencesPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofencesPages), arg0, arg1)
}

// ListGeofencesPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListGeofencesPagesWithContext(arg0 context.Context, arg1 *locationservice.ListGeofencesInput, arg2 func(*locationservice.ListGeofencesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeofencesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGeofencesPagesWithContext indicates an expected call of ListGeofencesPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofencesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofencesPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofencesPagesWithContext), varargs...)
}

// ListGeofencesRequest mocks base method.
func (m *MockLocationServiceAPI) ListGeofencesRequest(arg0 *locationservice.ListGeofencesInput) (*request.Request, *locationservice.ListGeofencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeofencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListGeofencesOutput)
	return ret0, ret1
}

// ListGeofencesRequest indicates an expected call of ListGeofencesRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofencesRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofencesRequest), arg0)
}

// ListGeofencesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListGeofencesWithContext(arg0 context.Context, arg1 *locationservice.ListGeofencesInput, arg2 ...request.Option) (*locationservice.ListGeofencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeofencesWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListGeofencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeofencesWithContext indicates an expected call of ListGeofencesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListGeofencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeofencesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListGeofencesWithContext), varargs...)
}

// ListMaps mocks base method.
func (m *MockLocationServiceAPI) ListMaps(arg0 *locationservice.ListMapsInput) (*locationservice.ListMapsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMaps", arg0)
	ret0, _ := ret[0].(*locationservice.ListMapsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMaps indicates an expected call of ListMaps.
func (mr *MockLocationServiceAPIMockRecorder) ListMaps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMaps", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListMaps), arg0)
}

// ListMapsPages mocks base method.
func (m *MockLocationServiceAPI) ListMapsPages(arg0 *locationservice.ListMapsInput, arg1 func(*locationservice.ListMapsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMapsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMapsPages indicates an expected call of ListMapsPages.
func (mr *MockLocationServiceAPIMockRecorder) ListMapsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapsPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListMapsPages), arg0, arg1)
}

// ListMapsPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListMapsPagesWithContext(arg0 context.Context, arg1 *locationservice.ListMapsInput, arg2 func(*locationservice.ListMapsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMapsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMapsPagesWithContext indicates an expected call of ListMapsPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListMapsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapsPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListMapsPagesWithContext), varargs...)
}

// ListMapsRequest mocks base method.
func (m *MockLocationServiceAPI) ListMapsRequest(arg0 *locationservice.ListMapsInput) (*request.Request, *locationservice.ListMapsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMapsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListMapsOutput)
	return ret0, ret1
}

// ListMapsRequest indicates an expected call of ListMapsRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListMapsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapsRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListMapsRequest), arg0)
}

// ListMapsWithContext mocks base method.
func (m *MockLocationServiceAPI) ListMapsWithContext(arg0 context.Context, arg1 *locationservice.ListMapsInput, arg2 ...request.Option) (*locationservice.ListMapsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMapsWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListMapsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMapsWithContext indicates an expected call of ListMapsWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListMapsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMapsWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListMapsWithContext), varargs...)
}

// ListPlaceIndexes mocks base method.
func (m *MockLocationServiceAPI) ListPlaceIndexes(arg0 *locationservice.ListPlaceIndexesInput) (*locationservice.ListPlaceIndexesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceIndexes", arg0)
	ret0, _ := ret[0].(*locationservice.ListPlaceIndexesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaceIndexes indicates an expected call of ListPlaceIndexes.
func (mr *MockLocationServiceAPIMockRecorder) ListPlaceIndexes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceIndexes", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListPlaceIndexes), arg0)
}

// ListPlaceIndexesPages mocks base method.
func (m *MockLocationServiceAPI) ListPlaceIndexesPages(arg0 *locationservice.ListPlaceIndexesInput, arg1 func(*locationservice.ListPlaceIndexesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceIndexesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlaceIndexesPages indicates an expected call of ListPlaceIndexesPages.
func (mr *MockLocationServiceAPIMockRecorder) ListPlaceIndexesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceIndexesPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListPlaceIndexesPages), arg0, arg1)
}

// ListPlaceIndexesPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListPlaceIndexesPagesWithContext(arg0 context.Context, arg1 *locationservice.ListPlaceIndexesInput, arg2 func(*locationservice.ListPlaceIndexesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlaceIndexesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPlaceIndexesPagesWithContext indicates an expected call of ListPlaceIndexesPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListPlaceIndexesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceIndexesPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListPlaceIndexesPagesWithContext), varargs...)
}

// ListPlaceIndexesRequest mocks base method.
func (m *MockLocationServiceAPI) ListPlaceIndexesRequest(arg0 *locationservice.ListPlaceIndexesInput) (*request.Request, *locationservice.ListPlaceIndexesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaceIndexesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListPlaceIndexesOutput)
	return ret0, ret1
}

// ListPlaceIndexesRequest indicates an expected call of ListPlaceIndexesRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListPlaceIndexesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceIndexesRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListPlaceIndexesRequest), arg0)
}

// ListPlaceIndexesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListPlaceIndexesWithContext(arg0 context.Context, arg1 *locationservice.ListPlaceIndexesInput, arg2 ...request.Option) (*locationservice.ListPlaceIndexesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlaceIndexesWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListPlaceIndexesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaceIndexesWithContext indicates an expected call of ListPlaceIndexesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListPlaceIndexesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaceIndexesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListPlaceIndexesWithContext), varargs...)
}

// ListRouteCalculators mocks base method.
func (m *MockLocationServiceAPI) ListRouteCalculators(arg0 *locationservice.ListRouteCalculatorsInput) (*locationservice.ListRouteCalculatorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteCalculators", arg0)
	ret0, _ := ret[0].(*locationservice.ListRouteCalculatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteCalculators indicates an expected call of ListRouteCalculators.
func (mr *MockLocationServiceAPIMockRecorder) ListRouteCalculators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteCalculators", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListRouteCalculators), arg0)
}

// ListRouteCalculatorsPages mocks base method.
func (m *MockLocationServiceAPI) ListRouteCalculatorsPages(arg0 *locationservice.ListRouteCalculatorsInput, arg1 func(*locationservice.ListRouteCalculatorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteCalculatorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRouteCalculatorsPages indicates an expected call of ListRouteCalculatorsPages.
func (mr *MockLocationServiceAPIMockRecorder) ListRouteCalculatorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteCalculatorsPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListRouteCalculatorsPages), arg0, arg1)
}

// ListRouteCalculatorsPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListRouteCalculatorsPagesWithContext(arg0 context.Context, arg1 *locationservice.ListRouteCalculatorsInput, arg2 func(*locationservice.ListRouteCalculatorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteCalculatorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRouteCalculatorsPagesWithContext indicates an expected call of ListRouteCalculatorsPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListRouteCalculatorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteCalculatorsPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListRouteCalculatorsPagesWithContext), varargs...)
}

// ListRouteCalculatorsRequest mocks base method.
func (m *MockLocationServiceAPI) ListRouteCalculatorsRequest(arg0 *locationservice.ListRouteCalculatorsInput) (*request.Request, *locationservice.ListRouteCalculatorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouteCalculatorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListRouteCalculatorsOutput)
	return ret0, ret1
}

// ListRouteCalculatorsRequest indicates an expected call of ListRouteCalculatorsRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListRouteCalculatorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteCalculatorsRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListRouteCalculatorsRequest), arg0)
}

// ListRouteCalculatorsWithContext mocks base method.
func (m *MockLocationServiceAPI) ListRouteCalculatorsWithContext(arg0 context.Context, arg1 *locationservice.ListRouteCalculatorsInput, arg2 ...request.Option) (*locationservice.ListRouteCalculatorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRouteCalculatorsWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListRouteCalculatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouteCalculatorsWithContext indicates an expected call of ListRouteCalculatorsWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListRouteCalculatorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouteCalculatorsWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListRouteCalculatorsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockLocationServiceAPI) ListTagsForResource(arg0 *locationservice.ListTagsForResourceInput) (*locationservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*locationservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockLocationServiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockLocationServiceAPI) ListTagsForResourceRequest(arg0 *locationservice.ListTagsForResourceInput) (*request.Request, *locationservice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockLocationServiceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *locationservice.ListTagsForResourceInput, arg2 ...request.Option) (*locationservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTrackerConsumers mocks base method.
func (m *MockLocationServiceAPI) ListTrackerConsumers(arg0 *locationservice.ListTrackerConsumersInput) (*locationservice.ListTrackerConsumersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrackerConsumers", arg0)
	ret0, _ := ret[0].(*locationservice.ListTrackerConsumersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrackerConsumers indicates an expected call of ListTrackerConsumers.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackerConsumers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackerConsumers", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackerConsumers), arg0)
}

// ListTrackerConsumersPages mocks base method.
func (m *MockLocationServiceAPI) ListTrackerConsumersPages(arg0 *locationservice.ListTrackerConsumersInput, arg1 func(*locationservice.ListTrackerConsumersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrackerConsumersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrackerConsumersPages indicates an expected call of ListTrackerConsumersPages.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackerConsumersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackerConsumersPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackerConsumersPages), arg0, arg1)
}

// ListTrackerConsumersPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListTrackerConsumersPagesWithContext(arg0 context.Context, arg1 *locationservice.ListTrackerConsumersInput, arg2 func(*locationservice.ListTrackerConsumersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrackerConsumersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrackerConsumersPagesWithContext indicates an expected call of ListTrackerConsumersPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackerConsumersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackerConsumersPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackerConsumersPagesWithContext), varargs...)
}

// ListTrackerConsumersRequest mocks base method.
func (m *MockLocationServiceAPI) ListTrackerConsumersRequest(arg0 *locationservice.ListTrackerConsumersInput) (*request.Request, *locationservice.ListTrackerConsumersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrackerConsumersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListTrackerConsumersOutput)
	return ret0, ret1
}

// ListTrackerConsumersRequest indicates an expected call of ListTrackerConsumersRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackerConsumersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackerConsumersRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackerConsumersRequest), arg0)
}

// ListTrackerConsumersWithContext mocks base method.
func (m *MockLocationServiceAPI) ListTrackerConsumersWithContext(arg0 context.Context, arg1 *locationservice.ListTrackerConsumersInput, arg2 ...request.Option) (*locationservice.ListTrackerConsumersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrackerConsumersWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListTrackerConsumersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrackerConsumersWithContext indicates an expected call of ListTrackerConsumersWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackerConsumersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackerConsumersWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackerConsumersWithContext), varargs...)
}

// ListTrackers mocks base method.
func (m *MockLocationServiceAPI) ListTrackers(arg0 *locationservice.ListTrackersInput) (*locationservice.ListTrackersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrackers", arg0)
	ret0, _ := ret[0].(*locationservice.ListTrackersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrackers indicates an expected call of ListTrackers.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackers", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackers), arg0)
}

// ListTrackersPages mocks base method.
func (m *MockLocationServiceAPI) ListTrackersPages(arg0 *locationservice.ListTrackersInput, arg1 func(*locationservice.ListTrackersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrackersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrackersPages indicates an expected call of ListTrackersPages.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackersPages", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackersPages), arg0, arg1)
}

// ListTrackersPagesWithContext mocks base method.
func (m *MockLocationServiceAPI) ListTrackersPagesWithContext(arg0 context.Context, arg1 *locationservice.ListTrackersInput, arg2 func(*locationservice.ListTrackersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrackersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTrackersPagesWithContext indicates an expected call of ListTrackersPagesWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackersPagesWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackersPagesWithContext), varargs...)
}

// ListTrackersRequest mocks base method.
func (m *MockLocationServiceAPI) ListTrackersRequest(arg0 *locationservice.ListTrackersInput) (*request.Request, *locationservice.ListTrackersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrackersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.ListTrackersOutput)
	return ret0, ret1
}

// ListTrackersRequest indicates an expected call of ListTrackersRequest.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackersRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackersRequest), arg0)
}

// ListTrackersWithContext mocks base method.
func (m *MockLocationServiceAPI) ListTrackersWithContext(arg0 context.Context, arg1 *locationservice.ListTrackersInput, arg2 ...request.Option) (*locationservice.ListTrackersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrackersWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.ListTrackersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrackersWithContext indicates an expected call of ListTrackersWithContext.
func (mr *MockLocationServiceAPIMockRecorder) ListTrackersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrackersWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).ListTrackersWithContext), varargs...)
}

// PutGeofence mocks base method.
func (m *MockLocationServiceAPI) PutGeofence(arg0 *locationservice.PutGeofenceInput) (*locationservice.PutGeofenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGeofence", arg0)
	ret0, _ := ret[0].(*locationservice.PutGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGeofence indicates an expected call of PutGeofence.
func (mr *MockLocationServiceAPIMockRecorder) PutGeofence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGeofence", reflect.TypeOf((*MockLocationServiceAPI)(nil).PutGeofence), arg0)
}

// PutGeofenceRequest mocks base method.
func (m *MockLocationServiceAPI) PutGeofenceRequest(arg0 *locationservice.PutGeofenceInput) (*request.Request, *locationservice.PutGeofenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGeofenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.PutGeofenceOutput)
	return ret0, ret1
}

// PutGeofenceRequest indicates an expected call of PutGeofenceRequest.
func (mr *MockLocationServiceAPIMockRecorder) PutGeofenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGeofenceRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).PutGeofenceRequest), arg0)
}

// PutGeofenceWithContext mocks base method.
func (m *MockLocationServiceAPI) PutGeofenceWithContext(arg0 context.Context, arg1 *locationservice.PutGeofenceInput, arg2 ...request.Option) (*locationservice.PutGeofenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutGeofenceWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.PutGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGeofenceWithContext indicates an expected call of PutGeofenceWithContext.
func (mr *MockLocationServiceAPIMockRecorder) PutGeofenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGeofenceWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).PutGeofenceWithContext), varargs...)
}

// SearchPlaceIndexForPosition mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForPosition(arg0 *locationservice.SearchPlaceIndexForPositionInput) (*locationservice.SearchPlaceIndexForPositionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaceIndexForPosition", arg0)
	ret0, _ := ret[0].(*locationservice.SearchPlaceIndexForPositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaceIndexForPosition indicates an expected call of SearchPlaceIndexForPosition.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForPosition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForPosition", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForPosition), arg0)
}

// SearchPlaceIndexForPositionRequest mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForPositionRequest(arg0 *locationservice.SearchPlaceIndexForPositionInput) (*request.Request, *locationservice.SearchPlaceIndexForPositionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaceIndexForPositionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.SearchPlaceIndexForPositionOutput)
	return ret0, ret1
}

// SearchPlaceIndexForPositionRequest indicates an expected call of SearchPlaceIndexForPositionRequest.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForPositionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForPositionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForPositionRequest), arg0)
}

// SearchPlaceIndexForPositionWithContext mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForPositionWithContext(arg0 context.Context, arg1 *locationservice.SearchPlaceIndexForPositionInput, arg2 ...request.Option) (*locationservice.SearchPlaceIndexForPositionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPlaceIndexForPositionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.SearchPlaceIndexForPositionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaceIndexForPositionWithContext indicates an expected call of SearchPlaceIndexForPositionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForPositionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForPositionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForPositionWithContext), varargs...)
}

// SearchPlaceIndexForSuggestions mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForSuggestions(arg0 *locationservice.SearchPlaceIndexForSuggestionsInput) (*locationservice.SearchPlaceIndexForSuggestionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaceIndexForSuggestions", arg0)
	ret0, _ := ret[0].(*locationservice.SearchPlaceIndexForSuggestionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaceIndexForSuggestions indicates an expected call of SearchPlaceIndexForSuggestions.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForSuggestions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForSuggestions", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForSuggestions), arg0)
}

// SearchPlaceIndexForSuggestionsRequest mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForSuggestionsRequest(arg0 *locationservice.SearchPlaceIndexForSuggestionsInput) (*request.Request, *locationservice.SearchPlaceIndexForSuggestionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaceIndexForSuggestionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.SearchPlaceIndexForSuggestionsOutput)
	return ret0, ret1
}

// SearchPlaceIndexForSuggestionsRequest indicates an expected call of SearchPlaceIndexForSuggestionsRequest.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForSuggestionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForSuggestionsRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForSuggestionsRequest), arg0)
}

// SearchPlaceIndexForSuggestionsWithContext mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForSuggestionsWithContext(arg0 context.Context, arg1 *locationservice.SearchPlaceIndexForSuggestionsInput, arg2 ...request.Option) (*locationservice.SearchPlaceIndexForSuggestionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPlaceIndexForSuggestionsWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.SearchPlaceIndexForSuggestionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaceIndexForSuggestionsWithContext indicates an expected call of SearchPlaceIndexForSuggestionsWithContext.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForSuggestionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForSuggestionsWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForSuggestionsWithContext), varargs...)
}

// SearchPlaceIndexForText mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForText(arg0 *locationservice.SearchPlaceIndexForTextInput) (*locationservice.SearchPlaceIndexForTextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaceIndexForText", arg0)
	ret0, _ := ret[0].(*locationservice.SearchPlaceIndexForTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaceIndexForText indicates an expected call of SearchPlaceIndexForText.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForText", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForText), arg0)
}

// SearchPlaceIndexForTextRequest mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForTextRequest(arg0 *locationservice.SearchPlaceIndexForTextInput) (*request.Request, *locationservice.SearchPlaceIndexForTextOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaceIndexForTextRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.SearchPlaceIndexForTextOutput)
	return ret0, ret1
}

// SearchPlaceIndexForTextRequest indicates an expected call of SearchPlaceIndexForTextRequest.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForTextRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForTextRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForTextRequest), arg0)
}

// SearchPlaceIndexForTextWithContext mocks base method.
func (m *MockLocationServiceAPI) SearchPlaceIndexForTextWithContext(arg0 context.Context, arg1 *locationservice.SearchPlaceIndexForTextInput, arg2 ...request.Option) (*locationservice.SearchPlaceIndexForTextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPlaceIndexForTextWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.SearchPlaceIndexForTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaceIndexForTextWithContext indicates an expected call of SearchPlaceIndexForTextWithContext.
func (mr *MockLocationServiceAPIMockRecorder) SearchPlaceIndexForTextWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaceIndexForTextWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).SearchPlaceIndexForTextWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockLocationServiceAPI) TagResource(arg0 *locationservice.TagResourceInput) (*locationservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*locationservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockLocationServiceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLocationServiceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockLocationServiceAPI) TagResourceRequest(arg0 *locationservice.TagResourceInput) (*request.Request, *locationservice.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockLocationServiceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockLocationServiceAPI) TagResourceWithContext(arg0 context.Context, arg1 *locationservice.TagResourceInput, arg2 ...request.Option) (*locationservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockLocationServiceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockLocationServiceAPI) UntagResource(arg0 *locationservice.UntagResourceInput) (*locationservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*locationservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockLocationServiceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLocationServiceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockLocationServiceAPI) UntagResourceRequest(arg0 *locationservice.UntagResourceInput) (*request.Request, *locationservice.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockLocationServiceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockLocationServiceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *locationservice.UntagResourceInput, arg2 ...request.Option) (*locationservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockLocationServiceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateGeofenceCollection mocks base method.
func (m *MockLocationServiceAPI) UpdateGeofenceCollection(arg0 *locationservice.UpdateGeofenceCollectionInput) (*locationservice.UpdateGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeofenceCollection", arg0)
	ret0, _ := ret[0].(*locationservice.UpdateGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGeofenceCollection indicates an expected call of UpdateGeofenceCollection.
func (mr *MockLocationServiceAPIMockRecorder) UpdateGeofenceCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeofenceCollection", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateGeofenceCollection), arg0)
}

// UpdateGeofenceCollectionRequest mocks base method.
func (m *MockLocationServiceAPI) UpdateGeofenceCollectionRequest(arg0 *locationservice.UpdateGeofenceCollectionInput) (*request.Request, *locationservice.UpdateGeofenceCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeofenceCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.UpdateGeofenceCollectionOutput)
	return ret0, ret1
}

// UpdateGeofenceCollectionRequest indicates an expected call of UpdateGeofenceCollectionRequest.
func (mr *MockLocationServiceAPIMockRecorder) UpdateGeofenceCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeofenceCollectionRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateGeofenceCollectionRequest), arg0)
}

// UpdateGeofenceCollectionWithContext mocks base method.
func (m *MockLocationServiceAPI) UpdateGeofenceCollectionWithContext(arg0 context.Context, arg1 *locationservice.UpdateGeofenceCollectionInput, arg2 ...request.Option) (*locationservice.UpdateGeofenceCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGeofenceCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.UpdateGeofenceCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGeofenceCollectionWithContext indicates an expected call of UpdateGeofenceCollectionWithContext.
func (mr *MockLocationServiceAPIMockRecorder) UpdateGeofenceCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeofenceCollectionWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateGeofenceCollectionWithContext), varargs...)
}

// UpdateMap mocks base method.
func (m *MockLocationServiceAPI) UpdateMap(arg0 *locationservice.UpdateMapInput) (*locationservice.UpdateMapOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMap", arg0)
	ret0, _ := ret[0].(*locationservice.UpdateMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMap indicates an expected call of UpdateMap.
func (mr *MockLocationServiceAPIMockRecorder) UpdateMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMap", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateMap), arg0)
}

// UpdateMapRequest mocks base method.
func (m *MockLocationServiceAPI) UpdateMapRequest(arg0 *locationservice.UpdateMapInput) (*request.Request, *locationservice.UpdateMapOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.UpdateMapOutput)
	return ret0, ret1
}

// UpdateMapRequest indicates an expected call of UpdateMapRequest.
func (mr *MockLocationServiceAPIMockRecorder) UpdateMapRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateMapRequest), arg0)
}

// UpdateMapWithContext mocks base method.
func (m *MockLocationServiceAPI) UpdateMapWithContext(arg0 context.Context, arg1 *locationservice.UpdateMapInput, arg2 ...request.Option) (*locationservice.UpdateMapOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMapWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.UpdateMapOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapWithContext indicates an expected call of UpdateMapWithContext.
func (mr *MockLocationServiceAPIMockRecorder) UpdateMapWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateMapWithContext), varargs...)
}

// UpdatePlaceIndex mocks base method.
func (m *MockLocationServiceAPI) UpdatePlaceIndex(arg0 *locationservice.UpdatePlaceIndexInput) (*locationservice.UpdatePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaceIndex", arg0)
	ret0, _ := ret[0].(*locationservice.UpdatePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaceIndex indicates an expected call of UpdatePlaceIndex.
func (mr *MockLocationServiceAPIMockRecorder) UpdatePlaceIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaceIndex", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdatePlaceIndex), arg0)
}

// UpdatePlaceIndexRequest mocks base method.
func (m *MockLocationServiceAPI) UpdatePlaceIndexRequest(arg0 *locationservice.UpdatePlaceIndexInput) (*request.Request, *locationservice.UpdatePlaceIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaceIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.UpdatePlaceIndexOutput)
	return ret0, ret1
}

// UpdatePlaceIndexRequest indicates an expected call of UpdatePlaceIndexRequest.
func (mr *MockLocationServiceAPIMockRecorder) UpdatePlaceIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaceIndexRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdatePlaceIndexRequest), arg0)
}

// UpdatePlaceIndexWithContext mocks base method.
func (m *MockLocationServiceAPI) UpdatePlaceIndexWithContext(arg0 context.Context, arg1 *locationservice.UpdatePlaceIndexInput, arg2 ...request.Option) (*locationservice.UpdatePlaceIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePlaceIndexWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.UpdatePlaceIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaceIndexWithContext indicates an expected call of UpdatePlaceIndexWithContext.
func (mr *MockLocationServiceAPIMockRecorder) UpdatePlaceIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaceIndexWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdatePlaceIndexWithContext), varargs...)
}

// UpdateRouteCalculator mocks base method.
func (m *MockLocationServiceAPI) UpdateRouteCalculator(arg0 *locationservice.UpdateRouteCalculatorInput) (*locationservice.UpdateRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteCalculator", arg0)
	ret0, _ := ret[0].(*locationservice.UpdateRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteCalculator indicates an expected call of UpdateRouteCalculator.
func (mr *MockLocationServiceAPIMockRecorder) UpdateRouteCalculator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteCalculator", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateRouteCalculator), arg0)
}

// UpdateRouteCalculatorRequest mocks base method.
func (m *MockLocationServiceAPI) UpdateRouteCalculatorRequest(arg0 *locationservice.UpdateRouteCalculatorInput) (*request.Request, *locationservice.UpdateRouteCalculatorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteCalculatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.UpdateRouteCalculatorOutput)
	return ret0, ret1
}

// UpdateRouteCalculatorRequest indicates an expected call of UpdateRouteCalculatorRequest.
func (mr *MockLocationServiceAPIMockRecorder) UpdateRouteCalculatorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteCalculatorRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateRouteCalculatorRequest), arg0)
}

// UpdateRouteCalculatorWithContext mocks base method.
func (m *MockLocationServiceAPI) UpdateRouteCalculatorWithContext(arg0 context.Context, arg1 *locationservice.UpdateRouteCalculatorInput, arg2 ...request.Option) (*locationservice.UpdateRouteCalculatorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteCalculatorWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.UpdateRouteCalculatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteCalculatorWithContext indicates an expected call of UpdateRouteCalculatorWithContext.
func (mr *MockLocationServiceAPIMockRecorder) UpdateRouteCalculatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteCalculatorWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateRouteCalculatorWithContext), varargs...)
}

// UpdateTracker mocks base method.
func (m *MockLocationServiceAPI) UpdateTracker(arg0 *locationservice.UpdateTrackerInput) (*locationservice.UpdateTrackerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTracker", arg0)
	ret0, _ := ret[0].(*locationservice.UpdateTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTracker indicates an expected call of UpdateTracker.
func (mr *MockLocationServiceAPIMockRecorder) UpdateTracker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTracker", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateTracker), arg0)
}

// UpdateTrackerRequest mocks base method.
func (m *MockLocationServiceAPI) UpdateTrackerRequest(arg0 *locationservice.UpdateTrackerInput) (*request.Request, *locationservice.UpdateTrackerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrackerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*locationservice.UpdateTrackerOutput)
	return ret0, ret1
}

// UpdateTrackerRequest indicates an expected call of UpdateTrackerRequest.
func (mr *MockLocationServiceAPIMockRecorder) UpdateTrackerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrackerRequest", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateTrackerRequest), arg0)
}

// UpdateTrackerWithContext mocks base method.
func (m *MockLocationServiceAPI) UpdateTrackerWithContext(arg0 context.Context, arg1 *locationservice.UpdateTrackerInput, arg2 ...request.Option) (*locationservice.UpdateTrackerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrackerWithContext", varargs...)
	ret0, _ := ret[0].(*locationservice.UpdateTrackerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrackerWithContext indicates an expected call of UpdateTrackerWithContext.
func (mr *MockLocationServiceAPIMockRecorder) UpdateTrackerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrackerWithContext", reflect.TypeOf((*MockLocationServiceAPI)(nil).UpdateTrackerWithContext), varargs...)
}

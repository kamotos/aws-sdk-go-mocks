// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotsitewise/iotsitewiseiface (interfaces: IoTSiteWiseAPI)

// Package iotsitewisemock is a generated GoMock package.
package iotsitewisemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	iotsitewise "github.com/aws/aws-sdk-go/service/iotsitewise"
	gomock "github.com/golang/mock/gomock"
)

// MockIoTSiteWiseAPI is a mock of IoTSiteWiseAPI interface.
type MockIoTSiteWiseAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTSiteWiseAPIMockRecorder
}

// MockIoTSiteWiseAPIMockRecorder is the mock recorder for MockIoTSiteWiseAPI.
type MockIoTSiteWiseAPIMockRecorder struct {
	mock *MockIoTSiteWiseAPI
}

// NewMockIoTSiteWiseAPI creates a new mock instance.
func NewMockIoTSiteWiseAPI(ctrl *gomock.Controller) *MockIoTSiteWiseAPI {
	mock := &MockIoTSiteWiseAPI{ctrl: ctrl}
	mock.recorder = &MockIoTSiteWiseAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoTSiteWiseAPI) EXPECT() *MockIoTSiteWiseAPIMockRecorder {
	return m.recorder
}

// AssociateAssets mocks base method.
func (m *MockIoTSiteWiseAPI) AssociateAssets(arg0 *iotsitewise.AssociateAssetsInput) (*iotsitewise.AssociateAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAssets", arg0)
	ret0, _ := ret[0].(*iotsitewise.AssociateAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAssets indicates an expected call of AssociateAssets.
func (mr *MockIoTSiteWiseAPIMockRecorder) AssociateAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAssets", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).AssociateAssets), arg0)
}

// AssociateAssetsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) AssociateAssetsRequest(arg0 *iotsitewise.AssociateAssetsInput) (*request.Request, *iotsitewise.AssociateAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.AssociateAssetsOutput)
	return ret0, ret1
}

// AssociateAssetsRequest indicates an expected call of AssociateAssetsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) AssociateAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAssetsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).AssociateAssetsRequest), arg0)
}

// AssociateAssetsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) AssociateAssetsWithContext(arg0 context.Context, arg1 *iotsitewise.AssociateAssetsInput, arg2 ...request.Option) (*iotsitewise.AssociateAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.AssociateAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAssetsWithContext indicates an expected call of AssociateAssetsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) AssociateAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAssetsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).AssociateAssetsWithContext), varargs...)
}

// BatchAssociateProjectAssets mocks base method.
func (m *MockIoTSiteWiseAPI) BatchAssociateProjectAssets(arg0 *iotsitewise.BatchAssociateProjectAssetsInput) (*iotsitewise.BatchAssociateProjectAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateProjectAssets", arg0)
	ret0, _ := ret[0].(*iotsitewise.BatchAssociateProjectAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateProjectAssets indicates an expected call of BatchAssociateProjectAssets.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchAssociateProjectAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateProjectAssets", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchAssociateProjectAssets), arg0)
}

// BatchAssociateProjectAssetsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) BatchAssociateProjectAssetsRequest(arg0 *iotsitewise.BatchAssociateProjectAssetsInput) (*request.Request, *iotsitewise.BatchAssociateProjectAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateProjectAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.BatchAssociateProjectAssetsOutput)
	return ret0, ret1
}

// BatchAssociateProjectAssetsRequest indicates an expected call of BatchAssociateProjectAssetsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchAssociateProjectAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateProjectAssetsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchAssociateProjectAssetsRequest), arg0)
}

// BatchAssociateProjectAssetsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) BatchAssociateProjectAssetsWithContext(arg0 context.Context, arg1 *iotsitewise.BatchAssociateProjectAssetsInput, arg2 ...request.Option) (*iotsitewise.BatchAssociateProjectAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAssociateProjectAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.BatchAssociateProjectAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateProjectAssetsWithContext indicates an expected call of BatchAssociateProjectAssetsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchAssociateProjectAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateProjectAssetsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchAssociateProjectAssetsWithContext), varargs...)
}

// BatchDisassociateProjectAssets mocks base method.
func (m *MockIoTSiteWiseAPI) BatchDisassociateProjectAssets(arg0 *iotsitewise.BatchDisassociateProjectAssetsInput) (*iotsitewise.BatchDisassociateProjectAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateProjectAssets", arg0)
	ret0, _ := ret[0].(*iotsitewise.BatchDisassociateProjectAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateProjectAssets indicates an expected call of BatchDisassociateProjectAssets.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchDisassociateProjectAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateProjectAssets", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchDisassociateProjectAssets), arg0)
}

// BatchDisassociateProjectAssetsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) BatchDisassociateProjectAssetsRequest(arg0 *iotsitewise.BatchDisassociateProjectAssetsInput) (*request.Request, *iotsitewise.BatchDisassociateProjectAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateProjectAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.BatchDisassociateProjectAssetsOutput)
	return ret0, ret1
}

// BatchDisassociateProjectAssetsRequest indicates an expected call of BatchDisassociateProjectAssetsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchDisassociateProjectAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateProjectAssetsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchDisassociateProjectAssetsRequest), arg0)
}

// BatchDisassociateProjectAssetsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) BatchDisassociateProjectAssetsWithContext(arg0 context.Context, arg1 *iotsitewise.BatchDisassociateProjectAssetsInput, arg2 ...request.Option) (*iotsitewise.BatchDisassociateProjectAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisassociateProjectAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.BatchDisassociateProjectAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateProjectAssetsWithContext indicates an expected call of BatchDisassociateProjectAssetsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchDisassociateProjectAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateProjectAssetsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchDisassociateProjectAssetsWithContext), varargs...)
}

// BatchPutAssetPropertyValue mocks base method.
func (m *MockIoTSiteWiseAPI) BatchPutAssetPropertyValue(arg0 *iotsitewise.BatchPutAssetPropertyValueInput) (*iotsitewise.BatchPutAssetPropertyValueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutAssetPropertyValue", arg0)
	ret0, _ := ret[0].(*iotsitewise.BatchPutAssetPropertyValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutAssetPropertyValue indicates an expected call of BatchPutAssetPropertyValue.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchPutAssetPropertyValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutAssetPropertyValue", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchPutAssetPropertyValue), arg0)
}

// BatchPutAssetPropertyValueRequest mocks base method.
func (m *MockIoTSiteWiseAPI) BatchPutAssetPropertyValueRequest(arg0 *iotsitewise.BatchPutAssetPropertyValueInput) (*request.Request, *iotsitewise.BatchPutAssetPropertyValueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutAssetPropertyValueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.BatchPutAssetPropertyValueOutput)
	return ret0, ret1
}

// BatchPutAssetPropertyValueRequest indicates an expected call of BatchPutAssetPropertyValueRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchPutAssetPropertyValueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutAssetPropertyValueRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchPutAssetPropertyValueRequest), arg0)
}

// BatchPutAssetPropertyValueWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) BatchPutAssetPropertyValueWithContext(arg0 context.Context, arg1 *iotsitewise.BatchPutAssetPropertyValueInput, arg2 ...request.Option) (*iotsitewise.BatchPutAssetPropertyValueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutAssetPropertyValueWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.BatchPutAssetPropertyValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutAssetPropertyValueWithContext indicates an expected call of BatchPutAssetPropertyValueWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) BatchPutAssetPropertyValueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutAssetPropertyValueWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).BatchPutAssetPropertyValueWithContext), varargs...)
}

// CreateAccessPolicy mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAccessPolicy(arg0 *iotsitewise.CreateAccessPolicyInput) (*iotsitewise.CreateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPolicy", arg0)
	ret0, _ := ret[0].(*iotsitewise.CreateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPolicy indicates an expected call of CreateAccessPolicy.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicy", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAccessPolicy), arg0)
}

// CreateAccessPolicyRequest mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAccessPolicyRequest(arg0 *iotsitewise.CreateAccessPolicyInput) (*request.Request, *iotsitewise.CreateAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.CreateAccessPolicyOutput)
	return ret0, ret1
}

// CreateAccessPolicyRequest indicates an expected call of CreateAccessPolicyRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicyRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAccessPolicyRequest), arg0)
}

// CreateAccessPolicyWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAccessPolicyWithContext(arg0 context.Context, arg1 *iotsitewise.CreateAccessPolicyInput, arg2 ...request.Option) (*iotsitewise.CreateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.CreateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessPolicyWithContext indicates an expected call of CreateAccessPolicyWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessPolicyWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAccessPolicyWithContext), varargs...)
}

// CreateAsset mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAsset(arg0 *iotsitewise.CreateAssetInput) (*iotsitewise.CreateAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", arg0)
	ret0, _ := ret[0].(*iotsitewise.CreateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAsset), arg0)
}

// CreateAssetModel mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAssetModel(arg0 *iotsitewise.CreateAssetModelInput) (*iotsitewise.CreateAssetModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetModel", arg0)
	ret0, _ := ret[0].(*iotsitewise.CreateAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetModel indicates an expected call of CreateAssetModel.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAssetModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetModel", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAssetModel), arg0)
}

// CreateAssetModelRequest mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAssetModelRequest(arg0 *iotsitewise.CreateAssetModelInput) (*request.Request, *iotsitewise.CreateAssetModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.CreateAssetModelOutput)
	return ret0, ret1
}

// CreateAssetModelRequest indicates an expected call of CreateAssetModelRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAssetModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetModelRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAssetModelRequest), arg0)
}

// CreateAssetModelWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAssetModelWithContext(arg0 context.Context, arg1 *iotsitewise.CreateAssetModelInput, arg2 ...request.Option) (*iotsitewise.CreateAssetModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssetModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.CreateAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetModelWithContext indicates an expected call of CreateAssetModelWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAssetModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetModelWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAssetModelWithContext), varargs...)
}

// CreateAssetRequest mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAssetRequest(arg0 *iotsitewise.CreateAssetInput) (*request.Request, *iotsitewise.CreateAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.CreateAssetOutput)
	return ret0, ret1
}

// CreateAssetRequest indicates an expected call of CreateAssetRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAssetRequest), arg0)
}

// CreateAssetWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) CreateAssetWithContext(arg0 context.Context, arg1 *iotsitewise.CreateAssetInput, arg2 ...request.Option) (*iotsitewise.CreateAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssetWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.CreateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetWithContext indicates an expected call of CreateAssetWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateAssetWithContext), varargs...)
}

// CreateDashboard mocks base method.
func (m *MockIoTSiteWiseAPI) CreateDashboard(arg0 *iotsitewise.CreateDashboardInput) (*iotsitewise.CreateDashboardOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboard", arg0)
	ret0, _ := ret[0].(*iotsitewise.CreateDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboard indicates an expected call of CreateDashboard.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateDashboard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboard", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateDashboard), arg0)
}

// CreateDashboardRequest mocks base method.
func (m *MockIoTSiteWiseAPI) CreateDashboardRequest(arg0 *iotsitewise.CreateDashboardInput) (*request.Request, *iotsitewise.CreateDashboardOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.CreateDashboardOutput)
	return ret0, ret1
}

// CreateDashboardRequest indicates an expected call of CreateDashboardRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateDashboardRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateDashboardRequest), arg0)
}

// CreateDashboardWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) CreateDashboardWithContext(arg0 context.Context, arg1 *iotsitewise.CreateDashboardInput, arg2 ...request.Option) (*iotsitewise.CreateDashboardOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDashboardWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.CreateDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboardWithContext indicates an expected call of CreateDashboardWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateDashboardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboardWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateDashboardWithContext), varargs...)
}

// CreateGateway mocks base method.
func (m *MockIoTSiteWiseAPI) CreateGateway(arg0 *iotsitewise.CreateGatewayInput) (*iotsitewise.CreateGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGateway", arg0)
	ret0, _ := ret[0].(*iotsitewise.CreateGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGateway indicates an expected call of CreateGateway.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateGateway), arg0)
}

// CreateGatewayRequest mocks base method.
func (m *MockIoTSiteWiseAPI) CreateGatewayRequest(arg0 *iotsitewise.CreateGatewayInput) (*request.Request, *iotsitewise.CreateGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.CreateGatewayOutput)
	return ret0, ret1
}

// CreateGatewayRequest indicates an expected call of CreateGatewayRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateGatewayRequest), arg0)
}

// CreateGatewayWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) CreateGatewayWithContext(arg0 context.Context, arg1 *iotsitewise.CreateGatewayInput, arg2 ...request.Option) (*iotsitewise.CreateGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.CreateGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGatewayWithContext indicates an expected call of CreateGatewayWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateGatewayWithContext), varargs...)
}

// CreatePortal mocks base method.
func (m *MockIoTSiteWiseAPI) CreatePortal(arg0 *iotsitewise.CreatePortalInput) (*iotsitewise.CreatePortalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortal", arg0)
	ret0, _ := ret[0].(*iotsitewise.CreatePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortal indicates an expected call of CreatePortal.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreatePortal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortal", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreatePortal), arg0)
}

// CreatePortalRequest mocks base method.
func (m *MockIoTSiteWiseAPI) CreatePortalRequest(arg0 *iotsitewise.CreatePortalInput) (*request.Request, *iotsitewise.CreatePortalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePortalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.CreatePortalOutput)
	return ret0, ret1
}

// CreatePortalRequest indicates an expected call of CreatePortalRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreatePortalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreatePortalRequest), arg0)
}

// CreatePortalWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) CreatePortalWithContext(arg0 context.Context, arg1 *iotsitewise.CreatePortalInput, arg2 ...request.Option) (*iotsitewise.CreatePortalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePortalWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.CreatePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePortalWithContext indicates an expected call of CreatePortalWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreatePortalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePortalWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreatePortalWithContext), varargs...)
}

// CreateProject mocks base method.
func (m *MockIoTSiteWiseAPI) CreateProject(arg0 *iotsitewise.CreateProjectInput) (*iotsitewise.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(*iotsitewise.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateProject), arg0)
}

// CreateProjectRequest mocks base method.
func (m *MockIoTSiteWiseAPI) CreateProjectRequest(arg0 *iotsitewise.CreateProjectInput) (*request.Request, *iotsitewise.CreateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.CreateProjectOutput)
	return ret0, ret1
}

// CreateProjectRequest indicates an expected call of CreateProjectRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateProjectRequest), arg0)
}

// CreateProjectWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) CreateProjectWithContext(arg0 context.Context, arg1 *iotsitewise.CreateProjectInput, arg2 ...request.Option) (*iotsitewise.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectWithContext indicates an expected call of CreateProjectWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) CreateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).CreateProjectWithContext), varargs...)
}

// DeleteAccessPolicy mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAccessPolicy(arg0 *iotsitewise.DeleteAccessPolicyInput) (*iotsitewise.DeleteAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPolicy", arg0)
	ret0, _ := ret[0].(*iotsitewise.DeleteAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPolicy indicates an expected call of DeleteAccessPolicy.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicy", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAccessPolicy), arg0)
}

// DeleteAccessPolicyRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAccessPolicyRequest(arg0 *iotsitewise.DeleteAccessPolicyInput) (*request.Request, *iotsitewise.DeleteAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DeleteAccessPolicyOutput)
	return ret0, ret1
}

// DeleteAccessPolicyRequest indicates an expected call of DeleteAccessPolicyRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicyRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAccessPolicyRequest), arg0)
}

// DeleteAccessPolicyWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAccessPolicyWithContext(arg0 context.Context, arg1 *iotsitewise.DeleteAccessPolicyInput, arg2 ...request.Option) (*iotsitewise.DeleteAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DeleteAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessPolicyWithContext indicates an expected call of DeleteAccessPolicyWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessPolicyWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAccessPolicyWithContext), varargs...)
}

// DeleteAsset mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAsset(arg0 *iotsitewise.DeleteAssetInput) (*iotsitewise.DeleteAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", arg0)
	ret0, _ := ret[0].(*iotsitewise.DeleteAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAsset), arg0)
}

// DeleteAssetModel mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAssetModel(arg0 *iotsitewise.DeleteAssetModelInput) (*iotsitewise.DeleteAssetModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetModel", arg0)
	ret0, _ := ret[0].(*iotsitewise.DeleteAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetModel indicates an expected call of DeleteAssetModel.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAssetModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetModel", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAssetModel), arg0)
}

// DeleteAssetModelRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAssetModelRequest(arg0 *iotsitewise.DeleteAssetModelInput) (*request.Request, *iotsitewise.DeleteAssetModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DeleteAssetModelOutput)
	return ret0, ret1
}

// DeleteAssetModelRequest indicates an expected call of DeleteAssetModelRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAssetModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetModelRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAssetModelRequest), arg0)
}

// DeleteAssetModelWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAssetModelWithContext(arg0 context.Context, arg1 *iotsitewise.DeleteAssetModelInput, arg2 ...request.Option) (*iotsitewise.DeleteAssetModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssetModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DeleteAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetModelWithContext indicates an expected call of DeleteAssetModelWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAssetModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetModelWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAssetModelWithContext), varargs...)
}

// DeleteAssetRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAssetRequest(arg0 *iotsitewise.DeleteAssetInput) (*request.Request, *iotsitewise.DeleteAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DeleteAssetOutput)
	return ret0, ret1
}

// DeleteAssetRequest indicates an expected call of DeleteAssetRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAssetRequest), arg0)
}

// DeleteAssetWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteAssetWithContext(arg0 context.Context, arg1 *iotsitewise.DeleteAssetInput, arg2 ...request.Option) (*iotsitewise.DeleteAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssetWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DeleteAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetWithContext indicates an expected call of DeleteAssetWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteAssetWithContext), varargs...)
}

// DeleteDashboard mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteDashboard(arg0 *iotsitewise.DeleteDashboardInput) (*iotsitewise.DeleteDashboardOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDashboard", arg0)
	ret0, _ := ret[0].(*iotsitewise.DeleteDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteDashboard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteDashboard), arg0)
}

// DeleteDashboardRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteDashboardRequest(arg0 *iotsitewise.DeleteDashboardInput) (*request.Request, *iotsitewise.DeleteDashboardOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDashboardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DeleteDashboardOutput)
	return ret0, ret1
}

// DeleteDashboardRequest indicates an expected call of DeleteDashboardRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteDashboardRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboardRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteDashboardRequest), arg0)
}

// DeleteDashboardWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteDashboardWithContext(arg0 context.Context, arg1 *iotsitewise.DeleteDashboardInput, arg2 ...request.Option) (*iotsitewise.DeleteDashboardOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDashboardWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DeleteDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDashboardWithContext indicates an expected call of DeleteDashboardWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteDashboardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboardWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteDashboardWithContext), varargs...)
}

// DeleteGateway mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteGateway(arg0 *iotsitewise.DeleteGatewayInput) (*iotsitewise.DeleteGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGateway", arg0)
	ret0, _ := ret[0].(*iotsitewise.DeleteGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteGateway), arg0)
}

// DeleteGatewayRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteGatewayRequest(arg0 *iotsitewise.DeleteGatewayInput) (*request.Request, *iotsitewise.DeleteGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DeleteGatewayOutput)
	return ret0, ret1
}

// DeleteGatewayRequest indicates an expected call of DeleteGatewayRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteGatewayRequest), arg0)
}

// DeleteGatewayWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteGatewayWithContext(arg0 context.Context, arg1 *iotsitewise.DeleteGatewayInput, arg2 ...request.Option) (*iotsitewise.DeleteGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DeleteGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGatewayWithContext indicates an expected call of DeleteGatewayWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteGatewayWithContext), varargs...)
}

// DeletePortal mocks base method.
func (m *MockIoTSiteWiseAPI) DeletePortal(arg0 *iotsitewise.DeletePortalInput) (*iotsitewise.DeletePortalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortal", arg0)
	ret0, _ := ret[0].(*iotsitewise.DeletePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortal indicates an expected call of DeletePortal.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeletePortal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortal", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeletePortal), arg0)
}

// DeletePortalRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DeletePortalRequest(arg0 *iotsitewise.DeletePortalInput) (*request.Request, *iotsitewise.DeletePortalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePortalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DeletePortalOutput)
	return ret0, ret1
}

// DeletePortalRequest indicates an expected call of DeletePortalRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeletePortalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeletePortalRequest), arg0)
}

// DeletePortalWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DeletePortalWithContext(arg0 context.Context, arg1 *iotsitewise.DeletePortalInput, arg2 ...request.Option) (*iotsitewise.DeletePortalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePortalWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DeletePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePortalWithContext indicates an expected call of DeletePortalWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeletePortalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePortalWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeletePortalWithContext), varargs...)
}

// DeleteProject mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteProject(arg0 *iotsitewise.DeleteProjectInput) (*iotsitewise.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(*iotsitewise.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteProject), arg0)
}

// DeleteProjectRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteProjectRequest(arg0 *iotsitewise.DeleteProjectInput) (*request.Request, *iotsitewise.DeleteProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DeleteProjectOutput)
	return ret0, ret1
}

// DeleteProjectRequest indicates an expected call of DeleteProjectRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteProjectRequest), arg0)
}

// DeleteProjectWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DeleteProjectWithContext(arg0 context.Context, arg1 *iotsitewise.DeleteProjectInput, arg2 ...request.Option) (*iotsitewise.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectWithContext indicates an expected call of DeleteProjectWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DeleteProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DeleteProjectWithContext), varargs...)
}

// DescribeAccessPolicy mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAccessPolicy(arg0 *iotsitewise.DescribeAccessPolicyInput) (*iotsitewise.DescribeAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessPolicy", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessPolicy indicates an expected call of DescribeAccessPolicy.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPolicy", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAccessPolicy), arg0)
}

// DescribeAccessPolicyRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAccessPolicyRequest(arg0 *iotsitewise.DescribeAccessPolicyInput) (*request.Request, *iotsitewise.DescribeAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeAccessPolicyOutput)
	return ret0, ret1
}

// DescribeAccessPolicyRequest indicates an expected call of DescribeAccessPolicyRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPolicyRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAccessPolicyRequest), arg0)
}

// DescribeAccessPolicyWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAccessPolicyWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAccessPolicyInput, arg2 ...request.Option) (*iotsitewise.DescribeAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccessPolicyWithContext indicates an expected call of DescribeAccessPolicyWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccessPolicyWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAccessPolicyWithContext), varargs...)
}

// DescribeAsset mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAsset(arg0 *iotsitewise.DescribeAssetInput) (*iotsitewise.DescribeAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAsset", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAsset indicates an expected call of DescribeAsset.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAsset", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAsset), arg0)
}

// DescribeAssetModel mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetModel(arg0 *iotsitewise.DescribeAssetModelInput) (*iotsitewise.DescribeAssetModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssetModel", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssetModel indicates an expected call of DescribeAssetModel.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetModel", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetModel), arg0)
}

// DescribeAssetModelRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetModelRequest(arg0 *iotsitewise.DescribeAssetModelInput) (*request.Request, *iotsitewise.DescribeAssetModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssetModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeAssetModelOutput)
	return ret0, ret1
}

// DescribeAssetModelRequest indicates an expected call of DescribeAssetModelRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetModelRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetModelRequest), arg0)
}

// DescribeAssetModelWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetModelWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAssetModelInput, arg2 ...request.Option) (*iotsitewise.DescribeAssetModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssetModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssetModelWithContext indicates an expected call of DescribeAssetModelWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetModelWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetModelWithContext), varargs...)
}

// DescribeAssetProperty mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetProperty(arg0 *iotsitewise.DescribeAssetPropertyInput) (*iotsitewise.DescribeAssetPropertyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssetProperty", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeAssetPropertyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssetProperty indicates an expected call of DescribeAssetProperty.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetProperty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetProperty", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetProperty), arg0)
}

// DescribeAssetPropertyRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetPropertyRequest(arg0 *iotsitewise.DescribeAssetPropertyInput) (*request.Request, *iotsitewise.DescribeAssetPropertyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssetPropertyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeAssetPropertyOutput)
	return ret0, ret1
}

// DescribeAssetPropertyRequest indicates an expected call of DescribeAssetPropertyRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetPropertyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetPropertyRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetPropertyRequest), arg0)
}

// DescribeAssetPropertyWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetPropertyWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAssetPropertyInput, arg2 ...request.Option) (*iotsitewise.DescribeAssetPropertyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssetPropertyWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeAssetPropertyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssetPropertyWithContext indicates an expected call of DescribeAssetPropertyWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetPropertyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetPropertyWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetPropertyWithContext), varargs...)
}

// DescribeAssetRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetRequest(arg0 *iotsitewise.DescribeAssetInput) (*request.Request, *iotsitewise.DescribeAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeAssetOutput)
	return ret0, ret1
}

// DescribeAssetRequest indicates an expected call of DescribeAssetRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetRequest), arg0)
}

// DescribeAssetWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeAssetWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAssetInput, arg2 ...request.Option) (*iotsitewise.DescribeAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAssetWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAssetWithContext indicates an expected call of DescribeAssetWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAssetWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeAssetWithContext), varargs...)
}

// DescribeDashboard mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeDashboard(arg0 *iotsitewise.DescribeDashboardInput) (*iotsitewise.DescribeDashboardOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDashboard", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDashboard indicates an expected call of DescribeDashboard.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeDashboard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDashboard", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeDashboard), arg0)
}

// DescribeDashboardRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeDashboardRequest(arg0 *iotsitewise.DescribeDashboardInput) (*request.Request, *iotsitewise.DescribeDashboardOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDashboardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeDashboardOutput)
	return ret0, ret1
}

// DescribeDashboardRequest indicates an expected call of DescribeDashboardRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeDashboardRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDashboardRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeDashboardRequest), arg0)
}

// DescribeDashboardWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeDashboardWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeDashboardInput, arg2 ...request.Option) (*iotsitewise.DescribeDashboardOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDashboardWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDashboardWithContext indicates an expected call of DescribeDashboardWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeDashboardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDashboardWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeDashboardWithContext), varargs...)
}

// DescribeDefaultEncryptionConfiguration mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeDefaultEncryptionConfiguration(arg0 *iotsitewise.DescribeDefaultEncryptionConfigurationInput) (*iotsitewise.DescribeDefaultEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDefaultEncryptionConfiguration", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeDefaultEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultEncryptionConfiguration indicates an expected call of DescribeDefaultEncryptionConfiguration.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeDefaultEncryptionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultEncryptionConfiguration", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeDefaultEncryptionConfiguration), arg0)
}

// DescribeDefaultEncryptionConfigurationRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeDefaultEncryptionConfigurationRequest(arg0 *iotsitewise.DescribeDefaultEncryptionConfigurationInput) (*request.Request, *iotsitewise.DescribeDefaultEncryptionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDefaultEncryptionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeDefaultEncryptionConfigurationOutput)
	return ret0, ret1
}

// DescribeDefaultEncryptionConfigurationRequest indicates an expected call of DescribeDefaultEncryptionConfigurationRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeDefaultEncryptionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultEncryptionConfigurationRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeDefaultEncryptionConfigurationRequest), arg0)
}

// DescribeDefaultEncryptionConfigurationWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeDefaultEncryptionConfigurationWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeDefaultEncryptionConfigurationInput, arg2 ...request.Option) (*iotsitewise.DescribeDefaultEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDefaultEncryptionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeDefaultEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDefaultEncryptionConfigurationWithContext indicates an expected call of DescribeDefaultEncryptionConfigurationWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeDefaultEncryptionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDefaultEncryptionConfigurationWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeDefaultEncryptionConfigurationWithContext), varargs...)
}

// DescribeGateway mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeGateway(arg0 *iotsitewise.DescribeGatewayInput) (*iotsitewise.DescribeGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGateway", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGateway indicates an expected call of DescribeGateway.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGateway", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeGateway), arg0)
}

// DescribeGatewayCapabilityConfiguration mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeGatewayCapabilityConfiguration(arg0 *iotsitewise.DescribeGatewayCapabilityConfigurationInput) (*iotsitewise.DescribeGatewayCapabilityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGatewayCapabilityConfiguration", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeGatewayCapabilityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGatewayCapabilityConfiguration indicates an expected call of DescribeGatewayCapabilityConfiguration.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeGatewayCapabilityConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayCapabilityConfiguration", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeGatewayCapabilityConfiguration), arg0)
}

// DescribeGatewayCapabilityConfigurationRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeGatewayCapabilityConfigurationRequest(arg0 *iotsitewise.DescribeGatewayCapabilityConfigurationInput) (*request.Request, *iotsitewise.DescribeGatewayCapabilityConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGatewayCapabilityConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeGatewayCapabilityConfigurationOutput)
	return ret0, ret1
}

// DescribeGatewayCapabilityConfigurationRequest indicates an expected call of DescribeGatewayCapabilityConfigurationRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeGatewayCapabilityConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayCapabilityConfigurationRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeGatewayCapabilityConfigurationRequest), arg0)
}

// DescribeGatewayCapabilityConfigurationWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeGatewayCapabilityConfigurationWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeGatewayCapabilityConfigurationInput, arg2 ...request.Option) (*iotsitewise.DescribeGatewayCapabilityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGatewayCapabilityConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeGatewayCapabilityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGatewayCapabilityConfigurationWithContext indicates an expected call of DescribeGatewayCapabilityConfigurationWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeGatewayCapabilityConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayCapabilityConfigurationWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeGatewayCapabilityConfigurationWithContext), varargs...)
}

// DescribeGatewayRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeGatewayRequest(arg0 *iotsitewise.DescribeGatewayInput) (*request.Request, *iotsitewise.DescribeGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeGatewayOutput)
	return ret0, ret1
}

// DescribeGatewayRequest indicates an expected call of DescribeGatewayRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeGatewayRequest), arg0)
}

// DescribeGatewayWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeGatewayWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeGatewayInput, arg2 ...request.Option) (*iotsitewise.DescribeGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGatewayWithContext indicates an expected call of DescribeGatewayWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGatewayWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeGatewayWithContext), varargs...)
}

// DescribeLoggingOptions mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeLoggingOptions(arg0 *iotsitewise.DescribeLoggingOptionsInput) (*iotsitewise.DescribeLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingOptions indicates an expected call of DescribeLoggingOptions.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptions", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeLoggingOptions), arg0)
}

// DescribeLoggingOptionsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeLoggingOptionsRequest(arg0 *iotsitewise.DescribeLoggingOptionsInput) (*request.Request, *iotsitewise.DescribeLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeLoggingOptionsOutput)
	return ret0, ret1
}

// DescribeLoggingOptionsRequest indicates an expected call of DescribeLoggingOptionsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptionsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeLoggingOptionsRequest), arg0)
}

// DescribeLoggingOptionsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeLoggingOptionsWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeLoggingOptionsInput, arg2 ...request.Option) (*iotsitewise.DescribeLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingOptionsWithContext indicates an expected call of DescribeLoggingOptionsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptionsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeLoggingOptionsWithContext), varargs...)
}

// DescribePortal mocks base method.
func (m *MockIoTSiteWiseAPI) DescribePortal(arg0 *iotsitewise.DescribePortalInput) (*iotsitewise.DescribePortalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortal", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortal indicates an expected call of DescribePortal.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribePortal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortal", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribePortal), arg0)
}

// DescribePortalRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribePortalRequest(arg0 *iotsitewise.DescribePortalInput) (*request.Request, *iotsitewise.DescribePortalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePortalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribePortalOutput)
	return ret0, ret1
}

// DescribePortalRequest indicates an expected call of DescribePortalRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribePortalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortalRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribePortalRequest), arg0)
}

// DescribePortalWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribePortalWithContext(arg0 context.Context, arg1 *iotsitewise.DescribePortalInput, arg2 ...request.Option) (*iotsitewise.DescribePortalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePortalWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePortalWithContext indicates an expected call of DescribePortalWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribePortalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePortalWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribePortalWithContext), varargs...)
}

// DescribeProject mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeProject(arg0 *iotsitewise.DescribeProjectInput) (*iotsitewise.DescribeProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProject", arg0)
	ret0, _ := ret[0].(*iotsitewise.DescribeProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProject indicates an expected call of DescribeProject.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProject", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeProject), arg0)
}

// DescribeProjectRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeProjectRequest(arg0 *iotsitewise.DescribeProjectInput) (*request.Request, *iotsitewise.DescribeProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DescribeProjectOutput)
	return ret0, ret1
}

// DescribeProjectRequest indicates an expected call of DescribeProjectRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeProjectRequest), arg0)
}

// DescribeProjectWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DescribeProjectWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeProjectInput, arg2 ...request.Option) (*iotsitewise.DescribeProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProjectWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DescribeProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProjectWithContext indicates an expected call of DescribeProjectWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DescribeProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DescribeProjectWithContext), varargs...)
}

// DisassociateAssets mocks base method.
func (m *MockIoTSiteWiseAPI) DisassociateAssets(arg0 *iotsitewise.DisassociateAssetsInput) (*iotsitewise.DisassociateAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAssets", arg0)
	ret0, _ := ret[0].(*iotsitewise.DisassociateAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAssets indicates an expected call of DisassociateAssets.
func (mr *MockIoTSiteWiseAPIMockRecorder) DisassociateAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAssets", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DisassociateAssets), arg0)
}

// DisassociateAssetsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) DisassociateAssetsRequest(arg0 *iotsitewise.DisassociateAssetsInput) (*request.Request, *iotsitewise.DisassociateAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.DisassociateAssetsOutput)
	return ret0, ret1
}

// DisassociateAssetsRequest indicates an expected call of DisassociateAssetsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) DisassociateAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAssetsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DisassociateAssetsRequest), arg0)
}

// DisassociateAssetsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) DisassociateAssetsWithContext(arg0 context.Context, arg1 *iotsitewise.DisassociateAssetsInput, arg2 ...request.Option) (*iotsitewise.DisassociateAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.DisassociateAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAssetsWithContext indicates an expected call of DisassociateAssetsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) DisassociateAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAssetsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).DisassociateAssetsWithContext), varargs...)
}

// GetAssetPropertyAggregates mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyAggregates(arg0 *iotsitewise.GetAssetPropertyAggregatesInput) (*iotsitewise.GetAssetPropertyAggregatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyAggregates", arg0)
	ret0, _ := ret[0].(*iotsitewise.GetAssetPropertyAggregatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPropertyAggregates indicates an expected call of GetAssetPropertyAggregates.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyAggregates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyAggregates", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyAggregates), arg0)
}

// GetAssetPropertyAggregatesPages mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyAggregatesPages(arg0 *iotsitewise.GetAssetPropertyAggregatesInput, arg1 func(*iotsitewise.GetAssetPropertyAggregatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyAggregatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAssetPropertyAggregatesPages indicates an expected call of GetAssetPropertyAggregatesPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyAggregatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyAggregatesPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyAggregatesPages), arg0, arg1)
}

// GetAssetPropertyAggregatesPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyAggregatesPagesWithContext(arg0 context.Context, arg1 *iotsitewise.GetAssetPropertyAggregatesInput, arg2 func(*iotsitewise.GetAssetPropertyAggregatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetPropertyAggregatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAssetPropertyAggregatesPagesWithContext indicates an expected call of GetAssetPropertyAggregatesPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyAggregatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyAggregatesPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyAggregatesPagesWithContext), varargs...)
}

// GetAssetPropertyAggregatesRequest mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyAggregatesRequest(arg0 *iotsitewise.GetAssetPropertyAggregatesInput) (*request.Request, *iotsitewise.GetAssetPropertyAggregatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyAggregatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.GetAssetPropertyAggregatesOutput)
	return ret0, ret1
}

// GetAssetPropertyAggregatesRequest indicates an expected call of GetAssetPropertyAggregatesRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyAggregatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyAggregatesRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyAggregatesRequest), arg0)
}

// GetAssetPropertyAggregatesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyAggregatesWithContext(arg0 context.Context, arg1 *iotsitewise.GetAssetPropertyAggregatesInput, arg2 ...request.Option) (*iotsitewise.GetAssetPropertyAggregatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetPropertyAggregatesWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.GetAssetPropertyAggregatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPropertyAggregatesWithContext indicates an expected call of GetAssetPropertyAggregatesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyAggregatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyAggregatesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyAggregatesWithContext), varargs...)
}

// GetAssetPropertyValue mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValue(arg0 *iotsitewise.GetAssetPropertyValueInput) (*iotsitewise.GetAssetPropertyValueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyValue", arg0)
	ret0, _ := ret[0].(*iotsitewise.GetAssetPropertyValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPropertyValue indicates an expected call of GetAssetPropertyValue.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValue", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValue), arg0)
}

// GetAssetPropertyValueHistory mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValueHistory(arg0 *iotsitewise.GetAssetPropertyValueHistoryInput) (*iotsitewise.GetAssetPropertyValueHistoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyValueHistory", arg0)
	ret0, _ := ret[0].(*iotsitewise.GetAssetPropertyValueHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPropertyValueHistory indicates an expected call of GetAssetPropertyValueHistory.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValueHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValueHistory", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValueHistory), arg0)
}

// GetAssetPropertyValueHistoryPages mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValueHistoryPages(arg0 *iotsitewise.GetAssetPropertyValueHistoryInput, arg1 func(*iotsitewise.GetAssetPropertyValueHistoryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyValueHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAssetPropertyValueHistoryPages indicates an expected call of GetAssetPropertyValueHistoryPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValueHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValueHistoryPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValueHistoryPages), arg0, arg1)
}

// GetAssetPropertyValueHistoryPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValueHistoryPagesWithContext(arg0 context.Context, arg1 *iotsitewise.GetAssetPropertyValueHistoryInput, arg2 func(*iotsitewise.GetAssetPropertyValueHistoryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetPropertyValueHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAssetPropertyValueHistoryPagesWithContext indicates an expected call of GetAssetPropertyValueHistoryPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValueHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValueHistoryPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValueHistoryPagesWithContext), varargs...)
}

// GetAssetPropertyValueHistoryRequest mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValueHistoryRequest(arg0 *iotsitewise.GetAssetPropertyValueHistoryInput) (*request.Request, *iotsitewise.GetAssetPropertyValueHistoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyValueHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.GetAssetPropertyValueHistoryOutput)
	return ret0, ret1
}

// GetAssetPropertyValueHistoryRequest indicates an expected call of GetAssetPropertyValueHistoryRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValueHistoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValueHistoryRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValueHistoryRequest), arg0)
}

// GetAssetPropertyValueHistoryWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValueHistoryWithContext(arg0 context.Context, arg1 *iotsitewise.GetAssetPropertyValueHistoryInput, arg2 ...request.Option) (*iotsitewise.GetAssetPropertyValueHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetPropertyValueHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.GetAssetPropertyValueHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPropertyValueHistoryWithContext indicates an expected call of GetAssetPropertyValueHistoryWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValueHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValueHistoryWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValueHistoryWithContext), varargs...)
}

// GetAssetPropertyValueRequest mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValueRequest(arg0 *iotsitewise.GetAssetPropertyValueInput) (*request.Request, *iotsitewise.GetAssetPropertyValueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPropertyValueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.GetAssetPropertyValueOutput)
	return ret0, ret1
}

// GetAssetPropertyValueRequest indicates an expected call of GetAssetPropertyValueRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValueRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValueRequest), arg0)
}

// GetAssetPropertyValueWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) GetAssetPropertyValueWithContext(arg0 context.Context, arg1 *iotsitewise.GetAssetPropertyValueInput, arg2 ...request.Option) (*iotsitewise.GetAssetPropertyValueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetPropertyValueWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.GetAssetPropertyValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPropertyValueWithContext indicates an expected call of GetAssetPropertyValueWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetAssetPropertyValueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPropertyValueWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetAssetPropertyValueWithContext), varargs...)
}

// GetInterpolatedAssetPropertyValues mocks base method.
func (m *MockIoTSiteWiseAPI) GetInterpolatedAssetPropertyValues(arg0 *iotsitewise.GetInterpolatedAssetPropertyValuesInput) (*iotsitewise.GetInterpolatedAssetPropertyValuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterpolatedAssetPropertyValues", arg0)
	ret0, _ := ret[0].(*iotsitewise.GetInterpolatedAssetPropertyValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterpolatedAssetPropertyValues indicates an expected call of GetInterpolatedAssetPropertyValues.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetInterpolatedAssetPropertyValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterpolatedAssetPropertyValues", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetInterpolatedAssetPropertyValues), arg0)
}

// GetInterpolatedAssetPropertyValuesPages mocks base method.
func (m *MockIoTSiteWiseAPI) GetInterpolatedAssetPropertyValuesPages(arg0 *iotsitewise.GetInterpolatedAssetPropertyValuesInput, arg1 func(*iotsitewise.GetInterpolatedAssetPropertyValuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterpolatedAssetPropertyValuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInterpolatedAssetPropertyValuesPages indicates an expected call of GetInterpolatedAssetPropertyValuesPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetInterpolatedAssetPropertyValuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterpolatedAssetPropertyValuesPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetInterpolatedAssetPropertyValuesPages), arg0, arg1)
}

// GetInterpolatedAssetPropertyValuesPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) GetInterpolatedAssetPropertyValuesPagesWithContext(arg0 context.Context, arg1 *iotsitewise.GetInterpolatedAssetPropertyValuesInput, arg2 func(*iotsitewise.GetInterpolatedAssetPropertyValuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInterpolatedAssetPropertyValuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInterpolatedAssetPropertyValuesPagesWithContext indicates an expected call of GetInterpolatedAssetPropertyValuesPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetInterpolatedAssetPropertyValuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterpolatedAssetPropertyValuesPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetInterpolatedAssetPropertyValuesPagesWithContext), varargs...)
}

// GetInterpolatedAssetPropertyValuesRequest mocks base method.
func (m *MockIoTSiteWiseAPI) GetInterpolatedAssetPropertyValuesRequest(arg0 *iotsitewise.GetInterpolatedAssetPropertyValuesInput) (*request.Request, *iotsitewise.GetInterpolatedAssetPropertyValuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterpolatedAssetPropertyValuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.GetInterpolatedAssetPropertyValuesOutput)
	return ret0, ret1
}

// GetInterpolatedAssetPropertyValuesRequest indicates an expected call of GetInterpolatedAssetPropertyValuesRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetInterpolatedAssetPropertyValuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterpolatedAssetPropertyValuesRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetInterpolatedAssetPropertyValuesRequest), arg0)
}

// GetInterpolatedAssetPropertyValuesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) GetInterpolatedAssetPropertyValuesWithContext(arg0 context.Context, arg1 *iotsitewise.GetInterpolatedAssetPropertyValuesInput, arg2 ...request.Option) (*iotsitewise.GetInterpolatedAssetPropertyValuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInterpolatedAssetPropertyValuesWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.GetInterpolatedAssetPropertyValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterpolatedAssetPropertyValuesWithContext indicates an expected call of GetInterpolatedAssetPropertyValuesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) GetInterpolatedAssetPropertyValuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterpolatedAssetPropertyValuesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).GetInterpolatedAssetPropertyValuesWithContext), varargs...)
}

// ListAccessPolicies mocks base method.
func (m *MockIoTSiteWiseAPI) ListAccessPolicies(arg0 *iotsitewise.ListAccessPoliciesInput) (*iotsitewise.ListAccessPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPolicies", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListAccessPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPolicies indicates an expected call of ListAccessPolicies.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAccessPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPolicies", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAccessPolicies), arg0)
}

// ListAccessPoliciesPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListAccessPoliciesPages(arg0 *iotsitewise.ListAccessPoliciesInput, arg1 func(*iotsitewise.ListAccessPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPoliciesPages indicates an expected call of ListAccessPoliciesPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAccessPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAccessPoliciesPages), arg0, arg1)
}

// ListAccessPoliciesPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAccessPoliciesPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListAccessPoliciesInput, arg2 func(*iotsitewise.ListAccessPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccessPoliciesPagesWithContext indicates an expected call of ListAccessPoliciesPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAccessPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAccessPoliciesPagesWithContext), varargs...)
}

// ListAccessPoliciesRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListAccessPoliciesRequest(arg0 *iotsitewise.ListAccessPoliciesInput) (*request.Request, *iotsitewise.ListAccessPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListAccessPoliciesOutput)
	return ret0, ret1
}

// ListAccessPoliciesRequest indicates an expected call of ListAccessPoliciesRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAccessPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAccessPoliciesRequest), arg0)
}

// ListAccessPoliciesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAccessPoliciesWithContext(arg0 context.Context, arg1 *iotsitewise.ListAccessPoliciesInput, arg2 ...request.Option) (*iotsitewise.ListAccessPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListAccessPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessPoliciesWithContext indicates an expected call of ListAccessPoliciesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAccessPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessPoliciesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAccessPoliciesWithContext), varargs...)
}

// ListAssetModels mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetModels(arg0 *iotsitewise.ListAssetModelsInput) (*iotsitewise.ListAssetModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetModels", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListAssetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetModels indicates an expected call of ListAssetModels.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetModels", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetModels), arg0)
}

// ListAssetModelsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetModelsPages(arg0 *iotsitewise.ListAssetModelsInput, arg1 func(*iotsitewise.ListAssetModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetModelsPages indicates an expected call of ListAssetModelsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetModelsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetModelsPages), arg0, arg1)
}

// ListAssetModelsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetModelsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssetModelsInput, arg2 func(*iotsitewise.ListAssetModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetModelsPagesWithContext indicates an expected call of ListAssetModelsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetModelsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetModelsPagesWithContext), varargs...)
}

// ListAssetModelsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetModelsRequest(arg0 *iotsitewise.ListAssetModelsInput) (*request.Request, *iotsitewise.ListAssetModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListAssetModelsOutput)
	return ret0, ret1
}

// ListAssetModelsRequest indicates an expected call of ListAssetModelsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetModelsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetModelsRequest), arg0)
}

// ListAssetModelsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetModelsWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssetModelsInput, arg2 ...request.Option) (*iotsitewise.ListAssetModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetModelsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListAssetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetModelsWithContext indicates an expected call of ListAssetModelsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetModelsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetModelsWithContext), varargs...)
}

// ListAssetRelationships mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetRelationships(arg0 *iotsitewise.ListAssetRelationshipsInput) (*iotsitewise.ListAssetRelationshipsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetRelationships", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListAssetRelationshipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetRelationships indicates an expected call of ListAssetRelationships.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetRelationships(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRelationships", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetRelationships), arg0)
}

// ListAssetRelationshipsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetRelationshipsPages(arg0 *iotsitewise.ListAssetRelationshipsInput, arg1 func(*iotsitewise.ListAssetRelationshipsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetRelationshipsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetRelationshipsPages indicates an expected call of ListAssetRelationshipsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetRelationshipsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRelationshipsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetRelationshipsPages), arg0, arg1)
}

// ListAssetRelationshipsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetRelationshipsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssetRelationshipsInput, arg2 func(*iotsitewise.ListAssetRelationshipsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetRelationshipsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetRelationshipsPagesWithContext indicates an expected call of ListAssetRelationshipsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetRelationshipsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRelationshipsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetRelationshipsPagesWithContext), varargs...)
}

// ListAssetRelationshipsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetRelationshipsRequest(arg0 *iotsitewise.ListAssetRelationshipsInput) (*request.Request, *iotsitewise.ListAssetRelationshipsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetRelationshipsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListAssetRelationshipsOutput)
	return ret0, ret1
}

// ListAssetRelationshipsRequest indicates an expected call of ListAssetRelationshipsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetRelationshipsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRelationshipsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetRelationshipsRequest), arg0)
}

// ListAssetRelationshipsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetRelationshipsWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssetRelationshipsInput, arg2 ...request.Option) (*iotsitewise.ListAssetRelationshipsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetRelationshipsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListAssetRelationshipsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetRelationshipsWithContext indicates an expected call of ListAssetRelationshipsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetRelationshipsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetRelationshipsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetRelationshipsWithContext), varargs...)
}

// ListAssets mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssets(arg0 *iotsitewise.ListAssetsInput) (*iotsitewise.ListAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssets", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssets indicates an expected call of ListAssets.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssets", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssets), arg0)
}

// ListAssetsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetsPages(arg0 *iotsitewise.ListAssetsInput, arg1 func(*iotsitewise.ListAssetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetsPages indicates an expected call of ListAssetsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetsPages), arg0, arg1)
}

// ListAssetsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssetsInput, arg2 func(*iotsitewise.ListAssetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssetsPagesWithContext indicates an expected call of ListAssetsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetsPagesWithContext), varargs...)
}

// ListAssetsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetsRequest(arg0 *iotsitewise.ListAssetsInput) (*request.Request, *iotsitewise.ListAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListAssetsOutput)
	return ret0, ret1
}

// ListAssetsRequest indicates an expected call of ListAssetsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetsRequest), arg0)
}

// ListAssetsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssetsWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssetsInput, arg2 ...request.Option) (*iotsitewise.ListAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssetsWithContext indicates an expected call of ListAssetsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssetsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssetsWithContext), varargs...)
}

// ListAssociatedAssets mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssociatedAssets(arg0 *iotsitewise.ListAssociatedAssetsInput) (*iotsitewise.ListAssociatedAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedAssets", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListAssociatedAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedAssets indicates an expected call of ListAssociatedAssets.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssociatedAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAssets", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssociatedAssets), arg0)
}

// ListAssociatedAssetsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssociatedAssetsPages(arg0 *iotsitewise.ListAssociatedAssetsInput, arg1 func(*iotsitewise.ListAssociatedAssetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedAssetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedAssetsPages indicates an expected call of ListAssociatedAssetsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssociatedAssetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAssetsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssociatedAssetsPages), arg0, arg1)
}

// ListAssociatedAssetsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssociatedAssetsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssociatedAssetsInput, arg2 func(*iotsitewise.ListAssociatedAssetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedAssetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedAssetsPagesWithContext indicates an expected call of ListAssociatedAssetsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssociatedAssetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAssetsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssociatedAssetsPagesWithContext), varargs...)
}

// ListAssociatedAssetsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssociatedAssetsRequest(arg0 *iotsitewise.ListAssociatedAssetsInput) (*request.Request, *iotsitewise.ListAssociatedAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListAssociatedAssetsOutput)
	return ret0, ret1
}

// ListAssociatedAssetsRequest indicates an expected call of ListAssociatedAssetsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssociatedAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAssetsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssociatedAssetsRequest), arg0)
}

// ListAssociatedAssetsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListAssociatedAssetsWithContext(arg0 context.Context, arg1 *iotsitewise.ListAssociatedAssetsInput, arg2 ...request.Option) (*iotsitewise.ListAssociatedAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListAssociatedAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedAssetsWithContext indicates an expected call of ListAssociatedAssetsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListAssociatedAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAssetsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListAssociatedAssetsWithContext), varargs...)
}

// ListDashboards mocks base method.
func (m *MockIoTSiteWiseAPI) ListDashboards(arg0 *iotsitewise.ListDashboardsInput) (*iotsitewise.ListDashboardsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDashboards", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListDashboardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboards indicates an expected call of ListDashboards.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListDashboards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboards", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListDashboards), arg0)
}

// ListDashboardsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListDashboardsPages(arg0 *iotsitewise.ListDashboardsInput, arg1 func(*iotsitewise.ListDashboardsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDashboardsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDashboardsPages indicates an expected call of ListDashboardsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListDashboardsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboardsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListDashboardsPages), arg0, arg1)
}

// ListDashboardsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListDashboardsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListDashboardsInput, arg2 func(*iotsitewise.ListDashboardsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDashboardsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDashboardsPagesWithContext indicates an expected call of ListDashboardsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListDashboardsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboardsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListDashboardsPagesWithContext), varargs...)
}

// ListDashboardsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListDashboardsRequest(arg0 *iotsitewise.ListDashboardsInput) (*request.Request, *iotsitewise.ListDashboardsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDashboardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListDashboardsOutput)
	return ret0, ret1
}

// ListDashboardsRequest indicates an expected call of ListDashboardsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListDashboardsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboardsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListDashboardsRequest), arg0)
}

// ListDashboardsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListDashboardsWithContext(arg0 context.Context, arg1 *iotsitewise.ListDashboardsInput, arg2 ...request.Option) (*iotsitewise.ListDashboardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDashboardsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListDashboardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboardsWithContext indicates an expected call of ListDashboardsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListDashboardsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboardsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListDashboardsWithContext), varargs...)
}

// ListGateways mocks base method.
func (m *MockIoTSiteWiseAPI) ListGateways(arg0 *iotsitewise.ListGatewaysInput) (*iotsitewise.ListGatewaysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGateways", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGateways indicates an expected call of ListGateways.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListGateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGateways", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListGateways), arg0)
}

// ListGatewaysPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListGatewaysPages(arg0 *iotsitewise.ListGatewaysInput, arg1 func(*iotsitewise.ListGatewaysOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewaysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGatewaysPages indicates an expected call of ListGatewaysPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListGatewaysPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListGatewaysPages), arg0, arg1)
}

// ListGatewaysPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListGatewaysPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListGatewaysInput, arg2 func(*iotsitewise.ListGatewaysOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewaysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGatewaysPagesWithContext indicates an expected call of ListGatewaysPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListGatewaysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListGatewaysPagesWithContext), varargs...)
}

// ListGatewaysRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListGatewaysRequest(arg0 *iotsitewise.ListGatewaysInput) (*request.Request, *iotsitewise.ListGatewaysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewaysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListGatewaysOutput)
	return ret0, ret1
}

// ListGatewaysRequest indicates an expected call of ListGatewaysRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListGatewaysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListGatewaysRequest), arg0)
}

// ListGatewaysWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListGatewaysWithContext(arg0 context.Context, arg1 *iotsitewise.ListGatewaysInput, arg2 ...request.Option) (*iotsitewise.ListGatewaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewaysWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListGatewaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewaysWithContext indicates an expected call of ListGatewaysWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListGatewaysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewaysWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListGatewaysWithContext), varargs...)
}

// ListPortals mocks base method.
func (m *MockIoTSiteWiseAPI) ListPortals(arg0 *iotsitewise.ListPortalsInput) (*iotsitewise.ListPortalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortals", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListPortalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortals indicates an expected call of ListPortals.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListPortals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortals", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListPortals), arg0)
}

// ListPortalsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListPortalsPages(arg0 *iotsitewise.ListPortalsInput, arg1 func(*iotsitewise.ListPortalsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortalsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortalsPages indicates an expected call of ListPortalsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListPortalsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListPortalsPages), arg0, arg1)
}

// ListPortalsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListPortalsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListPortalsInput, arg2 func(*iotsitewise.ListPortalsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortalsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPortalsPagesWithContext indicates an expected call of ListPortalsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListPortalsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListPortalsPagesWithContext), varargs...)
}

// ListPortalsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListPortalsRequest(arg0 *iotsitewise.ListPortalsInput) (*request.Request, *iotsitewise.ListPortalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPortalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListPortalsOutput)
	return ret0, ret1
}

// ListPortalsRequest indicates an expected call of ListPortalsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListPortalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListPortalsRequest), arg0)
}

// ListPortalsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListPortalsWithContext(arg0 context.Context, arg1 *iotsitewise.ListPortalsInput, arg2 ...request.Option) (*iotsitewise.ListPortalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPortalsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListPortalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPortalsWithContext indicates an expected call of ListPortalsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListPortalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPortalsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListPortalsWithContext), varargs...)
}

// ListProjectAssets mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectAssets(arg0 *iotsitewise.ListProjectAssetsInput) (*iotsitewise.ListProjectAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectAssets", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListProjectAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectAssets indicates an expected call of ListProjectAssets.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAssets", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectAssets), arg0)
}

// ListProjectAssetsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectAssetsPages(arg0 *iotsitewise.ListProjectAssetsInput, arg1 func(*iotsitewise.ListProjectAssetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectAssetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectAssetsPages indicates an expected call of ListProjectAssetsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectAssetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAssetsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectAssetsPages), arg0, arg1)
}

// ListProjectAssetsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectAssetsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListProjectAssetsInput, arg2 func(*iotsitewise.ListProjectAssetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectAssetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectAssetsPagesWithContext indicates an expected call of ListProjectAssetsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectAssetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAssetsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectAssetsPagesWithContext), varargs...)
}

// ListProjectAssetsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectAssetsRequest(arg0 *iotsitewise.ListProjectAssetsInput) (*request.Request, *iotsitewise.ListProjectAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListProjectAssetsOutput)
	return ret0, ret1
}

// ListProjectAssetsRequest indicates an expected call of ListProjectAssetsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAssetsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectAssetsRequest), arg0)
}

// ListProjectAssetsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectAssetsWithContext(arg0 context.Context, arg1 *iotsitewise.ListProjectAssetsInput, arg2 ...request.Option) (*iotsitewise.ListProjectAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListProjectAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectAssetsWithContext indicates an expected call of ListProjectAssetsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAssetsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectAssetsWithContext), varargs...)
}

// ListProjects mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjects(arg0 *iotsitewise.ListProjectsInput) (*iotsitewise.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjects), arg0)
}

// ListProjectsPages mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectsPages(arg0 *iotsitewise.ListProjectsInput, arg1 func(*iotsitewise.ListProjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPages indicates an expected call of ListProjectsPages.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPages", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectsPages), arg0, arg1)
}

// ListProjectsPagesWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectsPagesWithContext(arg0 context.Context, arg1 *iotsitewise.ListProjectsInput, arg2 func(*iotsitewise.ListProjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPagesWithContext indicates an expected call of ListProjectsPagesWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPagesWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectsPagesWithContext), varargs...)
}

// ListProjectsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectsRequest(arg0 *iotsitewise.ListProjectsInput) (*request.Request, *iotsitewise.ListProjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListProjectsOutput)
	return ret0, ret1
}

// ListProjectsRequest indicates an expected call of ListProjectsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectsRequest), arg0)
}

// ListProjectsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListProjectsWithContext(arg0 context.Context, arg1 *iotsitewise.ListProjectsInput, arg2 ...request.Option) (*iotsitewise.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsWithContext indicates an expected call of ListProjectsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListProjectsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockIoTSiteWiseAPI) ListTagsForResource(arg0 *iotsitewise.ListTagsForResourceInput) (*iotsitewise.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*iotsitewise.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockIoTSiteWiseAPI) ListTagsForResourceRequest(arg0 *iotsitewise.ListTagsForResourceInput) (*request.Request, *iotsitewise.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *iotsitewise.ListTagsForResourceInput, arg2 ...request.Option) (*iotsitewise.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutDefaultEncryptionConfiguration mocks base method.
func (m *MockIoTSiteWiseAPI) PutDefaultEncryptionConfiguration(arg0 *iotsitewise.PutDefaultEncryptionConfigurationInput) (*iotsitewise.PutDefaultEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDefaultEncryptionConfiguration", arg0)
	ret0, _ := ret[0].(*iotsitewise.PutDefaultEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDefaultEncryptionConfiguration indicates an expected call of PutDefaultEncryptionConfiguration.
func (mr *MockIoTSiteWiseAPIMockRecorder) PutDefaultEncryptionConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDefaultEncryptionConfiguration", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).PutDefaultEncryptionConfiguration), arg0)
}

// PutDefaultEncryptionConfigurationRequest mocks base method.
func (m *MockIoTSiteWiseAPI) PutDefaultEncryptionConfigurationRequest(arg0 *iotsitewise.PutDefaultEncryptionConfigurationInput) (*request.Request, *iotsitewise.PutDefaultEncryptionConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDefaultEncryptionConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.PutDefaultEncryptionConfigurationOutput)
	return ret0, ret1
}

// PutDefaultEncryptionConfigurationRequest indicates an expected call of PutDefaultEncryptionConfigurationRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) PutDefaultEncryptionConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDefaultEncryptionConfigurationRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).PutDefaultEncryptionConfigurationRequest), arg0)
}

// PutDefaultEncryptionConfigurationWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) PutDefaultEncryptionConfigurationWithContext(arg0 context.Context, arg1 *iotsitewise.PutDefaultEncryptionConfigurationInput, arg2 ...request.Option) (*iotsitewise.PutDefaultEncryptionConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDefaultEncryptionConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.PutDefaultEncryptionConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDefaultEncryptionConfigurationWithContext indicates an expected call of PutDefaultEncryptionConfigurationWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) PutDefaultEncryptionConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDefaultEncryptionConfigurationWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).PutDefaultEncryptionConfigurationWithContext), varargs...)
}

// PutLoggingOptions mocks base method.
func (m *MockIoTSiteWiseAPI) PutLoggingOptions(arg0 *iotsitewise.PutLoggingOptionsInput) (*iotsitewise.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotsitewise.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptions indicates an expected call of PutLoggingOptions.
func (mr *MockIoTSiteWiseAPIMockRecorder) PutLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptions", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).PutLoggingOptions), arg0)
}

// PutLoggingOptionsRequest mocks base method.
func (m *MockIoTSiteWiseAPI) PutLoggingOptionsRequest(arg0 *iotsitewise.PutLoggingOptionsInput) (*request.Request, *iotsitewise.PutLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.PutLoggingOptionsOutput)
	return ret0, ret1
}

// PutLoggingOptionsRequest indicates an expected call of PutLoggingOptionsRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) PutLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).PutLoggingOptionsRequest), arg0)
}

// PutLoggingOptionsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) PutLoggingOptionsWithContext(arg0 context.Context, arg1 *iotsitewise.PutLoggingOptionsInput, arg2 ...request.Option) (*iotsitewise.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptionsWithContext indicates an expected call of PutLoggingOptionsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) PutLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).PutLoggingOptionsWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockIoTSiteWiseAPI) TagResource(arg0 *iotsitewise.TagResourceInput) (*iotsitewise.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*iotsitewise.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockIoTSiteWiseAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockIoTSiteWiseAPI) TagResourceRequest(arg0 *iotsitewise.TagResourceInput) (*request.Request, *iotsitewise.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) TagResourceWithContext(arg0 context.Context, arg1 *iotsitewise.TagResourceInput, arg2 ...request.Option) (*iotsitewise.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockIoTSiteWiseAPI) UntagResource(arg0 *iotsitewise.UntagResourceInput) (*iotsitewise.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*iotsitewise.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockIoTSiteWiseAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UntagResourceRequest(arg0 *iotsitewise.UntagResourceInput) (*request.Request, *iotsitewise.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UntagResourceWithContext(arg0 context.Context, arg1 *iotsitewise.UntagResourceInput, arg2 ...request.Option) (*iotsitewise.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAccessPolicy mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAccessPolicy(arg0 *iotsitewise.UpdateAccessPolicyInput) (*iotsitewise.UpdateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessPolicy", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessPolicy indicates an expected call of UpdateAccessPolicy.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAccessPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicy", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAccessPolicy), arg0)
}

// UpdateAccessPolicyRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAccessPolicyRequest(arg0 *iotsitewise.UpdateAccessPolicyInput) (*request.Request, *iotsitewise.UpdateAccessPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateAccessPolicyOutput)
	return ret0, ret1
}

// UpdateAccessPolicyRequest indicates an expected call of UpdateAccessPolicyRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAccessPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAccessPolicyRequest), arg0)
}

// UpdateAccessPolicyWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAccessPolicyWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateAccessPolicyInput, arg2 ...request.Option) (*iotsitewise.UpdateAccessPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccessPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateAccessPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessPolicyWithContext indicates an expected call of UpdateAccessPolicyWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAccessPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPolicyWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAccessPolicyWithContext), varargs...)
}

// UpdateAsset mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAsset(arg0 *iotsitewise.UpdateAssetInput) (*iotsitewise.UpdateAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAsset), arg0)
}

// UpdateAssetModel mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetModel(arg0 *iotsitewise.UpdateAssetModelInput) (*iotsitewise.UpdateAssetModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetModel", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetModel indicates an expected call of UpdateAssetModel.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetModel", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetModel), arg0)
}

// UpdateAssetModelRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetModelRequest(arg0 *iotsitewise.UpdateAssetModelInput) (*request.Request, *iotsitewise.UpdateAssetModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateAssetModelOutput)
	return ret0, ret1
}

// UpdateAssetModelRequest indicates an expected call of UpdateAssetModelRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetModelRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetModelRequest), arg0)
}

// UpdateAssetModelWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetModelWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateAssetModelInput, arg2 ...request.Option) (*iotsitewise.UpdateAssetModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssetModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateAssetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetModelWithContext indicates an expected call of UpdateAssetModelWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetModelWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetModelWithContext), varargs...)
}

// UpdateAssetProperty mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetProperty(arg0 *iotsitewise.UpdateAssetPropertyInput) (*iotsitewise.UpdateAssetPropertyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetProperty", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateAssetPropertyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetProperty indicates an expected call of UpdateAssetProperty.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetProperty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetProperty", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetProperty), arg0)
}

// UpdateAssetPropertyRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetPropertyRequest(arg0 *iotsitewise.UpdateAssetPropertyInput) (*request.Request, *iotsitewise.UpdateAssetPropertyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetPropertyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateAssetPropertyOutput)
	return ret0, ret1
}

// UpdateAssetPropertyRequest indicates an expected call of UpdateAssetPropertyRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetPropertyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetPropertyRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetPropertyRequest), arg0)
}

// UpdateAssetPropertyWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetPropertyWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateAssetPropertyInput, arg2 ...request.Option) (*iotsitewise.UpdateAssetPropertyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssetPropertyWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateAssetPropertyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetPropertyWithContext indicates an expected call of UpdateAssetPropertyWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetPropertyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetPropertyWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetPropertyWithContext), varargs...)
}

// UpdateAssetRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetRequest(arg0 *iotsitewise.UpdateAssetInput) (*request.Request, *iotsitewise.UpdateAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateAssetOutput)
	return ret0, ret1
}

// UpdateAssetRequest indicates an expected call of UpdateAssetRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetRequest), arg0)
}

// UpdateAssetWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateAssetWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateAssetInput, arg2 ...request.Option) (*iotsitewise.UpdateAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssetWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetWithContext indicates an expected call of UpdateAssetWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateAssetWithContext), varargs...)
}

// UpdateDashboard mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateDashboard(arg0 *iotsitewise.UpdateDashboardInput) (*iotsitewise.UpdateDashboardOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDashboard", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDashboard indicates an expected call of UpdateDashboard.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateDashboard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDashboard", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateDashboard), arg0)
}

// UpdateDashboardRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateDashboardRequest(arg0 *iotsitewise.UpdateDashboardInput) (*request.Request, *iotsitewise.UpdateDashboardOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDashboardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateDashboardOutput)
	return ret0, ret1
}

// UpdateDashboardRequest indicates an expected call of UpdateDashboardRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateDashboardRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDashboardRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateDashboardRequest), arg0)
}

// UpdateDashboardWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateDashboardWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateDashboardInput, arg2 ...request.Option) (*iotsitewise.UpdateDashboardOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDashboardWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDashboardWithContext indicates an expected call of UpdateDashboardWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateDashboardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDashboardWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateDashboardWithContext), varargs...)
}

// UpdateGateway mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateGateway(arg0 *iotsitewise.UpdateGatewayInput) (*iotsitewise.UpdateGatewayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGateway", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGateway indicates an expected call of UpdateGateway.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateGateway(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGateway", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateGateway), arg0)
}

// UpdateGatewayCapabilityConfiguration mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateGatewayCapabilityConfiguration(arg0 *iotsitewise.UpdateGatewayCapabilityConfigurationInput) (*iotsitewise.UpdateGatewayCapabilityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayCapabilityConfiguration", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateGatewayCapabilityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGatewayCapabilityConfiguration indicates an expected call of UpdateGatewayCapabilityConfiguration.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateGatewayCapabilityConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayCapabilityConfiguration", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateGatewayCapabilityConfiguration), arg0)
}

// UpdateGatewayCapabilityConfigurationRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateGatewayCapabilityConfigurationRequest(arg0 *iotsitewise.UpdateGatewayCapabilityConfigurationInput) (*request.Request, *iotsitewise.UpdateGatewayCapabilityConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayCapabilityConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateGatewayCapabilityConfigurationOutput)
	return ret0, ret1
}

// UpdateGatewayCapabilityConfigurationRequest indicates an expected call of UpdateGatewayCapabilityConfigurationRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateGatewayCapabilityConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayCapabilityConfigurationRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateGatewayCapabilityConfigurationRequest), arg0)
}

// UpdateGatewayCapabilityConfigurationWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateGatewayCapabilityConfigurationWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateGatewayCapabilityConfigurationInput, arg2 ...request.Option) (*iotsitewise.UpdateGatewayCapabilityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayCapabilityConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateGatewayCapabilityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGatewayCapabilityConfigurationWithContext indicates an expected call of UpdateGatewayCapabilityConfigurationWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateGatewayCapabilityConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayCapabilityConfigurationWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateGatewayCapabilityConfigurationWithContext), varargs...)
}

// UpdateGatewayRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateGatewayRequest(arg0 *iotsitewise.UpdateGatewayInput) (*request.Request, *iotsitewise.UpdateGatewayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGatewayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateGatewayOutput)
	return ret0, ret1
}

// UpdateGatewayRequest indicates an expected call of UpdateGatewayRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateGatewayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateGatewayRequest), arg0)
}

// UpdateGatewayWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateGatewayWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateGatewayInput, arg2 ...request.Option) (*iotsitewise.UpdateGatewayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateGatewayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGatewayWithContext indicates an expected call of UpdateGatewayWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateGatewayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateGatewayWithContext), varargs...)
}

// UpdatePortal mocks base method.
func (m *MockIoTSiteWiseAPI) UpdatePortal(arg0 *iotsitewise.UpdatePortalInput) (*iotsitewise.UpdatePortalOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortal", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdatePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortal indicates an expected call of UpdatePortal.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdatePortal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortal", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdatePortal), arg0)
}

// UpdatePortalRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdatePortalRequest(arg0 *iotsitewise.UpdatePortalInput) (*request.Request, *iotsitewise.UpdatePortalOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePortalRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdatePortalOutput)
	return ret0, ret1
}

// UpdatePortalRequest indicates an expected call of UpdatePortalRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdatePortalRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdatePortalRequest), arg0)
}

// UpdatePortalWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdatePortalWithContext(arg0 context.Context, arg1 *iotsitewise.UpdatePortalInput, arg2 ...request.Option) (*iotsitewise.UpdatePortalOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePortalWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdatePortalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortalWithContext indicates an expected call of UpdatePortalWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdatePortalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortalWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdatePortalWithContext), varargs...)
}

// UpdateProject mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateProject(arg0 *iotsitewise.UpdateProjectInput) (*iotsitewise.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0)
	ret0, _ := ret[0].(*iotsitewise.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateProject), arg0)
}

// UpdateProjectRequest mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateProjectRequest(arg0 *iotsitewise.UpdateProjectInput) (*request.Request, *iotsitewise.UpdateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotsitewise.UpdateProjectOutput)
	return ret0, ret1
}

// UpdateProjectRequest indicates an expected call of UpdateProjectRequest.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectRequest", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateProjectRequest), arg0)
}

// UpdateProjectWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) UpdateProjectWithContext(arg0 context.Context, arg1 *iotsitewise.UpdateProjectInput, arg2 ...request.Option) (*iotsitewise.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*iotsitewise.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectWithContext indicates an expected call of UpdateProjectWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) UpdateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).UpdateProjectWithContext), varargs...)
}

// WaitUntilAssetActive mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetActive(arg0 *iotsitewise.DescribeAssetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAssetActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetActive indicates an expected call of WaitUntilAssetActive.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetActive", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetActive), arg0)
}

// WaitUntilAssetActiveWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetActiveWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAssetInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAssetActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetActiveWithContext indicates an expected call of WaitUntilAssetActiveWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetActiveWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetActiveWithContext), varargs...)
}

// WaitUntilAssetModelActive mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetModelActive(arg0 *iotsitewise.DescribeAssetModelInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAssetModelActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetModelActive indicates an expected call of WaitUntilAssetModelActive.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetModelActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetModelActive", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetModelActive), arg0)
}

// WaitUntilAssetModelActiveWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetModelActiveWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAssetModelInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAssetModelActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetModelActiveWithContext indicates an expected call of WaitUntilAssetModelActiveWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetModelActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetModelActiveWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetModelActiveWithContext), varargs...)
}

// WaitUntilAssetModelNotExists mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetModelNotExists(arg0 *iotsitewise.DescribeAssetModelInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAssetModelNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetModelNotExists indicates an expected call of WaitUntilAssetModelNotExists.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetModelNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetModelNotExists", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetModelNotExists), arg0)
}

// WaitUntilAssetModelNotExistsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetModelNotExistsWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAssetModelInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAssetModelNotExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetModelNotExistsWithContext indicates an expected call of WaitUntilAssetModelNotExistsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetModelNotExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetModelNotExistsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetModelNotExistsWithContext), varargs...)
}

// WaitUntilAssetNotExists mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetNotExists(arg0 *iotsitewise.DescribeAssetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAssetNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetNotExists indicates an expected call of WaitUntilAssetNotExists.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetNotExists", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetNotExists), arg0)
}

// WaitUntilAssetNotExistsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilAssetNotExistsWithContext(arg0 context.Context, arg1 *iotsitewise.DescribeAssetInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAssetNotExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAssetNotExistsWithContext indicates an expected call of WaitUntilAssetNotExistsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilAssetNotExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAssetNotExistsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilAssetNotExistsWithContext), varargs...)
}

// WaitUntilPortalActive mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilPortalActive(arg0 *iotsitewise.DescribePortalInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilPortalActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilPortalActive indicates an expected call of WaitUntilPortalActive.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilPortalActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilPortalActive", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilPortalActive), arg0)
}

// WaitUntilPortalActiveWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilPortalActiveWithContext(arg0 context.Context, arg1 *iotsitewise.DescribePortalInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilPortalActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilPortalActiveWithContext indicates an expected call of WaitUntilPortalActiveWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilPortalActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilPortalActiveWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilPortalActiveWithContext), varargs...)
}

// WaitUntilPortalNotExists mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilPortalNotExists(arg0 *iotsitewise.DescribePortalInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilPortalNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilPortalNotExists indicates an expected call of WaitUntilPortalNotExists.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilPortalNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilPortalNotExists", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilPortalNotExists), arg0)
}

// WaitUntilPortalNotExistsWithContext mocks base method.
func (m *MockIoTSiteWiseAPI) WaitUntilPortalNotExistsWithContext(arg0 context.Context, arg1 *iotsitewise.DescribePortalInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilPortalNotExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilPortalNotExistsWithContext indicates an expected call of WaitUntilPortalNotExistsWithContext.
func (mr *MockIoTSiteWiseAPIMockRecorder) WaitUntilPortalNotExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilPortalNotExistsWithContext", reflect.TypeOf((*MockIoTSiteWiseAPI)(nil).WaitUntilPortalNotExistsWithContext), varargs...)
}

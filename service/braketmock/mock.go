// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/braket/braketiface (interfaces: BraketAPI)

// Package braketmock is a generated GoMock package.
package braketmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	braket "github.com/aws/aws-sdk-go/service/braket"
	gomock "github.com/golang/mock/gomock"
)

// MockBraketAPI is a mock of BraketAPI interface.
type MockBraketAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBraketAPIMockRecorder
}

// MockBraketAPIMockRecorder is the mock recorder for MockBraketAPI.
type MockBraketAPIMockRecorder struct {
	mock *MockBraketAPI
}

// NewMockBraketAPI creates a new mock instance.
func NewMockBraketAPI(ctrl *gomock.Controller) *MockBraketAPI {
	mock := &MockBraketAPI{ctrl: ctrl}
	mock.recorder = &MockBraketAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBraketAPI) EXPECT() *MockBraketAPIMockRecorder {
	return m.recorder
}

// CancelJob mocks base method.
func (m *MockBraketAPI) CancelJob(arg0 *braket.CancelJobInput) (*braket.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0)
	ret0, _ := ret[0].(*braket.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockBraketAPIMockRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockBraketAPI)(nil).CancelJob), arg0)
}

// CancelJobRequest mocks base method.
func (m *MockBraketAPI) CancelJobRequest(arg0 *braket.CancelJobInput) (*request.Request, *braket.CancelJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.CancelJobOutput)
	return ret0, ret1
}

// CancelJobRequest indicates an expected call of CancelJobRequest.
func (mr *MockBraketAPIMockRecorder) CancelJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRequest", reflect.TypeOf((*MockBraketAPI)(nil).CancelJobRequest), arg0)
}

// CancelJobWithContext mocks base method.
func (m *MockBraketAPI) CancelJobWithContext(arg0 context.Context, arg1 *braket.CancelJobInput, arg2 ...request.Option) (*braket.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobWithContext", varargs...)
	ret0, _ := ret[0].(*braket.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobWithContext indicates an expected call of CancelJobWithContext.
func (mr *MockBraketAPIMockRecorder) CancelJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobWithContext", reflect.TypeOf((*MockBraketAPI)(nil).CancelJobWithContext), varargs...)
}

// CancelQuantumTask mocks base method.
func (m *MockBraketAPI) CancelQuantumTask(arg0 *braket.CancelQuantumTaskInput) (*braket.CancelQuantumTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelQuantumTask", arg0)
	ret0, _ := ret[0].(*braket.CancelQuantumTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelQuantumTask indicates an expected call of CancelQuantumTask.
func (mr *MockBraketAPIMockRecorder) CancelQuantumTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelQuantumTask", reflect.TypeOf((*MockBraketAPI)(nil).CancelQuantumTask), arg0)
}

// CancelQuantumTaskRequest mocks base method.
func (m *MockBraketAPI) CancelQuantumTaskRequest(arg0 *braket.CancelQuantumTaskInput) (*request.Request, *braket.CancelQuantumTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelQuantumTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.CancelQuantumTaskOutput)
	return ret0, ret1
}

// CancelQuantumTaskRequest indicates an expected call of CancelQuantumTaskRequest.
func (mr *MockBraketAPIMockRecorder) CancelQuantumTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelQuantumTaskRequest", reflect.TypeOf((*MockBraketAPI)(nil).CancelQuantumTaskRequest), arg0)
}

// CancelQuantumTaskWithContext mocks base method.
func (m *MockBraketAPI) CancelQuantumTaskWithContext(arg0 context.Context, arg1 *braket.CancelQuantumTaskInput, arg2 ...request.Option) (*braket.CancelQuantumTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelQuantumTaskWithContext", varargs...)
	ret0, _ := ret[0].(*braket.CancelQuantumTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelQuantumTaskWithContext indicates an expected call of CancelQuantumTaskWithContext.
func (mr *MockBraketAPIMockRecorder) CancelQuantumTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelQuantumTaskWithContext", reflect.TypeOf((*MockBraketAPI)(nil).CancelQuantumTaskWithContext), varargs...)
}

// CreateJob mocks base method.
func (m *MockBraketAPI) CreateJob(arg0 *braket.CreateJobInput) (*braket.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*braket.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockBraketAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockBraketAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method.
func (m *MockBraketAPI) CreateJobRequest(arg0 *braket.CreateJobInput) (*request.Request, *braket.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest.
func (mr *MockBraketAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockBraketAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobWithContext mocks base method.
func (m *MockBraketAPI) CreateJobWithContext(arg0 context.Context, arg1 *braket.CreateJobInput, arg2 ...request.Option) (*braket.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*braket.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext.
func (mr *MockBraketAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockBraketAPI)(nil).CreateJobWithContext), varargs...)
}

// CreateQuantumTask mocks base method.
func (m *MockBraketAPI) CreateQuantumTask(arg0 *braket.CreateQuantumTaskInput) (*braket.CreateQuantumTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuantumTask", arg0)
	ret0, _ := ret[0].(*braket.CreateQuantumTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuantumTask indicates an expected call of CreateQuantumTask.
func (mr *MockBraketAPIMockRecorder) CreateQuantumTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuantumTask", reflect.TypeOf((*MockBraketAPI)(nil).CreateQuantumTask), arg0)
}

// CreateQuantumTaskRequest mocks base method.
func (m *MockBraketAPI) CreateQuantumTaskRequest(arg0 *braket.CreateQuantumTaskInput) (*request.Request, *braket.CreateQuantumTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuantumTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.CreateQuantumTaskOutput)
	return ret0, ret1
}

// CreateQuantumTaskRequest indicates an expected call of CreateQuantumTaskRequest.
func (mr *MockBraketAPIMockRecorder) CreateQuantumTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuantumTaskRequest", reflect.TypeOf((*MockBraketAPI)(nil).CreateQuantumTaskRequest), arg0)
}

// CreateQuantumTaskWithContext mocks base method.
func (m *MockBraketAPI) CreateQuantumTaskWithContext(arg0 context.Context, arg1 *braket.CreateQuantumTaskInput, arg2 ...request.Option) (*braket.CreateQuantumTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQuantumTaskWithContext", varargs...)
	ret0, _ := ret[0].(*braket.CreateQuantumTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuantumTaskWithContext indicates an expected call of CreateQuantumTaskWithContext.
func (mr *MockBraketAPIMockRecorder) CreateQuantumTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuantumTaskWithContext", reflect.TypeOf((*MockBraketAPI)(nil).CreateQuantumTaskWithContext), varargs...)
}

// GetDevice mocks base method.
func (m *MockBraketAPI) GetDevice(arg0 *braket.GetDeviceInput) (*braket.GetDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0)
	ret0, _ := ret[0].(*braket.GetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockBraketAPIMockRecorder) GetDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockBraketAPI)(nil).GetDevice), arg0)
}

// GetDeviceRequest mocks base method.
func (m *MockBraketAPI) GetDeviceRequest(arg0 *braket.GetDeviceInput) (*request.Request, *braket.GetDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.GetDeviceOutput)
	return ret0, ret1
}

// GetDeviceRequest indicates an expected call of GetDeviceRequest.
func (mr *MockBraketAPIMockRecorder) GetDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRequest", reflect.TypeOf((*MockBraketAPI)(nil).GetDeviceRequest), arg0)
}

// GetDeviceWithContext mocks base method.
func (m *MockBraketAPI) GetDeviceWithContext(arg0 context.Context, arg1 *braket.GetDeviceInput, arg2 ...request.Option) (*braket.GetDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*braket.GetDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceWithContext indicates an expected call of GetDeviceWithContext.
func (mr *MockBraketAPIMockRecorder) GetDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceWithContext", reflect.TypeOf((*MockBraketAPI)(nil).GetDeviceWithContext), varargs...)
}

// GetJob mocks base method.
func (m *MockBraketAPI) GetJob(arg0 *braket.GetJobInput) (*braket.GetJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*braket.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockBraketAPIMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockBraketAPI)(nil).GetJob), arg0)
}

// GetJobRequest mocks base method.
func (m *MockBraketAPI) GetJobRequest(arg0 *braket.GetJobInput) (*request.Request, *braket.GetJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.GetJobOutput)
	return ret0, ret1
}

// GetJobRequest indicates an expected call of GetJobRequest.
func (mr *MockBraketAPIMockRecorder) GetJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequest", reflect.TypeOf((*MockBraketAPI)(nil).GetJobRequest), arg0)
}

// GetJobWithContext mocks base method.
func (m *MockBraketAPI) GetJobWithContext(arg0 context.Context, arg1 *braket.GetJobInput, arg2 ...request.Option) (*braket.GetJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobWithContext", varargs...)
	ret0, _ := ret[0].(*braket.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobWithContext indicates an expected call of GetJobWithContext.
func (mr *MockBraketAPIMockRecorder) GetJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobWithContext", reflect.TypeOf((*MockBraketAPI)(nil).GetJobWithContext), varargs...)
}

// GetQuantumTask mocks base method.
func (m *MockBraketAPI) GetQuantumTask(arg0 *braket.GetQuantumTaskInput) (*braket.GetQuantumTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuantumTask", arg0)
	ret0, _ := ret[0].(*braket.GetQuantumTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuantumTask indicates an expected call of GetQuantumTask.
func (mr *MockBraketAPIMockRecorder) GetQuantumTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuantumTask", reflect.TypeOf((*MockBraketAPI)(nil).GetQuantumTask), arg0)
}

// GetQuantumTaskRequest mocks base method.
func (m *MockBraketAPI) GetQuantumTaskRequest(arg0 *braket.GetQuantumTaskInput) (*request.Request, *braket.GetQuantumTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuantumTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.GetQuantumTaskOutput)
	return ret0, ret1
}

// GetQuantumTaskRequest indicates an expected call of GetQuantumTaskRequest.
func (mr *MockBraketAPIMockRecorder) GetQuantumTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuantumTaskRequest", reflect.TypeOf((*MockBraketAPI)(nil).GetQuantumTaskRequest), arg0)
}

// GetQuantumTaskWithContext mocks base method.
func (m *MockBraketAPI) GetQuantumTaskWithContext(arg0 context.Context, arg1 *braket.GetQuantumTaskInput, arg2 ...request.Option) (*braket.GetQuantumTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQuantumTaskWithContext", varargs...)
	ret0, _ := ret[0].(*braket.GetQuantumTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuantumTaskWithContext indicates an expected call of GetQuantumTaskWithContext.
func (mr *MockBraketAPIMockRecorder) GetQuantumTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuantumTaskWithContext", reflect.TypeOf((*MockBraketAPI)(nil).GetQuantumTaskWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockBraketAPI) ListTagsForResource(arg0 *braket.ListTagsForResourceInput) (*braket.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*braket.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockBraketAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockBraketAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockBraketAPI) ListTagsForResourceRequest(arg0 *braket.ListTagsForResourceInput) (*request.Request, *braket.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockBraketAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockBraketAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockBraketAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *braket.ListTagsForResourceInput, arg2 ...request.Option) (*braket.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*braket.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockBraketAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockBraketAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// SearchDevices mocks base method.
func (m *MockBraketAPI) SearchDevices(arg0 *braket.SearchDevicesInput) (*braket.SearchDevicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDevices", arg0)
	ret0, _ := ret[0].(*braket.SearchDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDevices indicates an expected call of SearchDevices.
func (mr *MockBraketAPIMockRecorder) SearchDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDevices", reflect.TypeOf((*MockBraketAPI)(nil).SearchDevices), arg0)
}

// SearchDevicesPages mocks base method.
func (m *MockBraketAPI) SearchDevicesPages(arg0 *braket.SearchDevicesInput, arg1 func(*braket.SearchDevicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDevicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchDevicesPages indicates an expected call of SearchDevicesPages.
func (mr *MockBraketAPIMockRecorder) SearchDevicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDevicesPages", reflect.TypeOf((*MockBraketAPI)(nil).SearchDevicesPages), arg0, arg1)
}

// SearchDevicesPagesWithContext mocks base method.
func (m *MockBraketAPI) SearchDevicesPagesWithContext(arg0 context.Context, arg1 *braket.SearchDevicesInput, arg2 func(*braket.SearchDevicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchDevicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchDevicesPagesWithContext indicates an expected call of SearchDevicesPagesWithContext.
func (mr *MockBraketAPIMockRecorder) SearchDevicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDevicesPagesWithContext", reflect.TypeOf((*MockBraketAPI)(nil).SearchDevicesPagesWithContext), varargs...)
}

// SearchDevicesRequest mocks base method.
func (m *MockBraketAPI) SearchDevicesRequest(arg0 *braket.SearchDevicesInput) (*request.Request, *braket.SearchDevicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDevicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.SearchDevicesOutput)
	return ret0, ret1
}

// SearchDevicesRequest indicates an expected call of SearchDevicesRequest.
func (mr *MockBraketAPIMockRecorder) SearchDevicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDevicesRequest", reflect.TypeOf((*MockBraketAPI)(nil).SearchDevicesRequest), arg0)
}

// SearchDevicesWithContext mocks base method.
func (m *MockBraketAPI) SearchDevicesWithContext(arg0 context.Context, arg1 *braket.SearchDevicesInput, arg2 ...request.Option) (*braket.SearchDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchDevicesWithContext", varargs...)
	ret0, _ := ret[0].(*braket.SearchDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDevicesWithContext indicates an expected call of SearchDevicesWithContext.
func (mr *MockBraketAPIMockRecorder) SearchDevicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDevicesWithContext", reflect.TypeOf((*MockBraketAPI)(nil).SearchDevicesWithContext), varargs...)
}

// SearchJobs mocks base method.
func (m *MockBraketAPI) SearchJobs(arg0 *braket.SearchJobsInput) (*braket.SearchJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchJobs", arg0)
	ret0, _ := ret[0].(*braket.SearchJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchJobs indicates an expected call of SearchJobs.
func (mr *MockBraketAPIMockRecorder) SearchJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobs", reflect.TypeOf((*MockBraketAPI)(nil).SearchJobs), arg0)
}

// SearchJobsPages mocks base method.
func (m *MockBraketAPI) SearchJobsPages(arg0 *braket.SearchJobsInput, arg1 func(*braket.SearchJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchJobsPages indicates an expected call of SearchJobsPages.
func (mr *MockBraketAPIMockRecorder) SearchJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobsPages", reflect.TypeOf((*MockBraketAPI)(nil).SearchJobsPages), arg0, arg1)
}

// SearchJobsPagesWithContext mocks base method.
func (m *MockBraketAPI) SearchJobsPagesWithContext(arg0 context.Context, arg1 *braket.SearchJobsInput, arg2 func(*braket.SearchJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchJobsPagesWithContext indicates an expected call of SearchJobsPagesWithContext.
func (mr *MockBraketAPIMockRecorder) SearchJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobsPagesWithContext", reflect.TypeOf((*MockBraketAPI)(nil).SearchJobsPagesWithContext), varargs...)
}

// SearchJobsRequest mocks base method.
func (m *MockBraketAPI) SearchJobsRequest(arg0 *braket.SearchJobsInput) (*request.Request, *braket.SearchJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.SearchJobsOutput)
	return ret0, ret1
}

// SearchJobsRequest indicates an expected call of SearchJobsRequest.
func (mr *MockBraketAPIMockRecorder) SearchJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobsRequest", reflect.TypeOf((*MockBraketAPI)(nil).SearchJobsRequest), arg0)
}

// SearchJobsWithContext mocks base method.
func (m *MockBraketAPI) SearchJobsWithContext(arg0 context.Context, arg1 *braket.SearchJobsInput, arg2 ...request.Option) (*braket.SearchJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchJobsWithContext", varargs...)
	ret0, _ := ret[0].(*braket.SearchJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchJobsWithContext indicates an expected call of SearchJobsWithContext.
func (mr *MockBraketAPIMockRecorder) SearchJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobsWithContext", reflect.TypeOf((*MockBraketAPI)(nil).SearchJobsWithContext), varargs...)
}

// SearchQuantumTasks mocks base method.
func (m *MockBraketAPI) SearchQuantumTasks(arg0 *braket.SearchQuantumTasksInput) (*braket.SearchQuantumTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuantumTasks", arg0)
	ret0, _ := ret[0].(*braket.SearchQuantumTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchQuantumTasks indicates an expected call of SearchQuantumTasks.
func (mr *MockBraketAPIMockRecorder) SearchQuantumTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuantumTasks", reflect.TypeOf((*MockBraketAPI)(nil).SearchQuantumTasks), arg0)
}

// SearchQuantumTasksPages mocks base method.
func (m *MockBraketAPI) SearchQuantumTasksPages(arg0 *braket.SearchQuantumTasksInput, arg1 func(*braket.SearchQuantumTasksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuantumTasksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchQuantumTasksPages indicates an expected call of SearchQuantumTasksPages.
func (mr *MockBraketAPIMockRecorder) SearchQuantumTasksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuantumTasksPages", reflect.TypeOf((*MockBraketAPI)(nil).SearchQuantumTasksPages), arg0, arg1)
}

// SearchQuantumTasksPagesWithContext mocks base method.
func (m *MockBraketAPI) SearchQuantumTasksPagesWithContext(arg0 context.Context, arg1 *braket.SearchQuantumTasksInput, arg2 func(*braket.SearchQuantumTasksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchQuantumTasksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchQuantumTasksPagesWithContext indicates an expected call of SearchQuantumTasksPagesWithContext.
func (mr *MockBraketAPIMockRecorder) SearchQuantumTasksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuantumTasksPagesWithContext", reflect.TypeOf((*MockBraketAPI)(nil).SearchQuantumTasksPagesWithContext), varargs...)
}

// SearchQuantumTasksRequest mocks base method.
func (m *MockBraketAPI) SearchQuantumTasksRequest(arg0 *braket.SearchQuantumTasksInput) (*request.Request, *braket.SearchQuantumTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQuantumTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.SearchQuantumTasksOutput)
	return ret0, ret1
}

// SearchQuantumTasksRequest indicates an expected call of SearchQuantumTasksRequest.
func (mr *MockBraketAPIMockRecorder) SearchQuantumTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuantumTasksRequest", reflect.TypeOf((*MockBraketAPI)(nil).SearchQuantumTasksRequest), arg0)
}

// SearchQuantumTasksWithContext mocks base method.
func (m *MockBraketAPI) SearchQuantumTasksWithContext(arg0 context.Context, arg1 *braket.SearchQuantumTasksInput, arg2 ...request.Option) (*braket.SearchQuantumTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchQuantumTasksWithContext", varargs...)
	ret0, _ := ret[0].(*braket.SearchQuantumTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchQuantumTasksWithContext indicates an expected call of SearchQuantumTasksWithContext.
func (mr *MockBraketAPIMockRecorder) SearchQuantumTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQuantumTasksWithContext", reflect.TypeOf((*MockBraketAPI)(nil).SearchQuantumTasksWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockBraketAPI) TagResource(arg0 *braket.TagResourceInput) (*braket.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*braket.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockBraketAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockBraketAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockBraketAPI) TagResourceRequest(arg0 *braket.TagResourceInput) (*request.Request, *braket.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockBraketAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockBraketAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockBraketAPI) TagResourceWithContext(arg0 context.Context, arg1 *braket.TagResourceInput, arg2 ...request.Option) (*braket.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*braket.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockBraketAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockBraketAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockBraketAPI) UntagResource(arg0 *braket.UntagResourceInput) (*braket.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*braket.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockBraketAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockBraketAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockBraketAPI) UntagResourceRequest(arg0 *braket.UntagResourceInput) (*request.Request, *braket.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*braket.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockBraketAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockBraketAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockBraketAPI) UntagResourceWithContext(arg0 context.Context, arg1 *braket.UntagResourceInput, arg2 ...request.Option) (*braket.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*braket.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockBraketAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockBraketAPI)(nil).UntagResourceWithContext), varargs...)
}

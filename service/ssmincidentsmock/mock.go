// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ssmincidents/ssmincidentsiface (interfaces: SSMIncidentsAPI)

// Package ssmincidentsmock is a generated GoMock package.
package ssmincidentsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	ssmincidents "github.com/aws/aws-sdk-go/service/ssmincidents"
	gomock "github.com/golang/mock/gomock"
)

// MockSSMIncidentsAPI is a mock of SSMIncidentsAPI interface.
type MockSSMIncidentsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSMIncidentsAPIMockRecorder
}

// MockSSMIncidentsAPIMockRecorder is the mock recorder for MockSSMIncidentsAPI.
type MockSSMIncidentsAPIMockRecorder struct {
	mock *MockSSMIncidentsAPI
}

// NewMockSSMIncidentsAPI creates a new mock instance.
func NewMockSSMIncidentsAPI(ctrl *gomock.Controller) *MockSSMIncidentsAPI {
	mock := &MockSSMIncidentsAPI{ctrl: ctrl}
	mock.recorder = &MockSSMIncidentsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSMIncidentsAPI) EXPECT() *MockSSMIncidentsAPIMockRecorder {
	return m.recorder
}

// CreateReplicationSet mocks base method.
func (m *MockSSMIncidentsAPI) CreateReplicationSet(arg0 *ssmincidents.CreateReplicationSetInput) (*ssmincidents.CreateReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationSet", arg0)
	ret0, _ := ret[0].(*ssmincidents.CreateReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationSet indicates an expected call of CreateReplicationSet.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateReplicationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSet", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateReplicationSet), arg0)
}

// CreateReplicationSetRequest mocks base method.
func (m *MockSSMIncidentsAPI) CreateReplicationSetRequest(arg0 *ssmincidents.CreateReplicationSetInput) (*request.Request, *ssmincidents.CreateReplicationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.CreateReplicationSetOutput)
	return ret0, ret1
}

// CreateReplicationSetRequest indicates an expected call of CreateReplicationSetRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateReplicationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSetRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateReplicationSetRequest), arg0)
}

// CreateReplicationSetWithContext mocks base method.
func (m *MockSSMIncidentsAPI) CreateReplicationSetWithContext(arg0 context.Context, arg1 *ssmincidents.CreateReplicationSetInput, arg2 ...request.Option) (*ssmincidents.CreateReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.CreateReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationSetWithContext indicates an expected call of CreateReplicationSetWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateReplicationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationSetWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateReplicationSetWithContext), varargs...)
}

// CreateResponsePlan mocks base method.
func (m *MockSSMIncidentsAPI) CreateResponsePlan(arg0 *ssmincidents.CreateResponsePlanInput) (*ssmincidents.CreateResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResponsePlan", arg0)
	ret0, _ := ret[0].(*ssmincidents.CreateResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResponsePlan indicates an expected call of CreateResponsePlan.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateResponsePlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponsePlan", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateResponsePlan), arg0)
}

// CreateResponsePlanRequest mocks base method.
func (m *MockSSMIncidentsAPI) CreateResponsePlanRequest(arg0 *ssmincidents.CreateResponsePlanInput) (*request.Request, *ssmincidents.CreateResponsePlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResponsePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.CreateResponsePlanOutput)
	return ret0, ret1
}

// CreateResponsePlanRequest indicates an expected call of CreateResponsePlanRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateResponsePlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponsePlanRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateResponsePlanRequest), arg0)
}

// CreateResponsePlanWithContext mocks base method.
func (m *MockSSMIncidentsAPI) CreateResponsePlanWithContext(arg0 context.Context, arg1 *ssmincidents.CreateResponsePlanInput, arg2 ...request.Option) (*ssmincidents.CreateResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResponsePlanWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.CreateResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResponsePlanWithContext indicates an expected call of CreateResponsePlanWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateResponsePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponsePlanWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateResponsePlanWithContext), varargs...)
}

// CreateTimelineEvent mocks base method.
func (m *MockSSMIncidentsAPI) CreateTimelineEvent(arg0 *ssmincidents.CreateTimelineEventInput) (*ssmincidents.CreateTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimelineEvent", arg0)
	ret0, _ := ret[0].(*ssmincidents.CreateTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimelineEvent indicates an expected call of CreateTimelineEvent.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateTimelineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimelineEvent", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateTimelineEvent), arg0)
}

// CreateTimelineEventRequest mocks base method.
func (m *MockSSMIncidentsAPI) CreateTimelineEventRequest(arg0 *ssmincidents.CreateTimelineEventInput) (*request.Request, *ssmincidents.CreateTimelineEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimelineEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.CreateTimelineEventOutput)
	return ret0, ret1
}

// CreateTimelineEventRequest indicates an expected call of CreateTimelineEventRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateTimelineEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimelineEventRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateTimelineEventRequest), arg0)
}

// CreateTimelineEventWithContext mocks base method.
func (m *MockSSMIncidentsAPI) CreateTimelineEventWithContext(arg0 context.Context, arg1 *ssmincidents.CreateTimelineEventInput, arg2 ...request.Option) (*ssmincidents.CreateTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTimelineEventWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.CreateTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimelineEventWithContext indicates an expected call of CreateTimelineEventWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) CreateTimelineEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimelineEventWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).CreateTimelineEventWithContext), varargs...)
}

// DeleteIncidentRecord mocks base method.
func (m *MockSSMIncidentsAPI) DeleteIncidentRecord(arg0 *ssmincidents.DeleteIncidentRecordInput) (*ssmincidents.DeleteIncidentRecordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncidentRecord", arg0)
	ret0, _ := ret[0].(*ssmincidents.DeleteIncidentRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIncidentRecord indicates an expected call of DeleteIncidentRecord.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteIncidentRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncidentRecord", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteIncidentRecord), arg0)
}

// DeleteIncidentRecordRequest mocks base method.
func (m *MockSSMIncidentsAPI) DeleteIncidentRecordRequest(arg0 *ssmincidents.DeleteIncidentRecordInput) (*request.Request, *ssmincidents.DeleteIncidentRecordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncidentRecordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.DeleteIncidentRecordOutput)
	return ret0, ret1
}

// DeleteIncidentRecordRequest indicates an expected call of DeleteIncidentRecordRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteIncidentRecordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncidentRecordRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteIncidentRecordRequest), arg0)
}

// DeleteIncidentRecordWithContext mocks base method.
func (m *MockSSMIncidentsAPI) DeleteIncidentRecordWithContext(arg0 context.Context, arg1 *ssmincidents.DeleteIncidentRecordInput, arg2 ...request.Option) (*ssmincidents.DeleteIncidentRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIncidentRecordWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.DeleteIncidentRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIncidentRecordWithContext indicates an expected call of DeleteIncidentRecordWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteIncidentRecordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncidentRecordWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteIncidentRecordWithContext), varargs...)
}

// DeleteReplicationSet mocks base method.
func (m *MockSSMIncidentsAPI) DeleteReplicationSet(arg0 *ssmincidents.DeleteReplicationSetInput) (*ssmincidents.DeleteReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationSet", arg0)
	ret0, _ := ret[0].(*ssmincidents.DeleteReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationSet indicates an expected call of DeleteReplicationSet.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteReplicationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationSet", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteReplicationSet), arg0)
}

// DeleteReplicationSetRequest mocks base method.
func (m *MockSSMIncidentsAPI) DeleteReplicationSetRequest(arg0 *ssmincidents.DeleteReplicationSetInput) (*request.Request, *ssmincidents.DeleteReplicationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.DeleteReplicationSetOutput)
	return ret0, ret1
}

// DeleteReplicationSetRequest indicates an expected call of DeleteReplicationSetRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteReplicationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationSetRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteReplicationSetRequest), arg0)
}

// DeleteReplicationSetWithContext mocks base method.
func (m *MockSSMIncidentsAPI) DeleteReplicationSetWithContext(arg0 context.Context, arg1 *ssmincidents.DeleteReplicationSetInput, arg2 ...request.Option) (*ssmincidents.DeleteReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.DeleteReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationSetWithContext indicates an expected call of DeleteReplicationSetWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteReplicationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationSetWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteReplicationSetWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockSSMIncidentsAPI) DeleteResourcePolicy(arg0 *ssmincidents.DeleteResourcePolicyInput) (*ssmincidents.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*ssmincidents.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method.
func (m *MockSSMIncidentsAPI) DeleteResourcePolicyRequest(arg0 *ssmincidents.DeleteResourcePolicyInput) (*request.Request, *ssmincidents.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method.
func (m *MockSSMIncidentsAPI) DeleteResourcePolicyWithContext(arg0 context.Context, arg1 *ssmincidents.DeleteResourcePolicyInput, arg2 ...request.Option) (*ssmincidents.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteResponsePlan mocks base method.
func (m *MockSSMIncidentsAPI) DeleteResponsePlan(arg0 *ssmincidents.DeleteResponsePlanInput) (*ssmincidents.DeleteResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResponsePlan", arg0)
	ret0, _ := ret[0].(*ssmincidents.DeleteResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResponsePlan indicates an expected call of DeleteResponsePlan.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteResponsePlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResponsePlan", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteResponsePlan), arg0)
}

// DeleteResponsePlanRequest mocks base method.
func (m *MockSSMIncidentsAPI) DeleteResponsePlanRequest(arg0 *ssmincidents.DeleteResponsePlanInput) (*request.Request, *ssmincidents.DeleteResponsePlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResponsePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.DeleteResponsePlanOutput)
	return ret0, ret1
}

// DeleteResponsePlanRequest indicates an expected call of DeleteResponsePlanRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteResponsePlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResponsePlanRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteResponsePlanRequest), arg0)
}

// DeleteResponsePlanWithContext mocks base method.
func (m *MockSSMIncidentsAPI) DeleteResponsePlanWithContext(arg0 context.Context, arg1 *ssmincidents.DeleteResponsePlanInput, arg2 ...request.Option) (*ssmincidents.DeleteResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResponsePlanWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.DeleteResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResponsePlanWithContext indicates an expected call of DeleteResponsePlanWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteResponsePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResponsePlanWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteResponsePlanWithContext), varargs...)
}

// DeleteTimelineEvent mocks base method.
func (m *MockSSMIncidentsAPI) DeleteTimelineEvent(arg0 *ssmincidents.DeleteTimelineEventInput) (*ssmincidents.DeleteTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimelineEvent", arg0)
	ret0, _ := ret[0].(*ssmincidents.DeleteTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimelineEvent indicates an expected call of DeleteTimelineEvent.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteTimelineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimelineEvent", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteTimelineEvent), arg0)
}

// DeleteTimelineEventRequest mocks base method.
func (m *MockSSMIncidentsAPI) DeleteTimelineEventRequest(arg0 *ssmincidents.DeleteTimelineEventInput) (*request.Request, *ssmincidents.DeleteTimelineEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimelineEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.DeleteTimelineEventOutput)
	return ret0, ret1
}

// DeleteTimelineEventRequest indicates an expected call of DeleteTimelineEventRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteTimelineEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimelineEventRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteTimelineEventRequest), arg0)
}

// DeleteTimelineEventWithContext mocks base method.
func (m *MockSSMIncidentsAPI) DeleteTimelineEventWithContext(arg0 context.Context, arg1 *ssmincidents.DeleteTimelineEventInput, arg2 ...request.Option) (*ssmincidents.DeleteTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTimelineEventWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.DeleteTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimelineEventWithContext indicates an expected call of DeleteTimelineEventWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) DeleteTimelineEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimelineEventWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).DeleteTimelineEventWithContext), varargs...)
}

// GetIncidentRecord mocks base method.
func (m *MockSSMIncidentsAPI) GetIncidentRecord(arg0 *ssmincidents.GetIncidentRecordInput) (*ssmincidents.GetIncidentRecordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidentRecord", arg0)
	ret0, _ := ret[0].(*ssmincidents.GetIncidentRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidentRecord indicates an expected call of GetIncidentRecord.
func (mr *MockSSMIncidentsAPIMockRecorder) GetIncidentRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentRecord", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetIncidentRecord), arg0)
}

// GetIncidentRecordRequest mocks base method.
func (m *MockSSMIncidentsAPI) GetIncidentRecordRequest(arg0 *ssmincidents.GetIncidentRecordInput) (*request.Request, *ssmincidents.GetIncidentRecordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidentRecordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.GetIncidentRecordOutput)
	return ret0, ret1
}

// GetIncidentRecordRequest indicates an expected call of GetIncidentRecordRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) GetIncidentRecordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentRecordRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetIncidentRecordRequest), arg0)
}

// GetIncidentRecordWithContext mocks base method.
func (m *MockSSMIncidentsAPI) GetIncidentRecordWithContext(arg0 context.Context, arg1 *ssmincidents.GetIncidentRecordInput, arg2 ...request.Option) (*ssmincidents.GetIncidentRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIncidentRecordWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.GetIncidentRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidentRecordWithContext indicates an expected call of GetIncidentRecordWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) GetIncidentRecordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentRecordWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetIncidentRecordWithContext), varargs...)
}

// GetReplicationSet mocks base method.
func (m *MockSSMIncidentsAPI) GetReplicationSet(arg0 *ssmincidents.GetReplicationSetInput) (*ssmincidents.GetReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationSet", arg0)
	ret0, _ := ret[0].(*ssmincidents.GetReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationSet indicates an expected call of GetReplicationSet.
func (mr *MockSSMIncidentsAPIMockRecorder) GetReplicationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationSet", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetReplicationSet), arg0)
}

// GetReplicationSetRequest mocks base method.
func (m *MockSSMIncidentsAPI) GetReplicationSetRequest(arg0 *ssmincidents.GetReplicationSetInput) (*request.Request, *ssmincidents.GetReplicationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.GetReplicationSetOutput)
	return ret0, ret1
}

// GetReplicationSetRequest indicates an expected call of GetReplicationSetRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) GetReplicationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationSetRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetReplicationSetRequest), arg0)
}

// GetReplicationSetWithContext mocks base method.
func (m *MockSSMIncidentsAPI) GetReplicationSetWithContext(arg0 context.Context, arg1 *ssmincidents.GetReplicationSetInput, arg2 ...request.Option) (*ssmincidents.GetReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.GetReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationSetWithContext indicates an expected call of GetReplicationSetWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) GetReplicationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationSetWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetReplicationSetWithContext), varargs...)
}

// GetResourcePolicies mocks base method.
func (m *MockSSMIncidentsAPI) GetResourcePolicies(arg0 *ssmincidents.GetResourcePoliciesInput) (*ssmincidents.GetResourcePoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicies", arg0)
	ret0, _ := ret[0].(*ssmincidents.GetResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicies indicates an expected call of GetResourcePolicies.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResourcePolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicies", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResourcePolicies), arg0)
}

// GetResourcePoliciesPages mocks base method.
func (m *MockSSMIncidentsAPI) GetResourcePoliciesPages(arg0 *ssmincidents.GetResourcePoliciesInput, arg1 func(*ssmincidents.GetResourcePoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcePoliciesPages indicates an expected call of GetResourcePoliciesPages.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResourcePoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesPages", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResourcePoliciesPages), arg0, arg1)
}

// GetResourcePoliciesPagesWithContext mocks base method.
func (m *MockSSMIncidentsAPI) GetResourcePoliciesPagesWithContext(arg0 context.Context, arg1 *ssmincidents.GetResourcePoliciesInput, arg2 func(*ssmincidents.GetResourcePoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcePoliciesPagesWithContext indicates an expected call of GetResourcePoliciesPagesWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResourcePoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesPagesWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResourcePoliciesPagesWithContext), varargs...)
}

// GetResourcePoliciesRequest mocks base method.
func (m *MockSSMIncidentsAPI) GetResourcePoliciesRequest(arg0 *ssmincidents.GetResourcePoliciesInput) (*request.Request, *ssmincidents.GetResourcePoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.GetResourcePoliciesOutput)
	return ret0, ret1
}

// GetResourcePoliciesRequest indicates an expected call of GetResourcePoliciesRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResourcePoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResourcePoliciesRequest), arg0)
}

// GetResourcePoliciesWithContext mocks base method.
func (m *MockSSMIncidentsAPI) GetResourcePoliciesWithContext(arg0 context.Context, arg1 *ssmincidents.GetResourcePoliciesInput, arg2 ...request.Option) (*ssmincidents.GetResourcePoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.GetResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePoliciesWithContext indicates an expected call of GetResourcePoliciesWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResourcePoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResourcePoliciesWithContext), varargs...)
}

// GetResponsePlan mocks base method.
func (m *MockSSMIncidentsAPI) GetResponsePlan(arg0 *ssmincidents.GetResponsePlanInput) (*ssmincidents.GetResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsePlan", arg0)
	ret0, _ := ret[0].(*ssmincidents.GetResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsePlan indicates an expected call of GetResponsePlan.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResponsePlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsePlan", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResponsePlan), arg0)
}

// GetResponsePlanRequest mocks base method.
func (m *MockSSMIncidentsAPI) GetResponsePlanRequest(arg0 *ssmincidents.GetResponsePlanInput) (*request.Request, *ssmincidents.GetResponsePlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.GetResponsePlanOutput)
	return ret0, ret1
}

// GetResponsePlanRequest indicates an expected call of GetResponsePlanRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResponsePlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsePlanRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResponsePlanRequest), arg0)
}

// GetResponsePlanWithContext mocks base method.
func (m *MockSSMIncidentsAPI) GetResponsePlanWithContext(arg0 context.Context, arg1 *ssmincidents.GetResponsePlanInput, arg2 ...request.Option) (*ssmincidents.GetResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResponsePlanWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.GetResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsePlanWithContext indicates an expected call of GetResponsePlanWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) GetResponsePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsePlanWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetResponsePlanWithContext), varargs...)
}

// GetTimelineEvent mocks base method.
func (m *MockSSMIncidentsAPI) GetTimelineEvent(arg0 *ssmincidents.GetTimelineEventInput) (*ssmincidents.GetTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimelineEvent", arg0)
	ret0, _ := ret[0].(*ssmincidents.GetTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimelineEvent indicates an expected call of GetTimelineEvent.
func (mr *MockSSMIncidentsAPIMockRecorder) GetTimelineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimelineEvent", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetTimelineEvent), arg0)
}

// GetTimelineEventRequest mocks base method.
func (m *MockSSMIncidentsAPI) GetTimelineEventRequest(arg0 *ssmincidents.GetTimelineEventInput) (*request.Request, *ssmincidents.GetTimelineEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimelineEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.GetTimelineEventOutput)
	return ret0, ret1
}

// GetTimelineEventRequest indicates an expected call of GetTimelineEventRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) GetTimelineEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimelineEventRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetTimelineEventRequest), arg0)
}

// GetTimelineEventWithContext mocks base method.
func (m *MockSSMIncidentsAPI) GetTimelineEventWithContext(arg0 context.Context, arg1 *ssmincidents.GetTimelineEventInput, arg2 ...request.Option) (*ssmincidents.GetTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimelineEventWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.GetTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimelineEventWithContext indicates an expected call of GetTimelineEventWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) GetTimelineEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimelineEventWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).GetTimelineEventWithContext), varargs...)
}

// ListIncidentRecords mocks base method.
func (m *MockSSMIncidentsAPI) ListIncidentRecords(arg0 *ssmincidents.ListIncidentRecordsInput) (*ssmincidents.ListIncidentRecordsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidentRecords", arg0)
	ret0, _ := ret[0].(*ssmincidents.ListIncidentRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncidentRecords indicates an expected call of ListIncidentRecords.
func (mr *MockSSMIncidentsAPIMockRecorder) ListIncidentRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidentRecords", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListIncidentRecords), arg0)
}

// ListIncidentRecordsPages mocks base method.
func (m *MockSSMIncidentsAPI) ListIncidentRecordsPages(arg0 *ssmincidents.ListIncidentRecordsInput, arg1 func(*ssmincidents.ListIncidentRecordsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidentRecordsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIncidentRecordsPages indicates an expected call of ListIncidentRecordsPages.
func (mr *MockSSMIncidentsAPIMockRecorder) ListIncidentRecordsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidentRecordsPages", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListIncidentRecordsPages), arg0, arg1)
}

// ListIncidentRecordsPagesWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListIncidentRecordsPagesWithContext(arg0 context.Context, arg1 *ssmincidents.ListIncidentRecordsInput, arg2 func(*ssmincidents.ListIncidentRecordsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIncidentRecordsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIncidentRecordsPagesWithContext indicates an expected call of ListIncidentRecordsPagesWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListIncidentRecordsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidentRecordsPagesWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListIncidentRecordsPagesWithContext), varargs...)
}

// ListIncidentRecordsRequest mocks base method.
func (m *MockSSMIncidentsAPI) ListIncidentRecordsRequest(arg0 *ssmincidents.ListIncidentRecordsInput) (*request.Request, *ssmincidents.ListIncidentRecordsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidentRecordsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.ListIncidentRecordsOutput)
	return ret0, ret1
}

// ListIncidentRecordsRequest indicates an expected call of ListIncidentRecordsRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) ListIncidentRecordsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidentRecordsRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListIncidentRecordsRequest), arg0)
}

// ListIncidentRecordsWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListIncidentRecordsWithContext(arg0 context.Context, arg1 *ssmincidents.ListIncidentRecordsInput, arg2 ...request.Option) (*ssmincidents.ListIncidentRecordsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIncidentRecordsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.ListIncidentRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncidentRecordsWithContext indicates an expected call of ListIncidentRecordsWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListIncidentRecordsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidentRecordsWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListIncidentRecordsWithContext), varargs...)
}

// ListRelatedItems mocks base method.
func (m *MockSSMIncidentsAPI) ListRelatedItems(arg0 *ssmincidents.ListRelatedItemsInput) (*ssmincidents.ListRelatedItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelatedItems", arg0)
	ret0, _ := ret[0].(*ssmincidents.ListRelatedItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelatedItems indicates an expected call of ListRelatedItems.
func (mr *MockSSMIncidentsAPIMockRecorder) ListRelatedItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedItems", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListRelatedItems), arg0)
}

// ListRelatedItemsPages mocks base method.
func (m *MockSSMIncidentsAPI) ListRelatedItemsPages(arg0 *ssmincidents.ListRelatedItemsInput, arg1 func(*ssmincidents.ListRelatedItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelatedItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRelatedItemsPages indicates an expected call of ListRelatedItemsPages.
func (mr *MockSSMIncidentsAPIMockRecorder) ListRelatedItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedItemsPages", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListRelatedItemsPages), arg0, arg1)
}

// ListRelatedItemsPagesWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListRelatedItemsPagesWithContext(arg0 context.Context, arg1 *ssmincidents.ListRelatedItemsInput, arg2 func(*ssmincidents.ListRelatedItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRelatedItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRelatedItemsPagesWithContext indicates an expected call of ListRelatedItemsPagesWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListRelatedItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedItemsPagesWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListRelatedItemsPagesWithContext), varargs...)
}

// ListRelatedItemsRequest mocks base method.
func (m *MockSSMIncidentsAPI) ListRelatedItemsRequest(arg0 *ssmincidents.ListRelatedItemsInput) (*request.Request, *ssmincidents.ListRelatedItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelatedItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.ListRelatedItemsOutput)
	return ret0, ret1
}

// ListRelatedItemsRequest indicates an expected call of ListRelatedItemsRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) ListRelatedItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedItemsRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListRelatedItemsRequest), arg0)
}

// ListRelatedItemsWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListRelatedItemsWithContext(arg0 context.Context, arg1 *ssmincidents.ListRelatedItemsInput, arg2 ...request.Option) (*ssmincidents.ListRelatedItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRelatedItemsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.ListRelatedItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelatedItemsWithContext indicates an expected call of ListRelatedItemsWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListRelatedItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedItemsWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListRelatedItemsWithContext), varargs...)
}

// ListReplicationSets mocks base method.
func (m *MockSSMIncidentsAPI) ListReplicationSets(arg0 *ssmincidents.ListReplicationSetsInput) (*ssmincidents.ListReplicationSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplicationSets", arg0)
	ret0, _ := ret[0].(*ssmincidents.ListReplicationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplicationSets indicates an expected call of ListReplicationSets.
func (mr *MockSSMIncidentsAPIMockRecorder) ListReplicationSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicationSets", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListReplicationSets), arg0)
}

// ListReplicationSetsPages mocks base method.
func (m *MockSSMIncidentsAPI) ListReplicationSetsPages(arg0 *ssmincidents.ListReplicationSetsInput, arg1 func(*ssmincidents.ListReplicationSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplicationSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReplicationSetsPages indicates an expected call of ListReplicationSetsPages.
func (mr *MockSSMIncidentsAPIMockRecorder) ListReplicationSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicationSetsPages", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListReplicationSetsPages), arg0, arg1)
}

// ListReplicationSetsPagesWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListReplicationSetsPagesWithContext(arg0 context.Context, arg1 *ssmincidents.ListReplicationSetsInput, arg2 func(*ssmincidents.ListReplicationSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReplicationSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListReplicationSetsPagesWithContext indicates an expected call of ListReplicationSetsPagesWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListReplicationSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicationSetsPagesWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListReplicationSetsPagesWithContext), varargs...)
}

// ListReplicationSetsRequest mocks base method.
func (m *MockSSMIncidentsAPI) ListReplicationSetsRequest(arg0 *ssmincidents.ListReplicationSetsInput) (*request.Request, *ssmincidents.ListReplicationSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplicationSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.ListReplicationSetsOutput)
	return ret0, ret1
}

// ListReplicationSetsRequest indicates an expected call of ListReplicationSetsRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) ListReplicationSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicationSetsRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListReplicationSetsRequest), arg0)
}

// ListReplicationSetsWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListReplicationSetsWithContext(arg0 context.Context, arg1 *ssmincidents.ListReplicationSetsInput, arg2 ...request.Option) (*ssmincidents.ListReplicationSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReplicationSetsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.ListReplicationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplicationSetsWithContext indicates an expected call of ListReplicationSetsWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListReplicationSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicationSetsWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListReplicationSetsWithContext), varargs...)
}

// ListResponsePlans mocks base method.
func (m *MockSSMIncidentsAPI) ListResponsePlans(arg0 *ssmincidents.ListResponsePlansInput) (*ssmincidents.ListResponsePlansOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResponsePlans", arg0)
	ret0, _ := ret[0].(*ssmincidents.ListResponsePlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResponsePlans indicates an expected call of ListResponsePlans.
func (mr *MockSSMIncidentsAPIMockRecorder) ListResponsePlans(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponsePlans", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListResponsePlans), arg0)
}

// ListResponsePlansPages mocks base method.
func (m *MockSSMIncidentsAPI) ListResponsePlansPages(arg0 *ssmincidents.ListResponsePlansInput, arg1 func(*ssmincidents.ListResponsePlansOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResponsePlansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResponsePlansPages indicates an expected call of ListResponsePlansPages.
func (mr *MockSSMIncidentsAPIMockRecorder) ListResponsePlansPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponsePlansPages", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListResponsePlansPages), arg0, arg1)
}

// ListResponsePlansPagesWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListResponsePlansPagesWithContext(arg0 context.Context, arg1 *ssmincidents.ListResponsePlansInput, arg2 func(*ssmincidents.ListResponsePlansOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResponsePlansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResponsePlansPagesWithContext indicates an expected call of ListResponsePlansPagesWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListResponsePlansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponsePlansPagesWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListResponsePlansPagesWithContext), varargs...)
}

// ListResponsePlansRequest mocks base method.
func (m *MockSSMIncidentsAPI) ListResponsePlansRequest(arg0 *ssmincidents.ListResponsePlansInput) (*request.Request, *ssmincidents.ListResponsePlansOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResponsePlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.ListResponsePlansOutput)
	return ret0, ret1
}

// ListResponsePlansRequest indicates an expected call of ListResponsePlansRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) ListResponsePlansRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponsePlansRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListResponsePlansRequest), arg0)
}

// ListResponsePlansWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListResponsePlansWithContext(arg0 context.Context, arg1 *ssmincidents.ListResponsePlansInput, arg2 ...request.Option) (*ssmincidents.ListResponsePlansOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResponsePlansWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.ListResponsePlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResponsePlansWithContext indicates an expected call of ListResponsePlansWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListResponsePlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResponsePlansWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListResponsePlansWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSSMIncidentsAPI) ListTagsForResource(arg0 *ssmincidents.ListTagsForResourceInput) (*ssmincidents.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*ssmincidents.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockSSMIncidentsAPI) ListTagsForResourceRequest(arg0 *ssmincidents.ListTagsForResourceInput) (*request.Request, *ssmincidents.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *ssmincidents.ListTagsForResourceInput, arg2 ...request.Option) (*ssmincidents.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTimelineEvents mocks base method.
func (m *MockSSMIncidentsAPI) ListTimelineEvents(arg0 *ssmincidents.ListTimelineEventsInput) (*ssmincidents.ListTimelineEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimelineEvents", arg0)
	ret0, _ := ret[0].(*ssmincidents.ListTimelineEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimelineEvents indicates an expected call of ListTimelineEvents.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTimelineEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineEvents", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTimelineEvents), arg0)
}

// ListTimelineEventsPages mocks base method.
func (m *MockSSMIncidentsAPI) ListTimelineEventsPages(arg0 *ssmincidents.ListTimelineEventsInput, arg1 func(*ssmincidents.ListTimelineEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimelineEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTimelineEventsPages indicates an expected call of ListTimelineEventsPages.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTimelineEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineEventsPages", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTimelineEventsPages), arg0, arg1)
}

// ListTimelineEventsPagesWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListTimelineEventsPagesWithContext(arg0 context.Context, arg1 *ssmincidents.ListTimelineEventsInput, arg2 func(*ssmincidents.ListTimelineEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTimelineEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTimelineEventsPagesWithContext indicates an expected call of ListTimelineEventsPagesWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTimelineEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineEventsPagesWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTimelineEventsPagesWithContext), varargs...)
}

// ListTimelineEventsRequest mocks base method.
func (m *MockSSMIncidentsAPI) ListTimelineEventsRequest(arg0 *ssmincidents.ListTimelineEventsInput) (*request.Request, *ssmincidents.ListTimelineEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTimelineEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.ListTimelineEventsOutput)
	return ret0, ret1
}

// ListTimelineEventsRequest indicates an expected call of ListTimelineEventsRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTimelineEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineEventsRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTimelineEventsRequest), arg0)
}

// ListTimelineEventsWithContext mocks base method.
func (m *MockSSMIncidentsAPI) ListTimelineEventsWithContext(arg0 context.Context, arg1 *ssmincidents.ListTimelineEventsInput, arg2 ...request.Option) (*ssmincidents.ListTimelineEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTimelineEventsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.ListTimelineEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTimelineEventsWithContext indicates an expected call of ListTimelineEventsWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) ListTimelineEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTimelineEventsWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).ListTimelineEventsWithContext), varargs...)
}

// PutResourcePolicy mocks base method.
func (m *MockSSMIncidentsAPI) PutResourcePolicy(arg0 *ssmincidents.PutResourcePolicyInput) (*ssmincidents.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*ssmincidents.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy.
func (mr *MockSSMIncidentsAPIMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method.
func (m *MockSSMIncidentsAPI) PutResourcePolicyRequest(arg0 *ssmincidents.PutResourcePolicyInput) (*request.Request, *ssmincidents.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method.
func (m *MockSSMIncidentsAPI) PutResourcePolicyWithContext(arg0 context.Context, arg1 *ssmincidents.PutResourcePolicyInput, arg2 ...request.Option) (*ssmincidents.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).PutResourcePolicyWithContext), varargs...)
}

// StartIncident mocks base method.
func (m *MockSSMIncidentsAPI) StartIncident(arg0 *ssmincidents.StartIncidentInput) (*ssmincidents.StartIncidentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIncident", arg0)
	ret0, _ := ret[0].(*ssmincidents.StartIncidentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIncident indicates an expected call of StartIncident.
func (mr *MockSSMIncidentsAPIMockRecorder) StartIncident(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIncident", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).StartIncident), arg0)
}

// StartIncidentRequest mocks base method.
func (m *MockSSMIncidentsAPI) StartIncidentRequest(arg0 *ssmincidents.StartIncidentInput) (*request.Request, *ssmincidents.StartIncidentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartIncidentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.StartIncidentOutput)
	return ret0, ret1
}

// StartIncidentRequest indicates an expected call of StartIncidentRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) StartIncidentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIncidentRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).StartIncidentRequest), arg0)
}

// StartIncidentWithContext mocks base method.
func (m *MockSSMIncidentsAPI) StartIncidentWithContext(arg0 context.Context, arg1 *ssmincidents.StartIncidentInput, arg2 ...request.Option) (*ssmincidents.StartIncidentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartIncidentWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.StartIncidentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartIncidentWithContext indicates an expected call of StartIncidentWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) StartIncidentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartIncidentWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).StartIncidentWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockSSMIncidentsAPI) TagResource(arg0 *ssmincidents.TagResourceInput) (*ssmincidents.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ssmincidents.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockSSMIncidentsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockSSMIncidentsAPI) TagResourceRequest(arg0 *ssmincidents.TagResourceInput) (*request.Request, *ssmincidents.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockSSMIncidentsAPI) TagResourceWithContext(arg0 context.Context, arg1 *ssmincidents.TagResourceInput, arg2 ...request.Option) (*ssmincidents.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockSSMIncidentsAPI) UntagResource(arg0 *ssmincidents.UntagResourceInput) (*ssmincidents.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ssmincidents.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockSSMIncidentsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockSSMIncidentsAPI) UntagResourceRequest(arg0 *ssmincidents.UntagResourceInput) (*request.Request, *ssmincidents.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockSSMIncidentsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ssmincidents.UntagResourceInput, arg2 ...request.Option) (*ssmincidents.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDeletionProtection mocks base method.
func (m *MockSSMIncidentsAPI) UpdateDeletionProtection(arg0 *ssmincidents.UpdateDeletionProtectionInput) (*ssmincidents.UpdateDeletionProtectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeletionProtection", arg0)
	ret0, _ := ret[0].(*ssmincidents.UpdateDeletionProtectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeletionProtection indicates an expected call of UpdateDeletionProtection.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateDeletionProtection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeletionProtection", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateDeletionProtection), arg0)
}

// UpdateDeletionProtectionRequest mocks base method.
func (m *MockSSMIncidentsAPI) UpdateDeletionProtectionRequest(arg0 *ssmincidents.UpdateDeletionProtectionInput) (*request.Request, *ssmincidents.UpdateDeletionProtectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeletionProtectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.UpdateDeletionProtectionOutput)
	return ret0, ret1
}

// UpdateDeletionProtectionRequest indicates an expected call of UpdateDeletionProtectionRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateDeletionProtectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeletionProtectionRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateDeletionProtectionRequest), arg0)
}

// UpdateDeletionProtectionWithContext mocks base method.
func (m *MockSSMIncidentsAPI) UpdateDeletionProtectionWithContext(arg0 context.Context, arg1 *ssmincidents.UpdateDeletionProtectionInput, arg2 ...request.Option) (*ssmincidents.UpdateDeletionProtectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeletionProtectionWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.UpdateDeletionProtectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeletionProtectionWithContext indicates an expected call of UpdateDeletionProtectionWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateDeletionProtectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeletionProtectionWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateDeletionProtectionWithContext), varargs...)
}

// UpdateIncidentRecord mocks base method.
func (m *MockSSMIncidentsAPI) UpdateIncidentRecord(arg0 *ssmincidents.UpdateIncidentRecordInput) (*ssmincidents.UpdateIncidentRecordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncidentRecord", arg0)
	ret0, _ := ret[0].(*ssmincidents.UpdateIncidentRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIncidentRecord indicates an expected call of UpdateIncidentRecord.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateIncidentRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncidentRecord", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateIncidentRecord), arg0)
}

// UpdateIncidentRecordRequest mocks base method.
func (m *MockSSMIncidentsAPI) UpdateIncidentRecordRequest(arg0 *ssmincidents.UpdateIncidentRecordInput) (*request.Request, *ssmincidents.UpdateIncidentRecordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncidentRecordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.UpdateIncidentRecordOutput)
	return ret0, ret1
}

// UpdateIncidentRecordRequest indicates an expected call of UpdateIncidentRecordRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateIncidentRecordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncidentRecordRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateIncidentRecordRequest), arg0)
}

// UpdateIncidentRecordWithContext mocks base method.
func (m *MockSSMIncidentsAPI) UpdateIncidentRecordWithContext(arg0 context.Context, arg1 *ssmincidents.UpdateIncidentRecordInput, arg2 ...request.Option) (*ssmincidents.UpdateIncidentRecordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIncidentRecordWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.UpdateIncidentRecordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIncidentRecordWithContext indicates an expected call of UpdateIncidentRecordWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateIncidentRecordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncidentRecordWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateIncidentRecordWithContext), varargs...)
}

// UpdateRelatedItems mocks base method.
func (m *MockSSMIncidentsAPI) UpdateRelatedItems(arg0 *ssmincidents.UpdateRelatedItemsInput) (*ssmincidents.UpdateRelatedItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelatedItems", arg0)
	ret0, _ := ret[0].(*ssmincidents.UpdateRelatedItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRelatedItems indicates an expected call of UpdateRelatedItems.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateRelatedItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelatedItems", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateRelatedItems), arg0)
}

// UpdateRelatedItemsRequest mocks base method.
func (m *MockSSMIncidentsAPI) UpdateRelatedItemsRequest(arg0 *ssmincidents.UpdateRelatedItemsInput) (*request.Request, *ssmincidents.UpdateRelatedItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelatedItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.UpdateRelatedItemsOutput)
	return ret0, ret1
}

// UpdateRelatedItemsRequest indicates an expected call of UpdateRelatedItemsRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateRelatedItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelatedItemsRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateRelatedItemsRequest), arg0)
}

// UpdateRelatedItemsWithContext mocks base method.
func (m *MockSSMIncidentsAPI) UpdateRelatedItemsWithContext(arg0 context.Context, arg1 *ssmincidents.UpdateRelatedItemsInput, arg2 ...request.Option) (*ssmincidents.UpdateRelatedItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRelatedItemsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.UpdateRelatedItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRelatedItemsWithContext indicates an expected call of UpdateRelatedItemsWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateRelatedItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelatedItemsWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateRelatedItemsWithContext), varargs...)
}

// UpdateReplicationSet mocks base method.
func (m *MockSSMIncidentsAPI) UpdateReplicationSet(arg0 *ssmincidents.UpdateReplicationSetInput) (*ssmincidents.UpdateReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationSet", arg0)
	ret0, _ := ret[0].(*ssmincidents.UpdateReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationSet indicates an expected call of UpdateReplicationSet.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateReplicationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationSet", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateReplicationSet), arg0)
}

// UpdateReplicationSetRequest mocks base method.
func (m *MockSSMIncidentsAPI) UpdateReplicationSetRequest(arg0 *ssmincidents.UpdateReplicationSetInput) (*request.Request, *ssmincidents.UpdateReplicationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.UpdateReplicationSetOutput)
	return ret0, ret1
}

// UpdateReplicationSetRequest indicates an expected call of UpdateReplicationSetRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateReplicationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationSetRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateReplicationSetRequest), arg0)
}

// UpdateReplicationSetWithContext mocks base method.
func (m *MockSSMIncidentsAPI) UpdateReplicationSetWithContext(arg0 context.Context, arg1 *ssmincidents.UpdateReplicationSetInput, arg2 ...request.Option) (*ssmincidents.UpdateReplicationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationSetWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.UpdateReplicationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationSetWithContext indicates an expected call of UpdateReplicationSetWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateReplicationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationSetWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateReplicationSetWithContext), varargs...)
}

// UpdateResponsePlan mocks base method.
func (m *MockSSMIncidentsAPI) UpdateResponsePlan(arg0 *ssmincidents.UpdateResponsePlanInput) (*ssmincidents.UpdateResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResponsePlan", arg0)
	ret0, _ := ret[0].(*ssmincidents.UpdateResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResponsePlan indicates an expected call of UpdateResponsePlan.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateResponsePlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResponsePlan", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateResponsePlan), arg0)
}

// UpdateResponsePlanRequest mocks base method.
func (m *MockSSMIncidentsAPI) UpdateResponsePlanRequest(arg0 *ssmincidents.UpdateResponsePlanInput) (*request.Request, *ssmincidents.UpdateResponsePlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResponsePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.UpdateResponsePlanOutput)
	return ret0, ret1
}

// UpdateResponsePlanRequest indicates an expected call of UpdateResponsePlanRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateResponsePlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResponsePlanRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateResponsePlanRequest), arg0)
}

// UpdateResponsePlanWithContext mocks base method.
func (m *MockSSMIncidentsAPI) UpdateResponsePlanWithContext(arg0 context.Context, arg1 *ssmincidents.UpdateResponsePlanInput, arg2 ...request.Option) (*ssmincidents.UpdateResponsePlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResponsePlanWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.UpdateResponsePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResponsePlanWithContext indicates an expected call of UpdateResponsePlanWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateResponsePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResponsePlanWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateResponsePlanWithContext), varargs...)
}

// UpdateTimelineEvent mocks base method.
func (m *MockSSMIncidentsAPI) UpdateTimelineEvent(arg0 *ssmincidents.UpdateTimelineEventInput) (*ssmincidents.UpdateTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimelineEvent", arg0)
	ret0, _ := ret[0].(*ssmincidents.UpdateTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimelineEvent indicates an expected call of UpdateTimelineEvent.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateTimelineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimelineEvent", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateTimelineEvent), arg0)
}

// UpdateTimelineEventRequest mocks base method.
func (m *MockSSMIncidentsAPI) UpdateTimelineEventRequest(arg0 *ssmincidents.UpdateTimelineEventInput) (*request.Request, *ssmincidents.UpdateTimelineEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimelineEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmincidents.UpdateTimelineEventOutput)
	return ret0, ret1
}

// UpdateTimelineEventRequest indicates an expected call of UpdateTimelineEventRequest.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateTimelineEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimelineEventRequest", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateTimelineEventRequest), arg0)
}

// UpdateTimelineEventWithContext mocks base method.
func (m *MockSSMIncidentsAPI) UpdateTimelineEventWithContext(arg0 context.Context, arg1 *ssmincidents.UpdateTimelineEventInput, arg2 ...request.Option) (*ssmincidents.UpdateTimelineEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTimelineEventWithContext", varargs...)
	ret0, _ := ret[0].(*ssmincidents.UpdateTimelineEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimelineEventWithContext indicates an expected call of UpdateTimelineEventWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) UpdateTimelineEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimelineEventWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).UpdateTimelineEventWithContext), varargs...)
}

// WaitUntilWaitForReplicationSetActive mocks base method.
func (m *MockSSMIncidentsAPI) WaitUntilWaitForReplicationSetActive(arg0 *ssmincidents.GetReplicationSetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilWaitForReplicationSetActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWaitForReplicationSetActive indicates an expected call of WaitUntilWaitForReplicationSetActive.
func (mr *MockSSMIncidentsAPIMockRecorder) WaitUntilWaitForReplicationSetActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWaitForReplicationSetActive", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).WaitUntilWaitForReplicationSetActive), arg0)
}

// WaitUntilWaitForReplicationSetActiveWithContext mocks base method.
func (m *MockSSMIncidentsAPI) WaitUntilWaitForReplicationSetActiveWithContext(arg0 context.Context, arg1 *ssmincidents.GetReplicationSetInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilWaitForReplicationSetActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWaitForReplicationSetActiveWithContext indicates an expected call of WaitUntilWaitForReplicationSetActiveWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) WaitUntilWaitForReplicationSetActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWaitForReplicationSetActiveWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).WaitUntilWaitForReplicationSetActiveWithContext), varargs...)
}

// WaitUntilWaitForReplicationSetDeleted mocks base method.
func (m *MockSSMIncidentsAPI) WaitUntilWaitForReplicationSetDeleted(arg0 *ssmincidents.GetReplicationSetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilWaitForReplicationSetDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWaitForReplicationSetDeleted indicates an expected call of WaitUntilWaitForReplicationSetDeleted.
func (mr *MockSSMIncidentsAPIMockRecorder) WaitUntilWaitForReplicationSetDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWaitForReplicationSetDeleted", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).WaitUntilWaitForReplicationSetDeleted), arg0)
}

// WaitUntilWaitForReplicationSetDeletedWithContext mocks base method.
func (m *MockSSMIncidentsAPI) WaitUntilWaitForReplicationSetDeletedWithContext(arg0 context.Context, arg1 *ssmincidents.GetReplicationSetInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilWaitForReplicationSetDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWaitForReplicationSetDeletedWithContext indicates an expected call of WaitUntilWaitForReplicationSetDeletedWithContext.
func (mr *MockSSMIncidentsAPIMockRecorder) WaitUntilWaitForReplicationSetDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWaitForReplicationSetDeletedWithContext", reflect.TypeOf((*MockSSMIncidentsAPI)(nil).WaitUntilWaitForReplicationSetDeletedWithContext), varargs...)
}

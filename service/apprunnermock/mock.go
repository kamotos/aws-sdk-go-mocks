// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/apprunner/apprunneriface (interfaces: AppRunnerAPI)

// Package apprunnermock is a generated GoMock package.
package apprunnermock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	apprunner "github.com/aws/aws-sdk-go/service/apprunner"
	gomock "github.com/golang/mock/gomock"
)

// MockAppRunnerAPI is a mock of AppRunnerAPI interface.
type MockAppRunnerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppRunnerAPIMockRecorder
}

// MockAppRunnerAPIMockRecorder is the mock recorder for MockAppRunnerAPI.
type MockAppRunnerAPIMockRecorder struct {
	mock *MockAppRunnerAPI
}

// NewMockAppRunnerAPI creates a new mock instance.
func NewMockAppRunnerAPI(ctrl *gomock.Controller) *MockAppRunnerAPI {
	mock := &MockAppRunnerAPI{ctrl: ctrl}
	mock.recorder = &MockAppRunnerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRunnerAPI) EXPECT() *MockAppRunnerAPIMockRecorder {
	return m.recorder
}

// AssociateCustomDomain mocks base method.
func (m *MockAppRunnerAPI) AssociateCustomDomain(arg0 *apprunner.AssociateCustomDomainInput) (*apprunner.AssociateCustomDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateCustomDomain", arg0)
	ret0, _ := ret[0].(*apprunner.AssociateCustomDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateCustomDomain indicates an expected call of AssociateCustomDomain.
func (mr *MockAppRunnerAPIMockRecorder) AssociateCustomDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCustomDomain", reflect.TypeOf((*MockAppRunnerAPI)(nil).AssociateCustomDomain), arg0)
}

// AssociateCustomDomainRequest mocks base method.
func (m *MockAppRunnerAPI) AssociateCustomDomainRequest(arg0 *apprunner.AssociateCustomDomainInput) (*request.Request, *apprunner.AssociateCustomDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateCustomDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.AssociateCustomDomainOutput)
	return ret0, ret1
}

// AssociateCustomDomainRequest indicates an expected call of AssociateCustomDomainRequest.
func (mr *MockAppRunnerAPIMockRecorder) AssociateCustomDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCustomDomainRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).AssociateCustomDomainRequest), arg0)
}

// AssociateCustomDomainWithContext mocks base method.
func (m *MockAppRunnerAPI) AssociateCustomDomainWithContext(arg0 context.Context, arg1 *apprunner.AssociateCustomDomainInput, arg2 ...request.Option) (*apprunner.AssociateCustomDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateCustomDomainWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.AssociateCustomDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateCustomDomainWithContext indicates an expected call of AssociateCustomDomainWithContext.
func (mr *MockAppRunnerAPIMockRecorder) AssociateCustomDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCustomDomainWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).AssociateCustomDomainWithContext), varargs...)
}

// CreateAutoScalingConfiguration mocks base method.
func (m *MockAppRunnerAPI) CreateAutoScalingConfiguration(arg0 *apprunner.CreateAutoScalingConfigurationInput) (*apprunner.CreateAutoScalingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutoScalingConfiguration", arg0)
	ret0, _ := ret[0].(*apprunner.CreateAutoScalingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAutoScalingConfiguration indicates an expected call of CreateAutoScalingConfiguration.
func (mr *MockAppRunnerAPIMockRecorder) CreateAutoScalingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutoScalingConfiguration", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateAutoScalingConfiguration), arg0)
}

// CreateAutoScalingConfigurationRequest mocks base method.
func (m *MockAppRunnerAPI) CreateAutoScalingConfigurationRequest(arg0 *apprunner.CreateAutoScalingConfigurationInput) (*request.Request, *apprunner.CreateAutoScalingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutoScalingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.CreateAutoScalingConfigurationOutput)
	return ret0, ret1
}

// CreateAutoScalingConfigurationRequest indicates an expected call of CreateAutoScalingConfigurationRequest.
func (mr *MockAppRunnerAPIMockRecorder) CreateAutoScalingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutoScalingConfigurationRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateAutoScalingConfigurationRequest), arg0)
}

// CreateAutoScalingConfigurationWithContext mocks base method.
func (m *MockAppRunnerAPI) CreateAutoScalingConfigurationWithContext(arg0 context.Context, arg1 *apprunner.CreateAutoScalingConfigurationInput, arg2 ...request.Option) (*apprunner.CreateAutoScalingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAutoScalingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.CreateAutoScalingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAutoScalingConfigurationWithContext indicates an expected call of CreateAutoScalingConfigurationWithContext.
func (mr *MockAppRunnerAPIMockRecorder) CreateAutoScalingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutoScalingConfigurationWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateAutoScalingConfigurationWithContext), varargs...)
}

// CreateConnection mocks base method.
func (m *MockAppRunnerAPI) CreateConnection(arg0 *apprunner.CreateConnectionInput) (*apprunner.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", arg0)
	ret0, _ := ret[0].(*apprunner.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockAppRunnerAPIMockRecorder) CreateConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateConnection), arg0)
}

// CreateConnectionRequest mocks base method.
func (m *MockAppRunnerAPI) CreateConnectionRequest(arg0 *apprunner.CreateConnectionInput) (*request.Request, *apprunner.CreateConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.CreateConnectionOutput)
	return ret0, ret1
}

// CreateConnectionRequest indicates an expected call of CreateConnectionRequest.
func (mr *MockAppRunnerAPIMockRecorder) CreateConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateConnectionRequest), arg0)
}

// CreateConnectionWithContext mocks base method.
func (m *MockAppRunnerAPI) CreateConnectionWithContext(arg0 context.Context, arg1 *apprunner.CreateConnectionInput, arg2 ...request.Option) (*apprunner.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectionWithContext indicates an expected call of CreateConnectionWithContext.
func (mr *MockAppRunnerAPIMockRecorder) CreateConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateConnectionWithContext), varargs...)
}

// CreateService mocks base method.
func (m *MockAppRunnerAPI) CreateService(arg0 *apprunner.CreateServiceInput) (*apprunner.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*apprunner.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockAppRunnerAPIMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateService), arg0)
}

// CreateServiceRequest mocks base method.
func (m *MockAppRunnerAPI) CreateServiceRequest(arg0 *apprunner.CreateServiceInput) (*request.Request, *apprunner.CreateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.CreateServiceOutput)
	return ret0, ret1
}

// CreateServiceRequest indicates an expected call of CreateServiceRequest.
func (mr *MockAppRunnerAPIMockRecorder) CreateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateServiceRequest), arg0)
}

// CreateServiceWithContext mocks base method.
func (m *MockAppRunnerAPI) CreateServiceWithContext(arg0 context.Context, arg1 *apprunner.CreateServiceInput, arg2 ...request.Option) (*apprunner.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceWithContext indicates an expected call of CreateServiceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) CreateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateServiceWithContext), varargs...)
}

// CreateVpcConnector mocks base method.
func (m *MockAppRunnerAPI) CreateVpcConnector(arg0 *apprunner.CreateVpcConnectorInput) (*apprunner.CreateVpcConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcConnector", arg0)
	ret0, _ := ret[0].(*apprunner.CreateVpcConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcConnector indicates an expected call of CreateVpcConnector.
func (mr *MockAppRunnerAPIMockRecorder) CreateVpcConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcConnector", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateVpcConnector), arg0)
}

// CreateVpcConnectorRequest mocks base method.
func (m *MockAppRunnerAPI) CreateVpcConnectorRequest(arg0 *apprunner.CreateVpcConnectorInput) (*request.Request, *apprunner.CreateVpcConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.CreateVpcConnectorOutput)
	return ret0, ret1
}

// CreateVpcConnectorRequest indicates an expected call of CreateVpcConnectorRequest.
func (mr *MockAppRunnerAPIMockRecorder) CreateVpcConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcConnectorRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateVpcConnectorRequest), arg0)
}

// CreateVpcConnectorWithContext mocks base method.
func (m *MockAppRunnerAPI) CreateVpcConnectorWithContext(arg0 context.Context, arg1 *apprunner.CreateVpcConnectorInput, arg2 ...request.Option) (*apprunner.CreateVpcConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVpcConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.CreateVpcConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcConnectorWithContext indicates an expected call of CreateVpcConnectorWithContext.
func (mr *MockAppRunnerAPIMockRecorder) CreateVpcConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcConnectorWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).CreateVpcConnectorWithContext), varargs...)
}

// DeleteAutoScalingConfiguration mocks base method.
func (m *MockAppRunnerAPI) DeleteAutoScalingConfiguration(arg0 *apprunner.DeleteAutoScalingConfigurationInput) (*apprunner.DeleteAutoScalingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutoScalingConfiguration", arg0)
	ret0, _ := ret[0].(*apprunner.DeleteAutoScalingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutoScalingConfiguration indicates an expected call of DeleteAutoScalingConfiguration.
func (mr *MockAppRunnerAPIMockRecorder) DeleteAutoScalingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoScalingConfiguration", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteAutoScalingConfiguration), arg0)
}

// DeleteAutoScalingConfigurationRequest mocks base method.
func (m *MockAppRunnerAPI) DeleteAutoScalingConfigurationRequest(arg0 *apprunner.DeleteAutoScalingConfigurationInput) (*request.Request, *apprunner.DeleteAutoScalingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutoScalingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DeleteAutoScalingConfigurationOutput)
	return ret0, ret1
}

// DeleteAutoScalingConfigurationRequest indicates an expected call of DeleteAutoScalingConfigurationRequest.
func (mr *MockAppRunnerAPIMockRecorder) DeleteAutoScalingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoScalingConfigurationRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteAutoScalingConfigurationRequest), arg0)
}

// DeleteAutoScalingConfigurationWithContext mocks base method.
func (m *MockAppRunnerAPI) DeleteAutoScalingConfigurationWithContext(arg0 context.Context, arg1 *apprunner.DeleteAutoScalingConfigurationInput, arg2 ...request.Option) (*apprunner.DeleteAutoScalingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAutoScalingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DeleteAutoScalingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAutoScalingConfigurationWithContext indicates an expected call of DeleteAutoScalingConfigurationWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DeleteAutoScalingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutoScalingConfigurationWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteAutoScalingConfigurationWithContext), varargs...)
}

// DeleteConnection mocks base method.
func (m *MockAppRunnerAPI) DeleteConnection(arg0 *apprunner.DeleteConnectionInput) (*apprunner.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", arg0)
	ret0, _ := ret[0].(*apprunner.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnection indicates an expected call of DeleteConnection.
func (mr *MockAppRunnerAPIMockRecorder) DeleteConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteConnection), arg0)
}

// DeleteConnectionRequest mocks base method.
func (m *MockAppRunnerAPI) DeleteConnectionRequest(arg0 *apprunner.DeleteConnectionInput) (*request.Request, *apprunner.DeleteConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DeleteConnectionOutput)
	return ret0, ret1
}

// DeleteConnectionRequest indicates an expected call of DeleteConnectionRequest.
func (mr *MockAppRunnerAPIMockRecorder) DeleteConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteConnectionRequest), arg0)
}

// DeleteConnectionWithContext mocks base method.
func (m *MockAppRunnerAPI) DeleteConnectionWithContext(arg0 context.Context, arg1 *apprunner.DeleteConnectionInput, arg2 ...request.Option) (*apprunner.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectionWithContext indicates an expected call of DeleteConnectionWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DeleteConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteConnectionWithContext), varargs...)
}

// DeleteService mocks base method.
func (m *MockAppRunnerAPI) DeleteService(arg0 *apprunner.DeleteServiceInput) (*apprunner.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(*apprunner.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockAppRunnerAPIMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteService), arg0)
}

// DeleteServiceRequest mocks base method.
func (m *MockAppRunnerAPI) DeleteServiceRequest(arg0 *apprunner.DeleteServiceInput) (*request.Request, *apprunner.DeleteServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DeleteServiceOutput)
	return ret0, ret1
}

// DeleteServiceRequest indicates an expected call of DeleteServiceRequest.
func (mr *MockAppRunnerAPIMockRecorder) DeleteServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteServiceRequest), arg0)
}

// DeleteServiceWithContext mocks base method.
func (m *MockAppRunnerAPI) DeleteServiceWithContext(arg0 context.Context, arg1 *apprunner.DeleteServiceInput, arg2 ...request.Option) (*apprunner.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceWithContext indicates an expected call of DeleteServiceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DeleteServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteServiceWithContext), varargs...)
}

// DeleteVpcConnector mocks base method.
func (m *MockAppRunnerAPI) DeleteVpcConnector(arg0 *apprunner.DeleteVpcConnectorInput) (*apprunner.DeleteVpcConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpcConnector", arg0)
	ret0, _ := ret[0].(*apprunner.DeleteVpcConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpcConnector indicates an expected call of DeleteVpcConnector.
func (mr *MockAppRunnerAPIMockRecorder) DeleteVpcConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcConnector", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteVpcConnector), arg0)
}

// DeleteVpcConnectorRequest mocks base method.
func (m *MockAppRunnerAPI) DeleteVpcConnectorRequest(arg0 *apprunner.DeleteVpcConnectorInput) (*request.Request, *apprunner.DeleteVpcConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpcConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DeleteVpcConnectorOutput)
	return ret0, ret1
}

// DeleteVpcConnectorRequest indicates an expected call of DeleteVpcConnectorRequest.
func (mr *MockAppRunnerAPIMockRecorder) DeleteVpcConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcConnectorRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteVpcConnectorRequest), arg0)
}

// DeleteVpcConnectorWithContext mocks base method.
func (m *MockAppRunnerAPI) DeleteVpcConnectorWithContext(arg0 context.Context, arg1 *apprunner.DeleteVpcConnectorInput, arg2 ...request.Option) (*apprunner.DeleteVpcConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVpcConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DeleteVpcConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpcConnectorWithContext indicates an expected call of DeleteVpcConnectorWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DeleteVpcConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcConnectorWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DeleteVpcConnectorWithContext), varargs...)
}

// DescribeAutoScalingConfiguration mocks base method.
func (m *MockAppRunnerAPI) DescribeAutoScalingConfiguration(arg0 *apprunner.DescribeAutoScalingConfigurationInput) (*apprunner.DescribeAutoScalingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAutoScalingConfiguration", arg0)
	ret0, _ := ret[0].(*apprunner.DescribeAutoScalingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAutoScalingConfiguration indicates an expected call of DescribeAutoScalingConfiguration.
func (mr *MockAppRunnerAPIMockRecorder) DescribeAutoScalingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutoScalingConfiguration", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeAutoScalingConfiguration), arg0)
}

// DescribeAutoScalingConfigurationRequest mocks base method.
func (m *MockAppRunnerAPI) DescribeAutoScalingConfigurationRequest(arg0 *apprunner.DescribeAutoScalingConfigurationInput) (*request.Request, *apprunner.DescribeAutoScalingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAutoScalingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DescribeAutoScalingConfigurationOutput)
	return ret0, ret1
}

// DescribeAutoScalingConfigurationRequest indicates an expected call of DescribeAutoScalingConfigurationRequest.
func (mr *MockAppRunnerAPIMockRecorder) DescribeAutoScalingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutoScalingConfigurationRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeAutoScalingConfigurationRequest), arg0)
}

// DescribeAutoScalingConfigurationWithContext mocks base method.
func (m *MockAppRunnerAPI) DescribeAutoScalingConfigurationWithContext(arg0 context.Context, arg1 *apprunner.DescribeAutoScalingConfigurationInput, arg2 ...request.Option) (*apprunner.DescribeAutoScalingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAutoScalingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DescribeAutoScalingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAutoScalingConfigurationWithContext indicates an expected call of DescribeAutoScalingConfigurationWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DescribeAutoScalingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAutoScalingConfigurationWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeAutoScalingConfigurationWithContext), varargs...)
}

// DescribeCustomDomains mocks base method.
func (m *MockAppRunnerAPI) DescribeCustomDomains(arg0 *apprunner.DescribeCustomDomainsInput) (*apprunner.DescribeCustomDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomDomains", arg0)
	ret0, _ := ret[0].(*apprunner.DescribeCustomDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomDomains indicates an expected call of DescribeCustomDomains.
func (mr *MockAppRunnerAPIMockRecorder) DescribeCustomDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomDomains", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeCustomDomains), arg0)
}

// DescribeCustomDomainsPages mocks base method.
func (m *MockAppRunnerAPI) DescribeCustomDomainsPages(arg0 *apprunner.DescribeCustomDomainsInput, arg1 func(*apprunner.DescribeCustomDomainsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomDomainsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCustomDomainsPages indicates an expected call of DescribeCustomDomainsPages.
func (mr *MockAppRunnerAPIMockRecorder) DescribeCustomDomainsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomDomainsPages", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeCustomDomainsPages), arg0, arg1)
}

// DescribeCustomDomainsPagesWithContext mocks base method.
func (m *MockAppRunnerAPI) DescribeCustomDomainsPagesWithContext(arg0 context.Context, arg1 *apprunner.DescribeCustomDomainsInput, arg2 func(*apprunner.DescribeCustomDomainsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomDomainsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCustomDomainsPagesWithContext indicates an expected call of DescribeCustomDomainsPagesWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DescribeCustomDomainsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomDomainsPagesWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeCustomDomainsPagesWithContext), varargs...)
}

// DescribeCustomDomainsRequest mocks base method.
func (m *MockAppRunnerAPI) DescribeCustomDomainsRequest(arg0 *apprunner.DescribeCustomDomainsInput) (*request.Request, *apprunner.DescribeCustomDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DescribeCustomDomainsOutput)
	return ret0, ret1
}

// DescribeCustomDomainsRequest indicates an expected call of DescribeCustomDomainsRequest.
func (mr *MockAppRunnerAPIMockRecorder) DescribeCustomDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomDomainsRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeCustomDomainsRequest), arg0)
}

// DescribeCustomDomainsWithContext mocks base method.
func (m *MockAppRunnerAPI) DescribeCustomDomainsWithContext(arg0 context.Context, arg1 *apprunner.DescribeCustomDomainsInput, arg2 ...request.Option) (*apprunner.DescribeCustomDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DescribeCustomDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomDomainsWithContext indicates an expected call of DescribeCustomDomainsWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DescribeCustomDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomDomainsWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeCustomDomainsWithContext), varargs...)
}

// DescribeService mocks base method.
func (m *MockAppRunnerAPI) DescribeService(arg0 *apprunner.DescribeServiceInput) (*apprunner.DescribeServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeService", arg0)
	ret0, _ := ret[0].(*apprunner.DescribeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeService indicates an expected call of DescribeService.
func (mr *MockAppRunnerAPIMockRecorder) DescribeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeService", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeService), arg0)
}

// DescribeServiceRequest mocks base method.
func (m *MockAppRunnerAPI) DescribeServiceRequest(arg0 *apprunner.DescribeServiceInput) (*request.Request, *apprunner.DescribeServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DescribeServiceOutput)
	return ret0, ret1
}

// DescribeServiceRequest indicates an expected call of DescribeServiceRequest.
func (mr *MockAppRunnerAPIMockRecorder) DescribeServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeServiceRequest), arg0)
}

// DescribeServiceWithContext mocks base method.
func (m *MockAppRunnerAPI) DescribeServiceWithContext(arg0 context.Context, arg1 *apprunner.DescribeServiceInput, arg2 ...request.Option) (*apprunner.DescribeServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServiceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DescribeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceWithContext indicates an expected call of DescribeServiceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DescribeServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeServiceWithContext), varargs...)
}

// DescribeVpcConnector mocks base method.
func (m *MockAppRunnerAPI) DescribeVpcConnector(arg0 *apprunner.DescribeVpcConnectorInput) (*apprunner.DescribeVpcConnectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVpcConnector", arg0)
	ret0, _ := ret[0].(*apprunner.DescribeVpcConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcConnector indicates an expected call of DescribeVpcConnector.
func (mr *MockAppRunnerAPIMockRecorder) DescribeVpcConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcConnector", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeVpcConnector), arg0)
}

// DescribeVpcConnectorRequest mocks base method.
func (m *MockAppRunnerAPI) DescribeVpcConnectorRequest(arg0 *apprunner.DescribeVpcConnectorInput) (*request.Request, *apprunner.DescribeVpcConnectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVpcConnectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DescribeVpcConnectorOutput)
	return ret0, ret1
}

// DescribeVpcConnectorRequest indicates an expected call of DescribeVpcConnectorRequest.
func (mr *MockAppRunnerAPIMockRecorder) DescribeVpcConnectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcConnectorRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeVpcConnectorRequest), arg0)
}

// DescribeVpcConnectorWithContext mocks base method.
func (m *MockAppRunnerAPI) DescribeVpcConnectorWithContext(arg0 context.Context, arg1 *apprunner.DescribeVpcConnectorInput, arg2 ...request.Option) (*apprunner.DescribeVpcConnectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVpcConnectorWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DescribeVpcConnectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcConnectorWithContext indicates an expected call of DescribeVpcConnectorWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DescribeVpcConnectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcConnectorWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DescribeVpcConnectorWithContext), varargs...)
}

// DisassociateCustomDomain mocks base method.
func (m *MockAppRunnerAPI) DisassociateCustomDomain(arg0 *apprunner.DisassociateCustomDomainInput) (*apprunner.DisassociateCustomDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateCustomDomain", arg0)
	ret0, _ := ret[0].(*apprunner.DisassociateCustomDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateCustomDomain indicates an expected call of DisassociateCustomDomain.
func (mr *MockAppRunnerAPIMockRecorder) DisassociateCustomDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCustomDomain", reflect.TypeOf((*MockAppRunnerAPI)(nil).DisassociateCustomDomain), arg0)
}

// DisassociateCustomDomainRequest mocks base method.
func (m *MockAppRunnerAPI) DisassociateCustomDomainRequest(arg0 *apprunner.DisassociateCustomDomainInput) (*request.Request, *apprunner.DisassociateCustomDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateCustomDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.DisassociateCustomDomainOutput)
	return ret0, ret1
}

// DisassociateCustomDomainRequest indicates an expected call of DisassociateCustomDomainRequest.
func (mr *MockAppRunnerAPIMockRecorder) DisassociateCustomDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCustomDomainRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).DisassociateCustomDomainRequest), arg0)
}

// DisassociateCustomDomainWithContext mocks base method.
func (m *MockAppRunnerAPI) DisassociateCustomDomainWithContext(arg0 context.Context, arg1 *apprunner.DisassociateCustomDomainInput, arg2 ...request.Option) (*apprunner.DisassociateCustomDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateCustomDomainWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.DisassociateCustomDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateCustomDomainWithContext indicates an expected call of DisassociateCustomDomainWithContext.
func (mr *MockAppRunnerAPIMockRecorder) DisassociateCustomDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCustomDomainWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).DisassociateCustomDomainWithContext), varargs...)
}

// ListAutoScalingConfigurations mocks base method.
func (m *MockAppRunnerAPI) ListAutoScalingConfigurations(arg0 *apprunner.ListAutoScalingConfigurationsInput) (*apprunner.ListAutoScalingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoScalingConfigurations", arg0)
	ret0, _ := ret[0].(*apprunner.ListAutoScalingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoScalingConfigurations indicates an expected call of ListAutoScalingConfigurations.
func (mr *MockAppRunnerAPIMockRecorder) ListAutoScalingConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoScalingConfigurations", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListAutoScalingConfigurations), arg0)
}

// ListAutoScalingConfigurationsPages mocks base method.
func (m *MockAppRunnerAPI) ListAutoScalingConfigurationsPages(arg0 *apprunner.ListAutoScalingConfigurationsInput, arg1 func(*apprunner.ListAutoScalingConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoScalingConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAutoScalingConfigurationsPages indicates an expected call of ListAutoScalingConfigurationsPages.
func (mr *MockAppRunnerAPIMockRecorder) ListAutoScalingConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoScalingConfigurationsPages", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListAutoScalingConfigurationsPages), arg0, arg1)
}

// ListAutoScalingConfigurationsPagesWithContext mocks base method.
func (m *MockAppRunnerAPI) ListAutoScalingConfigurationsPagesWithContext(arg0 context.Context, arg1 *apprunner.ListAutoScalingConfigurationsInput, arg2 func(*apprunner.ListAutoScalingConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAutoScalingConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAutoScalingConfigurationsPagesWithContext indicates an expected call of ListAutoScalingConfigurationsPagesWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListAutoScalingConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoScalingConfigurationsPagesWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListAutoScalingConfigurationsPagesWithContext), varargs...)
}

// ListAutoScalingConfigurationsRequest mocks base method.
func (m *MockAppRunnerAPI) ListAutoScalingConfigurationsRequest(arg0 *apprunner.ListAutoScalingConfigurationsInput) (*request.Request, *apprunner.ListAutoScalingConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoScalingConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.ListAutoScalingConfigurationsOutput)
	return ret0, ret1
}

// ListAutoScalingConfigurationsRequest indicates an expected call of ListAutoScalingConfigurationsRequest.
func (mr *MockAppRunnerAPIMockRecorder) ListAutoScalingConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoScalingConfigurationsRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListAutoScalingConfigurationsRequest), arg0)
}

// ListAutoScalingConfigurationsWithContext mocks base method.
func (m *MockAppRunnerAPI) ListAutoScalingConfigurationsWithContext(arg0 context.Context, arg1 *apprunner.ListAutoScalingConfigurationsInput, arg2 ...request.Option) (*apprunner.ListAutoScalingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAutoScalingConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.ListAutoScalingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoScalingConfigurationsWithContext indicates an expected call of ListAutoScalingConfigurationsWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListAutoScalingConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoScalingConfigurationsWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListAutoScalingConfigurationsWithContext), varargs...)
}

// ListConnections mocks base method.
func (m *MockAppRunnerAPI) ListConnections(arg0 *apprunner.ListConnectionsInput) (*apprunner.ListConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnections", arg0)
	ret0, _ := ret[0].(*apprunner.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections.
func (mr *MockAppRunnerAPIMockRecorder) ListConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListConnections), arg0)
}

// ListConnectionsPages mocks base method.
func (m *MockAppRunnerAPI) ListConnectionsPages(arg0 *apprunner.ListConnectionsInput, arg1 func(*apprunner.ListConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectionsPages indicates an expected call of ListConnectionsPages.
func (mr *MockAppRunnerAPIMockRecorder) ListConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsPages", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListConnectionsPages), arg0, arg1)
}

// ListConnectionsPagesWithContext mocks base method.
func (m *MockAppRunnerAPI) ListConnectionsPagesWithContext(arg0 context.Context, arg1 *apprunner.ListConnectionsInput, arg2 func(*apprunner.ListConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConnectionsPagesWithContext indicates an expected call of ListConnectionsPagesWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsPagesWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListConnectionsPagesWithContext), varargs...)
}

// ListConnectionsRequest mocks base method.
func (m *MockAppRunnerAPI) ListConnectionsRequest(arg0 *apprunner.ListConnectionsInput) (*request.Request, *apprunner.ListConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.ListConnectionsOutput)
	return ret0, ret1
}

// ListConnectionsRequest indicates an expected call of ListConnectionsRequest.
func (mr *MockAppRunnerAPIMockRecorder) ListConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListConnectionsRequest), arg0)
}

// ListConnectionsWithContext mocks base method.
func (m *MockAppRunnerAPI) ListConnectionsWithContext(arg0 context.Context, arg1 *apprunner.ListConnectionsInput, arg2 ...request.Option) (*apprunner.ListConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.ListConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectionsWithContext indicates an expected call of ListConnectionsWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectionsWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListConnectionsWithContext), varargs...)
}

// ListOperations mocks base method.
func (m *MockAppRunnerAPI) ListOperations(arg0 *apprunner.ListOperationsInput) (*apprunner.ListOperationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", arg0)
	ret0, _ := ret[0].(*apprunner.ListOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockAppRunnerAPIMockRecorder) ListOperations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListOperations), arg0)
}

// ListOperationsPages mocks base method.
func (m *MockAppRunnerAPI) ListOperationsPages(arg0 *apprunner.ListOperationsInput, arg1 func(*apprunner.ListOperationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOperationsPages indicates an expected call of ListOperationsPages.
func (mr *MockAppRunnerAPIMockRecorder) ListOperationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsPages", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListOperationsPages), arg0, arg1)
}

// ListOperationsPagesWithContext mocks base method.
func (m *MockAppRunnerAPI) ListOperationsPagesWithContext(arg0 context.Context, arg1 *apprunner.ListOperationsInput, arg2 func(*apprunner.ListOperationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOperationsPagesWithContext indicates an expected call of ListOperationsPagesWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListOperationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsPagesWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListOperationsPagesWithContext), varargs...)
}

// ListOperationsRequest mocks base method.
func (m *MockAppRunnerAPI) ListOperationsRequest(arg0 *apprunner.ListOperationsInput) (*request.Request, *apprunner.ListOperationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.ListOperationsOutput)
	return ret0, ret1
}

// ListOperationsRequest indicates an expected call of ListOperationsRequest.
func (mr *MockAppRunnerAPIMockRecorder) ListOperationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListOperationsRequest), arg0)
}

// ListOperationsWithContext mocks base method.
func (m *MockAppRunnerAPI) ListOperationsWithContext(arg0 context.Context, arg1 *apprunner.ListOperationsInput, arg2 ...request.Option) (*apprunner.ListOperationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperationsWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.ListOperationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperationsWithContext indicates an expected call of ListOperationsWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListOperationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListOperationsWithContext), varargs...)
}

// ListServices mocks base method.
func (m *MockAppRunnerAPI) ListServices(arg0 *apprunner.ListServicesInput) (*apprunner.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*apprunner.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockAppRunnerAPIMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListServices), arg0)
}

// ListServicesPages mocks base method.
func (m *MockAppRunnerAPI) ListServicesPages(arg0 *apprunner.ListServicesInput, arg1 func(*apprunner.ListServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPages indicates an expected call of ListServicesPages.
func (mr *MockAppRunnerAPIMockRecorder) ListServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPages", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListServicesPages), arg0, arg1)
}

// ListServicesPagesWithContext mocks base method.
func (m *MockAppRunnerAPI) ListServicesPagesWithContext(arg0 context.Context, arg1 *apprunner.ListServicesInput, arg2 func(*apprunner.ListServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPagesWithContext indicates an expected call of ListServicesPagesWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPagesWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListServicesPagesWithContext), varargs...)
}

// ListServicesRequest mocks base method.
func (m *MockAppRunnerAPI) ListServicesRequest(arg0 *apprunner.ListServicesInput) (*request.Request, *apprunner.ListServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.ListServicesOutput)
	return ret0, ret1
}

// ListServicesRequest indicates an expected call of ListServicesRequest.
func (mr *MockAppRunnerAPIMockRecorder) ListServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListServicesRequest), arg0)
}

// ListServicesWithContext mocks base method.
func (m *MockAppRunnerAPI) ListServicesWithContext(arg0 context.Context, arg1 *apprunner.ListServicesInput, arg2 ...request.Option) (*apprunner.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesWithContext indicates an expected call of ListServicesWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListServicesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAppRunnerAPI) ListTagsForResource(arg0 *apprunner.ListTagsForResourceInput) (*apprunner.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*apprunner.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAppRunnerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockAppRunnerAPI) ListTagsForResourceRequest(arg0 *apprunner.ListTagsForResourceInput) (*request.Request, *apprunner.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockAppRunnerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockAppRunnerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *apprunner.ListTagsForResourceInput, arg2 ...request.Option) (*apprunner.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListVpcConnectors mocks base method.
func (m *MockAppRunnerAPI) ListVpcConnectors(arg0 *apprunner.ListVpcConnectorsInput) (*apprunner.ListVpcConnectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpcConnectors", arg0)
	ret0, _ := ret[0].(*apprunner.ListVpcConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpcConnectors indicates an expected call of ListVpcConnectors.
func (mr *MockAppRunnerAPIMockRecorder) ListVpcConnectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcConnectors", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListVpcConnectors), arg0)
}

// ListVpcConnectorsPages mocks base method.
func (m *MockAppRunnerAPI) ListVpcConnectorsPages(arg0 *apprunner.ListVpcConnectorsInput, arg1 func(*apprunner.ListVpcConnectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpcConnectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVpcConnectorsPages indicates an expected call of ListVpcConnectorsPages.
func (mr *MockAppRunnerAPIMockRecorder) ListVpcConnectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcConnectorsPages", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListVpcConnectorsPages), arg0, arg1)
}

// ListVpcConnectorsPagesWithContext mocks base method.
func (m *MockAppRunnerAPI) ListVpcConnectorsPagesWithContext(arg0 context.Context, arg1 *apprunner.ListVpcConnectorsInput, arg2 func(*apprunner.ListVpcConnectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVpcConnectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListVpcConnectorsPagesWithContext indicates an expected call of ListVpcConnectorsPagesWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListVpcConnectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcConnectorsPagesWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListVpcConnectorsPagesWithContext), varargs...)
}

// ListVpcConnectorsRequest mocks base method.
func (m *MockAppRunnerAPI) ListVpcConnectorsRequest(arg0 *apprunner.ListVpcConnectorsInput) (*request.Request, *apprunner.ListVpcConnectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVpcConnectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.ListVpcConnectorsOutput)
	return ret0, ret1
}

// ListVpcConnectorsRequest indicates an expected call of ListVpcConnectorsRequest.
func (mr *MockAppRunnerAPIMockRecorder) ListVpcConnectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcConnectorsRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListVpcConnectorsRequest), arg0)
}

// ListVpcConnectorsWithContext mocks base method.
func (m *MockAppRunnerAPI) ListVpcConnectorsWithContext(arg0 context.Context, arg1 *apprunner.ListVpcConnectorsInput, arg2 ...request.Option) (*apprunner.ListVpcConnectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVpcConnectorsWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.ListVpcConnectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVpcConnectorsWithContext indicates an expected call of ListVpcConnectorsWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ListVpcConnectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVpcConnectorsWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ListVpcConnectorsWithContext), varargs...)
}

// PauseService mocks base method.
func (m *MockAppRunnerAPI) PauseService(arg0 *apprunner.PauseServiceInput) (*apprunner.PauseServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseService", arg0)
	ret0, _ := ret[0].(*apprunner.PauseServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseService indicates an expected call of PauseService.
func (mr *MockAppRunnerAPIMockRecorder) PauseService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseService", reflect.TypeOf((*MockAppRunnerAPI)(nil).PauseService), arg0)
}

// PauseServiceRequest mocks base method.
func (m *MockAppRunnerAPI) PauseServiceRequest(arg0 *apprunner.PauseServiceInput) (*request.Request, *apprunner.PauseServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.PauseServiceOutput)
	return ret0, ret1
}

// PauseServiceRequest indicates an expected call of PauseServiceRequest.
func (mr *MockAppRunnerAPIMockRecorder) PauseServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseServiceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).PauseServiceRequest), arg0)
}

// PauseServiceWithContext mocks base method.
func (m *MockAppRunnerAPI) PauseServiceWithContext(arg0 context.Context, arg1 *apprunner.PauseServiceInput, arg2 ...request.Option) (*apprunner.PauseServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PauseServiceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.PauseServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseServiceWithContext indicates an expected call of PauseServiceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) PauseServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseServiceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).PauseServiceWithContext), varargs...)
}

// ResumeService mocks base method.
func (m *MockAppRunnerAPI) ResumeService(arg0 *apprunner.ResumeServiceInput) (*apprunner.ResumeServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeService", arg0)
	ret0, _ := ret[0].(*apprunner.ResumeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeService indicates an expected call of ResumeService.
func (mr *MockAppRunnerAPIMockRecorder) ResumeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeService", reflect.TypeOf((*MockAppRunnerAPI)(nil).ResumeService), arg0)
}

// ResumeServiceRequest mocks base method.
func (m *MockAppRunnerAPI) ResumeServiceRequest(arg0 *apprunner.ResumeServiceInput) (*request.Request, *apprunner.ResumeServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.ResumeServiceOutput)
	return ret0, ret1
}

// ResumeServiceRequest indicates an expected call of ResumeServiceRequest.
func (mr *MockAppRunnerAPIMockRecorder) ResumeServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeServiceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).ResumeServiceRequest), arg0)
}

// ResumeServiceWithContext mocks base method.
func (m *MockAppRunnerAPI) ResumeServiceWithContext(arg0 context.Context, arg1 *apprunner.ResumeServiceInput, arg2 ...request.Option) (*apprunner.ResumeServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeServiceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.ResumeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeServiceWithContext indicates an expected call of ResumeServiceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) ResumeServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeServiceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).ResumeServiceWithContext), varargs...)
}

// StartDeployment mocks base method.
func (m *MockAppRunnerAPI) StartDeployment(arg0 *apprunner.StartDeploymentInput) (*apprunner.StartDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeployment", arg0)
	ret0, _ := ret[0].(*apprunner.StartDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeployment indicates an expected call of StartDeployment.
func (mr *MockAppRunnerAPIMockRecorder) StartDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeployment", reflect.TypeOf((*MockAppRunnerAPI)(nil).StartDeployment), arg0)
}

// StartDeploymentRequest mocks base method.
func (m *MockAppRunnerAPI) StartDeploymentRequest(arg0 *apprunner.StartDeploymentInput) (*request.Request, *apprunner.StartDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.StartDeploymentOutput)
	return ret0, ret1
}

// StartDeploymentRequest indicates an expected call of StartDeploymentRequest.
func (mr *MockAppRunnerAPIMockRecorder) StartDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeploymentRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).StartDeploymentRequest), arg0)
}

// StartDeploymentWithContext mocks base method.
func (m *MockAppRunnerAPI) StartDeploymentWithContext(arg0 context.Context, arg1 *apprunner.StartDeploymentInput, arg2 ...request.Option) (*apprunner.StartDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.StartDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeploymentWithContext indicates an expected call of StartDeploymentWithContext.
func (mr *MockAppRunnerAPIMockRecorder) StartDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeploymentWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).StartDeploymentWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockAppRunnerAPI) TagResource(arg0 *apprunner.TagResourceInput) (*apprunner.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*apprunner.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockAppRunnerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAppRunnerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockAppRunnerAPI) TagResourceRequest(arg0 *apprunner.TagResourceInput) (*request.Request, *apprunner.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockAppRunnerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockAppRunnerAPI) TagResourceWithContext(arg0 context.Context, arg1 *apprunner.TagResourceInput, arg2 ...request.Option) (*apprunner.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockAppRunnerAPI) UntagResource(arg0 *apprunner.UntagResourceInput) (*apprunner.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*apprunner.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockAppRunnerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAppRunnerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockAppRunnerAPI) UntagResourceRequest(arg0 *apprunner.UntagResourceInput) (*request.Request, *apprunner.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockAppRunnerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockAppRunnerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *apprunner.UntagResourceInput, arg2 ...request.Option) (*apprunner.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateService mocks base method.
func (m *MockAppRunnerAPI) UpdateService(arg0 *apprunner.UpdateServiceInput) (*apprunner.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(*apprunner.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockAppRunnerAPIMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockAppRunnerAPI)(nil).UpdateService), arg0)
}

// UpdateServiceRequest mocks base method.
func (m *MockAppRunnerAPI) UpdateServiceRequest(arg0 *apprunner.UpdateServiceInput) (*request.Request, *apprunner.UpdateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apprunner.UpdateServiceOutput)
	return ret0, ret1
}

// UpdateServiceRequest indicates an expected call of UpdateServiceRequest.
func (mr *MockAppRunnerAPIMockRecorder) UpdateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceRequest", reflect.TypeOf((*MockAppRunnerAPI)(nil).UpdateServiceRequest), arg0)
}

// UpdateServiceWithContext mocks base method.
func (m *MockAppRunnerAPI) UpdateServiceWithContext(arg0 context.Context, arg1 *apprunner.UpdateServiceInput, arg2 ...request.Option) (*apprunner.UpdateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*apprunner.UpdateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceWithContext indicates an expected call of UpdateServiceWithContext.
func (mr *MockAppRunnerAPIMockRecorder) UpdateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceWithContext", reflect.TypeOf((*MockAppRunnerAPI)(nil).UpdateServiceWithContext), varargs...)
}

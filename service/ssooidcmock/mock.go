// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ssooidc/ssooidciface (interfaces: SSOOIDCAPI)

// Package ssooidcmock is a generated GoMock package.
package ssooidcmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	ssooidc "github.com/aws/aws-sdk-go/service/ssooidc"
	gomock "github.com/golang/mock/gomock"
)

// MockSSOOIDCAPI is a mock of SSOOIDCAPI interface.
type MockSSOOIDCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSOOIDCAPIMockRecorder
}

// MockSSOOIDCAPIMockRecorder is the mock recorder for MockSSOOIDCAPI.
type MockSSOOIDCAPIMockRecorder struct {
	mock *MockSSOOIDCAPI
}

// NewMockSSOOIDCAPI creates a new mock instance.
func NewMockSSOOIDCAPI(ctrl *gomock.Controller) *MockSSOOIDCAPI {
	mock := &MockSSOOIDCAPI{ctrl: ctrl}
	mock.recorder = &MockSSOOIDCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSOOIDCAPI) EXPECT() *MockSSOOIDCAPIMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockSSOOIDCAPI) CreateToken(arg0 *ssooidc.CreateTokenInput) (*ssooidc.CreateTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0)
	ret0, _ := ret[0].(*ssooidc.CreateTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockSSOOIDCAPIMockRecorder) CreateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockSSOOIDCAPI)(nil).CreateToken), arg0)
}

// CreateTokenRequest mocks base method.
func (m *MockSSOOIDCAPI) CreateTokenRequest(arg0 *ssooidc.CreateTokenInput) (*request.Request, *ssooidc.CreateTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssooidc.CreateTokenOutput)
	return ret0, ret1
}

// CreateTokenRequest indicates an expected call of CreateTokenRequest.
func (mr *MockSSOOIDCAPIMockRecorder) CreateTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenRequest", reflect.TypeOf((*MockSSOOIDCAPI)(nil).CreateTokenRequest), arg0)
}

// CreateTokenWithContext mocks base method.
func (m *MockSSOOIDCAPI) CreateTokenWithContext(arg0 context.Context, arg1 *ssooidc.CreateTokenInput, arg2 ...request.Option) (*ssooidc.CreateTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTokenWithContext", varargs...)
	ret0, _ := ret[0].(*ssooidc.CreateTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTokenWithContext indicates an expected call of CreateTokenWithContext.
func (mr *MockSSOOIDCAPIMockRecorder) CreateTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenWithContext", reflect.TypeOf((*MockSSOOIDCAPI)(nil).CreateTokenWithContext), varargs...)
}

// RegisterClient mocks base method.
func (m *MockSSOOIDCAPI) RegisterClient(arg0 *ssooidc.RegisterClientInput) (*ssooidc.RegisterClientOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClient", arg0)
	ret0, _ := ret[0].(*ssooidc.RegisterClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockSSOOIDCAPIMockRecorder) RegisterClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockSSOOIDCAPI)(nil).RegisterClient), arg0)
}

// RegisterClientRequest mocks base method.
func (m *MockSSOOIDCAPI) RegisterClientRequest(arg0 *ssooidc.RegisterClientInput) (*request.Request, *ssooidc.RegisterClientOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClientRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssooidc.RegisterClientOutput)
	return ret0, ret1
}

// RegisterClientRequest indicates an expected call of RegisterClientRequest.
func (mr *MockSSOOIDCAPIMockRecorder) RegisterClientRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClientRequest", reflect.TypeOf((*MockSSOOIDCAPI)(nil).RegisterClientRequest), arg0)
}

// RegisterClientWithContext mocks base method.
func (m *MockSSOOIDCAPI) RegisterClientWithContext(arg0 context.Context, arg1 *ssooidc.RegisterClientInput, arg2 ...request.Option) (*ssooidc.RegisterClientOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterClientWithContext", varargs...)
	ret0, _ := ret[0].(*ssooidc.RegisterClientOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterClientWithContext indicates an expected call of RegisterClientWithContext.
func (mr *MockSSOOIDCAPIMockRecorder) RegisterClientWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClientWithContext", reflect.TypeOf((*MockSSOOIDCAPI)(nil).RegisterClientWithContext), varargs...)
}

// StartDeviceAuthorization mocks base method.
func (m *MockSSOOIDCAPI) StartDeviceAuthorization(arg0 *ssooidc.StartDeviceAuthorizationInput) (*ssooidc.StartDeviceAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeviceAuthorization", arg0)
	ret0, _ := ret[0].(*ssooidc.StartDeviceAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeviceAuthorization indicates an expected call of StartDeviceAuthorization.
func (mr *MockSSOOIDCAPIMockRecorder) StartDeviceAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeviceAuthorization", reflect.TypeOf((*MockSSOOIDCAPI)(nil).StartDeviceAuthorization), arg0)
}

// StartDeviceAuthorizationRequest mocks base method.
func (m *MockSSOOIDCAPI) StartDeviceAuthorizationRequest(arg0 *ssooidc.StartDeviceAuthorizationInput) (*request.Request, *ssooidc.StartDeviceAuthorizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDeviceAuthorizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssooidc.StartDeviceAuthorizationOutput)
	return ret0, ret1
}

// StartDeviceAuthorizationRequest indicates an expected call of StartDeviceAuthorizationRequest.
func (mr *MockSSOOIDCAPIMockRecorder) StartDeviceAuthorizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeviceAuthorizationRequest", reflect.TypeOf((*MockSSOOIDCAPI)(nil).StartDeviceAuthorizationRequest), arg0)
}

// StartDeviceAuthorizationWithContext mocks base method.
func (m *MockSSOOIDCAPI) StartDeviceAuthorizationWithContext(arg0 context.Context, arg1 *ssooidc.StartDeviceAuthorizationInput, arg2 ...request.Option) (*ssooidc.StartDeviceAuthorizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDeviceAuthorizationWithContext", varargs...)
	ret0, _ := ret[0].(*ssooidc.StartDeviceAuthorizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDeviceAuthorizationWithContext indicates an expected call of StartDeviceAuthorizationWithContext.
func (mr *MockSSOOIDCAPIMockRecorder) StartDeviceAuthorizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDeviceAuthorizationWithContext", reflect.TypeOf((*MockSSOOIDCAPI)(nil).StartDeviceAuthorizationWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/finspacedata/finspacedataiface (interfaces: FinSpaceDataAPI)

// Package finspacedatamock is a generated GoMock package.
package finspacedatamock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	finspacedata "github.com/aws/aws-sdk-go/service/finspacedata"
	gomock "github.com/golang/mock/gomock"
)

// MockFinSpaceDataAPI is a mock of FinSpaceDataAPI interface.
type MockFinSpaceDataAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFinSpaceDataAPIMockRecorder
}

// MockFinSpaceDataAPIMockRecorder is the mock recorder for MockFinSpaceDataAPI.
type MockFinSpaceDataAPIMockRecorder struct {
	mock *MockFinSpaceDataAPI
}

// NewMockFinSpaceDataAPI creates a new mock instance.
func NewMockFinSpaceDataAPI(ctrl *gomock.Controller) *MockFinSpaceDataAPI {
	mock := &MockFinSpaceDataAPI{ctrl: ctrl}
	mock.recorder = &MockFinSpaceDataAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinSpaceDataAPI) EXPECT() *MockFinSpaceDataAPIMockRecorder {
	return m.recorder
}

// CreateChangeset mocks base method.
func (m *MockFinSpaceDataAPI) CreateChangeset(arg0 *finspacedata.CreateChangesetInput) (*finspacedata.CreateChangesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChangeset", arg0)
	ret0, _ := ret[0].(*finspacedata.CreateChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChangeset indicates an expected call of CreateChangeset.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateChangeset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChangeset", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateChangeset), arg0)
}

// CreateChangesetRequest mocks base method.
func (m *MockFinSpaceDataAPI) CreateChangesetRequest(arg0 *finspacedata.CreateChangesetInput) (*request.Request, *finspacedata.CreateChangesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChangesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.CreateChangesetOutput)
	return ret0, ret1
}

// CreateChangesetRequest indicates an expected call of CreateChangesetRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateChangesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChangesetRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateChangesetRequest), arg0)
}

// CreateChangesetWithContext mocks base method.
func (m *MockFinSpaceDataAPI) CreateChangesetWithContext(arg0 context.Context, arg1 *finspacedata.CreateChangesetInput, arg2 ...request.Option) (*finspacedata.CreateChangesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChangesetWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.CreateChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChangesetWithContext indicates an expected call of CreateChangesetWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateChangesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChangesetWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateChangesetWithContext), varargs...)
}

// CreateDataView mocks base method.
func (m *MockFinSpaceDataAPI) CreateDataView(arg0 *finspacedata.CreateDataViewInput) (*finspacedata.CreateDataViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataView", arg0)
	ret0, _ := ret[0].(*finspacedata.CreateDataViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataView indicates an expected call of CreateDataView.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateDataView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataView", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateDataView), arg0)
}

// CreateDataViewRequest mocks base method.
func (m *MockFinSpaceDataAPI) CreateDataViewRequest(arg0 *finspacedata.CreateDataViewInput) (*request.Request, *finspacedata.CreateDataViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.CreateDataViewOutput)
	return ret0, ret1
}

// CreateDataViewRequest indicates an expected call of CreateDataViewRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateDataViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataViewRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateDataViewRequest), arg0)
}

// CreateDataViewWithContext mocks base method.
func (m *MockFinSpaceDataAPI) CreateDataViewWithContext(arg0 context.Context, arg1 *finspacedata.CreateDataViewInput, arg2 ...request.Option) (*finspacedata.CreateDataViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataViewWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.CreateDataViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataViewWithContext indicates an expected call of CreateDataViewWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateDataViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataViewWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateDataViewWithContext), varargs...)
}

// CreateDataset mocks base method.
func (m *MockFinSpaceDataAPI) CreateDataset(arg0 *finspacedata.CreateDatasetInput) (*finspacedata.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0)
	ret0, _ := ret[0].(*finspacedata.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateDataset), arg0)
}

// CreateDatasetRequest mocks base method.
func (m *MockFinSpaceDataAPI) CreateDatasetRequest(arg0 *finspacedata.CreateDatasetInput) (*request.Request, *finspacedata.CreateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.CreateDatasetOutput)
	return ret0, ret1
}

// CreateDatasetRequest indicates an expected call of CreateDatasetRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateDatasetRequest), arg0)
}

// CreateDatasetWithContext mocks base method.
func (m *MockFinSpaceDataAPI) CreateDatasetWithContext(arg0 context.Context, arg1 *finspacedata.CreateDatasetInput, arg2 ...request.Option) (*finspacedata.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetWithContext indicates an expected call of CreateDatasetWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateDatasetWithContext), varargs...)
}

// CreatePermissionGroup mocks base method.
func (m *MockFinSpaceDataAPI) CreatePermissionGroup(arg0 *finspacedata.CreatePermissionGroupInput) (*finspacedata.CreatePermissionGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionGroup", arg0)
	ret0, _ := ret[0].(*finspacedata.CreatePermissionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionGroup indicates an expected call of CreatePermissionGroup.
func (mr *MockFinSpaceDataAPIMockRecorder) CreatePermissionGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionGroup", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreatePermissionGroup), arg0)
}

// CreatePermissionGroupRequest mocks base method.
func (m *MockFinSpaceDataAPI) CreatePermissionGroupRequest(arg0 *finspacedata.CreatePermissionGroupInput) (*request.Request, *finspacedata.CreatePermissionGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.CreatePermissionGroupOutput)
	return ret0, ret1
}

// CreatePermissionGroupRequest indicates an expected call of CreatePermissionGroupRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) CreatePermissionGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionGroupRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreatePermissionGroupRequest), arg0)
}

// CreatePermissionGroupWithContext mocks base method.
func (m *MockFinSpaceDataAPI) CreatePermissionGroupWithContext(arg0 context.Context, arg1 *finspacedata.CreatePermissionGroupInput, arg2 ...request.Option) (*finspacedata.CreatePermissionGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePermissionGroupWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.CreatePermissionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionGroupWithContext indicates an expected call of CreatePermissionGroupWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) CreatePermissionGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionGroupWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreatePermissionGroupWithContext), varargs...)
}

// CreateUser mocks base method.
func (m *MockFinSpaceDataAPI) CreateUser(arg0 *finspacedata.CreateUserInput) (*finspacedata.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*finspacedata.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method.
func (m *MockFinSpaceDataAPI) CreateUserRequest(arg0 *finspacedata.CreateUserInput) (*request.Request, *finspacedata.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method.
func (m *MockFinSpaceDataAPI) CreateUserWithContext(arg0 context.Context, arg1 *finspacedata.CreateUserInput, arg2 ...request.Option) (*finspacedata.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).CreateUserWithContext), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockFinSpaceDataAPI) DeleteDataset(arg0 *finspacedata.DeleteDatasetInput) (*finspacedata.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0)
	ret0, _ := ret[0].(*finspacedata.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockFinSpaceDataAPIMockRecorder) DeleteDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DeleteDataset), arg0)
}

// DeleteDatasetRequest mocks base method.
func (m *MockFinSpaceDataAPI) DeleteDatasetRequest(arg0 *finspacedata.DeleteDatasetInput) (*request.Request, *finspacedata.DeleteDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.DeleteDatasetOutput)
	return ret0, ret1
}

// DeleteDatasetRequest indicates an expected call of DeleteDatasetRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) DeleteDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DeleteDatasetRequest), arg0)
}

// DeleteDatasetWithContext mocks base method.
func (m *MockFinSpaceDataAPI) DeleteDatasetWithContext(arg0 context.Context, arg1 *finspacedata.DeleteDatasetInput, arg2 ...request.Option) (*finspacedata.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetWithContext indicates an expected call of DeleteDatasetWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) DeleteDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DeleteDatasetWithContext), varargs...)
}

// DeletePermissionGroup mocks base method.
func (m *MockFinSpaceDataAPI) DeletePermissionGroup(arg0 *finspacedata.DeletePermissionGroupInput) (*finspacedata.DeletePermissionGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionGroup", arg0)
	ret0, _ := ret[0].(*finspacedata.DeletePermissionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionGroup indicates an expected call of DeletePermissionGroup.
func (mr *MockFinSpaceDataAPIMockRecorder) DeletePermissionGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionGroup", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DeletePermissionGroup), arg0)
}

// DeletePermissionGroupRequest mocks base method.
func (m *MockFinSpaceDataAPI) DeletePermissionGroupRequest(arg0 *finspacedata.DeletePermissionGroupInput) (*request.Request, *finspacedata.DeletePermissionGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.DeletePermissionGroupOutput)
	return ret0, ret1
}

// DeletePermissionGroupRequest indicates an expected call of DeletePermissionGroupRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) DeletePermissionGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionGroupRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DeletePermissionGroupRequest), arg0)
}

// DeletePermissionGroupWithContext mocks base method.
func (m *MockFinSpaceDataAPI) DeletePermissionGroupWithContext(arg0 context.Context, arg1 *finspacedata.DeletePermissionGroupInput, arg2 ...request.Option) (*finspacedata.DeletePermissionGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionGroupWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.DeletePermissionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionGroupWithContext indicates an expected call of DeletePermissionGroupWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) DeletePermissionGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionGroupWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DeletePermissionGroupWithContext), varargs...)
}

// DisableUser mocks base method.
func (m *MockFinSpaceDataAPI) DisableUser(arg0 *finspacedata.DisableUserInput) (*finspacedata.DisableUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUser", arg0)
	ret0, _ := ret[0].(*finspacedata.DisableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableUser indicates an expected call of DisableUser.
func (mr *MockFinSpaceDataAPIMockRecorder) DisableUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUser", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DisableUser), arg0)
}

// DisableUserRequest mocks base method.
func (m *MockFinSpaceDataAPI) DisableUserRequest(arg0 *finspacedata.DisableUserInput) (*request.Request, *finspacedata.DisableUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.DisableUserOutput)
	return ret0, ret1
}

// DisableUserRequest indicates an expected call of DisableUserRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) DisableUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DisableUserRequest), arg0)
}

// DisableUserWithContext mocks base method.
func (m *MockFinSpaceDataAPI) DisableUserWithContext(arg0 context.Context, arg1 *finspacedata.DisableUserInput, arg2 ...request.Option) (*finspacedata.DisableUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.DisableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableUserWithContext indicates an expected call of DisableUserWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) DisableUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).DisableUserWithContext), varargs...)
}

// EnableUser mocks base method.
func (m *MockFinSpaceDataAPI) EnableUser(arg0 *finspacedata.EnableUserInput) (*finspacedata.EnableUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUser", arg0)
	ret0, _ := ret[0].(*finspacedata.EnableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableUser indicates an expected call of EnableUser.
func (mr *MockFinSpaceDataAPIMockRecorder) EnableUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUser", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).EnableUser), arg0)
}

// EnableUserRequest mocks base method.
func (m *MockFinSpaceDataAPI) EnableUserRequest(arg0 *finspacedata.EnableUserInput) (*request.Request, *finspacedata.EnableUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.EnableUserOutput)
	return ret0, ret1
}

// EnableUserRequest indicates an expected call of EnableUserRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) EnableUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).EnableUserRequest), arg0)
}

// EnableUserWithContext mocks base method.
func (m *MockFinSpaceDataAPI) EnableUserWithContext(arg0 context.Context, arg1 *finspacedata.EnableUserInput, arg2 ...request.Option) (*finspacedata.EnableUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.EnableUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableUserWithContext indicates an expected call of EnableUserWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) EnableUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).EnableUserWithContext), varargs...)
}

// GetChangeset mocks base method.
func (m *MockFinSpaceDataAPI) GetChangeset(arg0 *finspacedata.GetChangesetInput) (*finspacedata.GetChangesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeset", arg0)
	ret0, _ := ret[0].(*finspacedata.GetChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeset indicates an expected call of GetChangeset.
func (mr *MockFinSpaceDataAPIMockRecorder) GetChangeset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeset", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetChangeset), arg0)
}

// GetChangesetRequest mocks base method.
func (m *MockFinSpaceDataAPI) GetChangesetRequest(arg0 *finspacedata.GetChangesetInput) (*request.Request, *finspacedata.GetChangesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.GetChangesetOutput)
	return ret0, ret1
}

// GetChangesetRequest indicates an expected call of GetChangesetRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) GetChangesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangesetRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetChangesetRequest), arg0)
}

// GetChangesetWithContext mocks base method.
func (m *MockFinSpaceDataAPI) GetChangesetWithContext(arg0 context.Context, arg1 *finspacedata.GetChangesetInput, arg2 ...request.Option) (*finspacedata.GetChangesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangesetWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.GetChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangesetWithContext indicates an expected call of GetChangesetWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) GetChangesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangesetWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetChangesetWithContext), varargs...)
}

// GetDataView mocks base method.
func (m *MockFinSpaceDataAPI) GetDataView(arg0 *finspacedata.GetDataViewInput) (*finspacedata.GetDataViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataView", arg0)
	ret0, _ := ret[0].(*finspacedata.GetDataViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataView indicates an expected call of GetDataView.
func (mr *MockFinSpaceDataAPIMockRecorder) GetDataView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataView", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetDataView), arg0)
}

// GetDataViewRequest mocks base method.
func (m *MockFinSpaceDataAPI) GetDataViewRequest(arg0 *finspacedata.GetDataViewInput) (*request.Request, *finspacedata.GetDataViewOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataViewRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.GetDataViewOutput)
	return ret0, ret1
}

// GetDataViewRequest indicates an expected call of GetDataViewRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) GetDataViewRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataViewRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetDataViewRequest), arg0)
}

// GetDataViewWithContext mocks base method.
func (m *MockFinSpaceDataAPI) GetDataViewWithContext(arg0 context.Context, arg1 *finspacedata.GetDataViewInput, arg2 ...request.Option) (*finspacedata.GetDataViewOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataViewWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.GetDataViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataViewWithContext indicates an expected call of GetDataViewWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) GetDataViewWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataViewWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetDataViewWithContext), varargs...)
}

// GetDataset mocks base method.
func (m *MockFinSpaceDataAPI) GetDataset(arg0 *finspacedata.GetDatasetInput) (*finspacedata.GetDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataset", arg0)
	ret0, _ := ret[0].(*finspacedata.GetDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockFinSpaceDataAPIMockRecorder) GetDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetDataset), arg0)
}

// GetDatasetRequest mocks base method.
func (m *MockFinSpaceDataAPI) GetDatasetRequest(arg0 *finspacedata.GetDatasetInput) (*request.Request, *finspacedata.GetDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.GetDatasetOutput)
	return ret0, ret1
}

// GetDatasetRequest indicates an expected call of GetDatasetRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) GetDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetDatasetRequest), arg0)
}

// GetDatasetWithContext mocks base method.
func (m *MockFinSpaceDataAPI) GetDatasetWithContext(arg0 context.Context, arg1 *finspacedata.GetDatasetInput, arg2 ...request.Option) (*finspacedata.GetDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.GetDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetWithContext indicates an expected call of GetDatasetWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) GetDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetDatasetWithContext), varargs...)
}

// GetProgrammaticAccessCredentials mocks base method.
func (m *MockFinSpaceDataAPI) GetProgrammaticAccessCredentials(arg0 *finspacedata.GetProgrammaticAccessCredentialsInput) (*finspacedata.GetProgrammaticAccessCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgrammaticAccessCredentials", arg0)
	ret0, _ := ret[0].(*finspacedata.GetProgrammaticAccessCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgrammaticAccessCredentials indicates an expected call of GetProgrammaticAccessCredentials.
func (mr *MockFinSpaceDataAPIMockRecorder) GetProgrammaticAccessCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgrammaticAccessCredentials", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetProgrammaticAccessCredentials), arg0)
}

// GetProgrammaticAccessCredentialsRequest mocks base method.
func (m *MockFinSpaceDataAPI) GetProgrammaticAccessCredentialsRequest(arg0 *finspacedata.GetProgrammaticAccessCredentialsInput) (*request.Request, *finspacedata.GetProgrammaticAccessCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgrammaticAccessCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.GetProgrammaticAccessCredentialsOutput)
	return ret0, ret1
}

// GetProgrammaticAccessCredentialsRequest indicates an expected call of GetProgrammaticAccessCredentialsRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) GetProgrammaticAccessCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgrammaticAccessCredentialsRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetProgrammaticAccessCredentialsRequest), arg0)
}

// GetProgrammaticAccessCredentialsWithContext mocks base method.
func (m *MockFinSpaceDataAPI) GetProgrammaticAccessCredentialsWithContext(arg0 context.Context, arg1 *finspacedata.GetProgrammaticAccessCredentialsInput, arg2 ...request.Option) (*finspacedata.GetProgrammaticAccessCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProgrammaticAccessCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.GetProgrammaticAccessCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgrammaticAccessCredentialsWithContext indicates an expected call of GetProgrammaticAccessCredentialsWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) GetProgrammaticAccessCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgrammaticAccessCredentialsWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetProgrammaticAccessCredentialsWithContext), varargs...)
}

// GetUser mocks base method.
func (m *MockFinSpaceDataAPI) GetUser(arg0 *finspacedata.GetUserInput) (*finspacedata.GetUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*finspacedata.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockFinSpaceDataAPIMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetUser), arg0)
}

// GetUserRequest mocks base method.
func (m *MockFinSpaceDataAPI) GetUserRequest(arg0 *finspacedata.GetUserInput) (*request.Request, *finspacedata.GetUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.GetUserOutput)
	return ret0, ret1
}

// GetUserRequest indicates an expected call of GetUserRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) GetUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetUserRequest), arg0)
}

// GetUserWithContext mocks base method.
func (m *MockFinSpaceDataAPI) GetUserWithContext(arg0 context.Context, arg1 *finspacedata.GetUserInput, arg2 ...request.Option) (*finspacedata.GetUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithContext indicates an expected call of GetUserWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) GetUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetUserWithContext), varargs...)
}

// GetWorkingLocation mocks base method.
func (m *MockFinSpaceDataAPI) GetWorkingLocation(arg0 *finspacedata.GetWorkingLocationInput) (*finspacedata.GetWorkingLocationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingLocation", arg0)
	ret0, _ := ret[0].(*finspacedata.GetWorkingLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkingLocation indicates an expected call of GetWorkingLocation.
func (mr *MockFinSpaceDataAPIMockRecorder) GetWorkingLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingLocation", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetWorkingLocation), arg0)
}

// GetWorkingLocationRequest mocks base method.
func (m *MockFinSpaceDataAPI) GetWorkingLocationRequest(arg0 *finspacedata.GetWorkingLocationInput) (*request.Request, *finspacedata.GetWorkingLocationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingLocationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.GetWorkingLocationOutput)
	return ret0, ret1
}

// GetWorkingLocationRequest indicates an expected call of GetWorkingLocationRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) GetWorkingLocationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingLocationRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetWorkingLocationRequest), arg0)
}

// GetWorkingLocationWithContext mocks base method.
func (m *MockFinSpaceDataAPI) GetWorkingLocationWithContext(arg0 context.Context, arg1 *finspacedata.GetWorkingLocationInput, arg2 ...request.Option) (*finspacedata.GetWorkingLocationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkingLocationWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.GetWorkingLocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkingLocationWithContext indicates an expected call of GetWorkingLocationWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) GetWorkingLocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingLocationWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).GetWorkingLocationWithContext), varargs...)
}

// ListChangesets mocks base method.
func (m *MockFinSpaceDataAPI) ListChangesets(arg0 *finspacedata.ListChangesetsInput) (*finspacedata.ListChangesetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChangesets", arg0)
	ret0, _ := ret[0].(*finspacedata.ListChangesetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChangesets indicates an expected call of ListChangesets.
func (mr *MockFinSpaceDataAPIMockRecorder) ListChangesets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangesets", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListChangesets), arg0)
}

// ListChangesetsPages mocks base method.
func (m *MockFinSpaceDataAPI) ListChangesetsPages(arg0 *finspacedata.ListChangesetsInput, arg1 func(*finspacedata.ListChangesetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChangesetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChangesetsPages indicates an expected call of ListChangesetsPages.
func (mr *MockFinSpaceDataAPIMockRecorder) ListChangesetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangesetsPages", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListChangesetsPages), arg0, arg1)
}

// ListChangesetsPagesWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListChangesetsPagesWithContext(arg0 context.Context, arg1 *finspacedata.ListChangesetsInput, arg2 func(*finspacedata.ListChangesetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChangesetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListChangesetsPagesWithContext indicates an expected call of ListChangesetsPagesWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListChangesetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangesetsPagesWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListChangesetsPagesWithContext), varargs...)
}

// ListChangesetsRequest mocks base method.
func (m *MockFinSpaceDataAPI) ListChangesetsRequest(arg0 *finspacedata.ListChangesetsInput) (*request.Request, *finspacedata.ListChangesetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChangesetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.ListChangesetsOutput)
	return ret0, ret1
}

// ListChangesetsRequest indicates an expected call of ListChangesetsRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) ListChangesetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangesetsRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListChangesetsRequest), arg0)
}

// ListChangesetsWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListChangesetsWithContext(arg0 context.Context, arg1 *finspacedata.ListChangesetsInput, arg2 ...request.Option) (*finspacedata.ListChangesetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChangesetsWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.ListChangesetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChangesetsWithContext indicates an expected call of ListChangesetsWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListChangesetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChangesetsWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListChangesetsWithContext), varargs...)
}

// ListDataViews mocks base method.
func (m *MockFinSpaceDataAPI) ListDataViews(arg0 *finspacedata.ListDataViewsInput) (*finspacedata.ListDataViewsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataViews", arg0)
	ret0, _ := ret[0].(*finspacedata.ListDataViewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataViews indicates an expected call of ListDataViews.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDataViews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataViews", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDataViews), arg0)
}

// ListDataViewsPages mocks base method.
func (m *MockFinSpaceDataAPI) ListDataViewsPages(arg0 *finspacedata.ListDataViewsInput, arg1 func(*finspacedata.ListDataViewsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataViewsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataViewsPages indicates an expected call of ListDataViewsPages.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDataViewsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataViewsPages", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDataViewsPages), arg0, arg1)
}

// ListDataViewsPagesWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListDataViewsPagesWithContext(arg0 context.Context, arg1 *finspacedata.ListDataViewsInput, arg2 func(*finspacedata.ListDataViewsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataViewsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataViewsPagesWithContext indicates an expected call of ListDataViewsPagesWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDataViewsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataViewsPagesWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDataViewsPagesWithContext), varargs...)
}

// ListDataViewsRequest mocks base method.
func (m *MockFinSpaceDataAPI) ListDataViewsRequest(arg0 *finspacedata.ListDataViewsInput) (*request.Request, *finspacedata.ListDataViewsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataViewsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.ListDataViewsOutput)
	return ret0, ret1
}

// ListDataViewsRequest indicates an expected call of ListDataViewsRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDataViewsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataViewsRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDataViewsRequest), arg0)
}

// ListDataViewsWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListDataViewsWithContext(arg0 context.Context, arg1 *finspacedata.ListDataViewsInput, arg2 ...request.Option) (*finspacedata.ListDataViewsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataViewsWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.ListDataViewsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataViewsWithContext indicates an expected call of ListDataViewsWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDataViewsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataViewsWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDataViewsWithContext), varargs...)
}

// ListDatasets mocks base method.
func (m *MockFinSpaceDataAPI) ListDatasets(arg0 *finspacedata.ListDatasetsInput) (*finspacedata.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", arg0)
	ret0, _ := ret[0].(*finspacedata.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDatasets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDatasets), arg0)
}

// ListDatasetsPages mocks base method.
func (m *MockFinSpaceDataAPI) ListDatasetsPages(arg0 *finspacedata.ListDatasetsInput, arg1 func(*finspacedata.ListDatasetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPages indicates an expected call of ListDatasetsPages.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDatasetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPages", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDatasetsPages), arg0, arg1)
}

// ListDatasetsPagesWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListDatasetsPagesWithContext(arg0 context.Context, arg1 *finspacedata.ListDatasetsInput, arg2 func(*finspacedata.ListDatasetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetsPagesWithContext indicates an expected call of ListDatasetsPagesWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDatasetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsPagesWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDatasetsPagesWithContext), varargs...)
}

// ListDatasetsRequest mocks base method.
func (m *MockFinSpaceDataAPI) ListDatasetsRequest(arg0 *finspacedata.ListDatasetsInput) (*request.Request, *finspacedata.ListDatasetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.ListDatasetsOutput)
	return ret0, ret1
}

// ListDatasetsRequest indicates an expected call of ListDatasetsRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDatasetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDatasetsRequest), arg0)
}

// ListDatasetsWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListDatasetsWithContext(arg0 context.Context, arg1 *finspacedata.ListDatasetsInput, arg2 ...request.Option) (*finspacedata.ListDatasetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetsWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.ListDatasetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetsWithContext indicates an expected call of ListDatasetsWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListDatasetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetsWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListDatasetsWithContext), varargs...)
}

// ListPermissionGroups mocks base method.
func (m *MockFinSpaceDataAPI) ListPermissionGroups(arg0 *finspacedata.ListPermissionGroupsInput) (*finspacedata.ListPermissionGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionGroups", arg0)
	ret0, _ := ret[0].(*finspacedata.ListPermissionGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionGroups indicates an expected call of ListPermissionGroups.
func (mr *MockFinSpaceDataAPIMockRecorder) ListPermissionGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionGroups", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListPermissionGroups), arg0)
}

// ListPermissionGroupsPages mocks base method.
func (m *MockFinSpaceDataAPI) ListPermissionGroupsPages(arg0 *finspacedata.ListPermissionGroupsInput, arg1 func(*finspacedata.ListPermissionGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionGroupsPages indicates an expected call of ListPermissionGroupsPages.
func (mr *MockFinSpaceDataAPIMockRecorder) ListPermissionGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionGroupsPages", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListPermissionGroupsPages), arg0, arg1)
}

// ListPermissionGroupsPagesWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListPermissionGroupsPagesWithContext(arg0 context.Context, arg1 *finspacedata.ListPermissionGroupsInput, arg2 func(*finspacedata.ListPermissionGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionGroupsPagesWithContext indicates an expected call of ListPermissionGroupsPagesWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListPermissionGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionGroupsPagesWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListPermissionGroupsPagesWithContext), varargs...)
}

// ListPermissionGroupsRequest mocks base method.
func (m *MockFinSpaceDataAPI) ListPermissionGroupsRequest(arg0 *finspacedata.ListPermissionGroupsInput) (*request.Request, *finspacedata.ListPermissionGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.ListPermissionGroupsOutput)
	return ret0, ret1
}

// ListPermissionGroupsRequest indicates an expected call of ListPermissionGroupsRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) ListPermissionGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionGroupsRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListPermissionGroupsRequest), arg0)
}

// ListPermissionGroupsWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListPermissionGroupsWithContext(arg0 context.Context, arg1 *finspacedata.ListPermissionGroupsInput, arg2 ...request.Option) (*finspacedata.ListPermissionGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.ListPermissionGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionGroupsWithContext indicates an expected call of ListPermissionGroupsWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListPermissionGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionGroupsWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListPermissionGroupsWithContext), varargs...)
}

// ListUsers mocks base method.
func (m *MockFinSpaceDataAPI) ListUsers(arg0 *finspacedata.ListUsersInput) (*finspacedata.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(*finspacedata.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockFinSpaceDataAPIMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListUsers), arg0)
}

// ListUsersPages mocks base method.
func (m *MockFinSpaceDataAPI) ListUsersPages(arg0 *finspacedata.ListUsersInput, arg1 func(*finspacedata.ListUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPages indicates an expected call of ListUsersPages.
func (mr *MockFinSpaceDataAPIMockRecorder) ListUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPages", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListUsersPages), arg0, arg1)
}

// ListUsersPagesWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListUsersPagesWithContext(arg0 context.Context, arg1 *finspacedata.ListUsersInput, arg2 func(*finspacedata.ListUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsersPagesWithContext indicates an expected call of ListUsersPagesWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersPagesWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListUsersPagesWithContext), varargs...)
}

// ListUsersRequest mocks base method.
func (m *MockFinSpaceDataAPI) ListUsersRequest(arg0 *finspacedata.ListUsersInput) (*request.Request, *finspacedata.ListUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.ListUsersOutput)
	return ret0, ret1
}

// ListUsersRequest indicates an expected call of ListUsersRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) ListUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListUsersRequest), arg0)
}

// ListUsersWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ListUsersWithContext(arg0 context.Context, arg1 *finspacedata.ListUsersInput, arg2 ...request.Option) (*finspacedata.ListUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.ListUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersWithContext indicates an expected call of ListUsersWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ListUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ListUsersWithContext), varargs...)
}

// ResetUserPassword mocks base method.
func (m *MockFinSpaceDataAPI) ResetUserPassword(arg0 *finspacedata.ResetUserPasswordInput) (*finspacedata.ResetUserPasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUserPassword", arg0)
	ret0, _ := ret[0].(*finspacedata.ResetUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetUserPassword indicates an expected call of ResetUserPassword.
func (mr *MockFinSpaceDataAPIMockRecorder) ResetUserPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPassword", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ResetUserPassword), arg0)
}

// ResetUserPasswordRequest mocks base method.
func (m *MockFinSpaceDataAPI) ResetUserPasswordRequest(arg0 *finspacedata.ResetUserPasswordInput) (*request.Request, *finspacedata.ResetUserPasswordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUserPasswordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.ResetUserPasswordOutput)
	return ret0, ret1
}

// ResetUserPasswordRequest indicates an expected call of ResetUserPasswordRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) ResetUserPasswordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPasswordRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ResetUserPasswordRequest), arg0)
}

// ResetUserPasswordWithContext mocks base method.
func (m *MockFinSpaceDataAPI) ResetUserPasswordWithContext(arg0 context.Context, arg1 *finspacedata.ResetUserPasswordInput, arg2 ...request.Option) (*finspacedata.ResetUserPasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetUserPasswordWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.ResetUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetUserPasswordWithContext indicates an expected call of ResetUserPasswordWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) ResetUserPasswordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPasswordWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).ResetUserPasswordWithContext), varargs...)
}

// UpdateChangeset mocks base method.
func (m *MockFinSpaceDataAPI) UpdateChangeset(arg0 *finspacedata.UpdateChangesetInput) (*finspacedata.UpdateChangesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChangeset", arg0)
	ret0, _ := ret[0].(*finspacedata.UpdateChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChangeset indicates an expected call of UpdateChangeset.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateChangeset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChangeset", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateChangeset), arg0)
}

// UpdateChangesetRequest mocks base method.
func (m *MockFinSpaceDataAPI) UpdateChangesetRequest(arg0 *finspacedata.UpdateChangesetInput) (*request.Request, *finspacedata.UpdateChangesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChangesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.UpdateChangesetOutput)
	return ret0, ret1
}

// UpdateChangesetRequest indicates an expected call of UpdateChangesetRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateChangesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChangesetRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateChangesetRequest), arg0)
}

// UpdateChangesetWithContext mocks base method.
func (m *MockFinSpaceDataAPI) UpdateChangesetWithContext(arg0 context.Context, arg1 *finspacedata.UpdateChangesetInput, arg2 ...request.Option) (*finspacedata.UpdateChangesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChangesetWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.UpdateChangesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChangesetWithContext indicates an expected call of UpdateChangesetWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateChangesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChangesetWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateChangesetWithContext), varargs...)
}

// UpdateDataset mocks base method.
func (m *MockFinSpaceDataAPI) UpdateDataset(arg0 *finspacedata.UpdateDatasetInput) (*finspacedata.UpdateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataset", arg0)
	ret0, _ := ret[0].(*finspacedata.UpdateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateDataset), arg0)
}

// UpdateDatasetRequest mocks base method.
func (m *MockFinSpaceDataAPI) UpdateDatasetRequest(arg0 *finspacedata.UpdateDatasetInput) (*request.Request, *finspacedata.UpdateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.UpdateDatasetOutput)
	return ret0, ret1
}

// UpdateDatasetRequest indicates an expected call of UpdateDatasetRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateDatasetRequest), arg0)
}

// UpdateDatasetWithContext mocks base method.
func (m *MockFinSpaceDataAPI) UpdateDatasetWithContext(arg0 context.Context, arg1 *finspacedata.UpdateDatasetInput, arg2 ...request.Option) (*finspacedata.UpdateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.UpdateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetWithContext indicates an expected call of UpdateDatasetWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateDatasetWithContext), varargs...)
}

// UpdatePermissionGroup mocks base method.
func (m *MockFinSpaceDataAPI) UpdatePermissionGroup(arg0 *finspacedata.UpdatePermissionGroupInput) (*finspacedata.UpdatePermissionGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionGroup", arg0)
	ret0, _ := ret[0].(*finspacedata.UpdatePermissionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionGroup indicates an expected call of UpdatePermissionGroup.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdatePermissionGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionGroup", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdatePermissionGroup), arg0)
}

// UpdatePermissionGroupRequest mocks base method.
func (m *MockFinSpaceDataAPI) UpdatePermissionGroupRequest(arg0 *finspacedata.UpdatePermissionGroupInput) (*request.Request, *finspacedata.UpdatePermissionGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.UpdatePermissionGroupOutput)
	return ret0, ret1
}

// UpdatePermissionGroupRequest indicates an expected call of UpdatePermissionGroupRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdatePermissionGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionGroupRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdatePermissionGroupRequest), arg0)
}

// UpdatePermissionGroupWithContext mocks base method.
func (m *MockFinSpaceDataAPI) UpdatePermissionGroupWithContext(arg0 context.Context, arg1 *finspacedata.UpdatePermissionGroupInput, arg2 ...request.Option) (*finspacedata.UpdatePermissionGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermissionGroupWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.UpdatePermissionGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionGroupWithContext indicates an expected call of UpdatePermissionGroupWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdatePermissionGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionGroupWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdatePermissionGroupWithContext), varargs...)
}

// UpdateUser mocks base method.
func (m *MockFinSpaceDataAPI) UpdateUser(arg0 *finspacedata.UpdateUserInput) (*finspacedata.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*finspacedata.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateUser), arg0)
}

// UpdateUserRequest mocks base method.
func (m *MockFinSpaceDataAPI) UpdateUserRequest(arg0 *finspacedata.UpdateUserInput) (*request.Request, *finspacedata.UpdateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*finspacedata.UpdateUserOutput)
	return ret0, ret1
}

// UpdateUserRequest indicates an expected call of UpdateUserRequest.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRequest", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateUserRequest), arg0)
}

// UpdateUserWithContext mocks base method.
func (m *MockFinSpaceDataAPI) UpdateUserWithContext(arg0 context.Context, arg1 *finspacedata.UpdateUserInput, arg2 ...request.Option) (*finspacedata.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserWithContext", varargs...)
	ret0, _ := ret[0].(*finspacedata.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWithContext indicates an expected call of UpdateUserWithContext.
func (mr *MockFinSpaceDataAPIMockRecorder) UpdateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWithContext", reflect.TypeOf((*MockFinSpaceDataAPI)(nil).UpdateUserWithContext), varargs...)
}

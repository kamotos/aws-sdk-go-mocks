// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/acmpca/acmpcaiface (interfaces: ACMPCAAPI)

// Package acmpcamock is a generated GoMock package.
package acmpcamock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	acmpca "github.com/aws/aws-sdk-go/service/acmpca"
	gomock "github.com/golang/mock/gomock"
)

// MockACMPCAAPI is a mock of ACMPCAAPI interface.
type MockACMPCAAPI struct {
	ctrl     *gomock.Controller
	recorder *MockACMPCAAPIMockRecorder
}

// MockACMPCAAPIMockRecorder is the mock recorder for MockACMPCAAPI.
type MockACMPCAAPIMockRecorder struct {
	mock *MockACMPCAAPI
}

// NewMockACMPCAAPI creates a new mock instance.
func NewMockACMPCAAPI(ctrl *gomock.Controller) *MockACMPCAAPI {
	mock := &MockACMPCAAPI{ctrl: ctrl}
	mock.recorder = &MockACMPCAAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockACMPCAAPI) EXPECT() *MockACMPCAAPIMockRecorder {
	return m.recorder
}

// CreateCertificateAuthority mocks base method.
func (m *MockACMPCAAPI) CreateCertificateAuthority(arg0 *acmpca.CreateCertificateAuthorityInput) (*acmpca.CreateCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateAuthority", arg0)
	ret0, _ := ret[0].(*acmpca.CreateCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateAuthority indicates an expected call of CreateCertificateAuthority.
func (mr *MockACMPCAAPIMockRecorder) CreateCertificateAuthority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateAuthority", reflect.TypeOf((*MockACMPCAAPI)(nil).CreateCertificateAuthority), arg0)
}

// CreateCertificateAuthorityAuditReport mocks base method.
func (m *MockACMPCAAPI) CreateCertificateAuthorityAuditReport(arg0 *acmpca.CreateCertificateAuthorityAuditReportInput) (*acmpca.CreateCertificateAuthorityAuditReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateAuthorityAuditReport", arg0)
	ret0, _ := ret[0].(*acmpca.CreateCertificateAuthorityAuditReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateAuthorityAuditReport indicates an expected call of CreateCertificateAuthorityAuditReport.
func (mr *MockACMPCAAPIMockRecorder) CreateCertificateAuthorityAuditReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateAuthorityAuditReport", reflect.TypeOf((*MockACMPCAAPI)(nil).CreateCertificateAuthorityAuditReport), arg0)
}

// CreateCertificateAuthorityAuditReportRequest mocks base method.
func (m *MockACMPCAAPI) CreateCertificateAuthorityAuditReportRequest(arg0 *acmpca.CreateCertificateAuthorityAuditReportInput) (*request.Request, *acmpca.CreateCertificateAuthorityAuditReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateAuthorityAuditReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.CreateCertificateAuthorityAuditReportOutput)
	return ret0, ret1
}

// CreateCertificateAuthorityAuditReportRequest indicates an expected call of CreateCertificateAuthorityAuditReportRequest.
func (mr *MockACMPCAAPIMockRecorder) CreateCertificateAuthorityAuditReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateAuthorityAuditReportRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).CreateCertificateAuthorityAuditReportRequest), arg0)
}

// CreateCertificateAuthorityAuditReportWithContext mocks base method.
func (m *MockACMPCAAPI) CreateCertificateAuthorityAuditReportWithContext(arg0 context.Context, arg1 *acmpca.CreateCertificateAuthorityAuditReportInput, arg2 ...request.Option) (*acmpca.CreateCertificateAuthorityAuditReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateAuthorityAuditReportWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.CreateCertificateAuthorityAuditReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateAuthorityAuditReportWithContext indicates an expected call of CreateCertificateAuthorityAuditReportWithContext.
func (mr *MockACMPCAAPIMockRecorder) CreateCertificateAuthorityAuditReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateAuthorityAuditReportWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).CreateCertificateAuthorityAuditReportWithContext), varargs...)
}

// CreateCertificateAuthorityRequest mocks base method.
func (m *MockACMPCAAPI) CreateCertificateAuthorityRequest(arg0 *acmpca.CreateCertificateAuthorityInput) (*request.Request, *acmpca.CreateCertificateAuthorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateAuthorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.CreateCertificateAuthorityOutput)
	return ret0, ret1
}

// CreateCertificateAuthorityRequest indicates an expected call of CreateCertificateAuthorityRequest.
func (mr *MockACMPCAAPIMockRecorder) CreateCertificateAuthorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateAuthorityRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).CreateCertificateAuthorityRequest), arg0)
}

// CreateCertificateAuthorityWithContext mocks base method.
func (m *MockACMPCAAPI) CreateCertificateAuthorityWithContext(arg0 context.Context, arg1 *acmpca.CreateCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.CreateCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.CreateCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateAuthorityWithContext indicates an expected call of CreateCertificateAuthorityWithContext.
func (mr *MockACMPCAAPIMockRecorder) CreateCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateAuthorityWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).CreateCertificateAuthorityWithContext), varargs...)
}

// CreatePermission mocks base method.
func (m *MockACMPCAAPI) CreatePermission(arg0 *acmpca.CreatePermissionInput) (*acmpca.CreatePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0)
	ret0, _ := ret[0].(*acmpca.CreatePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockACMPCAAPIMockRecorder) CreatePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockACMPCAAPI)(nil).CreatePermission), arg0)
}

// CreatePermissionRequest mocks base method.
func (m *MockACMPCAAPI) CreatePermissionRequest(arg0 *acmpca.CreatePermissionInput) (*request.Request, *acmpca.CreatePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.CreatePermissionOutput)
	return ret0, ret1
}

// CreatePermissionRequest indicates an expected call of CreatePermissionRequest.
func (mr *MockACMPCAAPIMockRecorder) CreatePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).CreatePermissionRequest), arg0)
}

// CreatePermissionWithContext mocks base method.
func (m *MockACMPCAAPI) CreatePermissionWithContext(arg0 context.Context, arg1 *acmpca.CreatePermissionInput, arg2 ...request.Option) (*acmpca.CreatePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.CreatePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionWithContext indicates an expected call of CreatePermissionWithContext.
func (mr *MockACMPCAAPIMockRecorder) CreatePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).CreatePermissionWithContext), varargs...)
}

// DeleteCertificateAuthority mocks base method.
func (m *MockACMPCAAPI) DeleteCertificateAuthority(arg0 *acmpca.DeleteCertificateAuthorityInput) (*acmpca.DeleteCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateAuthority", arg0)
	ret0, _ := ret[0].(*acmpca.DeleteCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificateAuthority indicates an expected call of DeleteCertificateAuthority.
func (mr *MockACMPCAAPIMockRecorder) DeleteCertificateAuthority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateAuthority", reflect.TypeOf((*MockACMPCAAPI)(nil).DeleteCertificateAuthority), arg0)
}

// DeleteCertificateAuthorityRequest mocks base method.
func (m *MockACMPCAAPI) DeleteCertificateAuthorityRequest(arg0 *acmpca.DeleteCertificateAuthorityInput) (*request.Request, *acmpca.DeleteCertificateAuthorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateAuthorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.DeleteCertificateAuthorityOutput)
	return ret0, ret1
}

// DeleteCertificateAuthorityRequest indicates an expected call of DeleteCertificateAuthorityRequest.
func (mr *MockACMPCAAPIMockRecorder) DeleteCertificateAuthorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateAuthorityRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).DeleteCertificateAuthorityRequest), arg0)
}

// DeleteCertificateAuthorityWithContext mocks base method.
func (m *MockACMPCAAPI) DeleteCertificateAuthorityWithContext(arg0 context.Context, arg1 *acmpca.DeleteCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.DeleteCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.DeleteCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificateAuthorityWithContext indicates an expected call of DeleteCertificateAuthorityWithContext.
func (mr *MockACMPCAAPIMockRecorder) DeleteCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateAuthorityWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).DeleteCertificateAuthorityWithContext), varargs...)
}

// DeletePermission mocks base method.
func (m *MockACMPCAAPI) DeletePermission(arg0 *acmpca.DeletePermissionInput) (*acmpca.DeletePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0)
	ret0, _ := ret[0].(*acmpca.DeletePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockACMPCAAPIMockRecorder) DeletePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockACMPCAAPI)(nil).DeletePermission), arg0)
}

// DeletePermissionRequest mocks base method.
func (m *MockACMPCAAPI) DeletePermissionRequest(arg0 *acmpca.DeletePermissionInput) (*request.Request, *acmpca.DeletePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.DeletePermissionOutput)
	return ret0, ret1
}

// DeletePermissionRequest indicates an expected call of DeletePermissionRequest.
func (mr *MockACMPCAAPIMockRecorder) DeletePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).DeletePermissionRequest), arg0)
}

// DeletePermissionWithContext mocks base method.
func (m *MockACMPCAAPI) DeletePermissionWithContext(arg0 context.Context, arg1 *acmpca.DeletePermissionInput, arg2 ...request.Option) (*acmpca.DeletePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.DeletePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionWithContext indicates an expected call of DeletePermissionWithContext.
func (mr *MockACMPCAAPIMockRecorder) DeletePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).DeletePermissionWithContext), varargs...)
}

// DeletePolicy mocks base method.
func (m *MockACMPCAAPI) DeletePolicy(arg0 *acmpca.DeletePolicyInput) (*acmpca.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0)
	ret0, _ := ret[0].(*acmpca.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockACMPCAAPIMockRecorder) DeletePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockACMPCAAPI)(nil).DeletePolicy), arg0)
}

// DeletePolicyRequest mocks base method.
func (m *MockACMPCAAPI) DeletePolicyRequest(arg0 *acmpca.DeletePolicyInput) (*request.Request, *acmpca.DeletePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.DeletePolicyOutput)
	return ret0, ret1
}

// DeletePolicyRequest indicates an expected call of DeletePolicyRequest.
func (mr *MockACMPCAAPIMockRecorder) DeletePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).DeletePolicyRequest), arg0)
}

// DeletePolicyWithContext mocks base method.
func (m *MockACMPCAAPI) DeletePolicyWithContext(arg0 context.Context, arg1 *acmpca.DeletePolicyInput, arg2 ...request.Option) (*acmpca.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyWithContext indicates an expected call of DeletePolicyWithContext.
func (mr *MockACMPCAAPIMockRecorder) DeletePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).DeletePolicyWithContext), varargs...)
}

// DescribeCertificateAuthority mocks base method.
func (m *MockACMPCAAPI) DescribeCertificateAuthority(arg0 *acmpca.DescribeCertificateAuthorityInput) (*acmpca.DescribeCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificateAuthority", arg0)
	ret0, _ := ret[0].(*acmpca.DescribeCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateAuthority indicates an expected call of DescribeCertificateAuthority.
func (mr *MockACMPCAAPIMockRecorder) DescribeCertificateAuthority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthority", reflect.TypeOf((*MockACMPCAAPI)(nil).DescribeCertificateAuthority), arg0)
}

// DescribeCertificateAuthorityAuditReport mocks base method.
func (m *MockACMPCAAPI) DescribeCertificateAuthorityAuditReport(arg0 *acmpca.DescribeCertificateAuthorityAuditReportInput) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificateAuthorityAuditReport", arg0)
	ret0, _ := ret[0].(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateAuthorityAuditReport indicates an expected call of DescribeCertificateAuthorityAuditReport.
func (mr *MockACMPCAAPIMockRecorder) DescribeCertificateAuthorityAuditReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthorityAuditReport", reflect.TypeOf((*MockACMPCAAPI)(nil).DescribeCertificateAuthorityAuditReport), arg0)
}

// DescribeCertificateAuthorityAuditReportRequest mocks base method.
func (m *MockACMPCAAPI) DescribeCertificateAuthorityAuditReportRequest(arg0 *acmpca.DescribeCertificateAuthorityAuditReportInput) (*request.Request, *acmpca.DescribeCertificateAuthorityAuditReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificateAuthorityAuditReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
	return ret0, ret1
}

// DescribeCertificateAuthorityAuditReportRequest indicates an expected call of DescribeCertificateAuthorityAuditReportRequest.
func (mr *MockACMPCAAPIMockRecorder) DescribeCertificateAuthorityAuditReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthorityAuditReportRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).DescribeCertificateAuthorityAuditReportRequest), arg0)
}

// DescribeCertificateAuthorityAuditReportWithContext mocks base method.
func (m *MockACMPCAAPI) DescribeCertificateAuthorityAuditReportWithContext(arg0 context.Context, arg1 *acmpca.DescribeCertificateAuthorityAuditReportInput, arg2 ...request.Option) (*acmpca.DescribeCertificateAuthorityAuditReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificateAuthorityAuditReportWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.DescribeCertificateAuthorityAuditReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateAuthorityAuditReportWithContext indicates an expected call of DescribeCertificateAuthorityAuditReportWithContext.
func (mr *MockACMPCAAPIMockRecorder) DescribeCertificateAuthorityAuditReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthorityAuditReportWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).DescribeCertificateAuthorityAuditReportWithContext), varargs...)
}

// DescribeCertificateAuthorityRequest mocks base method.
func (m *MockACMPCAAPI) DescribeCertificateAuthorityRequest(arg0 *acmpca.DescribeCertificateAuthorityInput) (*request.Request, *acmpca.DescribeCertificateAuthorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificateAuthorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.DescribeCertificateAuthorityOutput)
	return ret0, ret1
}

// DescribeCertificateAuthorityRequest indicates an expected call of DescribeCertificateAuthorityRequest.
func (mr *MockACMPCAAPIMockRecorder) DescribeCertificateAuthorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthorityRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).DescribeCertificateAuthorityRequest), arg0)
}

// DescribeCertificateAuthorityWithContext mocks base method.
func (m *MockACMPCAAPI) DescribeCertificateAuthorityWithContext(arg0 context.Context, arg1 *acmpca.DescribeCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.DescribeCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.DescribeCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateAuthorityWithContext indicates an expected call of DescribeCertificateAuthorityWithContext.
func (mr *MockACMPCAAPIMockRecorder) DescribeCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthorityWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).DescribeCertificateAuthorityWithContext), varargs...)
}

// GetCertificate mocks base method.
func (m *MockACMPCAAPI) GetCertificate(arg0 *acmpca.GetCertificateInput) (*acmpca.GetCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", arg0)
	ret0, _ := ret[0].(*acmpca.GetCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockACMPCAAPIMockRecorder) GetCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificate), arg0)
}

// GetCertificateAuthorityCertificate mocks base method.
func (m *MockACMPCAAPI) GetCertificateAuthorityCertificate(arg0 *acmpca.GetCertificateAuthorityCertificateInput) (*acmpca.GetCertificateAuthorityCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCertificate", arg0)
	ret0, _ := ret[0].(*acmpca.GetCertificateAuthorityCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateAuthorityCertificate indicates an expected call of GetCertificateAuthorityCertificate.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateAuthorityCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCertificate", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateAuthorityCertificate), arg0)
}

// GetCertificateAuthorityCertificateRequest mocks base method.
func (m *MockACMPCAAPI) GetCertificateAuthorityCertificateRequest(arg0 *acmpca.GetCertificateAuthorityCertificateInput) (*request.Request, *acmpca.GetCertificateAuthorityCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.GetCertificateAuthorityCertificateOutput)
	return ret0, ret1
}

// GetCertificateAuthorityCertificateRequest indicates an expected call of GetCertificateAuthorityCertificateRequest.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateAuthorityCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCertificateRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateAuthorityCertificateRequest), arg0)
}

// GetCertificateAuthorityCertificateWithContext mocks base method.
func (m *MockACMPCAAPI) GetCertificateAuthorityCertificateWithContext(arg0 context.Context, arg1 *acmpca.GetCertificateAuthorityCertificateInput, arg2 ...request.Option) (*acmpca.GetCertificateAuthorityCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.GetCertificateAuthorityCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateAuthorityCertificateWithContext indicates an expected call of GetCertificateAuthorityCertificateWithContext.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateAuthorityCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCertificateWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateAuthorityCertificateWithContext), varargs...)
}

// GetCertificateAuthorityCsr mocks base method.
func (m *MockACMPCAAPI) GetCertificateAuthorityCsr(arg0 *acmpca.GetCertificateAuthorityCsrInput) (*acmpca.GetCertificateAuthorityCsrOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCsr", arg0)
	ret0, _ := ret[0].(*acmpca.GetCertificateAuthorityCsrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateAuthorityCsr indicates an expected call of GetCertificateAuthorityCsr.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateAuthorityCsr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCsr", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateAuthorityCsr), arg0)
}

// GetCertificateAuthorityCsrRequest mocks base method.
func (m *MockACMPCAAPI) GetCertificateAuthorityCsrRequest(arg0 *acmpca.GetCertificateAuthorityCsrInput) (*request.Request, *acmpca.GetCertificateAuthorityCsrOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCsrRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.GetCertificateAuthorityCsrOutput)
	return ret0, ret1
}

// GetCertificateAuthorityCsrRequest indicates an expected call of GetCertificateAuthorityCsrRequest.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateAuthorityCsrRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCsrRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateAuthorityCsrRequest), arg0)
}

// GetCertificateAuthorityCsrWithContext mocks base method.
func (m *MockACMPCAAPI) GetCertificateAuthorityCsrWithContext(arg0 context.Context, arg1 *acmpca.GetCertificateAuthorityCsrInput, arg2 ...request.Option) (*acmpca.GetCertificateAuthorityCsrOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificateAuthorityCsrWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.GetCertificateAuthorityCsrOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateAuthorityCsrWithContext indicates an expected call of GetCertificateAuthorityCsrWithContext.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateAuthorityCsrWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateAuthorityCsrWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateAuthorityCsrWithContext), varargs...)
}

// GetCertificateRequest mocks base method.
func (m *MockACMPCAAPI) GetCertificateRequest(arg0 *acmpca.GetCertificateInput) (*request.Request, *acmpca.GetCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.GetCertificateOutput)
	return ret0, ret1
}

// GetCertificateRequest indicates an expected call of GetCertificateRequest.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateRequest), arg0)
}

// GetCertificateWithContext mocks base method.
func (m *MockACMPCAAPI) GetCertificateWithContext(arg0 context.Context, arg1 *acmpca.GetCertificateInput, arg2 ...request.Option) (*acmpca.GetCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.GetCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateWithContext indicates an expected call of GetCertificateWithContext.
func (mr *MockACMPCAAPIMockRecorder) GetCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).GetCertificateWithContext), varargs...)
}

// GetPolicy mocks base method.
func (m *MockACMPCAAPI) GetPolicy(arg0 *acmpca.GetPolicyInput) (*acmpca.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*acmpca.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockACMPCAAPIMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockACMPCAAPI)(nil).GetPolicy), arg0)
}

// GetPolicyRequest mocks base method.
func (m *MockACMPCAAPI) GetPolicyRequest(arg0 *acmpca.GetPolicyInput) (*request.Request, *acmpca.GetPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.GetPolicyOutput)
	return ret0, ret1
}

// GetPolicyRequest indicates an expected call of GetPolicyRequest.
func (mr *MockACMPCAAPIMockRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).GetPolicyRequest), arg0)
}

// GetPolicyWithContext mocks base method.
func (m *MockACMPCAAPI) GetPolicyWithContext(arg0 context.Context, arg1 *acmpca.GetPolicyInput, arg2 ...request.Option) (*acmpca.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyWithContext indicates an expected call of GetPolicyWithContext.
func (mr *MockACMPCAAPIMockRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).GetPolicyWithContext), varargs...)
}

// ImportCertificateAuthorityCertificate mocks base method.
func (m *MockACMPCAAPI) ImportCertificateAuthorityCertificate(arg0 *acmpca.ImportCertificateAuthorityCertificateInput) (*acmpca.ImportCertificateAuthorityCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCertificateAuthorityCertificate", arg0)
	ret0, _ := ret[0].(*acmpca.ImportCertificateAuthorityCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCertificateAuthorityCertificate indicates an expected call of ImportCertificateAuthorityCertificate.
func (mr *MockACMPCAAPIMockRecorder) ImportCertificateAuthorityCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificateAuthorityCertificate", reflect.TypeOf((*MockACMPCAAPI)(nil).ImportCertificateAuthorityCertificate), arg0)
}

// ImportCertificateAuthorityCertificateRequest mocks base method.
func (m *MockACMPCAAPI) ImportCertificateAuthorityCertificateRequest(arg0 *acmpca.ImportCertificateAuthorityCertificateInput) (*request.Request, *acmpca.ImportCertificateAuthorityCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCertificateAuthorityCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.ImportCertificateAuthorityCertificateOutput)
	return ret0, ret1
}

// ImportCertificateAuthorityCertificateRequest indicates an expected call of ImportCertificateAuthorityCertificateRequest.
func (mr *MockACMPCAAPIMockRecorder) ImportCertificateAuthorityCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificateAuthorityCertificateRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).ImportCertificateAuthorityCertificateRequest), arg0)
}

// ImportCertificateAuthorityCertificateWithContext mocks base method.
func (m *MockACMPCAAPI) ImportCertificateAuthorityCertificateWithContext(arg0 context.Context, arg1 *acmpca.ImportCertificateAuthorityCertificateInput, arg2 ...request.Option) (*acmpca.ImportCertificateAuthorityCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportCertificateAuthorityCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.ImportCertificateAuthorityCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCertificateAuthorityCertificateWithContext indicates an expected call of ImportCertificateAuthorityCertificateWithContext.
func (mr *MockACMPCAAPIMockRecorder) ImportCertificateAuthorityCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificateAuthorityCertificateWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).ImportCertificateAuthorityCertificateWithContext), varargs...)
}

// IssueCertificate mocks base method.
func (m *MockACMPCAAPI) IssueCertificate(arg0 *acmpca.IssueCertificateInput) (*acmpca.IssueCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificate", arg0)
	ret0, _ := ret[0].(*acmpca.IssueCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockACMPCAAPIMockRecorder) IssueCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockACMPCAAPI)(nil).IssueCertificate), arg0)
}

// IssueCertificateRequest mocks base method.
func (m *MockACMPCAAPI) IssueCertificateRequest(arg0 *acmpca.IssueCertificateInput) (*request.Request, *acmpca.IssueCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.IssueCertificateOutput)
	return ret0, ret1
}

// IssueCertificateRequest indicates an expected call of IssueCertificateRequest.
func (mr *MockACMPCAAPIMockRecorder) IssueCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificateRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).IssueCertificateRequest), arg0)
}

// IssueCertificateWithContext mocks base method.
func (m *MockACMPCAAPI) IssueCertificateWithContext(arg0 context.Context, arg1 *acmpca.IssueCertificateInput, arg2 ...request.Option) (*acmpca.IssueCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.IssueCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificateWithContext indicates an expected call of IssueCertificateWithContext.
func (mr *MockACMPCAAPIMockRecorder) IssueCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificateWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).IssueCertificateWithContext), varargs...)
}

// ListCertificateAuthorities mocks base method.
func (m *MockACMPCAAPI) ListCertificateAuthorities(arg0 *acmpca.ListCertificateAuthoritiesInput) (*acmpca.ListCertificateAuthoritiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificateAuthorities", arg0)
	ret0, _ := ret[0].(*acmpca.ListCertificateAuthoritiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateAuthorities indicates an expected call of ListCertificateAuthorities.
func (mr *MockACMPCAAPIMockRecorder) ListCertificateAuthorities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateAuthorities", reflect.TypeOf((*MockACMPCAAPI)(nil).ListCertificateAuthorities), arg0)
}

// ListCertificateAuthoritiesPages mocks base method.
func (m *MockACMPCAAPI) ListCertificateAuthoritiesPages(arg0 *acmpca.ListCertificateAuthoritiesInput, arg1 func(*acmpca.ListCertificateAuthoritiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificateAuthoritiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCertificateAuthoritiesPages indicates an expected call of ListCertificateAuthoritiesPages.
func (mr *MockACMPCAAPIMockRecorder) ListCertificateAuthoritiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateAuthoritiesPages", reflect.TypeOf((*MockACMPCAAPI)(nil).ListCertificateAuthoritiesPages), arg0, arg1)
}

// ListCertificateAuthoritiesPagesWithContext mocks base method.
func (m *MockACMPCAAPI) ListCertificateAuthoritiesPagesWithContext(arg0 context.Context, arg1 *acmpca.ListCertificateAuthoritiesInput, arg2 func(*acmpca.ListCertificateAuthoritiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateAuthoritiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCertificateAuthoritiesPagesWithContext indicates an expected call of ListCertificateAuthoritiesPagesWithContext.
func (mr *MockACMPCAAPIMockRecorder) ListCertificateAuthoritiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateAuthoritiesPagesWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).ListCertificateAuthoritiesPagesWithContext), varargs...)
}

// ListCertificateAuthoritiesRequest mocks base method.
func (m *MockACMPCAAPI) ListCertificateAuthoritiesRequest(arg0 *acmpca.ListCertificateAuthoritiesInput) (*request.Request, *acmpca.ListCertificateAuthoritiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificateAuthoritiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.ListCertificateAuthoritiesOutput)
	return ret0, ret1
}

// ListCertificateAuthoritiesRequest indicates an expected call of ListCertificateAuthoritiesRequest.
func (mr *MockACMPCAAPIMockRecorder) ListCertificateAuthoritiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateAuthoritiesRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).ListCertificateAuthoritiesRequest), arg0)
}

// ListCertificateAuthoritiesWithContext mocks base method.
func (m *MockACMPCAAPI) ListCertificateAuthoritiesWithContext(arg0 context.Context, arg1 *acmpca.ListCertificateAuthoritiesInput, arg2 ...request.Option) (*acmpca.ListCertificateAuthoritiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificateAuthoritiesWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.ListCertificateAuthoritiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificateAuthoritiesWithContext indicates an expected call of ListCertificateAuthoritiesWithContext.
func (mr *MockACMPCAAPIMockRecorder) ListCertificateAuthoritiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateAuthoritiesWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).ListCertificateAuthoritiesWithContext), varargs...)
}

// ListPermissions mocks base method.
func (m *MockACMPCAAPI) ListPermissions(arg0 *acmpca.ListPermissionsInput) (*acmpca.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0)
	ret0, _ := ret[0].(*acmpca.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockACMPCAAPIMockRecorder) ListPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockACMPCAAPI)(nil).ListPermissions), arg0)
}

// ListPermissionsPages mocks base method.
func (m *MockACMPCAAPI) ListPermissionsPages(arg0 *acmpca.ListPermissionsInput, arg1 func(*acmpca.ListPermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPages indicates an expected call of ListPermissionsPages.
func (mr *MockACMPCAAPIMockRecorder) ListPermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPages", reflect.TypeOf((*MockACMPCAAPI)(nil).ListPermissionsPages), arg0, arg1)
}

// ListPermissionsPagesWithContext mocks base method.
func (m *MockACMPCAAPI) ListPermissionsPagesWithContext(arg0 context.Context, arg1 *acmpca.ListPermissionsInput, arg2 func(*acmpca.ListPermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPagesWithContext indicates an expected call of ListPermissionsPagesWithContext.
func (mr *MockACMPCAAPIMockRecorder) ListPermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPagesWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).ListPermissionsPagesWithContext), varargs...)
}

// ListPermissionsRequest mocks base method.
func (m *MockACMPCAAPI) ListPermissionsRequest(arg0 *acmpca.ListPermissionsInput) (*request.Request, *acmpca.ListPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.ListPermissionsOutput)
	return ret0, ret1
}

// ListPermissionsRequest indicates an expected call of ListPermissionsRequest.
func (mr *MockACMPCAAPIMockRecorder) ListPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).ListPermissionsRequest), arg0)
}

// ListPermissionsWithContext mocks base method.
func (m *MockACMPCAAPI) ListPermissionsWithContext(arg0 context.Context, arg1 *acmpca.ListPermissionsInput, arg2 ...request.Option) (*acmpca.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsWithContext indicates an expected call of ListPermissionsWithContext.
func (mr *MockACMPCAAPIMockRecorder) ListPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).ListPermissionsWithContext), varargs...)
}

// ListTags mocks base method.
func (m *MockACMPCAAPI) ListTags(arg0 *acmpca.ListTagsInput) (*acmpca.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*acmpca.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockACMPCAAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockACMPCAAPI)(nil).ListTags), arg0)
}

// ListTagsPages mocks base method.
func (m *MockACMPCAAPI) ListTagsPages(arg0 *acmpca.ListTagsInput, arg1 func(*acmpca.ListTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsPages indicates an expected call of ListTagsPages.
func (mr *MockACMPCAAPIMockRecorder) ListTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsPages", reflect.TypeOf((*MockACMPCAAPI)(nil).ListTagsPages), arg0, arg1)
}

// ListTagsPagesWithContext mocks base method.
func (m *MockACMPCAAPI) ListTagsPagesWithContext(arg0 context.Context, arg1 *acmpca.ListTagsInput, arg2 func(*acmpca.ListTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsPagesWithContext indicates an expected call of ListTagsPagesWithContext.
func (mr *MockACMPCAAPIMockRecorder) ListTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsPagesWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).ListTagsPagesWithContext), varargs...)
}

// ListTagsRequest mocks base method.
func (m *MockACMPCAAPI) ListTagsRequest(arg0 *acmpca.ListTagsInput) (*request.Request, *acmpca.ListTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest.
func (mr *MockACMPCAAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method.
func (m *MockACMPCAAPI) ListTagsWithContext(arg0 context.Context, arg1 *acmpca.ListTagsInput, arg2 ...request.Option) (*acmpca.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext.
func (mr *MockACMPCAAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).ListTagsWithContext), varargs...)
}

// PutPolicy mocks base method.
func (m *MockACMPCAAPI) PutPolicy(arg0 *acmpca.PutPolicyInput) (*acmpca.PutPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPolicy", arg0)
	ret0, _ := ret[0].(*acmpca.PutPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPolicy indicates an expected call of PutPolicy.
func (mr *MockACMPCAAPIMockRecorder) PutPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicy", reflect.TypeOf((*MockACMPCAAPI)(nil).PutPolicy), arg0)
}

// PutPolicyRequest mocks base method.
func (m *MockACMPCAAPI) PutPolicyRequest(arg0 *acmpca.PutPolicyInput) (*request.Request, *acmpca.PutPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.PutPolicyOutput)
	return ret0, ret1
}

// PutPolicyRequest indicates an expected call of PutPolicyRequest.
func (mr *MockACMPCAAPIMockRecorder) PutPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicyRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).PutPolicyRequest), arg0)
}

// PutPolicyWithContext mocks base method.
func (m *MockACMPCAAPI) PutPolicyWithContext(arg0 context.Context, arg1 *acmpca.PutPolicyInput, arg2 ...request.Option) (*acmpca.PutPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.PutPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPolicyWithContext indicates an expected call of PutPolicyWithContext.
func (mr *MockACMPCAAPIMockRecorder) PutPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPolicyWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).PutPolicyWithContext), varargs...)
}

// RestoreCertificateAuthority mocks base method.
func (m *MockACMPCAAPI) RestoreCertificateAuthority(arg0 *acmpca.RestoreCertificateAuthorityInput) (*acmpca.RestoreCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCertificateAuthority", arg0)
	ret0, _ := ret[0].(*acmpca.RestoreCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCertificateAuthority indicates an expected call of RestoreCertificateAuthority.
func (mr *MockACMPCAAPIMockRecorder) RestoreCertificateAuthority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCertificateAuthority", reflect.TypeOf((*MockACMPCAAPI)(nil).RestoreCertificateAuthority), arg0)
}

// RestoreCertificateAuthorityRequest mocks base method.
func (m *MockACMPCAAPI) RestoreCertificateAuthorityRequest(arg0 *acmpca.RestoreCertificateAuthorityInput) (*request.Request, *acmpca.RestoreCertificateAuthorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCertificateAuthorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.RestoreCertificateAuthorityOutput)
	return ret0, ret1
}

// RestoreCertificateAuthorityRequest indicates an expected call of RestoreCertificateAuthorityRequest.
func (mr *MockACMPCAAPIMockRecorder) RestoreCertificateAuthorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCertificateAuthorityRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).RestoreCertificateAuthorityRequest), arg0)
}

// RestoreCertificateAuthorityWithContext mocks base method.
func (m *MockACMPCAAPI) RestoreCertificateAuthorityWithContext(arg0 context.Context, arg1 *acmpca.RestoreCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.RestoreCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.RestoreCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCertificateAuthorityWithContext indicates an expected call of RestoreCertificateAuthorityWithContext.
func (mr *MockACMPCAAPIMockRecorder) RestoreCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCertificateAuthorityWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).RestoreCertificateAuthorityWithContext), varargs...)
}

// RevokeCertificate mocks base method.
func (m *MockACMPCAAPI) RevokeCertificate(arg0 *acmpca.RevokeCertificateInput) (*acmpca.RevokeCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertificate", arg0)
	ret0, _ := ret[0].(*acmpca.RevokeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeCertificate indicates an expected call of RevokeCertificate.
func (mr *MockACMPCAAPIMockRecorder) RevokeCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificate", reflect.TypeOf((*MockACMPCAAPI)(nil).RevokeCertificate), arg0)
}

// RevokeCertificateRequest mocks base method.
func (m *MockACMPCAAPI) RevokeCertificateRequest(arg0 *acmpca.RevokeCertificateInput) (*request.Request, *acmpca.RevokeCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.RevokeCertificateOutput)
	return ret0, ret1
}

// RevokeCertificateRequest indicates an expected call of RevokeCertificateRequest.
func (mr *MockACMPCAAPIMockRecorder) RevokeCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificateRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).RevokeCertificateRequest), arg0)
}

// RevokeCertificateWithContext mocks base method.
func (m *MockACMPCAAPI) RevokeCertificateWithContext(arg0 context.Context, arg1 *acmpca.RevokeCertificateInput, arg2 ...request.Option) (*acmpca.RevokeCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.RevokeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeCertificateWithContext indicates an expected call of RevokeCertificateWithContext.
func (mr *MockACMPCAAPIMockRecorder) RevokeCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificateWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).RevokeCertificateWithContext), varargs...)
}

// TagCertificateAuthority mocks base method.
func (m *MockACMPCAAPI) TagCertificateAuthority(arg0 *acmpca.TagCertificateAuthorityInput) (*acmpca.TagCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCertificateAuthority", arg0)
	ret0, _ := ret[0].(*acmpca.TagCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagCertificateAuthority indicates an expected call of TagCertificateAuthority.
func (mr *MockACMPCAAPIMockRecorder) TagCertificateAuthority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCertificateAuthority", reflect.TypeOf((*MockACMPCAAPI)(nil).TagCertificateAuthority), arg0)
}

// TagCertificateAuthorityRequest mocks base method.
func (m *MockACMPCAAPI) TagCertificateAuthorityRequest(arg0 *acmpca.TagCertificateAuthorityInput) (*request.Request, *acmpca.TagCertificateAuthorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagCertificateAuthorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.TagCertificateAuthorityOutput)
	return ret0, ret1
}

// TagCertificateAuthorityRequest indicates an expected call of TagCertificateAuthorityRequest.
func (mr *MockACMPCAAPIMockRecorder) TagCertificateAuthorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCertificateAuthorityRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).TagCertificateAuthorityRequest), arg0)
}

// TagCertificateAuthorityWithContext mocks base method.
func (m *MockACMPCAAPI) TagCertificateAuthorityWithContext(arg0 context.Context, arg1 *acmpca.TagCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.TagCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.TagCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagCertificateAuthorityWithContext indicates an expected call of TagCertificateAuthorityWithContext.
func (mr *MockACMPCAAPIMockRecorder) TagCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagCertificateAuthorityWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).TagCertificateAuthorityWithContext), varargs...)
}

// UntagCertificateAuthority mocks base method.
func (m *MockACMPCAAPI) UntagCertificateAuthority(arg0 *acmpca.UntagCertificateAuthorityInput) (*acmpca.UntagCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagCertificateAuthority", arg0)
	ret0, _ := ret[0].(*acmpca.UntagCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagCertificateAuthority indicates an expected call of UntagCertificateAuthority.
func (mr *MockACMPCAAPIMockRecorder) UntagCertificateAuthority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagCertificateAuthority", reflect.TypeOf((*MockACMPCAAPI)(nil).UntagCertificateAuthority), arg0)
}

// UntagCertificateAuthorityRequest mocks base method.
func (m *MockACMPCAAPI) UntagCertificateAuthorityRequest(arg0 *acmpca.UntagCertificateAuthorityInput) (*request.Request, *acmpca.UntagCertificateAuthorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagCertificateAuthorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.UntagCertificateAuthorityOutput)
	return ret0, ret1
}

// UntagCertificateAuthorityRequest indicates an expected call of UntagCertificateAuthorityRequest.
func (mr *MockACMPCAAPIMockRecorder) UntagCertificateAuthorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagCertificateAuthorityRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).UntagCertificateAuthorityRequest), arg0)
}

// UntagCertificateAuthorityWithContext mocks base method.
func (m *MockACMPCAAPI) UntagCertificateAuthorityWithContext(arg0 context.Context, arg1 *acmpca.UntagCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.UntagCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.UntagCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagCertificateAuthorityWithContext indicates an expected call of UntagCertificateAuthorityWithContext.
func (mr *MockACMPCAAPIMockRecorder) UntagCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagCertificateAuthorityWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).UntagCertificateAuthorityWithContext), varargs...)
}

// UpdateCertificateAuthority mocks base method.
func (m *MockACMPCAAPI) UpdateCertificateAuthority(arg0 *acmpca.UpdateCertificateAuthorityInput) (*acmpca.UpdateCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateAuthority", arg0)
	ret0, _ := ret[0].(*acmpca.UpdateCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificateAuthority indicates an expected call of UpdateCertificateAuthority.
func (mr *MockACMPCAAPIMockRecorder) UpdateCertificateAuthority(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateAuthority", reflect.TypeOf((*MockACMPCAAPI)(nil).UpdateCertificateAuthority), arg0)
}

// UpdateCertificateAuthorityRequest mocks base method.
func (m *MockACMPCAAPI) UpdateCertificateAuthorityRequest(arg0 *acmpca.UpdateCertificateAuthorityInput) (*request.Request, *acmpca.UpdateCertificateAuthorityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateAuthorityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acmpca.UpdateCertificateAuthorityOutput)
	return ret0, ret1
}

// UpdateCertificateAuthorityRequest indicates an expected call of UpdateCertificateAuthorityRequest.
func (mr *MockACMPCAAPIMockRecorder) UpdateCertificateAuthorityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateAuthorityRequest", reflect.TypeOf((*MockACMPCAAPI)(nil).UpdateCertificateAuthorityRequest), arg0)
}

// UpdateCertificateAuthorityWithContext mocks base method.
func (m *MockACMPCAAPI) UpdateCertificateAuthorityWithContext(arg0 context.Context, arg1 *acmpca.UpdateCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.UpdateCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.UpdateCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificateAuthorityWithContext indicates an expected call of UpdateCertificateAuthorityWithContext.
func (mr *MockACMPCAAPIMockRecorder) UpdateCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateAuthorityWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).UpdateCertificateAuthorityWithContext), varargs...)
}

// WaitUntilAuditReportCreated mocks base method.
func (m *MockACMPCAAPI) WaitUntilAuditReportCreated(arg0 *acmpca.DescribeCertificateAuthorityAuditReportInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAuditReportCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAuditReportCreated indicates an expected call of WaitUntilAuditReportCreated.
func (mr *MockACMPCAAPIMockRecorder) WaitUntilAuditReportCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAuditReportCreated", reflect.TypeOf((*MockACMPCAAPI)(nil).WaitUntilAuditReportCreated), arg0)
}

// WaitUntilAuditReportCreatedWithContext mocks base method.
func (m *MockACMPCAAPI) WaitUntilAuditReportCreatedWithContext(arg0 context.Context, arg1 *acmpca.DescribeCertificateAuthorityAuditReportInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAuditReportCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAuditReportCreatedWithContext indicates an expected call of WaitUntilAuditReportCreatedWithContext.
func (mr *MockACMPCAAPIMockRecorder) WaitUntilAuditReportCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAuditReportCreatedWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).WaitUntilAuditReportCreatedWithContext), varargs...)
}

// WaitUntilCertificateAuthorityCSRCreated mocks base method.
func (m *MockACMPCAAPI) WaitUntilCertificateAuthorityCSRCreated(arg0 *acmpca.GetCertificateAuthorityCsrInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilCertificateAuthorityCSRCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilCertificateAuthorityCSRCreated indicates an expected call of WaitUntilCertificateAuthorityCSRCreated.
func (mr *MockACMPCAAPIMockRecorder) WaitUntilCertificateAuthorityCSRCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCertificateAuthorityCSRCreated", reflect.TypeOf((*MockACMPCAAPI)(nil).WaitUntilCertificateAuthorityCSRCreated), arg0)
}

// WaitUntilCertificateAuthorityCSRCreatedWithContext mocks base method.
func (m *MockACMPCAAPI) WaitUntilCertificateAuthorityCSRCreatedWithContext(arg0 context.Context, arg1 *acmpca.GetCertificateAuthorityCsrInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilCertificateAuthorityCSRCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilCertificateAuthorityCSRCreatedWithContext indicates an expected call of WaitUntilCertificateAuthorityCSRCreatedWithContext.
func (mr *MockACMPCAAPIMockRecorder) WaitUntilCertificateAuthorityCSRCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCertificateAuthorityCSRCreatedWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).WaitUntilCertificateAuthorityCSRCreatedWithContext), varargs...)
}

// WaitUntilCertificateIssued mocks base method.
func (m *MockACMPCAAPI) WaitUntilCertificateIssued(arg0 *acmpca.GetCertificateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilCertificateIssued", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilCertificateIssued indicates an expected call of WaitUntilCertificateIssued.
func (mr *MockACMPCAAPIMockRecorder) WaitUntilCertificateIssued(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCertificateIssued", reflect.TypeOf((*MockACMPCAAPI)(nil).WaitUntilCertificateIssued), arg0)
}

// WaitUntilCertificateIssuedWithContext mocks base method.
func (m *MockACMPCAAPI) WaitUntilCertificateIssuedWithContext(arg0 context.Context, arg1 *acmpca.GetCertificateInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilCertificateIssuedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilCertificateIssuedWithContext indicates an expected call of WaitUntilCertificateIssuedWithContext.
func (mr *MockACMPCAAPIMockRecorder) WaitUntilCertificateIssuedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCertificateIssuedWithContext", reflect.TypeOf((*MockACMPCAAPI)(nil).WaitUntilCertificateIssuedWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/prometheusservice/prometheusserviceiface (interfaces: PrometheusServiceAPI)

// Package prometheusservicemock is a generated GoMock package.
package prometheusservicemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	prometheusservice "github.com/aws/aws-sdk-go/service/prometheusservice"
	gomock "github.com/golang/mock/gomock"
)

// MockPrometheusServiceAPI is a mock of PrometheusServiceAPI interface.
type MockPrometheusServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusServiceAPIMockRecorder
}

// MockPrometheusServiceAPIMockRecorder is the mock recorder for MockPrometheusServiceAPI.
type MockPrometheusServiceAPIMockRecorder struct {
	mock *MockPrometheusServiceAPI
}

// NewMockPrometheusServiceAPI creates a new mock instance.
func NewMockPrometheusServiceAPI(ctrl *gomock.Controller) *MockPrometheusServiceAPI {
	mock := &MockPrometheusServiceAPI{ctrl: ctrl}
	mock.recorder = &MockPrometheusServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusServiceAPI) EXPECT() *MockPrometheusServiceAPIMockRecorder {
	return m.recorder
}

// CreateAlertManagerDefinition mocks base method.
func (m *MockPrometheusServiceAPI) CreateAlertManagerDefinition(arg0 *prometheusservice.CreateAlertManagerDefinitionInput) (*prometheusservice.CreateAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertManagerDefinition", arg0)
	ret0, _ := ret[0].(*prometheusservice.CreateAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertManagerDefinition indicates an expected call of CreateAlertManagerDefinition.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateAlertManagerDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertManagerDefinition", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateAlertManagerDefinition), arg0)
}

// CreateAlertManagerDefinitionRequest mocks base method.
func (m *MockPrometheusServiceAPI) CreateAlertManagerDefinitionRequest(arg0 *prometheusservice.CreateAlertManagerDefinitionInput) (*request.Request, *prometheusservice.CreateAlertManagerDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertManagerDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.CreateAlertManagerDefinitionOutput)
	return ret0, ret1
}

// CreateAlertManagerDefinitionRequest indicates an expected call of CreateAlertManagerDefinitionRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateAlertManagerDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertManagerDefinitionRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateAlertManagerDefinitionRequest), arg0)
}

// CreateAlertManagerDefinitionWithContext mocks base method.
func (m *MockPrometheusServiceAPI) CreateAlertManagerDefinitionWithContext(arg0 context.Context, arg1 *prometheusservice.CreateAlertManagerDefinitionInput, arg2 ...request.Option) (*prometheusservice.CreateAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAlertManagerDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.CreateAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertManagerDefinitionWithContext indicates an expected call of CreateAlertManagerDefinitionWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateAlertManagerDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertManagerDefinitionWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateAlertManagerDefinitionWithContext), varargs...)
}

// CreateRuleGroupsNamespace mocks base method.
func (m *MockPrometheusServiceAPI) CreateRuleGroupsNamespace(arg0 *prometheusservice.CreateRuleGroupsNamespaceInput) (*prometheusservice.CreateRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroupsNamespace", arg0)
	ret0, _ := ret[0].(*prometheusservice.CreateRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroupsNamespace indicates an expected call of CreateRuleGroupsNamespace.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateRuleGroupsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupsNamespace", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateRuleGroupsNamespace), arg0)
}

// CreateRuleGroupsNamespaceRequest mocks base method.
func (m *MockPrometheusServiceAPI) CreateRuleGroupsNamespaceRequest(arg0 *prometheusservice.CreateRuleGroupsNamespaceInput) (*request.Request, *prometheusservice.CreateRuleGroupsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroupsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.CreateRuleGroupsNamespaceOutput)
	return ret0, ret1
}

// CreateRuleGroupsNamespaceRequest indicates an expected call of CreateRuleGroupsNamespaceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateRuleGroupsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupsNamespaceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateRuleGroupsNamespaceRequest), arg0)
}

// CreateRuleGroupsNamespaceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) CreateRuleGroupsNamespaceWithContext(arg0 context.Context, arg1 *prometheusservice.CreateRuleGroupsNamespaceInput, arg2 ...request.Option) (*prometheusservice.CreateRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleGroupsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.CreateRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroupsNamespaceWithContext indicates an expected call of CreateRuleGroupsNamespaceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateRuleGroupsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupsNamespaceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateRuleGroupsNamespaceWithContext), varargs...)
}

// CreateWorkspace mocks base method.
func (m *MockPrometheusServiceAPI) CreateWorkspace(arg0 *prometheusservice.CreateWorkspaceInput) (*prometheusservice.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", arg0)
	ret0, _ := ret[0].(*prometheusservice.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateWorkspace), arg0)
}

// CreateWorkspaceRequest mocks base method.
func (m *MockPrometheusServiceAPI) CreateWorkspaceRequest(arg0 *prometheusservice.CreateWorkspaceInput) (*request.Request, *prometheusservice.CreateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.CreateWorkspaceOutput)
	return ret0, ret1
}

// CreateWorkspaceRequest indicates an expected call of CreateWorkspaceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateWorkspaceRequest), arg0)
}

// CreateWorkspaceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) CreateWorkspaceWithContext(arg0 context.Context, arg1 *prometheusservice.CreateWorkspaceInput, arg2 ...request.Option) (*prometheusservice.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceWithContext indicates an expected call of CreateWorkspaceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) CreateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).CreateWorkspaceWithContext), varargs...)
}

// DeleteAlertManagerDefinition mocks base method.
func (m *MockPrometheusServiceAPI) DeleteAlertManagerDefinition(arg0 *prometheusservice.DeleteAlertManagerDefinitionInput) (*prometheusservice.DeleteAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertManagerDefinition", arg0)
	ret0, _ := ret[0].(*prometheusservice.DeleteAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlertManagerDefinition indicates an expected call of DeleteAlertManagerDefinition.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteAlertManagerDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertManagerDefinition", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteAlertManagerDefinition), arg0)
}

// DeleteAlertManagerDefinitionRequest mocks base method.
func (m *MockPrometheusServiceAPI) DeleteAlertManagerDefinitionRequest(arg0 *prometheusservice.DeleteAlertManagerDefinitionInput) (*request.Request, *prometheusservice.DeleteAlertManagerDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertManagerDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.DeleteAlertManagerDefinitionOutput)
	return ret0, ret1
}

// DeleteAlertManagerDefinitionRequest indicates an expected call of DeleteAlertManagerDefinitionRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteAlertManagerDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertManagerDefinitionRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteAlertManagerDefinitionRequest), arg0)
}

// DeleteAlertManagerDefinitionWithContext mocks base method.
func (m *MockPrometheusServiceAPI) DeleteAlertManagerDefinitionWithContext(arg0 context.Context, arg1 *prometheusservice.DeleteAlertManagerDefinitionInput, arg2 ...request.Option) (*prometheusservice.DeleteAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAlertManagerDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.DeleteAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlertManagerDefinitionWithContext indicates an expected call of DeleteAlertManagerDefinitionWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteAlertManagerDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertManagerDefinitionWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteAlertManagerDefinitionWithContext), varargs...)
}

// DeleteRuleGroupsNamespace mocks base method.
func (m *MockPrometheusServiceAPI) DeleteRuleGroupsNamespace(arg0 *prometheusservice.DeleteRuleGroupsNamespaceInput) (*prometheusservice.DeleteRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroupsNamespace", arg0)
	ret0, _ := ret[0].(*prometheusservice.DeleteRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroupsNamespace indicates an expected call of DeleteRuleGroupsNamespace.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteRuleGroupsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupsNamespace", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteRuleGroupsNamespace), arg0)
}

// DeleteRuleGroupsNamespaceRequest mocks base method.
func (m *MockPrometheusServiceAPI) DeleteRuleGroupsNamespaceRequest(arg0 *prometheusservice.DeleteRuleGroupsNamespaceInput) (*request.Request, *prometheusservice.DeleteRuleGroupsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroupsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.DeleteRuleGroupsNamespaceOutput)
	return ret0, ret1
}

// DeleteRuleGroupsNamespaceRequest indicates an expected call of DeleteRuleGroupsNamespaceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteRuleGroupsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupsNamespaceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteRuleGroupsNamespaceRequest), arg0)
}

// DeleteRuleGroupsNamespaceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) DeleteRuleGroupsNamespaceWithContext(arg0 context.Context, arg1 *prometheusservice.DeleteRuleGroupsNamespaceInput, arg2 ...request.Option) (*prometheusservice.DeleteRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleGroupsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.DeleteRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroupsNamespaceWithContext indicates an expected call of DeleteRuleGroupsNamespaceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteRuleGroupsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupsNamespaceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteRuleGroupsNamespaceWithContext), varargs...)
}

// DeleteWorkspace mocks base method.
func (m *MockPrometheusServiceAPI) DeleteWorkspace(arg0 *prometheusservice.DeleteWorkspaceInput) (*prometheusservice.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0)
	ret0, _ := ret[0].(*prometheusservice.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteWorkspace), arg0)
}

// DeleteWorkspaceRequest mocks base method.
func (m *MockPrometheusServiceAPI) DeleteWorkspaceRequest(arg0 *prometheusservice.DeleteWorkspaceInput) (*request.Request, *prometheusservice.DeleteWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.DeleteWorkspaceOutput)
	return ret0, ret1
}

// DeleteWorkspaceRequest indicates an expected call of DeleteWorkspaceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteWorkspaceRequest), arg0)
}

// DeleteWorkspaceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) DeleteWorkspaceWithContext(arg0 context.Context, arg1 *prometheusservice.DeleteWorkspaceInput, arg2 ...request.Option) (*prometheusservice.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceWithContext indicates an expected call of DeleteWorkspaceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) DeleteWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DeleteWorkspaceWithContext), varargs...)
}

// DescribeAlertManagerDefinition mocks base method.
func (m *MockPrometheusServiceAPI) DescribeAlertManagerDefinition(arg0 *prometheusservice.DescribeAlertManagerDefinitionInput) (*prometheusservice.DescribeAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAlertManagerDefinition", arg0)
	ret0, _ := ret[0].(*prometheusservice.DescribeAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlertManagerDefinition indicates an expected call of DescribeAlertManagerDefinition.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeAlertManagerDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlertManagerDefinition", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeAlertManagerDefinition), arg0)
}

// DescribeAlertManagerDefinitionRequest mocks base method.
func (m *MockPrometheusServiceAPI) DescribeAlertManagerDefinitionRequest(arg0 *prometheusservice.DescribeAlertManagerDefinitionInput) (*request.Request, *prometheusservice.DescribeAlertManagerDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAlertManagerDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.DescribeAlertManagerDefinitionOutput)
	return ret0, ret1
}

// DescribeAlertManagerDefinitionRequest indicates an expected call of DescribeAlertManagerDefinitionRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeAlertManagerDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlertManagerDefinitionRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeAlertManagerDefinitionRequest), arg0)
}

// DescribeAlertManagerDefinitionWithContext mocks base method.
func (m *MockPrometheusServiceAPI) DescribeAlertManagerDefinitionWithContext(arg0 context.Context, arg1 *prometheusservice.DescribeAlertManagerDefinitionInput, arg2 ...request.Option) (*prometheusservice.DescribeAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlertManagerDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.DescribeAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlertManagerDefinitionWithContext indicates an expected call of DescribeAlertManagerDefinitionWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeAlertManagerDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlertManagerDefinitionWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeAlertManagerDefinitionWithContext), varargs...)
}

// DescribeRuleGroupsNamespace mocks base method.
func (m *MockPrometheusServiceAPI) DescribeRuleGroupsNamespace(arg0 *prometheusservice.DescribeRuleGroupsNamespaceInput) (*prometheusservice.DescribeRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRuleGroupsNamespace", arg0)
	ret0, _ := ret[0].(*prometheusservice.DescribeRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRuleGroupsNamespace indicates an expected call of DescribeRuleGroupsNamespace.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeRuleGroupsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuleGroupsNamespace", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeRuleGroupsNamespace), arg0)
}

// DescribeRuleGroupsNamespaceRequest mocks base method.
func (m *MockPrometheusServiceAPI) DescribeRuleGroupsNamespaceRequest(arg0 *prometheusservice.DescribeRuleGroupsNamespaceInput) (*request.Request, *prometheusservice.DescribeRuleGroupsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRuleGroupsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.DescribeRuleGroupsNamespaceOutput)
	return ret0, ret1
}

// DescribeRuleGroupsNamespaceRequest indicates an expected call of DescribeRuleGroupsNamespaceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeRuleGroupsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuleGroupsNamespaceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeRuleGroupsNamespaceRequest), arg0)
}

// DescribeRuleGroupsNamespaceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) DescribeRuleGroupsNamespaceWithContext(arg0 context.Context, arg1 *prometheusservice.DescribeRuleGroupsNamespaceInput, arg2 ...request.Option) (*prometheusservice.DescribeRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRuleGroupsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.DescribeRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRuleGroupsNamespaceWithContext indicates an expected call of DescribeRuleGroupsNamespaceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeRuleGroupsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuleGroupsNamespaceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeRuleGroupsNamespaceWithContext), varargs...)
}

// DescribeWorkspace mocks base method.
func (m *MockPrometheusServiceAPI) DescribeWorkspace(arg0 *prometheusservice.DescribeWorkspaceInput) (*prometheusservice.DescribeWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspace", arg0)
	ret0, _ := ret[0].(*prometheusservice.DescribeWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspace indicates an expected call of DescribeWorkspace.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspace", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeWorkspace), arg0)
}

// DescribeWorkspaceRequest mocks base method.
func (m *MockPrometheusServiceAPI) DescribeWorkspaceRequest(arg0 *prometheusservice.DescribeWorkspaceInput) (*request.Request, *prometheusservice.DescribeWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.DescribeWorkspaceOutput)
	return ret0, ret1
}

// DescribeWorkspaceRequest indicates an expected call of DescribeWorkspaceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeWorkspaceRequest), arg0)
}

// DescribeWorkspaceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) DescribeWorkspaceWithContext(arg0 context.Context, arg1 *prometheusservice.DescribeWorkspaceInput, arg2 ...request.Option) (*prometheusservice.DescribeWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.DescribeWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceWithContext indicates an expected call of DescribeWorkspaceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) DescribeWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).DescribeWorkspaceWithContext), varargs...)
}

// ListRuleGroupsNamespaces mocks base method.
func (m *MockPrometheusServiceAPI) ListRuleGroupsNamespaces(arg0 *prometheusservice.ListRuleGroupsNamespacesInput) (*prometheusservice.ListRuleGroupsNamespacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroupsNamespaces", arg0)
	ret0, _ := ret[0].(*prometheusservice.ListRuleGroupsNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroupsNamespaces indicates an expected call of ListRuleGroupsNamespaces.
func (mr *MockPrometheusServiceAPIMockRecorder) ListRuleGroupsNamespaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsNamespaces", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListRuleGroupsNamespaces), arg0)
}

// ListRuleGroupsNamespacesPages mocks base method.
func (m *MockPrometheusServiceAPI) ListRuleGroupsNamespacesPages(arg0 *prometheusservice.ListRuleGroupsNamespacesInput, arg1 func(*prometheusservice.ListRuleGroupsNamespacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroupsNamespacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRuleGroupsNamespacesPages indicates an expected call of ListRuleGroupsNamespacesPages.
func (mr *MockPrometheusServiceAPIMockRecorder) ListRuleGroupsNamespacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsNamespacesPages", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListRuleGroupsNamespacesPages), arg0, arg1)
}

// ListRuleGroupsNamespacesPagesWithContext mocks base method.
func (m *MockPrometheusServiceAPI) ListRuleGroupsNamespacesPagesWithContext(arg0 context.Context, arg1 *prometheusservice.ListRuleGroupsNamespacesInput, arg2 func(*prometheusservice.ListRuleGroupsNamespacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleGroupsNamespacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRuleGroupsNamespacesPagesWithContext indicates an expected call of ListRuleGroupsNamespacesPagesWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) ListRuleGroupsNamespacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsNamespacesPagesWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListRuleGroupsNamespacesPagesWithContext), varargs...)
}

// ListRuleGroupsNamespacesRequest mocks base method.
func (m *MockPrometheusServiceAPI) ListRuleGroupsNamespacesRequest(arg0 *prometheusservice.ListRuleGroupsNamespacesInput) (*request.Request, *prometheusservice.ListRuleGroupsNamespacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroupsNamespacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.ListRuleGroupsNamespacesOutput)
	return ret0, ret1
}

// ListRuleGroupsNamespacesRequest indicates an expected call of ListRuleGroupsNamespacesRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) ListRuleGroupsNamespacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsNamespacesRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListRuleGroupsNamespacesRequest), arg0)
}

// ListRuleGroupsNamespacesWithContext mocks base method.
func (m *MockPrometheusServiceAPI) ListRuleGroupsNamespacesWithContext(arg0 context.Context, arg1 *prometheusservice.ListRuleGroupsNamespacesInput, arg2 ...request.Option) (*prometheusservice.ListRuleGroupsNamespacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleGroupsNamespacesWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.ListRuleGroupsNamespacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroupsNamespacesWithContext indicates an expected call of ListRuleGroupsNamespacesWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) ListRuleGroupsNamespacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsNamespacesWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListRuleGroupsNamespacesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockPrometheusServiceAPI) ListTagsForResource(arg0 *prometheusservice.ListTagsForResourceInput) (*prometheusservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*prometheusservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockPrometheusServiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockPrometheusServiceAPI) ListTagsForResourceRequest(arg0 *prometheusservice.ListTagsForResourceInput) (*request.Request, *prometheusservice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *prometheusservice.ListTagsForResourceInput, arg2 ...request.Option) (*prometheusservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWorkspaces mocks base method.
func (m *MockPrometheusServiceAPI) ListWorkspaces(arg0 *prometheusservice.ListWorkspacesInput) (*prometheusservice.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaces", arg0)
	ret0, _ := ret[0].(*prometheusservice.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaces indicates an expected call of ListWorkspaces.
func (mr *MockPrometheusServiceAPIMockRecorder) ListWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaces", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListWorkspaces), arg0)
}

// ListWorkspacesPages mocks base method.
func (m *MockPrometheusServiceAPI) ListWorkspacesPages(arg0 *prometheusservice.ListWorkspacesInput, arg1 func(*prometheusservice.ListWorkspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPages indicates an expected call of ListWorkspacesPages.
func (mr *MockPrometheusServiceAPIMockRecorder) ListWorkspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPages", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListWorkspacesPages), arg0, arg1)
}

// ListWorkspacesPagesWithContext mocks base method.
func (m *MockPrometheusServiceAPI) ListWorkspacesPagesWithContext(arg0 context.Context, arg1 *prometheusservice.ListWorkspacesInput, arg2 func(*prometheusservice.ListWorkspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPagesWithContext indicates an expected call of ListWorkspacesPagesWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) ListWorkspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPagesWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListWorkspacesPagesWithContext), varargs...)
}

// ListWorkspacesRequest mocks base method.
func (m *MockPrometheusServiceAPI) ListWorkspacesRequest(arg0 *prometheusservice.ListWorkspacesInput) (*request.Request, *prometheusservice.ListWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.ListWorkspacesOutput)
	return ret0, ret1
}

// ListWorkspacesRequest indicates an expected call of ListWorkspacesRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) ListWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListWorkspacesRequest), arg0)
}

// ListWorkspacesWithContext mocks base method.
func (m *MockPrometheusServiceAPI) ListWorkspacesWithContext(arg0 context.Context, arg1 *prometheusservice.ListWorkspacesInput, arg2 ...request.Option) (*prometheusservice.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacesWithContext indicates an expected call of ListWorkspacesWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) ListWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).ListWorkspacesWithContext), varargs...)
}

// PutAlertManagerDefinition mocks base method.
func (m *MockPrometheusServiceAPI) PutAlertManagerDefinition(arg0 *prometheusservice.PutAlertManagerDefinitionInput) (*prometheusservice.PutAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAlertManagerDefinition", arg0)
	ret0, _ := ret[0].(*prometheusservice.PutAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAlertManagerDefinition indicates an expected call of PutAlertManagerDefinition.
func (mr *MockPrometheusServiceAPIMockRecorder) PutAlertManagerDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlertManagerDefinition", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).PutAlertManagerDefinition), arg0)
}

// PutAlertManagerDefinitionRequest mocks base method.
func (m *MockPrometheusServiceAPI) PutAlertManagerDefinitionRequest(arg0 *prometheusservice.PutAlertManagerDefinitionInput) (*request.Request, *prometheusservice.PutAlertManagerDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAlertManagerDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.PutAlertManagerDefinitionOutput)
	return ret0, ret1
}

// PutAlertManagerDefinitionRequest indicates an expected call of PutAlertManagerDefinitionRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) PutAlertManagerDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlertManagerDefinitionRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).PutAlertManagerDefinitionRequest), arg0)
}

// PutAlertManagerDefinitionWithContext mocks base method.
func (m *MockPrometheusServiceAPI) PutAlertManagerDefinitionWithContext(arg0 context.Context, arg1 *prometheusservice.PutAlertManagerDefinitionInput, arg2 ...request.Option) (*prometheusservice.PutAlertManagerDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAlertManagerDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.PutAlertManagerDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAlertManagerDefinitionWithContext indicates an expected call of PutAlertManagerDefinitionWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) PutAlertManagerDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlertManagerDefinitionWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).PutAlertManagerDefinitionWithContext), varargs...)
}

// PutRuleGroupsNamespace mocks base method.
func (m *MockPrometheusServiceAPI) PutRuleGroupsNamespace(arg0 *prometheusservice.PutRuleGroupsNamespaceInput) (*prometheusservice.PutRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRuleGroupsNamespace", arg0)
	ret0, _ := ret[0].(*prometheusservice.PutRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRuleGroupsNamespace indicates an expected call of PutRuleGroupsNamespace.
func (mr *MockPrometheusServiceAPIMockRecorder) PutRuleGroupsNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRuleGroupsNamespace", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).PutRuleGroupsNamespace), arg0)
}

// PutRuleGroupsNamespaceRequest mocks base method.
func (m *MockPrometheusServiceAPI) PutRuleGroupsNamespaceRequest(arg0 *prometheusservice.PutRuleGroupsNamespaceInput) (*request.Request, *prometheusservice.PutRuleGroupsNamespaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRuleGroupsNamespaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.PutRuleGroupsNamespaceOutput)
	return ret0, ret1
}

// PutRuleGroupsNamespaceRequest indicates an expected call of PutRuleGroupsNamespaceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) PutRuleGroupsNamespaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRuleGroupsNamespaceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).PutRuleGroupsNamespaceRequest), arg0)
}

// PutRuleGroupsNamespaceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) PutRuleGroupsNamespaceWithContext(arg0 context.Context, arg1 *prometheusservice.PutRuleGroupsNamespaceInput, arg2 ...request.Option) (*prometheusservice.PutRuleGroupsNamespaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRuleGroupsNamespaceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.PutRuleGroupsNamespaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRuleGroupsNamespaceWithContext indicates an expected call of PutRuleGroupsNamespaceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) PutRuleGroupsNamespaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRuleGroupsNamespaceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).PutRuleGroupsNamespaceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockPrometheusServiceAPI) TagResource(arg0 *prometheusservice.TagResourceInput) (*prometheusservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*prometheusservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockPrometheusServiceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockPrometheusServiceAPI) TagResourceRequest(arg0 *prometheusservice.TagResourceInput) (*request.Request, *prometheusservice.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) TagResourceWithContext(arg0 context.Context, arg1 *prometheusservice.TagResourceInput, arg2 ...request.Option) (*prometheusservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockPrometheusServiceAPI) UntagResource(arg0 *prometheusservice.UntagResourceInput) (*prometheusservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*prometheusservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockPrometheusServiceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockPrometheusServiceAPI) UntagResourceRequest(arg0 *prometheusservice.UntagResourceInput) (*request.Request, *prometheusservice.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockPrometheusServiceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *prometheusservice.UntagResourceInput, arg2 ...request.Option) (*prometheusservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateWorkspaceAlias mocks base method.
func (m *MockPrometheusServiceAPI) UpdateWorkspaceAlias(arg0 *prometheusservice.UpdateWorkspaceAliasInput) (*prometheusservice.UpdateWorkspaceAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceAlias", arg0)
	ret0, _ := ret[0].(*prometheusservice.UpdateWorkspaceAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceAlias indicates an expected call of UpdateWorkspaceAlias.
func (mr *MockPrometheusServiceAPIMockRecorder) UpdateWorkspaceAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAlias", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).UpdateWorkspaceAlias), arg0)
}

// UpdateWorkspaceAliasRequest mocks base method.
func (m *MockPrometheusServiceAPI) UpdateWorkspaceAliasRequest(arg0 *prometheusservice.UpdateWorkspaceAliasInput) (*request.Request, *prometheusservice.UpdateWorkspaceAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*prometheusservice.UpdateWorkspaceAliasOutput)
	return ret0, ret1
}

// UpdateWorkspaceAliasRequest indicates an expected call of UpdateWorkspaceAliasRequest.
func (mr *MockPrometheusServiceAPIMockRecorder) UpdateWorkspaceAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAliasRequest", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).UpdateWorkspaceAliasRequest), arg0)
}

// UpdateWorkspaceAliasWithContext mocks base method.
func (m *MockPrometheusServiceAPI) UpdateWorkspaceAliasWithContext(arg0 context.Context, arg1 *prometheusservice.UpdateWorkspaceAliasInput, arg2 ...request.Option) (*prometheusservice.UpdateWorkspaceAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceAliasWithContext", varargs...)
	ret0, _ := ret[0].(*prometheusservice.UpdateWorkspaceAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceAliasWithContext indicates an expected call of UpdateWorkspaceAliasWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) UpdateWorkspaceAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAliasWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).UpdateWorkspaceAliasWithContext), varargs...)
}

// WaitUntilWorkspaceActive mocks base method.
func (m *MockPrometheusServiceAPI) WaitUntilWorkspaceActive(arg0 *prometheusservice.DescribeWorkspaceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilWorkspaceActive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWorkspaceActive indicates an expected call of WaitUntilWorkspaceActive.
func (mr *MockPrometheusServiceAPIMockRecorder) WaitUntilWorkspaceActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWorkspaceActive", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).WaitUntilWorkspaceActive), arg0)
}

// WaitUntilWorkspaceActiveWithContext mocks base method.
func (m *MockPrometheusServiceAPI) WaitUntilWorkspaceActiveWithContext(arg0 context.Context, arg1 *prometheusservice.DescribeWorkspaceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilWorkspaceActiveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWorkspaceActiveWithContext indicates an expected call of WaitUntilWorkspaceActiveWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) WaitUntilWorkspaceActiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWorkspaceActiveWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).WaitUntilWorkspaceActiveWithContext), varargs...)
}

// WaitUntilWorkspaceDeleted mocks base method.
func (m *MockPrometheusServiceAPI) WaitUntilWorkspaceDeleted(arg0 *prometheusservice.DescribeWorkspaceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilWorkspaceDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWorkspaceDeleted indicates an expected call of WaitUntilWorkspaceDeleted.
func (mr *MockPrometheusServiceAPIMockRecorder) WaitUntilWorkspaceDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWorkspaceDeleted", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).WaitUntilWorkspaceDeleted), arg0)
}

// WaitUntilWorkspaceDeletedWithContext mocks base method.
func (m *MockPrometheusServiceAPI) WaitUntilWorkspaceDeletedWithContext(arg0 context.Context, arg1 *prometheusservice.DescribeWorkspaceInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilWorkspaceDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilWorkspaceDeletedWithContext indicates an expected call of WaitUntilWorkspaceDeletedWithContext.
func (mr *MockPrometheusServiceAPIMockRecorder) WaitUntilWorkspaceDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilWorkspaceDeletedWithContext", reflect.TypeOf((*MockPrometheusServiceAPI)(nil).WaitUntilWorkspaceDeletedWithContext), varargs...)
}

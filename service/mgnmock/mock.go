// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mgn/mgniface (interfaces: MgnAPI)

// Package mgnmock is a generated GoMock package.
package mgnmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	mgn "github.com/aws/aws-sdk-go/service/mgn"
	gomock "github.com/golang/mock/gomock"
)

// MockMgnAPI is a mock of MgnAPI interface.
type MockMgnAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMgnAPIMockRecorder
}

// MockMgnAPIMockRecorder is the mock recorder for MockMgnAPI.
type MockMgnAPIMockRecorder struct {
	mock *MockMgnAPI
}

// NewMockMgnAPI creates a new mock instance.
func NewMockMgnAPI(ctrl *gomock.Controller) *MockMgnAPI {
	mock := &MockMgnAPI{ctrl: ctrl}
	mock.recorder = &MockMgnAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMgnAPI) EXPECT() *MockMgnAPIMockRecorder {
	return m.recorder
}

// ChangeServerLifeCycleState mocks base method.
func (m *MockMgnAPI) ChangeServerLifeCycleState(arg0 *mgn.ChangeServerLifeCycleStateInput) (*mgn.ChangeServerLifeCycleStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeServerLifeCycleState", arg0)
	ret0, _ := ret[0].(*mgn.ChangeServerLifeCycleStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeServerLifeCycleState indicates an expected call of ChangeServerLifeCycleState.
func (mr *MockMgnAPIMockRecorder) ChangeServerLifeCycleState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeServerLifeCycleState", reflect.TypeOf((*MockMgnAPI)(nil).ChangeServerLifeCycleState), arg0)
}

// ChangeServerLifeCycleStateRequest mocks base method.
func (m *MockMgnAPI) ChangeServerLifeCycleStateRequest(arg0 *mgn.ChangeServerLifeCycleStateInput) (*request.Request, *mgn.ChangeServerLifeCycleStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeServerLifeCycleStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ChangeServerLifeCycleStateOutput)
	return ret0, ret1
}

// ChangeServerLifeCycleStateRequest indicates an expected call of ChangeServerLifeCycleStateRequest.
func (mr *MockMgnAPIMockRecorder) ChangeServerLifeCycleStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeServerLifeCycleStateRequest", reflect.TypeOf((*MockMgnAPI)(nil).ChangeServerLifeCycleStateRequest), arg0)
}

// ChangeServerLifeCycleStateWithContext mocks base method.
func (m *MockMgnAPI) ChangeServerLifeCycleStateWithContext(arg0 context.Context, arg1 *mgn.ChangeServerLifeCycleStateInput, arg2 ...request.Option) (*mgn.ChangeServerLifeCycleStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeServerLifeCycleStateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ChangeServerLifeCycleStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeServerLifeCycleStateWithContext indicates an expected call of ChangeServerLifeCycleStateWithContext.
func (mr *MockMgnAPIMockRecorder) ChangeServerLifeCycleStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeServerLifeCycleStateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ChangeServerLifeCycleStateWithContext), varargs...)
}

// CreateReplicationConfigurationTemplate mocks base method.
func (m *MockMgnAPI) CreateReplicationConfigurationTemplate(arg0 *mgn.CreateReplicationConfigurationTemplateInput) (*mgn.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplate indicates an expected call of CreateReplicationConfigurationTemplate.
func (mr *MockMgnAPIMockRecorder) CreateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).CreateReplicationConfigurationTemplate), arg0)
}

// CreateReplicationConfigurationTemplateRequest mocks base method.
func (m *MockMgnAPI) CreateReplicationConfigurationTemplateRequest(arg0 *mgn.CreateReplicationConfigurationTemplateInput) (*request.Request, *mgn.CreateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.CreateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateRequest indicates an expected call of CreateReplicationConfigurationTemplateRequest.
func (mr *MockMgnAPIMockRecorder) CreateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).CreateReplicationConfigurationTemplateRequest), arg0)
}

// CreateReplicationConfigurationTemplateWithContext mocks base method.
func (m *MockMgnAPI) CreateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.CreateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*mgn.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateWithContext indicates an expected call of CreateReplicationConfigurationTemplateWithContext.
func (mr *MockMgnAPIMockRecorder) CreateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).CreateReplicationConfigurationTemplateWithContext), varargs...)
}

// DeleteJob mocks base method.
func (m *MockMgnAPI) DeleteJob(arg0 *mgn.DeleteJobInput) (*mgn.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*mgn.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockMgnAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockMgnAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method.
func (m *MockMgnAPI) DeleteJobRequest(arg0 *mgn.DeleteJobInput) (*request.Request, *mgn.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest.
func (mr *MockMgnAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method.
func (m *MockMgnAPI) DeleteJobWithContext(arg0 context.Context, arg1 *mgn.DeleteJobInput, arg2 ...request.Option) (*mgn.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext.
func (mr *MockMgnAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteReplicationConfigurationTemplate mocks base method.
func (m *MockMgnAPI) DeleteReplicationConfigurationTemplate(arg0 *mgn.DeleteReplicationConfigurationTemplateInput) (*mgn.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplate indicates an expected call of DeleteReplicationConfigurationTemplate.
func (mr *MockMgnAPIMockRecorder) DeleteReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).DeleteReplicationConfigurationTemplate), arg0)
}

// DeleteReplicationConfigurationTemplateRequest mocks base method.
func (m *MockMgnAPI) DeleteReplicationConfigurationTemplateRequest(arg0 *mgn.DeleteReplicationConfigurationTemplateInput) (*request.Request, *mgn.DeleteReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateRequest indicates an expected call of DeleteReplicationConfigurationTemplateRequest.
func (mr *MockMgnAPIMockRecorder) DeleteReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteReplicationConfigurationTemplateRequest), arg0)
}

// DeleteReplicationConfigurationTemplateWithContext mocks base method.
func (m *MockMgnAPI) DeleteReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.DeleteReplicationConfigurationTemplateInput, arg2 ...request.Option) (*mgn.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateWithContext indicates an expected call of DeleteReplicationConfigurationTemplateWithContext.
func (mr *MockMgnAPIMockRecorder) DeleteReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteReplicationConfigurationTemplateWithContext), varargs...)
}

// DeleteSourceServer mocks base method.
func (m *MockMgnAPI) DeleteSourceServer(arg0 *mgn.DeleteSourceServerInput) (*mgn.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServer", arg0)
	ret0, _ := ret[0].(*mgn.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServer indicates an expected call of DeleteSourceServer.
func (mr *MockMgnAPIMockRecorder) DeleteSourceServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServer", reflect.TypeOf((*MockMgnAPI)(nil).DeleteSourceServer), arg0)
}

// DeleteSourceServerRequest mocks base method.
func (m *MockMgnAPI) DeleteSourceServerRequest(arg0 *mgn.DeleteSourceServerInput) (*request.Request, *mgn.DeleteSourceServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DeleteSourceServerOutput)
	return ret0, ret1
}

// DeleteSourceServerRequest indicates an expected call of DeleteSourceServerRequest.
func (mr *MockMgnAPIMockRecorder) DeleteSourceServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerRequest", reflect.TypeOf((*MockMgnAPI)(nil).DeleteSourceServerRequest), arg0)
}

// DeleteSourceServerWithContext mocks base method.
func (m *MockMgnAPI) DeleteSourceServerWithContext(arg0 context.Context, arg1 *mgn.DeleteSourceServerInput, arg2 ...request.Option) (*mgn.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSourceServerWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServerWithContext indicates an expected call of DeleteSourceServerWithContext.
func (mr *MockMgnAPIMockRecorder) DeleteSourceServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DeleteSourceServerWithContext), varargs...)
}

// DescribeJobLogItems mocks base method.
func (m *MockMgnAPI) DescribeJobLogItems(arg0 *mgn.DescribeJobLogItemsInput) (*mgn.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItems", arg0)
	ret0, _ := ret[0].(*mgn.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItems indicates an expected call of DescribeJobLogItems.
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItems", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItems), arg0)
}

// DescribeJobLogItemsPages mocks base method.
func (m *MockMgnAPI) DescribeJobLogItemsPages(arg0 *mgn.DescribeJobLogItemsInput, arg1 func(*mgn.DescribeJobLogItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPages indicates an expected call of DescribeJobLogItemsPages.
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsPages), arg0, arg1)
}

// DescribeJobLogItemsPagesWithContext mocks base method.
func (m *MockMgnAPI) DescribeJobLogItemsPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeJobLogItemsInput, arg2 func(*mgn.DescribeJobLogItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPagesWithContext indicates an expected call of DescribeJobLogItemsPagesWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsPagesWithContext), varargs...)
}

// DescribeJobLogItemsRequest mocks base method.
func (m *MockMgnAPI) DescribeJobLogItemsRequest(arg0 *mgn.DescribeJobLogItemsInput) (*request.Request, *mgn.DescribeJobLogItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeJobLogItemsOutput)
	return ret0, ret1
}

// DescribeJobLogItemsRequest indicates an expected call of DescribeJobLogItemsRequest.
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsRequest), arg0)
}

// DescribeJobLogItemsWithContext mocks base method.
func (m *MockMgnAPI) DescribeJobLogItemsWithContext(arg0 context.Context, arg1 *mgn.DescribeJobLogItemsInput, arg2 ...request.Option) (*mgn.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItemsWithContext indicates an expected call of DescribeJobLogItemsWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeJobLogItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobLogItemsWithContext), varargs...)
}

// DescribeJobs mocks base method.
func (m *MockMgnAPI) DescribeJobs(arg0 *mgn.DescribeJobsInput) (*mgn.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobs", arg0)
	ret0, _ := ret[0].(*mgn.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobs indicates an expected call of DescribeJobs.
func (mr *MockMgnAPIMockRecorder) DescribeJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobs", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobs), arg0)
}

// DescribeJobsPages mocks base method.
func (m *MockMgnAPI) DescribeJobsPages(arg0 *mgn.DescribeJobsInput, arg1 func(*mgn.DescribeJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPages indicates an expected call of DescribeJobsPages.
func (mr *MockMgnAPIMockRecorder) DescribeJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsPages), arg0, arg1)
}

// DescribeJobsPagesWithContext mocks base method.
func (m *MockMgnAPI) DescribeJobsPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeJobsInput, arg2 func(*mgn.DescribeJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPagesWithContext indicates an expected call of DescribeJobsPagesWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsPagesWithContext), varargs...)
}

// DescribeJobsRequest mocks base method.
func (m *MockMgnAPI) DescribeJobsRequest(arg0 *mgn.DescribeJobsInput) (*request.Request, *mgn.DescribeJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeJobsOutput)
	return ret0, ret1
}

// DescribeJobsRequest indicates an expected call of DescribeJobsRequest.
func (mr *MockMgnAPIMockRecorder) DescribeJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsRequest), arg0)
}

// DescribeJobsWithContext mocks base method.
func (m *MockMgnAPI) DescribeJobsWithContext(arg0 context.Context, arg1 *mgn.DescribeJobsInput, arg2 ...request.Option) (*mgn.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobsWithContext indicates an expected call of DescribeJobsWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeJobsWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplates mocks base method.
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplates(arg0 *mgn.DescribeReplicationConfigurationTemplatesInput) (*mgn.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplates", arg0)
	ret0, _ := ret[0].(*mgn.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplates indicates an expected call of DescribeReplicationConfigurationTemplates.
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplates", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplates), arg0)
}

// DescribeReplicationConfigurationTemplatesPages mocks base method.
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesPages(arg0 *mgn.DescribeReplicationConfigurationTemplatesInput, arg1 func(*mgn.DescribeReplicationConfigurationTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPages indicates an expected call of DescribeReplicationConfigurationTemplatesPages.
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesPages), arg0, arg1)
}

// DescribeReplicationConfigurationTemplatesPagesWithContext mocks base method.
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeReplicationConfigurationTemplatesInput, arg2 func(*mgn.DescribeReplicationConfigurationTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPagesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesPagesWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesPagesWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplatesRequest mocks base method.
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesRequest(arg0 *mgn.DescribeReplicationConfigurationTemplatesInput) (*request.Request, *mgn.DescribeReplicationConfigurationTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeReplicationConfigurationTemplatesOutput)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesRequest indicates an expected call of DescribeReplicationConfigurationTemplatesRequest.
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesRequest), arg0)
}

// DescribeReplicationConfigurationTemplatesWithContext mocks base method.
func (m *MockMgnAPI) DescribeReplicationConfigurationTemplatesWithContext(arg0 context.Context, arg1 *mgn.DescribeReplicationConfigurationTemplatesInput, arg2 ...request.Option) (*mgn.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeReplicationConfigurationTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeReplicationConfigurationTemplatesWithContext), varargs...)
}

// DescribeSourceServers mocks base method.
func (m *MockMgnAPI) DescribeSourceServers(arg0 *mgn.DescribeSourceServersInput) (*mgn.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServers", arg0)
	ret0, _ := ret[0].(*mgn.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServers indicates an expected call of DescribeSourceServers.
func (mr *MockMgnAPIMockRecorder) DescribeSourceServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServers", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServers), arg0)
}

// DescribeSourceServersPages mocks base method.
func (m *MockMgnAPI) DescribeSourceServersPages(arg0 *mgn.DescribeSourceServersInput, arg1 func(*mgn.DescribeSourceServersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPages indicates an expected call of DescribeSourceServersPages.
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPages", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersPages), arg0, arg1)
}

// DescribeSourceServersPagesWithContext mocks base method.
func (m *MockMgnAPI) DescribeSourceServersPagesWithContext(arg0 context.Context, arg1 *mgn.DescribeSourceServersInput, arg2 func(*mgn.DescribeSourceServersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPagesWithContext indicates an expected call of DescribeSourceServersPagesWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPagesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersPagesWithContext), varargs...)
}

// DescribeSourceServersRequest mocks base method.
func (m *MockMgnAPI) DescribeSourceServersRequest(arg0 *mgn.DescribeSourceServersInput) (*request.Request, *mgn.DescribeSourceServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DescribeSourceServersOutput)
	return ret0, ret1
}

// DescribeSourceServersRequest indicates an expected call of DescribeSourceServersRequest.
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersRequest", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersRequest), arg0)
}

// DescribeSourceServersWithContext mocks base method.
func (m *MockMgnAPI) DescribeSourceServersWithContext(arg0 context.Context, arg1 *mgn.DescribeSourceServersInput, arg2 ...request.Option) (*mgn.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServersWithContext indicates an expected call of DescribeSourceServersWithContext.
func (mr *MockMgnAPIMockRecorder) DescribeSourceServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DescribeSourceServersWithContext), varargs...)
}

// DisconnectFromService mocks base method.
func (m *MockMgnAPI) DisconnectFromService(arg0 *mgn.DisconnectFromServiceInput) (*mgn.DisconnectFromServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectFromService", arg0)
	ret0, _ := ret[0].(*mgn.DisconnectFromServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectFromService indicates an expected call of DisconnectFromService.
func (mr *MockMgnAPIMockRecorder) DisconnectFromService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectFromService", reflect.TypeOf((*MockMgnAPI)(nil).DisconnectFromService), arg0)
}

// DisconnectFromServiceRequest mocks base method.
func (m *MockMgnAPI) DisconnectFromServiceRequest(arg0 *mgn.DisconnectFromServiceInput) (*request.Request, *mgn.DisconnectFromServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectFromServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.DisconnectFromServiceOutput)
	return ret0, ret1
}

// DisconnectFromServiceRequest indicates an expected call of DisconnectFromServiceRequest.
func (mr *MockMgnAPIMockRecorder) DisconnectFromServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectFromServiceRequest", reflect.TypeOf((*MockMgnAPI)(nil).DisconnectFromServiceRequest), arg0)
}

// DisconnectFromServiceWithContext mocks base method.
func (m *MockMgnAPI) DisconnectFromServiceWithContext(arg0 context.Context, arg1 *mgn.DisconnectFromServiceInput, arg2 ...request.Option) (*mgn.DisconnectFromServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectFromServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.DisconnectFromServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectFromServiceWithContext indicates an expected call of DisconnectFromServiceWithContext.
func (mr *MockMgnAPIMockRecorder) DisconnectFromServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectFromServiceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).DisconnectFromServiceWithContext), varargs...)
}

// FinalizeCutover mocks base method.
func (m *MockMgnAPI) FinalizeCutover(arg0 *mgn.FinalizeCutoverInput) (*mgn.FinalizeCutoverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCutover", arg0)
	ret0, _ := ret[0].(*mgn.FinalizeCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCutover indicates an expected call of FinalizeCutover.
func (mr *MockMgnAPIMockRecorder) FinalizeCutover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCutover", reflect.TypeOf((*MockMgnAPI)(nil).FinalizeCutover), arg0)
}

// FinalizeCutoverRequest mocks base method.
func (m *MockMgnAPI) FinalizeCutoverRequest(arg0 *mgn.FinalizeCutoverInput) (*request.Request, *mgn.FinalizeCutoverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCutoverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.FinalizeCutoverOutput)
	return ret0, ret1
}

// FinalizeCutoverRequest indicates an expected call of FinalizeCutoverRequest.
func (mr *MockMgnAPIMockRecorder) FinalizeCutoverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCutoverRequest", reflect.TypeOf((*MockMgnAPI)(nil).FinalizeCutoverRequest), arg0)
}

// FinalizeCutoverWithContext mocks base method.
func (m *MockMgnAPI) FinalizeCutoverWithContext(arg0 context.Context, arg1 *mgn.FinalizeCutoverInput, arg2 ...request.Option) (*mgn.FinalizeCutoverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FinalizeCutoverWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.FinalizeCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCutoverWithContext indicates an expected call of FinalizeCutoverWithContext.
func (mr *MockMgnAPIMockRecorder) FinalizeCutoverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCutoverWithContext", reflect.TypeOf((*MockMgnAPI)(nil).FinalizeCutoverWithContext), varargs...)
}

// GetLaunchConfiguration mocks base method.
func (m *MockMgnAPI) GetLaunchConfiguration(arg0 *mgn.GetLaunchConfigurationInput) (*mgn.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfiguration indicates an expected call of GetLaunchConfiguration.
func (mr *MockMgnAPIMockRecorder) GetLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).GetLaunchConfiguration), arg0)
}

// GetLaunchConfigurationRequest mocks base method.
func (m *MockMgnAPI) GetLaunchConfigurationRequest(arg0 *mgn.GetLaunchConfigurationInput) (*request.Request, *mgn.GetLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.GetLaunchConfigurationOutput)
	return ret0, ret1
}

// GetLaunchConfigurationRequest indicates an expected call of GetLaunchConfigurationRequest.
func (mr *MockMgnAPIMockRecorder) GetLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).GetLaunchConfigurationRequest), arg0)
}

// GetLaunchConfigurationWithContext mocks base method.
func (m *MockMgnAPI) GetLaunchConfigurationWithContext(arg0 context.Context, arg1 *mgn.GetLaunchConfigurationInput, arg2 ...request.Option) (*mgn.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfigurationWithContext indicates an expected call of GetLaunchConfigurationWithContext.
func (mr *MockMgnAPIMockRecorder) GetLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).GetLaunchConfigurationWithContext), varargs...)
}

// GetReplicationConfiguration mocks base method.
func (m *MockMgnAPI) GetReplicationConfiguration(arg0 *mgn.GetReplicationConfigurationInput) (*mgn.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfiguration indicates an expected call of GetReplicationConfiguration.
func (mr *MockMgnAPIMockRecorder) GetReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).GetReplicationConfiguration), arg0)
}

// GetReplicationConfigurationRequest mocks base method.
func (m *MockMgnAPI) GetReplicationConfigurationRequest(arg0 *mgn.GetReplicationConfigurationInput) (*request.Request, *mgn.GetReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.GetReplicationConfigurationOutput)
	return ret0, ret1
}

// GetReplicationConfigurationRequest indicates an expected call of GetReplicationConfigurationRequest.
func (mr *MockMgnAPIMockRecorder) GetReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).GetReplicationConfigurationRequest), arg0)
}

// GetReplicationConfigurationWithContext mocks base method.
func (m *MockMgnAPI) GetReplicationConfigurationWithContext(arg0 context.Context, arg1 *mgn.GetReplicationConfigurationInput, arg2 ...request.Option) (*mgn.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfigurationWithContext indicates an expected call of GetReplicationConfigurationWithContext.
func (mr *MockMgnAPIMockRecorder) GetReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).GetReplicationConfigurationWithContext), varargs...)
}

// InitializeService mocks base method.
func (m *MockMgnAPI) InitializeService(arg0 *mgn.InitializeServiceInput) (*mgn.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeService", arg0)
	ret0, _ := ret[0].(*mgn.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeService indicates an expected call of InitializeService.
func (mr *MockMgnAPIMockRecorder) InitializeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeService", reflect.TypeOf((*MockMgnAPI)(nil).InitializeService), arg0)
}

// InitializeServiceRequest mocks base method.
func (m *MockMgnAPI) InitializeServiceRequest(arg0 *mgn.InitializeServiceInput) (*request.Request, *mgn.InitializeServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.InitializeServiceOutput)
	return ret0, ret1
}

// InitializeServiceRequest indicates an expected call of InitializeServiceRequest.
func (mr *MockMgnAPIMockRecorder) InitializeServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceRequest", reflect.TypeOf((*MockMgnAPI)(nil).InitializeServiceRequest), arg0)
}

// InitializeServiceWithContext mocks base method.
func (m *MockMgnAPI) InitializeServiceWithContext(arg0 context.Context, arg1 *mgn.InitializeServiceInput, arg2 ...request.Option) (*mgn.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeServiceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeServiceWithContext indicates an expected call of InitializeServiceWithContext.
func (mr *MockMgnAPIMockRecorder) InitializeServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).InitializeServiceWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockMgnAPI) ListTagsForResource(arg0 *mgn.ListTagsForResourceInput) (*mgn.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mgn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockMgnAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMgnAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockMgnAPI) ListTagsForResourceRequest(arg0 *mgn.ListTagsForResourceInput) (*request.Request, *mgn.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockMgnAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMgnAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockMgnAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mgn.ListTagsForResourceInput, arg2 ...request.Option) (*mgn.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockMgnAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// MarkAsArchived mocks base method.
func (m *MockMgnAPI) MarkAsArchived(arg0 *mgn.MarkAsArchivedInput) (*mgn.MarkAsArchivedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsArchived", arg0)
	ret0, _ := ret[0].(*mgn.MarkAsArchivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsArchived indicates an expected call of MarkAsArchived.
func (mr *MockMgnAPIMockRecorder) MarkAsArchived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsArchived", reflect.TypeOf((*MockMgnAPI)(nil).MarkAsArchived), arg0)
}

// MarkAsArchivedRequest mocks base method.
func (m *MockMgnAPI) MarkAsArchivedRequest(arg0 *mgn.MarkAsArchivedInput) (*request.Request, *mgn.MarkAsArchivedOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsArchivedRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.MarkAsArchivedOutput)
	return ret0, ret1
}

// MarkAsArchivedRequest indicates an expected call of MarkAsArchivedRequest.
func (mr *MockMgnAPIMockRecorder) MarkAsArchivedRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsArchivedRequest", reflect.TypeOf((*MockMgnAPI)(nil).MarkAsArchivedRequest), arg0)
}

// MarkAsArchivedWithContext mocks base method.
func (m *MockMgnAPI) MarkAsArchivedWithContext(arg0 context.Context, arg1 *mgn.MarkAsArchivedInput, arg2 ...request.Option) (*mgn.MarkAsArchivedOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkAsArchivedWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.MarkAsArchivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsArchivedWithContext indicates an expected call of MarkAsArchivedWithContext.
func (mr *MockMgnAPIMockRecorder) MarkAsArchivedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsArchivedWithContext", reflect.TypeOf((*MockMgnAPI)(nil).MarkAsArchivedWithContext), varargs...)
}

// RetryDataReplication mocks base method.
func (m *MockMgnAPI) RetryDataReplication(arg0 *mgn.RetryDataReplicationInput) (*mgn.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplication", arg0)
	ret0, _ := ret[0].(*mgn.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplication indicates an expected call of RetryDataReplication.
func (mr *MockMgnAPIMockRecorder) RetryDataReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplication", reflect.TypeOf((*MockMgnAPI)(nil).RetryDataReplication), arg0)
}

// RetryDataReplicationRequest mocks base method.
func (m *MockMgnAPI) RetryDataReplicationRequest(arg0 *mgn.RetryDataReplicationInput) (*request.Request, *mgn.RetryDataReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.RetryDataReplicationOutput)
	return ret0, ret1
}

// RetryDataReplicationRequest indicates an expected call of RetryDataReplicationRequest.
func (mr *MockMgnAPIMockRecorder) RetryDataReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationRequest", reflect.TypeOf((*MockMgnAPI)(nil).RetryDataReplicationRequest), arg0)
}

// RetryDataReplicationWithContext mocks base method.
func (m *MockMgnAPI) RetryDataReplicationWithContext(arg0 context.Context, arg1 *mgn.RetryDataReplicationInput, arg2 ...request.Option) (*mgn.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryDataReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplicationWithContext indicates an expected call of RetryDataReplicationWithContext.
func (mr *MockMgnAPIMockRecorder) RetryDataReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).RetryDataReplicationWithContext), varargs...)
}

// StartCutover mocks base method.
func (m *MockMgnAPI) StartCutover(arg0 *mgn.StartCutoverInput) (*mgn.StartCutoverOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCutover", arg0)
	ret0, _ := ret[0].(*mgn.StartCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCutover indicates an expected call of StartCutover.
func (mr *MockMgnAPIMockRecorder) StartCutover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCutover", reflect.TypeOf((*MockMgnAPI)(nil).StartCutover), arg0)
}

// StartCutoverRequest mocks base method.
func (m *MockMgnAPI) StartCutoverRequest(arg0 *mgn.StartCutoverInput) (*request.Request, *mgn.StartCutoverOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCutoverRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.StartCutoverOutput)
	return ret0, ret1
}

// StartCutoverRequest indicates an expected call of StartCutoverRequest.
func (mr *MockMgnAPIMockRecorder) StartCutoverRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCutoverRequest", reflect.TypeOf((*MockMgnAPI)(nil).StartCutoverRequest), arg0)
}

// StartCutoverWithContext mocks base method.
func (m *MockMgnAPI) StartCutoverWithContext(arg0 context.Context, arg1 *mgn.StartCutoverInput, arg2 ...request.Option) (*mgn.StartCutoverOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCutoverWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.StartCutoverOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCutoverWithContext indicates an expected call of StartCutoverWithContext.
func (mr *MockMgnAPIMockRecorder) StartCutoverWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCutoverWithContext", reflect.TypeOf((*MockMgnAPI)(nil).StartCutoverWithContext), varargs...)
}

// StartTest mocks base method.
func (m *MockMgnAPI) StartTest(arg0 *mgn.StartTestInput) (*mgn.StartTestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTest", arg0)
	ret0, _ := ret[0].(*mgn.StartTestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTest indicates an expected call of StartTest.
func (mr *MockMgnAPIMockRecorder) StartTest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTest", reflect.TypeOf((*MockMgnAPI)(nil).StartTest), arg0)
}

// StartTestRequest mocks base method.
func (m *MockMgnAPI) StartTestRequest(arg0 *mgn.StartTestInput) (*request.Request, *mgn.StartTestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.StartTestOutput)
	return ret0, ret1
}

// StartTestRequest indicates an expected call of StartTestRequest.
func (mr *MockMgnAPIMockRecorder) StartTestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTestRequest", reflect.TypeOf((*MockMgnAPI)(nil).StartTestRequest), arg0)
}

// StartTestWithContext mocks base method.
func (m *MockMgnAPI) StartTestWithContext(arg0 context.Context, arg1 *mgn.StartTestInput, arg2 ...request.Option) (*mgn.StartTestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTestWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.StartTestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTestWithContext indicates an expected call of StartTestWithContext.
func (mr *MockMgnAPIMockRecorder) StartTestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTestWithContext", reflect.TypeOf((*MockMgnAPI)(nil).StartTestWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockMgnAPI) TagResource(arg0 *mgn.TagResourceInput) (*mgn.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mgn.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockMgnAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMgnAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockMgnAPI) TagResourceRequest(arg0 *mgn.TagResourceInput) (*request.Request, *mgn.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockMgnAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMgnAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockMgnAPI) TagResourceWithContext(arg0 context.Context, arg1 *mgn.TagResourceInput, arg2 ...request.Option) (*mgn.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockMgnAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).TagResourceWithContext), varargs...)
}

// TerminateTargetInstances mocks base method.
func (m *MockMgnAPI) TerminateTargetInstances(arg0 *mgn.TerminateTargetInstancesInput) (*mgn.TerminateTargetInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateTargetInstances", arg0)
	ret0, _ := ret[0].(*mgn.TerminateTargetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateTargetInstances indicates an expected call of TerminateTargetInstances.
func (mr *MockMgnAPIMockRecorder) TerminateTargetInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateTargetInstances", reflect.TypeOf((*MockMgnAPI)(nil).TerminateTargetInstances), arg0)
}

// TerminateTargetInstancesRequest mocks base method.
func (m *MockMgnAPI) TerminateTargetInstancesRequest(arg0 *mgn.TerminateTargetInstancesInput) (*request.Request, *mgn.TerminateTargetInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateTargetInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.TerminateTargetInstancesOutput)
	return ret0, ret1
}

// TerminateTargetInstancesRequest indicates an expected call of TerminateTargetInstancesRequest.
func (mr *MockMgnAPIMockRecorder) TerminateTargetInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateTargetInstancesRequest", reflect.TypeOf((*MockMgnAPI)(nil).TerminateTargetInstancesRequest), arg0)
}

// TerminateTargetInstancesWithContext mocks base method.
func (m *MockMgnAPI) TerminateTargetInstancesWithContext(arg0 context.Context, arg1 *mgn.TerminateTargetInstancesInput, arg2 ...request.Option) (*mgn.TerminateTargetInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateTargetInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.TerminateTargetInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateTargetInstancesWithContext indicates an expected call of TerminateTargetInstancesWithContext.
func (mr *MockMgnAPIMockRecorder) TerminateTargetInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateTargetInstancesWithContext", reflect.TypeOf((*MockMgnAPI)(nil).TerminateTargetInstancesWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockMgnAPI) UntagResource(arg0 *mgn.UntagResourceInput) (*mgn.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mgn.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockMgnAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMgnAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockMgnAPI) UntagResourceRequest(arg0 *mgn.UntagResourceInput) (*request.Request, *mgn.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockMgnAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMgnAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockMgnAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mgn.UntagResourceInput, arg2 ...request.Option) (*mgn.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockMgnAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateLaunchConfiguration mocks base method.
func (m *MockMgnAPI) UpdateLaunchConfiguration(arg0 *mgn.UpdateLaunchConfigurationInput) (*mgn.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfiguration indicates an expected call of UpdateLaunchConfiguration.
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfiguration), arg0)
}

// UpdateLaunchConfigurationRequest mocks base method.
func (m *MockMgnAPI) UpdateLaunchConfigurationRequest(arg0 *mgn.UpdateLaunchConfigurationInput) (*request.Request, *mgn.UpdateLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateLaunchConfigurationOutput)
	return ret0, ret1
}

// UpdateLaunchConfigurationRequest indicates an expected call of UpdateLaunchConfigurationRequest.
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfigurationRequest), arg0)
}

// UpdateLaunchConfigurationWithContext mocks base method.
func (m *MockMgnAPI) UpdateLaunchConfigurationWithContext(arg0 context.Context, arg1 *mgn.UpdateLaunchConfigurationInput, arg2 ...request.Option) (*mgn.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationWithContext indicates an expected call of UpdateLaunchConfigurationWithContext.
func (mr *MockMgnAPIMockRecorder) UpdateLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateLaunchConfigurationWithContext), varargs...)
}

// UpdateReplicationConfiguration mocks base method.
func (m *MockMgnAPI) UpdateReplicationConfiguration(arg0 *mgn.UpdateReplicationConfigurationInput) (*mgn.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfiguration indicates an expected call of UpdateReplicationConfiguration.
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfiguration", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfiguration), arg0)
}

// UpdateReplicationConfigurationRequest mocks base method.
func (m *MockMgnAPI) UpdateReplicationConfigurationRequest(arg0 *mgn.UpdateReplicationConfigurationInput) (*request.Request, *mgn.UpdateReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateReplicationConfigurationOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationRequest indicates an expected call of UpdateReplicationConfigurationRequest.
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationRequest), arg0)
}

// UpdateReplicationConfigurationTemplate mocks base method.
func (m *MockMgnAPI) UpdateReplicationConfigurationTemplate(arg0 *mgn.UpdateReplicationConfigurationTemplateInput) (*mgn.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplate indicates an expected call of UpdateReplicationConfigurationTemplate.
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplate", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationTemplate), arg0)
}

// UpdateReplicationConfigurationTemplateRequest mocks base method.
func (m *MockMgnAPI) UpdateReplicationConfigurationTemplateRequest(arg0 *mgn.UpdateReplicationConfigurationTemplateInput) (*request.Request, *mgn.UpdateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mgn.UpdateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateRequest indicates an expected call of UpdateReplicationConfigurationTemplateRequest.
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationTemplateRequest), arg0)
}

// UpdateReplicationConfigurationTemplateWithContext mocks base method.
func (m *MockMgnAPI) UpdateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *mgn.UpdateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*mgn.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateWithContext indicates an expected call of UpdateReplicationConfigurationTemplateWithContext.
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationTemplateWithContext), varargs...)
}

// UpdateReplicationConfigurationWithContext mocks base method.
func (m *MockMgnAPI) UpdateReplicationConfigurationWithContext(arg0 context.Context, arg1 *mgn.UpdateReplicationConfigurationInput, arg2 ...request.Option) (*mgn.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*mgn.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationWithContext indicates an expected call of UpdateReplicationConfigurationWithContext.
func (mr *MockMgnAPIMockRecorder) UpdateReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationWithContext", reflect.TypeOf((*MockMgnAPI)(nil).UpdateReplicationConfigurationWithContext), varargs...)
}

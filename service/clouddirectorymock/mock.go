// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/clouddirectory/clouddirectoryiface (interfaces: CloudDirectoryAPI)

// Package clouddirectorymock is a generated GoMock package.
package clouddirectorymock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	clouddirectory "github.com/aws/aws-sdk-go/service/clouddirectory"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudDirectoryAPI is a mock of CloudDirectoryAPI interface
type MockCloudDirectoryAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudDirectoryAPIMockRecorder
}

// MockCloudDirectoryAPIMockRecorder is the mock recorder for MockCloudDirectoryAPI
type MockCloudDirectoryAPIMockRecorder struct {
	mock *MockCloudDirectoryAPI
}

// NewMockCloudDirectoryAPI creates a new mock instance
func NewMockCloudDirectoryAPI(ctrl *gomock.Controller) *MockCloudDirectoryAPI {
	mock := &MockCloudDirectoryAPI{ctrl: ctrl}
	mock.recorder = &MockCloudDirectoryAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudDirectoryAPI) EXPECT() *MockCloudDirectoryAPIMockRecorder {
	return m.recorder
}

// AddFacetToObject mocks base method
func (m *MockCloudDirectoryAPI) AddFacetToObject(arg0 *clouddirectory.AddFacetToObjectInput) (*clouddirectory.AddFacetToObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFacetToObject", arg0)
	ret0, _ := ret[0].(*clouddirectory.AddFacetToObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFacetToObject indicates an expected call of AddFacetToObject
func (mr *MockCloudDirectoryAPIMockRecorder) AddFacetToObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFacetToObject", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AddFacetToObject), arg0)
}

// AddFacetToObjectRequest mocks base method
func (m *MockCloudDirectoryAPI) AddFacetToObjectRequest(arg0 *clouddirectory.AddFacetToObjectInput) (*request.Request, *clouddirectory.AddFacetToObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFacetToObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.AddFacetToObjectOutput)
	return ret0, ret1
}

// AddFacetToObjectRequest indicates an expected call of AddFacetToObjectRequest
func (mr *MockCloudDirectoryAPIMockRecorder) AddFacetToObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFacetToObjectRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AddFacetToObjectRequest), arg0)
}

// AddFacetToObjectWithContext mocks base method
func (m *MockCloudDirectoryAPI) AddFacetToObjectWithContext(arg0 context.Context, arg1 *clouddirectory.AddFacetToObjectInput, arg2 ...request.Option) (*clouddirectory.AddFacetToObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFacetToObjectWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.AddFacetToObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFacetToObjectWithContext indicates an expected call of AddFacetToObjectWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) AddFacetToObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFacetToObjectWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AddFacetToObjectWithContext), varargs...)
}

// ApplySchema mocks base method
func (m *MockCloudDirectoryAPI) ApplySchema(arg0 *clouddirectory.ApplySchemaInput) (*clouddirectory.ApplySchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySchema", arg0)
	ret0, _ := ret[0].(*clouddirectory.ApplySchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplySchema indicates an expected call of ApplySchema
func (mr *MockCloudDirectoryAPIMockRecorder) ApplySchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySchema", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ApplySchema), arg0)
}

// ApplySchemaRequest mocks base method
func (m *MockCloudDirectoryAPI) ApplySchemaRequest(arg0 *clouddirectory.ApplySchemaInput) (*request.Request, *clouddirectory.ApplySchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ApplySchemaOutput)
	return ret0, ret1
}

// ApplySchemaRequest indicates an expected call of ApplySchemaRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ApplySchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySchemaRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ApplySchemaRequest), arg0)
}

// ApplySchemaWithContext mocks base method
func (m *MockCloudDirectoryAPI) ApplySchemaWithContext(arg0 context.Context, arg1 *clouddirectory.ApplySchemaInput, arg2 ...request.Option) (*clouddirectory.ApplySchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplySchemaWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ApplySchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplySchemaWithContext indicates an expected call of ApplySchemaWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ApplySchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySchemaWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ApplySchemaWithContext), varargs...)
}

// AttachObject mocks base method
func (m *MockCloudDirectoryAPI) AttachObject(arg0 *clouddirectory.AttachObjectInput) (*clouddirectory.AttachObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachObject", arg0)
	ret0, _ := ret[0].(*clouddirectory.AttachObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachObject indicates an expected call of AttachObject
func (mr *MockCloudDirectoryAPIMockRecorder) AttachObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachObject", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachObject), arg0)
}

// AttachObjectRequest mocks base method
func (m *MockCloudDirectoryAPI) AttachObjectRequest(arg0 *clouddirectory.AttachObjectInput) (*request.Request, *clouddirectory.AttachObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.AttachObjectOutput)
	return ret0, ret1
}

// AttachObjectRequest indicates an expected call of AttachObjectRequest
func (mr *MockCloudDirectoryAPIMockRecorder) AttachObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachObjectRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachObjectRequest), arg0)
}

// AttachObjectWithContext mocks base method
func (m *MockCloudDirectoryAPI) AttachObjectWithContext(arg0 context.Context, arg1 *clouddirectory.AttachObjectInput, arg2 ...request.Option) (*clouddirectory.AttachObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachObjectWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.AttachObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachObjectWithContext indicates an expected call of AttachObjectWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) AttachObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachObjectWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachObjectWithContext), varargs...)
}

// AttachPolicy mocks base method
func (m *MockCloudDirectoryAPI) AttachPolicy(arg0 *clouddirectory.AttachPolicyInput) (*clouddirectory.AttachPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPolicy", arg0)
	ret0, _ := ret[0].(*clouddirectory.AttachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPolicy indicates an expected call of AttachPolicy
func (mr *MockCloudDirectoryAPIMockRecorder) AttachPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicy", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachPolicy), arg0)
}

// AttachPolicyRequest mocks base method
func (m *MockCloudDirectoryAPI) AttachPolicyRequest(arg0 *clouddirectory.AttachPolicyInput) (*request.Request, *clouddirectory.AttachPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.AttachPolicyOutput)
	return ret0, ret1
}

// AttachPolicyRequest indicates an expected call of AttachPolicyRequest
func (mr *MockCloudDirectoryAPIMockRecorder) AttachPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicyRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachPolicyRequest), arg0)
}

// AttachPolicyWithContext mocks base method
func (m *MockCloudDirectoryAPI) AttachPolicyWithContext(arg0 context.Context, arg1 *clouddirectory.AttachPolicyInput, arg2 ...request.Option) (*clouddirectory.AttachPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.AttachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPolicyWithContext indicates an expected call of AttachPolicyWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) AttachPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicyWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachPolicyWithContext), varargs...)
}

// AttachToIndex mocks base method
func (m *MockCloudDirectoryAPI) AttachToIndex(arg0 *clouddirectory.AttachToIndexInput) (*clouddirectory.AttachToIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachToIndex", arg0)
	ret0, _ := ret[0].(*clouddirectory.AttachToIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToIndex indicates an expected call of AttachToIndex
func (mr *MockCloudDirectoryAPIMockRecorder) AttachToIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToIndex", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachToIndex), arg0)
}

// AttachToIndexRequest mocks base method
func (m *MockCloudDirectoryAPI) AttachToIndexRequest(arg0 *clouddirectory.AttachToIndexInput) (*request.Request, *clouddirectory.AttachToIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachToIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.AttachToIndexOutput)
	return ret0, ret1
}

// AttachToIndexRequest indicates an expected call of AttachToIndexRequest
func (mr *MockCloudDirectoryAPIMockRecorder) AttachToIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToIndexRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachToIndexRequest), arg0)
}

// AttachToIndexWithContext mocks base method
func (m *MockCloudDirectoryAPI) AttachToIndexWithContext(arg0 context.Context, arg1 *clouddirectory.AttachToIndexInput, arg2 ...request.Option) (*clouddirectory.AttachToIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachToIndexWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.AttachToIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToIndexWithContext indicates an expected call of AttachToIndexWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) AttachToIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToIndexWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachToIndexWithContext), varargs...)
}

// AttachTypedLink mocks base method
func (m *MockCloudDirectoryAPI) AttachTypedLink(arg0 *clouddirectory.AttachTypedLinkInput) (*clouddirectory.AttachTypedLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTypedLink", arg0)
	ret0, _ := ret[0].(*clouddirectory.AttachTypedLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTypedLink indicates an expected call of AttachTypedLink
func (mr *MockCloudDirectoryAPIMockRecorder) AttachTypedLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTypedLink", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachTypedLink), arg0)
}

// AttachTypedLinkRequest mocks base method
func (m *MockCloudDirectoryAPI) AttachTypedLinkRequest(arg0 *clouddirectory.AttachTypedLinkInput) (*request.Request, *clouddirectory.AttachTypedLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTypedLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.AttachTypedLinkOutput)
	return ret0, ret1
}

// AttachTypedLinkRequest indicates an expected call of AttachTypedLinkRequest
func (mr *MockCloudDirectoryAPIMockRecorder) AttachTypedLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTypedLinkRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachTypedLinkRequest), arg0)
}

// AttachTypedLinkWithContext mocks base method
func (m *MockCloudDirectoryAPI) AttachTypedLinkWithContext(arg0 context.Context, arg1 *clouddirectory.AttachTypedLinkInput, arg2 ...request.Option) (*clouddirectory.AttachTypedLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachTypedLinkWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.AttachTypedLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTypedLinkWithContext indicates an expected call of AttachTypedLinkWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) AttachTypedLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTypedLinkWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).AttachTypedLinkWithContext), varargs...)
}

// BatchRead mocks base method
func (m *MockCloudDirectoryAPI) BatchRead(arg0 *clouddirectory.BatchReadInput) (*clouddirectory.BatchReadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRead", arg0)
	ret0, _ := ret[0].(*clouddirectory.BatchReadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRead indicates an expected call of BatchRead
func (mr *MockCloudDirectoryAPIMockRecorder) BatchRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRead", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).BatchRead), arg0)
}

// BatchReadRequest mocks base method
func (m *MockCloudDirectoryAPI) BatchReadRequest(arg0 *clouddirectory.BatchReadInput) (*request.Request, *clouddirectory.BatchReadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchReadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.BatchReadOutput)
	return ret0, ret1
}

// BatchReadRequest indicates an expected call of BatchReadRequest
func (mr *MockCloudDirectoryAPIMockRecorder) BatchReadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchReadRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).BatchReadRequest), arg0)
}

// BatchReadWithContext mocks base method
func (m *MockCloudDirectoryAPI) BatchReadWithContext(arg0 context.Context, arg1 *clouddirectory.BatchReadInput, arg2 ...request.Option) (*clouddirectory.BatchReadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchReadWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.BatchReadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchReadWithContext indicates an expected call of BatchReadWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) BatchReadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchReadWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).BatchReadWithContext), varargs...)
}

// BatchWrite mocks base method
func (m *MockCloudDirectoryAPI) BatchWrite(arg0 *clouddirectory.BatchWriteInput) (*clouddirectory.BatchWriteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchWrite", arg0)
	ret0, _ := ret[0].(*clouddirectory.BatchWriteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchWrite indicates an expected call of BatchWrite
func (mr *MockCloudDirectoryAPIMockRecorder) BatchWrite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWrite", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).BatchWrite), arg0)
}

// BatchWriteRequest mocks base method
func (m *MockCloudDirectoryAPI) BatchWriteRequest(arg0 *clouddirectory.BatchWriteInput) (*request.Request, *clouddirectory.BatchWriteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchWriteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.BatchWriteOutput)
	return ret0, ret1
}

// BatchWriteRequest indicates an expected call of BatchWriteRequest
func (mr *MockCloudDirectoryAPIMockRecorder) BatchWriteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).BatchWriteRequest), arg0)
}

// BatchWriteWithContext mocks base method
func (m *MockCloudDirectoryAPI) BatchWriteWithContext(arg0 context.Context, arg1 *clouddirectory.BatchWriteInput, arg2 ...request.Option) (*clouddirectory.BatchWriteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchWriteWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.BatchWriteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchWriteWithContext indicates an expected call of BatchWriteWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) BatchWriteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).BatchWriteWithContext), varargs...)
}

// CreateDirectory mocks base method
func (m *MockCloudDirectoryAPI) CreateDirectory(arg0 *clouddirectory.CreateDirectoryInput) (*clouddirectory.CreateDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", arg0)
	ret0, _ := ret[0].(*clouddirectory.CreateDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectory indicates an expected call of CreateDirectory
func (mr *MockCloudDirectoryAPIMockRecorder) CreateDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateDirectory), arg0)
}

// CreateDirectoryRequest mocks base method
func (m *MockCloudDirectoryAPI) CreateDirectoryRequest(arg0 *clouddirectory.CreateDirectoryInput) (*request.Request, *clouddirectory.CreateDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.CreateDirectoryOutput)
	return ret0, ret1
}

// CreateDirectoryRequest indicates an expected call of CreateDirectoryRequest
func (mr *MockCloudDirectoryAPIMockRecorder) CreateDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateDirectoryRequest), arg0)
}

// CreateDirectoryWithContext mocks base method
func (m *MockCloudDirectoryAPI) CreateDirectoryWithContext(arg0 context.Context, arg1 *clouddirectory.CreateDirectoryInput, arg2 ...request.Option) (*clouddirectory.CreateDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.CreateDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectoryWithContext indicates an expected call of CreateDirectoryWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) CreateDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateDirectoryWithContext), varargs...)
}

// CreateFacet mocks base method
func (m *MockCloudDirectoryAPI) CreateFacet(arg0 *clouddirectory.CreateFacetInput) (*clouddirectory.CreateFacetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFacet", arg0)
	ret0, _ := ret[0].(*clouddirectory.CreateFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFacet indicates an expected call of CreateFacet
func (mr *MockCloudDirectoryAPIMockRecorder) CreateFacet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFacet", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateFacet), arg0)
}

// CreateFacetRequest mocks base method
func (m *MockCloudDirectoryAPI) CreateFacetRequest(arg0 *clouddirectory.CreateFacetInput) (*request.Request, *clouddirectory.CreateFacetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFacetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.CreateFacetOutput)
	return ret0, ret1
}

// CreateFacetRequest indicates an expected call of CreateFacetRequest
func (mr *MockCloudDirectoryAPIMockRecorder) CreateFacetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFacetRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateFacetRequest), arg0)
}

// CreateFacetWithContext mocks base method
func (m *MockCloudDirectoryAPI) CreateFacetWithContext(arg0 context.Context, arg1 *clouddirectory.CreateFacetInput, arg2 ...request.Option) (*clouddirectory.CreateFacetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFacetWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.CreateFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFacetWithContext indicates an expected call of CreateFacetWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) CreateFacetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFacetWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateFacetWithContext), varargs...)
}

// CreateIndex mocks base method
func (m *MockCloudDirectoryAPI) CreateIndex(arg0 *clouddirectory.CreateIndexInput) (*clouddirectory.CreateIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0)
	ret0, _ := ret[0].(*clouddirectory.CreateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockCloudDirectoryAPIMockRecorder) CreateIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateIndex), arg0)
}

// CreateIndexRequest mocks base method
func (m *MockCloudDirectoryAPI) CreateIndexRequest(arg0 *clouddirectory.CreateIndexInput) (*request.Request, *clouddirectory.CreateIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.CreateIndexOutput)
	return ret0, ret1
}

// CreateIndexRequest indicates an expected call of CreateIndexRequest
func (mr *MockCloudDirectoryAPIMockRecorder) CreateIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateIndexRequest), arg0)
}

// CreateIndexWithContext mocks base method
func (m *MockCloudDirectoryAPI) CreateIndexWithContext(arg0 context.Context, arg1 *clouddirectory.CreateIndexInput, arg2 ...request.Option) (*clouddirectory.CreateIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIndexWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.CreateIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndexWithContext indicates an expected call of CreateIndexWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) CreateIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateIndexWithContext), varargs...)
}

// CreateObject mocks base method
func (m *MockCloudDirectoryAPI) CreateObject(arg0 *clouddirectory.CreateObjectInput) (*clouddirectory.CreateObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", arg0)
	ret0, _ := ret[0].(*clouddirectory.CreateObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject
func (mr *MockCloudDirectoryAPIMockRecorder) CreateObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateObject), arg0)
}

// CreateObjectRequest mocks base method
func (m *MockCloudDirectoryAPI) CreateObjectRequest(arg0 *clouddirectory.CreateObjectInput) (*request.Request, *clouddirectory.CreateObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.CreateObjectOutput)
	return ret0, ret1
}

// CreateObjectRequest indicates an expected call of CreateObjectRequest
func (mr *MockCloudDirectoryAPIMockRecorder) CreateObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateObjectRequest), arg0)
}

// CreateObjectWithContext mocks base method
func (m *MockCloudDirectoryAPI) CreateObjectWithContext(arg0 context.Context, arg1 *clouddirectory.CreateObjectInput, arg2 ...request.Option) (*clouddirectory.CreateObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateObjectWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.CreateObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectWithContext indicates an expected call of CreateObjectWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) CreateObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateObjectWithContext), varargs...)
}

// CreateSchema mocks base method
func (m *MockCloudDirectoryAPI) CreateSchema(arg0 *clouddirectory.CreateSchemaInput) (*clouddirectory.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", arg0)
	ret0, _ := ret[0].(*clouddirectory.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema
func (mr *MockCloudDirectoryAPIMockRecorder) CreateSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateSchema), arg0)
}

// CreateSchemaRequest mocks base method
func (m *MockCloudDirectoryAPI) CreateSchemaRequest(arg0 *clouddirectory.CreateSchemaInput) (*request.Request, *clouddirectory.CreateSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.CreateSchemaOutput)
	return ret0, ret1
}

// CreateSchemaRequest indicates an expected call of CreateSchemaRequest
func (mr *MockCloudDirectoryAPIMockRecorder) CreateSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateSchemaRequest), arg0)
}

// CreateSchemaWithContext mocks base method
func (m *MockCloudDirectoryAPI) CreateSchemaWithContext(arg0 context.Context, arg1 *clouddirectory.CreateSchemaInput, arg2 ...request.Option) (*clouddirectory.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaWithContext indicates an expected call of CreateSchemaWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) CreateSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateSchemaWithContext), varargs...)
}

// CreateTypedLinkFacet mocks base method
func (m *MockCloudDirectoryAPI) CreateTypedLinkFacet(arg0 *clouddirectory.CreateTypedLinkFacetInput) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTypedLinkFacet", arg0)
	ret0, _ := ret[0].(*clouddirectory.CreateTypedLinkFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTypedLinkFacet indicates an expected call of CreateTypedLinkFacet
func (mr *MockCloudDirectoryAPIMockRecorder) CreateTypedLinkFacet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTypedLinkFacet", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateTypedLinkFacet), arg0)
}

// CreateTypedLinkFacetRequest mocks base method
func (m *MockCloudDirectoryAPI) CreateTypedLinkFacetRequest(arg0 *clouddirectory.CreateTypedLinkFacetInput) (*request.Request, *clouddirectory.CreateTypedLinkFacetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTypedLinkFacetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.CreateTypedLinkFacetOutput)
	return ret0, ret1
}

// CreateTypedLinkFacetRequest indicates an expected call of CreateTypedLinkFacetRequest
func (mr *MockCloudDirectoryAPIMockRecorder) CreateTypedLinkFacetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTypedLinkFacetRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateTypedLinkFacetRequest), arg0)
}

// CreateTypedLinkFacetWithContext mocks base method
func (m *MockCloudDirectoryAPI) CreateTypedLinkFacetWithContext(arg0 context.Context, arg1 *clouddirectory.CreateTypedLinkFacetInput, arg2 ...request.Option) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTypedLinkFacetWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.CreateTypedLinkFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTypedLinkFacetWithContext indicates an expected call of CreateTypedLinkFacetWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) CreateTypedLinkFacetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTypedLinkFacetWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).CreateTypedLinkFacetWithContext), varargs...)
}

// DeleteDirectory mocks base method
func (m *MockCloudDirectoryAPI) DeleteDirectory(arg0 *clouddirectory.DeleteDirectoryInput) (*clouddirectory.DeleteDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectory", arg0)
	ret0, _ := ret[0].(*clouddirectory.DeleteDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectory indicates an expected call of DeleteDirectory
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteDirectory), arg0)
}

// DeleteDirectoryRequest mocks base method
func (m *MockCloudDirectoryAPI) DeleteDirectoryRequest(arg0 *clouddirectory.DeleteDirectoryInput) (*request.Request, *clouddirectory.DeleteDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DeleteDirectoryOutput)
	return ret0, ret1
}

// DeleteDirectoryRequest indicates an expected call of DeleteDirectoryRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteDirectoryRequest), arg0)
}

// DeleteDirectoryWithContext mocks base method
func (m *MockCloudDirectoryAPI) DeleteDirectoryWithContext(arg0 context.Context, arg1 *clouddirectory.DeleteDirectoryInput, arg2 ...request.Option) (*clouddirectory.DeleteDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DeleteDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectoryWithContext indicates an expected call of DeleteDirectoryWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteDirectoryWithContext), varargs...)
}

// DeleteFacet mocks base method
func (m *MockCloudDirectoryAPI) DeleteFacet(arg0 *clouddirectory.DeleteFacetInput) (*clouddirectory.DeleteFacetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFacet", arg0)
	ret0, _ := ret[0].(*clouddirectory.DeleteFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFacet indicates an expected call of DeleteFacet
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteFacet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacet", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteFacet), arg0)
}

// DeleteFacetRequest mocks base method
func (m *MockCloudDirectoryAPI) DeleteFacetRequest(arg0 *clouddirectory.DeleteFacetInput) (*request.Request, *clouddirectory.DeleteFacetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFacetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DeleteFacetOutput)
	return ret0, ret1
}

// DeleteFacetRequest indicates an expected call of DeleteFacetRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteFacetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacetRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteFacetRequest), arg0)
}

// DeleteFacetWithContext mocks base method
func (m *MockCloudDirectoryAPI) DeleteFacetWithContext(arg0 context.Context, arg1 *clouddirectory.DeleteFacetInput, arg2 ...request.Option) (*clouddirectory.DeleteFacetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFacetWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DeleteFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFacetWithContext indicates an expected call of DeleteFacetWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteFacetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacetWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteFacetWithContext), varargs...)
}

// DeleteObject mocks base method
func (m *MockCloudDirectoryAPI) DeleteObject(arg0 *clouddirectory.DeleteObjectInput) (*clouddirectory.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0)
	ret0, _ := ret[0].(*clouddirectory.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteObject), arg0)
}

// DeleteObjectRequest mocks base method
func (m *MockCloudDirectoryAPI) DeleteObjectRequest(arg0 *clouddirectory.DeleteObjectInput) (*request.Request, *clouddirectory.DeleteObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DeleteObjectOutput)
	return ret0, ret1
}

// DeleteObjectRequest indicates an expected call of DeleteObjectRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteObjectRequest), arg0)
}

// DeleteObjectWithContext mocks base method
func (m *MockCloudDirectoryAPI) DeleteObjectWithContext(arg0 context.Context, arg1 *clouddirectory.DeleteObjectInput, arg2 ...request.Option) (*clouddirectory.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjectWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectWithContext indicates an expected call of DeleteObjectWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteObjectWithContext), varargs...)
}

// DeleteSchema mocks base method
func (m *MockCloudDirectoryAPI) DeleteSchema(arg0 *clouddirectory.DeleteSchemaInput) (*clouddirectory.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchema", arg0)
	ret0, _ := ret[0].(*clouddirectory.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchema indicates an expected call of DeleteSchema
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteSchema), arg0)
}

// DeleteSchemaRequest mocks base method
func (m *MockCloudDirectoryAPI) DeleteSchemaRequest(arg0 *clouddirectory.DeleteSchemaInput) (*request.Request, *clouddirectory.DeleteSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DeleteSchemaOutput)
	return ret0, ret1
}

// DeleteSchemaRequest indicates an expected call of DeleteSchemaRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteSchemaRequest), arg0)
}

// DeleteSchemaWithContext mocks base method
func (m *MockCloudDirectoryAPI) DeleteSchemaWithContext(arg0 context.Context, arg1 *clouddirectory.DeleteSchemaInput, arg2 ...request.Option) (*clouddirectory.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaWithContext indicates an expected call of DeleteSchemaWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteSchemaWithContext), varargs...)
}

// DeleteTypedLinkFacet mocks base method
func (m *MockCloudDirectoryAPI) DeleteTypedLinkFacet(arg0 *clouddirectory.DeleteTypedLinkFacetInput) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTypedLinkFacet", arg0)
	ret0, _ := ret[0].(*clouddirectory.DeleteTypedLinkFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTypedLinkFacet indicates an expected call of DeleteTypedLinkFacet
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteTypedLinkFacet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTypedLinkFacet", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteTypedLinkFacet), arg0)
}

// DeleteTypedLinkFacetRequest mocks base method
func (m *MockCloudDirectoryAPI) DeleteTypedLinkFacetRequest(arg0 *clouddirectory.DeleteTypedLinkFacetInput) (*request.Request, *clouddirectory.DeleteTypedLinkFacetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTypedLinkFacetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DeleteTypedLinkFacetOutput)
	return ret0, ret1
}

// DeleteTypedLinkFacetRequest indicates an expected call of DeleteTypedLinkFacetRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteTypedLinkFacetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTypedLinkFacetRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteTypedLinkFacetRequest), arg0)
}

// DeleteTypedLinkFacetWithContext mocks base method
func (m *MockCloudDirectoryAPI) DeleteTypedLinkFacetWithContext(arg0 context.Context, arg1 *clouddirectory.DeleteTypedLinkFacetInput, arg2 ...request.Option) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTypedLinkFacetWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DeleteTypedLinkFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTypedLinkFacetWithContext indicates an expected call of DeleteTypedLinkFacetWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DeleteTypedLinkFacetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTypedLinkFacetWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DeleteTypedLinkFacetWithContext), varargs...)
}

// DetachFromIndex mocks base method
func (m *MockCloudDirectoryAPI) DetachFromIndex(arg0 *clouddirectory.DetachFromIndexInput) (*clouddirectory.DetachFromIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFromIndex", arg0)
	ret0, _ := ret[0].(*clouddirectory.DetachFromIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachFromIndex indicates an expected call of DetachFromIndex
func (mr *MockCloudDirectoryAPIMockRecorder) DetachFromIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFromIndex", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachFromIndex), arg0)
}

// DetachFromIndexRequest mocks base method
func (m *MockCloudDirectoryAPI) DetachFromIndexRequest(arg0 *clouddirectory.DetachFromIndexInput) (*request.Request, *clouddirectory.DetachFromIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFromIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DetachFromIndexOutput)
	return ret0, ret1
}

// DetachFromIndexRequest indicates an expected call of DetachFromIndexRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DetachFromIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFromIndexRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachFromIndexRequest), arg0)
}

// DetachFromIndexWithContext mocks base method
func (m *MockCloudDirectoryAPI) DetachFromIndexWithContext(arg0 context.Context, arg1 *clouddirectory.DetachFromIndexInput, arg2 ...request.Option) (*clouddirectory.DetachFromIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachFromIndexWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DetachFromIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachFromIndexWithContext indicates an expected call of DetachFromIndexWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DetachFromIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFromIndexWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachFromIndexWithContext), varargs...)
}

// DetachObject mocks base method
func (m *MockCloudDirectoryAPI) DetachObject(arg0 *clouddirectory.DetachObjectInput) (*clouddirectory.DetachObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachObject", arg0)
	ret0, _ := ret[0].(*clouddirectory.DetachObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachObject indicates an expected call of DetachObject
func (mr *MockCloudDirectoryAPIMockRecorder) DetachObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachObject", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachObject), arg0)
}

// DetachObjectRequest mocks base method
func (m *MockCloudDirectoryAPI) DetachObjectRequest(arg0 *clouddirectory.DetachObjectInput) (*request.Request, *clouddirectory.DetachObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DetachObjectOutput)
	return ret0, ret1
}

// DetachObjectRequest indicates an expected call of DetachObjectRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DetachObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachObjectRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachObjectRequest), arg0)
}

// DetachObjectWithContext mocks base method
func (m *MockCloudDirectoryAPI) DetachObjectWithContext(arg0 context.Context, arg1 *clouddirectory.DetachObjectInput, arg2 ...request.Option) (*clouddirectory.DetachObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachObjectWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DetachObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachObjectWithContext indicates an expected call of DetachObjectWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DetachObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachObjectWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachObjectWithContext), varargs...)
}

// DetachPolicy mocks base method
func (m *MockCloudDirectoryAPI) DetachPolicy(arg0 *clouddirectory.DetachPolicyInput) (*clouddirectory.DetachPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPolicy", arg0)
	ret0, _ := ret[0].(*clouddirectory.DetachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPolicy indicates an expected call of DetachPolicy
func (mr *MockCloudDirectoryAPIMockRecorder) DetachPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicy", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachPolicy), arg0)
}

// DetachPolicyRequest mocks base method
func (m *MockCloudDirectoryAPI) DetachPolicyRequest(arg0 *clouddirectory.DetachPolicyInput) (*request.Request, *clouddirectory.DetachPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DetachPolicyOutput)
	return ret0, ret1
}

// DetachPolicyRequest indicates an expected call of DetachPolicyRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DetachPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicyRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachPolicyRequest), arg0)
}

// DetachPolicyWithContext mocks base method
func (m *MockCloudDirectoryAPI) DetachPolicyWithContext(arg0 context.Context, arg1 *clouddirectory.DetachPolicyInput, arg2 ...request.Option) (*clouddirectory.DetachPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DetachPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPolicyWithContext indicates an expected call of DetachPolicyWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DetachPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicyWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachPolicyWithContext), varargs...)
}

// DetachTypedLink mocks base method
func (m *MockCloudDirectoryAPI) DetachTypedLink(arg0 *clouddirectory.DetachTypedLinkInput) (*clouddirectory.DetachTypedLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachTypedLink", arg0)
	ret0, _ := ret[0].(*clouddirectory.DetachTypedLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachTypedLink indicates an expected call of DetachTypedLink
func (mr *MockCloudDirectoryAPIMockRecorder) DetachTypedLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTypedLink", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachTypedLink), arg0)
}

// DetachTypedLinkRequest mocks base method
func (m *MockCloudDirectoryAPI) DetachTypedLinkRequest(arg0 *clouddirectory.DetachTypedLinkInput) (*request.Request, *clouddirectory.DetachTypedLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachTypedLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DetachTypedLinkOutput)
	return ret0, ret1
}

// DetachTypedLinkRequest indicates an expected call of DetachTypedLinkRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DetachTypedLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTypedLinkRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachTypedLinkRequest), arg0)
}

// DetachTypedLinkWithContext mocks base method
func (m *MockCloudDirectoryAPI) DetachTypedLinkWithContext(arg0 context.Context, arg1 *clouddirectory.DetachTypedLinkInput, arg2 ...request.Option) (*clouddirectory.DetachTypedLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachTypedLinkWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DetachTypedLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachTypedLinkWithContext indicates an expected call of DetachTypedLinkWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DetachTypedLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTypedLinkWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DetachTypedLinkWithContext), varargs...)
}

// DisableDirectory mocks base method
func (m *MockCloudDirectoryAPI) DisableDirectory(arg0 *clouddirectory.DisableDirectoryInput) (*clouddirectory.DisableDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDirectory", arg0)
	ret0, _ := ret[0].(*clouddirectory.DisableDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableDirectory indicates an expected call of DisableDirectory
func (mr *MockCloudDirectoryAPIMockRecorder) DisableDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDirectory", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DisableDirectory), arg0)
}

// DisableDirectoryRequest mocks base method
func (m *MockCloudDirectoryAPI) DisableDirectoryRequest(arg0 *clouddirectory.DisableDirectoryInput) (*request.Request, *clouddirectory.DisableDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.DisableDirectoryOutput)
	return ret0, ret1
}

// DisableDirectoryRequest indicates an expected call of DisableDirectoryRequest
func (mr *MockCloudDirectoryAPIMockRecorder) DisableDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDirectoryRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DisableDirectoryRequest), arg0)
}

// DisableDirectoryWithContext mocks base method
func (m *MockCloudDirectoryAPI) DisableDirectoryWithContext(arg0 context.Context, arg1 *clouddirectory.DisableDirectoryInput, arg2 ...request.Option) (*clouddirectory.DisableDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.DisableDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableDirectoryWithContext indicates an expected call of DisableDirectoryWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) DisableDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDirectoryWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).DisableDirectoryWithContext), varargs...)
}

// EnableDirectory mocks base method
func (m *MockCloudDirectoryAPI) EnableDirectory(arg0 *clouddirectory.EnableDirectoryInput) (*clouddirectory.EnableDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDirectory", arg0)
	ret0, _ := ret[0].(*clouddirectory.EnableDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableDirectory indicates an expected call of EnableDirectory
func (mr *MockCloudDirectoryAPIMockRecorder) EnableDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDirectory", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).EnableDirectory), arg0)
}

// EnableDirectoryRequest mocks base method
func (m *MockCloudDirectoryAPI) EnableDirectoryRequest(arg0 *clouddirectory.EnableDirectoryInput) (*request.Request, *clouddirectory.EnableDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.EnableDirectoryOutput)
	return ret0, ret1
}

// EnableDirectoryRequest indicates an expected call of EnableDirectoryRequest
func (mr *MockCloudDirectoryAPIMockRecorder) EnableDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDirectoryRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).EnableDirectoryRequest), arg0)
}

// EnableDirectoryWithContext mocks base method
func (m *MockCloudDirectoryAPI) EnableDirectoryWithContext(arg0 context.Context, arg1 *clouddirectory.EnableDirectoryInput, arg2 ...request.Option) (*clouddirectory.EnableDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.EnableDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableDirectoryWithContext indicates an expected call of EnableDirectoryWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) EnableDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDirectoryWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).EnableDirectoryWithContext), varargs...)
}

// GetAppliedSchemaVersion mocks base method
func (m *MockCloudDirectoryAPI) GetAppliedSchemaVersion(arg0 *clouddirectory.GetAppliedSchemaVersionInput) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedSchemaVersion", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetAppliedSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedSchemaVersion indicates an expected call of GetAppliedSchemaVersion
func (mr *MockCloudDirectoryAPIMockRecorder) GetAppliedSchemaVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedSchemaVersion", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetAppliedSchemaVersion), arg0)
}

// GetAppliedSchemaVersionRequest mocks base method
func (m *MockCloudDirectoryAPI) GetAppliedSchemaVersionRequest(arg0 *clouddirectory.GetAppliedSchemaVersionInput) (*request.Request, *clouddirectory.GetAppliedSchemaVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedSchemaVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetAppliedSchemaVersionOutput)
	return ret0, ret1
}

// GetAppliedSchemaVersionRequest indicates an expected call of GetAppliedSchemaVersionRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetAppliedSchemaVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedSchemaVersionRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetAppliedSchemaVersionRequest), arg0)
}

// GetAppliedSchemaVersionWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetAppliedSchemaVersionWithContext(arg0 context.Context, arg1 *clouddirectory.GetAppliedSchemaVersionInput, arg2 ...request.Option) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppliedSchemaVersionWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetAppliedSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedSchemaVersionWithContext indicates an expected call of GetAppliedSchemaVersionWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetAppliedSchemaVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedSchemaVersionWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetAppliedSchemaVersionWithContext), varargs...)
}

// GetDirectory mocks base method
func (m *MockCloudDirectoryAPI) GetDirectory(arg0 *clouddirectory.GetDirectoryInput) (*clouddirectory.GetDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectory", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectory indicates an expected call of GetDirectory
func (mr *MockCloudDirectoryAPIMockRecorder) GetDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectory", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetDirectory), arg0)
}

// GetDirectoryRequest mocks base method
func (m *MockCloudDirectoryAPI) GetDirectoryRequest(arg0 *clouddirectory.GetDirectoryInput) (*request.Request, *clouddirectory.GetDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetDirectoryOutput)
	return ret0, ret1
}

// GetDirectoryRequest indicates an expected call of GetDirectoryRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetDirectoryRequest), arg0)
}

// GetDirectoryWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetDirectoryWithContext(arg0 context.Context, arg1 *clouddirectory.GetDirectoryInput, arg2 ...request.Option) (*clouddirectory.GetDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryWithContext indicates an expected call of GetDirectoryWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetDirectoryWithContext), varargs...)
}

// GetFacet mocks base method
func (m *MockCloudDirectoryAPI) GetFacet(arg0 *clouddirectory.GetFacetInput) (*clouddirectory.GetFacetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacet", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacet indicates an expected call of GetFacet
func (mr *MockCloudDirectoryAPIMockRecorder) GetFacet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacet", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetFacet), arg0)
}

// GetFacetRequest mocks base method
func (m *MockCloudDirectoryAPI) GetFacetRequest(arg0 *clouddirectory.GetFacetInput) (*request.Request, *clouddirectory.GetFacetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetFacetOutput)
	return ret0, ret1
}

// GetFacetRequest indicates an expected call of GetFacetRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetFacetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacetRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetFacetRequest), arg0)
}

// GetFacetWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetFacetWithContext(arg0 context.Context, arg1 *clouddirectory.GetFacetInput, arg2 ...request.Option) (*clouddirectory.GetFacetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFacetWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacetWithContext indicates an expected call of GetFacetWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetFacetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacetWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetFacetWithContext), varargs...)
}

// GetLinkAttributes mocks base method
func (m *MockCloudDirectoryAPI) GetLinkAttributes(arg0 *clouddirectory.GetLinkAttributesInput) (*clouddirectory.GetLinkAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkAttributes", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetLinkAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkAttributes indicates an expected call of GetLinkAttributes
func (mr *MockCloudDirectoryAPIMockRecorder) GetLinkAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAttributes", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetLinkAttributes), arg0)
}

// GetLinkAttributesRequest mocks base method
func (m *MockCloudDirectoryAPI) GetLinkAttributesRequest(arg0 *clouddirectory.GetLinkAttributesInput) (*request.Request, *clouddirectory.GetLinkAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetLinkAttributesOutput)
	return ret0, ret1
}

// GetLinkAttributesRequest indicates an expected call of GetLinkAttributesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetLinkAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAttributesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetLinkAttributesRequest), arg0)
}

// GetLinkAttributesWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetLinkAttributesWithContext(arg0 context.Context, arg1 *clouddirectory.GetLinkAttributesInput, arg2 ...request.Option) (*clouddirectory.GetLinkAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinkAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetLinkAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkAttributesWithContext indicates an expected call of GetLinkAttributesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetLinkAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkAttributesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetLinkAttributesWithContext), varargs...)
}

// GetObjectAttributes mocks base method
func (m *MockCloudDirectoryAPI) GetObjectAttributes(arg0 *clouddirectory.GetObjectAttributesInput) (*clouddirectory.GetObjectAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectAttributes", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetObjectAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectAttributes indicates an expected call of GetObjectAttributes
func (mr *MockCloudDirectoryAPIMockRecorder) GetObjectAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectAttributes", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetObjectAttributes), arg0)
}

// GetObjectAttributesRequest mocks base method
func (m *MockCloudDirectoryAPI) GetObjectAttributesRequest(arg0 *clouddirectory.GetObjectAttributesInput) (*request.Request, *clouddirectory.GetObjectAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetObjectAttributesOutput)
	return ret0, ret1
}

// GetObjectAttributesRequest indicates an expected call of GetObjectAttributesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetObjectAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectAttributesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetObjectAttributesRequest), arg0)
}

// GetObjectAttributesWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetObjectAttributesWithContext(arg0 context.Context, arg1 *clouddirectory.GetObjectAttributesInput, arg2 ...request.Option) (*clouddirectory.GetObjectAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetObjectAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectAttributesWithContext indicates an expected call of GetObjectAttributesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetObjectAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectAttributesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetObjectAttributesWithContext), varargs...)
}

// GetObjectInformation mocks base method
func (m *MockCloudDirectoryAPI) GetObjectInformation(arg0 *clouddirectory.GetObjectInformationInput) (*clouddirectory.GetObjectInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectInformation", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetObjectInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectInformation indicates an expected call of GetObjectInformation
func (mr *MockCloudDirectoryAPIMockRecorder) GetObjectInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectInformation", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetObjectInformation), arg0)
}

// GetObjectInformationRequest mocks base method
func (m *MockCloudDirectoryAPI) GetObjectInformationRequest(arg0 *clouddirectory.GetObjectInformationInput) (*request.Request, *clouddirectory.GetObjectInformationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectInformationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetObjectInformationOutput)
	return ret0, ret1
}

// GetObjectInformationRequest indicates an expected call of GetObjectInformationRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetObjectInformationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectInformationRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetObjectInformationRequest), arg0)
}

// GetObjectInformationWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetObjectInformationWithContext(arg0 context.Context, arg1 *clouddirectory.GetObjectInformationInput, arg2 ...request.Option) (*clouddirectory.GetObjectInformationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectInformationWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetObjectInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectInformationWithContext indicates an expected call of GetObjectInformationWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetObjectInformationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectInformationWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetObjectInformationWithContext), varargs...)
}

// GetSchemaAsJson mocks base method
func (m *MockCloudDirectoryAPI) GetSchemaAsJson(arg0 *clouddirectory.GetSchemaAsJsonInput) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaAsJson", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetSchemaAsJsonOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaAsJson indicates an expected call of GetSchemaAsJson
func (mr *MockCloudDirectoryAPIMockRecorder) GetSchemaAsJson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaAsJson", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetSchemaAsJson), arg0)
}

// GetSchemaAsJsonRequest mocks base method
func (m *MockCloudDirectoryAPI) GetSchemaAsJsonRequest(arg0 *clouddirectory.GetSchemaAsJsonInput) (*request.Request, *clouddirectory.GetSchemaAsJsonOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaAsJsonRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetSchemaAsJsonOutput)
	return ret0, ret1
}

// GetSchemaAsJsonRequest indicates an expected call of GetSchemaAsJsonRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetSchemaAsJsonRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaAsJsonRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetSchemaAsJsonRequest), arg0)
}

// GetSchemaAsJsonWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetSchemaAsJsonWithContext(arg0 context.Context, arg1 *clouddirectory.GetSchemaAsJsonInput, arg2 ...request.Option) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaAsJsonWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetSchemaAsJsonOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaAsJsonWithContext indicates an expected call of GetSchemaAsJsonWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetSchemaAsJsonWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaAsJsonWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetSchemaAsJsonWithContext), varargs...)
}

// GetTypedLinkFacetInformation mocks base method
func (m *MockCloudDirectoryAPI) GetTypedLinkFacetInformation(arg0 *clouddirectory.GetTypedLinkFacetInformationInput) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypedLinkFacetInformation", arg0)
	ret0, _ := ret[0].(*clouddirectory.GetTypedLinkFacetInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypedLinkFacetInformation indicates an expected call of GetTypedLinkFacetInformation
func (mr *MockCloudDirectoryAPIMockRecorder) GetTypedLinkFacetInformation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypedLinkFacetInformation", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetTypedLinkFacetInformation), arg0)
}

// GetTypedLinkFacetInformationRequest mocks base method
func (m *MockCloudDirectoryAPI) GetTypedLinkFacetInformationRequest(arg0 *clouddirectory.GetTypedLinkFacetInformationInput) (*request.Request, *clouddirectory.GetTypedLinkFacetInformationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypedLinkFacetInformationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.GetTypedLinkFacetInformationOutput)
	return ret0, ret1
}

// GetTypedLinkFacetInformationRequest indicates an expected call of GetTypedLinkFacetInformationRequest
func (mr *MockCloudDirectoryAPIMockRecorder) GetTypedLinkFacetInformationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypedLinkFacetInformationRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetTypedLinkFacetInformationRequest), arg0)
}

// GetTypedLinkFacetInformationWithContext mocks base method
func (m *MockCloudDirectoryAPI) GetTypedLinkFacetInformationWithContext(arg0 context.Context, arg1 *clouddirectory.GetTypedLinkFacetInformationInput, arg2 ...request.Option) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTypedLinkFacetInformationWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.GetTypedLinkFacetInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypedLinkFacetInformationWithContext indicates an expected call of GetTypedLinkFacetInformationWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) GetTypedLinkFacetInformationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypedLinkFacetInformationWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).GetTypedLinkFacetInformationWithContext), varargs...)
}

// ListAppliedSchemaArns mocks base method
func (m *MockCloudDirectoryAPI) ListAppliedSchemaArns(arg0 *clouddirectory.ListAppliedSchemaArnsInput) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppliedSchemaArns", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListAppliedSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppliedSchemaArns indicates an expected call of ListAppliedSchemaArns
func (mr *MockCloudDirectoryAPIMockRecorder) ListAppliedSchemaArns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppliedSchemaArns", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAppliedSchemaArns), arg0)
}

// ListAppliedSchemaArnsPages mocks base method
func (m *MockCloudDirectoryAPI) ListAppliedSchemaArnsPages(arg0 *clouddirectory.ListAppliedSchemaArnsInput, arg1 func(*clouddirectory.ListAppliedSchemaArnsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppliedSchemaArnsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppliedSchemaArnsPages indicates an expected call of ListAppliedSchemaArnsPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListAppliedSchemaArnsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppliedSchemaArnsPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAppliedSchemaArnsPages), arg0, arg1)
}

// ListAppliedSchemaArnsPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListAppliedSchemaArnsPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListAppliedSchemaArnsInput, arg2 func(*clouddirectory.ListAppliedSchemaArnsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppliedSchemaArnsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppliedSchemaArnsPagesWithContext indicates an expected call of ListAppliedSchemaArnsPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListAppliedSchemaArnsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppliedSchemaArnsPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAppliedSchemaArnsPagesWithContext), varargs...)
}

// ListAppliedSchemaArnsRequest mocks base method
func (m *MockCloudDirectoryAPI) ListAppliedSchemaArnsRequest(arg0 *clouddirectory.ListAppliedSchemaArnsInput) (*request.Request, *clouddirectory.ListAppliedSchemaArnsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppliedSchemaArnsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListAppliedSchemaArnsOutput)
	return ret0, ret1
}

// ListAppliedSchemaArnsRequest indicates an expected call of ListAppliedSchemaArnsRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListAppliedSchemaArnsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppliedSchemaArnsRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAppliedSchemaArnsRequest), arg0)
}

// ListAppliedSchemaArnsWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListAppliedSchemaArnsWithContext(arg0 context.Context, arg1 *clouddirectory.ListAppliedSchemaArnsInput, arg2 ...request.Option) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppliedSchemaArnsWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListAppliedSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppliedSchemaArnsWithContext indicates an expected call of ListAppliedSchemaArnsWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListAppliedSchemaArnsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppliedSchemaArnsWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAppliedSchemaArnsWithContext), varargs...)
}

// ListAttachedIndices mocks base method
func (m *MockCloudDirectoryAPI) ListAttachedIndices(arg0 *clouddirectory.ListAttachedIndicesInput) (*clouddirectory.ListAttachedIndicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedIndices", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListAttachedIndicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedIndices indicates an expected call of ListAttachedIndices
func (mr *MockCloudDirectoryAPIMockRecorder) ListAttachedIndices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedIndices", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAttachedIndices), arg0)
}

// ListAttachedIndicesPages mocks base method
func (m *MockCloudDirectoryAPI) ListAttachedIndicesPages(arg0 *clouddirectory.ListAttachedIndicesInput, arg1 func(*clouddirectory.ListAttachedIndicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedIndicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttachedIndicesPages indicates an expected call of ListAttachedIndicesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListAttachedIndicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedIndicesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAttachedIndicesPages), arg0, arg1)
}

// ListAttachedIndicesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListAttachedIndicesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListAttachedIndicesInput, arg2 func(*clouddirectory.ListAttachedIndicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachedIndicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttachedIndicesPagesWithContext indicates an expected call of ListAttachedIndicesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListAttachedIndicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedIndicesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAttachedIndicesPagesWithContext), varargs...)
}

// ListAttachedIndicesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListAttachedIndicesRequest(arg0 *clouddirectory.ListAttachedIndicesInput) (*request.Request, *clouddirectory.ListAttachedIndicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedIndicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListAttachedIndicesOutput)
	return ret0, ret1
}

// ListAttachedIndicesRequest indicates an expected call of ListAttachedIndicesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListAttachedIndicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedIndicesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAttachedIndicesRequest), arg0)
}

// ListAttachedIndicesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListAttachedIndicesWithContext(arg0 context.Context, arg1 *clouddirectory.ListAttachedIndicesInput, arg2 ...request.Option) (*clouddirectory.ListAttachedIndicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachedIndicesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListAttachedIndicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedIndicesWithContext indicates an expected call of ListAttachedIndicesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListAttachedIndicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedIndicesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListAttachedIndicesWithContext), varargs...)
}

// ListDevelopmentSchemaArns mocks base method
func (m *MockCloudDirectoryAPI) ListDevelopmentSchemaArns(arg0 *clouddirectory.ListDevelopmentSchemaArnsInput) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevelopmentSchemaArns", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListDevelopmentSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevelopmentSchemaArns indicates an expected call of ListDevelopmentSchemaArns
func (mr *MockCloudDirectoryAPIMockRecorder) ListDevelopmentSchemaArns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevelopmentSchemaArns", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDevelopmentSchemaArns), arg0)
}

// ListDevelopmentSchemaArnsPages mocks base method
func (m *MockCloudDirectoryAPI) ListDevelopmentSchemaArnsPages(arg0 *clouddirectory.ListDevelopmentSchemaArnsInput, arg1 func(*clouddirectory.ListDevelopmentSchemaArnsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevelopmentSchemaArnsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevelopmentSchemaArnsPages indicates an expected call of ListDevelopmentSchemaArnsPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListDevelopmentSchemaArnsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevelopmentSchemaArnsPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDevelopmentSchemaArnsPages), arg0, arg1)
}

// ListDevelopmentSchemaArnsPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListDevelopmentSchemaArnsPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListDevelopmentSchemaArnsInput, arg2 func(*clouddirectory.ListDevelopmentSchemaArnsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevelopmentSchemaArnsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevelopmentSchemaArnsPagesWithContext indicates an expected call of ListDevelopmentSchemaArnsPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListDevelopmentSchemaArnsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevelopmentSchemaArnsPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDevelopmentSchemaArnsPagesWithContext), varargs...)
}

// ListDevelopmentSchemaArnsRequest mocks base method
func (m *MockCloudDirectoryAPI) ListDevelopmentSchemaArnsRequest(arg0 *clouddirectory.ListDevelopmentSchemaArnsInput) (*request.Request, *clouddirectory.ListDevelopmentSchemaArnsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevelopmentSchemaArnsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListDevelopmentSchemaArnsOutput)
	return ret0, ret1
}

// ListDevelopmentSchemaArnsRequest indicates an expected call of ListDevelopmentSchemaArnsRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListDevelopmentSchemaArnsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevelopmentSchemaArnsRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDevelopmentSchemaArnsRequest), arg0)
}

// ListDevelopmentSchemaArnsWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListDevelopmentSchemaArnsWithContext(arg0 context.Context, arg1 *clouddirectory.ListDevelopmentSchemaArnsInput, arg2 ...request.Option) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevelopmentSchemaArnsWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListDevelopmentSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevelopmentSchemaArnsWithContext indicates an expected call of ListDevelopmentSchemaArnsWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListDevelopmentSchemaArnsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevelopmentSchemaArnsWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDevelopmentSchemaArnsWithContext), varargs...)
}

// ListDirectories mocks base method
func (m *MockCloudDirectoryAPI) ListDirectories(arg0 *clouddirectory.ListDirectoriesInput) (*clouddirectory.ListDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectories", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectories indicates an expected call of ListDirectories
func (mr *MockCloudDirectoryAPIMockRecorder) ListDirectories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectories", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDirectories), arg0)
}

// ListDirectoriesPages mocks base method
func (m *MockCloudDirectoryAPI) ListDirectoriesPages(arg0 *clouddirectory.ListDirectoriesInput, arg1 func(*clouddirectory.ListDirectoriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectoriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDirectoriesPages indicates an expected call of ListDirectoriesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListDirectoriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoriesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDirectoriesPages), arg0, arg1)
}

// ListDirectoriesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListDirectoriesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListDirectoriesInput, arg2 func(*clouddirectory.ListDirectoriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDirectoriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDirectoriesPagesWithContext indicates an expected call of ListDirectoriesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListDirectoriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoriesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDirectoriesPagesWithContext), varargs...)
}

// ListDirectoriesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListDirectoriesRequest(arg0 *clouddirectory.ListDirectoriesInput) (*request.Request, *clouddirectory.ListDirectoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirectoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListDirectoriesOutput)
	return ret0, ret1
}

// ListDirectoriesRequest indicates an expected call of ListDirectoriesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListDirectoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoriesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDirectoriesRequest), arg0)
}

// ListDirectoriesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListDirectoriesWithContext(arg0 context.Context, arg1 *clouddirectory.ListDirectoriesInput, arg2 ...request.Option) (*clouddirectory.ListDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDirectoriesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirectoriesWithContext indicates an expected call of ListDirectoriesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListDirectoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirectoriesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListDirectoriesWithContext), varargs...)
}

// ListFacetAttributes mocks base method
func (m *MockCloudDirectoryAPI) ListFacetAttributes(arg0 *clouddirectory.ListFacetAttributesInput) (*clouddirectory.ListFacetAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacetAttributes", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListFacetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacetAttributes indicates an expected call of ListFacetAttributes
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetAttributes", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetAttributes), arg0)
}

// ListFacetAttributesPages mocks base method
func (m *MockCloudDirectoryAPI) ListFacetAttributesPages(arg0 *clouddirectory.ListFacetAttributesInput, arg1 func(*clouddirectory.ListFacetAttributesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacetAttributesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFacetAttributesPages indicates an expected call of ListFacetAttributesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetAttributesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetAttributesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetAttributesPages), arg0, arg1)
}

// ListFacetAttributesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListFacetAttributesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListFacetAttributesInput, arg2 func(*clouddirectory.ListFacetAttributesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFacetAttributesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFacetAttributesPagesWithContext indicates an expected call of ListFacetAttributesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetAttributesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetAttributesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetAttributesPagesWithContext), varargs...)
}

// ListFacetAttributesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListFacetAttributesRequest(arg0 *clouddirectory.ListFacetAttributesInput) (*request.Request, *clouddirectory.ListFacetAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacetAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListFacetAttributesOutput)
	return ret0, ret1
}

// ListFacetAttributesRequest indicates an expected call of ListFacetAttributesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetAttributesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetAttributesRequest), arg0)
}

// ListFacetAttributesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListFacetAttributesWithContext(arg0 context.Context, arg1 *clouddirectory.ListFacetAttributesInput, arg2 ...request.Option) (*clouddirectory.ListFacetAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFacetAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListFacetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacetAttributesWithContext indicates an expected call of ListFacetAttributesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetAttributesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetAttributesWithContext), varargs...)
}

// ListFacetNames mocks base method
func (m *MockCloudDirectoryAPI) ListFacetNames(arg0 *clouddirectory.ListFacetNamesInput) (*clouddirectory.ListFacetNamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacetNames", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListFacetNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacetNames indicates an expected call of ListFacetNames
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetNames", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetNames), arg0)
}

// ListFacetNamesPages mocks base method
func (m *MockCloudDirectoryAPI) ListFacetNamesPages(arg0 *clouddirectory.ListFacetNamesInput, arg1 func(*clouddirectory.ListFacetNamesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacetNamesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFacetNamesPages indicates an expected call of ListFacetNamesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetNamesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetNamesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetNamesPages), arg0, arg1)
}

// ListFacetNamesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListFacetNamesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListFacetNamesInput, arg2 func(*clouddirectory.ListFacetNamesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFacetNamesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFacetNamesPagesWithContext indicates an expected call of ListFacetNamesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetNamesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetNamesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetNamesPagesWithContext), varargs...)
}

// ListFacetNamesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListFacetNamesRequest(arg0 *clouddirectory.ListFacetNamesInput) (*request.Request, *clouddirectory.ListFacetNamesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacetNamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListFacetNamesOutput)
	return ret0, ret1
}

// ListFacetNamesRequest indicates an expected call of ListFacetNamesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetNamesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetNamesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetNamesRequest), arg0)
}

// ListFacetNamesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListFacetNamesWithContext(arg0 context.Context, arg1 *clouddirectory.ListFacetNamesInput, arg2 ...request.Option) (*clouddirectory.ListFacetNamesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFacetNamesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListFacetNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacetNamesWithContext indicates an expected call of ListFacetNamesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListFacetNamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacetNamesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListFacetNamesWithContext), varargs...)
}

// ListIncomingTypedLinks mocks base method
func (m *MockCloudDirectoryAPI) ListIncomingTypedLinks(arg0 *clouddirectory.ListIncomingTypedLinksInput) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomingTypedLinks", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListIncomingTypedLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingTypedLinks indicates an expected call of ListIncomingTypedLinks
func (mr *MockCloudDirectoryAPIMockRecorder) ListIncomingTypedLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingTypedLinks", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIncomingTypedLinks), arg0)
}

// ListIncomingTypedLinksRequest mocks base method
func (m *MockCloudDirectoryAPI) ListIncomingTypedLinksRequest(arg0 *clouddirectory.ListIncomingTypedLinksInput) (*request.Request, *clouddirectory.ListIncomingTypedLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomingTypedLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListIncomingTypedLinksOutput)
	return ret0, ret1
}

// ListIncomingTypedLinksRequest indicates an expected call of ListIncomingTypedLinksRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListIncomingTypedLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingTypedLinksRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIncomingTypedLinksRequest), arg0)
}

// ListIncomingTypedLinksWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListIncomingTypedLinksWithContext(arg0 context.Context, arg1 *clouddirectory.ListIncomingTypedLinksInput, arg2 ...request.Option) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIncomingTypedLinksWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListIncomingTypedLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomingTypedLinksWithContext indicates an expected call of ListIncomingTypedLinksWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListIncomingTypedLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomingTypedLinksWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIncomingTypedLinksWithContext), varargs...)
}

// ListIndex mocks base method
func (m *MockCloudDirectoryAPI) ListIndex(arg0 *clouddirectory.ListIndexInput) (*clouddirectory.ListIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndex", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndex indicates an expected call of ListIndex
func (mr *MockCloudDirectoryAPIMockRecorder) ListIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndex", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIndex), arg0)
}

// ListIndexPages mocks base method
func (m *MockCloudDirectoryAPI) ListIndexPages(arg0 *clouddirectory.ListIndexInput, arg1 func(*clouddirectory.ListIndexOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIndexPages indicates an expected call of ListIndexPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListIndexPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIndexPages), arg0, arg1)
}

// ListIndexPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListIndexPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListIndexInput, arg2 func(*clouddirectory.ListIndexOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndexPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIndexPagesWithContext indicates an expected call of ListIndexPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListIndexPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIndexPagesWithContext), varargs...)
}

// ListIndexRequest mocks base method
func (m *MockCloudDirectoryAPI) ListIndexRequest(arg0 *clouddirectory.ListIndexInput) (*request.Request, *clouddirectory.ListIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListIndexOutput)
	return ret0, ret1
}

// ListIndexRequest indicates an expected call of ListIndexRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIndexRequest), arg0)
}

// ListIndexWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListIndexWithContext(arg0 context.Context, arg1 *clouddirectory.ListIndexInput, arg2 ...request.Option) (*clouddirectory.ListIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIndexWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndexWithContext indicates an expected call of ListIndexWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndexWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListIndexWithContext), varargs...)
}

// ListManagedSchemaArns mocks base method
func (m *MockCloudDirectoryAPI) ListManagedSchemaArns(arg0 *clouddirectory.ListManagedSchemaArnsInput) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedSchemaArns", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListManagedSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedSchemaArns indicates an expected call of ListManagedSchemaArns
func (mr *MockCloudDirectoryAPIMockRecorder) ListManagedSchemaArns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedSchemaArns", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListManagedSchemaArns), arg0)
}

// ListManagedSchemaArnsPages mocks base method
func (m *MockCloudDirectoryAPI) ListManagedSchemaArnsPages(arg0 *clouddirectory.ListManagedSchemaArnsInput, arg1 func(*clouddirectory.ListManagedSchemaArnsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedSchemaArnsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListManagedSchemaArnsPages indicates an expected call of ListManagedSchemaArnsPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListManagedSchemaArnsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedSchemaArnsPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListManagedSchemaArnsPages), arg0, arg1)
}

// ListManagedSchemaArnsPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListManagedSchemaArnsPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListManagedSchemaArnsInput, arg2 func(*clouddirectory.ListManagedSchemaArnsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedSchemaArnsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListManagedSchemaArnsPagesWithContext indicates an expected call of ListManagedSchemaArnsPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListManagedSchemaArnsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedSchemaArnsPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListManagedSchemaArnsPagesWithContext), varargs...)
}

// ListManagedSchemaArnsRequest mocks base method
func (m *MockCloudDirectoryAPI) ListManagedSchemaArnsRequest(arg0 *clouddirectory.ListManagedSchemaArnsInput) (*request.Request, *clouddirectory.ListManagedSchemaArnsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedSchemaArnsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListManagedSchemaArnsOutput)
	return ret0, ret1
}

// ListManagedSchemaArnsRequest indicates an expected call of ListManagedSchemaArnsRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListManagedSchemaArnsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedSchemaArnsRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListManagedSchemaArnsRequest), arg0)
}

// ListManagedSchemaArnsWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListManagedSchemaArnsWithContext(arg0 context.Context, arg1 *clouddirectory.ListManagedSchemaArnsInput, arg2 ...request.Option) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedSchemaArnsWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListManagedSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedSchemaArnsWithContext indicates an expected call of ListManagedSchemaArnsWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListManagedSchemaArnsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedSchemaArnsWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListManagedSchemaArnsWithContext), varargs...)
}

// ListObjectAttributes mocks base method
func (m *MockCloudDirectoryAPI) ListObjectAttributes(arg0 *clouddirectory.ListObjectAttributesInput) (*clouddirectory.ListObjectAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectAttributes", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListObjectAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectAttributes indicates an expected call of ListObjectAttributes
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectAttributes", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectAttributes), arg0)
}

// ListObjectAttributesPages mocks base method
func (m *MockCloudDirectoryAPI) ListObjectAttributesPages(arg0 *clouddirectory.ListObjectAttributesInput, arg1 func(*clouddirectory.ListObjectAttributesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectAttributesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectAttributesPages indicates an expected call of ListObjectAttributesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectAttributesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectAttributesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectAttributesPages), arg0, arg1)
}

// ListObjectAttributesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectAttributesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectAttributesInput, arg2 func(*clouddirectory.ListObjectAttributesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectAttributesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectAttributesPagesWithContext indicates an expected call of ListObjectAttributesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectAttributesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectAttributesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectAttributesPagesWithContext), varargs...)
}

// ListObjectAttributesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListObjectAttributesRequest(arg0 *clouddirectory.ListObjectAttributesInput) (*request.Request, *clouddirectory.ListObjectAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListObjectAttributesOutput)
	return ret0, ret1
}

// ListObjectAttributesRequest indicates an expected call of ListObjectAttributesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectAttributesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectAttributesRequest), arg0)
}

// ListObjectAttributesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectAttributesWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectAttributesInput, arg2 ...request.Option) (*clouddirectory.ListObjectAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListObjectAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectAttributesWithContext indicates an expected call of ListObjectAttributesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectAttributesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectAttributesWithContext), varargs...)
}

// ListObjectChildren mocks base method
func (m *MockCloudDirectoryAPI) ListObjectChildren(arg0 *clouddirectory.ListObjectChildrenInput) (*clouddirectory.ListObjectChildrenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectChildren", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListObjectChildrenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectChildren indicates an expected call of ListObjectChildren
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectChildren(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectChildren", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectChildren), arg0)
}

// ListObjectChildrenPages mocks base method
func (m *MockCloudDirectoryAPI) ListObjectChildrenPages(arg0 *clouddirectory.ListObjectChildrenInput, arg1 func(*clouddirectory.ListObjectChildrenOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectChildrenPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectChildrenPages indicates an expected call of ListObjectChildrenPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectChildrenPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectChildrenPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectChildrenPages), arg0, arg1)
}

// ListObjectChildrenPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectChildrenPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectChildrenInput, arg2 func(*clouddirectory.ListObjectChildrenOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectChildrenPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectChildrenPagesWithContext indicates an expected call of ListObjectChildrenPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectChildrenPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectChildrenPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectChildrenPagesWithContext), varargs...)
}

// ListObjectChildrenRequest mocks base method
func (m *MockCloudDirectoryAPI) ListObjectChildrenRequest(arg0 *clouddirectory.ListObjectChildrenInput) (*request.Request, *clouddirectory.ListObjectChildrenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectChildrenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListObjectChildrenOutput)
	return ret0, ret1
}

// ListObjectChildrenRequest indicates an expected call of ListObjectChildrenRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectChildrenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectChildrenRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectChildrenRequest), arg0)
}

// ListObjectChildrenWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectChildrenWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectChildrenInput, arg2 ...request.Option) (*clouddirectory.ListObjectChildrenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectChildrenWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListObjectChildrenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectChildrenWithContext indicates an expected call of ListObjectChildrenWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectChildrenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectChildrenWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectChildrenWithContext), varargs...)
}

// ListObjectParentPaths mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentPaths(arg0 *clouddirectory.ListObjectParentPathsInput) (*clouddirectory.ListObjectParentPathsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectParentPaths", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListObjectParentPathsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectParentPaths indicates an expected call of ListObjectParentPaths
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentPaths(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentPaths", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentPaths), arg0)
}

// ListObjectParentPathsPages mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentPathsPages(arg0 *clouddirectory.ListObjectParentPathsInput, arg1 func(*clouddirectory.ListObjectParentPathsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectParentPathsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectParentPathsPages indicates an expected call of ListObjectParentPathsPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentPathsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentPathsPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentPathsPages), arg0, arg1)
}

// ListObjectParentPathsPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentPathsPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectParentPathsInput, arg2 func(*clouddirectory.ListObjectParentPathsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectParentPathsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectParentPathsPagesWithContext indicates an expected call of ListObjectParentPathsPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentPathsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentPathsPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentPathsPagesWithContext), varargs...)
}

// ListObjectParentPathsRequest mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentPathsRequest(arg0 *clouddirectory.ListObjectParentPathsInput) (*request.Request, *clouddirectory.ListObjectParentPathsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectParentPathsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListObjectParentPathsOutput)
	return ret0, ret1
}

// ListObjectParentPathsRequest indicates an expected call of ListObjectParentPathsRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentPathsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentPathsRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentPathsRequest), arg0)
}

// ListObjectParentPathsWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentPathsWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectParentPathsInput, arg2 ...request.Option) (*clouddirectory.ListObjectParentPathsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectParentPathsWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListObjectParentPathsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectParentPathsWithContext indicates an expected call of ListObjectParentPathsWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentPathsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentPathsWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentPathsWithContext), varargs...)
}

// ListObjectParents mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParents(arg0 *clouddirectory.ListObjectParentsInput) (*clouddirectory.ListObjectParentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectParents", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListObjectParentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectParents indicates an expected call of ListObjectParents
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParents", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParents), arg0)
}

// ListObjectParentsPages mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentsPages(arg0 *clouddirectory.ListObjectParentsInput, arg1 func(*clouddirectory.ListObjectParentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectParentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectParentsPages indicates an expected call of ListObjectParentsPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentsPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentsPages), arg0, arg1)
}

// ListObjectParentsPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentsPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectParentsInput, arg2 func(*clouddirectory.ListObjectParentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectParentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectParentsPagesWithContext indicates an expected call of ListObjectParentsPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentsPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentsPagesWithContext), varargs...)
}

// ListObjectParentsRequest mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentsRequest(arg0 *clouddirectory.ListObjectParentsInput) (*request.Request, *clouddirectory.ListObjectParentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectParentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListObjectParentsOutput)
	return ret0, ret1
}

// ListObjectParentsRequest indicates an expected call of ListObjectParentsRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentsRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentsRequest), arg0)
}

// ListObjectParentsWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectParentsWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectParentsInput, arg2 ...request.Option) (*clouddirectory.ListObjectParentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectParentsWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListObjectParentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectParentsWithContext indicates an expected call of ListObjectParentsWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectParentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectParentsWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectParentsWithContext), varargs...)
}

// ListObjectPolicies mocks base method
func (m *MockCloudDirectoryAPI) ListObjectPolicies(arg0 *clouddirectory.ListObjectPoliciesInput) (*clouddirectory.ListObjectPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectPolicies", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListObjectPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectPolicies indicates an expected call of ListObjectPolicies
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectPolicies", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectPolicies), arg0)
}

// ListObjectPoliciesPages mocks base method
func (m *MockCloudDirectoryAPI) ListObjectPoliciesPages(arg0 *clouddirectory.ListObjectPoliciesInput, arg1 func(*clouddirectory.ListObjectPoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectPoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectPoliciesPages indicates an expected call of ListObjectPoliciesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectPoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectPoliciesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectPoliciesPages), arg0, arg1)
}

// ListObjectPoliciesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectPoliciesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectPoliciesInput, arg2 func(*clouddirectory.ListObjectPoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectPoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListObjectPoliciesPagesWithContext indicates an expected call of ListObjectPoliciesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectPoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectPoliciesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectPoliciesPagesWithContext), varargs...)
}

// ListObjectPoliciesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListObjectPoliciesRequest(arg0 *clouddirectory.ListObjectPoliciesInput) (*request.Request, *clouddirectory.ListObjectPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListObjectPoliciesOutput)
	return ret0, ret1
}

// ListObjectPoliciesRequest indicates an expected call of ListObjectPoliciesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectPoliciesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectPoliciesRequest), arg0)
}

// ListObjectPoliciesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListObjectPoliciesWithContext(arg0 context.Context, arg1 *clouddirectory.ListObjectPoliciesInput, arg2 ...request.Option) (*clouddirectory.ListObjectPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListObjectPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectPoliciesWithContext indicates an expected call of ListObjectPoliciesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListObjectPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectPoliciesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListObjectPoliciesWithContext), varargs...)
}

// ListOutgoingTypedLinks mocks base method
func (m *MockCloudDirectoryAPI) ListOutgoingTypedLinks(arg0 *clouddirectory.ListOutgoingTypedLinksInput) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutgoingTypedLinks", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListOutgoingTypedLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingTypedLinks indicates an expected call of ListOutgoingTypedLinks
func (mr *MockCloudDirectoryAPIMockRecorder) ListOutgoingTypedLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingTypedLinks", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListOutgoingTypedLinks), arg0)
}

// ListOutgoingTypedLinksRequest mocks base method
func (m *MockCloudDirectoryAPI) ListOutgoingTypedLinksRequest(arg0 *clouddirectory.ListOutgoingTypedLinksInput) (*request.Request, *clouddirectory.ListOutgoingTypedLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutgoingTypedLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListOutgoingTypedLinksOutput)
	return ret0, ret1
}

// ListOutgoingTypedLinksRequest indicates an expected call of ListOutgoingTypedLinksRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListOutgoingTypedLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingTypedLinksRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListOutgoingTypedLinksRequest), arg0)
}

// ListOutgoingTypedLinksWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListOutgoingTypedLinksWithContext(arg0 context.Context, arg1 *clouddirectory.ListOutgoingTypedLinksInput, arg2 ...request.Option) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutgoingTypedLinksWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListOutgoingTypedLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutgoingTypedLinksWithContext indicates an expected call of ListOutgoingTypedLinksWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListOutgoingTypedLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutgoingTypedLinksWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListOutgoingTypedLinksWithContext), varargs...)
}

// ListPolicyAttachments mocks base method
func (m *MockCloudDirectoryAPI) ListPolicyAttachments(arg0 *clouddirectory.ListPolicyAttachmentsInput) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyAttachments", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListPolicyAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyAttachments indicates an expected call of ListPolicyAttachments
func (mr *MockCloudDirectoryAPIMockRecorder) ListPolicyAttachments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyAttachments", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPolicyAttachments), arg0)
}

// ListPolicyAttachmentsPages mocks base method
func (m *MockCloudDirectoryAPI) ListPolicyAttachmentsPages(arg0 *clouddirectory.ListPolicyAttachmentsInput, arg1 func(*clouddirectory.ListPolicyAttachmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyAttachmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPolicyAttachmentsPages indicates an expected call of ListPolicyAttachmentsPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListPolicyAttachmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyAttachmentsPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPolicyAttachmentsPages), arg0, arg1)
}

// ListPolicyAttachmentsPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListPolicyAttachmentsPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListPolicyAttachmentsInput, arg2 func(*clouddirectory.ListPolicyAttachmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyAttachmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPolicyAttachmentsPagesWithContext indicates an expected call of ListPolicyAttachmentsPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListPolicyAttachmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyAttachmentsPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPolicyAttachmentsPagesWithContext), varargs...)
}

// ListPolicyAttachmentsRequest mocks base method
func (m *MockCloudDirectoryAPI) ListPolicyAttachmentsRequest(arg0 *clouddirectory.ListPolicyAttachmentsInput) (*request.Request, *clouddirectory.ListPolicyAttachmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyAttachmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListPolicyAttachmentsOutput)
	return ret0, ret1
}

// ListPolicyAttachmentsRequest indicates an expected call of ListPolicyAttachmentsRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListPolicyAttachmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyAttachmentsRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPolicyAttachmentsRequest), arg0)
}

// ListPolicyAttachmentsWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListPolicyAttachmentsWithContext(arg0 context.Context, arg1 *clouddirectory.ListPolicyAttachmentsInput, arg2 ...request.Option) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyAttachmentsWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListPolicyAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyAttachmentsWithContext indicates an expected call of ListPolicyAttachmentsWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListPolicyAttachmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyAttachmentsWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPolicyAttachmentsWithContext), varargs...)
}

// ListPublishedSchemaArns mocks base method
func (m *MockCloudDirectoryAPI) ListPublishedSchemaArns(arg0 *clouddirectory.ListPublishedSchemaArnsInput) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublishedSchemaArns", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListPublishedSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublishedSchemaArns indicates an expected call of ListPublishedSchemaArns
func (mr *MockCloudDirectoryAPIMockRecorder) ListPublishedSchemaArns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishedSchemaArns", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPublishedSchemaArns), arg0)
}

// ListPublishedSchemaArnsPages mocks base method
func (m *MockCloudDirectoryAPI) ListPublishedSchemaArnsPages(arg0 *clouddirectory.ListPublishedSchemaArnsInput, arg1 func(*clouddirectory.ListPublishedSchemaArnsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublishedSchemaArnsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPublishedSchemaArnsPages indicates an expected call of ListPublishedSchemaArnsPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListPublishedSchemaArnsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishedSchemaArnsPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPublishedSchemaArnsPages), arg0, arg1)
}

// ListPublishedSchemaArnsPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListPublishedSchemaArnsPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListPublishedSchemaArnsInput, arg2 func(*clouddirectory.ListPublishedSchemaArnsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPublishedSchemaArnsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPublishedSchemaArnsPagesWithContext indicates an expected call of ListPublishedSchemaArnsPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListPublishedSchemaArnsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishedSchemaArnsPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPublishedSchemaArnsPagesWithContext), varargs...)
}

// ListPublishedSchemaArnsRequest mocks base method
func (m *MockCloudDirectoryAPI) ListPublishedSchemaArnsRequest(arg0 *clouddirectory.ListPublishedSchemaArnsInput) (*request.Request, *clouddirectory.ListPublishedSchemaArnsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublishedSchemaArnsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListPublishedSchemaArnsOutput)
	return ret0, ret1
}

// ListPublishedSchemaArnsRequest indicates an expected call of ListPublishedSchemaArnsRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListPublishedSchemaArnsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishedSchemaArnsRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPublishedSchemaArnsRequest), arg0)
}

// ListPublishedSchemaArnsWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListPublishedSchemaArnsWithContext(arg0 context.Context, arg1 *clouddirectory.ListPublishedSchemaArnsInput, arg2 ...request.Option) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPublishedSchemaArnsWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListPublishedSchemaArnsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublishedSchemaArnsWithContext indicates an expected call of ListPublishedSchemaArnsWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListPublishedSchemaArnsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublishedSchemaArnsWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListPublishedSchemaArnsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCloudDirectoryAPI) ListTagsForResource(arg0 *clouddirectory.ListTagsForResourceInput) (*clouddirectory.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCloudDirectoryAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method
func (m *MockCloudDirectoryAPI) ListTagsForResourcePages(arg0 *clouddirectory.ListTagsForResourceInput, arg1 func(*clouddirectory.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages
func (mr *MockCloudDirectoryAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListTagsForResourceInput, arg2 func(*clouddirectory.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCloudDirectoryAPI) ListTagsForResourceRequest(arg0 *clouddirectory.ListTagsForResourceInput) (*request.Request, *clouddirectory.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *clouddirectory.ListTagsForResourceInput, arg2 ...request.Option) (*clouddirectory.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTypedLinkFacetAttributes mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetAttributes(arg0 *clouddirectory.ListTypedLinkFacetAttributesInput) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypedLinkFacetAttributes", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListTypedLinkFacetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypedLinkFacetAttributes indicates an expected call of ListTypedLinkFacetAttributes
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetAttributes", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetAttributes), arg0)
}

// ListTypedLinkFacetAttributesPages mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetAttributesPages(arg0 *clouddirectory.ListTypedLinkFacetAttributesInput, arg1 func(*clouddirectory.ListTypedLinkFacetAttributesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypedLinkFacetAttributesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTypedLinkFacetAttributesPages indicates an expected call of ListTypedLinkFacetAttributesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetAttributesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetAttributesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetAttributesPages), arg0, arg1)
}

// ListTypedLinkFacetAttributesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetAttributesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListTypedLinkFacetAttributesInput, arg2 func(*clouddirectory.ListTypedLinkFacetAttributesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypedLinkFacetAttributesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTypedLinkFacetAttributesPagesWithContext indicates an expected call of ListTypedLinkFacetAttributesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetAttributesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetAttributesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetAttributesPagesWithContext), varargs...)
}

// ListTypedLinkFacetAttributesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetAttributesRequest(arg0 *clouddirectory.ListTypedLinkFacetAttributesInput) (*request.Request, *clouddirectory.ListTypedLinkFacetAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypedLinkFacetAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListTypedLinkFacetAttributesOutput)
	return ret0, ret1
}

// ListTypedLinkFacetAttributesRequest indicates an expected call of ListTypedLinkFacetAttributesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetAttributesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetAttributesRequest), arg0)
}

// ListTypedLinkFacetAttributesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetAttributesWithContext(arg0 context.Context, arg1 *clouddirectory.ListTypedLinkFacetAttributesInput, arg2 ...request.Option) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypedLinkFacetAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListTypedLinkFacetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypedLinkFacetAttributesWithContext indicates an expected call of ListTypedLinkFacetAttributesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetAttributesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetAttributesWithContext), varargs...)
}

// ListTypedLinkFacetNames mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetNames(arg0 *clouddirectory.ListTypedLinkFacetNamesInput) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypedLinkFacetNames", arg0)
	ret0, _ := ret[0].(*clouddirectory.ListTypedLinkFacetNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypedLinkFacetNames indicates an expected call of ListTypedLinkFacetNames
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetNames", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetNames), arg0)
}

// ListTypedLinkFacetNamesPages mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetNamesPages(arg0 *clouddirectory.ListTypedLinkFacetNamesInput, arg1 func(*clouddirectory.ListTypedLinkFacetNamesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypedLinkFacetNamesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTypedLinkFacetNamesPages indicates an expected call of ListTypedLinkFacetNamesPages
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetNamesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetNamesPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetNamesPages), arg0, arg1)
}

// ListTypedLinkFacetNamesPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetNamesPagesWithContext(arg0 context.Context, arg1 *clouddirectory.ListTypedLinkFacetNamesInput, arg2 func(*clouddirectory.ListTypedLinkFacetNamesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypedLinkFacetNamesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTypedLinkFacetNamesPagesWithContext indicates an expected call of ListTypedLinkFacetNamesPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetNamesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetNamesPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetNamesPagesWithContext), varargs...)
}

// ListTypedLinkFacetNamesRequest mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetNamesRequest(arg0 *clouddirectory.ListTypedLinkFacetNamesInput) (*request.Request, *clouddirectory.ListTypedLinkFacetNamesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypedLinkFacetNamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.ListTypedLinkFacetNamesOutput)
	return ret0, ret1
}

// ListTypedLinkFacetNamesRequest indicates an expected call of ListTypedLinkFacetNamesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetNamesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetNamesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetNamesRequest), arg0)
}

// ListTypedLinkFacetNamesWithContext mocks base method
func (m *MockCloudDirectoryAPI) ListTypedLinkFacetNamesWithContext(arg0 context.Context, arg1 *clouddirectory.ListTypedLinkFacetNamesInput, arg2 ...request.Option) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypedLinkFacetNamesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.ListTypedLinkFacetNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypedLinkFacetNamesWithContext indicates an expected call of ListTypedLinkFacetNamesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) ListTypedLinkFacetNamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypedLinkFacetNamesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).ListTypedLinkFacetNamesWithContext), varargs...)
}

// LookupPolicy mocks base method
func (m *MockCloudDirectoryAPI) LookupPolicy(arg0 *clouddirectory.LookupPolicyInput) (*clouddirectory.LookupPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPolicy", arg0)
	ret0, _ := ret[0].(*clouddirectory.LookupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupPolicy indicates an expected call of LookupPolicy
func (mr *MockCloudDirectoryAPIMockRecorder) LookupPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPolicy", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).LookupPolicy), arg0)
}

// LookupPolicyPages mocks base method
func (m *MockCloudDirectoryAPI) LookupPolicyPages(arg0 *clouddirectory.LookupPolicyInput, arg1 func(*clouddirectory.LookupPolicyOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPolicyPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LookupPolicyPages indicates an expected call of LookupPolicyPages
func (mr *MockCloudDirectoryAPIMockRecorder) LookupPolicyPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPolicyPages", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).LookupPolicyPages), arg0, arg1)
}

// LookupPolicyPagesWithContext mocks base method
func (m *MockCloudDirectoryAPI) LookupPolicyPagesWithContext(arg0 context.Context, arg1 *clouddirectory.LookupPolicyInput, arg2 func(*clouddirectory.LookupPolicyOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupPolicyPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LookupPolicyPagesWithContext indicates an expected call of LookupPolicyPagesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) LookupPolicyPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPolicyPagesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).LookupPolicyPagesWithContext), varargs...)
}

// LookupPolicyRequest mocks base method
func (m *MockCloudDirectoryAPI) LookupPolicyRequest(arg0 *clouddirectory.LookupPolicyInput) (*request.Request, *clouddirectory.LookupPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.LookupPolicyOutput)
	return ret0, ret1
}

// LookupPolicyRequest indicates an expected call of LookupPolicyRequest
func (mr *MockCloudDirectoryAPIMockRecorder) LookupPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPolicyRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).LookupPolicyRequest), arg0)
}

// LookupPolicyWithContext mocks base method
func (m *MockCloudDirectoryAPI) LookupPolicyWithContext(arg0 context.Context, arg1 *clouddirectory.LookupPolicyInput, arg2 ...request.Option) (*clouddirectory.LookupPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookupPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.LookupPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupPolicyWithContext indicates an expected call of LookupPolicyWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) LookupPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupPolicyWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).LookupPolicyWithContext), varargs...)
}

// PublishSchema mocks base method
func (m *MockCloudDirectoryAPI) PublishSchema(arg0 *clouddirectory.PublishSchemaInput) (*clouddirectory.PublishSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSchema", arg0)
	ret0, _ := ret[0].(*clouddirectory.PublishSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishSchema indicates an expected call of PublishSchema
func (mr *MockCloudDirectoryAPIMockRecorder) PublishSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSchema", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).PublishSchema), arg0)
}

// PublishSchemaRequest mocks base method
func (m *MockCloudDirectoryAPI) PublishSchemaRequest(arg0 *clouddirectory.PublishSchemaInput) (*request.Request, *clouddirectory.PublishSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.PublishSchemaOutput)
	return ret0, ret1
}

// PublishSchemaRequest indicates an expected call of PublishSchemaRequest
func (mr *MockCloudDirectoryAPIMockRecorder) PublishSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSchemaRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).PublishSchemaRequest), arg0)
}

// PublishSchemaWithContext mocks base method
func (m *MockCloudDirectoryAPI) PublishSchemaWithContext(arg0 context.Context, arg1 *clouddirectory.PublishSchemaInput, arg2 ...request.Option) (*clouddirectory.PublishSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.PublishSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishSchemaWithContext indicates an expected call of PublishSchemaWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) PublishSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSchemaWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).PublishSchemaWithContext), varargs...)
}

// PutSchemaFromJson mocks base method
func (m *MockCloudDirectoryAPI) PutSchemaFromJson(arg0 *clouddirectory.PutSchemaFromJsonInput) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchemaFromJson", arg0)
	ret0, _ := ret[0].(*clouddirectory.PutSchemaFromJsonOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSchemaFromJson indicates an expected call of PutSchemaFromJson
func (mr *MockCloudDirectoryAPIMockRecorder) PutSchemaFromJson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaFromJson", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).PutSchemaFromJson), arg0)
}

// PutSchemaFromJsonRequest mocks base method
func (m *MockCloudDirectoryAPI) PutSchemaFromJsonRequest(arg0 *clouddirectory.PutSchemaFromJsonInput) (*request.Request, *clouddirectory.PutSchemaFromJsonOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchemaFromJsonRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.PutSchemaFromJsonOutput)
	return ret0, ret1
}

// PutSchemaFromJsonRequest indicates an expected call of PutSchemaFromJsonRequest
func (mr *MockCloudDirectoryAPIMockRecorder) PutSchemaFromJsonRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaFromJsonRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).PutSchemaFromJsonRequest), arg0)
}

// PutSchemaFromJsonWithContext mocks base method
func (m *MockCloudDirectoryAPI) PutSchemaFromJsonWithContext(arg0 context.Context, arg1 *clouddirectory.PutSchemaFromJsonInput, arg2 ...request.Option) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSchemaFromJsonWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.PutSchemaFromJsonOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSchemaFromJsonWithContext indicates an expected call of PutSchemaFromJsonWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) PutSchemaFromJsonWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaFromJsonWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).PutSchemaFromJsonWithContext), varargs...)
}

// RemoveFacetFromObject mocks base method
func (m *MockCloudDirectoryAPI) RemoveFacetFromObject(arg0 *clouddirectory.RemoveFacetFromObjectInput) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFacetFromObject", arg0)
	ret0, _ := ret[0].(*clouddirectory.RemoveFacetFromObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFacetFromObject indicates an expected call of RemoveFacetFromObject
func (mr *MockCloudDirectoryAPIMockRecorder) RemoveFacetFromObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFacetFromObject", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).RemoveFacetFromObject), arg0)
}

// RemoveFacetFromObjectRequest mocks base method
func (m *MockCloudDirectoryAPI) RemoveFacetFromObjectRequest(arg0 *clouddirectory.RemoveFacetFromObjectInput) (*request.Request, *clouddirectory.RemoveFacetFromObjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFacetFromObjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.RemoveFacetFromObjectOutput)
	return ret0, ret1
}

// RemoveFacetFromObjectRequest indicates an expected call of RemoveFacetFromObjectRequest
func (mr *MockCloudDirectoryAPIMockRecorder) RemoveFacetFromObjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFacetFromObjectRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).RemoveFacetFromObjectRequest), arg0)
}

// RemoveFacetFromObjectWithContext mocks base method
func (m *MockCloudDirectoryAPI) RemoveFacetFromObjectWithContext(arg0 context.Context, arg1 *clouddirectory.RemoveFacetFromObjectInput, arg2 ...request.Option) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFacetFromObjectWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.RemoveFacetFromObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFacetFromObjectWithContext indicates an expected call of RemoveFacetFromObjectWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) RemoveFacetFromObjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFacetFromObjectWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).RemoveFacetFromObjectWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCloudDirectoryAPI) TagResource(arg0 *clouddirectory.TagResourceInput) (*clouddirectory.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*clouddirectory.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCloudDirectoryAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCloudDirectoryAPI) TagResourceRequest(arg0 *clouddirectory.TagResourceInput) (*request.Request, *clouddirectory.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCloudDirectoryAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCloudDirectoryAPI) TagResourceWithContext(arg0 context.Context, arg1 *clouddirectory.TagResourceInput, arg2 ...request.Option) (*clouddirectory.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCloudDirectoryAPI) UntagResource(arg0 *clouddirectory.UntagResourceInput) (*clouddirectory.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*clouddirectory.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCloudDirectoryAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCloudDirectoryAPI) UntagResourceRequest(arg0 *clouddirectory.UntagResourceInput) (*request.Request, *clouddirectory.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCloudDirectoryAPI) UntagResourceWithContext(arg0 context.Context, arg1 *clouddirectory.UntagResourceInput, arg2 ...request.Option) (*clouddirectory.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFacet mocks base method
func (m *MockCloudDirectoryAPI) UpdateFacet(arg0 *clouddirectory.UpdateFacetInput) (*clouddirectory.UpdateFacetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFacet", arg0)
	ret0, _ := ret[0].(*clouddirectory.UpdateFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFacet indicates an expected call of UpdateFacet
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateFacet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacet", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateFacet), arg0)
}

// UpdateFacetRequest mocks base method
func (m *MockCloudDirectoryAPI) UpdateFacetRequest(arg0 *clouddirectory.UpdateFacetInput) (*request.Request, *clouddirectory.UpdateFacetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFacetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UpdateFacetOutput)
	return ret0, ret1
}

// UpdateFacetRequest indicates an expected call of UpdateFacetRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateFacetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacetRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateFacetRequest), arg0)
}

// UpdateFacetWithContext mocks base method
func (m *MockCloudDirectoryAPI) UpdateFacetWithContext(arg0 context.Context, arg1 *clouddirectory.UpdateFacetInput, arg2 ...request.Option) (*clouddirectory.UpdateFacetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFacetWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UpdateFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFacetWithContext indicates an expected call of UpdateFacetWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateFacetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacetWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateFacetWithContext), varargs...)
}

// UpdateLinkAttributes mocks base method
func (m *MockCloudDirectoryAPI) UpdateLinkAttributes(arg0 *clouddirectory.UpdateLinkAttributesInput) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkAttributes", arg0)
	ret0, _ := ret[0].(*clouddirectory.UpdateLinkAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkAttributes indicates an expected call of UpdateLinkAttributes
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateLinkAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkAttributes", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateLinkAttributes), arg0)
}

// UpdateLinkAttributesRequest mocks base method
func (m *MockCloudDirectoryAPI) UpdateLinkAttributesRequest(arg0 *clouddirectory.UpdateLinkAttributesInput) (*request.Request, *clouddirectory.UpdateLinkAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLinkAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UpdateLinkAttributesOutput)
	return ret0, ret1
}

// UpdateLinkAttributesRequest indicates an expected call of UpdateLinkAttributesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateLinkAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkAttributesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateLinkAttributesRequest), arg0)
}

// UpdateLinkAttributesWithContext mocks base method
func (m *MockCloudDirectoryAPI) UpdateLinkAttributesWithContext(arg0 context.Context, arg1 *clouddirectory.UpdateLinkAttributesInput, arg2 ...request.Option) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLinkAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UpdateLinkAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkAttributesWithContext indicates an expected call of UpdateLinkAttributesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateLinkAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkAttributesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateLinkAttributesWithContext), varargs...)
}

// UpdateObjectAttributes mocks base method
func (m *MockCloudDirectoryAPI) UpdateObjectAttributes(arg0 *clouddirectory.UpdateObjectAttributesInput) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectAttributes", arg0)
	ret0, _ := ret[0].(*clouddirectory.UpdateObjectAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectAttributes indicates an expected call of UpdateObjectAttributes
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateObjectAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectAttributes", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateObjectAttributes), arg0)
}

// UpdateObjectAttributesRequest mocks base method
func (m *MockCloudDirectoryAPI) UpdateObjectAttributesRequest(arg0 *clouddirectory.UpdateObjectAttributesInput) (*request.Request, *clouddirectory.UpdateObjectAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateObjectAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UpdateObjectAttributesOutput)
	return ret0, ret1
}

// UpdateObjectAttributesRequest indicates an expected call of UpdateObjectAttributesRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateObjectAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectAttributesRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateObjectAttributesRequest), arg0)
}

// UpdateObjectAttributesWithContext mocks base method
func (m *MockCloudDirectoryAPI) UpdateObjectAttributesWithContext(arg0 context.Context, arg1 *clouddirectory.UpdateObjectAttributesInput, arg2 ...request.Option) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateObjectAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UpdateObjectAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateObjectAttributesWithContext indicates an expected call of UpdateObjectAttributesWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateObjectAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectAttributesWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateObjectAttributesWithContext), varargs...)
}

// UpdateSchema mocks base method
func (m *MockCloudDirectoryAPI) UpdateSchema(arg0 *clouddirectory.UpdateSchemaInput) (*clouddirectory.UpdateSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchema", arg0)
	ret0, _ := ret[0].(*clouddirectory.UpdateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchema indicates an expected call of UpdateSchema
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateSchema), arg0)
}

// UpdateSchemaRequest mocks base method
func (m *MockCloudDirectoryAPI) UpdateSchemaRequest(arg0 *clouddirectory.UpdateSchemaInput) (*request.Request, *clouddirectory.UpdateSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UpdateSchemaOutput)
	return ret0, ret1
}

// UpdateSchemaRequest indicates an expected call of UpdateSchemaRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateSchemaRequest), arg0)
}

// UpdateSchemaWithContext mocks base method
func (m *MockCloudDirectoryAPI) UpdateSchemaWithContext(arg0 context.Context, arg1 *clouddirectory.UpdateSchemaInput, arg2 ...request.Option) (*clouddirectory.UpdateSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UpdateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchemaWithContext indicates an expected call of UpdateSchemaWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateSchemaWithContext), varargs...)
}

// UpdateTypedLinkFacet mocks base method
func (m *MockCloudDirectoryAPI) UpdateTypedLinkFacet(arg0 *clouddirectory.UpdateTypedLinkFacetInput) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTypedLinkFacet", arg0)
	ret0, _ := ret[0].(*clouddirectory.UpdateTypedLinkFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTypedLinkFacet indicates an expected call of UpdateTypedLinkFacet
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateTypedLinkFacet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTypedLinkFacet", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateTypedLinkFacet), arg0)
}

// UpdateTypedLinkFacetRequest mocks base method
func (m *MockCloudDirectoryAPI) UpdateTypedLinkFacetRequest(arg0 *clouddirectory.UpdateTypedLinkFacetInput) (*request.Request, *clouddirectory.UpdateTypedLinkFacetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTypedLinkFacetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UpdateTypedLinkFacetOutput)
	return ret0, ret1
}

// UpdateTypedLinkFacetRequest indicates an expected call of UpdateTypedLinkFacetRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateTypedLinkFacetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTypedLinkFacetRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateTypedLinkFacetRequest), arg0)
}

// UpdateTypedLinkFacetWithContext mocks base method
func (m *MockCloudDirectoryAPI) UpdateTypedLinkFacetWithContext(arg0 context.Context, arg1 *clouddirectory.UpdateTypedLinkFacetInput, arg2 ...request.Option) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTypedLinkFacetWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UpdateTypedLinkFacetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTypedLinkFacetWithContext indicates an expected call of UpdateTypedLinkFacetWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UpdateTypedLinkFacetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTypedLinkFacetWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpdateTypedLinkFacetWithContext), varargs...)
}

// UpgradeAppliedSchema mocks base method
func (m *MockCloudDirectoryAPI) UpgradeAppliedSchema(arg0 *clouddirectory.UpgradeAppliedSchemaInput) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeAppliedSchema", arg0)
	ret0, _ := ret[0].(*clouddirectory.UpgradeAppliedSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeAppliedSchema indicates an expected call of UpgradeAppliedSchema
func (mr *MockCloudDirectoryAPIMockRecorder) UpgradeAppliedSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeAppliedSchema", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpgradeAppliedSchema), arg0)
}

// UpgradeAppliedSchemaRequest mocks base method
func (m *MockCloudDirectoryAPI) UpgradeAppliedSchemaRequest(arg0 *clouddirectory.UpgradeAppliedSchemaInput) (*request.Request, *clouddirectory.UpgradeAppliedSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeAppliedSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UpgradeAppliedSchemaOutput)
	return ret0, ret1
}

// UpgradeAppliedSchemaRequest indicates an expected call of UpgradeAppliedSchemaRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UpgradeAppliedSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeAppliedSchemaRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpgradeAppliedSchemaRequest), arg0)
}

// UpgradeAppliedSchemaWithContext mocks base method
func (m *MockCloudDirectoryAPI) UpgradeAppliedSchemaWithContext(arg0 context.Context, arg1 *clouddirectory.UpgradeAppliedSchemaInput, arg2 ...request.Option) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeAppliedSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UpgradeAppliedSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeAppliedSchemaWithContext indicates an expected call of UpgradeAppliedSchemaWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UpgradeAppliedSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeAppliedSchemaWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpgradeAppliedSchemaWithContext), varargs...)
}

// UpgradePublishedSchema mocks base method
func (m *MockCloudDirectoryAPI) UpgradePublishedSchema(arg0 *clouddirectory.UpgradePublishedSchemaInput) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradePublishedSchema", arg0)
	ret0, _ := ret[0].(*clouddirectory.UpgradePublishedSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradePublishedSchema indicates an expected call of UpgradePublishedSchema
func (mr *MockCloudDirectoryAPIMockRecorder) UpgradePublishedSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePublishedSchema", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpgradePublishedSchema), arg0)
}

// UpgradePublishedSchemaRequest mocks base method
func (m *MockCloudDirectoryAPI) UpgradePublishedSchemaRequest(arg0 *clouddirectory.UpgradePublishedSchemaInput) (*request.Request, *clouddirectory.UpgradePublishedSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradePublishedSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*clouddirectory.UpgradePublishedSchemaOutput)
	return ret0, ret1
}

// UpgradePublishedSchemaRequest indicates an expected call of UpgradePublishedSchemaRequest
func (mr *MockCloudDirectoryAPIMockRecorder) UpgradePublishedSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePublishedSchemaRequest", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpgradePublishedSchemaRequest), arg0)
}

// UpgradePublishedSchemaWithContext mocks base method
func (m *MockCloudDirectoryAPI) UpgradePublishedSchemaWithContext(arg0 context.Context, arg1 *clouddirectory.UpgradePublishedSchemaInput, arg2 ...request.Option) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradePublishedSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*clouddirectory.UpgradePublishedSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradePublishedSchemaWithContext indicates an expected call of UpgradePublishedSchemaWithContext
func (mr *MockCloudDirectoryAPIMockRecorder) UpgradePublishedSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePublishedSchemaWithContext", reflect.TypeOf((*MockCloudDirectoryAPI)(nil).UpgradePublishedSchemaWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/wafregional/wafregionaliface (interfaces: WAFRegionalAPI)

// Package wafregionalmock is a generated GoMock package.
package wafregionalmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	waf "github.com/aws/aws-sdk-go/service/waf"
	wafregional "github.com/aws/aws-sdk-go/service/wafregional"
	gomock "github.com/golang/mock/gomock"
)

// MockWAFRegionalAPI is a mock of WAFRegionalAPI interface.
type MockWAFRegionalAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWAFRegionalAPIMockRecorder
}

// MockWAFRegionalAPIMockRecorder is the mock recorder for MockWAFRegionalAPI.
type MockWAFRegionalAPIMockRecorder struct {
	mock *MockWAFRegionalAPI
}

// NewMockWAFRegionalAPI creates a new mock instance.
func NewMockWAFRegionalAPI(ctrl *gomock.Controller) *MockWAFRegionalAPI {
	mock := &MockWAFRegionalAPI{ctrl: ctrl}
	mock.recorder = &MockWAFRegionalAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFRegionalAPI) EXPECT() *MockWAFRegionalAPIMockRecorder {
	return m.recorder
}

// AssociateWebACL mocks base method.
func (m *MockWAFRegionalAPI) AssociateWebACL(arg0 *wafregional.AssociateWebACLInput) (*wafregional.AssociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWebACL", arg0)
	ret0, _ := ret[0].(*wafregional.AssociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWebACL indicates an expected call of AssociateWebACL.
func (mr *MockWAFRegionalAPIMockRecorder) AssociateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACL", reflect.TypeOf((*MockWAFRegionalAPI)(nil).AssociateWebACL), arg0)
}

// AssociateWebACLRequest mocks base method.
func (m *MockWAFRegionalAPI) AssociateWebACLRequest(arg0 *wafregional.AssociateWebACLInput) (*request.Request, *wafregional.AssociateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafregional.AssociateWebACLOutput)
	return ret0, ret1
}

// AssociateWebACLRequest indicates an expected call of AssociateWebACLRequest.
func (mr *MockWAFRegionalAPIMockRecorder) AssociateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACLRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).AssociateWebACLRequest), arg0)
}

// AssociateWebACLWithContext mocks base method.
func (m *MockWAFRegionalAPI) AssociateWebACLWithContext(arg0 context.Context, arg1 *wafregional.AssociateWebACLInput, arg2 ...request.Option) (*wafregional.AssociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafregional.AssociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWebACLWithContext indicates an expected call of AssociateWebACLWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) AssociateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACLWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).AssociateWebACLWithContext), varargs...)
}

// CreateByteMatchSet mocks base method.
func (m *MockWAFRegionalAPI) CreateByteMatchSet(arg0 *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByteMatchSet indicates an expected call of CreateByteMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByteMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateByteMatchSet), arg0)
}

// CreateByteMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateByteMatchSetRequest(arg0 *waf.CreateByteMatchSetInput) (*request.Request, *waf.CreateByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateByteMatchSetOutput)
	return ret0, ret1
}

// CreateByteMatchSetRequest indicates an expected call of CreateByteMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByteMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateByteMatchSetRequest), arg0)
}

// CreateByteMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateByteMatchSetWithContext(arg0 context.Context, arg1 *waf.CreateByteMatchSetInput, arg2 ...request.Option) (*waf.CreateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByteMatchSetWithContext indicates an expected call of CreateByteMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByteMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateByteMatchSetWithContext), varargs...)
}

// CreateGeoMatchSet mocks base method.
func (m *MockWAFRegionalAPI) CreateGeoMatchSet(arg0 *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeoMatchSet indicates an expected call of CreateGeoMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeoMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateGeoMatchSet), arg0)
}

// CreateGeoMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateGeoMatchSetRequest(arg0 *waf.CreateGeoMatchSetInput) (*request.Request, *waf.CreateGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateGeoMatchSetOutput)
	return ret0, ret1
}

// CreateGeoMatchSetRequest indicates an expected call of CreateGeoMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeoMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateGeoMatchSetRequest), arg0)
}

// CreateGeoMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateGeoMatchSetWithContext(arg0 context.Context, arg1 *waf.CreateGeoMatchSetInput, arg2 ...request.Option) (*waf.CreateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeoMatchSetWithContext indicates an expected call of CreateGeoMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeoMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateGeoMatchSetWithContext), varargs...)
}

// CreateIPSet mocks base method.
func (m *MockWAFRegionalAPI) CreateIPSet(arg0 *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPSet", arg0)
	ret0, _ := ret[0].(*waf.CreateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPSet indicates an expected call of CreateIPSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateIPSet), arg0)
}

// CreateIPSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateIPSetRequest(arg0 *waf.CreateIPSetInput) (*request.Request, *waf.CreateIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateIPSetOutput)
	return ret0, ret1
}

// CreateIPSetRequest indicates an expected call of CreateIPSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateIPSetRequest), arg0)
}

// CreateIPSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateIPSetWithContext(arg0 context.Context, arg1 *waf.CreateIPSetInput, arg2 ...request.Option) (*waf.CreateIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPSetWithContext indicates an expected call of CreateIPSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateIPSetWithContext), varargs...)
}

// CreateRateBasedRule mocks base method.
func (m *MockWAFRegionalAPI) CreateRateBasedRule(arg0 *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.CreateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRateBasedRule indicates an expected call of CreateRateBasedRule.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateBasedRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRateBasedRule), arg0)
}

// CreateRateBasedRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateRateBasedRuleRequest(arg0 *waf.CreateRateBasedRuleInput) (*request.Request, *waf.CreateRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRateBasedRuleOutput)
	return ret0, ret1
}

// CreateRateBasedRuleRequest indicates an expected call of CreateRateBasedRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateBasedRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRateBasedRuleRequest), arg0)
}

// CreateRateBasedRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateRateBasedRuleWithContext(arg0 context.Context, arg1 *waf.CreateRateBasedRuleInput, arg2 ...request.Option) (*waf.CreateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRateBasedRuleWithContext indicates an expected call of CreateRateBasedRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateBasedRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRateBasedRuleWithContext), varargs...)
}

// CreateRegexMatchSet mocks base method.
func (m *MockWAFRegionalAPI) CreateRegexMatchSet(arg0 *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexMatchSet indicates an expected call of CreateRegexMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRegexMatchSet), arg0)
}

// CreateRegexMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateRegexMatchSetRequest(arg0 *waf.CreateRegexMatchSetInput) (*request.Request, *waf.CreateRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRegexMatchSetOutput)
	return ret0, ret1
}

// CreateRegexMatchSetRequest indicates an expected call of CreateRegexMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRegexMatchSetRequest), arg0)
}

// CreateRegexMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateRegexMatchSetWithContext(arg0 context.Context, arg1 *waf.CreateRegexMatchSetInput, arg2 ...request.Option) (*waf.CreateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexMatchSetWithContext indicates an expected call of CreateRegexMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRegexMatchSetWithContext), varargs...)
}

// CreateRegexPatternSet mocks base method.
func (m *MockWAFRegionalAPI) CreateRegexPatternSet(arg0 *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.CreateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexPatternSet indicates an expected call of CreateRegexPatternSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRegexPatternSet), arg0)
}

// CreateRegexPatternSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateRegexPatternSetRequest(arg0 *waf.CreateRegexPatternSetInput) (*request.Request, *waf.CreateRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRegexPatternSetOutput)
	return ret0, ret1
}

// CreateRegexPatternSetRequest indicates an expected call of CreateRegexPatternSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRegexPatternSetRequest), arg0)
}

// CreateRegexPatternSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateRegexPatternSetWithContext(arg0 context.Context, arg1 *waf.CreateRegexPatternSetInput, arg2 ...request.Option) (*waf.CreateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexPatternSetWithContext indicates an expected call of CreateRegexPatternSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRegexPatternSetWithContext), varargs...)
}

// CreateRule mocks base method.
func (m *MockWAFRegionalAPI) CreateRule(arg0 *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0)
	ret0, _ := ret[0].(*waf.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRule), arg0)
}

// CreateRuleGroup mocks base method.
func (m *MockWAFRegionalAPI) CreateRuleGroup(arg0 *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.CreateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroup indicates an expected call of CreateRuleGroup.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroup", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRuleGroup), arg0)
}

// CreateRuleGroupRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateRuleGroupRequest(arg0 *waf.CreateRuleGroupInput) (*request.Request, *waf.CreateRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRuleGroupOutput)
	return ret0, ret1
}

// CreateRuleGroupRequest indicates an expected call of CreateRuleGroupRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRuleGroupRequest), arg0)
}

// CreateRuleGroupWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateRuleGroupWithContext(arg0 context.Context, arg1 *waf.CreateRuleGroupInput, arg2 ...request.Option) (*waf.CreateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroupWithContext indicates an expected call of CreateRuleGroupWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRuleGroupWithContext), varargs...)
}

// CreateRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateRuleRequest(arg0 *waf.CreateRuleInput) (*request.Request, *waf.CreateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateRuleOutput)
	return ret0, ret1
}

// CreateRuleRequest indicates an expected call of CreateRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRuleRequest), arg0)
}

// CreateRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateRuleWithContext(arg0 context.Context, arg1 *waf.CreateRuleInput, arg2 ...request.Option) (*waf.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleWithContext indicates an expected call of CreateRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateRuleWithContext), varargs...)
}

// CreateSizeConstraintSet mocks base method.
func (m *MockWAFRegionalAPI) CreateSizeConstraintSet(arg0 *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.CreateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSizeConstraintSet indicates an expected call of CreateSizeConstraintSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSizeConstraintSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateSizeConstraintSet), arg0)
}

// CreateSizeConstraintSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateSizeConstraintSetRequest(arg0 *waf.CreateSizeConstraintSetInput) (*request.Request, *waf.CreateSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateSizeConstraintSetOutput)
	return ret0, ret1
}

// CreateSizeConstraintSetRequest indicates an expected call of CreateSizeConstraintSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSizeConstraintSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateSizeConstraintSetRequest), arg0)
}

// CreateSizeConstraintSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateSizeConstraintSetWithContext(arg0 context.Context, arg1 *waf.CreateSizeConstraintSetInput, arg2 ...request.Option) (*waf.CreateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSizeConstraintSetWithContext indicates an expected call of CreateSizeConstraintSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateSizeConstraintSetWithContext), varargs...)
}

// CreateSqlInjectionMatchSet mocks base method.
func (m *MockWAFRegionalAPI) CreateSqlInjectionMatchSet(arg0 *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSqlInjectionMatchSet indicates an expected call of CreateSqlInjectionMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSqlInjectionMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateSqlInjectionMatchSet), arg0)
}

// CreateSqlInjectionMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateSqlInjectionMatchSetRequest(arg0 *waf.CreateSqlInjectionMatchSetInput) (*request.Request, *waf.CreateSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// CreateSqlInjectionMatchSetRequest indicates an expected call of CreateSqlInjectionMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateSqlInjectionMatchSetRequest), arg0)
}

// CreateSqlInjectionMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateSqlInjectionMatchSetWithContext(arg0 context.Context, arg1 *waf.CreateSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSqlInjectionMatchSetWithContext indicates an expected call of CreateSqlInjectionMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateSqlInjectionMatchSetWithContext), varargs...)
}

// CreateWebACL mocks base method.
func (m *MockWAFRegionalAPI) CreateWebACL(arg0 *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACL", arg0)
	ret0, _ := ret[0].(*waf.CreateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACL indicates an expected call of CreateWebACL.
func (mr *MockWAFRegionalAPIMockRecorder) CreateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACL", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateWebACL), arg0)
}

// CreateWebACLMigrationStack mocks base method.
func (m *MockWAFRegionalAPI) CreateWebACLMigrationStack(arg0 *waf.CreateWebACLMigrationStackInput) (*waf.CreateWebACLMigrationStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACLMigrationStack", arg0)
	ret0, _ := ret[0].(*waf.CreateWebACLMigrationStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACLMigrationStack indicates an expected call of CreateWebACLMigrationStack.
func (mr *MockWAFRegionalAPIMockRecorder) CreateWebACLMigrationStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLMigrationStack", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateWebACLMigrationStack), arg0)
}

// CreateWebACLMigrationStackRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateWebACLMigrationStackRequest(arg0 *waf.CreateWebACLMigrationStackInput) (*request.Request, *waf.CreateWebACLMigrationStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACLMigrationStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateWebACLMigrationStackOutput)
	return ret0, ret1
}

// CreateWebACLMigrationStackRequest indicates an expected call of CreateWebACLMigrationStackRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateWebACLMigrationStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLMigrationStackRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateWebACLMigrationStackRequest), arg0)
}

// CreateWebACLMigrationStackWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateWebACLMigrationStackWithContext(arg0 context.Context, arg1 *waf.CreateWebACLMigrationStackInput, arg2 ...request.Option) (*waf.CreateWebACLMigrationStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebACLMigrationStackWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateWebACLMigrationStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACLMigrationStackWithContext indicates an expected call of CreateWebACLMigrationStackWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateWebACLMigrationStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLMigrationStackWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateWebACLMigrationStackWithContext), varargs...)
}

// CreateWebACLRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateWebACLRequest(arg0 *waf.CreateWebACLInput) (*request.Request, *waf.CreateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateWebACLOutput)
	return ret0, ret1
}

// CreateWebACLRequest indicates an expected call of CreateWebACLRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateWebACLRequest), arg0)
}

// CreateWebACLWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateWebACLWithContext(arg0 context.Context, arg1 *waf.CreateWebACLInput, arg2 ...request.Option) (*waf.CreateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACLWithContext indicates an expected call of CreateWebACLWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateWebACLWithContext), varargs...)
}

// CreateXssMatchSet mocks base method.
func (m *MockWAFRegionalAPI) CreateXssMatchSet(arg0 *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.CreateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateXssMatchSet indicates an expected call of CreateXssMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) CreateXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXssMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateXssMatchSet), arg0)
}

// CreateXssMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) CreateXssMatchSetRequest(arg0 *waf.CreateXssMatchSetInput) (*request.Request, *waf.CreateXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.CreateXssMatchSetOutput)
	return ret0, ret1
}

// CreateXssMatchSetRequest indicates an expected call of CreateXssMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) CreateXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXssMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateXssMatchSetRequest), arg0)
}

// CreateXssMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) CreateXssMatchSetWithContext(arg0 context.Context, arg1 *waf.CreateXssMatchSetInput, arg2 ...request.Option) (*waf.CreateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.CreateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateXssMatchSetWithContext indicates an expected call of CreateXssMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) CreateXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateXssMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).CreateXssMatchSetWithContext), varargs...)
}

// DeleteByteMatchSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteByteMatchSet(arg0 *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByteMatchSet indicates an expected call of DeleteByteMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByteMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteByteMatchSet), arg0)
}

// DeleteByteMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteByteMatchSetRequest(arg0 *waf.DeleteByteMatchSetInput) (*request.Request, *waf.DeleteByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteByteMatchSetOutput)
	return ret0, ret1
}

// DeleteByteMatchSetRequest indicates an expected call of DeleteByteMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByteMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteByteMatchSetRequest), arg0)
}

// DeleteByteMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteByteMatchSetWithContext(arg0 context.Context, arg1 *waf.DeleteByteMatchSetInput, arg2 ...request.Option) (*waf.DeleteByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByteMatchSetWithContext indicates an expected call of DeleteByteMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByteMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteByteMatchSetWithContext), varargs...)
}

// DeleteGeoMatchSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteGeoMatchSet(arg0 *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGeoMatchSet indicates an expected call of DeleteGeoMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeoMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteGeoMatchSet), arg0)
}

// DeleteGeoMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteGeoMatchSetRequest(arg0 *waf.DeleteGeoMatchSetInput) (*request.Request, *waf.DeleteGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteGeoMatchSetOutput)
	return ret0, ret1
}

// DeleteGeoMatchSetRequest indicates an expected call of DeleteGeoMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeoMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteGeoMatchSetRequest), arg0)
}

// DeleteGeoMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteGeoMatchSetWithContext(arg0 context.Context, arg1 *waf.DeleteGeoMatchSetInput, arg2 ...request.Option) (*waf.DeleteGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGeoMatchSetWithContext indicates an expected call of DeleteGeoMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeoMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteGeoMatchSetWithContext), varargs...)
}

// DeleteIPSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteIPSet(arg0 *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPSet indicates an expected call of DeleteIPSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteIPSet), arg0)
}

// DeleteIPSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteIPSetRequest(arg0 *waf.DeleteIPSetInput) (*request.Request, *waf.DeleteIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteIPSetOutput)
	return ret0, ret1
}

// DeleteIPSetRequest indicates an expected call of DeleteIPSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteIPSetRequest), arg0)
}

// DeleteIPSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteIPSetWithContext(arg0 context.Context, arg1 *waf.DeleteIPSetInput, arg2 ...request.Option) (*waf.DeleteIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPSetWithContext indicates an expected call of DeleteIPSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteIPSetWithContext), varargs...)
}

// DeleteLoggingConfiguration mocks base method.
func (m *MockWAFRegionalAPI) DeleteLoggingConfiguration(arg0 *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*waf.DeleteLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoggingConfiguration indicates an expected call of DeleteLoggingConfiguration.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfiguration", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteLoggingConfiguration), arg0)
}

// DeleteLoggingConfigurationRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteLoggingConfigurationRequest(arg0 *waf.DeleteLoggingConfigurationInput) (*request.Request, *waf.DeleteLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteLoggingConfigurationOutput)
	return ret0, ret1
}

// DeleteLoggingConfigurationRequest indicates an expected call of DeleteLoggingConfigurationRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfigurationRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteLoggingConfigurationRequest), arg0)
}

// DeleteLoggingConfigurationWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteLoggingConfigurationWithContext(arg0 context.Context, arg1 *waf.DeleteLoggingConfigurationInput, arg2 ...request.Option) (*waf.DeleteLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoggingConfigurationWithContext indicates an expected call of DeleteLoggingConfigurationWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteLoggingConfigurationWithContext), varargs...)
}

// DeletePermissionPolicy mocks base method.
func (m *MockWAFRegionalAPI) DeletePermissionPolicy(arg0 *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionPolicy", arg0)
	ret0, _ := ret[0].(*waf.DeletePermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionPolicy indicates an expected call of DeletePermissionPolicy.
func (mr *MockWAFRegionalAPIMockRecorder) DeletePermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicy", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeletePermissionPolicy), arg0)
}

// DeletePermissionPolicyRequest mocks base method.
func (m *MockWAFRegionalAPI) DeletePermissionPolicyRequest(arg0 *waf.DeletePermissionPolicyInput) (*request.Request, *waf.DeletePermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeletePermissionPolicyOutput)
	return ret0, ret1
}

// DeletePermissionPolicyRequest indicates an expected call of DeletePermissionPolicyRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeletePermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicyRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeletePermissionPolicyRequest), arg0)
}

// DeletePermissionPolicyWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeletePermissionPolicyWithContext(arg0 context.Context, arg1 *waf.DeletePermissionPolicyInput, arg2 ...request.Option) (*waf.DeletePermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeletePermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionPolicyWithContext indicates an expected call of DeletePermissionPolicyWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeletePermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicyWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeletePermissionPolicyWithContext), varargs...)
}

// DeleteRateBasedRule mocks base method.
func (m *MockWAFRegionalAPI) DeleteRateBasedRule(arg0 *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.DeleteRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRateBasedRule indicates an expected call of DeleteRateBasedRule.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateBasedRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRateBasedRule), arg0)
}

// DeleteRateBasedRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteRateBasedRuleRequest(arg0 *waf.DeleteRateBasedRuleInput) (*request.Request, *waf.DeleteRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRateBasedRuleOutput)
	return ret0, ret1
}

// DeleteRateBasedRuleRequest indicates an expected call of DeleteRateBasedRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateBasedRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRateBasedRuleRequest), arg0)
}

// DeleteRateBasedRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteRateBasedRuleWithContext(arg0 context.Context, arg1 *waf.DeleteRateBasedRuleInput, arg2 ...request.Option) (*waf.DeleteRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRateBasedRuleWithContext indicates an expected call of DeleteRateBasedRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateBasedRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRateBasedRuleWithContext), varargs...)
}

// DeleteRegexMatchSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteRegexMatchSet(arg0 *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexMatchSet indicates an expected call of DeleteRegexMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRegexMatchSet), arg0)
}

// DeleteRegexMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteRegexMatchSetRequest(arg0 *waf.DeleteRegexMatchSetInput) (*request.Request, *waf.DeleteRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRegexMatchSetOutput)
	return ret0, ret1
}

// DeleteRegexMatchSetRequest indicates an expected call of DeleteRegexMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRegexMatchSetRequest), arg0)
}

// DeleteRegexMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteRegexMatchSetWithContext(arg0 context.Context, arg1 *waf.DeleteRegexMatchSetInput, arg2 ...request.Option) (*waf.DeleteRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexMatchSetWithContext indicates an expected call of DeleteRegexMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRegexMatchSetWithContext), varargs...)
}

// DeleteRegexPatternSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteRegexPatternSet(arg0 *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexPatternSet indicates an expected call of DeleteRegexPatternSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRegexPatternSet), arg0)
}

// DeleteRegexPatternSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteRegexPatternSetRequest(arg0 *waf.DeleteRegexPatternSetInput) (*request.Request, *waf.DeleteRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRegexPatternSetOutput)
	return ret0, ret1
}

// DeleteRegexPatternSetRequest indicates an expected call of DeleteRegexPatternSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRegexPatternSetRequest), arg0)
}

// DeleteRegexPatternSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteRegexPatternSetWithContext(arg0 context.Context, arg1 *waf.DeleteRegexPatternSetInput, arg2 ...request.Option) (*waf.DeleteRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexPatternSetWithContext indicates an expected call of DeleteRegexPatternSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRegexPatternSetWithContext), varargs...)
}

// DeleteRule mocks base method.
func (m *MockWAFRegionalAPI) DeleteRule(arg0 *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(*waf.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRule), arg0)
}

// DeleteRuleGroup mocks base method.
func (m *MockWAFRegionalAPI) DeleteRuleGroup(arg0 *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.DeleteRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroup indicates an expected call of DeleteRuleGroup.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroup", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRuleGroup), arg0)
}

// DeleteRuleGroupRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteRuleGroupRequest(arg0 *waf.DeleteRuleGroupInput) (*request.Request, *waf.DeleteRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRuleGroupOutput)
	return ret0, ret1
}

// DeleteRuleGroupRequest indicates an expected call of DeleteRuleGroupRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRuleGroupRequest), arg0)
}

// DeleteRuleGroupWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteRuleGroupWithContext(arg0 context.Context, arg1 *waf.DeleteRuleGroupInput, arg2 ...request.Option) (*waf.DeleteRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroupWithContext indicates an expected call of DeleteRuleGroupWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRuleGroupWithContext), varargs...)
}

// DeleteRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteRuleRequest(arg0 *waf.DeleteRuleInput) (*request.Request, *waf.DeleteRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteRuleOutput)
	return ret0, ret1
}

// DeleteRuleRequest indicates an expected call of DeleteRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRuleRequest), arg0)
}

// DeleteRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteRuleWithContext(arg0 context.Context, arg1 *waf.DeleteRuleInput, arg2 ...request.Option) (*waf.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleWithContext indicates an expected call of DeleteRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteRuleWithContext), varargs...)
}

// DeleteSizeConstraintSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteSizeConstraintSet(arg0 *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSizeConstraintSet indicates an expected call of DeleteSizeConstraintSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSizeConstraintSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteSizeConstraintSet), arg0)
}

// DeleteSizeConstraintSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteSizeConstraintSetRequest(arg0 *waf.DeleteSizeConstraintSetInput) (*request.Request, *waf.DeleteSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteSizeConstraintSetOutput)
	return ret0, ret1
}

// DeleteSizeConstraintSetRequest indicates an expected call of DeleteSizeConstraintSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSizeConstraintSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteSizeConstraintSetRequest), arg0)
}

// DeleteSizeConstraintSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteSizeConstraintSetWithContext(arg0 context.Context, arg1 *waf.DeleteSizeConstraintSetInput, arg2 ...request.Option) (*waf.DeleteSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSizeConstraintSetWithContext indicates an expected call of DeleteSizeConstraintSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteSizeConstraintSetWithContext), varargs...)
}

// DeleteSqlInjectionMatchSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteSqlInjectionMatchSet(arg0 *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSqlInjectionMatchSet indicates an expected call of DeleteSqlInjectionMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlInjectionMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteSqlInjectionMatchSet), arg0)
}

// DeleteSqlInjectionMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteSqlInjectionMatchSetRequest(arg0 *waf.DeleteSqlInjectionMatchSetInput) (*request.Request, *waf.DeleteSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// DeleteSqlInjectionMatchSetRequest indicates an expected call of DeleteSqlInjectionMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteSqlInjectionMatchSetRequest), arg0)
}

// DeleteSqlInjectionMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteSqlInjectionMatchSetWithContext(arg0 context.Context, arg1 *waf.DeleteSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSqlInjectionMatchSetWithContext indicates an expected call of DeleteSqlInjectionMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteSqlInjectionMatchSetWithContext), varargs...)
}

// DeleteWebACL mocks base method.
func (m *MockWAFRegionalAPI) DeleteWebACL(arg0 *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebACL", arg0)
	ret0, _ := ret[0].(*waf.DeleteWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebACL indicates an expected call of DeleteWebACL.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACL", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteWebACL), arg0)
}

// DeleteWebACLRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteWebACLRequest(arg0 *waf.DeleteWebACLInput) (*request.Request, *waf.DeleteWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteWebACLOutput)
	return ret0, ret1
}

// DeleteWebACLRequest indicates an expected call of DeleteWebACLRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACLRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteWebACLRequest), arg0)
}

// DeleteWebACLWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteWebACLWithContext(arg0 context.Context, arg1 *waf.DeleteWebACLInput, arg2 ...request.Option) (*waf.DeleteWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebACLWithContext indicates an expected call of DeleteWebACLWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACLWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteWebACLWithContext), varargs...)
}

// DeleteXssMatchSet mocks base method.
func (m *MockWAFRegionalAPI) DeleteXssMatchSet(arg0 *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.DeleteXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteXssMatchSet indicates an expected call of DeleteXssMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXssMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteXssMatchSet), arg0)
}

// DeleteXssMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) DeleteXssMatchSetRequest(arg0 *waf.DeleteXssMatchSetInput) (*request.Request, *waf.DeleteXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.DeleteXssMatchSetOutput)
	return ret0, ret1
}

// DeleteXssMatchSetRequest indicates an expected call of DeleteXssMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXssMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteXssMatchSetRequest), arg0)
}

// DeleteXssMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) DeleteXssMatchSetWithContext(arg0 context.Context, arg1 *waf.DeleteXssMatchSetInput, arg2 ...request.Option) (*waf.DeleteXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.DeleteXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteXssMatchSetWithContext indicates an expected call of DeleteXssMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DeleteXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteXssMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DeleteXssMatchSetWithContext), varargs...)
}

// DisassociateWebACL mocks base method.
func (m *MockWAFRegionalAPI) DisassociateWebACL(arg0 *wafregional.DisassociateWebACLInput) (*wafregional.DisassociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWebACL", arg0)
	ret0, _ := ret[0].(*wafregional.DisassociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWebACL indicates an expected call of DisassociateWebACL.
func (mr *MockWAFRegionalAPIMockRecorder) DisassociateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACL", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DisassociateWebACL), arg0)
}

// DisassociateWebACLRequest mocks base method.
func (m *MockWAFRegionalAPI) DisassociateWebACLRequest(arg0 *wafregional.DisassociateWebACLInput) (*request.Request, *wafregional.DisassociateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafregional.DisassociateWebACLOutput)
	return ret0, ret1
}

// DisassociateWebACLRequest indicates an expected call of DisassociateWebACLRequest.
func (mr *MockWAFRegionalAPIMockRecorder) DisassociateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACLRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DisassociateWebACLRequest), arg0)
}

// DisassociateWebACLWithContext mocks base method.
func (m *MockWAFRegionalAPI) DisassociateWebACLWithContext(arg0 context.Context, arg1 *wafregional.DisassociateWebACLInput, arg2 ...request.Option) (*wafregional.DisassociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafregional.DisassociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWebACLWithContext indicates an expected call of DisassociateWebACLWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) DisassociateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACLWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).DisassociateWebACLWithContext), varargs...)
}

// GetByteMatchSet mocks base method.
func (m *MockWAFRegionalAPI) GetByteMatchSet(arg0 *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByteMatchSet indicates an expected call of GetByteMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetByteMatchSet), arg0)
}

// GetByteMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetByteMatchSetRequest(arg0 *waf.GetByteMatchSetInput) (*request.Request, *waf.GetByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetByteMatchSetOutput)
	return ret0, ret1
}

// GetByteMatchSetRequest indicates an expected call of GetByteMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetByteMatchSetRequest), arg0)
}

// GetByteMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetByteMatchSetWithContext(arg0 context.Context, arg1 *waf.GetByteMatchSetInput, arg2 ...request.Option) (*waf.GetByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByteMatchSetWithContext indicates an expected call of GetByteMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetByteMatchSetWithContext), varargs...)
}

// GetChangeToken mocks base method.
func (m *MockWAFRegionalAPI) GetChangeToken(arg0 *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeToken", arg0)
	ret0, _ := ret[0].(*waf.GetChangeTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeToken indicates an expected call of GetChangeToken.
func (mr *MockWAFRegionalAPIMockRecorder) GetChangeToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeToken", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetChangeToken), arg0)
}

// GetChangeTokenRequest mocks base method.
func (m *MockWAFRegionalAPI) GetChangeTokenRequest(arg0 *waf.GetChangeTokenInput) (*request.Request, *waf.GetChangeTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetChangeTokenOutput)
	return ret0, ret1
}

// GetChangeTokenRequest indicates an expected call of GetChangeTokenRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetChangeTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetChangeTokenRequest), arg0)
}

// GetChangeTokenStatus mocks base method.
func (m *MockWAFRegionalAPI) GetChangeTokenStatus(arg0 *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeTokenStatus", arg0)
	ret0, _ := ret[0].(*waf.GetChangeTokenStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeTokenStatus indicates an expected call of GetChangeTokenStatus.
func (mr *MockWAFRegionalAPIMockRecorder) GetChangeTokenStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenStatus", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetChangeTokenStatus), arg0)
}

// GetChangeTokenStatusRequest mocks base method.
func (m *MockWAFRegionalAPI) GetChangeTokenStatusRequest(arg0 *waf.GetChangeTokenStatusInput) (*request.Request, *waf.GetChangeTokenStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeTokenStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetChangeTokenStatusOutput)
	return ret0, ret1
}

// GetChangeTokenStatusRequest indicates an expected call of GetChangeTokenStatusRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetChangeTokenStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenStatusRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetChangeTokenStatusRequest), arg0)
}

// GetChangeTokenStatusWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetChangeTokenStatusWithContext(arg0 context.Context, arg1 *waf.GetChangeTokenStatusInput, arg2 ...request.Option) (*waf.GetChangeTokenStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangeTokenStatusWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetChangeTokenStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeTokenStatusWithContext indicates an expected call of GetChangeTokenStatusWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetChangeTokenStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenStatusWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetChangeTokenStatusWithContext), varargs...)
}

// GetChangeTokenWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetChangeTokenWithContext(arg0 context.Context, arg1 *waf.GetChangeTokenInput, arg2 ...request.Option) (*waf.GetChangeTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangeTokenWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetChangeTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeTokenWithContext indicates an expected call of GetChangeTokenWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetChangeTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeTokenWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetChangeTokenWithContext), varargs...)
}

// GetGeoMatchSet mocks base method.
func (m *MockWAFRegionalAPI) GetGeoMatchSet(arg0 *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoMatchSet indicates an expected call of GetGeoMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetGeoMatchSet), arg0)
}

// GetGeoMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetGeoMatchSetRequest(arg0 *waf.GetGeoMatchSetInput) (*request.Request, *waf.GetGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetGeoMatchSetOutput)
	return ret0, ret1
}

// GetGeoMatchSetRequest indicates an expected call of GetGeoMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetGeoMatchSetRequest), arg0)
}

// GetGeoMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetGeoMatchSetWithContext(arg0 context.Context, arg1 *waf.GetGeoMatchSetInput, arg2 ...request.Option) (*waf.GetGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoMatchSetWithContext indicates an expected call of GetGeoMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetGeoMatchSetWithContext), varargs...)
}

// GetIPSet mocks base method.
func (m *MockWAFRegionalAPI) GetIPSet(arg0 *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSet", arg0)
	ret0, _ := ret[0].(*waf.GetIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSet indicates an expected call of GetIPSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetIPSet), arg0)
}

// GetIPSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetIPSetRequest(arg0 *waf.GetIPSetInput) (*request.Request, *waf.GetIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetIPSetOutput)
	return ret0, ret1
}

// GetIPSetRequest indicates an expected call of GetIPSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetIPSetRequest), arg0)
}

// GetIPSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetIPSetWithContext(arg0 context.Context, arg1 *waf.GetIPSetInput, arg2 ...request.Option) (*waf.GetIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSetWithContext indicates an expected call of GetIPSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetIPSetWithContext), varargs...)
}

// GetLoggingConfiguration mocks base method.
func (m *MockWAFRegionalAPI) GetLoggingConfiguration(arg0 *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*waf.GetLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingConfiguration indicates an expected call of GetLoggingConfiguration.
func (mr *MockWAFRegionalAPIMockRecorder) GetLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfiguration", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetLoggingConfiguration), arg0)
}

// GetLoggingConfigurationRequest mocks base method.
func (m *MockWAFRegionalAPI) GetLoggingConfigurationRequest(arg0 *waf.GetLoggingConfigurationInput) (*request.Request, *waf.GetLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetLoggingConfigurationOutput)
	return ret0, ret1
}

// GetLoggingConfigurationRequest indicates an expected call of GetLoggingConfigurationRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfigurationRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetLoggingConfigurationRequest), arg0)
}

// GetLoggingConfigurationWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetLoggingConfigurationWithContext(arg0 context.Context, arg1 *waf.GetLoggingConfigurationInput, arg2 ...request.Option) (*waf.GetLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingConfigurationWithContext indicates an expected call of GetLoggingConfigurationWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetLoggingConfigurationWithContext), varargs...)
}

// GetPermissionPolicy mocks base method.
func (m *MockWAFRegionalAPI) GetPermissionPolicy(arg0 *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionPolicy", arg0)
	ret0, _ := ret[0].(*waf.GetPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionPolicy indicates an expected call of GetPermissionPolicy.
func (mr *MockWAFRegionalAPIMockRecorder) GetPermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicy", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetPermissionPolicy), arg0)
}

// GetPermissionPolicyRequest mocks base method.
func (m *MockWAFRegionalAPI) GetPermissionPolicyRequest(arg0 *waf.GetPermissionPolicyInput) (*request.Request, *waf.GetPermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetPermissionPolicyOutput)
	return ret0, ret1
}

// GetPermissionPolicyRequest indicates an expected call of GetPermissionPolicyRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetPermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicyRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetPermissionPolicyRequest), arg0)
}

// GetPermissionPolicyWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetPermissionPolicyWithContext(arg0 context.Context, arg1 *waf.GetPermissionPolicyInput, arg2 ...request.Option) (*waf.GetPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionPolicyWithContext indicates an expected call of GetPermissionPolicyWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetPermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicyWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetPermissionPolicyWithContext), varargs...)
}

// GetRateBasedRule mocks base method.
func (m *MockWAFRegionalAPI) GetRateBasedRule(arg0 *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRule indicates an expected call of GetRateBasedRule.
func (mr *MockWAFRegionalAPIMockRecorder) GetRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRateBasedRule), arg0)
}

// GetRateBasedRuleManagedKeys mocks base method.
func (m *MockWAFRegionalAPI) GetRateBasedRuleManagedKeys(arg0 *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRuleManagedKeys", arg0)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleManagedKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRuleManagedKeys indicates an expected call of GetRateBasedRuleManagedKeys.
func (mr *MockWAFRegionalAPIMockRecorder) GetRateBasedRuleManagedKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleManagedKeys", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRateBasedRuleManagedKeys), arg0)
}

// GetRateBasedRuleManagedKeysRequest mocks base method.
func (m *MockWAFRegionalAPI) GetRateBasedRuleManagedKeysRequest(arg0 *waf.GetRateBasedRuleManagedKeysInput) (*request.Request, *waf.GetRateBasedRuleManagedKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRuleManagedKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRateBasedRuleManagedKeysOutput)
	return ret0, ret1
}

// GetRateBasedRuleManagedKeysRequest indicates an expected call of GetRateBasedRuleManagedKeysRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetRateBasedRuleManagedKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleManagedKeysRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRateBasedRuleManagedKeysRequest), arg0)
}

// GetRateBasedRuleManagedKeysWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetRateBasedRuleManagedKeysWithContext(arg0 context.Context, arg1 *waf.GetRateBasedRuleManagedKeysInput, arg2 ...request.Option) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRateBasedRuleManagedKeysWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleManagedKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRuleManagedKeysWithContext indicates an expected call of GetRateBasedRuleManagedKeysWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetRateBasedRuleManagedKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleManagedKeysWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRateBasedRuleManagedKeysWithContext), varargs...)
}

// GetRateBasedRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) GetRateBasedRuleRequest(arg0 *waf.GetRateBasedRuleInput) (*request.Request, *waf.GetRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRateBasedRuleOutput)
	return ret0, ret1
}

// GetRateBasedRuleRequest indicates an expected call of GetRateBasedRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRateBasedRuleRequest), arg0)
}

// GetRateBasedRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetRateBasedRuleWithContext(arg0 context.Context, arg1 *waf.GetRateBasedRuleInput, arg2 ...request.Option) (*waf.GetRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedRuleWithContext indicates an expected call of GetRateBasedRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRateBasedRuleWithContext), varargs...)
}

// GetRegexMatchSet mocks base method.
func (m *MockWAFRegionalAPI) GetRegexMatchSet(arg0 *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexMatchSet indicates an expected call of GetRegexMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRegexMatchSet), arg0)
}

// GetRegexMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetRegexMatchSetRequest(arg0 *waf.GetRegexMatchSetInput) (*request.Request, *waf.GetRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRegexMatchSetOutput)
	return ret0, ret1
}

// GetRegexMatchSetRequest indicates an expected call of GetRegexMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRegexMatchSetRequest), arg0)
}

// GetRegexMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetRegexMatchSetWithContext(arg0 context.Context, arg1 *waf.GetRegexMatchSetInput, arg2 ...request.Option) (*waf.GetRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexMatchSetWithContext indicates an expected call of GetRegexMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRegexMatchSetWithContext), varargs...)
}

// GetRegexPatternSet mocks base method.
func (m *MockWAFRegionalAPI) GetRegexPatternSet(arg0 *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.GetRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexPatternSet indicates an expected call of GetRegexPatternSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRegexPatternSet), arg0)
}

// GetRegexPatternSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetRegexPatternSetRequest(arg0 *waf.GetRegexPatternSetInput) (*request.Request, *waf.GetRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRegexPatternSetOutput)
	return ret0, ret1
}

// GetRegexPatternSetRequest indicates an expected call of GetRegexPatternSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRegexPatternSetRequest), arg0)
}

// GetRegexPatternSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetRegexPatternSetWithContext(arg0 context.Context, arg1 *waf.GetRegexPatternSetInput, arg2 ...request.Option) (*waf.GetRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexPatternSetWithContext indicates an expected call of GetRegexPatternSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRegexPatternSetWithContext), varargs...)
}

// GetRule mocks base method.
func (m *MockWAFRegionalAPI) GetRule(arg0 *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", arg0)
	ret0, _ := ret[0].(*waf.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRule indicates an expected call of GetRule.
func (mr *MockWAFRegionalAPIMockRecorder) GetRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRule), arg0)
}

// GetRuleGroup mocks base method.
func (m *MockWAFRegionalAPI) GetRuleGroup(arg0 *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.GetRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleGroup indicates an expected call of GetRuleGroup.
func (mr *MockWAFRegionalAPIMockRecorder) GetRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroup", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRuleGroup), arg0)
}

// GetRuleGroupRequest mocks base method.
func (m *MockWAFRegionalAPI) GetRuleGroupRequest(arg0 *waf.GetRuleGroupInput) (*request.Request, *waf.GetRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRuleGroupOutput)
	return ret0, ret1
}

// GetRuleGroupRequest indicates an expected call of GetRuleGroupRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroupRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRuleGroupRequest), arg0)
}

// GetRuleGroupWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetRuleGroupWithContext(arg0 context.Context, arg1 *waf.GetRuleGroupInput, arg2 ...request.Option) (*waf.GetRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleGroupWithContext indicates an expected call of GetRuleGroupWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroupWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRuleGroupWithContext), varargs...)
}

// GetRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) GetRuleRequest(arg0 *waf.GetRuleInput) (*request.Request, *waf.GetRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetRuleOutput)
	return ret0, ret1
}

// GetRuleRequest indicates an expected call of GetRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRuleRequest), arg0)
}

// GetRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetRuleWithContext(arg0 context.Context, arg1 *waf.GetRuleInput, arg2 ...request.Option) (*waf.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleWithContext indicates an expected call of GetRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetRuleWithContext), varargs...)
}

// GetSampledRequests mocks base method.
func (m *MockWAFRegionalAPI) GetSampledRequests(arg0 *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampledRequests", arg0)
	ret0, _ := ret[0].(*waf.GetSampledRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampledRequests indicates an expected call of GetSampledRequests.
func (mr *MockWAFRegionalAPIMockRecorder) GetSampledRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequests", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSampledRequests), arg0)
}

// GetSampledRequestsRequest mocks base method.
func (m *MockWAFRegionalAPI) GetSampledRequestsRequest(arg0 *waf.GetSampledRequestsInput) (*request.Request, *waf.GetSampledRequestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampledRequestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetSampledRequestsOutput)
	return ret0, ret1
}

// GetSampledRequestsRequest indicates an expected call of GetSampledRequestsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetSampledRequestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequestsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSampledRequestsRequest), arg0)
}

// GetSampledRequestsWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetSampledRequestsWithContext(arg0 context.Context, arg1 *waf.GetSampledRequestsInput, arg2 ...request.Option) (*waf.GetSampledRequestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSampledRequestsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetSampledRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampledRequestsWithContext indicates an expected call of GetSampledRequestsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetSampledRequestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequestsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSampledRequestsWithContext), varargs...)
}

// GetSizeConstraintSet mocks base method.
func (m *MockWAFRegionalAPI) GetSizeConstraintSet(arg0 *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.GetSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSizeConstraintSet indicates an expected call of GetSizeConstraintSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeConstraintSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSizeConstraintSet), arg0)
}

// GetSizeConstraintSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetSizeConstraintSetRequest(arg0 *waf.GetSizeConstraintSetInput) (*request.Request, *waf.GetSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetSizeConstraintSetOutput)
	return ret0, ret1
}

// GetSizeConstraintSetRequest indicates an expected call of GetSizeConstraintSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeConstraintSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSizeConstraintSetRequest), arg0)
}

// GetSizeConstraintSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetSizeConstraintSetWithContext(arg0 context.Context, arg1 *waf.GetSizeConstraintSetInput, arg2 ...request.Option) (*waf.GetSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSizeConstraintSetWithContext indicates an expected call of GetSizeConstraintSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSizeConstraintSetWithContext), varargs...)
}

// GetSqlInjectionMatchSet mocks base method.
func (m *MockWAFRegionalAPI) GetSqlInjectionMatchSet(arg0 *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSqlInjectionMatchSet indicates an expected call of GetSqlInjectionMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlInjectionMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSqlInjectionMatchSet), arg0)
}

// GetSqlInjectionMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetSqlInjectionMatchSetRequest(arg0 *waf.GetSqlInjectionMatchSetInput) (*request.Request, *waf.GetSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// GetSqlInjectionMatchSetRequest indicates an expected call of GetSqlInjectionMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSqlInjectionMatchSetRequest), arg0)
}

// GetSqlInjectionMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetSqlInjectionMatchSetWithContext(arg0 context.Context, arg1 *waf.GetSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.GetSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSqlInjectionMatchSetWithContext indicates an expected call of GetSqlInjectionMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetSqlInjectionMatchSetWithContext), varargs...)
}

// GetWebACL mocks base method.
func (m *MockWAFRegionalAPI) GetWebACL(arg0 *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACL", arg0)
	ret0, _ := ret[0].(*waf.GetWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACL indicates an expected call of GetWebACL.
func (mr *MockWAFRegionalAPIMockRecorder) GetWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACL", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetWebACL), arg0)
}

// GetWebACLForResource mocks base method.
func (m *MockWAFRegionalAPI) GetWebACLForResource(arg0 *wafregional.GetWebACLForResourceInput) (*wafregional.GetWebACLForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLForResource", arg0)
	ret0, _ := ret[0].(*wafregional.GetWebACLForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLForResource indicates an expected call of GetWebACLForResource.
func (mr *MockWAFRegionalAPIMockRecorder) GetWebACLForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResource", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetWebACLForResource), arg0)
}

// GetWebACLForResourceRequest mocks base method.
func (m *MockWAFRegionalAPI) GetWebACLForResourceRequest(arg0 *wafregional.GetWebACLForResourceInput) (*request.Request, *wafregional.GetWebACLForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafregional.GetWebACLForResourceOutput)
	return ret0, ret1
}

// GetWebACLForResourceRequest indicates an expected call of GetWebACLForResourceRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetWebACLForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResourceRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetWebACLForResourceRequest), arg0)
}

// GetWebACLForResourceWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetWebACLForResourceWithContext(arg0 context.Context, arg1 *wafregional.GetWebACLForResourceInput, arg2 ...request.Option) (*wafregional.GetWebACLForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWebACLForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wafregional.GetWebACLForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLForResourceWithContext indicates an expected call of GetWebACLForResourceWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetWebACLForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResourceWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetWebACLForResourceWithContext), varargs...)
}

// GetWebACLRequest mocks base method.
func (m *MockWAFRegionalAPI) GetWebACLRequest(arg0 *waf.GetWebACLInput) (*request.Request, *waf.GetWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetWebACLOutput)
	return ret0, ret1
}

// GetWebACLRequest indicates an expected call of GetWebACLRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetWebACLRequest), arg0)
}

// GetWebACLWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetWebACLWithContext(arg0 context.Context, arg1 *waf.GetWebACLInput, arg2 ...request.Option) (*waf.GetWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLWithContext indicates an expected call of GetWebACLWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetWebACLWithContext), varargs...)
}

// GetXssMatchSet mocks base method.
func (m *MockWAFRegionalAPI) GetXssMatchSet(arg0 *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.GetXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXssMatchSet indicates an expected call of GetXssMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) GetXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXssMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetXssMatchSet), arg0)
}

// GetXssMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) GetXssMatchSetRequest(arg0 *waf.GetXssMatchSetInput) (*request.Request, *waf.GetXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.GetXssMatchSetOutput)
	return ret0, ret1
}

// GetXssMatchSetRequest indicates an expected call of GetXssMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) GetXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXssMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetXssMatchSetRequest), arg0)
}

// GetXssMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) GetXssMatchSetWithContext(arg0 context.Context, arg1 *waf.GetXssMatchSetInput, arg2 ...request.Option) (*waf.GetXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.GetXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXssMatchSetWithContext indicates an expected call of GetXssMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) GetXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXssMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).GetXssMatchSetWithContext), varargs...)
}

// ListActivatedRulesInRuleGroup mocks base method.
func (m *MockWAFRegionalAPI) ListActivatedRulesInRuleGroup(arg0 *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivatedRulesInRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.ListActivatedRulesInRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivatedRulesInRuleGroup indicates an expected call of ListActivatedRulesInRuleGroup.
func (mr *MockWAFRegionalAPIMockRecorder) ListActivatedRulesInRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivatedRulesInRuleGroup", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListActivatedRulesInRuleGroup), arg0)
}

// ListActivatedRulesInRuleGroupRequest mocks base method.
func (m *MockWAFRegionalAPI) ListActivatedRulesInRuleGroupRequest(arg0 *waf.ListActivatedRulesInRuleGroupInput) (*request.Request, *waf.ListActivatedRulesInRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivatedRulesInRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListActivatedRulesInRuleGroupOutput)
	return ret0, ret1
}

// ListActivatedRulesInRuleGroupRequest indicates an expected call of ListActivatedRulesInRuleGroupRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListActivatedRulesInRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivatedRulesInRuleGroupRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListActivatedRulesInRuleGroupRequest), arg0)
}

// ListActivatedRulesInRuleGroupWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListActivatedRulesInRuleGroupWithContext(arg0 context.Context, arg1 *waf.ListActivatedRulesInRuleGroupInput, arg2 ...request.Option) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActivatedRulesInRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListActivatedRulesInRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivatedRulesInRuleGroupWithContext indicates an expected call of ListActivatedRulesInRuleGroupWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListActivatedRulesInRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivatedRulesInRuleGroupWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListActivatedRulesInRuleGroupWithContext), varargs...)
}

// ListByteMatchSets mocks base method.
func (m *MockWAFRegionalAPI) ListByteMatchSets(arg0 *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByteMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListByteMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByteMatchSets indicates an expected call of ListByteMatchSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListByteMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByteMatchSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListByteMatchSets), arg0)
}

// ListByteMatchSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListByteMatchSetsRequest(arg0 *waf.ListByteMatchSetsInput) (*request.Request, *waf.ListByteMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByteMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListByteMatchSetsOutput)
	return ret0, ret1
}

// ListByteMatchSetsRequest indicates an expected call of ListByteMatchSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListByteMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByteMatchSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListByteMatchSetsRequest), arg0)
}

// ListByteMatchSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListByteMatchSetsWithContext(arg0 context.Context, arg1 *waf.ListByteMatchSetsInput, arg2 ...request.Option) (*waf.ListByteMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByteMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListByteMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByteMatchSetsWithContext indicates an expected call of ListByteMatchSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListByteMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByteMatchSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListByteMatchSetsWithContext), varargs...)
}

// ListGeoMatchSets mocks base method.
func (m *MockWAFRegionalAPI) ListGeoMatchSets(arg0 *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeoMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListGeoMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeoMatchSets indicates an expected call of ListGeoMatchSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListGeoMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoMatchSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListGeoMatchSets), arg0)
}

// ListGeoMatchSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListGeoMatchSetsRequest(arg0 *waf.ListGeoMatchSetsInput) (*request.Request, *waf.ListGeoMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeoMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListGeoMatchSetsOutput)
	return ret0, ret1
}

// ListGeoMatchSetsRequest indicates an expected call of ListGeoMatchSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListGeoMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoMatchSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListGeoMatchSetsRequest), arg0)
}

// ListGeoMatchSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListGeoMatchSetsWithContext(arg0 context.Context, arg1 *waf.ListGeoMatchSetsInput, arg2 ...request.Option) (*waf.ListGeoMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeoMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListGeoMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeoMatchSetsWithContext indicates an expected call of ListGeoMatchSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListGeoMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoMatchSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListGeoMatchSetsWithContext), varargs...)
}

// ListIPSets mocks base method.
func (m *MockWAFRegionalAPI) ListIPSets(arg0 *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPSets", arg0)
	ret0, _ := ret[0].(*waf.ListIPSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPSets indicates an expected call of ListIPSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListIPSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListIPSets), arg0)
}

// ListIPSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListIPSetsRequest(arg0 *waf.ListIPSetsInput) (*request.Request, *waf.ListIPSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListIPSetsOutput)
	return ret0, ret1
}

// ListIPSetsRequest indicates an expected call of ListIPSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListIPSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListIPSetsRequest), arg0)
}

// ListIPSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListIPSetsWithContext(arg0 context.Context, arg1 *waf.ListIPSetsInput, arg2 ...request.Option) (*waf.ListIPSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListIPSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPSetsWithContext indicates an expected call of ListIPSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListIPSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListIPSetsWithContext), varargs...)
}

// ListLoggingConfigurations mocks base method.
func (m *MockWAFRegionalAPI) ListLoggingConfigurations(arg0 *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoggingConfigurations", arg0)
	ret0, _ := ret[0].(*waf.ListLoggingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoggingConfigurations indicates an expected call of ListLoggingConfigurations.
func (mr *MockWAFRegionalAPIMockRecorder) ListLoggingConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurations", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListLoggingConfigurations), arg0)
}

// ListLoggingConfigurationsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListLoggingConfigurationsRequest(arg0 *waf.ListLoggingConfigurationsInput) (*request.Request, *waf.ListLoggingConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoggingConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListLoggingConfigurationsOutput)
	return ret0, ret1
}

// ListLoggingConfigurationsRequest indicates an expected call of ListLoggingConfigurationsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListLoggingConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurationsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListLoggingConfigurationsRequest), arg0)
}

// ListLoggingConfigurationsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListLoggingConfigurationsWithContext(arg0 context.Context, arg1 *waf.ListLoggingConfigurationsInput, arg2 ...request.Option) (*waf.ListLoggingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLoggingConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListLoggingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoggingConfigurationsWithContext indicates an expected call of ListLoggingConfigurationsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListLoggingConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurationsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListLoggingConfigurationsWithContext), varargs...)
}

// ListRateBasedRules mocks base method.
func (m *MockWAFRegionalAPI) ListRateBasedRules(arg0 *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRateBasedRules", arg0)
	ret0, _ := ret[0].(*waf.ListRateBasedRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateBasedRules indicates an expected call of ListRateBasedRules.
func (mr *MockWAFRegionalAPIMockRecorder) ListRateBasedRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateBasedRules", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRateBasedRules), arg0)
}

// ListRateBasedRulesRequest mocks base method.
func (m *MockWAFRegionalAPI) ListRateBasedRulesRequest(arg0 *waf.ListRateBasedRulesInput) (*request.Request, *waf.ListRateBasedRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRateBasedRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRateBasedRulesOutput)
	return ret0, ret1
}

// ListRateBasedRulesRequest indicates an expected call of ListRateBasedRulesRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListRateBasedRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateBasedRulesRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRateBasedRulesRequest), arg0)
}

// ListRateBasedRulesWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListRateBasedRulesWithContext(arg0 context.Context, arg1 *waf.ListRateBasedRulesInput, arg2 ...request.Option) (*waf.ListRateBasedRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateBasedRulesWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRateBasedRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateBasedRulesWithContext indicates an expected call of ListRateBasedRulesWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListRateBasedRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateBasedRulesWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRateBasedRulesWithContext), varargs...)
}

// ListRegexMatchSets mocks base method.
func (m *MockWAFRegionalAPI) ListRegexMatchSets(arg0 *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListRegexMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexMatchSets indicates an expected call of ListRegexMatchSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListRegexMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexMatchSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRegexMatchSets), arg0)
}

// ListRegexMatchSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListRegexMatchSetsRequest(arg0 *waf.ListRegexMatchSetsInput) (*request.Request, *waf.ListRegexMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRegexMatchSetsOutput)
	return ret0, ret1
}

// ListRegexMatchSetsRequest indicates an expected call of ListRegexMatchSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListRegexMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexMatchSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRegexMatchSetsRequest), arg0)
}

// ListRegexMatchSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListRegexMatchSetsWithContext(arg0 context.Context, arg1 *waf.ListRegexMatchSetsInput, arg2 ...request.Option) (*waf.ListRegexMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegexMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRegexMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexMatchSetsWithContext indicates an expected call of ListRegexMatchSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListRegexMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexMatchSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRegexMatchSetsWithContext), varargs...)
}

// ListRegexPatternSets mocks base method.
func (m *MockWAFRegionalAPI) ListRegexPatternSets(arg0 *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexPatternSets", arg0)
	ret0, _ := ret[0].(*waf.ListRegexPatternSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexPatternSets indicates an expected call of ListRegexPatternSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListRegexPatternSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRegexPatternSets), arg0)
}

// ListRegexPatternSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListRegexPatternSetsRequest(arg0 *waf.ListRegexPatternSetsInput) (*request.Request, *waf.ListRegexPatternSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexPatternSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRegexPatternSetsOutput)
	return ret0, ret1
}

// ListRegexPatternSetsRequest indicates an expected call of ListRegexPatternSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListRegexPatternSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRegexPatternSetsRequest), arg0)
}

// ListRegexPatternSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListRegexPatternSetsWithContext(arg0 context.Context, arg1 *waf.ListRegexPatternSetsInput, arg2 ...request.Option) (*waf.ListRegexPatternSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegexPatternSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRegexPatternSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexPatternSetsWithContext indicates an expected call of ListRegexPatternSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListRegexPatternSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRegexPatternSetsWithContext), varargs...)
}

// ListResourcesForWebACL mocks base method.
func (m *MockWAFRegionalAPI) ListResourcesForWebACL(arg0 *wafregional.ListResourcesForWebACLInput) (*wafregional.ListResourcesForWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesForWebACL", arg0)
	ret0, _ := ret[0].(*wafregional.ListResourcesForWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesForWebACL indicates an expected call of ListResourcesForWebACL.
func (mr *MockWAFRegionalAPIMockRecorder) ListResourcesForWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForWebACL", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListResourcesForWebACL), arg0)
}

// ListResourcesForWebACLRequest mocks base method.
func (m *MockWAFRegionalAPI) ListResourcesForWebACLRequest(arg0 *wafregional.ListResourcesForWebACLInput) (*request.Request, *wafregional.ListResourcesForWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesForWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafregional.ListResourcesForWebACLOutput)
	return ret0, ret1
}

// ListResourcesForWebACLRequest indicates an expected call of ListResourcesForWebACLRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListResourcesForWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForWebACLRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListResourcesForWebACLRequest), arg0)
}

// ListResourcesForWebACLWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListResourcesForWebACLWithContext(arg0 context.Context, arg1 *wafregional.ListResourcesForWebACLInput, arg2 ...request.Option) (*wafregional.ListResourcesForWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesForWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafregional.ListResourcesForWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesForWebACLWithContext indicates an expected call of ListResourcesForWebACLWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListResourcesForWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForWebACLWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListResourcesForWebACLWithContext), varargs...)
}

// ListRuleGroups mocks base method.
func (m *MockWAFRegionalAPI) ListRuleGroups(arg0 *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroups", arg0)
	ret0, _ := ret[0].(*waf.ListRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroups indicates an expected call of ListRuleGroups.
func (mr *MockWAFRegionalAPIMockRecorder) ListRuleGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroups", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRuleGroups), arg0)
}

// ListRuleGroupsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListRuleGroupsRequest(arg0 *waf.ListRuleGroupsInput) (*request.Request, *waf.ListRuleGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRuleGroupsOutput)
	return ret0, ret1
}

// ListRuleGroupsRequest indicates an expected call of ListRuleGroupsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListRuleGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRuleGroupsRequest), arg0)
}

// ListRuleGroupsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListRuleGroupsWithContext(arg0 context.Context, arg1 *waf.ListRuleGroupsInput, arg2 ...request.Option) (*waf.ListRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroupsWithContext indicates an expected call of ListRuleGroupsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListRuleGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRuleGroupsWithContext), varargs...)
}

// ListRules mocks base method.
func (m *MockWAFRegionalAPI) ListRules(arg0 *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].(*waf.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockWAFRegionalAPIMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRules), arg0)
}

// ListRulesRequest mocks base method.
func (m *MockWAFRegionalAPI) ListRulesRequest(arg0 *waf.ListRulesInput) (*request.Request, *waf.ListRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListRulesOutput)
	return ret0, ret1
}

// ListRulesRequest indicates an expected call of ListRulesRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRulesRequest), arg0)
}

// ListRulesWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListRulesWithContext(arg0 context.Context, arg1 *waf.ListRulesInput, arg2 ...request.Option) (*waf.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesWithContext indicates an expected call of ListRulesWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListRulesWithContext), varargs...)
}

// ListSizeConstraintSets mocks base method.
func (m *MockWAFRegionalAPI) ListSizeConstraintSets(arg0 *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSizeConstraintSets", arg0)
	ret0, _ := ret[0].(*waf.ListSizeConstraintSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSizeConstraintSets indicates an expected call of ListSizeConstraintSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListSizeConstraintSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSizeConstraintSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSizeConstraintSets), arg0)
}

// ListSizeConstraintSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListSizeConstraintSetsRequest(arg0 *waf.ListSizeConstraintSetsInput) (*request.Request, *waf.ListSizeConstraintSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSizeConstraintSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListSizeConstraintSetsOutput)
	return ret0, ret1
}

// ListSizeConstraintSetsRequest indicates an expected call of ListSizeConstraintSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListSizeConstraintSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSizeConstraintSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSizeConstraintSetsRequest), arg0)
}

// ListSizeConstraintSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListSizeConstraintSetsWithContext(arg0 context.Context, arg1 *waf.ListSizeConstraintSetsInput, arg2 ...request.Option) (*waf.ListSizeConstraintSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSizeConstraintSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListSizeConstraintSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSizeConstraintSetsWithContext indicates an expected call of ListSizeConstraintSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListSizeConstraintSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSizeConstraintSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSizeConstraintSetsWithContext), varargs...)
}

// ListSqlInjectionMatchSets mocks base method.
func (m *MockWAFRegionalAPI) ListSqlInjectionMatchSets(arg0 *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSqlInjectionMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListSqlInjectionMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSqlInjectionMatchSets indicates an expected call of ListSqlInjectionMatchSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListSqlInjectionMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSqlInjectionMatchSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSqlInjectionMatchSets), arg0)
}

// ListSqlInjectionMatchSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListSqlInjectionMatchSetsRequest(arg0 *waf.ListSqlInjectionMatchSetsInput) (*request.Request, *waf.ListSqlInjectionMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSqlInjectionMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListSqlInjectionMatchSetsOutput)
	return ret0, ret1
}

// ListSqlInjectionMatchSetsRequest indicates an expected call of ListSqlInjectionMatchSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListSqlInjectionMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSqlInjectionMatchSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSqlInjectionMatchSetsRequest), arg0)
}

// ListSqlInjectionMatchSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListSqlInjectionMatchSetsWithContext(arg0 context.Context, arg1 *waf.ListSqlInjectionMatchSetsInput, arg2 ...request.Option) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSqlInjectionMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListSqlInjectionMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSqlInjectionMatchSetsWithContext indicates an expected call of ListSqlInjectionMatchSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListSqlInjectionMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSqlInjectionMatchSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSqlInjectionMatchSetsWithContext), varargs...)
}

// ListSubscribedRuleGroups mocks base method.
func (m *MockWAFRegionalAPI) ListSubscribedRuleGroups(arg0 *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribedRuleGroups", arg0)
	ret0, _ := ret[0].(*waf.ListSubscribedRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribedRuleGroups indicates an expected call of ListSubscribedRuleGroups.
func (mr *MockWAFRegionalAPIMockRecorder) ListSubscribedRuleGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribedRuleGroups", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSubscribedRuleGroups), arg0)
}

// ListSubscribedRuleGroupsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListSubscribedRuleGroupsRequest(arg0 *waf.ListSubscribedRuleGroupsInput) (*request.Request, *waf.ListSubscribedRuleGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscribedRuleGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListSubscribedRuleGroupsOutput)
	return ret0, ret1
}

// ListSubscribedRuleGroupsRequest indicates an expected call of ListSubscribedRuleGroupsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListSubscribedRuleGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribedRuleGroupsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSubscribedRuleGroupsRequest), arg0)
}

// ListSubscribedRuleGroupsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListSubscribedRuleGroupsWithContext(arg0 context.Context, arg1 *waf.ListSubscribedRuleGroupsInput, arg2 ...request.Option) (*waf.ListSubscribedRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubscribedRuleGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListSubscribedRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscribedRuleGroupsWithContext indicates an expected call of ListSubscribedRuleGroupsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListSubscribedRuleGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscribedRuleGroupsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListSubscribedRuleGroupsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockWAFRegionalAPI) ListTagsForResource(arg0 *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*waf.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockWAFRegionalAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockWAFRegionalAPI) ListTagsForResourceRequest(arg0 *waf.ListTagsForResourceInput) (*request.Request, *waf.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *waf.ListTagsForResourceInput, arg2 ...request.Option) (*waf.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWebACLs mocks base method.
func (m *MockWAFRegionalAPI) ListWebACLs(arg0 *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebACLs", arg0)
	ret0, _ := ret[0].(*waf.ListWebACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebACLs indicates an expected call of ListWebACLs.
func (mr *MockWAFRegionalAPIMockRecorder) ListWebACLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLs", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListWebACLs), arg0)
}

// ListWebACLsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListWebACLsRequest(arg0 *waf.ListWebACLsInput) (*request.Request, *waf.ListWebACLsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebACLsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListWebACLsOutput)
	return ret0, ret1
}

// ListWebACLsRequest indicates an expected call of ListWebACLsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListWebACLsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListWebACLsRequest), arg0)
}

// ListWebACLsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListWebACLsWithContext(arg0 context.Context, arg1 *waf.ListWebACLsInput, arg2 ...request.Option) (*waf.ListWebACLsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebACLsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListWebACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebACLsWithContext indicates an expected call of ListWebACLsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListWebACLsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListWebACLsWithContext), varargs...)
}

// ListXssMatchSets mocks base method.
func (m *MockWAFRegionalAPI) ListXssMatchSets(arg0 *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListXssMatchSets", arg0)
	ret0, _ := ret[0].(*waf.ListXssMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXssMatchSets indicates an expected call of ListXssMatchSets.
func (mr *MockWAFRegionalAPIMockRecorder) ListXssMatchSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXssMatchSets", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListXssMatchSets), arg0)
}

// ListXssMatchSetsRequest mocks base method.
func (m *MockWAFRegionalAPI) ListXssMatchSetsRequest(arg0 *waf.ListXssMatchSetsInput) (*request.Request, *waf.ListXssMatchSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListXssMatchSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.ListXssMatchSetsOutput)
	return ret0, ret1
}

// ListXssMatchSetsRequest indicates an expected call of ListXssMatchSetsRequest.
func (mr *MockWAFRegionalAPIMockRecorder) ListXssMatchSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXssMatchSetsRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListXssMatchSetsRequest), arg0)
}

// ListXssMatchSetsWithContext mocks base method.
func (m *MockWAFRegionalAPI) ListXssMatchSetsWithContext(arg0 context.Context, arg1 *waf.ListXssMatchSetsInput, arg2 ...request.Option) (*waf.ListXssMatchSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListXssMatchSetsWithContext", varargs...)
	ret0, _ := ret[0].(*waf.ListXssMatchSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListXssMatchSetsWithContext indicates an expected call of ListXssMatchSetsWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) ListXssMatchSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListXssMatchSetsWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).ListXssMatchSetsWithContext), varargs...)
}

// PutLoggingConfiguration mocks base method.
func (m *MockWAFRegionalAPI) PutLoggingConfiguration(arg0 *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*waf.PutLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingConfiguration indicates an expected call of PutLoggingConfiguration.
func (mr *MockWAFRegionalAPIMockRecorder) PutLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfiguration", reflect.TypeOf((*MockWAFRegionalAPI)(nil).PutLoggingConfiguration), arg0)
}

// PutLoggingConfigurationRequest mocks base method.
func (m *MockWAFRegionalAPI) PutLoggingConfigurationRequest(arg0 *waf.PutLoggingConfigurationInput) (*request.Request, *waf.PutLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.PutLoggingConfigurationOutput)
	return ret0, ret1
}

// PutLoggingConfigurationRequest indicates an expected call of PutLoggingConfigurationRequest.
func (mr *MockWAFRegionalAPIMockRecorder) PutLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfigurationRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).PutLoggingConfigurationRequest), arg0)
}

// PutLoggingConfigurationWithContext mocks base method.
func (m *MockWAFRegionalAPI) PutLoggingConfigurationWithContext(arg0 context.Context, arg1 *waf.PutLoggingConfigurationInput, arg2 ...request.Option) (*waf.PutLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*waf.PutLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingConfigurationWithContext indicates an expected call of PutLoggingConfigurationWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) PutLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).PutLoggingConfigurationWithContext), varargs...)
}

// PutPermissionPolicy mocks base method.
func (m *MockWAFRegionalAPI) PutPermissionPolicy(arg0 *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionPolicy", arg0)
	ret0, _ := ret[0].(*waf.PutPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionPolicy indicates an expected call of PutPermissionPolicy.
func (mr *MockWAFRegionalAPIMockRecorder) PutPermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicy", reflect.TypeOf((*MockWAFRegionalAPI)(nil).PutPermissionPolicy), arg0)
}

// PutPermissionPolicyRequest mocks base method.
func (m *MockWAFRegionalAPI) PutPermissionPolicyRequest(arg0 *waf.PutPermissionPolicyInput) (*request.Request, *waf.PutPermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.PutPermissionPolicyOutput)
	return ret0, ret1
}

// PutPermissionPolicyRequest indicates an expected call of PutPermissionPolicyRequest.
func (mr *MockWAFRegionalAPIMockRecorder) PutPermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicyRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).PutPermissionPolicyRequest), arg0)
}

// PutPermissionPolicyWithContext mocks base method.
func (m *MockWAFRegionalAPI) PutPermissionPolicyWithContext(arg0 context.Context, arg1 *waf.PutPermissionPolicyInput, arg2 ...request.Option) (*waf.PutPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*waf.PutPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionPolicyWithContext indicates an expected call of PutPermissionPolicyWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) PutPermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicyWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).PutPermissionPolicyWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockWAFRegionalAPI) TagResource(arg0 *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*waf.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockWAFRegionalAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockWAFRegionalAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockWAFRegionalAPI) TagResourceRequest(arg0 *waf.TagResourceInput) (*request.Request, *waf.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockWAFRegionalAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockWAFRegionalAPI) TagResourceWithContext(arg0 context.Context, arg1 *waf.TagResourceInput, arg2 ...request.Option) (*waf.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*waf.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockWAFRegionalAPI) UntagResource(arg0 *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*waf.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockWAFRegionalAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockWAFRegionalAPI) UntagResourceRequest(arg0 *waf.UntagResourceInput) (*request.Request, *waf.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockWAFRegionalAPI) UntagResourceWithContext(arg0 context.Context, arg1 *waf.UntagResourceInput, arg2 ...request.Option) (*waf.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateByteMatchSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateByteMatchSet(arg0 *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByteMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByteMatchSet indicates an expected call of UpdateByteMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateByteMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByteMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateByteMatchSet), arg0)
}

// UpdateByteMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateByteMatchSetRequest(arg0 *waf.UpdateByteMatchSetInput) (*request.Request, *waf.UpdateByteMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByteMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateByteMatchSetOutput)
	return ret0, ret1
}

// UpdateByteMatchSetRequest indicates an expected call of UpdateByteMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateByteMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByteMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateByteMatchSetRequest), arg0)
}

// UpdateByteMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateByteMatchSetWithContext(arg0 context.Context, arg1 *waf.UpdateByteMatchSetInput, arg2 ...request.Option) (*waf.UpdateByteMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateByteMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateByteMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByteMatchSetWithContext indicates an expected call of UpdateByteMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateByteMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByteMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateByteMatchSetWithContext), varargs...)
}

// UpdateGeoMatchSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateGeoMatchSet(arg0 *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeoMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGeoMatchSet indicates an expected call of UpdateGeoMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateGeoMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeoMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateGeoMatchSet), arg0)
}

// UpdateGeoMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateGeoMatchSetRequest(arg0 *waf.UpdateGeoMatchSetInput) (*request.Request, *waf.UpdateGeoMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeoMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateGeoMatchSetOutput)
	return ret0, ret1
}

// UpdateGeoMatchSetRequest indicates an expected call of UpdateGeoMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateGeoMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeoMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateGeoMatchSetRequest), arg0)
}

// UpdateGeoMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateGeoMatchSetWithContext(arg0 context.Context, arg1 *waf.UpdateGeoMatchSetInput, arg2 ...request.Option) (*waf.UpdateGeoMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGeoMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateGeoMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGeoMatchSetWithContext indicates an expected call of UpdateGeoMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateGeoMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeoMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateGeoMatchSetWithContext), varargs...)
}

// UpdateIPSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateIPSet(arg0 *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSet indicates an expected call of UpdateIPSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateIPSet), arg0)
}

// UpdateIPSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateIPSetRequest(arg0 *waf.UpdateIPSetInput) (*request.Request, *waf.UpdateIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateIPSetOutput)
	return ret0, ret1
}

// UpdateIPSetRequest indicates an expected call of UpdateIPSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateIPSetRequest), arg0)
}

// UpdateIPSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateIPSetWithContext(arg0 context.Context, arg1 *waf.UpdateIPSetInput, arg2 ...request.Option) (*waf.UpdateIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSetWithContext indicates an expected call of UpdateIPSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateIPSetWithContext), varargs...)
}

// UpdateRateBasedRule mocks base method.
func (m *MockWAFRegionalAPI) UpdateRateBasedRule(arg0 *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateBasedRule", arg0)
	ret0, _ := ret[0].(*waf.UpdateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRateBasedRule indicates an expected call of UpdateRateBasedRule.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRateBasedRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateBasedRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRateBasedRule), arg0)
}

// UpdateRateBasedRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateRateBasedRuleRequest(arg0 *waf.UpdateRateBasedRuleInput) (*request.Request, *waf.UpdateRateBasedRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateBasedRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRateBasedRuleOutput)
	return ret0, ret1
}

// UpdateRateBasedRuleRequest indicates an expected call of UpdateRateBasedRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRateBasedRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateBasedRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRateBasedRuleRequest), arg0)
}

// UpdateRateBasedRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateRateBasedRuleWithContext(arg0 context.Context, arg1 *waf.UpdateRateBasedRuleInput, arg2 ...request.Option) (*waf.UpdateRateBasedRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateBasedRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRateBasedRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRateBasedRuleWithContext indicates an expected call of UpdateRateBasedRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRateBasedRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateBasedRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRateBasedRuleWithContext), varargs...)
}

// UpdateRegexMatchSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateRegexMatchSet(arg0 *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexMatchSet indicates an expected call of UpdateRegexMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRegexMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRegexMatchSet), arg0)
}

// UpdateRegexMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateRegexMatchSetRequest(arg0 *waf.UpdateRegexMatchSetInput) (*request.Request, *waf.UpdateRegexMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRegexMatchSetOutput)
	return ret0, ret1
}

// UpdateRegexMatchSetRequest indicates an expected call of UpdateRegexMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRegexMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRegexMatchSetRequest), arg0)
}

// UpdateRegexMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateRegexMatchSetWithContext(arg0 context.Context, arg1 *waf.UpdateRegexMatchSetInput, arg2 ...request.Option) (*waf.UpdateRegexMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegexMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRegexMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexMatchSetWithContext indicates an expected call of UpdateRegexMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRegexMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRegexMatchSetWithContext), varargs...)
}

// UpdateRegexPatternSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateRegexPatternSet(arg0 *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexPatternSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexPatternSet indicates an expected call of UpdateRegexPatternSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRegexPatternSet), arg0)
}

// UpdateRegexPatternSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateRegexPatternSetRequest(arg0 *waf.UpdateRegexPatternSetInput) (*request.Request, *waf.UpdateRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRegexPatternSetOutput)
	return ret0, ret1
}

// UpdateRegexPatternSetRequest indicates an expected call of UpdateRegexPatternSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRegexPatternSetRequest), arg0)
}

// UpdateRegexPatternSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateRegexPatternSetWithContext(arg0 context.Context, arg1 *waf.UpdateRegexPatternSetInput, arg2 ...request.Option) (*waf.UpdateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexPatternSetWithContext indicates an expected call of UpdateRegexPatternSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRegexPatternSetWithContext), varargs...)
}

// UpdateRule mocks base method.
func (m *MockWAFRegionalAPI) UpdateRule(arg0 *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRule", arg0)
	ret0, _ := ret[0].(*waf.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRule indicates an expected call of UpdateRule.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRule", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRule), arg0)
}

// UpdateRuleGroup mocks base method.
func (m *MockWAFRegionalAPI) UpdateRuleGroup(arg0 *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleGroup", arg0)
	ret0, _ := ret[0].(*waf.UpdateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleGroup indicates an expected call of UpdateRuleGroup.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroup", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRuleGroup), arg0)
}

// UpdateRuleGroupRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateRuleGroupRequest(arg0 *waf.UpdateRuleGroupInput) (*request.Request, *waf.UpdateRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRuleGroupOutput)
	return ret0, ret1
}

// UpdateRuleGroupRequest indicates an expected call of UpdateRuleGroupRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroupRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRuleGroupRequest), arg0)
}

// UpdateRuleGroupWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateRuleGroupWithContext(arg0 context.Context, arg1 *waf.UpdateRuleGroupInput, arg2 ...request.Option) (*waf.UpdateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleGroupWithContext indicates an expected call of UpdateRuleGroupWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroupWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRuleGroupWithContext), varargs...)
}

// UpdateRuleRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateRuleRequest(arg0 *waf.UpdateRuleInput) (*request.Request, *waf.UpdateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateRuleOutput)
	return ret0, ret1
}

// UpdateRuleRequest indicates an expected call of UpdateRuleRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRuleRequest), arg0)
}

// UpdateRuleWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateRuleWithContext(arg0 context.Context, arg1 *waf.UpdateRuleInput, arg2 ...request.Option) (*waf.UpdateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleWithContext indicates an expected call of UpdateRuleWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateRuleWithContext), varargs...)
}

// UpdateSizeConstraintSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateSizeConstraintSet(arg0 *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSizeConstraintSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSizeConstraintSet indicates an expected call of UpdateSizeConstraintSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateSizeConstraintSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSizeConstraintSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateSizeConstraintSet), arg0)
}

// UpdateSizeConstraintSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateSizeConstraintSetRequest(arg0 *waf.UpdateSizeConstraintSetInput) (*request.Request, *waf.UpdateSizeConstraintSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSizeConstraintSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateSizeConstraintSetOutput)
	return ret0, ret1
}

// UpdateSizeConstraintSetRequest indicates an expected call of UpdateSizeConstraintSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateSizeConstraintSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSizeConstraintSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateSizeConstraintSetRequest), arg0)
}

// UpdateSizeConstraintSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateSizeConstraintSetWithContext(arg0 context.Context, arg1 *waf.UpdateSizeConstraintSetInput, arg2 ...request.Option) (*waf.UpdateSizeConstraintSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSizeConstraintSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateSizeConstraintSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSizeConstraintSetWithContext indicates an expected call of UpdateSizeConstraintSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateSizeConstraintSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSizeConstraintSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateSizeConstraintSetWithContext), varargs...)
}

// UpdateSqlInjectionMatchSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateSqlInjectionMatchSet(arg0 *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSqlInjectionMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSqlInjectionMatchSet indicates an expected call of UpdateSqlInjectionMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateSqlInjectionMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSqlInjectionMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateSqlInjectionMatchSet), arg0)
}

// UpdateSqlInjectionMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateSqlInjectionMatchSetRequest(arg0 *waf.UpdateSqlInjectionMatchSetInput) (*request.Request, *waf.UpdateSqlInjectionMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSqlInjectionMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateSqlInjectionMatchSetOutput)
	return ret0, ret1
}

// UpdateSqlInjectionMatchSetRequest indicates an expected call of UpdateSqlInjectionMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateSqlInjectionMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSqlInjectionMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateSqlInjectionMatchSetRequest), arg0)
}

// UpdateSqlInjectionMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateSqlInjectionMatchSetWithContext(arg0 context.Context, arg1 *waf.UpdateSqlInjectionMatchSetInput, arg2 ...request.Option) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSqlInjectionMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateSqlInjectionMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSqlInjectionMatchSetWithContext indicates an expected call of UpdateSqlInjectionMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateSqlInjectionMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSqlInjectionMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateSqlInjectionMatchSetWithContext), varargs...)
}

// UpdateWebACL mocks base method.
func (m *MockWAFRegionalAPI) UpdateWebACL(arg0 *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebACL", arg0)
	ret0, _ := ret[0].(*waf.UpdateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebACL indicates an expected call of UpdateWebACL.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACL", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateWebACL), arg0)
}

// UpdateWebACLRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateWebACLRequest(arg0 *waf.UpdateWebACLInput) (*request.Request, *waf.UpdateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateWebACLOutput)
	return ret0, ret1
}

// UpdateWebACLRequest indicates an expected call of UpdateWebACLRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACLRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateWebACLRequest), arg0)
}

// UpdateWebACLWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateWebACLWithContext(arg0 context.Context, arg1 *waf.UpdateWebACLInput, arg2 ...request.Option) (*waf.UpdateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebACLWithContext indicates an expected call of UpdateWebACLWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACLWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateWebACLWithContext), varargs...)
}

// UpdateXssMatchSet mocks base method.
func (m *MockWAFRegionalAPI) UpdateXssMatchSet(arg0 *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateXssMatchSet", arg0)
	ret0, _ := ret[0].(*waf.UpdateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateXssMatchSet indicates an expected call of UpdateXssMatchSet.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateXssMatchSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXssMatchSet", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateXssMatchSet), arg0)
}

// UpdateXssMatchSetRequest mocks base method.
func (m *MockWAFRegionalAPI) UpdateXssMatchSetRequest(arg0 *waf.UpdateXssMatchSetInput) (*request.Request, *waf.UpdateXssMatchSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateXssMatchSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*waf.UpdateXssMatchSetOutput)
	return ret0, ret1
}

// UpdateXssMatchSetRequest indicates an expected call of UpdateXssMatchSetRequest.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateXssMatchSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXssMatchSetRequest", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateXssMatchSetRequest), arg0)
}

// UpdateXssMatchSetWithContext mocks base method.
func (m *MockWAFRegionalAPI) UpdateXssMatchSetWithContext(arg0 context.Context, arg1 *waf.UpdateXssMatchSetInput, arg2 ...request.Option) (*waf.UpdateXssMatchSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateXssMatchSetWithContext", varargs...)
	ret0, _ := ret[0].(*waf.UpdateXssMatchSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateXssMatchSetWithContext indicates an expected call of UpdateXssMatchSetWithContext.
func (mr *MockWAFRegionalAPIMockRecorder) UpdateXssMatchSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateXssMatchSetWithContext", reflect.TypeOf((*MockWAFRegionalAPI)(nil).UpdateXssMatchSetWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotevents/ioteventsiface (interfaces: IoTEventsAPI)

// Package ioteventsmock is a generated GoMock package.
package ioteventsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	iotevents "github.com/aws/aws-sdk-go/service/iotevents"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIoTEventsAPI is a mock of IoTEventsAPI interface
type MockIoTEventsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTEventsAPIMockRecorder
}

// MockIoTEventsAPIMockRecorder is the mock recorder for MockIoTEventsAPI
type MockIoTEventsAPIMockRecorder struct {
	mock *MockIoTEventsAPI
}

// NewMockIoTEventsAPI creates a new mock instance
func NewMockIoTEventsAPI(ctrl *gomock.Controller) *MockIoTEventsAPI {
	mock := &MockIoTEventsAPI{ctrl: ctrl}
	mock.recorder = &MockIoTEventsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoTEventsAPI) EXPECT() *MockIoTEventsAPIMockRecorder {
	return m.recorder
}

// CreateDetectorModel mocks base method
func (m *MockIoTEventsAPI) CreateDetectorModel(arg0 *iotevents.CreateDetectorModelInput) (*iotevents.CreateDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDetectorModel", arg0)
	ret0, _ := ret[0].(*iotevents.CreateDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDetectorModel indicates an expected call of CreateDetectorModel
func (mr *MockIoTEventsAPIMockRecorder) CreateDetectorModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDetectorModel", reflect.TypeOf((*MockIoTEventsAPI)(nil).CreateDetectorModel), arg0)
}

// CreateDetectorModelRequest mocks base method
func (m *MockIoTEventsAPI) CreateDetectorModelRequest(arg0 *iotevents.CreateDetectorModelInput) (*request.Request, *iotevents.CreateDetectorModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDetectorModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.CreateDetectorModelOutput)
	return ret0, ret1
}

// CreateDetectorModelRequest indicates an expected call of CreateDetectorModelRequest
func (mr *MockIoTEventsAPIMockRecorder) CreateDetectorModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDetectorModelRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).CreateDetectorModelRequest), arg0)
}

// CreateDetectorModelWithContext mocks base method
func (m *MockIoTEventsAPI) CreateDetectorModelWithContext(arg0 context.Context, arg1 *iotevents.CreateDetectorModelInput, arg2 ...request.Option) (*iotevents.CreateDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDetectorModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.CreateDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDetectorModelWithContext indicates an expected call of CreateDetectorModelWithContext
func (mr *MockIoTEventsAPIMockRecorder) CreateDetectorModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDetectorModelWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).CreateDetectorModelWithContext), varargs...)
}

// CreateInput mocks base method
func (m *MockIoTEventsAPI) CreateInput(arg0 *iotevents.CreateInputInput) (*iotevents.CreateInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInput", arg0)
	ret0, _ := ret[0].(*iotevents.CreateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInput indicates an expected call of CreateInput
func (mr *MockIoTEventsAPIMockRecorder) CreateInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInput", reflect.TypeOf((*MockIoTEventsAPI)(nil).CreateInput), arg0)
}

// CreateInputRequest mocks base method
func (m *MockIoTEventsAPI) CreateInputRequest(arg0 *iotevents.CreateInputInput) (*request.Request, *iotevents.CreateInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.CreateInputOutput)
	return ret0, ret1
}

// CreateInputRequest indicates an expected call of CreateInputRequest
func (mr *MockIoTEventsAPIMockRecorder) CreateInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).CreateInputRequest), arg0)
}

// CreateInputWithContext mocks base method
func (m *MockIoTEventsAPI) CreateInputWithContext(arg0 context.Context, arg1 *iotevents.CreateInputInput, arg2 ...request.Option) (*iotevents.CreateInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInputWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.CreateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInputWithContext indicates an expected call of CreateInputWithContext
func (mr *MockIoTEventsAPIMockRecorder) CreateInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).CreateInputWithContext), varargs...)
}

// DeleteDetectorModel mocks base method
func (m *MockIoTEventsAPI) DeleteDetectorModel(arg0 *iotevents.DeleteDetectorModelInput) (*iotevents.DeleteDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetectorModel", arg0)
	ret0, _ := ret[0].(*iotevents.DeleteDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDetectorModel indicates an expected call of DeleteDetectorModel
func (mr *MockIoTEventsAPIMockRecorder) DeleteDetectorModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorModel", reflect.TypeOf((*MockIoTEventsAPI)(nil).DeleteDetectorModel), arg0)
}

// DeleteDetectorModelRequest mocks base method
func (m *MockIoTEventsAPI) DeleteDetectorModelRequest(arg0 *iotevents.DeleteDetectorModelInput) (*request.Request, *iotevents.DeleteDetectorModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetectorModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.DeleteDetectorModelOutput)
	return ret0, ret1
}

// DeleteDetectorModelRequest indicates an expected call of DeleteDetectorModelRequest
func (mr *MockIoTEventsAPIMockRecorder) DeleteDetectorModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorModelRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).DeleteDetectorModelRequest), arg0)
}

// DeleteDetectorModelWithContext mocks base method
func (m *MockIoTEventsAPI) DeleteDetectorModelWithContext(arg0 context.Context, arg1 *iotevents.DeleteDetectorModelInput, arg2 ...request.Option) (*iotevents.DeleteDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDetectorModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.DeleteDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDetectorModelWithContext indicates an expected call of DeleteDetectorModelWithContext
func (mr *MockIoTEventsAPIMockRecorder) DeleteDetectorModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorModelWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).DeleteDetectorModelWithContext), varargs...)
}

// DeleteInput mocks base method
func (m *MockIoTEventsAPI) DeleteInput(arg0 *iotevents.DeleteInputInput) (*iotevents.DeleteInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInput", arg0)
	ret0, _ := ret[0].(*iotevents.DeleteInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInput indicates an expected call of DeleteInput
func (mr *MockIoTEventsAPIMockRecorder) DeleteInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInput", reflect.TypeOf((*MockIoTEventsAPI)(nil).DeleteInput), arg0)
}

// DeleteInputRequest mocks base method
func (m *MockIoTEventsAPI) DeleteInputRequest(arg0 *iotevents.DeleteInputInput) (*request.Request, *iotevents.DeleteInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.DeleteInputOutput)
	return ret0, ret1
}

// DeleteInputRequest indicates an expected call of DeleteInputRequest
func (mr *MockIoTEventsAPIMockRecorder) DeleteInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInputRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).DeleteInputRequest), arg0)
}

// DeleteInputWithContext mocks base method
func (m *MockIoTEventsAPI) DeleteInputWithContext(arg0 context.Context, arg1 *iotevents.DeleteInputInput, arg2 ...request.Option) (*iotevents.DeleteInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInputWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.DeleteInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInputWithContext indicates an expected call of DeleteInputWithContext
func (mr *MockIoTEventsAPIMockRecorder) DeleteInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInputWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).DeleteInputWithContext), varargs...)
}

// DescribeDetectorModel mocks base method
func (m *MockIoTEventsAPI) DescribeDetectorModel(arg0 *iotevents.DescribeDetectorModelInput) (*iotevents.DescribeDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDetectorModel", arg0)
	ret0, _ := ret[0].(*iotevents.DescribeDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDetectorModel indicates an expected call of DescribeDetectorModel
func (mr *MockIoTEventsAPIMockRecorder) DescribeDetectorModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetectorModel", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeDetectorModel), arg0)
}

// DescribeDetectorModelRequest mocks base method
func (m *MockIoTEventsAPI) DescribeDetectorModelRequest(arg0 *iotevents.DescribeDetectorModelInput) (*request.Request, *iotevents.DescribeDetectorModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDetectorModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.DescribeDetectorModelOutput)
	return ret0, ret1
}

// DescribeDetectorModelRequest indicates an expected call of DescribeDetectorModelRequest
func (mr *MockIoTEventsAPIMockRecorder) DescribeDetectorModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetectorModelRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeDetectorModelRequest), arg0)
}

// DescribeDetectorModelWithContext mocks base method
func (m *MockIoTEventsAPI) DescribeDetectorModelWithContext(arg0 context.Context, arg1 *iotevents.DescribeDetectorModelInput, arg2 ...request.Option) (*iotevents.DescribeDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDetectorModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.DescribeDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDetectorModelWithContext indicates an expected call of DescribeDetectorModelWithContext
func (mr *MockIoTEventsAPIMockRecorder) DescribeDetectorModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetectorModelWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeDetectorModelWithContext), varargs...)
}

// DescribeInput mocks base method
func (m *MockIoTEventsAPI) DescribeInput(arg0 *iotevents.DescribeInputInput) (*iotevents.DescribeInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInput", arg0)
	ret0, _ := ret[0].(*iotevents.DescribeInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInput indicates an expected call of DescribeInput
func (mr *MockIoTEventsAPIMockRecorder) DescribeInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInput", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeInput), arg0)
}

// DescribeInputRequest mocks base method
func (m *MockIoTEventsAPI) DescribeInputRequest(arg0 *iotevents.DescribeInputInput) (*request.Request, *iotevents.DescribeInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.DescribeInputOutput)
	return ret0, ret1
}

// DescribeInputRequest indicates an expected call of DescribeInputRequest
func (mr *MockIoTEventsAPIMockRecorder) DescribeInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInputRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeInputRequest), arg0)
}

// DescribeInputWithContext mocks base method
func (m *MockIoTEventsAPI) DescribeInputWithContext(arg0 context.Context, arg1 *iotevents.DescribeInputInput, arg2 ...request.Option) (*iotevents.DescribeInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInputWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.DescribeInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInputWithContext indicates an expected call of DescribeInputWithContext
func (mr *MockIoTEventsAPIMockRecorder) DescribeInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInputWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeInputWithContext), varargs...)
}

// DescribeLoggingOptions mocks base method
func (m *MockIoTEventsAPI) DescribeLoggingOptions(arg0 *iotevents.DescribeLoggingOptionsInput) (*iotevents.DescribeLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotevents.DescribeLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingOptions indicates an expected call of DescribeLoggingOptions
func (mr *MockIoTEventsAPIMockRecorder) DescribeLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptions", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeLoggingOptions), arg0)
}

// DescribeLoggingOptionsRequest mocks base method
func (m *MockIoTEventsAPI) DescribeLoggingOptionsRequest(arg0 *iotevents.DescribeLoggingOptionsInput) (*request.Request, *iotevents.DescribeLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.DescribeLoggingOptionsOutput)
	return ret0, ret1
}

// DescribeLoggingOptionsRequest indicates an expected call of DescribeLoggingOptionsRequest
func (mr *MockIoTEventsAPIMockRecorder) DescribeLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptionsRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeLoggingOptionsRequest), arg0)
}

// DescribeLoggingOptionsWithContext mocks base method
func (m *MockIoTEventsAPI) DescribeLoggingOptionsWithContext(arg0 context.Context, arg1 *iotevents.DescribeLoggingOptionsInput, arg2 ...request.Option) (*iotevents.DescribeLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.DescribeLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoggingOptionsWithContext indicates an expected call of DescribeLoggingOptionsWithContext
func (mr *MockIoTEventsAPIMockRecorder) DescribeLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoggingOptionsWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).DescribeLoggingOptionsWithContext), varargs...)
}

// ListDetectorModelVersions mocks base method
func (m *MockIoTEventsAPI) ListDetectorModelVersions(arg0 *iotevents.ListDetectorModelVersionsInput) (*iotevents.ListDetectorModelVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDetectorModelVersions", arg0)
	ret0, _ := ret[0].(*iotevents.ListDetectorModelVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDetectorModelVersions indicates an expected call of ListDetectorModelVersions
func (mr *MockIoTEventsAPIMockRecorder) ListDetectorModelVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectorModelVersions", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListDetectorModelVersions), arg0)
}

// ListDetectorModelVersionsRequest mocks base method
func (m *MockIoTEventsAPI) ListDetectorModelVersionsRequest(arg0 *iotevents.ListDetectorModelVersionsInput) (*request.Request, *iotevents.ListDetectorModelVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDetectorModelVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.ListDetectorModelVersionsOutput)
	return ret0, ret1
}

// ListDetectorModelVersionsRequest indicates an expected call of ListDetectorModelVersionsRequest
func (mr *MockIoTEventsAPIMockRecorder) ListDetectorModelVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectorModelVersionsRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListDetectorModelVersionsRequest), arg0)
}

// ListDetectorModelVersionsWithContext mocks base method
func (m *MockIoTEventsAPI) ListDetectorModelVersionsWithContext(arg0 context.Context, arg1 *iotevents.ListDetectorModelVersionsInput, arg2 ...request.Option) (*iotevents.ListDetectorModelVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDetectorModelVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.ListDetectorModelVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDetectorModelVersionsWithContext indicates an expected call of ListDetectorModelVersionsWithContext
func (mr *MockIoTEventsAPIMockRecorder) ListDetectorModelVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectorModelVersionsWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListDetectorModelVersionsWithContext), varargs...)
}

// ListDetectorModels mocks base method
func (m *MockIoTEventsAPI) ListDetectorModels(arg0 *iotevents.ListDetectorModelsInput) (*iotevents.ListDetectorModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDetectorModels", arg0)
	ret0, _ := ret[0].(*iotevents.ListDetectorModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDetectorModels indicates an expected call of ListDetectorModels
func (mr *MockIoTEventsAPIMockRecorder) ListDetectorModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectorModels", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListDetectorModels), arg0)
}

// ListDetectorModelsRequest mocks base method
func (m *MockIoTEventsAPI) ListDetectorModelsRequest(arg0 *iotevents.ListDetectorModelsInput) (*request.Request, *iotevents.ListDetectorModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDetectorModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.ListDetectorModelsOutput)
	return ret0, ret1
}

// ListDetectorModelsRequest indicates an expected call of ListDetectorModelsRequest
func (mr *MockIoTEventsAPIMockRecorder) ListDetectorModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectorModelsRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListDetectorModelsRequest), arg0)
}

// ListDetectorModelsWithContext mocks base method
func (m *MockIoTEventsAPI) ListDetectorModelsWithContext(arg0 context.Context, arg1 *iotevents.ListDetectorModelsInput, arg2 ...request.Option) (*iotevents.ListDetectorModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDetectorModelsWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.ListDetectorModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDetectorModelsWithContext indicates an expected call of ListDetectorModelsWithContext
func (mr *MockIoTEventsAPIMockRecorder) ListDetectorModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDetectorModelsWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListDetectorModelsWithContext), varargs...)
}

// ListInputs mocks base method
func (m *MockIoTEventsAPI) ListInputs(arg0 *iotevents.ListInputsInput) (*iotevents.ListInputsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputs", arg0)
	ret0, _ := ret[0].(*iotevents.ListInputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInputs indicates an expected call of ListInputs
func (mr *MockIoTEventsAPIMockRecorder) ListInputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputs", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListInputs), arg0)
}

// ListInputsRequest mocks base method
func (m *MockIoTEventsAPI) ListInputsRequest(arg0 *iotevents.ListInputsInput) (*request.Request, *iotevents.ListInputsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.ListInputsOutput)
	return ret0, ret1
}

// ListInputsRequest indicates an expected call of ListInputsRequest
func (mr *MockIoTEventsAPIMockRecorder) ListInputsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputsRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListInputsRequest), arg0)
}

// ListInputsWithContext mocks base method
func (m *MockIoTEventsAPI) ListInputsWithContext(arg0 context.Context, arg1 *iotevents.ListInputsInput, arg2 ...request.Option) (*iotevents.ListInputsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInputsWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.ListInputsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInputsWithContext indicates an expected call of ListInputsWithContext
func (mr *MockIoTEventsAPIMockRecorder) ListInputsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputsWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListInputsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockIoTEventsAPI) ListTagsForResource(arg0 *iotevents.ListTagsForResourceInput) (*iotevents.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*iotevents.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockIoTEventsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockIoTEventsAPI) ListTagsForResourceRequest(arg0 *iotevents.ListTagsForResourceInput) (*request.Request, *iotevents.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockIoTEventsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockIoTEventsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *iotevents.ListTagsForResourceInput, arg2 ...request.Option) (*iotevents.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockIoTEventsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutLoggingOptions mocks base method
func (m *MockIoTEventsAPI) PutLoggingOptions(arg0 *iotevents.PutLoggingOptionsInput) (*iotevents.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptions", arg0)
	ret0, _ := ret[0].(*iotevents.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptions indicates an expected call of PutLoggingOptions
func (mr *MockIoTEventsAPIMockRecorder) PutLoggingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptions", reflect.TypeOf((*MockIoTEventsAPI)(nil).PutLoggingOptions), arg0)
}

// PutLoggingOptionsRequest mocks base method
func (m *MockIoTEventsAPI) PutLoggingOptionsRequest(arg0 *iotevents.PutLoggingOptionsInput) (*request.Request, *iotevents.PutLoggingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.PutLoggingOptionsOutput)
	return ret0, ret1
}

// PutLoggingOptionsRequest indicates an expected call of PutLoggingOptionsRequest
func (mr *MockIoTEventsAPIMockRecorder) PutLoggingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).PutLoggingOptionsRequest), arg0)
}

// PutLoggingOptionsWithContext mocks base method
func (m *MockIoTEventsAPI) PutLoggingOptionsWithContext(arg0 context.Context, arg1 *iotevents.PutLoggingOptionsInput, arg2 ...request.Option) (*iotevents.PutLoggingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLoggingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.PutLoggingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingOptionsWithContext indicates an expected call of PutLoggingOptionsWithContext
func (mr *MockIoTEventsAPIMockRecorder) PutLoggingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingOptionsWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).PutLoggingOptionsWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockIoTEventsAPI) TagResource(arg0 *iotevents.TagResourceInput) (*iotevents.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*iotevents.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockIoTEventsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIoTEventsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockIoTEventsAPI) TagResourceRequest(arg0 *iotevents.TagResourceInput) (*request.Request, *iotevents.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockIoTEventsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockIoTEventsAPI) TagResourceWithContext(arg0 context.Context, arg1 *iotevents.TagResourceInput, arg2 ...request.Option) (*iotevents.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockIoTEventsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockIoTEventsAPI) UntagResource(arg0 *iotevents.UntagResourceInput) (*iotevents.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*iotevents.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockIoTEventsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIoTEventsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockIoTEventsAPI) UntagResourceRequest(arg0 *iotevents.UntagResourceInput) (*request.Request, *iotevents.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockIoTEventsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockIoTEventsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *iotevents.UntagResourceInput, arg2 ...request.Option) (*iotevents.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockIoTEventsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDetectorModel mocks base method
func (m *MockIoTEventsAPI) UpdateDetectorModel(arg0 *iotevents.UpdateDetectorModelInput) (*iotevents.UpdateDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorModel", arg0)
	ret0, _ := ret[0].(*iotevents.UpdateDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorModel indicates an expected call of UpdateDetectorModel
func (mr *MockIoTEventsAPIMockRecorder) UpdateDetectorModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorModel", reflect.TypeOf((*MockIoTEventsAPI)(nil).UpdateDetectorModel), arg0)
}

// UpdateDetectorModelRequest mocks base method
func (m *MockIoTEventsAPI) UpdateDetectorModelRequest(arg0 *iotevents.UpdateDetectorModelInput) (*request.Request, *iotevents.UpdateDetectorModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.UpdateDetectorModelOutput)
	return ret0, ret1
}

// UpdateDetectorModelRequest indicates an expected call of UpdateDetectorModelRequest
func (mr *MockIoTEventsAPIMockRecorder) UpdateDetectorModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorModelRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).UpdateDetectorModelRequest), arg0)
}

// UpdateDetectorModelWithContext mocks base method
func (m *MockIoTEventsAPI) UpdateDetectorModelWithContext(arg0 context.Context, arg1 *iotevents.UpdateDetectorModelInput, arg2 ...request.Option) (*iotevents.UpdateDetectorModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDetectorModelWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.UpdateDetectorModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorModelWithContext indicates an expected call of UpdateDetectorModelWithContext
func (mr *MockIoTEventsAPIMockRecorder) UpdateDetectorModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorModelWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).UpdateDetectorModelWithContext), varargs...)
}

// UpdateInput mocks base method
func (m *MockIoTEventsAPI) UpdateInput(arg0 *iotevents.UpdateInputInput) (*iotevents.UpdateInputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInput", arg0)
	ret0, _ := ret[0].(*iotevents.UpdateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInput indicates an expected call of UpdateInput
func (mr *MockIoTEventsAPIMockRecorder) UpdateInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInput", reflect.TypeOf((*MockIoTEventsAPI)(nil).UpdateInput), arg0)
}

// UpdateInputRequest mocks base method
func (m *MockIoTEventsAPI) UpdateInputRequest(arg0 *iotevents.UpdateInputInput) (*request.Request, *iotevents.UpdateInputOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInputRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotevents.UpdateInputOutput)
	return ret0, ret1
}

// UpdateInputRequest indicates an expected call of UpdateInputRequest
func (mr *MockIoTEventsAPIMockRecorder) UpdateInputRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInputRequest", reflect.TypeOf((*MockIoTEventsAPI)(nil).UpdateInputRequest), arg0)
}

// UpdateInputWithContext mocks base method
func (m *MockIoTEventsAPI) UpdateInputWithContext(arg0 context.Context, arg1 *iotevents.UpdateInputInput, arg2 ...request.Option) (*iotevents.UpdateInputOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInputWithContext", varargs...)
	ret0, _ := ret[0].(*iotevents.UpdateInputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInputWithContext indicates an expected call of UpdateInputWithContext
func (mr *MockIoTEventsAPIMockRecorder) UpdateInputWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInputWithContext", reflect.TypeOf((*MockIoTEventsAPI)(nil).UpdateInputWithContext), varargs...)
}

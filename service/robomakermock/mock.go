// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/robomaker/robomakeriface (interfaces: RoboMakerAPI)

// Package robomakermock is a generated GoMock package.
package robomakermock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	robomaker "github.com/aws/aws-sdk-go/service/robomaker"
	gomock "github.com/golang/mock/gomock"
)

// MockRoboMakerAPI is a mock of RoboMakerAPI interface.
type MockRoboMakerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoboMakerAPIMockRecorder
}

// MockRoboMakerAPIMockRecorder is the mock recorder for MockRoboMakerAPI.
type MockRoboMakerAPIMockRecorder struct {
	mock *MockRoboMakerAPI
}

// NewMockRoboMakerAPI creates a new mock instance.
func NewMockRoboMakerAPI(ctrl *gomock.Controller) *MockRoboMakerAPI {
	mock := &MockRoboMakerAPI{ctrl: ctrl}
	mock.recorder = &MockRoboMakerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoboMakerAPI) EXPECT() *MockRoboMakerAPIMockRecorder {
	return m.recorder
}

// BatchDeleteWorlds mocks base method.
func (m *MockRoboMakerAPI) BatchDeleteWorlds(arg0 *robomaker.BatchDeleteWorldsInput) (*robomaker.BatchDeleteWorldsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteWorlds", arg0)
	ret0, _ := ret[0].(*robomaker.BatchDeleteWorldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteWorlds indicates an expected call of BatchDeleteWorlds.
func (mr *MockRoboMakerAPIMockRecorder) BatchDeleteWorlds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteWorlds", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDeleteWorlds), arg0)
}

// BatchDeleteWorldsRequest mocks base method.
func (m *MockRoboMakerAPI) BatchDeleteWorldsRequest(arg0 *robomaker.BatchDeleteWorldsInput) (*request.Request, *robomaker.BatchDeleteWorldsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteWorldsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.BatchDeleteWorldsOutput)
	return ret0, ret1
}

// BatchDeleteWorldsRequest indicates an expected call of BatchDeleteWorldsRequest.
func (mr *MockRoboMakerAPIMockRecorder) BatchDeleteWorldsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteWorldsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDeleteWorldsRequest), arg0)
}

// BatchDeleteWorldsWithContext mocks base method.
func (m *MockRoboMakerAPI) BatchDeleteWorldsWithContext(arg0 context.Context, arg1 *robomaker.BatchDeleteWorldsInput, arg2 ...request.Option) (*robomaker.BatchDeleteWorldsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteWorldsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.BatchDeleteWorldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteWorldsWithContext indicates an expected call of BatchDeleteWorldsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) BatchDeleteWorldsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteWorldsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDeleteWorldsWithContext), varargs...)
}

// BatchDescribeSimulationJob mocks base method.
func (m *MockRoboMakerAPI) BatchDescribeSimulationJob(arg0 *robomaker.BatchDescribeSimulationJobInput) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDescribeSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.BatchDescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDescribeSimulationJob indicates an expected call of BatchDescribeSimulationJob.
func (mr *MockRoboMakerAPIMockRecorder) BatchDescribeSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDescribeSimulationJob), arg0)
}

// BatchDescribeSimulationJobRequest mocks base method.
func (m *MockRoboMakerAPI) BatchDescribeSimulationJobRequest(arg0 *robomaker.BatchDescribeSimulationJobInput) (*request.Request, *robomaker.BatchDescribeSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDescribeSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.BatchDescribeSimulationJobOutput)
	return ret0, ret1
}

// BatchDescribeSimulationJobRequest indicates an expected call of BatchDescribeSimulationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) BatchDescribeSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDescribeSimulationJobRequest), arg0)
}

// BatchDescribeSimulationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) BatchDescribeSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.BatchDescribeSimulationJobInput, arg2 ...request.Option) (*robomaker.BatchDescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDescribeSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.BatchDescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDescribeSimulationJobWithContext indicates an expected call of BatchDescribeSimulationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) BatchDescribeSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDescribeSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).BatchDescribeSimulationJobWithContext), varargs...)
}

// CancelDeploymentJob mocks base method.
func (m *MockRoboMakerAPI) CancelDeploymentJob(arg0 *robomaker.CancelDeploymentJobInput) (*robomaker.CancelDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDeploymentJob", arg0)
	ret0, _ := ret[0].(*robomaker.CancelDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDeploymentJob indicates an expected call of CancelDeploymentJob.
func (mr *MockRoboMakerAPIMockRecorder) CancelDeploymentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeploymentJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelDeploymentJob), arg0)
}

// CancelDeploymentJobRequest mocks base method.
func (m *MockRoboMakerAPI) CancelDeploymentJobRequest(arg0 *robomaker.CancelDeploymentJobInput) (*request.Request, *robomaker.CancelDeploymentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDeploymentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CancelDeploymentJobOutput)
	return ret0, ret1
}

// CancelDeploymentJobRequest indicates an expected call of CancelDeploymentJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CancelDeploymentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeploymentJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelDeploymentJobRequest), arg0)
}

// CancelDeploymentJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CancelDeploymentJobWithContext(arg0 context.Context, arg1 *robomaker.CancelDeploymentJobInput, arg2 ...request.Option) (*robomaker.CancelDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelDeploymentJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CancelDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDeploymentJobWithContext indicates an expected call of CancelDeploymentJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CancelDeploymentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeploymentJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelDeploymentJobWithContext), varargs...)
}

// CancelSimulationJob mocks base method.
func (m *MockRoboMakerAPI) CancelSimulationJob(arg0 *robomaker.CancelSimulationJobInput) (*robomaker.CancelSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.CancelSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSimulationJob indicates an expected call of CancelSimulationJob.
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJob), arg0)
}

// CancelSimulationJobBatch mocks base method.
func (m *MockRoboMakerAPI) CancelSimulationJobBatch(arg0 *robomaker.CancelSimulationJobBatchInput) (*robomaker.CancelSimulationJobBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSimulationJobBatch", arg0)
	ret0, _ := ret[0].(*robomaker.CancelSimulationJobBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSimulationJobBatch indicates an expected call of CancelSimulationJobBatch.
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJobBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJobBatch", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJobBatch), arg0)
}

// CancelSimulationJobBatchRequest mocks base method.
func (m *MockRoboMakerAPI) CancelSimulationJobBatchRequest(arg0 *robomaker.CancelSimulationJobBatchInput) (*request.Request, *robomaker.CancelSimulationJobBatchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSimulationJobBatchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CancelSimulationJobBatchOutput)
	return ret0, ret1
}

// CancelSimulationJobBatchRequest indicates an expected call of CancelSimulationJobBatchRequest.
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJobBatchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJobBatchRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJobBatchRequest), arg0)
}

// CancelSimulationJobBatchWithContext mocks base method.
func (m *MockRoboMakerAPI) CancelSimulationJobBatchWithContext(arg0 context.Context, arg1 *robomaker.CancelSimulationJobBatchInput, arg2 ...request.Option) (*robomaker.CancelSimulationJobBatchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelSimulationJobBatchWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CancelSimulationJobBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSimulationJobBatchWithContext indicates an expected call of CancelSimulationJobBatchWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJobBatchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJobBatchWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJobBatchWithContext), varargs...)
}

// CancelSimulationJobRequest mocks base method.
func (m *MockRoboMakerAPI) CancelSimulationJobRequest(arg0 *robomaker.CancelSimulationJobInput) (*request.Request, *robomaker.CancelSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CancelSimulationJobOutput)
	return ret0, ret1
}

// CancelSimulationJobRequest indicates an expected call of CancelSimulationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJobRequest), arg0)
}

// CancelSimulationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CancelSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.CancelSimulationJobInput, arg2 ...request.Option) (*robomaker.CancelSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CancelSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSimulationJobWithContext indicates an expected call of CancelSimulationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CancelSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelSimulationJobWithContext), varargs...)
}

// CancelWorldExportJob mocks base method.
func (m *MockRoboMakerAPI) CancelWorldExportJob(arg0 *robomaker.CancelWorldExportJobInput) (*robomaker.CancelWorldExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorldExportJob", arg0)
	ret0, _ := ret[0].(*robomaker.CancelWorldExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorldExportJob indicates an expected call of CancelWorldExportJob.
func (mr *MockRoboMakerAPIMockRecorder) CancelWorldExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorldExportJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelWorldExportJob), arg0)
}

// CancelWorldExportJobRequest mocks base method.
func (m *MockRoboMakerAPI) CancelWorldExportJobRequest(arg0 *robomaker.CancelWorldExportJobInput) (*request.Request, *robomaker.CancelWorldExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorldExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CancelWorldExportJobOutput)
	return ret0, ret1
}

// CancelWorldExportJobRequest indicates an expected call of CancelWorldExportJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CancelWorldExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorldExportJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelWorldExportJobRequest), arg0)
}

// CancelWorldExportJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CancelWorldExportJobWithContext(arg0 context.Context, arg1 *robomaker.CancelWorldExportJobInput, arg2 ...request.Option) (*robomaker.CancelWorldExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelWorldExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CancelWorldExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorldExportJobWithContext indicates an expected call of CancelWorldExportJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CancelWorldExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorldExportJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelWorldExportJobWithContext), varargs...)
}

// CancelWorldGenerationJob mocks base method.
func (m *MockRoboMakerAPI) CancelWorldGenerationJob(arg0 *robomaker.CancelWorldGenerationJobInput) (*robomaker.CancelWorldGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorldGenerationJob", arg0)
	ret0, _ := ret[0].(*robomaker.CancelWorldGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorldGenerationJob indicates an expected call of CancelWorldGenerationJob.
func (mr *MockRoboMakerAPIMockRecorder) CancelWorldGenerationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorldGenerationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelWorldGenerationJob), arg0)
}

// CancelWorldGenerationJobRequest mocks base method.
func (m *MockRoboMakerAPI) CancelWorldGenerationJobRequest(arg0 *robomaker.CancelWorldGenerationJobInput) (*request.Request, *robomaker.CancelWorldGenerationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelWorldGenerationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CancelWorldGenerationJobOutput)
	return ret0, ret1
}

// CancelWorldGenerationJobRequest indicates an expected call of CancelWorldGenerationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CancelWorldGenerationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorldGenerationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelWorldGenerationJobRequest), arg0)
}

// CancelWorldGenerationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CancelWorldGenerationJobWithContext(arg0 context.Context, arg1 *robomaker.CancelWorldGenerationJobInput, arg2 ...request.Option) (*robomaker.CancelWorldGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelWorldGenerationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CancelWorldGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWorldGenerationJobWithContext indicates an expected call of CancelWorldGenerationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CancelWorldGenerationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWorldGenerationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CancelWorldGenerationJobWithContext), varargs...)
}

// CreateDeploymentJob mocks base method.
func (m *MockRoboMakerAPI) CreateDeploymentJob(arg0 *robomaker.CreateDeploymentJobInput) (*robomaker.CreateDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentJob", arg0)
	ret0, _ := ret[0].(*robomaker.CreateDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentJob indicates an expected call of CreateDeploymentJob.
func (mr *MockRoboMakerAPIMockRecorder) CreateDeploymentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateDeploymentJob), arg0)
}

// CreateDeploymentJobRequest mocks base method.
func (m *MockRoboMakerAPI) CreateDeploymentJobRequest(arg0 *robomaker.CreateDeploymentJobInput) (*request.Request, *robomaker.CreateDeploymentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateDeploymentJobOutput)
	return ret0, ret1
}

// CreateDeploymentJobRequest indicates an expected call of CreateDeploymentJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateDeploymentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateDeploymentJobRequest), arg0)
}

// CreateDeploymentJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateDeploymentJobWithContext(arg0 context.Context, arg1 *robomaker.CreateDeploymentJobInput, arg2 ...request.Option) (*robomaker.CreateDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentJobWithContext indicates an expected call of CreateDeploymentJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateDeploymentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateDeploymentJobWithContext), varargs...)
}

// CreateFleet mocks base method.
func (m *MockRoboMakerAPI) CreateFleet(arg0 *robomaker.CreateFleetInput) (*robomaker.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleet", arg0)
	ret0, _ := ret[0].(*robomaker.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet.
func (mr *MockRoboMakerAPIMockRecorder) CreateFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateFleet), arg0)
}

// CreateFleetRequest mocks base method.
func (m *MockRoboMakerAPI) CreateFleetRequest(arg0 *robomaker.CreateFleetInput) (*request.Request, *robomaker.CreateFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateFleetOutput)
	return ret0, ret1
}

// CreateFleetRequest indicates an expected call of CreateFleetRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateFleetRequest), arg0)
}

// CreateFleetWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateFleetWithContext(arg0 context.Context, arg1 *robomaker.CreateFleetInput, arg2 ...request.Option) (*robomaker.CreateFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFleetWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFleetWithContext indicates an expected call of CreateFleetWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleetWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateFleetWithContext), varargs...)
}

// CreateRobot mocks base method.
func (m *MockRoboMakerAPI) CreateRobot(arg0 *robomaker.CreateRobotInput) (*robomaker.CreateRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobot", arg0)
	ret0, _ := ret[0].(*robomaker.CreateRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobot indicates an expected call of CreateRobot.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobot), arg0)
}

// CreateRobotApplication mocks base method.
func (m *MockRoboMakerAPI) CreateRobotApplication(arg0 *robomaker.CreateRobotApplicationInput) (*robomaker.CreateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplication indicates an expected call of CreateRobotApplication.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplication), arg0)
}

// CreateRobotApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) CreateRobotApplicationRequest(arg0 *robomaker.CreateRobotApplicationInput) (*request.Request, *robomaker.CreateRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateRobotApplicationOutput)
	return ret0, ret1
}

// CreateRobotApplicationRequest indicates an expected call of CreateRobotApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationRequest), arg0)
}

// CreateRobotApplicationVersion mocks base method.
func (m *MockRoboMakerAPI) CreateRobotApplicationVersion(arg0 *robomaker.CreateRobotApplicationVersionInput) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplicationVersion", arg0)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplicationVersion indicates an expected call of CreateRobotApplicationVersion.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationVersion", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationVersion), arg0)
}

// CreateRobotApplicationVersionRequest mocks base method.
func (m *MockRoboMakerAPI) CreateRobotApplicationVersionRequest(arg0 *robomaker.CreateRobotApplicationVersionInput) (*request.Request, *robomaker.CreateRobotApplicationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotApplicationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateRobotApplicationVersionOutput)
	return ret0, ret1
}

// CreateRobotApplicationVersionRequest indicates an expected call of CreateRobotApplicationVersionRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationVersionRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationVersionRequest), arg0)
}

// CreateRobotApplicationVersionWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateRobotApplicationVersionWithContext(arg0 context.Context, arg1 *robomaker.CreateRobotApplicationVersionInput, arg2 ...request.Option) (*robomaker.CreateRobotApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRobotApplicationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplicationVersionWithContext indicates an expected call of CreateRobotApplicationVersionWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationVersionWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationVersionWithContext), varargs...)
}

// CreateRobotApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.CreateRobotApplicationInput, arg2 ...request.Option) (*robomaker.CreateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotApplicationWithContext indicates an expected call of CreateRobotApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotApplicationWithContext), varargs...)
}

// CreateRobotRequest mocks base method.
func (m *MockRoboMakerAPI) CreateRobotRequest(arg0 *robomaker.CreateRobotInput) (*request.Request, *robomaker.CreateRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateRobotOutput)
	return ret0, ret1
}

// CreateRobotRequest indicates an expected call of CreateRobotRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotRequest), arg0)
}

// CreateRobotWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateRobotWithContext(arg0 context.Context, arg1 *robomaker.CreateRobotInput, arg2 ...request.Option) (*robomaker.CreateRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRobotWithContext indicates an expected call of CreateRobotWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateRobotWithContext), varargs...)
}

// CreateSimulationApplication mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationApplication(arg0 *robomaker.CreateSimulationApplicationInput) (*robomaker.CreateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplication indicates an expected call of CreateSimulationApplication.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplication), arg0)
}

// CreateSimulationApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationApplicationRequest(arg0 *robomaker.CreateSimulationApplicationInput) (*request.Request, *robomaker.CreateSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateSimulationApplicationOutput)
	return ret0, ret1
}

// CreateSimulationApplicationRequest indicates an expected call of CreateSimulationApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationRequest), arg0)
}

// CreateSimulationApplicationVersion mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationApplicationVersion(arg0 *robomaker.CreateSimulationApplicationVersionInput) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplicationVersion", arg0)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplicationVersion indicates an expected call of CreateSimulationApplicationVersion.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationVersion", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationVersion), arg0)
}

// CreateSimulationApplicationVersionRequest mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationApplicationVersionRequest(arg0 *robomaker.CreateSimulationApplicationVersionInput) (*request.Request, *robomaker.CreateSimulationApplicationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationApplicationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateSimulationApplicationVersionOutput)
	return ret0, ret1
}

// CreateSimulationApplicationVersionRequest indicates an expected call of CreateSimulationApplicationVersionRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationVersionRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationVersionRequest), arg0)
}

// CreateSimulationApplicationVersionWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationApplicationVersionWithContext(arg0 context.Context, arg1 *robomaker.CreateSimulationApplicationVersionInput, arg2 ...request.Option) (*robomaker.CreateSimulationApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSimulationApplicationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplicationVersionWithContext indicates an expected call of CreateSimulationApplicationVersionWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationVersionWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationVersionWithContext), varargs...)
}

// CreateSimulationApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.CreateSimulationApplicationInput, arg2 ...request.Option) (*robomaker.CreateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationApplicationWithContext indicates an expected call of CreateSimulationApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationApplicationWithContext), varargs...)
}

// CreateSimulationJob mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationJob(arg0 *robomaker.CreateSimulationJobInput) (*robomaker.CreateSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.CreateSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationJob indicates an expected call of CreateSimulationJob.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationJob), arg0)
}

// CreateSimulationJobRequest mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationJobRequest(arg0 *robomaker.CreateSimulationJobInput) (*request.Request, *robomaker.CreateSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateSimulationJobOutput)
	return ret0, ret1
}

// CreateSimulationJobRequest indicates an expected call of CreateSimulationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationJobRequest), arg0)
}

// CreateSimulationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.CreateSimulationJobInput, arg2 ...request.Option) (*robomaker.CreateSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSimulationJobWithContext indicates an expected call of CreateSimulationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateSimulationJobWithContext), varargs...)
}

// CreateWorldExportJob mocks base method.
func (m *MockRoboMakerAPI) CreateWorldExportJob(arg0 *robomaker.CreateWorldExportJobInput) (*robomaker.CreateWorldExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldExportJob", arg0)
	ret0, _ := ret[0].(*robomaker.CreateWorldExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldExportJob indicates an expected call of CreateWorldExportJob.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldExportJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldExportJob), arg0)
}

// CreateWorldExportJobRequest mocks base method.
func (m *MockRoboMakerAPI) CreateWorldExportJobRequest(arg0 *robomaker.CreateWorldExportJobInput) (*request.Request, *robomaker.CreateWorldExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateWorldExportJobOutput)
	return ret0, ret1
}

// CreateWorldExportJobRequest indicates an expected call of CreateWorldExportJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldExportJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldExportJobRequest), arg0)
}

// CreateWorldExportJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateWorldExportJobWithContext(arg0 context.Context, arg1 *robomaker.CreateWorldExportJobInput, arg2 ...request.Option) (*robomaker.CreateWorldExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorldExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateWorldExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldExportJobWithContext indicates an expected call of CreateWorldExportJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldExportJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldExportJobWithContext), varargs...)
}

// CreateWorldGenerationJob mocks base method.
func (m *MockRoboMakerAPI) CreateWorldGenerationJob(arg0 *robomaker.CreateWorldGenerationJobInput) (*robomaker.CreateWorldGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldGenerationJob", arg0)
	ret0, _ := ret[0].(*robomaker.CreateWorldGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldGenerationJob indicates an expected call of CreateWorldGenerationJob.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldGenerationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldGenerationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldGenerationJob), arg0)
}

// CreateWorldGenerationJobRequest mocks base method.
func (m *MockRoboMakerAPI) CreateWorldGenerationJobRequest(arg0 *robomaker.CreateWorldGenerationJobInput) (*request.Request, *robomaker.CreateWorldGenerationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldGenerationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateWorldGenerationJobOutput)
	return ret0, ret1
}

// CreateWorldGenerationJobRequest indicates an expected call of CreateWorldGenerationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldGenerationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldGenerationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldGenerationJobRequest), arg0)
}

// CreateWorldGenerationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateWorldGenerationJobWithContext(arg0 context.Context, arg1 *robomaker.CreateWorldGenerationJobInput, arg2 ...request.Option) (*robomaker.CreateWorldGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorldGenerationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateWorldGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldGenerationJobWithContext indicates an expected call of CreateWorldGenerationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldGenerationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldGenerationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldGenerationJobWithContext), varargs...)
}

// CreateWorldTemplate mocks base method.
func (m *MockRoboMakerAPI) CreateWorldTemplate(arg0 *robomaker.CreateWorldTemplateInput) (*robomaker.CreateWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldTemplate", arg0)
	ret0, _ := ret[0].(*robomaker.CreateWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldTemplate indicates an expected call of CreateWorldTemplate.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldTemplate", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldTemplate), arg0)
}

// CreateWorldTemplateRequest mocks base method.
func (m *MockRoboMakerAPI) CreateWorldTemplateRequest(arg0 *robomaker.CreateWorldTemplateInput) (*request.Request, *robomaker.CreateWorldTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.CreateWorldTemplateOutput)
	return ret0, ret1
}

// CreateWorldTemplateRequest indicates an expected call of CreateWorldTemplateRequest.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldTemplateRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldTemplateRequest), arg0)
}

// CreateWorldTemplateWithContext mocks base method.
func (m *MockRoboMakerAPI) CreateWorldTemplateWithContext(arg0 context.Context, arg1 *robomaker.CreateWorldTemplateInput, arg2 ...request.Option) (*robomaker.CreateWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorldTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.CreateWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldTemplateWithContext indicates an expected call of CreateWorldTemplateWithContext.
func (mr *MockRoboMakerAPIMockRecorder) CreateWorldTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldTemplateWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).CreateWorldTemplateWithContext), varargs...)
}

// DeleteFleet mocks base method.
func (m *MockRoboMakerAPI) DeleteFleet(arg0 *robomaker.DeleteFleetInput) (*robomaker.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleet", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleet indicates an expected call of DeleteFleet.
func (mr *MockRoboMakerAPIMockRecorder) DeleteFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleet", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteFleet), arg0)
}

// DeleteFleetRequest mocks base method.
func (m *MockRoboMakerAPI) DeleteFleetRequest(arg0 *robomaker.DeleteFleetInput) (*request.Request, *robomaker.DeleteFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteFleetOutput)
	return ret0, ret1
}

// DeleteFleetRequest indicates an expected call of DeleteFleetRequest.
func (mr *MockRoboMakerAPIMockRecorder) DeleteFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteFleetRequest), arg0)
}

// DeleteFleetWithContext mocks base method.
func (m *MockRoboMakerAPI) DeleteFleetWithContext(arg0 context.Context, arg1 *robomaker.DeleteFleetInput, arg2 ...request.Option) (*robomaker.DeleteFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFleetWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFleetWithContext indicates an expected call of DeleteFleetWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DeleteFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleetWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteFleetWithContext), varargs...)
}

// DeleteRobot mocks base method.
func (m *MockRoboMakerAPI) DeleteRobot(arg0 *robomaker.DeleteRobotInput) (*robomaker.DeleteRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobot", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobot indicates an expected call of DeleteRobot.
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobot), arg0)
}

// DeleteRobotApplication mocks base method.
func (m *MockRoboMakerAPI) DeleteRobotApplication(arg0 *robomaker.DeleteRobotApplicationInput) (*robomaker.DeleteRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotApplication indicates an expected call of DeleteRobotApplication.
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotApplication), arg0)
}

// DeleteRobotApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) DeleteRobotApplicationRequest(arg0 *robomaker.DeleteRobotApplicationInput) (*request.Request, *robomaker.DeleteRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteRobotApplicationOutput)
	return ret0, ret1
}

// DeleteRobotApplicationRequest indicates an expected call of DeleteRobotApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotApplicationRequest), arg0)
}

// DeleteRobotApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) DeleteRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.DeleteRobotApplicationInput, arg2 ...request.Option) (*robomaker.DeleteRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotApplicationWithContext indicates an expected call of DeleteRobotApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotApplicationWithContext), varargs...)
}

// DeleteRobotRequest mocks base method.
func (m *MockRoboMakerAPI) DeleteRobotRequest(arg0 *robomaker.DeleteRobotInput) (*request.Request, *robomaker.DeleteRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteRobotOutput)
	return ret0, ret1
}

// DeleteRobotRequest indicates an expected call of DeleteRobotRequest.
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotRequest), arg0)
}

// DeleteRobotWithContext mocks base method.
func (m *MockRoboMakerAPI) DeleteRobotWithContext(arg0 context.Context, arg1 *robomaker.DeleteRobotInput, arg2 ...request.Option) (*robomaker.DeleteRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRobotWithContext indicates an expected call of DeleteRobotWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DeleteRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteRobotWithContext), varargs...)
}

// DeleteSimulationApplication mocks base method.
func (m *MockRoboMakerAPI) DeleteSimulationApplication(arg0 *robomaker.DeleteSimulationApplicationInput) (*robomaker.DeleteSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSimulationApplication indicates an expected call of DeleteSimulationApplication.
func (mr *MockRoboMakerAPIMockRecorder) DeleteSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteSimulationApplication), arg0)
}

// DeleteSimulationApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) DeleteSimulationApplicationRequest(arg0 *robomaker.DeleteSimulationApplicationInput) (*request.Request, *robomaker.DeleteSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteSimulationApplicationOutput)
	return ret0, ret1
}

// DeleteSimulationApplicationRequest indicates an expected call of DeleteSimulationApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) DeleteSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteSimulationApplicationRequest), arg0)
}

// DeleteSimulationApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) DeleteSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.DeleteSimulationApplicationInput, arg2 ...request.Option) (*robomaker.DeleteSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSimulationApplicationWithContext indicates an expected call of DeleteSimulationApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DeleteSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteSimulationApplicationWithContext), varargs...)
}

// DeleteWorldTemplate mocks base method.
func (m *MockRoboMakerAPI) DeleteWorldTemplate(arg0 *robomaker.DeleteWorldTemplateInput) (*robomaker.DeleteWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldTemplate", arg0)
	ret0, _ := ret[0].(*robomaker.DeleteWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorldTemplate indicates an expected call of DeleteWorldTemplate.
func (mr *MockRoboMakerAPIMockRecorder) DeleteWorldTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldTemplate", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteWorldTemplate), arg0)
}

// DeleteWorldTemplateRequest mocks base method.
func (m *MockRoboMakerAPI) DeleteWorldTemplateRequest(arg0 *robomaker.DeleteWorldTemplateInput) (*request.Request, *robomaker.DeleteWorldTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorldTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeleteWorldTemplateOutput)
	return ret0, ret1
}

// DeleteWorldTemplateRequest indicates an expected call of DeleteWorldTemplateRequest.
func (mr *MockRoboMakerAPIMockRecorder) DeleteWorldTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldTemplateRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteWorldTemplateRequest), arg0)
}

// DeleteWorldTemplateWithContext mocks base method.
func (m *MockRoboMakerAPI) DeleteWorldTemplateWithContext(arg0 context.Context, arg1 *robomaker.DeleteWorldTemplateInput, arg2 ...request.Option) (*robomaker.DeleteWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorldTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeleteWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorldTemplateWithContext indicates an expected call of DeleteWorldTemplateWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DeleteWorldTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorldTemplateWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeleteWorldTemplateWithContext), varargs...)
}

// DeregisterRobot mocks base method.
func (m *MockRoboMakerAPI) DeregisterRobot(arg0 *robomaker.DeregisterRobotInput) (*robomaker.DeregisterRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterRobot", arg0)
	ret0, _ := ret[0].(*robomaker.DeregisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterRobot indicates an expected call of DeregisterRobot.
func (mr *MockRoboMakerAPIMockRecorder) DeregisterRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeregisterRobot), arg0)
}

// DeregisterRobotRequest mocks base method.
func (m *MockRoboMakerAPI) DeregisterRobotRequest(arg0 *robomaker.DeregisterRobotInput) (*request.Request, *robomaker.DeregisterRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DeregisterRobotOutput)
	return ret0, ret1
}

// DeregisterRobotRequest indicates an expected call of DeregisterRobotRequest.
func (mr *MockRoboMakerAPIMockRecorder) DeregisterRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeregisterRobotRequest), arg0)
}

// DeregisterRobotWithContext mocks base method.
func (m *MockRoboMakerAPI) DeregisterRobotWithContext(arg0 context.Context, arg1 *robomaker.DeregisterRobotInput, arg2 ...request.Option) (*robomaker.DeregisterRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DeregisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterRobotWithContext indicates an expected call of DeregisterRobotWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DeregisterRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DeregisterRobotWithContext), varargs...)
}

// DescribeDeploymentJob mocks base method.
func (m *MockRoboMakerAPI) DescribeDeploymentJob(arg0 *robomaker.DescribeDeploymentJobInput) (*robomaker.DescribeDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeploymentJob", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeploymentJob indicates an expected call of DescribeDeploymentJob.
func (mr *MockRoboMakerAPIMockRecorder) DescribeDeploymentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeDeploymentJob), arg0)
}

// DescribeDeploymentJobRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeDeploymentJobRequest(arg0 *robomaker.DescribeDeploymentJobInput) (*request.Request, *robomaker.DescribeDeploymentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeploymentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeDeploymentJobOutput)
	return ret0, ret1
}

// DescribeDeploymentJobRequest indicates an expected call of DescribeDeploymentJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeDeploymentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeDeploymentJobRequest), arg0)
}

// DescribeDeploymentJobWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeDeploymentJobWithContext(arg0 context.Context, arg1 *robomaker.DescribeDeploymentJobInput, arg2 ...request.Option) (*robomaker.DescribeDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeploymentJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeploymentJobWithContext indicates an expected call of DescribeDeploymentJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeDeploymentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeDeploymentJobWithContext), varargs...)
}

// DescribeFleet mocks base method.
func (m *MockRoboMakerAPI) DescribeFleet(arg0 *robomaker.DescribeFleetInput) (*robomaker.DescribeFleetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFleet", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleet indicates an expected call of DescribeFleet.
func (mr *MockRoboMakerAPIMockRecorder) DescribeFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleet", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeFleet), arg0)
}

// DescribeFleetRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeFleetRequest(arg0 *robomaker.DescribeFleetInput) (*request.Request, *robomaker.DescribeFleetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeFleetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeFleetOutput)
	return ret0, ret1
}

// DescribeFleetRequest indicates an expected call of DescribeFleetRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeFleetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeFleetRequest), arg0)
}

// DescribeFleetWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeFleetWithContext(arg0 context.Context, arg1 *robomaker.DescribeFleetInput, arg2 ...request.Option) (*robomaker.DescribeFleetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeFleetWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeFleetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeFleetWithContext indicates an expected call of DescribeFleetWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeFleetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeFleetWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeFleetWithContext), varargs...)
}

// DescribeRobot mocks base method.
func (m *MockRoboMakerAPI) DescribeRobot(arg0 *robomaker.DescribeRobotInput) (*robomaker.DescribeRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobot", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobot indicates an expected call of DescribeRobot.
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobot), arg0)
}

// DescribeRobotApplication mocks base method.
func (m *MockRoboMakerAPI) DescribeRobotApplication(arg0 *robomaker.DescribeRobotApplicationInput) (*robomaker.DescribeRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobotApplication indicates an expected call of DescribeRobotApplication.
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotApplication), arg0)
}

// DescribeRobotApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeRobotApplicationRequest(arg0 *robomaker.DescribeRobotApplicationInput) (*request.Request, *robomaker.DescribeRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeRobotApplicationOutput)
	return ret0, ret1
}

// DescribeRobotApplicationRequest indicates an expected call of DescribeRobotApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotApplicationRequest), arg0)
}

// DescribeRobotApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.DescribeRobotApplicationInput, arg2 ...request.Option) (*robomaker.DescribeRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobotApplicationWithContext indicates an expected call of DescribeRobotApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotApplicationWithContext), varargs...)
}

// DescribeRobotRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeRobotRequest(arg0 *robomaker.DescribeRobotInput) (*request.Request, *robomaker.DescribeRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeRobotOutput)
	return ret0, ret1
}

// DescribeRobotRequest indicates an expected call of DescribeRobotRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotRequest), arg0)
}

// DescribeRobotWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeRobotWithContext(arg0 context.Context, arg1 *robomaker.DescribeRobotInput, arg2 ...request.Option) (*robomaker.DescribeRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRobotWithContext indicates an expected call of DescribeRobotWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeRobotWithContext), varargs...)
}

// DescribeSimulationApplication mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationApplication(arg0 *robomaker.DescribeSimulationApplicationInput) (*robomaker.DescribeSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationApplication indicates an expected call of DescribeSimulationApplication.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationApplication), arg0)
}

// DescribeSimulationApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationApplicationRequest(arg0 *robomaker.DescribeSimulationApplicationInput) (*request.Request, *robomaker.DescribeSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeSimulationApplicationOutput)
	return ret0, ret1
}

// DescribeSimulationApplicationRequest indicates an expected call of DescribeSimulationApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationApplicationRequest), arg0)
}

// DescribeSimulationApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.DescribeSimulationApplicationInput, arg2 ...request.Option) (*robomaker.DescribeSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationApplicationWithContext indicates an expected call of DescribeSimulationApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationApplicationWithContext), varargs...)
}

// DescribeSimulationJob mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationJob(arg0 *robomaker.DescribeSimulationJobInput) (*robomaker.DescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationJob indicates an expected call of DescribeSimulationJob.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJob), arg0)
}

// DescribeSimulationJobBatch mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationJobBatch(arg0 *robomaker.DescribeSimulationJobBatchInput) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationJobBatch", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationJobBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationJobBatch indicates an expected call of DescribeSimulationJobBatch.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJobBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJobBatch", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJobBatch), arg0)
}

// DescribeSimulationJobBatchRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationJobBatchRequest(arg0 *robomaker.DescribeSimulationJobBatchInput) (*request.Request, *robomaker.DescribeSimulationJobBatchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationJobBatchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeSimulationJobBatchOutput)
	return ret0, ret1
}

// DescribeSimulationJobBatchRequest indicates an expected call of DescribeSimulationJobBatchRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJobBatchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJobBatchRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJobBatchRequest), arg0)
}

// DescribeSimulationJobBatchWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationJobBatchWithContext(arg0 context.Context, arg1 *robomaker.DescribeSimulationJobBatchInput, arg2 ...request.Option) (*robomaker.DescribeSimulationJobBatchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSimulationJobBatchWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationJobBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationJobBatchWithContext indicates an expected call of DescribeSimulationJobBatchWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJobBatchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJobBatchWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJobBatchWithContext), varargs...)
}

// DescribeSimulationJobRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationJobRequest(arg0 *robomaker.DescribeSimulationJobInput) (*request.Request, *robomaker.DescribeSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeSimulationJobOutput)
	return ret0, ret1
}

// DescribeSimulationJobRequest indicates an expected call of DescribeSimulationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJobRequest), arg0)
}

// DescribeSimulationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.DescribeSimulationJobInput, arg2 ...request.Option) (*robomaker.DescribeSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSimulationJobWithContext indicates an expected call of DescribeSimulationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeSimulationJobWithContext), varargs...)
}

// DescribeWorld mocks base method.
func (m *MockRoboMakerAPI) DescribeWorld(arg0 *robomaker.DescribeWorldInput) (*robomaker.DescribeWorldOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorld", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeWorldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorld indicates an expected call of DescribeWorld.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorld(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorld", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorld), arg0)
}

// DescribeWorldExportJob mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldExportJob(arg0 *robomaker.DescribeWorldExportJobInput) (*robomaker.DescribeWorldExportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorldExportJob", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeWorldExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorldExportJob indicates an expected call of DescribeWorldExportJob.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldExportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldExportJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldExportJob), arg0)
}

// DescribeWorldExportJobRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldExportJobRequest(arg0 *robomaker.DescribeWorldExportJobInput) (*request.Request, *robomaker.DescribeWorldExportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorldExportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeWorldExportJobOutput)
	return ret0, ret1
}

// DescribeWorldExportJobRequest indicates an expected call of DescribeWorldExportJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldExportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldExportJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldExportJobRequest), arg0)
}

// DescribeWorldExportJobWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldExportJobWithContext(arg0 context.Context, arg1 *robomaker.DescribeWorldExportJobInput, arg2 ...request.Option) (*robomaker.DescribeWorldExportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorldExportJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeWorldExportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorldExportJobWithContext indicates an expected call of DescribeWorldExportJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldExportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldExportJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldExportJobWithContext), varargs...)
}

// DescribeWorldGenerationJob mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldGenerationJob(arg0 *robomaker.DescribeWorldGenerationJobInput) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorldGenerationJob", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeWorldGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorldGenerationJob indicates an expected call of DescribeWorldGenerationJob.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldGenerationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldGenerationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldGenerationJob), arg0)
}

// DescribeWorldGenerationJobRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldGenerationJobRequest(arg0 *robomaker.DescribeWorldGenerationJobInput) (*request.Request, *robomaker.DescribeWorldGenerationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorldGenerationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeWorldGenerationJobOutput)
	return ret0, ret1
}

// DescribeWorldGenerationJobRequest indicates an expected call of DescribeWorldGenerationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldGenerationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldGenerationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldGenerationJobRequest), arg0)
}

// DescribeWorldGenerationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldGenerationJobWithContext(arg0 context.Context, arg1 *robomaker.DescribeWorldGenerationJobInput, arg2 ...request.Option) (*robomaker.DescribeWorldGenerationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorldGenerationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeWorldGenerationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorldGenerationJobWithContext indicates an expected call of DescribeWorldGenerationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldGenerationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldGenerationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldGenerationJobWithContext), varargs...)
}

// DescribeWorldRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldRequest(arg0 *robomaker.DescribeWorldInput) (*request.Request, *robomaker.DescribeWorldOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorldRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeWorldOutput)
	return ret0, ret1
}

// DescribeWorldRequest indicates an expected call of DescribeWorldRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldRequest), arg0)
}

// DescribeWorldTemplate mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldTemplate(arg0 *robomaker.DescribeWorldTemplateInput) (*robomaker.DescribeWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorldTemplate", arg0)
	ret0, _ := ret[0].(*robomaker.DescribeWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorldTemplate indicates an expected call of DescribeWorldTemplate.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldTemplate", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldTemplate), arg0)
}

// DescribeWorldTemplateRequest mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldTemplateRequest(arg0 *robomaker.DescribeWorldTemplateInput) (*request.Request, *robomaker.DescribeWorldTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorldTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.DescribeWorldTemplateOutput)
	return ret0, ret1
}

// DescribeWorldTemplateRequest indicates an expected call of DescribeWorldTemplateRequest.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldTemplateRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldTemplateRequest), arg0)
}

// DescribeWorldTemplateWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldTemplateWithContext(arg0 context.Context, arg1 *robomaker.DescribeWorldTemplateInput, arg2 ...request.Option) (*robomaker.DescribeWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorldTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorldTemplateWithContext indicates an expected call of DescribeWorldTemplateWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldTemplateWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldTemplateWithContext), varargs...)
}

// DescribeWorldWithContext mocks base method.
func (m *MockRoboMakerAPI) DescribeWorldWithContext(arg0 context.Context, arg1 *robomaker.DescribeWorldInput, arg2 ...request.Option) (*robomaker.DescribeWorldOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorldWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.DescribeWorldOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorldWithContext indicates an expected call of DescribeWorldWithContext.
func (mr *MockRoboMakerAPIMockRecorder) DescribeWorldWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorldWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).DescribeWorldWithContext), varargs...)
}

// GetWorldTemplateBody mocks base method.
func (m *MockRoboMakerAPI) GetWorldTemplateBody(arg0 *robomaker.GetWorldTemplateBodyInput) (*robomaker.GetWorldTemplateBodyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldTemplateBody", arg0)
	ret0, _ := ret[0].(*robomaker.GetWorldTemplateBodyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldTemplateBody indicates an expected call of GetWorldTemplateBody.
func (mr *MockRoboMakerAPIMockRecorder) GetWorldTemplateBody(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTemplateBody", reflect.TypeOf((*MockRoboMakerAPI)(nil).GetWorldTemplateBody), arg0)
}

// GetWorldTemplateBodyRequest mocks base method.
func (m *MockRoboMakerAPI) GetWorldTemplateBodyRequest(arg0 *robomaker.GetWorldTemplateBodyInput) (*request.Request, *robomaker.GetWorldTemplateBodyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldTemplateBodyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.GetWorldTemplateBodyOutput)
	return ret0, ret1
}

// GetWorldTemplateBodyRequest indicates an expected call of GetWorldTemplateBodyRequest.
func (mr *MockRoboMakerAPIMockRecorder) GetWorldTemplateBodyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTemplateBodyRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).GetWorldTemplateBodyRequest), arg0)
}

// GetWorldTemplateBodyWithContext mocks base method.
func (m *MockRoboMakerAPI) GetWorldTemplateBodyWithContext(arg0 context.Context, arg1 *robomaker.GetWorldTemplateBodyInput, arg2 ...request.Option) (*robomaker.GetWorldTemplateBodyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorldTemplateBodyWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.GetWorldTemplateBodyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldTemplateBodyWithContext indicates an expected call of GetWorldTemplateBodyWithContext.
func (mr *MockRoboMakerAPIMockRecorder) GetWorldTemplateBodyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldTemplateBodyWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).GetWorldTemplateBodyWithContext), varargs...)
}

// ListDeploymentJobs mocks base method.
func (m *MockRoboMakerAPI) ListDeploymentJobs(arg0 *robomaker.ListDeploymentJobsInput) (*robomaker.ListDeploymentJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentJobs", arg0)
	ret0, _ := ret[0].(*robomaker.ListDeploymentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentJobs indicates an expected call of ListDeploymentJobs.
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobs", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobs), arg0)
}

// ListDeploymentJobsPages mocks base method.
func (m *MockRoboMakerAPI) ListDeploymentJobsPages(arg0 *robomaker.ListDeploymentJobsInput, arg1 func(*robomaker.ListDeploymentJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentJobsPages indicates an expected call of ListDeploymentJobsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobsPages), arg0, arg1)
}

// ListDeploymentJobsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListDeploymentJobsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListDeploymentJobsInput, arg2 func(*robomaker.ListDeploymentJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeploymentJobsPagesWithContext indicates an expected call of ListDeploymentJobsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobsPagesWithContext), varargs...)
}

// ListDeploymentJobsRequest mocks base method.
func (m *MockRoboMakerAPI) ListDeploymentJobsRequest(arg0 *robomaker.ListDeploymentJobsInput) (*request.Request, *robomaker.ListDeploymentJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListDeploymentJobsOutput)
	return ret0, ret1
}

// ListDeploymentJobsRequest indicates an expected call of ListDeploymentJobsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobsRequest), arg0)
}

// ListDeploymentJobsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListDeploymentJobsWithContext(arg0 context.Context, arg1 *robomaker.ListDeploymentJobsInput, arg2 ...request.Option) (*robomaker.ListDeploymentJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentJobsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListDeploymentJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentJobsWithContext indicates an expected call of ListDeploymentJobsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListDeploymentJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentJobsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListDeploymentJobsWithContext), varargs...)
}

// ListFleets mocks base method.
func (m *MockRoboMakerAPI) ListFleets(arg0 *robomaker.ListFleetsInput) (*robomaker.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleets", arg0)
	ret0, _ := ret[0].(*robomaker.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleets indicates an expected call of ListFleets.
func (mr *MockRoboMakerAPIMockRecorder) ListFleets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleets", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleets), arg0)
}

// ListFleetsPages mocks base method.
func (m *MockRoboMakerAPI) ListFleetsPages(arg0 *robomaker.ListFleetsInput, arg1 func(*robomaker.ListFleetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsPages indicates an expected call of ListFleetsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListFleetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleetsPages), arg0, arg1)
}

// ListFleetsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListFleetsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListFleetsInput, arg2 func(*robomaker.ListFleetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFleetsPagesWithContext indicates an expected call of ListFleetsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListFleetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleetsPagesWithContext), varargs...)
}

// ListFleetsRequest mocks base method.
func (m *MockRoboMakerAPI) ListFleetsRequest(arg0 *robomaker.ListFleetsInput) (*request.Request, *robomaker.ListFleetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListFleetsOutput)
	return ret0, ret1
}

// ListFleetsRequest indicates an expected call of ListFleetsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListFleetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleetsRequest), arg0)
}

// ListFleetsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListFleetsWithContext(arg0 context.Context, arg1 *robomaker.ListFleetsInput, arg2 ...request.Option) (*robomaker.ListFleetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFleetsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListFleetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFleetsWithContext indicates an expected call of ListFleetsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListFleetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListFleetsWithContext), varargs...)
}

// ListRobotApplications mocks base method.
func (m *MockRoboMakerAPI) ListRobotApplications(arg0 *robomaker.ListRobotApplicationsInput) (*robomaker.ListRobotApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotApplications", arg0)
	ret0, _ := ret[0].(*robomaker.ListRobotApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobotApplications indicates an expected call of ListRobotApplications.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplications", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplications), arg0)
}

// ListRobotApplicationsPages mocks base method.
func (m *MockRoboMakerAPI) ListRobotApplicationsPages(arg0 *robomaker.ListRobotApplicationsInput, arg1 func(*robomaker.ListRobotApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRobotApplicationsPages indicates an expected call of ListRobotApplicationsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplicationsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplicationsPages), arg0, arg1)
}

// ListRobotApplicationsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListRobotApplicationsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListRobotApplicationsInput, arg2 func(*robomaker.ListRobotApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRobotApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRobotApplicationsPagesWithContext indicates an expected call of ListRobotApplicationsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplicationsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplicationsPagesWithContext), varargs...)
}

// ListRobotApplicationsRequest mocks base method.
func (m *MockRoboMakerAPI) ListRobotApplicationsRequest(arg0 *robomaker.ListRobotApplicationsInput) (*request.Request, *robomaker.ListRobotApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListRobotApplicationsOutput)
	return ret0, ret1
}

// ListRobotApplicationsRequest indicates an expected call of ListRobotApplicationsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplicationsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplicationsRequest), arg0)
}

// ListRobotApplicationsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListRobotApplicationsWithContext(arg0 context.Context, arg1 *robomaker.ListRobotApplicationsInput, arg2 ...request.Option) (*robomaker.ListRobotApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRobotApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListRobotApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobotApplicationsWithContext indicates an expected call of ListRobotApplicationsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotApplicationsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotApplicationsWithContext), varargs...)
}

// ListRobots mocks base method.
func (m *MockRoboMakerAPI) ListRobots(arg0 *robomaker.ListRobotsInput) (*robomaker.ListRobotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobots", arg0)
	ret0, _ := ret[0].(*robomaker.ListRobotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobots indicates an expected call of ListRobots.
func (mr *MockRoboMakerAPIMockRecorder) ListRobots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobots", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobots), arg0)
}

// ListRobotsPages mocks base method.
func (m *MockRoboMakerAPI) ListRobotsPages(arg0 *robomaker.ListRobotsInput, arg1 func(*robomaker.ListRobotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRobotsPages indicates an expected call of ListRobotsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotsPages), arg0, arg1)
}

// ListRobotsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListRobotsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListRobotsInput, arg2 func(*robomaker.ListRobotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRobotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRobotsPagesWithContext indicates an expected call of ListRobotsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotsPagesWithContext), varargs...)
}

// ListRobotsRequest mocks base method.
func (m *MockRoboMakerAPI) ListRobotsRequest(arg0 *robomaker.ListRobotsInput) (*request.Request, *robomaker.ListRobotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRobotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListRobotsOutput)
	return ret0, ret1
}

// ListRobotsRequest indicates an expected call of ListRobotsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotsRequest), arg0)
}

// ListRobotsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListRobotsWithContext(arg0 context.Context, arg1 *robomaker.ListRobotsInput, arg2 ...request.Option) (*robomaker.ListRobotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRobotsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListRobotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRobotsWithContext indicates an expected call of ListRobotsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListRobotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRobotsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListRobotsWithContext), varargs...)
}

// ListSimulationApplications mocks base method.
func (m *MockRoboMakerAPI) ListSimulationApplications(arg0 *robomaker.ListSimulationApplicationsInput) (*robomaker.ListSimulationApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationApplications", arg0)
	ret0, _ := ret[0].(*robomaker.ListSimulationApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationApplications indicates an expected call of ListSimulationApplications.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplications", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplications), arg0)
}

// ListSimulationApplicationsPages mocks base method.
func (m *MockRoboMakerAPI) ListSimulationApplicationsPages(arg0 *robomaker.ListSimulationApplicationsInput, arg1 func(*robomaker.ListSimulationApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationApplicationsPages indicates an expected call of ListSimulationApplicationsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplicationsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplicationsPages), arg0, arg1)
}

// ListSimulationApplicationsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListSimulationApplicationsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationApplicationsInput, arg2 func(*robomaker.ListSimulationApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationApplicationsPagesWithContext indicates an expected call of ListSimulationApplicationsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplicationsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplicationsPagesWithContext), varargs...)
}

// ListSimulationApplicationsRequest mocks base method.
func (m *MockRoboMakerAPI) ListSimulationApplicationsRequest(arg0 *robomaker.ListSimulationApplicationsInput) (*request.Request, *robomaker.ListSimulationApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListSimulationApplicationsOutput)
	return ret0, ret1
}

// ListSimulationApplicationsRequest indicates an expected call of ListSimulationApplicationsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplicationsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplicationsRequest), arg0)
}

// ListSimulationApplicationsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListSimulationApplicationsWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationApplicationsInput, arg2 ...request.Option) (*robomaker.ListSimulationApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListSimulationApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationApplicationsWithContext indicates an expected call of ListSimulationApplicationsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationApplicationsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationApplicationsWithContext), varargs...)
}

// ListSimulationJobBatches mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobBatches(arg0 *robomaker.ListSimulationJobBatchesInput) (*robomaker.ListSimulationJobBatchesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobBatches", arg0)
	ret0, _ := ret[0].(*robomaker.ListSimulationJobBatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationJobBatches indicates an expected call of ListSimulationJobBatches.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobBatches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobBatches", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobBatches), arg0)
}

// ListSimulationJobBatchesPages mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobBatchesPages(arg0 *robomaker.ListSimulationJobBatchesInput, arg1 func(*robomaker.ListSimulationJobBatchesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobBatchesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationJobBatchesPages indicates an expected call of ListSimulationJobBatchesPages.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobBatchesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobBatchesPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobBatchesPages), arg0, arg1)
}

// ListSimulationJobBatchesPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobBatchesPagesWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationJobBatchesInput, arg2 func(*robomaker.ListSimulationJobBatchesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationJobBatchesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationJobBatchesPagesWithContext indicates an expected call of ListSimulationJobBatchesPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobBatchesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobBatchesPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobBatchesPagesWithContext), varargs...)
}

// ListSimulationJobBatchesRequest mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobBatchesRequest(arg0 *robomaker.ListSimulationJobBatchesInput) (*request.Request, *robomaker.ListSimulationJobBatchesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobBatchesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListSimulationJobBatchesOutput)
	return ret0, ret1
}

// ListSimulationJobBatchesRequest indicates an expected call of ListSimulationJobBatchesRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobBatchesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobBatchesRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobBatchesRequest), arg0)
}

// ListSimulationJobBatchesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobBatchesWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationJobBatchesInput, arg2 ...request.Option) (*robomaker.ListSimulationJobBatchesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationJobBatchesWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListSimulationJobBatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationJobBatchesWithContext indicates an expected call of ListSimulationJobBatchesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobBatchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobBatchesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobBatchesWithContext), varargs...)
}

// ListSimulationJobs mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobs(arg0 *robomaker.ListSimulationJobsInput) (*robomaker.ListSimulationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobs", arg0)
	ret0, _ := ret[0].(*robomaker.ListSimulationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationJobs indicates an expected call of ListSimulationJobs.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobs", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobs), arg0)
}

// ListSimulationJobsPages mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobsPages(arg0 *robomaker.ListSimulationJobsInput, arg1 func(*robomaker.ListSimulationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationJobsPages indicates an expected call of ListSimulationJobsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobsPages), arg0, arg1)
}

// ListSimulationJobsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationJobsInput, arg2 func(*robomaker.ListSimulationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSimulationJobsPagesWithContext indicates an expected call of ListSimulationJobsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobsPagesWithContext), varargs...)
}

// ListSimulationJobsRequest mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobsRequest(arg0 *robomaker.ListSimulationJobsInput) (*request.Request, *robomaker.ListSimulationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSimulationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListSimulationJobsOutput)
	return ret0, ret1
}

// ListSimulationJobsRequest indicates an expected call of ListSimulationJobsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobsRequest), arg0)
}

// ListSimulationJobsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListSimulationJobsWithContext(arg0 context.Context, arg1 *robomaker.ListSimulationJobsInput, arg2 ...request.Option) (*robomaker.ListSimulationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSimulationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListSimulationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSimulationJobsWithContext indicates an expected call of ListSimulationJobsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListSimulationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSimulationJobsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListSimulationJobsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRoboMakerAPI) ListTagsForResource(arg0 *robomaker.ListTagsForResourceInput) (*robomaker.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*robomaker.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRoboMakerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockRoboMakerAPI) ListTagsForResourceRequest(arg0 *robomaker.ListTagsForResourceInput) (*request.Request, *robomaker.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockRoboMakerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *robomaker.ListTagsForResourceInput, arg2 ...request.Option) (*robomaker.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWorldExportJobs mocks base method.
func (m *MockRoboMakerAPI) ListWorldExportJobs(arg0 *robomaker.ListWorldExportJobsInput) (*robomaker.ListWorldExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldExportJobs", arg0)
	ret0, _ := ret[0].(*robomaker.ListWorldExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorldExportJobs indicates an expected call of ListWorldExportJobs.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldExportJobs", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldExportJobs), arg0)
}

// ListWorldExportJobsPages mocks base method.
func (m *MockRoboMakerAPI) ListWorldExportJobsPages(arg0 *robomaker.ListWorldExportJobsInput, arg1 func(*robomaker.ListWorldExportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldExportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldExportJobsPages indicates an expected call of ListWorldExportJobsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldExportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldExportJobsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldExportJobsPages), arg0, arg1)
}

// ListWorldExportJobsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldExportJobsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListWorldExportJobsInput, arg2 func(*robomaker.ListWorldExportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldExportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldExportJobsPagesWithContext indicates an expected call of ListWorldExportJobsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldExportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldExportJobsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldExportJobsPagesWithContext), varargs...)
}

// ListWorldExportJobsRequest mocks base method.
func (m *MockRoboMakerAPI) ListWorldExportJobsRequest(arg0 *robomaker.ListWorldExportJobsInput) (*request.Request, *robomaker.ListWorldExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListWorldExportJobsOutput)
	return ret0, ret1
}

// ListWorldExportJobsRequest indicates an expected call of ListWorldExportJobsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldExportJobsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldExportJobsRequest), arg0)
}

// ListWorldExportJobsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldExportJobsWithContext(arg0 context.Context, arg1 *robomaker.ListWorldExportJobsInput, arg2 ...request.Option) (*robomaker.ListWorldExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListWorldExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorldExportJobsWithContext indicates an expected call of ListWorldExportJobsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldExportJobsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldExportJobsWithContext), varargs...)
}

// ListWorldGenerationJobs mocks base method.
func (m *MockRoboMakerAPI) ListWorldGenerationJobs(arg0 *robomaker.ListWorldGenerationJobsInput) (*robomaker.ListWorldGenerationJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldGenerationJobs", arg0)
	ret0, _ := ret[0].(*robomaker.ListWorldGenerationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorldGenerationJobs indicates an expected call of ListWorldGenerationJobs.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldGenerationJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldGenerationJobs", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldGenerationJobs), arg0)
}

// ListWorldGenerationJobsPages mocks base method.
func (m *MockRoboMakerAPI) ListWorldGenerationJobsPages(arg0 *robomaker.ListWorldGenerationJobsInput, arg1 func(*robomaker.ListWorldGenerationJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldGenerationJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldGenerationJobsPages indicates an expected call of ListWorldGenerationJobsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldGenerationJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldGenerationJobsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldGenerationJobsPages), arg0, arg1)
}

// ListWorldGenerationJobsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldGenerationJobsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListWorldGenerationJobsInput, arg2 func(*robomaker.ListWorldGenerationJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldGenerationJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldGenerationJobsPagesWithContext indicates an expected call of ListWorldGenerationJobsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldGenerationJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldGenerationJobsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldGenerationJobsPagesWithContext), varargs...)
}

// ListWorldGenerationJobsRequest mocks base method.
func (m *MockRoboMakerAPI) ListWorldGenerationJobsRequest(arg0 *robomaker.ListWorldGenerationJobsInput) (*request.Request, *robomaker.ListWorldGenerationJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldGenerationJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListWorldGenerationJobsOutput)
	return ret0, ret1
}

// ListWorldGenerationJobsRequest indicates an expected call of ListWorldGenerationJobsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldGenerationJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldGenerationJobsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldGenerationJobsRequest), arg0)
}

// ListWorldGenerationJobsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldGenerationJobsWithContext(arg0 context.Context, arg1 *robomaker.ListWorldGenerationJobsInput, arg2 ...request.Option) (*robomaker.ListWorldGenerationJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldGenerationJobsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListWorldGenerationJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorldGenerationJobsWithContext indicates an expected call of ListWorldGenerationJobsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldGenerationJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldGenerationJobsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldGenerationJobsWithContext), varargs...)
}

// ListWorldTemplates mocks base method.
func (m *MockRoboMakerAPI) ListWorldTemplates(arg0 *robomaker.ListWorldTemplatesInput) (*robomaker.ListWorldTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldTemplates", arg0)
	ret0, _ := ret[0].(*robomaker.ListWorldTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorldTemplates indicates an expected call of ListWorldTemplates.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldTemplates", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldTemplates), arg0)
}

// ListWorldTemplatesPages mocks base method.
func (m *MockRoboMakerAPI) ListWorldTemplatesPages(arg0 *robomaker.ListWorldTemplatesInput, arg1 func(*robomaker.ListWorldTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldTemplatesPages indicates an expected call of ListWorldTemplatesPages.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldTemplatesPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldTemplatesPages), arg0, arg1)
}

// ListWorldTemplatesPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldTemplatesPagesWithContext(arg0 context.Context, arg1 *robomaker.ListWorldTemplatesInput, arg2 func(*robomaker.ListWorldTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldTemplatesPagesWithContext indicates an expected call of ListWorldTemplatesPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldTemplatesPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldTemplatesPagesWithContext), varargs...)
}

// ListWorldTemplatesRequest mocks base method.
func (m *MockRoboMakerAPI) ListWorldTemplatesRequest(arg0 *robomaker.ListWorldTemplatesInput) (*request.Request, *robomaker.ListWorldTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListWorldTemplatesOutput)
	return ret0, ret1
}

// ListWorldTemplatesRequest indicates an expected call of ListWorldTemplatesRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldTemplatesRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldTemplatesRequest), arg0)
}

// ListWorldTemplatesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldTemplatesWithContext(arg0 context.Context, arg1 *robomaker.ListWorldTemplatesInput, arg2 ...request.Option) (*robomaker.ListWorldTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListWorldTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorldTemplatesWithContext indicates an expected call of ListWorldTemplatesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldTemplatesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldTemplatesWithContext), varargs...)
}

// ListWorlds mocks base method.
func (m *MockRoboMakerAPI) ListWorlds(arg0 *robomaker.ListWorldsInput) (*robomaker.ListWorldsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorlds", arg0)
	ret0, _ := ret[0].(*robomaker.ListWorldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorlds indicates an expected call of ListWorlds.
func (mr *MockRoboMakerAPIMockRecorder) ListWorlds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorlds", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorlds), arg0)
}

// ListWorldsPages mocks base method.
func (m *MockRoboMakerAPI) ListWorldsPages(arg0 *robomaker.ListWorldsInput, arg1 func(*robomaker.ListWorldsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldsPages indicates an expected call of ListWorldsPages.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldsPages", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldsPages), arg0, arg1)
}

// ListWorldsPagesWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldsPagesWithContext(arg0 context.Context, arg1 *robomaker.ListWorldsInput, arg2 func(*robomaker.ListWorldsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorldsPagesWithContext indicates an expected call of ListWorldsPagesWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldsPagesWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldsPagesWithContext), varargs...)
}

// ListWorldsRequest mocks base method.
func (m *MockRoboMakerAPI) ListWorldsRequest(arg0 *robomaker.ListWorldsInput) (*request.Request, *robomaker.ListWorldsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorldsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.ListWorldsOutput)
	return ret0, ret1
}

// ListWorldsRequest indicates an expected call of ListWorldsRequest.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldsRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldsRequest), arg0)
}

// ListWorldsWithContext mocks base method.
func (m *MockRoboMakerAPI) ListWorldsWithContext(arg0 context.Context, arg1 *robomaker.ListWorldsInput, arg2 ...request.Option) (*robomaker.ListWorldsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorldsWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.ListWorldsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorldsWithContext indicates an expected call of ListWorldsWithContext.
func (mr *MockRoboMakerAPIMockRecorder) ListWorldsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorldsWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).ListWorldsWithContext), varargs...)
}

// RegisterRobot mocks base method.
func (m *MockRoboMakerAPI) RegisterRobot(arg0 *robomaker.RegisterRobotInput) (*robomaker.RegisterRobotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRobot", arg0)
	ret0, _ := ret[0].(*robomaker.RegisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRobot indicates an expected call of RegisterRobot.
func (mr *MockRoboMakerAPIMockRecorder) RegisterRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRobot", reflect.TypeOf((*MockRoboMakerAPI)(nil).RegisterRobot), arg0)
}

// RegisterRobotRequest mocks base method.
func (m *MockRoboMakerAPI) RegisterRobotRequest(arg0 *robomaker.RegisterRobotInput) (*request.Request, *robomaker.RegisterRobotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRobotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.RegisterRobotOutput)
	return ret0, ret1
}

// RegisterRobotRequest indicates an expected call of RegisterRobotRequest.
func (mr *MockRoboMakerAPIMockRecorder) RegisterRobotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRobotRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).RegisterRobotRequest), arg0)
}

// RegisterRobotWithContext mocks base method.
func (m *MockRoboMakerAPI) RegisterRobotWithContext(arg0 context.Context, arg1 *robomaker.RegisterRobotInput, arg2 ...request.Option) (*robomaker.RegisterRobotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterRobotWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.RegisterRobotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRobotWithContext indicates an expected call of RegisterRobotWithContext.
func (mr *MockRoboMakerAPIMockRecorder) RegisterRobotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRobotWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).RegisterRobotWithContext), varargs...)
}

// RestartSimulationJob mocks base method.
func (m *MockRoboMakerAPI) RestartSimulationJob(arg0 *robomaker.RestartSimulationJobInput) (*robomaker.RestartSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartSimulationJob", arg0)
	ret0, _ := ret[0].(*robomaker.RestartSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartSimulationJob indicates an expected call of RestartSimulationJob.
func (mr *MockRoboMakerAPIMockRecorder) RestartSimulationJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSimulationJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).RestartSimulationJob), arg0)
}

// RestartSimulationJobRequest mocks base method.
func (m *MockRoboMakerAPI) RestartSimulationJobRequest(arg0 *robomaker.RestartSimulationJobInput) (*request.Request, *robomaker.RestartSimulationJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartSimulationJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.RestartSimulationJobOutput)
	return ret0, ret1
}

// RestartSimulationJobRequest indicates an expected call of RestartSimulationJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) RestartSimulationJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSimulationJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).RestartSimulationJobRequest), arg0)
}

// RestartSimulationJobWithContext mocks base method.
func (m *MockRoboMakerAPI) RestartSimulationJobWithContext(arg0 context.Context, arg1 *robomaker.RestartSimulationJobInput, arg2 ...request.Option) (*robomaker.RestartSimulationJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartSimulationJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.RestartSimulationJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartSimulationJobWithContext indicates an expected call of RestartSimulationJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) RestartSimulationJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSimulationJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).RestartSimulationJobWithContext), varargs...)
}

// StartSimulationJobBatch mocks base method.
func (m *MockRoboMakerAPI) StartSimulationJobBatch(arg0 *robomaker.StartSimulationJobBatchInput) (*robomaker.StartSimulationJobBatchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSimulationJobBatch", arg0)
	ret0, _ := ret[0].(*robomaker.StartSimulationJobBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSimulationJobBatch indicates an expected call of StartSimulationJobBatch.
func (mr *MockRoboMakerAPIMockRecorder) StartSimulationJobBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSimulationJobBatch", reflect.TypeOf((*MockRoboMakerAPI)(nil).StartSimulationJobBatch), arg0)
}

// StartSimulationJobBatchRequest mocks base method.
func (m *MockRoboMakerAPI) StartSimulationJobBatchRequest(arg0 *robomaker.StartSimulationJobBatchInput) (*request.Request, *robomaker.StartSimulationJobBatchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSimulationJobBatchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.StartSimulationJobBatchOutput)
	return ret0, ret1
}

// StartSimulationJobBatchRequest indicates an expected call of StartSimulationJobBatchRequest.
func (mr *MockRoboMakerAPIMockRecorder) StartSimulationJobBatchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSimulationJobBatchRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).StartSimulationJobBatchRequest), arg0)
}

// StartSimulationJobBatchWithContext mocks base method.
func (m *MockRoboMakerAPI) StartSimulationJobBatchWithContext(arg0 context.Context, arg1 *robomaker.StartSimulationJobBatchInput, arg2 ...request.Option) (*robomaker.StartSimulationJobBatchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSimulationJobBatchWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.StartSimulationJobBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSimulationJobBatchWithContext indicates an expected call of StartSimulationJobBatchWithContext.
func (mr *MockRoboMakerAPIMockRecorder) StartSimulationJobBatchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSimulationJobBatchWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).StartSimulationJobBatchWithContext), varargs...)
}

// SyncDeploymentJob mocks base method.
func (m *MockRoboMakerAPI) SyncDeploymentJob(arg0 *robomaker.SyncDeploymentJobInput) (*robomaker.SyncDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDeploymentJob", arg0)
	ret0, _ := ret[0].(*robomaker.SyncDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDeploymentJob indicates an expected call of SyncDeploymentJob.
func (mr *MockRoboMakerAPIMockRecorder) SyncDeploymentJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeploymentJob", reflect.TypeOf((*MockRoboMakerAPI)(nil).SyncDeploymentJob), arg0)
}

// SyncDeploymentJobRequest mocks base method.
func (m *MockRoboMakerAPI) SyncDeploymentJobRequest(arg0 *robomaker.SyncDeploymentJobInput) (*request.Request, *robomaker.SyncDeploymentJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDeploymentJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.SyncDeploymentJobOutput)
	return ret0, ret1
}

// SyncDeploymentJobRequest indicates an expected call of SyncDeploymentJobRequest.
func (mr *MockRoboMakerAPIMockRecorder) SyncDeploymentJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeploymentJobRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).SyncDeploymentJobRequest), arg0)
}

// SyncDeploymentJobWithContext mocks base method.
func (m *MockRoboMakerAPI) SyncDeploymentJobWithContext(arg0 context.Context, arg1 *robomaker.SyncDeploymentJobInput, arg2 ...request.Option) (*robomaker.SyncDeploymentJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncDeploymentJobWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.SyncDeploymentJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDeploymentJobWithContext indicates an expected call of SyncDeploymentJobWithContext.
func (mr *MockRoboMakerAPIMockRecorder) SyncDeploymentJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDeploymentJobWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).SyncDeploymentJobWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockRoboMakerAPI) TagResource(arg0 *robomaker.TagResourceInput) (*robomaker.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*robomaker.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockRoboMakerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRoboMakerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockRoboMakerAPI) TagResourceRequest(arg0 *robomaker.TagResourceInput) (*request.Request, *robomaker.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockRoboMakerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockRoboMakerAPI) TagResourceWithContext(arg0 context.Context, arg1 *robomaker.TagResourceInput, arg2 ...request.Option) (*robomaker.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockRoboMakerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockRoboMakerAPI) UntagResource(arg0 *robomaker.UntagResourceInput) (*robomaker.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*robomaker.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockRoboMakerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRoboMakerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockRoboMakerAPI) UntagResourceRequest(arg0 *robomaker.UntagResourceInput) (*request.Request, *robomaker.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockRoboMakerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockRoboMakerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *robomaker.UntagResourceInput, arg2 ...request.Option) (*robomaker.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockRoboMakerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateRobotApplication mocks base method.
func (m *MockRoboMakerAPI) UpdateRobotApplication(arg0 *robomaker.UpdateRobotApplicationInput) (*robomaker.UpdateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRobotApplication", arg0)
	ret0, _ := ret[0].(*robomaker.UpdateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobotApplication indicates an expected call of UpdateRobotApplication.
func (mr *MockRoboMakerAPIMockRecorder) UpdateRobotApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateRobotApplication), arg0)
}

// UpdateRobotApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) UpdateRobotApplicationRequest(arg0 *robomaker.UpdateRobotApplicationInput) (*request.Request, *robomaker.UpdateRobotApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRobotApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.UpdateRobotApplicationOutput)
	return ret0, ret1
}

// UpdateRobotApplicationRequest indicates an expected call of UpdateRobotApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) UpdateRobotApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateRobotApplicationRequest), arg0)
}

// UpdateRobotApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) UpdateRobotApplicationWithContext(arg0 context.Context, arg1 *robomaker.UpdateRobotApplicationInput, arg2 ...request.Option) (*robomaker.UpdateRobotApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRobotApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.UpdateRobotApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRobotApplicationWithContext indicates an expected call of UpdateRobotApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) UpdateRobotApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRobotApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateRobotApplicationWithContext), varargs...)
}

// UpdateSimulationApplication mocks base method.
func (m *MockRoboMakerAPI) UpdateSimulationApplication(arg0 *robomaker.UpdateSimulationApplicationInput) (*robomaker.UpdateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSimulationApplication", arg0)
	ret0, _ := ret[0].(*robomaker.UpdateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSimulationApplication indicates an expected call of UpdateSimulationApplication.
func (mr *MockRoboMakerAPIMockRecorder) UpdateSimulationApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimulationApplication", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateSimulationApplication), arg0)
}

// UpdateSimulationApplicationRequest mocks base method.
func (m *MockRoboMakerAPI) UpdateSimulationApplicationRequest(arg0 *robomaker.UpdateSimulationApplicationInput) (*request.Request, *robomaker.UpdateSimulationApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSimulationApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.UpdateSimulationApplicationOutput)
	return ret0, ret1
}

// UpdateSimulationApplicationRequest indicates an expected call of UpdateSimulationApplicationRequest.
func (mr *MockRoboMakerAPIMockRecorder) UpdateSimulationApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimulationApplicationRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateSimulationApplicationRequest), arg0)
}

// UpdateSimulationApplicationWithContext mocks base method.
func (m *MockRoboMakerAPI) UpdateSimulationApplicationWithContext(arg0 context.Context, arg1 *robomaker.UpdateSimulationApplicationInput, arg2 ...request.Option) (*robomaker.UpdateSimulationApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSimulationApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.UpdateSimulationApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSimulationApplicationWithContext indicates an expected call of UpdateSimulationApplicationWithContext.
func (mr *MockRoboMakerAPIMockRecorder) UpdateSimulationApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimulationApplicationWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateSimulationApplicationWithContext), varargs...)
}

// UpdateWorldTemplate mocks base method.
func (m *MockRoboMakerAPI) UpdateWorldTemplate(arg0 *robomaker.UpdateWorldTemplateInput) (*robomaker.UpdateWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorldTemplate", arg0)
	ret0, _ := ret[0].(*robomaker.UpdateWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldTemplate indicates an expected call of UpdateWorldTemplate.
func (mr *MockRoboMakerAPIMockRecorder) UpdateWorldTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldTemplate", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateWorldTemplate), arg0)
}

// UpdateWorldTemplateRequest mocks base method.
func (m *MockRoboMakerAPI) UpdateWorldTemplateRequest(arg0 *robomaker.UpdateWorldTemplateInput) (*request.Request, *robomaker.UpdateWorldTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorldTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*robomaker.UpdateWorldTemplateOutput)
	return ret0, ret1
}

// UpdateWorldTemplateRequest indicates an expected call of UpdateWorldTemplateRequest.
func (mr *MockRoboMakerAPIMockRecorder) UpdateWorldTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldTemplateRequest", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateWorldTemplateRequest), arg0)
}

// UpdateWorldTemplateWithContext mocks base method.
func (m *MockRoboMakerAPI) UpdateWorldTemplateWithContext(arg0 context.Context, arg1 *robomaker.UpdateWorldTemplateInput, arg2 ...request.Option) (*robomaker.UpdateWorldTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorldTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*robomaker.UpdateWorldTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorldTemplateWithContext indicates an expected call of UpdateWorldTemplateWithContext.
func (mr *MockRoboMakerAPIMockRecorder) UpdateWorldTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorldTemplateWithContext", reflect.TypeOf((*MockRoboMakerAPI)(nil).UpdateWorldTemplateWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/lexmodelsv2/lexmodelsv2iface (interfaces: LexModelsV2API)

// Package lexmodelsv2mock is a generated GoMock package.
package lexmodelsv2mock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	lexmodelsv2 "github.com/aws/aws-sdk-go/service/lexmodelsv2"
	gomock "github.com/golang/mock/gomock"
)

// MockLexModelsV2API is a mock of LexModelsV2API interface.
type MockLexModelsV2API struct {
	ctrl     *gomock.Controller
	recorder *MockLexModelsV2APIMockRecorder
}

// MockLexModelsV2APIMockRecorder is the mock recorder for MockLexModelsV2API.
type MockLexModelsV2APIMockRecorder struct {
	mock *MockLexModelsV2API
}

// NewMockLexModelsV2API creates a new mock instance.
func NewMockLexModelsV2API(ctrl *gomock.Controller) *MockLexModelsV2API {
	mock := &MockLexModelsV2API{ctrl: ctrl}
	mock.recorder = &MockLexModelsV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLexModelsV2API) EXPECT() *MockLexModelsV2APIMockRecorder {
	return m.recorder
}

// BuildBotLocale mocks base method.
func (m *MockLexModelsV2API) BuildBotLocale(arg0 *lexmodelsv2.BuildBotLocaleInput) (*lexmodelsv2.BuildBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBotLocale", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.BuildBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBotLocale indicates an expected call of BuildBotLocale.
func (mr *MockLexModelsV2APIMockRecorder) BuildBotLocale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBotLocale", reflect.TypeOf((*MockLexModelsV2API)(nil).BuildBotLocale), arg0)
}

// BuildBotLocaleRequest mocks base method.
func (m *MockLexModelsV2API) BuildBotLocaleRequest(arg0 *lexmodelsv2.BuildBotLocaleInput) (*request.Request, *lexmodelsv2.BuildBotLocaleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBotLocaleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.BuildBotLocaleOutput)
	return ret0, ret1
}

// BuildBotLocaleRequest indicates an expected call of BuildBotLocaleRequest.
func (mr *MockLexModelsV2APIMockRecorder) BuildBotLocaleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBotLocaleRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).BuildBotLocaleRequest), arg0)
}

// BuildBotLocaleWithContext mocks base method.
func (m *MockLexModelsV2API) BuildBotLocaleWithContext(arg0 context.Context, arg1 *lexmodelsv2.BuildBotLocaleInput, arg2 ...request.Option) (*lexmodelsv2.BuildBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildBotLocaleWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.BuildBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBotLocaleWithContext indicates an expected call of BuildBotLocaleWithContext.
func (mr *MockLexModelsV2APIMockRecorder) BuildBotLocaleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBotLocaleWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).BuildBotLocaleWithContext), varargs...)
}

// CreateBot mocks base method.
func (m *MockLexModelsV2API) CreateBot(arg0 *lexmodelsv2.CreateBotInput) (*lexmodelsv2.CreateBotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBot indicates an expected call of CreateBot.
func (mr *MockLexModelsV2APIMockRecorder) CreateBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBot", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBot), arg0)
}

// CreateBotAlias mocks base method.
func (m *MockLexModelsV2API) CreateBotAlias(arg0 *lexmodelsv2.CreateBotAliasInput) (*lexmodelsv2.CreateBotAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBotAlias", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBotAlias indicates an expected call of CreateBotAlias.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotAlias", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotAlias), arg0)
}

// CreateBotAliasRequest mocks base method.
func (m *MockLexModelsV2API) CreateBotAliasRequest(arg0 *lexmodelsv2.CreateBotAliasInput) (*request.Request, *lexmodelsv2.CreateBotAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBotAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateBotAliasOutput)
	return ret0, ret1
}

// CreateBotAliasRequest indicates an expected call of CreateBotAliasRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotAliasRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotAliasRequest), arg0)
}

// CreateBotAliasWithContext mocks base method.
func (m *MockLexModelsV2API) CreateBotAliasWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateBotAliasInput, arg2 ...request.Option) (*lexmodelsv2.CreateBotAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBotAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBotAliasWithContext indicates an expected call of CreateBotAliasWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotAliasWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotAliasWithContext), varargs...)
}

// CreateBotLocale mocks base method.
func (m *MockLexModelsV2API) CreateBotLocale(arg0 *lexmodelsv2.CreateBotLocaleInput) (*lexmodelsv2.CreateBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBotLocale", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBotLocale indicates an expected call of CreateBotLocale.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotLocale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotLocale", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotLocale), arg0)
}

// CreateBotLocaleRequest mocks base method.
func (m *MockLexModelsV2API) CreateBotLocaleRequest(arg0 *lexmodelsv2.CreateBotLocaleInput) (*request.Request, *lexmodelsv2.CreateBotLocaleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBotLocaleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateBotLocaleOutput)
	return ret0, ret1
}

// CreateBotLocaleRequest indicates an expected call of CreateBotLocaleRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotLocaleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotLocaleRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotLocaleRequest), arg0)
}

// CreateBotLocaleWithContext mocks base method.
func (m *MockLexModelsV2API) CreateBotLocaleWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateBotLocaleInput, arg2 ...request.Option) (*lexmodelsv2.CreateBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBotLocaleWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBotLocaleWithContext indicates an expected call of CreateBotLocaleWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotLocaleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotLocaleWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotLocaleWithContext), varargs...)
}

// CreateBotRequest mocks base method.
func (m *MockLexModelsV2API) CreateBotRequest(arg0 *lexmodelsv2.CreateBotInput) (*request.Request, *lexmodelsv2.CreateBotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateBotOutput)
	return ret0, ret1
}

// CreateBotRequest indicates an expected call of CreateBotRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotRequest), arg0)
}

// CreateBotVersion mocks base method.
func (m *MockLexModelsV2API) CreateBotVersion(arg0 *lexmodelsv2.CreateBotVersionInput) (*lexmodelsv2.CreateBotVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBotVersion", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBotVersion indicates an expected call of CreateBotVersion.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotVersion", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotVersion), arg0)
}

// CreateBotVersionRequest mocks base method.
func (m *MockLexModelsV2API) CreateBotVersionRequest(arg0 *lexmodelsv2.CreateBotVersionInput) (*request.Request, *lexmodelsv2.CreateBotVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBotVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateBotVersionOutput)
	return ret0, ret1
}

// CreateBotVersionRequest indicates an expected call of CreateBotVersionRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotVersionRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotVersionRequest), arg0)
}

// CreateBotVersionWithContext mocks base method.
func (m *MockLexModelsV2API) CreateBotVersionWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateBotVersionInput, arg2 ...request.Option) (*lexmodelsv2.CreateBotVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBotVersionWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBotVersionWithContext indicates an expected call of CreateBotVersionWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotVersionWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotVersionWithContext), varargs...)
}

// CreateBotWithContext mocks base method.
func (m *MockLexModelsV2API) CreateBotWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateBotInput, arg2 ...request.Option) (*lexmodelsv2.CreateBotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBotWithContext indicates an expected call of CreateBotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateBotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateBotWithContext), varargs...)
}

// CreateExport mocks base method.
func (m *MockLexModelsV2API) CreateExport(arg0 *lexmodelsv2.CreateExportInput) (*lexmodelsv2.CreateExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExport", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExport indicates an expected call of CreateExport.
func (mr *MockLexModelsV2APIMockRecorder) CreateExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExport", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateExport), arg0)
}

// CreateExportRequest mocks base method.
func (m *MockLexModelsV2API) CreateExportRequest(arg0 *lexmodelsv2.CreateExportInput) (*request.Request, *lexmodelsv2.CreateExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateExportOutput)
	return ret0, ret1
}

// CreateExportRequest indicates an expected call of CreateExportRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExportRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateExportRequest), arg0)
}

// CreateExportWithContext mocks base method.
func (m *MockLexModelsV2API) CreateExportWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateExportInput, arg2 ...request.Option) (*lexmodelsv2.CreateExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExportWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExportWithContext indicates an expected call of CreateExportWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExportWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateExportWithContext), varargs...)
}

// CreateIntent mocks base method.
func (m *MockLexModelsV2API) CreateIntent(arg0 *lexmodelsv2.CreateIntentInput) (*lexmodelsv2.CreateIntentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntent", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntent indicates an expected call of CreateIntent.
func (mr *MockLexModelsV2APIMockRecorder) CreateIntent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntent", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateIntent), arg0)
}

// CreateIntentRequest mocks base method.
func (m *MockLexModelsV2API) CreateIntentRequest(arg0 *lexmodelsv2.CreateIntentInput) (*request.Request, *lexmodelsv2.CreateIntentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateIntentOutput)
	return ret0, ret1
}

// CreateIntentRequest indicates an expected call of CreateIntentRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateIntentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntentRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateIntentRequest), arg0)
}

// CreateIntentWithContext mocks base method.
func (m *MockLexModelsV2API) CreateIntentWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateIntentInput, arg2 ...request.Option) (*lexmodelsv2.CreateIntentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIntentWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntentWithContext indicates an expected call of CreateIntentWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateIntentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntentWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateIntentWithContext), varargs...)
}

// CreateResourcePolicy mocks base method.
func (m *MockLexModelsV2API) CreateResourcePolicy(arg0 *lexmodelsv2.CreateResourcePolicyInput) (*lexmodelsv2.CreateResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcePolicy", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePolicy indicates an expected call of CreateResourcePolicy.
func (mr *MockLexModelsV2APIMockRecorder) CreateResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicy", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateResourcePolicy), arg0)
}

// CreateResourcePolicyRequest mocks base method.
func (m *MockLexModelsV2API) CreateResourcePolicyRequest(arg0 *lexmodelsv2.CreateResourcePolicyInput) (*request.Request, *lexmodelsv2.CreateResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateResourcePolicyOutput)
	return ret0, ret1
}

// CreateResourcePolicyRequest indicates an expected call of CreateResourcePolicyRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicyRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateResourcePolicyRequest), arg0)
}

// CreateResourcePolicyStatement mocks base method.
func (m *MockLexModelsV2API) CreateResourcePolicyStatement(arg0 *lexmodelsv2.CreateResourcePolicyStatementInput) (*lexmodelsv2.CreateResourcePolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcePolicyStatement", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateResourcePolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePolicyStatement indicates an expected call of CreateResourcePolicyStatement.
func (mr *MockLexModelsV2APIMockRecorder) CreateResourcePolicyStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicyStatement", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateResourcePolicyStatement), arg0)
}

// CreateResourcePolicyStatementRequest mocks base method.
func (m *MockLexModelsV2API) CreateResourcePolicyStatementRequest(arg0 *lexmodelsv2.CreateResourcePolicyStatementInput) (*request.Request, *lexmodelsv2.CreateResourcePolicyStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcePolicyStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateResourcePolicyStatementOutput)
	return ret0, ret1
}

// CreateResourcePolicyStatementRequest indicates an expected call of CreateResourcePolicyStatementRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateResourcePolicyStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicyStatementRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateResourcePolicyStatementRequest), arg0)
}

// CreateResourcePolicyStatementWithContext mocks base method.
func (m *MockLexModelsV2API) CreateResourcePolicyStatementWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateResourcePolicyStatementInput, arg2 ...request.Option) (*lexmodelsv2.CreateResourcePolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourcePolicyStatementWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateResourcePolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePolicyStatementWithContext indicates an expected call of CreateResourcePolicyStatementWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateResourcePolicyStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicyStatementWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateResourcePolicyStatementWithContext), varargs...)
}

// CreateResourcePolicyWithContext mocks base method.
func (m *MockLexModelsV2API) CreateResourcePolicyWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateResourcePolicyInput, arg2 ...request.Option) (*lexmodelsv2.CreateResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePolicyWithContext indicates an expected call of CreateResourcePolicyWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicyWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateResourcePolicyWithContext), varargs...)
}

// CreateSlot mocks base method.
func (m *MockLexModelsV2API) CreateSlot(arg0 *lexmodelsv2.CreateSlotInput) (*lexmodelsv2.CreateSlotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlot indicates an expected call of CreateSlot.
func (mr *MockLexModelsV2APIMockRecorder) CreateSlot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlot", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateSlot), arg0)
}

// CreateSlotRequest mocks base method.
func (m *MockLexModelsV2API) CreateSlotRequest(arg0 *lexmodelsv2.CreateSlotInput) (*request.Request, *lexmodelsv2.CreateSlotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateSlotOutput)
	return ret0, ret1
}

// CreateSlotRequest indicates an expected call of CreateSlotRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateSlotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateSlotRequest), arg0)
}

// CreateSlotType mocks base method.
func (m *MockLexModelsV2API) CreateSlotType(arg0 *lexmodelsv2.CreateSlotTypeInput) (*lexmodelsv2.CreateSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlotType", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlotType indicates an expected call of CreateSlotType.
func (mr *MockLexModelsV2APIMockRecorder) CreateSlotType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlotType", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateSlotType), arg0)
}

// CreateSlotTypeRequest mocks base method.
func (m *MockLexModelsV2API) CreateSlotTypeRequest(arg0 *lexmodelsv2.CreateSlotTypeInput) (*request.Request, *lexmodelsv2.CreateSlotTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSlotTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateSlotTypeOutput)
	return ret0, ret1
}

// CreateSlotTypeRequest indicates an expected call of CreateSlotTypeRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateSlotTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlotTypeRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateSlotTypeRequest), arg0)
}

// CreateSlotTypeWithContext mocks base method.
func (m *MockLexModelsV2API) CreateSlotTypeWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateSlotTypeInput, arg2 ...request.Option) (*lexmodelsv2.CreateSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSlotTypeWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlotTypeWithContext indicates an expected call of CreateSlotTypeWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateSlotTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlotTypeWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateSlotTypeWithContext), varargs...)
}

// CreateSlotWithContext mocks base method.
func (m *MockLexModelsV2API) CreateSlotWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateSlotInput, arg2 ...request.Option) (*lexmodelsv2.CreateSlotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSlotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSlotWithContext indicates an expected call of CreateSlotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateSlotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSlotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateSlotWithContext), varargs...)
}

// CreateUploadUrl mocks base method.
func (m *MockLexModelsV2API) CreateUploadUrl(arg0 *lexmodelsv2.CreateUploadUrlInput) (*lexmodelsv2.CreateUploadUrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadUrl", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.CreateUploadUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadUrl indicates an expected call of CreateUploadUrl.
func (mr *MockLexModelsV2APIMockRecorder) CreateUploadUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadUrl", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateUploadUrl), arg0)
}

// CreateUploadUrlRequest mocks base method.
func (m *MockLexModelsV2API) CreateUploadUrlRequest(arg0 *lexmodelsv2.CreateUploadUrlInput) (*request.Request, *lexmodelsv2.CreateUploadUrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadUrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.CreateUploadUrlOutput)
	return ret0, ret1
}

// CreateUploadUrlRequest indicates an expected call of CreateUploadUrlRequest.
func (mr *MockLexModelsV2APIMockRecorder) CreateUploadUrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadUrlRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateUploadUrlRequest), arg0)
}

// CreateUploadUrlWithContext mocks base method.
func (m *MockLexModelsV2API) CreateUploadUrlWithContext(arg0 context.Context, arg1 *lexmodelsv2.CreateUploadUrlInput, arg2 ...request.Option) (*lexmodelsv2.CreateUploadUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUploadUrlWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.CreateUploadUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUploadUrlWithContext indicates an expected call of CreateUploadUrlWithContext.
func (mr *MockLexModelsV2APIMockRecorder) CreateUploadUrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadUrlWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).CreateUploadUrlWithContext), varargs...)
}

// DeleteBot mocks base method.
func (m *MockLexModelsV2API) DeleteBot(arg0 *lexmodelsv2.DeleteBotInput) (*lexmodelsv2.DeleteBotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBot indicates an expected call of DeleteBot.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBot", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBot), arg0)
}

// DeleteBotAlias mocks base method.
func (m *MockLexModelsV2API) DeleteBotAlias(arg0 *lexmodelsv2.DeleteBotAliasInput) (*lexmodelsv2.DeleteBotAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotAlias", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBotAlias indicates an expected call of DeleteBotAlias.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotAlias", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotAlias), arg0)
}

// DeleteBotAliasRequest mocks base method.
func (m *MockLexModelsV2API) DeleteBotAliasRequest(arg0 *lexmodelsv2.DeleteBotAliasInput) (*request.Request, *lexmodelsv2.DeleteBotAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteBotAliasOutput)
	return ret0, ret1
}

// DeleteBotAliasRequest indicates an expected call of DeleteBotAliasRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotAliasRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotAliasRequest), arg0)
}

// DeleteBotAliasWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteBotAliasWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteBotAliasInput, arg2 ...request.Option) (*lexmodelsv2.DeleteBotAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBotAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBotAliasWithContext indicates an expected call of DeleteBotAliasWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotAliasWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotAliasWithContext), varargs...)
}

// DeleteBotLocale mocks base method.
func (m *MockLexModelsV2API) DeleteBotLocale(arg0 *lexmodelsv2.DeleteBotLocaleInput) (*lexmodelsv2.DeleteBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotLocale", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBotLocale indicates an expected call of DeleteBotLocale.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotLocale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotLocale", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotLocale), arg0)
}

// DeleteBotLocaleRequest mocks base method.
func (m *MockLexModelsV2API) DeleteBotLocaleRequest(arg0 *lexmodelsv2.DeleteBotLocaleInput) (*request.Request, *lexmodelsv2.DeleteBotLocaleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotLocaleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteBotLocaleOutput)
	return ret0, ret1
}

// DeleteBotLocaleRequest indicates an expected call of DeleteBotLocaleRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotLocaleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotLocaleRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotLocaleRequest), arg0)
}

// DeleteBotLocaleWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteBotLocaleWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteBotLocaleInput, arg2 ...request.Option) (*lexmodelsv2.DeleteBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBotLocaleWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBotLocaleWithContext indicates an expected call of DeleteBotLocaleWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotLocaleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotLocaleWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotLocaleWithContext), varargs...)
}

// DeleteBotRequest mocks base method.
func (m *MockLexModelsV2API) DeleteBotRequest(arg0 *lexmodelsv2.DeleteBotInput) (*request.Request, *lexmodelsv2.DeleteBotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteBotOutput)
	return ret0, ret1
}

// DeleteBotRequest indicates an expected call of DeleteBotRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotRequest), arg0)
}

// DeleteBotVersion mocks base method.
func (m *MockLexModelsV2API) DeleteBotVersion(arg0 *lexmodelsv2.DeleteBotVersionInput) (*lexmodelsv2.DeleteBotVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotVersion", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBotVersion indicates an expected call of DeleteBotVersion.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotVersion", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotVersion), arg0)
}

// DeleteBotVersionRequest mocks base method.
func (m *MockLexModelsV2API) DeleteBotVersionRequest(arg0 *lexmodelsv2.DeleteBotVersionInput) (*request.Request, *lexmodelsv2.DeleteBotVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBotVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteBotVersionOutput)
	return ret0, ret1
}

// DeleteBotVersionRequest indicates an expected call of DeleteBotVersionRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotVersionRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotVersionRequest), arg0)
}

// DeleteBotVersionWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteBotVersionWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteBotVersionInput, arg2 ...request.Option) (*lexmodelsv2.DeleteBotVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBotVersionWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBotVersionWithContext indicates an expected call of DeleteBotVersionWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotVersionWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotVersionWithContext), varargs...)
}

// DeleteBotWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteBotWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteBotInput, arg2 ...request.Option) (*lexmodelsv2.DeleteBotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBotWithContext indicates an expected call of DeleteBotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteBotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteBotWithContext), varargs...)
}

// DeleteCustomVocabulary mocks base method.
func (m *MockLexModelsV2API) DeleteCustomVocabulary(arg0 *lexmodelsv2.DeleteCustomVocabularyInput) (*lexmodelsv2.DeleteCustomVocabularyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomVocabulary", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteCustomVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomVocabulary indicates an expected call of DeleteCustomVocabulary.
func (mr *MockLexModelsV2APIMockRecorder) DeleteCustomVocabulary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomVocabulary", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteCustomVocabulary), arg0)
}

// DeleteCustomVocabularyRequest mocks base method.
func (m *MockLexModelsV2API) DeleteCustomVocabularyRequest(arg0 *lexmodelsv2.DeleteCustomVocabularyInput) (*request.Request, *lexmodelsv2.DeleteCustomVocabularyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomVocabularyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteCustomVocabularyOutput)
	return ret0, ret1
}

// DeleteCustomVocabularyRequest indicates an expected call of DeleteCustomVocabularyRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteCustomVocabularyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomVocabularyRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteCustomVocabularyRequest), arg0)
}

// DeleteCustomVocabularyWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteCustomVocabularyWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteCustomVocabularyInput, arg2 ...request.Option) (*lexmodelsv2.DeleteCustomVocabularyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomVocabularyWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteCustomVocabularyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomVocabularyWithContext indicates an expected call of DeleteCustomVocabularyWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteCustomVocabularyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomVocabularyWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteCustomVocabularyWithContext), varargs...)
}

// DeleteExport mocks base method.
func (m *MockLexModelsV2API) DeleteExport(arg0 *lexmodelsv2.DeleteExportInput) (*lexmodelsv2.DeleteExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExport", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExport indicates an expected call of DeleteExport.
func (mr *MockLexModelsV2APIMockRecorder) DeleteExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExport", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteExport), arg0)
}

// DeleteExportRequest mocks base method.
func (m *MockLexModelsV2API) DeleteExportRequest(arg0 *lexmodelsv2.DeleteExportInput) (*request.Request, *lexmodelsv2.DeleteExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteExportOutput)
	return ret0, ret1
}

// DeleteExportRequest indicates an expected call of DeleteExportRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExportRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteExportRequest), arg0)
}

// DeleteExportWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteExportWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteExportInput, arg2 ...request.Option) (*lexmodelsv2.DeleteExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExportWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExportWithContext indicates an expected call of DeleteExportWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExportWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteExportWithContext), varargs...)
}

// DeleteImport mocks base method.
func (m *MockLexModelsV2API) DeleteImport(arg0 *lexmodelsv2.DeleteImportInput) (*lexmodelsv2.DeleteImportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImport", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImport indicates an expected call of DeleteImport.
func (mr *MockLexModelsV2APIMockRecorder) DeleteImport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImport", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteImport), arg0)
}

// DeleteImportRequest mocks base method.
func (m *MockLexModelsV2API) DeleteImportRequest(arg0 *lexmodelsv2.DeleteImportInput) (*request.Request, *lexmodelsv2.DeleteImportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteImportOutput)
	return ret0, ret1
}

// DeleteImportRequest indicates an expected call of DeleteImportRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteImportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteImportRequest), arg0)
}

// DeleteImportWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteImportWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteImportInput, arg2 ...request.Option) (*lexmodelsv2.DeleteImportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteImportWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImportWithContext indicates an expected call of DeleteImportWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteImportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteImportWithContext), varargs...)
}

// DeleteIntent mocks base method.
func (m *MockLexModelsV2API) DeleteIntent(arg0 *lexmodelsv2.DeleteIntentInput) (*lexmodelsv2.DeleteIntentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntent", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntent indicates an expected call of DeleteIntent.
func (mr *MockLexModelsV2APIMockRecorder) DeleteIntent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntent", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteIntent), arg0)
}

// DeleteIntentRequest mocks base method.
func (m *MockLexModelsV2API) DeleteIntentRequest(arg0 *lexmodelsv2.DeleteIntentInput) (*request.Request, *lexmodelsv2.DeleteIntentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteIntentOutput)
	return ret0, ret1
}

// DeleteIntentRequest indicates an expected call of DeleteIntentRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteIntentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntentRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteIntentRequest), arg0)
}

// DeleteIntentWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteIntentWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteIntentInput, arg2 ...request.Option) (*lexmodelsv2.DeleteIntentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntentWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntentWithContext indicates an expected call of DeleteIntentWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteIntentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntentWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteIntentWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockLexModelsV2API) DeleteResourcePolicy(arg0 *lexmodelsv2.DeleteResourcePolicyInput) (*lexmodelsv2.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockLexModelsV2APIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method.
func (m *MockLexModelsV2API) DeleteResourcePolicyRequest(arg0 *lexmodelsv2.DeleteResourcePolicyInput) (*request.Request, *lexmodelsv2.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyStatement mocks base method.
func (m *MockLexModelsV2API) DeleteResourcePolicyStatement(arg0 *lexmodelsv2.DeleteResourcePolicyStatementInput) (*lexmodelsv2.DeleteResourcePolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyStatement", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteResourcePolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyStatement indicates an expected call of DeleteResourcePolicyStatement.
func (mr *MockLexModelsV2APIMockRecorder) DeleteResourcePolicyStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyStatement", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteResourcePolicyStatement), arg0)
}

// DeleteResourcePolicyStatementRequest mocks base method.
func (m *MockLexModelsV2API) DeleteResourcePolicyStatementRequest(arg0 *lexmodelsv2.DeleteResourcePolicyStatementInput) (*request.Request, *lexmodelsv2.DeleteResourcePolicyStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteResourcePolicyStatementOutput)
	return ret0, ret1
}

// DeleteResourcePolicyStatementRequest indicates an expected call of DeleteResourcePolicyStatementRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteResourcePolicyStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyStatementRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteResourcePolicyStatementRequest), arg0)
}

// DeleteResourcePolicyStatementWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteResourcePolicyStatementWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteResourcePolicyStatementInput, arg2 ...request.Option) (*lexmodelsv2.DeleteResourcePolicyStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyStatementWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteResourcePolicyStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyStatementWithContext indicates an expected call of DeleteResourcePolicyStatementWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteResourcePolicyStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyStatementWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteResourcePolicyStatementWithContext), varargs...)
}

// DeleteResourcePolicyWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteResourcePolicyWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteResourcePolicyInput, arg2 ...request.Option) (*lexmodelsv2.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteSlot mocks base method.
func (m *MockLexModelsV2API) DeleteSlot(arg0 *lexmodelsv2.DeleteSlotInput) (*lexmodelsv2.DeleteSlotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlot indicates an expected call of DeleteSlot.
func (mr *MockLexModelsV2APIMockRecorder) DeleteSlot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlot", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteSlot), arg0)
}

// DeleteSlotRequest mocks base method.
func (m *MockLexModelsV2API) DeleteSlotRequest(arg0 *lexmodelsv2.DeleteSlotInput) (*request.Request, *lexmodelsv2.DeleteSlotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteSlotOutput)
	return ret0, ret1
}

// DeleteSlotRequest indicates an expected call of DeleteSlotRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteSlotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteSlotRequest), arg0)
}

// DeleteSlotType mocks base method.
func (m *MockLexModelsV2API) DeleteSlotType(arg0 *lexmodelsv2.DeleteSlotTypeInput) (*lexmodelsv2.DeleteSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlotType", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlotType indicates an expected call of DeleteSlotType.
func (mr *MockLexModelsV2APIMockRecorder) DeleteSlotType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlotType", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteSlotType), arg0)
}

// DeleteSlotTypeRequest mocks base method.
func (m *MockLexModelsV2API) DeleteSlotTypeRequest(arg0 *lexmodelsv2.DeleteSlotTypeInput) (*request.Request, *lexmodelsv2.DeleteSlotTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlotTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteSlotTypeOutput)
	return ret0, ret1
}

// DeleteSlotTypeRequest indicates an expected call of DeleteSlotTypeRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteSlotTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlotTypeRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteSlotTypeRequest), arg0)
}

// DeleteSlotTypeWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteSlotTypeWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteSlotTypeInput, arg2 ...request.Option) (*lexmodelsv2.DeleteSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlotTypeWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlotTypeWithContext indicates an expected call of DeleteSlotTypeWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteSlotTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlotTypeWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteSlotTypeWithContext), varargs...)
}

// DeleteSlotWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteSlotWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteSlotInput, arg2 ...request.Option) (*lexmodelsv2.DeleteSlotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSlotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSlotWithContext indicates an expected call of DeleteSlotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteSlotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteSlotWithContext), varargs...)
}

// DeleteUtterances mocks base method.
func (m *MockLexModelsV2API) DeleteUtterances(arg0 *lexmodelsv2.DeleteUtterancesInput) (*lexmodelsv2.DeleteUtterancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUtterances", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteUtterancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUtterances indicates an expected call of DeleteUtterances.
func (mr *MockLexModelsV2APIMockRecorder) DeleteUtterances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUtterances", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteUtterances), arg0)
}

// DeleteUtterancesRequest mocks base method.
func (m *MockLexModelsV2API) DeleteUtterancesRequest(arg0 *lexmodelsv2.DeleteUtterancesInput) (*request.Request, *lexmodelsv2.DeleteUtterancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUtterancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DeleteUtterancesOutput)
	return ret0, ret1
}

// DeleteUtterancesRequest indicates an expected call of DeleteUtterancesRequest.
func (mr *MockLexModelsV2APIMockRecorder) DeleteUtterancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUtterancesRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteUtterancesRequest), arg0)
}

// DeleteUtterancesWithContext mocks base method.
func (m *MockLexModelsV2API) DeleteUtterancesWithContext(arg0 context.Context, arg1 *lexmodelsv2.DeleteUtterancesInput, arg2 ...request.Option) (*lexmodelsv2.DeleteUtterancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUtterancesWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DeleteUtterancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUtterancesWithContext indicates an expected call of DeleteUtterancesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DeleteUtterancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUtterancesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DeleteUtterancesWithContext), varargs...)
}

// DescribeBot mocks base method.
func (m *MockLexModelsV2API) DescribeBot(arg0 *lexmodelsv2.DescribeBotInput) (*lexmodelsv2.DescribeBotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBot indicates an expected call of DescribeBot.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBot", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBot), arg0)
}

// DescribeBotAlias mocks base method.
func (m *MockLexModelsV2API) DescribeBotAlias(arg0 *lexmodelsv2.DescribeBotAliasInput) (*lexmodelsv2.DescribeBotAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotAlias", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotAlias indicates an expected call of DescribeBotAlias.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotAlias", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotAlias), arg0)
}

// DescribeBotAliasRequest mocks base method.
func (m *MockLexModelsV2API) DescribeBotAliasRequest(arg0 *lexmodelsv2.DescribeBotAliasInput) (*request.Request, *lexmodelsv2.DescribeBotAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeBotAliasOutput)
	return ret0, ret1
}

// DescribeBotAliasRequest indicates an expected call of DescribeBotAliasRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotAliasRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotAliasRequest), arg0)
}

// DescribeBotAliasWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeBotAliasWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotAliasInput, arg2 ...request.Option) (*lexmodelsv2.DescribeBotAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBotAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotAliasWithContext indicates an expected call of DescribeBotAliasWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotAliasWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotAliasWithContext), varargs...)
}

// DescribeBotLocale mocks base method.
func (m *MockLexModelsV2API) DescribeBotLocale(arg0 *lexmodelsv2.DescribeBotLocaleInput) (*lexmodelsv2.DescribeBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotLocale", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotLocale indicates an expected call of DescribeBotLocale.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotLocale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotLocale", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotLocale), arg0)
}

// DescribeBotLocaleRequest mocks base method.
func (m *MockLexModelsV2API) DescribeBotLocaleRequest(arg0 *lexmodelsv2.DescribeBotLocaleInput) (*request.Request, *lexmodelsv2.DescribeBotLocaleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotLocaleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeBotLocaleOutput)
	return ret0, ret1
}

// DescribeBotLocaleRequest indicates an expected call of DescribeBotLocaleRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotLocaleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotLocaleRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotLocaleRequest), arg0)
}

// DescribeBotLocaleWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeBotLocaleWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotLocaleInput, arg2 ...request.Option) (*lexmodelsv2.DescribeBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBotLocaleWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotLocaleWithContext indicates an expected call of DescribeBotLocaleWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotLocaleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotLocaleWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotLocaleWithContext), varargs...)
}

// DescribeBotRecommendation mocks base method.
func (m *MockLexModelsV2API) DescribeBotRecommendation(arg0 *lexmodelsv2.DescribeBotRecommendationInput) (*lexmodelsv2.DescribeBotRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotRecommendation", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotRecommendation indicates an expected call of DescribeBotRecommendation.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotRecommendation", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotRecommendation), arg0)
}

// DescribeBotRecommendationRequest mocks base method.
func (m *MockLexModelsV2API) DescribeBotRecommendationRequest(arg0 *lexmodelsv2.DescribeBotRecommendationInput) (*request.Request, *lexmodelsv2.DescribeBotRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeBotRecommendationOutput)
	return ret0, ret1
}

// DescribeBotRecommendationRequest indicates an expected call of DescribeBotRecommendationRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotRecommendationRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotRecommendationRequest), arg0)
}

// DescribeBotRecommendationWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeBotRecommendationWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotRecommendationInput, arg2 ...request.Option) (*lexmodelsv2.DescribeBotRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBotRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotRecommendationWithContext indicates an expected call of DescribeBotRecommendationWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotRecommendationWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotRecommendationWithContext), varargs...)
}

// DescribeBotRequest mocks base method.
func (m *MockLexModelsV2API) DescribeBotRequest(arg0 *lexmodelsv2.DescribeBotInput) (*request.Request, *lexmodelsv2.DescribeBotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeBotOutput)
	return ret0, ret1
}

// DescribeBotRequest indicates an expected call of DescribeBotRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotRequest), arg0)
}

// DescribeBotVersion mocks base method.
func (m *MockLexModelsV2API) DescribeBotVersion(arg0 *lexmodelsv2.DescribeBotVersionInput) (*lexmodelsv2.DescribeBotVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotVersion", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotVersion indicates an expected call of DescribeBotVersion.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotVersion", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotVersion), arg0)
}

// DescribeBotVersionRequest mocks base method.
func (m *MockLexModelsV2API) DescribeBotVersionRequest(arg0 *lexmodelsv2.DescribeBotVersionInput) (*request.Request, *lexmodelsv2.DescribeBotVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBotVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeBotVersionOutput)
	return ret0, ret1
}

// DescribeBotVersionRequest indicates an expected call of DescribeBotVersionRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotVersionRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotVersionRequest), arg0)
}

// DescribeBotVersionWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeBotVersionWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotVersionInput, arg2 ...request.Option) (*lexmodelsv2.DescribeBotVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBotVersionWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotVersionWithContext indicates an expected call of DescribeBotVersionWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotVersionWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotVersionWithContext), varargs...)
}

// DescribeBotWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeBotWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotInput, arg2 ...request.Option) (*lexmodelsv2.DescribeBotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBotWithContext indicates an expected call of DescribeBotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeBotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeBotWithContext), varargs...)
}

// DescribeCustomVocabularyMetadata mocks base method.
func (m *MockLexModelsV2API) DescribeCustomVocabularyMetadata(arg0 *lexmodelsv2.DescribeCustomVocabularyMetadataInput) (*lexmodelsv2.DescribeCustomVocabularyMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomVocabularyMetadata", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeCustomVocabularyMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomVocabularyMetadata indicates an expected call of DescribeCustomVocabularyMetadata.
func (mr *MockLexModelsV2APIMockRecorder) DescribeCustomVocabularyMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomVocabularyMetadata", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeCustomVocabularyMetadata), arg0)
}

// DescribeCustomVocabularyMetadataRequest mocks base method.
func (m *MockLexModelsV2API) DescribeCustomVocabularyMetadataRequest(arg0 *lexmodelsv2.DescribeCustomVocabularyMetadataInput) (*request.Request, *lexmodelsv2.DescribeCustomVocabularyMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCustomVocabularyMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeCustomVocabularyMetadataOutput)
	return ret0, ret1
}

// DescribeCustomVocabularyMetadataRequest indicates an expected call of DescribeCustomVocabularyMetadataRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeCustomVocabularyMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomVocabularyMetadataRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeCustomVocabularyMetadataRequest), arg0)
}

// DescribeCustomVocabularyMetadataWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeCustomVocabularyMetadataWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeCustomVocabularyMetadataInput, arg2 ...request.Option) (*lexmodelsv2.DescribeCustomVocabularyMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCustomVocabularyMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeCustomVocabularyMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCustomVocabularyMetadataWithContext indicates an expected call of DescribeCustomVocabularyMetadataWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeCustomVocabularyMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCustomVocabularyMetadataWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeCustomVocabularyMetadataWithContext), varargs...)
}

// DescribeExport mocks base method.
func (m *MockLexModelsV2API) DescribeExport(arg0 *lexmodelsv2.DescribeExportInput) (*lexmodelsv2.DescribeExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExport", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExport indicates an expected call of DescribeExport.
func (mr *MockLexModelsV2APIMockRecorder) DescribeExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExport", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeExport), arg0)
}

// DescribeExportRequest mocks base method.
func (m *MockLexModelsV2API) DescribeExportRequest(arg0 *lexmodelsv2.DescribeExportInput) (*request.Request, *lexmodelsv2.DescribeExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeExportOutput)
	return ret0, ret1
}

// DescribeExportRequest indicates an expected call of DescribeExportRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExportRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeExportRequest), arg0)
}

// DescribeExportWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeExportWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeExportInput, arg2 ...request.Option) (*lexmodelsv2.DescribeExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExportWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExportWithContext indicates an expected call of DescribeExportWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExportWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeExportWithContext), varargs...)
}

// DescribeImport mocks base method.
func (m *MockLexModelsV2API) DescribeImport(arg0 *lexmodelsv2.DescribeImportInput) (*lexmodelsv2.DescribeImportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImport", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImport indicates an expected call of DescribeImport.
func (mr *MockLexModelsV2APIMockRecorder) DescribeImport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImport", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeImport), arg0)
}

// DescribeImportRequest mocks base method.
func (m *MockLexModelsV2API) DescribeImportRequest(arg0 *lexmodelsv2.DescribeImportInput) (*request.Request, *lexmodelsv2.DescribeImportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeImportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeImportOutput)
	return ret0, ret1
}

// DescribeImportRequest indicates an expected call of DescribeImportRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeImportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImportRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeImportRequest), arg0)
}

// DescribeImportWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeImportWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeImportInput, arg2 ...request.Option) (*lexmodelsv2.DescribeImportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeImportWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImportWithContext indicates an expected call of DescribeImportWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeImportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImportWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeImportWithContext), varargs...)
}

// DescribeIntent mocks base method.
func (m *MockLexModelsV2API) DescribeIntent(arg0 *lexmodelsv2.DescribeIntentInput) (*lexmodelsv2.DescribeIntentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIntent", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIntent indicates an expected call of DescribeIntent.
func (mr *MockLexModelsV2APIMockRecorder) DescribeIntent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIntent", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeIntent), arg0)
}

// DescribeIntentRequest mocks base method.
func (m *MockLexModelsV2API) DescribeIntentRequest(arg0 *lexmodelsv2.DescribeIntentInput) (*request.Request, *lexmodelsv2.DescribeIntentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIntentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeIntentOutput)
	return ret0, ret1
}

// DescribeIntentRequest indicates an expected call of DescribeIntentRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeIntentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIntentRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeIntentRequest), arg0)
}

// DescribeIntentWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeIntentWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeIntentInput, arg2 ...request.Option) (*lexmodelsv2.DescribeIntentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIntentWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIntentWithContext indicates an expected call of DescribeIntentWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeIntentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIntentWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeIntentWithContext), varargs...)
}

// DescribeResourcePolicy mocks base method.
func (m *MockLexModelsV2API) DescribeResourcePolicy(arg0 *lexmodelsv2.DescribeResourcePolicyInput) (*lexmodelsv2.DescribeResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourcePolicy", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourcePolicy indicates an expected call of DescribeResourcePolicy.
func (mr *MockLexModelsV2APIMockRecorder) DescribeResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePolicy", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeResourcePolicy), arg0)
}

// DescribeResourcePolicyRequest mocks base method.
func (m *MockLexModelsV2API) DescribeResourcePolicyRequest(arg0 *lexmodelsv2.DescribeResourcePolicyInput) (*request.Request, *lexmodelsv2.DescribeResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeResourcePolicyOutput)
	return ret0, ret1
}

// DescribeResourcePolicyRequest indicates an expected call of DescribeResourcePolicyRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePolicyRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeResourcePolicyRequest), arg0)
}

// DescribeResourcePolicyWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeResourcePolicyWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeResourcePolicyInput, arg2 ...request.Option) (*lexmodelsv2.DescribeResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourcePolicyWithContext indicates an expected call of DescribeResourcePolicyWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourcePolicyWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeResourcePolicyWithContext), varargs...)
}

// DescribeSlot mocks base method.
func (m *MockLexModelsV2API) DescribeSlot(arg0 *lexmodelsv2.DescribeSlotInput) (*lexmodelsv2.DescribeSlotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlot indicates an expected call of DescribeSlot.
func (mr *MockLexModelsV2APIMockRecorder) DescribeSlot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlot", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeSlot), arg0)
}

// DescribeSlotRequest mocks base method.
func (m *MockLexModelsV2API) DescribeSlotRequest(arg0 *lexmodelsv2.DescribeSlotInput) (*request.Request, *lexmodelsv2.DescribeSlotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeSlotOutput)
	return ret0, ret1
}

// DescribeSlotRequest indicates an expected call of DescribeSlotRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeSlotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeSlotRequest), arg0)
}

// DescribeSlotType mocks base method.
func (m *MockLexModelsV2API) DescribeSlotType(arg0 *lexmodelsv2.DescribeSlotTypeInput) (*lexmodelsv2.DescribeSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlotType", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlotType indicates an expected call of DescribeSlotType.
func (mr *MockLexModelsV2APIMockRecorder) DescribeSlotType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlotType", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeSlotType), arg0)
}

// DescribeSlotTypeRequest mocks base method.
func (m *MockLexModelsV2API) DescribeSlotTypeRequest(arg0 *lexmodelsv2.DescribeSlotTypeInput) (*request.Request, *lexmodelsv2.DescribeSlotTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSlotTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.DescribeSlotTypeOutput)
	return ret0, ret1
}

// DescribeSlotTypeRequest indicates an expected call of DescribeSlotTypeRequest.
func (mr *MockLexModelsV2APIMockRecorder) DescribeSlotTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlotTypeRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeSlotTypeRequest), arg0)
}

// DescribeSlotTypeWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeSlotTypeWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeSlotTypeInput, arg2 ...request.Option) (*lexmodelsv2.DescribeSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlotTypeWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlotTypeWithContext indicates an expected call of DescribeSlotTypeWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeSlotTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlotTypeWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeSlotTypeWithContext), varargs...)
}

// DescribeSlotWithContext mocks base method.
func (m *MockLexModelsV2API) DescribeSlotWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeSlotInput, arg2 ...request.Option) (*lexmodelsv2.DescribeSlotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSlotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.DescribeSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSlotWithContext indicates an expected call of DescribeSlotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) DescribeSlotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSlotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).DescribeSlotWithContext), varargs...)
}

// ListAggregatedUtterances mocks base method.
func (m *MockLexModelsV2API) ListAggregatedUtterances(arg0 *lexmodelsv2.ListAggregatedUtterancesInput) (*lexmodelsv2.ListAggregatedUtterancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregatedUtterances", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListAggregatedUtterancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedUtterances indicates an expected call of ListAggregatedUtterances.
func (mr *MockLexModelsV2APIMockRecorder) ListAggregatedUtterances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedUtterances", reflect.TypeOf((*MockLexModelsV2API)(nil).ListAggregatedUtterances), arg0)
}

// ListAggregatedUtterancesPages mocks base method.
func (m *MockLexModelsV2API) ListAggregatedUtterancesPages(arg0 *lexmodelsv2.ListAggregatedUtterancesInput, arg1 func(*lexmodelsv2.ListAggregatedUtterancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregatedUtterancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAggregatedUtterancesPages indicates an expected call of ListAggregatedUtterancesPages.
func (mr *MockLexModelsV2APIMockRecorder) ListAggregatedUtterancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedUtterancesPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListAggregatedUtterancesPages), arg0, arg1)
}

// ListAggregatedUtterancesPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListAggregatedUtterancesPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListAggregatedUtterancesInput, arg2 func(*lexmodelsv2.ListAggregatedUtterancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatedUtterancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAggregatedUtterancesPagesWithContext indicates an expected call of ListAggregatedUtterancesPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListAggregatedUtterancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedUtterancesPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListAggregatedUtterancesPagesWithContext), varargs...)
}

// ListAggregatedUtterancesRequest mocks base method.
func (m *MockLexModelsV2API) ListAggregatedUtterancesRequest(arg0 *lexmodelsv2.ListAggregatedUtterancesInput) (*request.Request, *lexmodelsv2.ListAggregatedUtterancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregatedUtterancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListAggregatedUtterancesOutput)
	return ret0, ret1
}

// ListAggregatedUtterancesRequest indicates an expected call of ListAggregatedUtterancesRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListAggregatedUtterancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedUtterancesRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListAggregatedUtterancesRequest), arg0)
}

// ListAggregatedUtterancesWithContext mocks base method.
func (m *MockLexModelsV2API) ListAggregatedUtterancesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListAggregatedUtterancesInput, arg2 ...request.Option) (*lexmodelsv2.ListAggregatedUtterancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAggregatedUtterancesWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListAggregatedUtterancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedUtterancesWithContext indicates an expected call of ListAggregatedUtterancesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListAggregatedUtterancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedUtterancesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListAggregatedUtterancesWithContext), varargs...)
}

// ListBotAliases mocks base method.
func (m *MockLexModelsV2API) ListBotAliases(arg0 *lexmodelsv2.ListBotAliasesInput) (*lexmodelsv2.ListBotAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotAliases", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotAliases indicates an expected call of ListBotAliases.
func (mr *MockLexModelsV2APIMockRecorder) ListBotAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotAliases", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotAliases), arg0)
}

// ListBotAliasesPages mocks base method.
func (m *MockLexModelsV2API) ListBotAliasesPages(arg0 *lexmodelsv2.ListBotAliasesInput, arg1 func(*lexmodelsv2.ListBotAliasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotAliasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotAliasesPages indicates an expected call of ListBotAliasesPages.
func (mr *MockLexModelsV2APIMockRecorder) ListBotAliasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotAliasesPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotAliasesPages), arg0, arg1)
}

// ListBotAliasesPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotAliasesPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotAliasesInput, arg2 func(*lexmodelsv2.ListBotAliasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotAliasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotAliasesPagesWithContext indicates an expected call of ListBotAliasesPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotAliasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotAliasesPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotAliasesPagesWithContext), varargs...)
}

// ListBotAliasesRequest mocks base method.
func (m *MockLexModelsV2API) ListBotAliasesRequest(arg0 *lexmodelsv2.ListBotAliasesInput) (*request.Request, *lexmodelsv2.ListBotAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListBotAliasesOutput)
	return ret0, ret1
}

// ListBotAliasesRequest indicates an expected call of ListBotAliasesRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListBotAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotAliasesRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotAliasesRequest), arg0)
}

// ListBotAliasesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotAliasesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotAliasesInput, arg2 ...request.Option) (*lexmodelsv2.ListBotAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotAliasesWithContext indicates an expected call of ListBotAliasesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotAliasesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotAliasesWithContext), varargs...)
}

// ListBotLocales mocks base method.
func (m *MockLexModelsV2API) ListBotLocales(arg0 *lexmodelsv2.ListBotLocalesInput) (*lexmodelsv2.ListBotLocalesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotLocales", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotLocalesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotLocales indicates an expected call of ListBotLocales.
func (mr *MockLexModelsV2APIMockRecorder) ListBotLocales(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotLocales", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotLocales), arg0)
}

// ListBotLocalesPages mocks base method.
func (m *MockLexModelsV2API) ListBotLocalesPages(arg0 *lexmodelsv2.ListBotLocalesInput, arg1 func(*lexmodelsv2.ListBotLocalesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotLocalesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotLocalesPages indicates an expected call of ListBotLocalesPages.
func (mr *MockLexModelsV2APIMockRecorder) ListBotLocalesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotLocalesPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotLocalesPages), arg0, arg1)
}

// ListBotLocalesPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotLocalesPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotLocalesInput, arg2 func(*lexmodelsv2.ListBotLocalesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotLocalesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotLocalesPagesWithContext indicates an expected call of ListBotLocalesPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotLocalesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotLocalesPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotLocalesPagesWithContext), varargs...)
}

// ListBotLocalesRequest mocks base method.
func (m *MockLexModelsV2API) ListBotLocalesRequest(arg0 *lexmodelsv2.ListBotLocalesInput) (*request.Request, *lexmodelsv2.ListBotLocalesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotLocalesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListBotLocalesOutput)
	return ret0, ret1
}

// ListBotLocalesRequest indicates an expected call of ListBotLocalesRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListBotLocalesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotLocalesRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotLocalesRequest), arg0)
}

// ListBotLocalesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotLocalesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotLocalesInput, arg2 ...request.Option) (*lexmodelsv2.ListBotLocalesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotLocalesWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotLocalesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotLocalesWithContext indicates an expected call of ListBotLocalesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotLocalesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotLocalesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotLocalesWithContext), varargs...)
}

// ListBotRecommendations mocks base method.
func (m *MockLexModelsV2API) ListBotRecommendations(arg0 *lexmodelsv2.ListBotRecommendationsInput) (*lexmodelsv2.ListBotRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotRecommendations", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotRecommendations indicates an expected call of ListBotRecommendations.
func (mr *MockLexModelsV2APIMockRecorder) ListBotRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotRecommendations", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotRecommendations), arg0)
}

// ListBotRecommendationsPages mocks base method.
func (m *MockLexModelsV2API) ListBotRecommendationsPages(arg0 *lexmodelsv2.ListBotRecommendationsInput, arg1 func(*lexmodelsv2.ListBotRecommendationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotRecommendationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotRecommendationsPages indicates an expected call of ListBotRecommendationsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListBotRecommendationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotRecommendationsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotRecommendationsPages), arg0, arg1)
}

// ListBotRecommendationsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotRecommendationsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotRecommendationsInput, arg2 func(*lexmodelsv2.ListBotRecommendationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotRecommendationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotRecommendationsPagesWithContext indicates an expected call of ListBotRecommendationsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotRecommendationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotRecommendationsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotRecommendationsPagesWithContext), varargs...)
}

// ListBotRecommendationsRequest mocks base method.
func (m *MockLexModelsV2API) ListBotRecommendationsRequest(arg0 *lexmodelsv2.ListBotRecommendationsInput) (*request.Request, *lexmodelsv2.ListBotRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListBotRecommendationsOutput)
	return ret0, ret1
}

// ListBotRecommendationsRequest indicates an expected call of ListBotRecommendationsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListBotRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotRecommendationsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotRecommendationsRequest), arg0)
}

// ListBotRecommendationsWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotRecommendationsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotRecommendationsInput, arg2 ...request.Option) (*lexmodelsv2.ListBotRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotRecommendationsWithContext indicates an expected call of ListBotRecommendationsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotRecommendationsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotRecommendationsWithContext), varargs...)
}

// ListBotVersions mocks base method.
func (m *MockLexModelsV2API) ListBotVersions(arg0 *lexmodelsv2.ListBotVersionsInput) (*lexmodelsv2.ListBotVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotVersions", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotVersions indicates an expected call of ListBotVersions.
func (mr *MockLexModelsV2APIMockRecorder) ListBotVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotVersions", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotVersions), arg0)
}

// ListBotVersionsPages mocks base method.
func (m *MockLexModelsV2API) ListBotVersionsPages(arg0 *lexmodelsv2.ListBotVersionsInput, arg1 func(*lexmodelsv2.ListBotVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotVersionsPages indicates an expected call of ListBotVersionsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListBotVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotVersionsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotVersionsPages), arg0, arg1)
}

// ListBotVersionsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotVersionsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotVersionsInput, arg2 func(*lexmodelsv2.ListBotVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotVersionsPagesWithContext indicates an expected call of ListBotVersionsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotVersionsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotVersionsPagesWithContext), varargs...)
}

// ListBotVersionsRequest mocks base method.
func (m *MockLexModelsV2API) ListBotVersionsRequest(arg0 *lexmodelsv2.ListBotVersionsInput) (*request.Request, *lexmodelsv2.ListBotVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListBotVersionsOutput)
	return ret0, ret1
}

// ListBotVersionsRequest indicates an expected call of ListBotVersionsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListBotVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotVersionsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotVersionsRequest), arg0)
}

// ListBotVersionsWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotVersionsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotVersionsInput, arg2 ...request.Option) (*lexmodelsv2.ListBotVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotVersionsWithContext indicates an expected call of ListBotVersionsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotVersionsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotVersionsWithContext), varargs...)
}

// ListBots mocks base method.
func (m *MockLexModelsV2API) ListBots(arg0 *lexmodelsv2.ListBotsInput) (*lexmodelsv2.ListBotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBots", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBots indicates an expected call of ListBots.
func (mr *MockLexModelsV2APIMockRecorder) ListBots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBots", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBots), arg0)
}

// ListBotsPages mocks base method.
func (m *MockLexModelsV2API) ListBotsPages(arg0 *lexmodelsv2.ListBotsInput, arg1 func(*lexmodelsv2.ListBotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotsPages indicates an expected call of ListBotsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListBotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotsPages), arg0, arg1)
}

// ListBotsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotsInput, arg2 func(*lexmodelsv2.ListBotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBotsPagesWithContext indicates an expected call of ListBotsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotsPagesWithContext), varargs...)
}

// ListBotsRequest mocks base method.
func (m *MockLexModelsV2API) ListBotsRequest(arg0 *lexmodelsv2.ListBotsInput) (*request.Request, *lexmodelsv2.ListBotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListBotsOutput)
	return ret0, ret1
}

// ListBotsRequest indicates an expected call of ListBotsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListBotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotsRequest), arg0)
}

// ListBotsWithContext mocks base method.
func (m *MockLexModelsV2API) ListBotsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBotsInput, arg2 ...request.Option) (*lexmodelsv2.ListBotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBotsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListBotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBotsWithContext indicates an expected call of ListBotsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBotsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBotsWithContext), varargs...)
}

// ListBuiltInIntents mocks base method.
func (m *MockLexModelsV2API) ListBuiltInIntents(arg0 *lexmodelsv2.ListBuiltInIntentsInput) (*lexmodelsv2.ListBuiltInIntentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuiltInIntents", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListBuiltInIntentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuiltInIntents indicates an expected call of ListBuiltInIntents.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInIntents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInIntents", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInIntents), arg0)
}

// ListBuiltInIntentsPages mocks base method.
func (m *MockLexModelsV2API) ListBuiltInIntentsPages(arg0 *lexmodelsv2.ListBuiltInIntentsInput, arg1 func(*lexmodelsv2.ListBuiltInIntentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuiltInIntentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBuiltInIntentsPages indicates an expected call of ListBuiltInIntentsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInIntentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInIntentsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInIntentsPages), arg0, arg1)
}

// ListBuiltInIntentsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBuiltInIntentsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBuiltInIntentsInput, arg2 func(*lexmodelsv2.ListBuiltInIntentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuiltInIntentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBuiltInIntentsPagesWithContext indicates an expected call of ListBuiltInIntentsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInIntentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInIntentsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInIntentsPagesWithContext), varargs...)
}

// ListBuiltInIntentsRequest mocks base method.
func (m *MockLexModelsV2API) ListBuiltInIntentsRequest(arg0 *lexmodelsv2.ListBuiltInIntentsInput) (*request.Request, *lexmodelsv2.ListBuiltInIntentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuiltInIntentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListBuiltInIntentsOutput)
	return ret0, ret1
}

// ListBuiltInIntentsRequest indicates an expected call of ListBuiltInIntentsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInIntentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInIntentsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInIntentsRequest), arg0)
}

// ListBuiltInIntentsWithContext mocks base method.
func (m *MockLexModelsV2API) ListBuiltInIntentsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBuiltInIntentsInput, arg2 ...request.Option) (*lexmodelsv2.ListBuiltInIntentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuiltInIntentsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListBuiltInIntentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuiltInIntentsWithContext indicates an expected call of ListBuiltInIntentsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInIntentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInIntentsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInIntentsWithContext), varargs...)
}

// ListBuiltInSlotTypes mocks base method.
func (m *MockLexModelsV2API) ListBuiltInSlotTypes(arg0 *lexmodelsv2.ListBuiltInSlotTypesInput) (*lexmodelsv2.ListBuiltInSlotTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuiltInSlotTypes", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListBuiltInSlotTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuiltInSlotTypes indicates an expected call of ListBuiltInSlotTypes.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInSlotTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInSlotTypes", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInSlotTypes), arg0)
}

// ListBuiltInSlotTypesPages mocks base method.
func (m *MockLexModelsV2API) ListBuiltInSlotTypesPages(arg0 *lexmodelsv2.ListBuiltInSlotTypesInput, arg1 func(*lexmodelsv2.ListBuiltInSlotTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuiltInSlotTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBuiltInSlotTypesPages indicates an expected call of ListBuiltInSlotTypesPages.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInSlotTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInSlotTypesPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInSlotTypesPages), arg0, arg1)
}

// ListBuiltInSlotTypesPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBuiltInSlotTypesPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBuiltInSlotTypesInput, arg2 func(*lexmodelsv2.ListBuiltInSlotTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuiltInSlotTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBuiltInSlotTypesPagesWithContext indicates an expected call of ListBuiltInSlotTypesPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInSlotTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInSlotTypesPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInSlotTypesPagesWithContext), varargs...)
}

// ListBuiltInSlotTypesRequest mocks base method.
func (m *MockLexModelsV2API) ListBuiltInSlotTypesRequest(arg0 *lexmodelsv2.ListBuiltInSlotTypesInput) (*request.Request, *lexmodelsv2.ListBuiltInSlotTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuiltInSlotTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListBuiltInSlotTypesOutput)
	return ret0, ret1
}

// ListBuiltInSlotTypesRequest indicates an expected call of ListBuiltInSlotTypesRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInSlotTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInSlotTypesRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInSlotTypesRequest), arg0)
}

// ListBuiltInSlotTypesWithContext mocks base method.
func (m *MockLexModelsV2API) ListBuiltInSlotTypesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListBuiltInSlotTypesInput, arg2 ...request.Option) (*lexmodelsv2.ListBuiltInSlotTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuiltInSlotTypesWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListBuiltInSlotTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuiltInSlotTypesWithContext indicates an expected call of ListBuiltInSlotTypesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListBuiltInSlotTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuiltInSlotTypesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListBuiltInSlotTypesWithContext), varargs...)
}

// ListExports mocks base method.
func (m *MockLexModelsV2API) ListExports(arg0 *lexmodelsv2.ListExportsInput) (*lexmodelsv2.ListExportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExports", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports.
func (mr *MockLexModelsV2APIMockRecorder) ListExports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockLexModelsV2API)(nil).ListExports), arg0)
}

// ListExportsPages mocks base method.
func (m *MockLexModelsV2API) ListExportsPages(arg0 *lexmodelsv2.ListExportsInput, arg1 func(*lexmodelsv2.ListExportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExportsPages indicates an expected call of ListExportsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListExportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListExportsPages), arg0, arg1)
}

// ListExportsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListExportsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListExportsInput, arg2 func(*lexmodelsv2.ListExportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExportsPagesWithContext indicates an expected call of ListExportsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListExportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListExportsPagesWithContext), varargs...)
}

// ListExportsRequest mocks base method.
func (m *MockLexModelsV2API) ListExportsRequest(arg0 *lexmodelsv2.ListExportsInput) (*request.Request, *lexmodelsv2.ListExportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListExportsOutput)
	return ret0, ret1
}

// ListExportsRequest indicates an expected call of ListExportsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListExportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListExportsRequest), arg0)
}

// ListExportsWithContext mocks base method.
func (m *MockLexModelsV2API) ListExportsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListExportsInput, arg2 ...request.Option) (*lexmodelsv2.ListExportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExportsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExportsWithContext indicates an expected call of ListExportsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListExportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListExportsWithContext), varargs...)
}

// ListImports mocks base method.
func (m *MockLexModelsV2API) ListImports(arg0 *lexmodelsv2.ListImportsInput) (*lexmodelsv2.ListImportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImports", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListImportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports.
func (mr *MockLexModelsV2APIMockRecorder) ListImports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockLexModelsV2API)(nil).ListImports), arg0)
}

// ListImportsPages mocks base method.
func (m *MockLexModelsV2API) ListImportsPages(arg0 *lexmodelsv2.ListImportsInput, arg1 func(*lexmodelsv2.ListImportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImportsPages indicates an expected call of ListImportsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListImportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListImportsPages), arg0, arg1)
}

// ListImportsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListImportsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListImportsInput, arg2 func(*lexmodelsv2.ListImportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImportsPagesWithContext indicates an expected call of ListImportsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListImportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListImportsPagesWithContext), varargs...)
}

// ListImportsRequest mocks base method.
func (m *MockLexModelsV2API) ListImportsRequest(arg0 *lexmodelsv2.ListImportsInput) (*request.Request, *lexmodelsv2.ListImportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListImportsOutput)
	return ret0, ret1
}

// ListImportsRequest indicates an expected call of ListImportsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListImportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListImportsRequest), arg0)
}

// ListImportsWithContext mocks base method.
func (m *MockLexModelsV2API) ListImportsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListImportsInput, arg2 ...request.Option) (*lexmodelsv2.ListImportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImportsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListImportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImportsWithContext indicates an expected call of ListImportsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListImportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListImportsWithContext), varargs...)
}

// ListIntents mocks base method.
func (m *MockLexModelsV2API) ListIntents(arg0 *lexmodelsv2.ListIntentsInput) (*lexmodelsv2.ListIntentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntents", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListIntentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntents indicates an expected call of ListIntents.
func (mr *MockLexModelsV2APIMockRecorder) ListIntents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntents", reflect.TypeOf((*MockLexModelsV2API)(nil).ListIntents), arg0)
}

// ListIntentsPages mocks base method.
func (m *MockLexModelsV2API) ListIntentsPages(arg0 *lexmodelsv2.ListIntentsInput, arg1 func(*lexmodelsv2.ListIntentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIntentsPages indicates an expected call of ListIntentsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListIntentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntentsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListIntentsPages), arg0, arg1)
}

// ListIntentsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListIntentsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListIntentsInput, arg2 func(*lexmodelsv2.ListIntentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIntentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListIntentsPagesWithContext indicates an expected call of ListIntentsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListIntentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntentsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListIntentsPagesWithContext), varargs...)
}

// ListIntentsRequest mocks base method.
func (m *MockLexModelsV2API) ListIntentsRequest(arg0 *lexmodelsv2.ListIntentsInput) (*request.Request, *lexmodelsv2.ListIntentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListIntentsOutput)
	return ret0, ret1
}

// ListIntentsRequest indicates an expected call of ListIntentsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListIntentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntentsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListIntentsRequest), arg0)
}

// ListIntentsWithContext mocks base method.
func (m *MockLexModelsV2API) ListIntentsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListIntentsInput, arg2 ...request.Option) (*lexmodelsv2.ListIntentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIntentsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListIntentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntentsWithContext indicates an expected call of ListIntentsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListIntentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntentsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListIntentsWithContext), varargs...)
}

// ListRecommendedIntents mocks base method.
func (m *MockLexModelsV2API) ListRecommendedIntents(arg0 *lexmodelsv2.ListRecommendedIntentsInput) (*lexmodelsv2.ListRecommendedIntentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendedIntents", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListRecommendedIntentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendedIntents indicates an expected call of ListRecommendedIntents.
func (mr *MockLexModelsV2APIMockRecorder) ListRecommendedIntents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendedIntents", reflect.TypeOf((*MockLexModelsV2API)(nil).ListRecommendedIntents), arg0)
}

// ListRecommendedIntentsPages mocks base method.
func (m *MockLexModelsV2API) ListRecommendedIntentsPages(arg0 *lexmodelsv2.ListRecommendedIntentsInput, arg1 func(*lexmodelsv2.ListRecommendedIntentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendedIntentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendedIntentsPages indicates an expected call of ListRecommendedIntentsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListRecommendedIntentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendedIntentsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListRecommendedIntentsPages), arg0, arg1)
}

// ListRecommendedIntentsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListRecommendedIntentsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListRecommendedIntentsInput, arg2 func(*lexmodelsv2.ListRecommendedIntentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendedIntentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRecommendedIntentsPagesWithContext indicates an expected call of ListRecommendedIntentsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListRecommendedIntentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendedIntentsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListRecommendedIntentsPagesWithContext), varargs...)
}

// ListRecommendedIntentsRequest mocks base method.
func (m *MockLexModelsV2API) ListRecommendedIntentsRequest(arg0 *lexmodelsv2.ListRecommendedIntentsInput) (*request.Request, *lexmodelsv2.ListRecommendedIntentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecommendedIntentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListRecommendedIntentsOutput)
	return ret0, ret1
}

// ListRecommendedIntentsRequest indicates an expected call of ListRecommendedIntentsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListRecommendedIntentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendedIntentsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListRecommendedIntentsRequest), arg0)
}

// ListRecommendedIntentsWithContext mocks base method.
func (m *MockLexModelsV2API) ListRecommendedIntentsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListRecommendedIntentsInput, arg2 ...request.Option) (*lexmodelsv2.ListRecommendedIntentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecommendedIntentsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListRecommendedIntentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecommendedIntentsWithContext indicates an expected call of ListRecommendedIntentsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListRecommendedIntentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecommendedIntentsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListRecommendedIntentsWithContext), varargs...)
}

// ListSlotTypes mocks base method.
func (m *MockLexModelsV2API) ListSlotTypes(arg0 *lexmodelsv2.ListSlotTypesInput) (*lexmodelsv2.ListSlotTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlotTypes", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListSlotTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlotTypes indicates an expected call of ListSlotTypes.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotTypes", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotTypes), arg0)
}

// ListSlotTypesPages mocks base method.
func (m *MockLexModelsV2API) ListSlotTypesPages(arg0 *lexmodelsv2.ListSlotTypesInput, arg1 func(*lexmodelsv2.ListSlotTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlotTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlotTypesPages indicates an expected call of ListSlotTypesPages.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotTypesPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotTypesPages), arg0, arg1)
}

// ListSlotTypesPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListSlotTypesPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListSlotTypesInput, arg2 func(*lexmodelsv2.ListSlotTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlotTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlotTypesPagesWithContext indicates an expected call of ListSlotTypesPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotTypesPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotTypesPagesWithContext), varargs...)
}

// ListSlotTypesRequest mocks base method.
func (m *MockLexModelsV2API) ListSlotTypesRequest(arg0 *lexmodelsv2.ListSlotTypesInput) (*request.Request, *lexmodelsv2.ListSlotTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlotTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListSlotTypesOutput)
	return ret0, ret1
}

// ListSlotTypesRequest indicates an expected call of ListSlotTypesRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotTypesRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotTypesRequest), arg0)
}

// ListSlotTypesWithContext mocks base method.
func (m *MockLexModelsV2API) ListSlotTypesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListSlotTypesInput, arg2 ...request.Option) (*lexmodelsv2.ListSlotTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlotTypesWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListSlotTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlotTypesWithContext indicates an expected call of ListSlotTypesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotTypesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotTypesWithContext), varargs...)
}

// ListSlots mocks base method.
func (m *MockLexModelsV2API) ListSlots(arg0 *lexmodelsv2.ListSlotsInput) (*lexmodelsv2.ListSlotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlots", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListSlotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlots indicates an expected call of ListSlots.
func (mr *MockLexModelsV2APIMockRecorder) ListSlots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlots", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlots), arg0)
}

// ListSlotsPages mocks base method.
func (m *MockLexModelsV2API) ListSlotsPages(arg0 *lexmodelsv2.ListSlotsInput, arg1 func(*lexmodelsv2.ListSlotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlotsPages indicates an expected call of ListSlotsPages.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotsPages", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotsPages), arg0, arg1)
}

// ListSlotsPagesWithContext mocks base method.
func (m *MockLexModelsV2API) ListSlotsPagesWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListSlotsInput, arg2 func(*lexmodelsv2.ListSlotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSlotsPagesWithContext indicates an expected call of ListSlotsPagesWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotsPagesWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotsPagesWithContext), varargs...)
}

// ListSlotsRequest mocks base method.
func (m *MockLexModelsV2API) ListSlotsRequest(arg0 *lexmodelsv2.ListSlotsInput) (*request.Request, *lexmodelsv2.ListSlotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListSlotsOutput)
	return ret0, ret1
}

// ListSlotsRequest indicates an expected call of ListSlotsRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotsRequest), arg0)
}

// ListSlotsWithContext mocks base method.
func (m *MockLexModelsV2API) ListSlotsWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListSlotsInput, arg2 ...request.Option) (*lexmodelsv2.ListSlotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSlotsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListSlotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlotsWithContext indicates an expected call of ListSlotsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListSlotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlotsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListSlotsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockLexModelsV2API) ListTagsForResource(arg0 *lexmodelsv2.ListTagsForResourceInput) (*lexmodelsv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockLexModelsV2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockLexModelsV2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockLexModelsV2API) ListTagsForResourceRequest(arg0 *lexmodelsv2.ListTagsForResourceInput) (*request.Request, *lexmodelsv2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockLexModelsV2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockLexModelsV2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *lexmodelsv2.ListTagsForResourceInput, arg2 ...request.Option) (*lexmodelsv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockLexModelsV2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// SearchAssociatedTranscripts mocks base method.
func (m *MockLexModelsV2API) SearchAssociatedTranscripts(arg0 *lexmodelsv2.SearchAssociatedTranscriptsInput) (*lexmodelsv2.SearchAssociatedTranscriptsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAssociatedTranscripts", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.SearchAssociatedTranscriptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAssociatedTranscripts indicates an expected call of SearchAssociatedTranscripts.
func (mr *MockLexModelsV2APIMockRecorder) SearchAssociatedTranscripts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAssociatedTranscripts", reflect.TypeOf((*MockLexModelsV2API)(nil).SearchAssociatedTranscripts), arg0)
}

// SearchAssociatedTranscriptsRequest mocks base method.
func (m *MockLexModelsV2API) SearchAssociatedTranscriptsRequest(arg0 *lexmodelsv2.SearchAssociatedTranscriptsInput) (*request.Request, *lexmodelsv2.SearchAssociatedTranscriptsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAssociatedTranscriptsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.SearchAssociatedTranscriptsOutput)
	return ret0, ret1
}

// SearchAssociatedTranscriptsRequest indicates an expected call of SearchAssociatedTranscriptsRequest.
func (mr *MockLexModelsV2APIMockRecorder) SearchAssociatedTranscriptsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAssociatedTranscriptsRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).SearchAssociatedTranscriptsRequest), arg0)
}

// SearchAssociatedTranscriptsWithContext mocks base method.
func (m *MockLexModelsV2API) SearchAssociatedTranscriptsWithContext(arg0 context.Context, arg1 *lexmodelsv2.SearchAssociatedTranscriptsInput, arg2 ...request.Option) (*lexmodelsv2.SearchAssociatedTranscriptsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAssociatedTranscriptsWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.SearchAssociatedTranscriptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAssociatedTranscriptsWithContext indicates an expected call of SearchAssociatedTranscriptsWithContext.
func (mr *MockLexModelsV2APIMockRecorder) SearchAssociatedTranscriptsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAssociatedTranscriptsWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).SearchAssociatedTranscriptsWithContext), varargs...)
}

// StartBotRecommendation mocks base method.
func (m *MockLexModelsV2API) StartBotRecommendation(arg0 *lexmodelsv2.StartBotRecommendationInput) (*lexmodelsv2.StartBotRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBotRecommendation", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.StartBotRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBotRecommendation indicates an expected call of StartBotRecommendation.
func (mr *MockLexModelsV2APIMockRecorder) StartBotRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBotRecommendation", reflect.TypeOf((*MockLexModelsV2API)(nil).StartBotRecommendation), arg0)
}

// StartBotRecommendationRequest mocks base method.
func (m *MockLexModelsV2API) StartBotRecommendationRequest(arg0 *lexmodelsv2.StartBotRecommendationInput) (*request.Request, *lexmodelsv2.StartBotRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBotRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.StartBotRecommendationOutput)
	return ret0, ret1
}

// StartBotRecommendationRequest indicates an expected call of StartBotRecommendationRequest.
func (mr *MockLexModelsV2APIMockRecorder) StartBotRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBotRecommendationRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).StartBotRecommendationRequest), arg0)
}

// StartBotRecommendationWithContext mocks base method.
func (m *MockLexModelsV2API) StartBotRecommendationWithContext(arg0 context.Context, arg1 *lexmodelsv2.StartBotRecommendationInput, arg2 ...request.Option) (*lexmodelsv2.StartBotRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBotRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.StartBotRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBotRecommendationWithContext indicates an expected call of StartBotRecommendationWithContext.
func (mr *MockLexModelsV2APIMockRecorder) StartBotRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBotRecommendationWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).StartBotRecommendationWithContext), varargs...)
}

// StartImport mocks base method.
func (m *MockLexModelsV2API) StartImport(arg0 *lexmodelsv2.StartImportInput) (*lexmodelsv2.StartImportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImport", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.StartImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImport indicates an expected call of StartImport.
func (mr *MockLexModelsV2APIMockRecorder) StartImport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImport", reflect.TypeOf((*MockLexModelsV2API)(nil).StartImport), arg0)
}

// StartImportRequest mocks base method.
func (m *MockLexModelsV2API) StartImportRequest(arg0 *lexmodelsv2.StartImportInput) (*request.Request, *lexmodelsv2.StartImportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.StartImportOutput)
	return ret0, ret1
}

// StartImportRequest indicates an expected call of StartImportRequest.
func (mr *MockLexModelsV2APIMockRecorder) StartImportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).StartImportRequest), arg0)
}

// StartImportWithContext mocks base method.
func (m *MockLexModelsV2API) StartImportWithContext(arg0 context.Context, arg1 *lexmodelsv2.StartImportInput, arg2 ...request.Option) (*lexmodelsv2.StartImportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartImportWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.StartImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImportWithContext indicates an expected call of StartImportWithContext.
func (mr *MockLexModelsV2APIMockRecorder) StartImportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).StartImportWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockLexModelsV2API) TagResource(arg0 *lexmodelsv2.TagResourceInput) (*lexmodelsv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockLexModelsV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockLexModelsV2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockLexModelsV2API) TagResourceRequest(arg0 *lexmodelsv2.TagResourceInput) (*request.Request, *lexmodelsv2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockLexModelsV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockLexModelsV2API) TagResourceWithContext(arg0 context.Context, arg1 *lexmodelsv2.TagResourceInput, arg2 ...request.Option) (*lexmodelsv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockLexModelsV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockLexModelsV2API) UntagResource(arg0 *lexmodelsv2.UntagResourceInput) (*lexmodelsv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockLexModelsV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockLexModelsV2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockLexModelsV2API) UntagResourceRequest(arg0 *lexmodelsv2.UntagResourceInput) (*request.Request, *lexmodelsv2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockLexModelsV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockLexModelsV2API) UntagResourceWithContext(arg0 context.Context, arg1 *lexmodelsv2.UntagResourceInput, arg2 ...request.Option) (*lexmodelsv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateBot mocks base method.
func (m *MockLexModelsV2API) UpdateBot(arg0 *lexmodelsv2.UpdateBotInput) (*lexmodelsv2.UpdateBotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBot indicates an expected call of UpdateBot.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBot", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBot), arg0)
}

// UpdateBotAlias mocks base method.
func (m *MockLexModelsV2API) UpdateBotAlias(arg0 *lexmodelsv2.UpdateBotAliasInput) (*lexmodelsv2.UpdateBotAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotAlias", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBotAlias indicates an expected call of UpdateBotAlias.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotAlias", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotAlias), arg0)
}

// UpdateBotAliasRequest mocks base method.
func (m *MockLexModelsV2API) UpdateBotAliasRequest(arg0 *lexmodelsv2.UpdateBotAliasInput) (*request.Request, *lexmodelsv2.UpdateBotAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateBotAliasOutput)
	return ret0, ret1
}

// UpdateBotAliasRequest indicates an expected call of UpdateBotAliasRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotAliasRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotAliasRequest), arg0)
}

// UpdateBotAliasWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateBotAliasWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateBotAliasInput, arg2 ...request.Option) (*lexmodelsv2.UpdateBotAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBotAliasWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBotAliasWithContext indicates an expected call of UpdateBotAliasWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotAliasWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotAliasWithContext), varargs...)
}

// UpdateBotLocale mocks base method.
func (m *MockLexModelsV2API) UpdateBotLocale(arg0 *lexmodelsv2.UpdateBotLocaleInput) (*lexmodelsv2.UpdateBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotLocale", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBotLocale indicates an expected call of UpdateBotLocale.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotLocale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotLocale", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotLocale), arg0)
}

// UpdateBotLocaleRequest mocks base method.
func (m *MockLexModelsV2API) UpdateBotLocaleRequest(arg0 *lexmodelsv2.UpdateBotLocaleInput) (*request.Request, *lexmodelsv2.UpdateBotLocaleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotLocaleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateBotLocaleOutput)
	return ret0, ret1
}

// UpdateBotLocaleRequest indicates an expected call of UpdateBotLocaleRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotLocaleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotLocaleRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotLocaleRequest), arg0)
}

// UpdateBotLocaleWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateBotLocaleWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateBotLocaleInput, arg2 ...request.Option) (*lexmodelsv2.UpdateBotLocaleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBotLocaleWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotLocaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBotLocaleWithContext indicates an expected call of UpdateBotLocaleWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotLocaleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotLocaleWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotLocaleWithContext), varargs...)
}

// UpdateBotRecommendation mocks base method.
func (m *MockLexModelsV2API) UpdateBotRecommendation(arg0 *lexmodelsv2.UpdateBotRecommendationInput) (*lexmodelsv2.UpdateBotRecommendationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotRecommendation", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBotRecommendation indicates an expected call of UpdateBotRecommendation.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotRecommendation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotRecommendation", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotRecommendation), arg0)
}

// UpdateBotRecommendationRequest mocks base method.
func (m *MockLexModelsV2API) UpdateBotRecommendationRequest(arg0 *lexmodelsv2.UpdateBotRecommendationInput) (*request.Request, *lexmodelsv2.UpdateBotRecommendationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotRecommendationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateBotRecommendationOutput)
	return ret0, ret1
}

// UpdateBotRecommendationRequest indicates an expected call of UpdateBotRecommendationRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotRecommendationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotRecommendationRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotRecommendationRequest), arg0)
}

// UpdateBotRecommendationWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateBotRecommendationWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateBotRecommendationInput, arg2 ...request.Option) (*lexmodelsv2.UpdateBotRecommendationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBotRecommendationWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotRecommendationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBotRecommendationWithContext indicates an expected call of UpdateBotRecommendationWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotRecommendationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotRecommendationWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotRecommendationWithContext), varargs...)
}

// UpdateBotRequest mocks base method.
func (m *MockLexModelsV2API) UpdateBotRequest(arg0 *lexmodelsv2.UpdateBotInput) (*request.Request, *lexmodelsv2.UpdateBotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateBotOutput)
	return ret0, ret1
}

// UpdateBotRequest indicates an expected call of UpdateBotRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotRequest), arg0)
}

// UpdateBotWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateBotWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateBotInput, arg2 ...request.Option) (*lexmodelsv2.UpdateBotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateBotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBotWithContext indicates an expected call of UpdateBotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateBotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateBotWithContext), varargs...)
}

// UpdateExport mocks base method.
func (m *MockLexModelsV2API) UpdateExport(arg0 *lexmodelsv2.UpdateExportInput) (*lexmodelsv2.UpdateExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExport", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExport indicates an expected call of UpdateExport.
func (mr *MockLexModelsV2APIMockRecorder) UpdateExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExport", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateExport), arg0)
}

// UpdateExportRequest mocks base method.
func (m *MockLexModelsV2API) UpdateExportRequest(arg0 *lexmodelsv2.UpdateExportInput) (*request.Request, *lexmodelsv2.UpdateExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateExportOutput)
	return ret0, ret1
}

// UpdateExportRequest indicates an expected call of UpdateExportRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExportRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateExportRequest), arg0)
}

// UpdateExportWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateExportWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateExportInput, arg2 ...request.Option) (*lexmodelsv2.UpdateExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExportWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExportWithContext indicates an expected call of UpdateExportWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExportWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateExportWithContext), varargs...)
}

// UpdateIntent mocks base method.
func (m *MockLexModelsV2API) UpdateIntent(arg0 *lexmodelsv2.UpdateIntentInput) (*lexmodelsv2.UpdateIntentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIntent", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntent indicates an expected call of UpdateIntent.
func (mr *MockLexModelsV2APIMockRecorder) UpdateIntent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntent", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateIntent), arg0)
}

// UpdateIntentRequest mocks base method.
func (m *MockLexModelsV2API) UpdateIntentRequest(arg0 *lexmodelsv2.UpdateIntentInput) (*request.Request, *lexmodelsv2.UpdateIntentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIntentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateIntentOutput)
	return ret0, ret1
}

// UpdateIntentRequest indicates an expected call of UpdateIntentRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateIntentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntentRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateIntentRequest), arg0)
}

// UpdateIntentWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateIntentWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateIntentInput, arg2 ...request.Option) (*lexmodelsv2.UpdateIntentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIntentWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateIntentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntentWithContext indicates an expected call of UpdateIntentWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateIntentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntentWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateIntentWithContext), varargs...)
}

// UpdateResourcePolicy mocks base method.
func (m *MockLexModelsV2API) UpdateResourcePolicy(arg0 *lexmodelsv2.UpdateResourcePolicyInput) (*lexmodelsv2.UpdateResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourcePolicy", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourcePolicy indicates an expected call of UpdateResourcePolicy.
func (mr *MockLexModelsV2APIMockRecorder) UpdateResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourcePolicy", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateResourcePolicy), arg0)
}

// UpdateResourcePolicyRequest mocks base method.
func (m *MockLexModelsV2API) UpdateResourcePolicyRequest(arg0 *lexmodelsv2.UpdateResourcePolicyInput) (*request.Request, *lexmodelsv2.UpdateResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateResourcePolicyOutput)
	return ret0, ret1
}

// UpdateResourcePolicyRequest indicates an expected call of UpdateResourcePolicyRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourcePolicyRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateResourcePolicyRequest), arg0)
}

// UpdateResourcePolicyWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateResourcePolicyWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateResourcePolicyInput, arg2 ...request.Option) (*lexmodelsv2.UpdateResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourcePolicyWithContext indicates an expected call of UpdateResourcePolicyWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourcePolicyWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateResourcePolicyWithContext), varargs...)
}

// UpdateSlot mocks base method.
func (m *MockLexModelsV2API) UpdateSlot(arg0 *lexmodelsv2.UpdateSlotInput) (*lexmodelsv2.UpdateSlotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlot", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlot indicates an expected call of UpdateSlot.
func (mr *MockLexModelsV2APIMockRecorder) UpdateSlot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlot", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateSlot), arg0)
}

// UpdateSlotRequest mocks base method.
func (m *MockLexModelsV2API) UpdateSlotRequest(arg0 *lexmodelsv2.UpdateSlotInput) (*request.Request, *lexmodelsv2.UpdateSlotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateSlotOutput)
	return ret0, ret1
}

// UpdateSlotRequest indicates an expected call of UpdateSlotRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateSlotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlotRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateSlotRequest), arg0)
}

// UpdateSlotType mocks base method.
func (m *MockLexModelsV2API) UpdateSlotType(arg0 *lexmodelsv2.UpdateSlotTypeInput) (*lexmodelsv2.UpdateSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlotType", arg0)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlotType indicates an expected call of UpdateSlotType.
func (mr *MockLexModelsV2APIMockRecorder) UpdateSlotType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlotType", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateSlotType), arg0)
}

// UpdateSlotTypeRequest mocks base method.
func (m *MockLexModelsV2API) UpdateSlotTypeRequest(arg0 *lexmodelsv2.UpdateSlotTypeInput) (*request.Request, *lexmodelsv2.UpdateSlotTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlotTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lexmodelsv2.UpdateSlotTypeOutput)
	return ret0, ret1
}

// UpdateSlotTypeRequest indicates an expected call of UpdateSlotTypeRequest.
func (mr *MockLexModelsV2APIMockRecorder) UpdateSlotTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlotTypeRequest", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateSlotTypeRequest), arg0)
}

// UpdateSlotTypeWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateSlotTypeWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateSlotTypeInput, arg2 ...request.Option) (*lexmodelsv2.UpdateSlotTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSlotTypeWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateSlotTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlotTypeWithContext indicates an expected call of UpdateSlotTypeWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateSlotTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlotTypeWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateSlotTypeWithContext), varargs...)
}

// UpdateSlotWithContext mocks base method.
func (m *MockLexModelsV2API) UpdateSlotWithContext(arg0 context.Context, arg1 *lexmodelsv2.UpdateSlotInput, arg2 ...request.Option) (*lexmodelsv2.UpdateSlotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSlotWithContext", varargs...)
	ret0, _ := ret[0].(*lexmodelsv2.UpdateSlotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSlotWithContext indicates an expected call of UpdateSlotWithContext.
func (mr *MockLexModelsV2APIMockRecorder) UpdateSlotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlotWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).UpdateSlotWithContext), varargs...)
}

// WaitUntilBotAliasAvailable mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotAliasAvailable(arg0 *lexmodelsv2.DescribeBotAliasInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotAliasAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotAliasAvailable indicates an expected call of WaitUntilBotAliasAvailable.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotAliasAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotAliasAvailable", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotAliasAvailable), arg0)
}

// WaitUntilBotAliasAvailableWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotAliasAvailableWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotAliasInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotAliasAvailableWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotAliasAvailableWithContext indicates an expected call of WaitUntilBotAliasAvailableWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotAliasAvailableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotAliasAvailableWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotAliasAvailableWithContext), varargs...)
}

// WaitUntilBotAvailable mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotAvailable(arg0 *lexmodelsv2.DescribeBotInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotAvailable indicates an expected call of WaitUntilBotAvailable.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotAvailable", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotAvailable), arg0)
}

// WaitUntilBotAvailableWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotAvailableWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotAvailableWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotAvailableWithContext indicates an expected call of WaitUntilBotAvailableWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotAvailableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotAvailableWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotAvailableWithContext), varargs...)
}

// WaitUntilBotExportCompleted mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotExportCompleted(arg0 *lexmodelsv2.DescribeExportInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotExportCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotExportCompleted indicates an expected call of WaitUntilBotExportCompleted.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotExportCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotExportCompleted", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotExportCompleted), arg0)
}

// WaitUntilBotExportCompletedWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotExportCompletedWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeExportInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotExportCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotExportCompletedWithContext indicates an expected call of WaitUntilBotExportCompletedWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotExportCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotExportCompletedWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotExportCompletedWithContext), varargs...)
}

// WaitUntilBotImportCompleted mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotImportCompleted(arg0 *lexmodelsv2.DescribeImportInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotImportCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotImportCompleted indicates an expected call of WaitUntilBotImportCompleted.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotImportCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotImportCompleted", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotImportCompleted), arg0)
}

// WaitUntilBotImportCompletedWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotImportCompletedWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeImportInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotImportCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotImportCompletedWithContext indicates an expected call of WaitUntilBotImportCompletedWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotImportCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotImportCompletedWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotImportCompletedWithContext), varargs...)
}

// WaitUntilBotLocaleBuilt mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotLocaleBuilt(arg0 *lexmodelsv2.DescribeBotLocaleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotLocaleBuilt", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotLocaleBuilt indicates an expected call of WaitUntilBotLocaleBuilt.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotLocaleBuilt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotLocaleBuilt", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotLocaleBuilt), arg0)
}

// WaitUntilBotLocaleBuiltWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotLocaleBuiltWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotLocaleInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotLocaleBuiltWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotLocaleBuiltWithContext indicates an expected call of WaitUntilBotLocaleBuiltWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotLocaleBuiltWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotLocaleBuiltWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotLocaleBuiltWithContext), varargs...)
}

// WaitUntilBotLocaleCreated mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotLocaleCreated(arg0 *lexmodelsv2.DescribeBotLocaleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotLocaleCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotLocaleCreated indicates an expected call of WaitUntilBotLocaleCreated.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotLocaleCreated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotLocaleCreated", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotLocaleCreated), arg0)
}

// WaitUntilBotLocaleCreatedWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotLocaleCreatedWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotLocaleInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotLocaleCreatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotLocaleCreatedWithContext indicates an expected call of WaitUntilBotLocaleCreatedWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotLocaleCreatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotLocaleCreatedWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotLocaleCreatedWithContext), varargs...)
}

// WaitUntilBotLocaleExpressTestingAvailable mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotLocaleExpressTestingAvailable(arg0 *lexmodelsv2.DescribeBotLocaleInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotLocaleExpressTestingAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotLocaleExpressTestingAvailable indicates an expected call of WaitUntilBotLocaleExpressTestingAvailable.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotLocaleExpressTestingAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotLocaleExpressTestingAvailable", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotLocaleExpressTestingAvailable), arg0)
}

// WaitUntilBotLocaleExpressTestingAvailableWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotLocaleExpressTestingAvailableWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotLocaleInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotLocaleExpressTestingAvailableWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotLocaleExpressTestingAvailableWithContext indicates an expected call of WaitUntilBotLocaleExpressTestingAvailableWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotLocaleExpressTestingAvailableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotLocaleExpressTestingAvailableWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotLocaleExpressTestingAvailableWithContext), varargs...)
}

// WaitUntilBotVersionAvailable mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotVersionAvailable(arg0 *lexmodelsv2.DescribeBotVersionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBotVersionAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotVersionAvailable indicates an expected call of WaitUntilBotVersionAvailable.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotVersionAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotVersionAvailable", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotVersionAvailable), arg0)
}

// WaitUntilBotVersionAvailableWithContext mocks base method.
func (m *MockLexModelsV2API) WaitUntilBotVersionAvailableWithContext(arg0 context.Context, arg1 *lexmodelsv2.DescribeBotVersionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilBotVersionAvailableWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBotVersionAvailableWithContext indicates an expected call of WaitUntilBotVersionAvailableWithContext.
func (mr *MockLexModelsV2APIMockRecorder) WaitUntilBotVersionAvailableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBotVersionAvailableWithContext", reflect.TypeOf((*MockLexModelsV2API)(nil).WaitUntilBotVersionAvailableWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/workspaces/workspacesiface (interfaces: WorkSpacesAPI)

// Package workspacesmock is a generated GoMock package.
package workspacesmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	workspaces "github.com/aws/aws-sdk-go/service/workspaces"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkSpacesAPI is a mock of WorkSpacesAPI interface.
type MockWorkSpacesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWorkSpacesAPIMockRecorder
}

// MockWorkSpacesAPIMockRecorder is the mock recorder for MockWorkSpacesAPI.
type MockWorkSpacesAPIMockRecorder struct {
	mock *MockWorkSpacesAPI
}

// NewMockWorkSpacesAPI creates a new mock instance.
func NewMockWorkSpacesAPI(ctrl *gomock.Controller) *MockWorkSpacesAPI {
	mock := &MockWorkSpacesAPI{ctrl: ctrl}
	mock.recorder = &MockWorkSpacesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkSpacesAPI) EXPECT() *MockWorkSpacesAPIMockRecorder {
	return m.recorder
}

// AssociateConnectionAlias mocks base method.
func (m *MockWorkSpacesAPI) AssociateConnectionAlias(arg0 *workspaces.AssociateConnectionAliasInput) (*workspaces.AssociateConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateConnectionAlias", arg0)
	ret0, _ := ret[0].(*workspaces.AssociateConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateConnectionAlias indicates an expected call of AssociateConnectionAlias.
func (mr *MockWorkSpacesAPIMockRecorder) AssociateConnectionAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateConnectionAlias", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateConnectionAlias), arg0)
}

// AssociateConnectionAliasRequest mocks base method.
func (m *MockWorkSpacesAPI) AssociateConnectionAliasRequest(arg0 *workspaces.AssociateConnectionAliasInput) (*request.Request, *workspaces.AssociateConnectionAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateConnectionAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.AssociateConnectionAliasOutput)
	return ret0, ret1
}

// AssociateConnectionAliasRequest indicates an expected call of AssociateConnectionAliasRequest.
func (mr *MockWorkSpacesAPIMockRecorder) AssociateConnectionAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateConnectionAliasRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateConnectionAliasRequest), arg0)
}

// AssociateConnectionAliasWithContext mocks base method.
func (m *MockWorkSpacesAPI) AssociateConnectionAliasWithContext(arg0 context.Context, arg1 *workspaces.AssociateConnectionAliasInput, arg2 ...request.Option) (*workspaces.AssociateConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateConnectionAliasWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.AssociateConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateConnectionAliasWithContext indicates an expected call of AssociateConnectionAliasWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) AssociateConnectionAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateConnectionAliasWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateConnectionAliasWithContext), varargs...)
}

// AssociateIpGroups mocks base method.
func (m *MockWorkSpacesAPI) AssociateIpGroups(arg0 *workspaces.AssociateIpGroupsInput) (*workspaces.AssociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateIpGroups", arg0)
	ret0, _ := ret[0].(*workspaces.AssociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateIpGroups indicates an expected call of AssociateIpGroups.
func (mr *MockWorkSpacesAPIMockRecorder) AssociateIpGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateIpGroups", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateIpGroups), arg0)
}

// AssociateIpGroupsRequest mocks base method.
func (m *MockWorkSpacesAPI) AssociateIpGroupsRequest(arg0 *workspaces.AssociateIpGroupsInput) (*request.Request, *workspaces.AssociateIpGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateIpGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.AssociateIpGroupsOutput)
	return ret0, ret1
}

// AssociateIpGroupsRequest indicates an expected call of AssociateIpGroupsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) AssociateIpGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateIpGroupsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateIpGroupsRequest), arg0)
}

// AssociateIpGroupsWithContext mocks base method.
func (m *MockWorkSpacesAPI) AssociateIpGroupsWithContext(arg0 context.Context, arg1 *workspaces.AssociateIpGroupsInput, arg2 ...request.Option) (*workspaces.AssociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateIpGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.AssociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateIpGroupsWithContext indicates an expected call of AssociateIpGroupsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) AssociateIpGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateIpGroupsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AssociateIpGroupsWithContext), varargs...)
}

// AuthorizeIpRules mocks base method.
func (m *MockWorkSpacesAPI) AuthorizeIpRules(arg0 *workspaces.AuthorizeIpRulesInput) (*workspaces.AuthorizeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeIpRules", arg0)
	ret0, _ := ret[0].(*workspaces.AuthorizeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeIpRules indicates an expected call of AuthorizeIpRules.
func (mr *MockWorkSpacesAPIMockRecorder) AuthorizeIpRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeIpRules", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AuthorizeIpRules), arg0)
}

// AuthorizeIpRulesRequest mocks base method.
func (m *MockWorkSpacesAPI) AuthorizeIpRulesRequest(arg0 *workspaces.AuthorizeIpRulesInput) (*request.Request, *workspaces.AuthorizeIpRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeIpRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.AuthorizeIpRulesOutput)
	return ret0, ret1
}

// AuthorizeIpRulesRequest indicates an expected call of AuthorizeIpRulesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) AuthorizeIpRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeIpRulesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AuthorizeIpRulesRequest), arg0)
}

// AuthorizeIpRulesWithContext mocks base method.
func (m *MockWorkSpacesAPI) AuthorizeIpRulesWithContext(arg0 context.Context, arg1 *workspaces.AuthorizeIpRulesInput, arg2 ...request.Option) (*workspaces.AuthorizeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthorizeIpRulesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.AuthorizeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeIpRulesWithContext indicates an expected call of AuthorizeIpRulesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) AuthorizeIpRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeIpRulesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).AuthorizeIpRulesWithContext), varargs...)
}

// CopyWorkspaceImage mocks base method.
func (m *MockWorkSpacesAPI) CopyWorkspaceImage(arg0 *workspaces.CopyWorkspaceImageInput) (*workspaces.CopyWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyWorkspaceImage", arg0)
	ret0, _ := ret[0].(*workspaces.CopyWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyWorkspaceImage indicates an expected call of CopyWorkspaceImage.
func (mr *MockWorkSpacesAPIMockRecorder) CopyWorkspaceImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWorkspaceImage", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CopyWorkspaceImage), arg0)
}

// CopyWorkspaceImageRequest mocks base method.
func (m *MockWorkSpacesAPI) CopyWorkspaceImageRequest(arg0 *workspaces.CopyWorkspaceImageInput) (*request.Request, *workspaces.CopyWorkspaceImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyWorkspaceImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CopyWorkspaceImageOutput)
	return ret0, ret1
}

// CopyWorkspaceImageRequest indicates an expected call of CopyWorkspaceImageRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CopyWorkspaceImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWorkspaceImageRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CopyWorkspaceImageRequest), arg0)
}

// CopyWorkspaceImageWithContext mocks base method.
func (m *MockWorkSpacesAPI) CopyWorkspaceImageWithContext(arg0 context.Context, arg1 *workspaces.CopyWorkspaceImageInput, arg2 ...request.Option) (*workspaces.CopyWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyWorkspaceImageWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CopyWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyWorkspaceImageWithContext indicates an expected call of CopyWorkspaceImageWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CopyWorkspaceImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWorkspaceImageWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CopyWorkspaceImageWithContext), varargs...)
}

// CreateConnectClientAddIn mocks base method.
func (m *MockWorkSpacesAPI) CreateConnectClientAddIn(arg0 *workspaces.CreateConnectClientAddInInput) (*workspaces.CreateConnectClientAddInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectClientAddIn", arg0)
	ret0, _ := ret[0].(*workspaces.CreateConnectClientAddInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectClientAddIn indicates an expected call of CreateConnectClientAddIn.
func (mr *MockWorkSpacesAPIMockRecorder) CreateConnectClientAddIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectClientAddIn", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateConnectClientAddIn), arg0)
}

// CreateConnectClientAddInRequest mocks base method.
func (m *MockWorkSpacesAPI) CreateConnectClientAddInRequest(arg0 *workspaces.CreateConnectClientAddInInput) (*request.Request, *workspaces.CreateConnectClientAddInOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectClientAddInRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateConnectClientAddInOutput)
	return ret0, ret1
}

// CreateConnectClientAddInRequest indicates an expected call of CreateConnectClientAddInRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CreateConnectClientAddInRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectClientAddInRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateConnectClientAddInRequest), arg0)
}

// CreateConnectClientAddInWithContext mocks base method.
func (m *MockWorkSpacesAPI) CreateConnectClientAddInWithContext(arg0 context.Context, arg1 *workspaces.CreateConnectClientAddInInput, arg2 ...request.Option) (*workspaces.CreateConnectClientAddInOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectClientAddInWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateConnectClientAddInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectClientAddInWithContext indicates an expected call of CreateConnectClientAddInWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CreateConnectClientAddInWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectClientAddInWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateConnectClientAddInWithContext), varargs...)
}

// CreateConnectionAlias mocks base method.
func (m *MockWorkSpacesAPI) CreateConnectionAlias(arg0 *workspaces.CreateConnectionAliasInput) (*workspaces.CreateConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionAlias", arg0)
	ret0, _ := ret[0].(*workspaces.CreateConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectionAlias indicates an expected call of CreateConnectionAlias.
func (mr *MockWorkSpacesAPIMockRecorder) CreateConnectionAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionAlias", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateConnectionAlias), arg0)
}

// CreateConnectionAliasRequest mocks base method.
func (m *MockWorkSpacesAPI) CreateConnectionAliasRequest(arg0 *workspaces.CreateConnectionAliasInput) (*request.Request, *workspaces.CreateConnectionAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateConnectionAliasOutput)
	return ret0, ret1
}

// CreateConnectionAliasRequest indicates an expected call of CreateConnectionAliasRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CreateConnectionAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionAliasRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateConnectionAliasRequest), arg0)
}

// CreateConnectionAliasWithContext mocks base method.
func (m *MockWorkSpacesAPI) CreateConnectionAliasWithContext(arg0 context.Context, arg1 *workspaces.CreateConnectionAliasInput, arg2 ...request.Option) (*workspaces.CreateConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectionAliasWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectionAliasWithContext indicates an expected call of CreateConnectionAliasWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CreateConnectionAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionAliasWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateConnectionAliasWithContext), varargs...)
}

// CreateIpGroup mocks base method.
func (m *MockWorkSpacesAPI) CreateIpGroup(arg0 *workspaces.CreateIpGroupInput) (*workspaces.CreateIpGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIpGroup", arg0)
	ret0, _ := ret[0].(*workspaces.CreateIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIpGroup indicates an expected call of CreateIpGroup.
func (mr *MockWorkSpacesAPIMockRecorder) CreateIpGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpGroup", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateIpGroup), arg0)
}

// CreateIpGroupRequest mocks base method.
func (m *MockWorkSpacesAPI) CreateIpGroupRequest(arg0 *workspaces.CreateIpGroupInput) (*request.Request, *workspaces.CreateIpGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIpGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateIpGroupOutput)
	return ret0, ret1
}

// CreateIpGroupRequest indicates an expected call of CreateIpGroupRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CreateIpGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpGroupRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateIpGroupRequest), arg0)
}

// CreateIpGroupWithContext mocks base method.
func (m *MockWorkSpacesAPI) CreateIpGroupWithContext(arg0 context.Context, arg1 *workspaces.CreateIpGroupInput, arg2 ...request.Option) (*workspaces.CreateIpGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIpGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIpGroupWithContext indicates an expected call of CreateIpGroupWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CreateIpGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpGroupWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateIpGroupWithContext), varargs...)
}

// CreateTags mocks base method.
func (m *MockWorkSpacesAPI) CreateTags(arg0 *workspaces.CreateTagsInput) (*workspaces.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", arg0)
	ret0, _ := ret[0].(*workspaces.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockWorkSpacesAPIMockRecorder) CreateTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateTags), arg0)
}

// CreateTagsRequest mocks base method.
func (m *MockWorkSpacesAPI) CreateTagsRequest(arg0 *workspaces.CreateTagsInput) (*request.Request, *workspaces.CreateTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateTagsOutput)
	return ret0, ret1
}

// CreateTagsRequest indicates an expected call of CreateTagsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CreateTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateTagsRequest), arg0)
}

// CreateTagsWithContext mocks base method.
func (m *MockWorkSpacesAPI) CreateTagsWithContext(arg0 context.Context, arg1 *workspaces.CreateTagsInput, arg2 ...request.Option) (*workspaces.CreateTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTagsWithContext indicates an expected call of CreateTagsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CreateTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateTagsWithContext), varargs...)
}

// CreateUpdatedWorkspaceImage mocks base method.
func (m *MockWorkSpacesAPI) CreateUpdatedWorkspaceImage(arg0 *workspaces.CreateUpdatedWorkspaceImageInput) (*workspaces.CreateUpdatedWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdatedWorkspaceImage", arg0)
	ret0, _ := ret[0].(*workspaces.CreateUpdatedWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpdatedWorkspaceImage indicates an expected call of CreateUpdatedWorkspaceImage.
func (mr *MockWorkSpacesAPIMockRecorder) CreateUpdatedWorkspaceImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdatedWorkspaceImage", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateUpdatedWorkspaceImage), arg0)
}

// CreateUpdatedWorkspaceImageRequest mocks base method.
func (m *MockWorkSpacesAPI) CreateUpdatedWorkspaceImageRequest(arg0 *workspaces.CreateUpdatedWorkspaceImageInput) (*request.Request, *workspaces.CreateUpdatedWorkspaceImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdatedWorkspaceImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateUpdatedWorkspaceImageOutput)
	return ret0, ret1
}

// CreateUpdatedWorkspaceImageRequest indicates an expected call of CreateUpdatedWorkspaceImageRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CreateUpdatedWorkspaceImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdatedWorkspaceImageRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateUpdatedWorkspaceImageRequest), arg0)
}

// CreateUpdatedWorkspaceImageWithContext mocks base method.
func (m *MockWorkSpacesAPI) CreateUpdatedWorkspaceImageWithContext(arg0 context.Context, arg1 *workspaces.CreateUpdatedWorkspaceImageInput, arg2 ...request.Option) (*workspaces.CreateUpdatedWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUpdatedWorkspaceImageWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateUpdatedWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpdatedWorkspaceImageWithContext indicates an expected call of CreateUpdatedWorkspaceImageWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CreateUpdatedWorkspaceImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdatedWorkspaceImageWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateUpdatedWorkspaceImageWithContext), varargs...)
}

// CreateWorkspaceBundle mocks base method.
func (m *MockWorkSpacesAPI) CreateWorkspaceBundle(arg0 *workspaces.CreateWorkspaceBundleInput) (*workspaces.CreateWorkspaceBundleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceBundle", arg0)
	ret0, _ := ret[0].(*workspaces.CreateWorkspaceBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceBundle indicates an expected call of CreateWorkspaceBundle.
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspaceBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceBundle", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspaceBundle), arg0)
}

// CreateWorkspaceBundleRequest mocks base method.
func (m *MockWorkSpacesAPI) CreateWorkspaceBundleRequest(arg0 *workspaces.CreateWorkspaceBundleInput) (*request.Request, *workspaces.CreateWorkspaceBundleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceBundleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateWorkspaceBundleOutput)
	return ret0, ret1
}

// CreateWorkspaceBundleRequest indicates an expected call of CreateWorkspaceBundleRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspaceBundleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceBundleRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspaceBundleRequest), arg0)
}

// CreateWorkspaceBundleWithContext mocks base method.
func (m *MockWorkSpacesAPI) CreateWorkspaceBundleWithContext(arg0 context.Context, arg1 *workspaces.CreateWorkspaceBundleInput, arg2 ...request.Option) (*workspaces.CreateWorkspaceBundleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceBundleWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateWorkspaceBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceBundleWithContext indicates an expected call of CreateWorkspaceBundleWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspaceBundleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceBundleWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspaceBundleWithContext), varargs...)
}

// CreateWorkspaces mocks base method.
func (m *MockWorkSpacesAPI) CreateWorkspaces(arg0 *workspaces.CreateWorkspacesInput) (*workspaces.CreateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.CreateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaces indicates an expected call of CreateWorkspaces.
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspaces), arg0)
}

// CreateWorkspacesRequest mocks base method.
func (m *MockWorkSpacesAPI) CreateWorkspacesRequest(arg0 *workspaces.CreateWorkspacesInput) (*request.Request, *workspaces.CreateWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.CreateWorkspacesOutput)
	return ret0, ret1
}

// CreateWorkspacesRequest indicates an expected call of CreateWorkspacesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspacesRequest), arg0)
}

// CreateWorkspacesWithContext mocks base method.
func (m *MockWorkSpacesAPI) CreateWorkspacesWithContext(arg0 context.Context, arg1 *workspaces.CreateWorkspacesInput, arg2 ...request.Option) (*workspaces.CreateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.CreateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspacesWithContext indicates an expected call of CreateWorkspacesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) CreateWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).CreateWorkspacesWithContext), varargs...)
}

// DeleteConnectClientAddIn mocks base method.
func (m *MockWorkSpacesAPI) DeleteConnectClientAddIn(arg0 *workspaces.DeleteConnectClientAddInInput) (*workspaces.DeleteConnectClientAddInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectClientAddIn", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteConnectClientAddInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectClientAddIn indicates an expected call of DeleteConnectClientAddIn.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteConnectClientAddIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectClientAddIn", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteConnectClientAddIn), arg0)
}

// DeleteConnectClientAddInRequest mocks base method.
func (m *MockWorkSpacesAPI) DeleteConnectClientAddInRequest(arg0 *workspaces.DeleteConnectClientAddInInput) (*request.Request, *workspaces.DeleteConnectClientAddInOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectClientAddInRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteConnectClientAddInOutput)
	return ret0, ret1
}

// DeleteConnectClientAddInRequest indicates an expected call of DeleteConnectClientAddInRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteConnectClientAddInRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectClientAddInRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteConnectClientAddInRequest), arg0)
}

// DeleteConnectClientAddInWithContext mocks base method.
func (m *MockWorkSpacesAPI) DeleteConnectClientAddInWithContext(arg0 context.Context, arg1 *workspaces.DeleteConnectClientAddInInput, arg2 ...request.Option) (*workspaces.DeleteConnectClientAddInOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectClientAddInWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteConnectClientAddInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectClientAddInWithContext indicates an expected call of DeleteConnectClientAddInWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteConnectClientAddInWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectClientAddInWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteConnectClientAddInWithContext), varargs...)
}

// DeleteConnectionAlias mocks base method.
func (m *MockWorkSpacesAPI) DeleteConnectionAlias(arg0 *workspaces.DeleteConnectionAliasInput) (*workspaces.DeleteConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionAlias", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectionAlias indicates an expected call of DeleteConnectionAlias.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteConnectionAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionAlias", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteConnectionAlias), arg0)
}

// DeleteConnectionAliasRequest mocks base method.
func (m *MockWorkSpacesAPI) DeleteConnectionAliasRequest(arg0 *workspaces.DeleteConnectionAliasInput) (*request.Request, *workspaces.DeleteConnectionAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteConnectionAliasOutput)
	return ret0, ret1
}

// DeleteConnectionAliasRequest indicates an expected call of DeleteConnectionAliasRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteConnectionAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionAliasRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteConnectionAliasRequest), arg0)
}

// DeleteConnectionAliasWithContext mocks base method.
func (m *MockWorkSpacesAPI) DeleteConnectionAliasWithContext(arg0 context.Context, arg1 *workspaces.DeleteConnectionAliasInput, arg2 ...request.Option) (*workspaces.DeleteConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectionAliasWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectionAliasWithContext indicates an expected call of DeleteConnectionAliasWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteConnectionAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionAliasWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteConnectionAliasWithContext), varargs...)
}

// DeleteIpGroup mocks base method.
func (m *MockWorkSpacesAPI) DeleteIpGroup(arg0 *workspaces.DeleteIpGroupInput) (*workspaces.DeleteIpGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIpGroup", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIpGroup indicates an expected call of DeleteIpGroup.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteIpGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpGroup", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteIpGroup), arg0)
}

// DeleteIpGroupRequest mocks base method.
func (m *MockWorkSpacesAPI) DeleteIpGroupRequest(arg0 *workspaces.DeleteIpGroupInput) (*request.Request, *workspaces.DeleteIpGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIpGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteIpGroupOutput)
	return ret0, ret1
}

// DeleteIpGroupRequest indicates an expected call of DeleteIpGroupRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteIpGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpGroupRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteIpGroupRequest), arg0)
}

// DeleteIpGroupWithContext mocks base method.
func (m *MockWorkSpacesAPI) DeleteIpGroupWithContext(arg0 context.Context, arg1 *workspaces.DeleteIpGroupInput, arg2 ...request.Option) (*workspaces.DeleteIpGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIpGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIpGroupWithContext indicates an expected call of DeleteIpGroupWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteIpGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIpGroupWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteIpGroupWithContext), varargs...)
}

// DeleteTags mocks base method.
func (m *MockWorkSpacesAPI) DeleteTags(arg0 *workspaces.DeleteTagsInput) (*workspaces.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTags", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTags indicates an expected call of DeleteTags.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTags", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteTags), arg0)
}

// DeleteTagsRequest mocks base method.
func (m *MockWorkSpacesAPI) DeleteTagsRequest(arg0 *workspaces.DeleteTagsInput) (*request.Request, *workspaces.DeleteTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteTagsOutput)
	return ret0, ret1
}

// DeleteTagsRequest indicates an expected call of DeleteTagsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteTagsRequest), arg0)
}

// DeleteTagsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DeleteTagsWithContext(arg0 context.Context, arg1 *workspaces.DeleteTagsInput, arg2 ...request.Option) (*workspaces.DeleteTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTagsWithContext indicates an expected call of DeleteTagsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteTagsWithContext), varargs...)
}

// DeleteWorkspaceBundle mocks base method.
func (m *MockWorkSpacesAPI) DeleteWorkspaceBundle(arg0 *workspaces.DeleteWorkspaceBundleInput) (*workspaces.DeleteWorkspaceBundleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceBundle", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteWorkspaceBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceBundle indicates an expected call of DeleteWorkspaceBundle.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceBundle", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceBundle), arg0)
}

// DeleteWorkspaceBundleRequest mocks base method.
func (m *MockWorkSpacesAPI) DeleteWorkspaceBundleRequest(arg0 *workspaces.DeleteWorkspaceBundleInput) (*request.Request, *workspaces.DeleteWorkspaceBundleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceBundleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteWorkspaceBundleOutput)
	return ret0, ret1
}

// DeleteWorkspaceBundleRequest indicates an expected call of DeleteWorkspaceBundleRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceBundleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceBundleRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceBundleRequest), arg0)
}

// DeleteWorkspaceBundleWithContext mocks base method.
func (m *MockWorkSpacesAPI) DeleteWorkspaceBundleWithContext(arg0 context.Context, arg1 *workspaces.DeleteWorkspaceBundleInput, arg2 ...request.Option) (*workspaces.DeleteWorkspaceBundleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceBundleWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteWorkspaceBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceBundleWithContext indicates an expected call of DeleteWorkspaceBundleWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceBundleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceBundleWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceBundleWithContext), varargs...)
}

// DeleteWorkspaceImage mocks base method.
func (m *MockWorkSpacesAPI) DeleteWorkspaceImage(arg0 *workspaces.DeleteWorkspaceImageInput) (*workspaces.DeleteWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceImage", arg0)
	ret0, _ := ret[0].(*workspaces.DeleteWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceImage indicates an expected call of DeleteWorkspaceImage.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceImage", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceImage), arg0)
}

// DeleteWorkspaceImageRequest mocks base method.
func (m *MockWorkSpacesAPI) DeleteWorkspaceImageRequest(arg0 *workspaces.DeleteWorkspaceImageInput) (*request.Request, *workspaces.DeleteWorkspaceImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeleteWorkspaceImageOutput)
	return ret0, ret1
}

// DeleteWorkspaceImageRequest indicates an expected call of DeleteWorkspaceImageRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceImageRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceImageRequest), arg0)
}

// DeleteWorkspaceImageWithContext mocks base method.
func (m *MockWorkSpacesAPI) DeleteWorkspaceImageWithContext(arg0 context.Context, arg1 *workspaces.DeleteWorkspaceImageInput, arg2 ...request.Option) (*workspaces.DeleteWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceImageWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeleteWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceImageWithContext indicates an expected call of DeleteWorkspaceImageWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DeleteWorkspaceImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceImageWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeleteWorkspaceImageWithContext), varargs...)
}

// DeregisterWorkspaceDirectory mocks base method.
func (m *MockWorkSpacesAPI) DeregisterWorkspaceDirectory(arg0 *workspaces.DeregisterWorkspaceDirectoryInput) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterWorkspaceDirectory", arg0)
	ret0, _ := ret[0].(*workspaces.DeregisterWorkspaceDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterWorkspaceDirectory indicates an expected call of DeregisterWorkspaceDirectory.
func (mr *MockWorkSpacesAPIMockRecorder) DeregisterWorkspaceDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterWorkspaceDirectory", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeregisterWorkspaceDirectory), arg0)
}

// DeregisterWorkspaceDirectoryRequest mocks base method.
func (m *MockWorkSpacesAPI) DeregisterWorkspaceDirectoryRequest(arg0 *workspaces.DeregisterWorkspaceDirectoryInput) (*request.Request, *workspaces.DeregisterWorkspaceDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterWorkspaceDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DeregisterWorkspaceDirectoryOutput)
	return ret0, ret1
}

// DeregisterWorkspaceDirectoryRequest indicates an expected call of DeregisterWorkspaceDirectoryRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DeregisterWorkspaceDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterWorkspaceDirectoryRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeregisterWorkspaceDirectoryRequest), arg0)
}

// DeregisterWorkspaceDirectoryWithContext mocks base method.
func (m *MockWorkSpacesAPI) DeregisterWorkspaceDirectoryWithContext(arg0 context.Context, arg1 *workspaces.DeregisterWorkspaceDirectoryInput, arg2 ...request.Option) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterWorkspaceDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DeregisterWorkspaceDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterWorkspaceDirectoryWithContext indicates an expected call of DeregisterWorkspaceDirectoryWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DeregisterWorkspaceDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterWorkspaceDirectoryWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DeregisterWorkspaceDirectoryWithContext), varargs...)
}

// DescribeAccount mocks base method.
func (m *MockWorkSpacesAPI) DescribeAccount(arg0 *workspaces.DescribeAccountInput) (*workspaces.DescribeAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccount", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccount indicates an expected call of DescribeAccount.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccount", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccount), arg0)
}

// DescribeAccountModifications mocks base method.
func (m *MockWorkSpacesAPI) DescribeAccountModifications(arg0 *workspaces.DescribeAccountModificationsInput) (*workspaces.DescribeAccountModificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountModifications", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeAccountModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountModifications indicates an expected call of DescribeAccountModifications.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountModifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountModifications", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountModifications), arg0)
}

// DescribeAccountModificationsRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeAccountModificationsRequest(arg0 *workspaces.DescribeAccountModificationsInput) (*request.Request, *workspaces.DescribeAccountModificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountModificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeAccountModificationsOutput)
	return ret0, ret1
}

// DescribeAccountModificationsRequest indicates an expected call of DescribeAccountModificationsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountModificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountModificationsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountModificationsRequest), arg0)
}

// DescribeAccountModificationsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeAccountModificationsWithContext(arg0 context.Context, arg1 *workspaces.DescribeAccountModificationsInput, arg2 ...request.Option) (*workspaces.DescribeAccountModificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountModificationsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeAccountModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountModificationsWithContext indicates an expected call of DescribeAccountModificationsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountModificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountModificationsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountModificationsWithContext), varargs...)
}

// DescribeAccountRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeAccountRequest(arg0 *workspaces.DescribeAccountInput) (*request.Request, *workspaces.DescribeAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeAccountOutput)
	return ret0, ret1
}

// DescribeAccountRequest indicates an expected call of DescribeAccountRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountRequest), arg0)
}

// DescribeAccountWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeAccountWithContext(arg0 context.Context, arg1 *workspaces.DescribeAccountInput, arg2 ...request.Option) (*workspaces.DescribeAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountWithContext indicates an expected call of DescribeAccountWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeAccountWithContext), varargs...)
}

// DescribeClientProperties mocks base method.
func (m *MockWorkSpacesAPI) DescribeClientProperties(arg0 *workspaces.DescribeClientPropertiesInput) (*workspaces.DescribeClientPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClientProperties", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeClientPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClientProperties indicates an expected call of DescribeClientProperties.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeClientProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientProperties", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeClientProperties), arg0)
}

// DescribeClientPropertiesRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeClientPropertiesRequest(arg0 *workspaces.DescribeClientPropertiesInput) (*request.Request, *workspaces.DescribeClientPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClientPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeClientPropertiesOutput)
	return ret0, ret1
}

// DescribeClientPropertiesRequest indicates an expected call of DescribeClientPropertiesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeClientPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientPropertiesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeClientPropertiesRequest), arg0)
}

// DescribeClientPropertiesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeClientPropertiesWithContext(arg0 context.Context, arg1 *workspaces.DescribeClientPropertiesInput, arg2 ...request.Option) (*workspaces.DescribeClientPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClientPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeClientPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClientPropertiesWithContext indicates an expected call of DescribeClientPropertiesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeClientPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClientPropertiesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeClientPropertiesWithContext), varargs...)
}

// DescribeConnectClientAddIns mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectClientAddIns(arg0 *workspaces.DescribeConnectClientAddInsInput) (*workspaces.DescribeConnectClientAddInsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectClientAddIns", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeConnectClientAddInsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectClientAddIns indicates an expected call of DescribeConnectClientAddIns.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectClientAddIns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectClientAddIns", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectClientAddIns), arg0)
}

// DescribeConnectClientAddInsRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectClientAddInsRequest(arg0 *workspaces.DescribeConnectClientAddInsInput) (*request.Request, *workspaces.DescribeConnectClientAddInsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectClientAddInsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeConnectClientAddInsOutput)
	return ret0, ret1
}

// DescribeConnectClientAddInsRequest indicates an expected call of DescribeConnectClientAddInsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectClientAddInsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectClientAddInsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectClientAddInsRequest), arg0)
}

// DescribeConnectClientAddInsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectClientAddInsWithContext(arg0 context.Context, arg1 *workspaces.DescribeConnectClientAddInsInput, arg2 ...request.Option) (*workspaces.DescribeConnectClientAddInsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnectClientAddInsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeConnectClientAddInsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectClientAddInsWithContext indicates an expected call of DescribeConnectClientAddInsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectClientAddInsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectClientAddInsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectClientAddInsWithContext), varargs...)
}

// DescribeConnectionAliasPermissions mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectionAliasPermissions(arg0 *workspaces.DescribeConnectionAliasPermissionsInput) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectionAliasPermissions", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeConnectionAliasPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectionAliasPermissions indicates an expected call of DescribeConnectionAliasPermissions.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectionAliasPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionAliasPermissions", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectionAliasPermissions), arg0)
}

// DescribeConnectionAliasPermissionsRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectionAliasPermissionsRequest(arg0 *workspaces.DescribeConnectionAliasPermissionsInput) (*request.Request, *workspaces.DescribeConnectionAliasPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectionAliasPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeConnectionAliasPermissionsOutput)
	return ret0, ret1
}

// DescribeConnectionAliasPermissionsRequest indicates an expected call of DescribeConnectionAliasPermissionsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectionAliasPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionAliasPermissionsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectionAliasPermissionsRequest), arg0)
}

// DescribeConnectionAliasPermissionsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectionAliasPermissionsWithContext(arg0 context.Context, arg1 *workspaces.DescribeConnectionAliasPermissionsInput, arg2 ...request.Option) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnectionAliasPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeConnectionAliasPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectionAliasPermissionsWithContext indicates an expected call of DescribeConnectionAliasPermissionsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectionAliasPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionAliasPermissionsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectionAliasPermissionsWithContext), varargs...)
}

// DescribeConnectionAliases mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectionAliases(arg0 *workspaces.DescribeConnectionAliasesInput) (*workspaces.DescribeConnectionAliasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectionAliases", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeConnectionAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectionAliases indicates an expected call of DescribeConnectionAliases.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectionAliases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionAliases", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectionAliases), arg0)
}

// DescribeConnectionAliasesRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectionAliasesRequest(arg0 *workspaces.DescribeConnectionAliasesInput) (*request.Request, *workspaces.DescribeConnectionAliasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConnectionAliasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeConnectionAliasesOutput)
	return ret0, ret1
}

// DescribeConnectionAliasesRequest indicates an expected call of DescribeConnectionAliasesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectionAliasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionAliasesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectionAliasesRequest), arg0)
}

// DescribeConnectionAliasesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeConnectionAliasesWithContext(arg0 context.Context, arg1 *workspaces.DescribeConnectionAliasesInput, arg2 ...request.Option) (*workspaces.DescribeConnectionAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConnectionAliasesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeConnectionAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConnectionAliasesWithContext indicates an expected call of DescribeConnectionAliasesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeConnectionAliasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConnectionAliasesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeConnectionAliasesWithContext), varargs...)
}

// DescribeIpGroups mocks base method.
func (m *MockWorkSpacesAPI) DescribeIpGroups(arg0 *workspaces.DescribeIpGroupsInput) (*workspaces.DescribeIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIpGroups", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpGroups indicates an expected call of DescribeIpGroups.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeIpGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpGroups", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeIpGroups), arg0)
}

// DescribeIpGroupsRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeIpGroupsRequest(arg0 *workspaces.DescribeIpGroupsInput) (*request.Request, *workspaces.DescribeIpGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeIpGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeIpGroupsOutput)
	return ret0, ret1
}

// DescribeIpGroupsRequest indicates an expected call of DescribeIpGroupsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeIpGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpGroupsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeIpGroupsRequest), arg0)
}

// DescribeIpGroupsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeIpGroupsWithContext(arg0 context.Context, arg1 *workspaces.DescribeIpGroupsInput, arg2 ...request.Option) (*workspaces.DescribeIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeIpGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeIpGroupsWithContext indicates an expected call of DescribeIpGroupsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeIpGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeIpGroupsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeIpGroupsWithContext), varargs...)
}

// DescribeTags mocks base method.
func (m *MockWorkSpacesAPI) DescribeTags(arg0 *workspaces.DescribeTagsInput) (*workspaces.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTags", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTags indicates an expected call of DescribeTags.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTags", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeTags), arg0)
}

// DescribeTagsRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeTagsRequest(arg0 *workspaces.DescribeTagsInput) (*request.Request, *workspaces.DescribeTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeTagsOutput)
	return ret0, ret1
}

// DescribeTagsRequest indicates an expected call of DescribeTagsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeTagsRequest), arg0)
}

// DescribeTagsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeTagsWithContext(arg0 context.Context, arg1 *workspaces.DescribeTagsInput, arg2 ...request.Option) (*workspaces.DescribeTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTagsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTagsWithContext indicates an expected call of DescribeTagsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTagsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeTagsWithContext), varargs...)
}

// DescribeWorkspaceBundles mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundles(arg0 *workspaces.DescribeWorkspaceBundlesInput) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundles", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceBundles indicates an expected call of DescribeWorkspaceBundles.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundles", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundles), arg0)
}

// DescribeWorkspaceBundlesPages mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesPages(arg0 *workspaces.DescribeWorkspaceBundlesInput, arg1 func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceBundlesPages indicates an expected call of DescribeWorkspaceBundlesPages.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesPages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesPages), arg0, arg1)
}

// DescribeWorkspaceBundlesPagesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesPagesWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspaceBundlesInput, arg2 func(*workspaces.DescribeWorkspaceBundlesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceBundlesPagesWithContext indicates an expected call of DescribeWorkspaceBundlesPagesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesPagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesPagesWithContext), varargs...)
}

// DescribeWorkspaceBundlesRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesRequest(arg0 *workspaces.DescribeWorkspaceBundlesInput) (*request.Request, *workspaces.DescribeWorkspaceBundlesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceBundlesOutput)
	return ret0, ret1
}

// DescribeWorkspaceBundlesRequest indicates an expected call of DescribeWorkspaceBundlesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesRequest), arg0)
}

// DescribeWorkspaceBundlesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceBundlesWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspaceBundlesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceBundlesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceBundlesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceBundlesWithContext indicates an expected call of DescribeWorkspaceBundlesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceBundlesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceBundlesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceBundlesWithContext), varargs...)
}

// DescribeWorkspaceDirectories mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectories(arg0 *workspaces.DescribeWorkspaceDirectoriesInput) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectories", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceDirectories indicates an expected call of DescribeWorkspaceDirectories.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectories", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectories), arg0)
}

// DescribeWorkspaceDirectoriesPages mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesPages(arg0 *workspaces.DescribeWorkspaceDirectoriesInput, arg1 func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceDirectoriesPages indicates an expected call of DescribeWorkspaceDirectoriesPages.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesPages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesPages), arg0, arg1)
}

// DescribeWorkspaceDirectoriesPagesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesPagesWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspaceDirectoriesInput, arg2 func(*workspaces.DescribeWorkspaceDirectoriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspaceDirectoriesPagesWithContext indicates an expected call of DescribeWorkspaceDirectoriesPagesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesPagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesPagesWithContext), varargs...)
}

// DescribeWorkspaceDirectoriesRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesRequest(arg0 *workspaces.DescribeWorkspaceDirectoriesInput) (*request.Request, *workspaces.DescribeWorkspaceDirectoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	return ret0, ret1
}

// DescribeWorkspaceDirectoriesRequest indicates an expected call of DescribeWorkspaceDirectoriesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesRequest), arg0)
}

// DescribeWorkspaceDirectoriesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceDirectoriesWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspaceDirectoriesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceDirectoriesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceDirectoriesWithContext indicates an expected call of DescribeWorkspaceDirectoriesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceDirectoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceDirectoriesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceDirectoriesWithContext), varargs...)
}

// DescribeWorkspaceImagePermissions mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceImagePermissions(arg0 *workspaces.DescribeWorkspaceImagePermissionsInput) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceImagePermissions", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceImagePermissions indicates an expected call of DescribeWorkspaceImagePermissions.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImagePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImagePermissions", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImagePermissions), arg0)
}

// DescribeWorkspaceImagePermissionsRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceImagePermissionsRequest(arg0 *workspaces.DescribeWorkspaceImagePermissionsInput) (*request.Request, *workspaces.DescribeWorkspaceImagePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceImagePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceImagePermissionsOutput)
	return ret0, ret1
}

// DescribeWorkspaceImagePermissionsRequest indicates an expected call of DescribeWorkspaceImagePermissionsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImagePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImagePermissionsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImagePermissionsRequest), arg0)
}

// DescribeWorkspaceImagePermissionsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceImagePermissionsWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspaceImagePermissionsInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceImagePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceImagePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceImagePermissionsWithContext indicates an expected call of DescribeWorkspaceImagePermissionsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImagePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImagePermissionsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImagePermissionsWithContext), varargs...)
}

// DescribeWorkspaceImages mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceImages(arg0 *workspaces.DescribeWorkspaceImagesInput) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceImages", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceImages indicates an expected call of DescribeWorkspaceImages.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImages), arg0)
}

// DescribeWorkspaceImagesRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceImagesRequest(arg0 *workspaces.DescribeWorkspaceImagesInput) (*request.Request, *workspaces.DescribeWorkspaceImagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceImagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceImagesOutput)
	return ret0, ret1
}

// DescribeWorkspaceImagesRequest indicates an expected call of DescribeWorkspaceImagesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImagesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImagesRequest), arg0)
}

// DescribeWorkspaceImagesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceImagesWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspaceImagesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceImagesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceImagesWithContext indicates an expected call of DescribeWorkspaceImagesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceImagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceImagesWithContext), varargs...)
}

// DescribeWorkspaceSnapshots mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceSnapshots(arg0 *workspaces.DescribeWorkspaceSnapshotsInput) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceSnapshots", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceSnapshots indicates an expected call of DescribeWorkspaceSnapshots.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceSnapshots", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceSnapshots), arg0)
}

// DescribeWorkspaceSnapshotsRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceSnapshotsRequest(arg0 *workspaces.DescribeWorkspaceSnapshotsInput) (*request.Request, *workspaces.DescribeWorkspaceSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspaceSnapshotsOutput)
	return ret0, ret1
}

// DescribeWorkspaceSnapshotsRequest indicates an expected call of DescribeWorkspaceSnapshotsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceSnapshotsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceSnapshotsRequest), arg0)
}

// DescribeWorkspaceSnapshotsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaceSnapshotsWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspaceSnapshotsInput, arg2 ...request.Option) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspaceSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceSnapshotsWithContext indicates an expected call of DescribeWorkspaceSnapshotsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaceSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceSnapshotsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaceSnapshotsWithContext), varargs...)
}

// DescribeWorkspaces mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspaces(arg0 *workspaces.DescribeWorkspacesInput) (*workspaces.DescribeWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaces indicates an expected call of DescribeWorkspaces.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspaces), arg0)
}

// DescribeWorkspacesConnectionStatus mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspacesConnectionStatus(arg0 *workspaces.DescribeWorkspacesConnectionStatusInput) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesConnectionStatus", arg0)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspacesConnectionStatus indicates an expected call of DescribeWorkspacesConnectionStatus.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesConnectionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesConnectionStatus", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesConnectionStatus), arg0)
}

// DescribeWorkspacesConnectionStatusRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspacesConnectionStatusRequest(arg0 *workspaces.DescribeWorkspacesConnectionStatusInput) (*request.Request, *workspaces.DescribeWorkspacesConnectionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesConnectionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	return ret0, ret1
}

// DescribeWorkspacesConnectionStatusRequest indicates an expected call of DescribeWorkspacesConnectionStatusRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesConnectionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesConnectionStatusRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesConnectionStatusRequest), arg0)
}

// DescribeWorkspacesConnectionStatusWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspacesConnectionStatusWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspacesConnectionStatusInput, arg2 ...request.Option) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspacesConnectionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesConnectionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspacesConnectionStatusWithContext indicates an expected call of DescribeWorkspacesConnectionStatusWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesConnectionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesConnectionStatusWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesConnectionStatusWithContext), varargs...)
}

// DescribeWorkspacesPages mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspacesPages(arg0 *workspaces.DescribeWorkspacesInput, arg1 func(*workspaces.DescribeWorkspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspacesPages indicates an expected call of DescribeWorkspacesPages.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesPages", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesPages), arg0, arg1)
}

// DescribeWorkspacesPagesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspacesPagesWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspacesInput, arg2 func(*workspaces.DescribeWorkspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeWorkspacesPagesWithContext indicates an expected call of DescribeWorkspacesPagesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesPagesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesPagesWithContext), varargs...)
}

// DescribeWorkspacesRequest mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspacesRequest(arg0 *workspaces.DescribeWorkspacesInput) (*request.Request, *workspaces.DescribeWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DescribeWorkspacesOutput)
	return ret0, ret1
}

// DescribeWorkspacesRequest indicates an expected call of DescribeWorkspacesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesRequest), arg0)
}

// DescribeWorkspacesWithContext mocks base method.
func (m *MockWorkSpacesAPI) DescribeWorkspacesWithContext(arg0 context.Context, arg1 *workspaces.DescribeWorkspacesInput, arg2 ...request.Option) (*workspaces.DescribeWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DescribeWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspacesWithContext indicates an expected call of DescribeWorkspacesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DescribeWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DescribeWorkspacesWithContext), varargs...)
}

// DisassociateConnectionAlias mocks base method.
func (m *MockWorkSpacesAPI) DisassociateConnectionAlias(arg0 *workspaces.DisassociateConnectionAliasInput) (*workspaces.DisassociateConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateConnectionAlias", arg0)
	ret0, _ := ret[0].(*workspaces.DisassociateConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateConnectionAlias indicates an expected call of DisassociateConnectionAlias.
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateConnectionAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectionAlias", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateConnectionAlias), arg0)
}

// DisassociateConnectionAliasRequest mocks base method.
func (m *MockWorkSpacesAPI) DisassociateConnectionAliasRequest(arg0 *workspaces.DisassociateConnectionAliasInput) (*request.Request, *workspaces.DisassociateConnectionAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateConnectionAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DisassociateConnectionAliasOutput)
	return ret0, ret1
}

// DisassociateConnectionAliasRequest indicates an expected call of DisassociateConnectionAliasRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateConnectionAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectionAliasRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateConnectionAliasRequest), arg0)
}

// DisassociateConnectionAliasWithContext mocks base method.
func (m *MockWorkSpacesAPI) DisassociateConnectionAliasWithContext(arg0 context.Context, arg1 *workspaces.DisassociateConnectionAliasInput, arg2 ...request.Option) (*workspaces.DisassociateConnectionAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateConnectionAliasWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DisassociateConnectionAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateConnectionAliasWithContext indicates an expected call of DisassociateConnectionAliasWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateConnectionAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateConnectionAliasWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateConnectionAliasWithContext), varargs...)
}

// DisassociateIpGroups mocks base method.
func (m *MockWorkSpacesAPI) DisassociateIpGroups(arg0 *workspaces.DisassociateIpGroupsInput) (*workspaces.DisassociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateIpGroups", arg0)
	ret0, _ := ret[0].(*workspaces.DisassociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateIpGroups indicates an expected call of DisassociateIpGroups.
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateIpGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateIpGroups", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateIpGroups), arg0)
}

// DisassociateIpGroupsRequest mocks base method.
func (m *MockWorkSpacesAPI) DisassociateIpGroupsRequest(arg0 *workspaces.DisassociateIpGroupsInput) (*request.Request, *workspaces.DisassociateIpGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateIpGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.DisassociateIpGroupsOutput)
	return ret0, ret1
}

// DisassociateIpGroupsRequest indicates an expected call of DisassociateIpGroupsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateIpGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateIpGroupsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateIpGroupsRequest), arg0)
}

// DisassociateIpGroupsWithContext mocks base method.
func (m *MockWorkSpacesAPI) DisassociateIpGroupsWithContext(arg0 context.Context, arg1 *workspaces.DisassociateIpGroupsInput, arg2 ...request.Option) (*workspaces.DisassociateIpGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateIpGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.DisassociateIpGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateIpGroupsWithContext indicates an expected call of DisassociateIpGroupsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) DisassociateIpGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateIpGroupsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).DisassociateIpGroupsWithContext), varargs...)
}

// ImportWorkspaceImage mocks base method.
func (m *MockWorkSpacesAPI) ImportWorkspaceImage(arg0 *workspaces.ImportWorkspaceImageInput) (*workspaces.ImportWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportWorkspaceImage", arg0)
	ret0, _ := ret[0].(*workspaces.ImportWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportWorkspaceImage indicates an expected call of ImportWorkspaceImage.
func (mr *MockWorkSpacesAPIMockRecorder) ImportWorkspaceImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWorkspaceImage", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ImportWorkspaceImage), arg0)
}

// ImportWorkspaceImageRequest mocks base method.
func (m *MockWorkSpacesAPI) ImportWorkspaceImageRequest(arg0 *workspaces.ImportWorkspaceImageInput) (*request.Request, *workspaces.ImportWorkspaceImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportWorkspaceImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ImportWorkspaceImageOutput)
	return ret0, ret1
}

// ImportWorkspaceImageRequest indicates an expected call of ImportWorkspaceImageRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ImportWorkspaceImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWorkspaceImageRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ImportWorkspaceImageRequest), arg0)
}

// ImportWorkspaceImageWithContext mocks base method.
func (m *MockWorkSpacesAPI) ImportWorkspaceImageWithContext(arg0 context.Context, arg1 *workspaces.ImportWorkspaceImageInput, arg2 ...request.Option) (*workspaces.ImportWorkspaceImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportWorkspaceImageWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ImportWorkspaceImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportWorkspaceImageWithContext indicates an expected call of ImportWorkspaceImageWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ImportWorkspaceImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportWorkspaceImageWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ImportWorkspaceImageWithContext), varargs...)
}

// ListAvailableManagementCidrRanges mocks base method.
func (m *MockWorkSpacesAPI) ListAvailableManagementCidrRanges(arg0 *workspaces.ListAvailableManagementCidrRangesInput) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableManagementCidrRanges", arg0)
	ret0, _ := ret[0].(*workspaces.ListAvailableManagementCidrRangesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableManagementCidrRanges indicates an expected call of ListAvailableManagementCidrRanges.
func (mr *MockWorkSpacesAPIMockRecorder) ListAvailableManagementCidrRanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagementCidrRanges", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ListAvailableManagementCidrRanges), arg0)
}

// ListAvailableManagementCidrRangesRequest mocks base method.
func (m *MockWorkSpacesAPI) ListAvailableManagementCidrRangesRequest(arg0 *workspaces.ListAvailableManagementCidrRangesInput) (*request.Request, *workspaces.ListAvailableManagementCidrRangesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableManagementCidrRangesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ListAvailableManagementCidrRangesOutput)
	return ret0, ret1
}

// ListAvailableManagementCidrRangesRequest indicates an expected call of ListAvailableManagementCidrRangesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ListAvailableManagementCidrRangesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagementCidrRangesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ListAvailableManagementCidrRangesRequest), arg0)
}

// ListAvailableManagementCidrRangesWithContext mocks base method.
func (m *MockWorkSpacesAPI) ListAvailableManagementCidrRangesWithContext(arg0 context.Context, arg1 *workspaces.ListAvailableManagementCidrRangesInput, arg2 ...request.Option) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableManagementCidrRangesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ListAvailableManagementCidrRangesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableManagementCidrRangesWithContext indicates an expected call of ListAvailableManagementCidrRangesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ListAvailableManagementCidrRangesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagementCidrRangesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ListAvailableManagementCidrRangesWithContext), varargs...)
}

// MigrateWorkspace mocks base method.
func (m *MockWorkSpacesAPI) MigrateWorkspace(arg0 *workspaces.MigrateWorkspaceInput) (*workspaces.MigrateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateWorkspace", arg0)
	ret0, _ := ret[0].(*workspaces.MigrateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateWorkspace indicates an expected call of MigrateWorkspace.
func (mr *MockWorkSpacesAPIMockRecorder) MigrateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateWorkspace", reflect.TypeOf((*MockWorkSpacesAPI)(nil).MigrateWorkspace), arg0)
}

// MigrateWorkspaceRequest mocks base method.
func (m *MockWorkSpacesAPI) MigrateWorkspaceRequest(arg0 *workspaces.MigrateWorkspaceInput) (*request.Request, *workspaces.MigrateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.MigrateWorkspaceOutput)
	return ret0, ret1
}

// MigrateWorkspaceRequest indicates an expected call of MigrateWorkspaceRequest.
func (mr *MockWorkSpacesAPIMockRecorder) MigrateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateWorkspaceRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).MigrateWorkspaceRequest), arg0)
}

// MigrateWorkspaceWithContext mocks base method.
func (m *MockWorkSpacesAPI) MigrateWorkspaceWithContext(arg0 context.Context, arg1 *workspaces.MigrateWorkspaceInput, arg2 ...request.Option) (*workspaces.MigrateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.MigrateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateWorkspaceWithContext indicates an expected call of MigrateWorkspaceWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) MigrateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateWorkspaceWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).MigrateWorkspaceWithContext), varargs...)
}

// ModifyAccount mocks base method.
func (m *MockWorkSpacesAPI) ModifyAccount(arg0 *workspaces.ModifyAccountInput) (*workspaces.ModifyAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAccount", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyAccount indicates an expected call of ModifyAccount.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccount", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyAccount), arg0)
}

// ModifyAccountRequest mocks base method.
func (m *MockWorkSpacesAPI) ModifyAccountRequest(arg0 *workspaces.ModifyAccountInput) (*request.Request, *workspaces.ModifyAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyAccountOutput)
	return ret0, ret1
}

// ModifyAccountRequest indicates an expected call of ModifyAccountRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccountRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyAccountRequest), arg0)
}

// ModifyAccountWithContext mocks base method.
func (m *MockWorkSpacesAPI) ModifyAccountWithContext(arg0 context.Context, arg1 *workspaces.ModifyAccountInput, arg2 ...request.Option) (*workspaces.ModifyAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyAccountWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyAccountWithContext indicates an expected call of ModifyAccountWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAccountWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyAccountWithContext), varargs...)
}

// ModifyClientProperties mocks base method.
func (m *MockWorkSpacesAPI) ModifyClientProperties(arg0 *workspaces.ModifyClientPropertiesInput) (*workspaces.ModifyClientPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyClientProperties", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyClientPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyClientProperties indicates an expected call of ModifyClientProperties.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyClientProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClientProperties", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyClientProperties), arg0)
}

// ModifyClientPropertiesRequest mocks base method.
func (m *MockWorkSpacesAPI) ModifyClientPropertiesRequest(arg0 *workspaces.ModifyClientPropertiesInput) (*request.Request, *workspaces.ModifyClientPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyClientPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyClientPropertiesOutput)
	return ret0, ret1
}

// ModifyClientPropertiesRequest indicates an expected call of ModifyClientPropertiesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyClientPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClientPropertiesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyClientPropertiesRequest), arg0)
}

// ModifyClientPropertiesWithContext mocks base method.
func (m *MockWorkSpacesAPI) ModifyClientPropertiesWithContext(arg0 context.Context, arg1 *workspaces.ModifyClientPropertiesInput, arg2 ...request.Option) (*workspaces.ModifyClientPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyClientPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyClientPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyClientPropertiesWithContext indicates an expected call of ModifyClientPropertiesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyClientPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClientPropertiesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyClientPropertiesWithContext), varargs...)
}

// ModifySelfservicePermissions mocks base method.
func (m *MockWorkSpacesAPI) ModifySelfservicePermissions(arg0 *workspaces.ModifySelfservicePermissionsInput) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifySelfservicePermissions", arg0)
	ret0, _ := ret[0].(*workspaces.ModifySelfservicePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifySelfservicePermissions indicates an expected call of ModifySelfservicePermissions.
func (mr *MockWorkSpacesAPIMockRecorder) ModifySelfservicePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySelfservicePermissions", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifySelfservicePermissions), arg0)
}

// ModifySelfservicePermissionsRequest mocks base method.
func (m *MockWorkSpacesAPI) ModifySelfservicePermissionsRequest(arg0 *workspaces.ModifySelfservicePermissionsInput) (*request.Request, *workspaces.ModifySelfservicePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifySelfservicePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifySelfservicePermissionsOutput)
	return ret0, ret1
}

// ModifySelfservicePermissionsRequest indicates an expected call of ModifySelfservicePermissionsRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ModifySelfservicePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySelfservicePermissionsRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifySelfservicePermissionsRequest), arg0)
}

// ModifySelfservicePermissionsWithContext mocks base method.
func (m *MockWorkSpacesAPI) ModifySelfservicePermissionsWithContext(arg0 context.Context, arg1 *workspaces.ModifySelfservicePermissionsInput, arg2 ...request.Option) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifySelfservicePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifySelfservicePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifySelfservicePermissionsWithContext indicates an expected call of ModifySelfservicePermissionsWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ModifySelfservicePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySelfservicePermissionsWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifySelfservicePermissionsWithContext), varargs...)
}

// ModifyWorkspaceAccessProperties mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceAccessProperties(arg0 *workspaces.ModifyWorkspaceAccessPropertiesInput) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceAccessProperties", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceAccessPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceAccessProperties indicates an expected call of ModifyWorkspaceAccessProperties.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceAccessProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceAccessProperties", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceAccessProperties), arg0)
}

// ModifyWorkspaceAccessPropertiesRequest mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceAccessPropertiesRequest(arg0 *workspaces.ModifyWorkspaceAccessPropertiesInput) (*request.Request, *workspaces.ModifyWorkspaceAccessPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceAccessPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyWorkspaceAccessPropertiesOutput)
	return ret0, ret1
}

// ModifyWorkspaceAccessPropertiesRequest indicates an expected call of ModifyWorkspaceAccessPropertiesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceAccessPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceAccessPropertiesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceAccessPropertiesRequest), arg0)
}

// ModifyWorkspaceAccessPropertiesWithContext mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceAccessPropertiesWithContext(arg0 context.Context, arg1 *workspaces.ModifyWorkspaceAccessPropertiesInput, arg2 ...request.Option) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyWorkspaceAccessPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceAccessPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceAccessPropertiesWithContext indicates an expected call of ModifyWorkspaceAccessPropertiesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceAccessPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceAccessPropertiesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceAccessPropertiesWithContext), varargs...)
}

// ModifyWorkspaceCreationProperties mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceCreationProperties(arg0 *workspaces.ModifyWorkspaceCreationPropertiesInput) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceCreationProperties", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceCreationPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceCreationProperties indicates an expected call of ModifyWorkspaceCreationProperties.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceCreationProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceCreationProperties", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceCreationProperties), arg0)
}

// ModifyWorkspaceCreationPropertiesRequest mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceCreationPropertiesRequest(arg0 *workspaces.ModifyWorkspaceCreationPropertiesInput) (*request.Request, *workspaces.ModifyWorkspaceCreationPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceCreationPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyWorkspaceCreationPropertiesOutput)
	return ret0, ret1
}

// ModifyWorkspaceCreationPropertiesRequest indicates an expected call of ModifyWorkspaceCreationPropertiesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceCreationPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceCreationPropertiesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceCreationPropertiesRequest), arg0)
}

// ModifyWorkspaceCreationPropertiesWithContext mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceCreationPropertiesWithContext(arg0 context.Context, arg1 *workspaces.ModifyWorkspaceCreationPropertiesInput, arg2 ...request.Option) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyWorkspaceCreationPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceCreationPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceCreationPropertiesWithContext indicates an expected call of ModifyWorkspaceCreationPropertiesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceCreationPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceCreationPropertiesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceCreationPropertiesWithContext), varargs...)
}

// ModifyWorkspaceProperties mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceProperties(arg0 *workspaces.ModifyWorkspacePropertiesInput) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceProperties", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspacePropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceProperties indicates an expected call of ModifyWorkspaceProperties.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceProperties", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceProperties), arg0)
}

// ModifyWorkspacePropertiesRequest mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspacePropertiesRequest(arg0 *workspaces.ModifyWorkspacePropertiesInput) (*request.Request, *workspaces.ModifyWorkspacePropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspacePropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyWorkspacePropertiesOutput)
	return ret0, ret1
}

// ModifyWorkspacePropertiesRequest indicates an expected call of ModifyWorkspacePropertiesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspacePropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspacePropertiesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspacePropertiesRequest), arg0)
}

// ModifyWorkspacePropertiesWithContext mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspacePropertiesWithContext(arg0 context.Context, arg1 *workspaces.ModifyWorkspacePropertiesInput, arg2 ...request.Option) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyWorkspacePropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspacePropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspacePropertiesWithContext indicates an expected call of ModifyWorkspacePropertiesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspacePropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspacePropertiesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspacePropertiesWithContext), varargs...)
}

// ModifyWorkspaceState mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceState(arg0 *workspaces.ModifyWorkspaceStateInput) (*workspaces.ModifyWorkspaceStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceState", arg0)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceState indicates an expected call of ModifyWorkspaceState.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceState", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceState), arg0)
}

// ModifyWorkspaceStateRequest mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceStateRequest(arg0 *workspaces.ModifyWorkspaceStateInput) (*request.Request, *workspaces.ModifyWorkspaceStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyWorkspaceStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.ModifyWorkspaceStateOutput)
	return ret0, ret1
}

// ModifyWorkspaceStateRequest indicates an expected call of ModifyWorkspaceStateRequest.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceStateRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceStateRequest), arg0)
}

// ModifyWorkspaceStateWithContext mocks base method.
func (m *MockWorkSpacesAPI) ModifyWorkspaceStateWithContext(arg0 context.Context, arg1 *workspaces.ModifyWorkspaceStateInput, arg2 ...request.Option) (*workspaces.ModifyWorkspaceStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyWorkspaceStateWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.ModifyWorkspaceStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyWorkspaceStateWithContext indicates an expected call of ModifyWorkspaceStateWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) ModifyWorkspaceStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyWorkspaceStateWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).ModifyWorkspaceStateWithContext), varargs...)
}

// RebootWorkspaces mocks base method.
func (m *MockWorkSpacesAPI) RebootWorkspaces(arg0 *workspaces.RebootWorkspacesInput) (*workspaces.RebootWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.RebootWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootWorkspaces indicates an expected call of RebootWorkspaces.
func (mr *MockWorkSpacesAPIMockRecorder) RebootWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebootWorkspaces), arg0)
}

// RebootWorkspacesRequest mocks base method.
func (m *MockWorkSpacesAPI) RebootWorkspacesRequest(arg0 *workspaces.RebootWorkspacesInput) (*request.Request, *workspaces.RebootWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RebootWorkspacesOutput)
	return ret0, ret1
}

// RebootWorkspacesRequest indicates an expected call of RebootWorkspacesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) RebootWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebootWorkspacesRequest), arg0)
}

// RebootWorkspacesWithContext mocks base method.
func (m *MockWorkSpacesAPI) RebootWorkspacesWithContext(arg0 context.Context, arg1 *workspaces.RebootWorkspacesInput, arg2 ...request.Option) (*workspaces.RebootWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RebootWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootWorkspacesWithContext indicates an expected call of RebootWorkspacesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) RebootWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebootWorkspacesWithContext), varargs...)
}

// RebuildWorkspaces mocks base method.
func (m *MockWorkSpacesAPI) RebuildWorkspaces(arg0 *workspaces.RebuildWorkspacesInput) (*workspaces.RebuildWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.RebuildWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildWorkspaces indicates an expected call of RebuildWorkspaces.
func (mr *MockWorkSpacesAPIMockRecorder) RebuildWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebuildWorkspaces), arg0)
}

// RebuildWorkspacesRequest mocks base method.
func (m *MockWorkSpacesAPI) RebuildWorkspacesRequest(arg0 *workspaces.RebuildWorkspacesInput) (*request.Request, *workspaces.RebuildWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RebuildWorkspacesOutput)
	return ret0, ret1
}

// RebuildWorkspacesRequest indicates an expected call of RebuildWorkspacesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) RebuildWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebuildWorkspacesRequest), arg0)
}

// RebuildWorkspacesWithContext mocks base method.
func (m *MockWorkSpacesAPI) RebuildWorkspacesWithContext(arg0 context.Context, arg1 *workspaces.RebuildWorkspacesInput, arg2 ...request.Option) (*workspaces.RebuildWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebuildWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RebuildWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildWorkspacesWithContext indicates an expected call of RebuildWorkspacesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) RebuildWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RebuildWorkspacesWithContext), varargs...)
}

// RegisterWorkspaceDirectory mocks base method.
func (m *MockWorkSpacesAPI) RegisterWorkspaceDirectory(arg0 *workspaces.RegisterWorkspaceDirectoryInput) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWorkspaceDirectory", arg0)
	ret0, _ := ret[0].(*workspaces.RegisterWorkspaceDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterWorkspaceDirectory indicates an expected call of RegisterWorkspaceDirectory.
func (mr *MockWorkSpacesAPIMockRecorder) RegisterWorkspaceDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWorkspaceDirectory", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RegisterWorkspaceDirectory), arg0)
}

// RegisterWorkspaceDirectoryRequest mocks base method.
func (m *MockWorkSpacesAPI) RegisterWorkspaceDirectoryRequest(arg0 *workspaces.RegisterWorkspaceDirectoryInput) (*request.Request, *workspaces.RegisterWorkspaceDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWorkspaceDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RegisterWorkspaceDirectoryOutput)
	return ret0, ret1
}

// RegisterWorkspaceDirectoryRequest indicates an expected call of RegisterWorkspaceDirectoryRequest.
func (mr *MockWorkSpacesAPIMockRecorder) RegisterWorkspaceDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWorkspaceDirectoryRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RegisterWorkspaceDirectoryRequest), arg0)
}

// RegisterWorkspaceDirectoryWithContext mocks base method.
func (m *MockWorkSpacesAPI) RegisterWorkspaceDirectoryWithContext(arg0 context.Context, arg1 *workspaces.RegisterWorkspaceDirectoryInput, arg2 ...request.Option) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterWorkspaceDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RegisterWorkspaceDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterWorkspaceDirectoryWithContext indicates an expected call of RegisterWorkspaceDirectoryWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) RegisterWorkspaceDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWorkspaceDirectoryWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RegisterWorkspaceDirectoryWithContext), varargs...)
}

// RestoreWorkspace mocks base method.
func (m *MockWorkSpacesAPI) RestoreWorkspace(arg0 *workspaces.RestoreWorkspaceInput) (*workspaces.RestoreWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWorkspace", arg0)
	ret0, _ := ret[0].(*workspaces.RestoreWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWorkspace indicates an expected call of RestoreWorkspace.
func (mr *MockWorkSpacesAPIMockRecorder) RestoreWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWorkspace", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RestoreWorkspace), arg0)
}

// RestoreWorkspaceRequest mocks base method.
func (m *MockWorkSpacesAPI) RestoreWorkspaceRequest(arg0 *workspaces.RestoreWorkspaceInput) (*request.Request, *workspaces.RestoreWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RestoreWorkspaceOutput)
	return ret0, ret1
}

// RestoreWorkspaceRequest indicates an expected call of RestoreWorkspaceRequest.
func (mr *MockWorkSpacesAPIMockRecorder) RestoreWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWorkspaceRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RestoreWorkspaceRequest), arg0)
}

// RestoreWorkspaceWithContext mocks base method.
func (m *MockWorkSpacesAPI) RestoreWorkspaceWithContext(arg0 context.Context, arg1 *workspaces.RestoreWorkspaceInput, arg2 ...request.Option) (*workspaces.RestoreWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RestoreWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWorkspaceWithContext indicates an expected call of RestoreWorkspaceWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) RestoreWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWorkspaceWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RestoreWorkspaceWithContext), varargs...)
}

// RevokeIpRules mocks base method.
func (m *MockWorkSpacesAPI) RevokeIpRules(arg0 *workspaces.RevokeIpRulesInput) (*workspaces.RevokeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeIpRules", arg0)
	ret0, _ := ret[0].(*workspaces.RevokeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeIpRules indicates an expected call of RevokeIpRules.
func (mr *MockWorkSpacesAPIMockRecorder) RevokeIpRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIpRules", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RevokeIpRules), arg0)
}

// RevokeIpRulesRequest mocks base method.
func (m *MockWorkSpacesAPI) RevokeIpRulesRequest(arg0 *workspaces.RevokeIpRulesInput) (*request.Request, *workspaces.RevokeIpRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeIpRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.RevokeIpRulesOutput)
	return ret0, ret1
}

// RevokeIpRulesRequest indicates an expected call of RevokeIpRulesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) RevokeIpRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIpRulesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RevokeIpRulesRequest), arg0)
}

// RevokeIpRulesWithContext mocks base method.
func (m *MockWorkSpacesAPI) RevokeIpRulesWithContext(arg0 context.Context, arg1 *workspaces.RevokeIpRulesInput, arg2 ...request.Option) (*workspaces.RevokeIpRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeIpRulesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.RevokeIpRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeIpRulesWithContext indicates an expected call of RevokeIpRulesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) RevokeIpRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeIpRulesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).RevokeIpRulesWithContext), varargs...)
}

// StartWorkspaces mocks base method.
func (m *MockWorkSpacesAPI) StartWorkspaces(arg0 *workspaces.StartWorkspacesInput) (*workspaces.StartWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.StartWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkspaces indicates an expected call of StartWorkspaces.
func (mr *MockWorkSpacesAPIMockRecorder) StartWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StartWorkspaces), arg0)
}

// StartWorkspacesRequest mocks base method.
func (m *MockWorkSpacesAPI) StartWorkspacesRequest(arg0 *workspaces.StartWorkspacesInput) (*request.Request, *workspaces.StartWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.StartWorkspacesOutput)
	return ret0, ret1
}

// StartWorkspacesRequest indicates an expected call of StartWorkspacesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) StartWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StartWorkspacesRequest), arg0)
}

// StartWorkspacesWithContext mocks base method.
func (m *MockWorkSpacesAPI) StartWorkspacesWithContext(arg0 context.Context, arg1 *workspaces.StartWorkspacesInput, arg2 ...request.Option) (*workspaces.StartWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.StartWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkspacesWithContext indicates an expected call of StartWorkspacesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) StartWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StartWorkspacesWithContext), varargs...)
}

// StopWorkspaces mocks base method.
func (m *MockWorkSpacesAPI) StopWorkspaces(arg0 *workspaces.StopWorkspacesInput) (*workspaces.StopWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.StopWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkspaces indicates an expected call of StopWorkspaces.
func (mr *MockWorkSpacesAPIMockRecorder) StopWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StopWorkspaces), arg0)
}

// StopWorkspacesRequest mocks base method.
func (m *MockWorkSpacesAPI) StopWorkspacesRequest(arg0 *workspaces.StopWorkspacesInput) (*request.Request, *workspaces.StopWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.StopWorkspacesOutput)
	return ret0, ret1
}

// StopWorkspacesRequest indicates an expected call of StopWorkspacesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) StopWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StopWorkspacesRequest), arg0)
}

// StopWorkspacesWithContext mocks base method.
func (m *MockWorkSpacesAPI) StopWorkspacesWithContext(arg0 context.Context, arg1 *workspaces.StopWorkspacesInput, arg2 ...request.Option) (*workspaces.StopWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.StopWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkspacesWithContext indicates an expected call of StopWorkspacesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) StopWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).StopWorkspacesWithContext), varargs...)
}

// TerminateWorkspaces mocks base method.
func (m *MockWorkSpacesAPI) TerminateWorkspaces(arg0 *workspaces.TerminateWorkspacesInput) (*workspaces.TerminateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateWorkspaces", arg0)
	ret0, _ := ret[0].(*workspaces.TerminateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateWorkspaces indicates an expected call of TerminateWorkspaces.
func (mr *MockWorkSpacesAPIMockRecorder) TerminateWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkspaces", reflect.TypeOf((*MockWorkSpacesAPI)(nil).TerminateWorkspaces), arg0)
}

// TerminateWorkspacesRequest mocks base method.
func (m *MockWorkSpacesAPI) TerminateWorkspacesRequest(arg0 *workspaces.TerminateWorkspacesInput) (*request.Request, *workspaces.TerminateWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.TerminateWorkspacesOutput)
	return ret0, ret1
}

// TerminateWorkspacesRequest indicates an expected call of TerminateWorkspacesRequest.
func (mr *MockWorkSpacesAPIMockRecorder) TerminateWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkspacesRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).TerminateWorkspacesRequest), arg0)
}

// TerminateWorkspacesWithContext mocks base method.
func (m *MockWorkSpacesAPI) TerminateWorkspacesWithContext(arg0 context.Context, arg1 *workspaces.TerminateWorkspacesInput, arg2 ...request.Option) (*workspaces.TerminateWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.TerminateWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateWorkspacesWithContext indicates an expected call of TerminateWorkspacesWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) TerminateWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateWorkspacesWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).TerminateWorkspacesWithContext), varargs...)
}

// UpdateConnectClientAddIn mocks base method.
func (m *MockWorkSpacesAPI) UpdateConnectClientAddIn(arg0 *workspaces.UpdateConnectClientAddInInput) (*workspaces.UpdateConnectClientAddInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectClientAddIn", arg0)
	ret0, _ := ret[0].(*workspaces.UpdateConnectClientAddInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectClientAddIn indicates an expected call of UpdateConnectClientAddIn.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateConnectClientAddIn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectClientAddIn", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateConnectClientAddIn), arg0)
}

// UpdateConnectClientAddInRequest mocks base method.
func (m *MockWorkSpacesAPI) UpdateConnectClientAddInRequest(arg0 *workspaces.UpdateConnectClientAddInInput) (*request.Request, *workspaces.UpdateConnectClientAddInOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectClientAddInRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.UpdateConnectClientAddInOutput)
	return ret0, ret1
}

// UpdateConnectClientAddInRequest indicates an expected call of UpdateConnectClientAddInRequest.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateConnectClientAddInRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectClientAddInRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateConnectClientAddInRequest), arg0)
}

// UpdateConnectClientAddInWithContext mocks base method.
func (m *MockWorkSpacesAPI) UpdateConnectClientAddInWithContext(arg0 context.Context, arg1 *workspaces.UpdateConnectClientAddInInput, arg2 ...request.Option) (*workspaces.UpdateConnectClientAddInOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConnectClientAddInWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.UpdateConnectClientAddInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectClientAddInWithContext indicates an expected call of UpdateConnectClientAddInWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateConnectClientAddInWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectClientAddInWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateConnectClientAddInWithContext), varargs...)
}

// UpdateConnectionAliasPermission mocks base method.
func (m *MockWorkSpacesAPI) UpdateConnectionAliasPermission(arg0 *workspaces.UpdateConnectionAliasPermissionInput) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectionAliasPermission", arg0)
	ret0, _ := ret[0].(*workspaces.UpdateConnectionAliasPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectionAliasPermission indicates an expected call of UpdateConnectionAliasPermission.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateConnectionAliasPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionAliasPermission", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateConnectionAliasPermission), arg0)
}

// UpdateConnectionAliasPermissionRequest mocks base method.
func (m *MockWorkSpacesAPI) UpdateConnectionAliasPermissionRequest(arg0 *workspaces.UpdateConnectionAliasPermissionInput) (*request.Request, *workspaces.UpdateConnectionAliasPermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectionAliasPermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.UpdateConnectionAliasPermissionOutput)
	return ret0, ret1
}

// UpdateConnectionAliasPermissionRequest indicates an expected call of UpdateConnectionAliasPermissionRequest.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateConnectionAliasPermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionAliasPermissionRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateConnectionAliasPermissionRequest), arg0)
}

// UpdateConnectionAliasPermissionWithContext mocks base method.
func (m *MockWorkSpacesAPI) UpdateConnectionAliasPermissionWithContext(arg0 context.Context, arg1 *workspaces.UpdateConnectionAliasPermissionInput, arg2 ...request.Option) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConnectionAliasPermissionWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.UpdateConnectionAliasPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectionAliasPermissionWithContext indicates an expected call of UpdateConnectionAliasPermissionWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateConnectionAliasPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionAliasPermissionWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateConnectionAliasPermissionWithContext), varargs...)
}

// UpdateRulesOfIpGroup mocks base method.
func (m *MockWorkSpacesAPI) UpdateRulesOfIpGroup(arg0 *workspaces.UpdateRulesOfIpGroupInput) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRulesOfIpGroup", arg0)
	ret0, _ := ret[0].(*workspaces.UpdateRulesOfIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRulesOfIpGroup indicates an expected call of UpdateRulesOfIpGroup.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateRulesOfIpGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRulesOfIpGroup", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateRulesOfIpGroup), arg0)
}

// UpdateRulesOfIpGroupRequest mocks base method.
func (m *MockWorkSpacesAPI) UpdateRulesOfIpGroupRequest(arg0 *workspaces.UpdateRulesOfIpGroupInput) (*request.Request, *workspaces.UpdateRulesOfIpGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRulesOfIpGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.UpdateRulesOfIpGroupOutput)
	return ret0, ret1
}

// UpdateRulesOfIpGroupRequest indicates an expected call of UpdateRulesOfIpGroupRequest.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateRulesOfIpGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRulesOfIpGroupRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateRulesOfIpGroupRequest), arg0)
}

// UpdateRulesOfIpGroupWithContext mocks base method.
func (m *MockWorkSpacesAPI) UpdateRulesOfIpGroupWithContext(arg0 context.Context, arg1 *workspaces.UpdateRulesOfIpGroupInput, arg2 ...request.Option) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRulesOfIpGroupWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.UpdateRulesOfIpGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRulesOfIpGroupWithContext indicates an expected call of UpdateRulesOfIpGroupWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateRulesOfIpGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRulesOfIpGroupWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateRulesOfIpGroupWithContext), varargs...)
}

// UpdateWorkspaceBundle mocks base method.
func (m *MockWorkSpacesAPI) UpdateWorkspaceBundle(arg0 *workspaces.UpdateWorkspaceBundleInput) (*workspaces.UpdateWorkspaceBundleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceBundle", arg0)
	ret0, _ := ret[0].(*workspaces.UpdateWorkspaceBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceBundle indicates an expected call of UpdateWorkspaceBundle.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateWorkspaceBundle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceBundle", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateWorkspaceBundle), arg0)
}

// UpdateWorkspaceBundleRequest mocks base method.
func (m *MockWorkSpacesAPI) UpdateWorkspaceBundleRequest(arg0 *workspaces.UpdateWorkspaceBundleInput) (*request.Request, *workspaces.UpdateWorkspaceBundleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceBundleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.UpdateWorkspaceBundleOutput)
	return ret0, ret1
}

// UpdateWorkspaceBundleRequest indicates an expected call of UpdateWorkspaceBundleRequest.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateWorkspaceBundleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceBundleRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateWorkspaceBundleRequest), arg0)
}

// UpdateWorkspaceBundleWithContext mocks base method.
func (m *MockWorkSpacesAPI) UpdateWorkspaceBundleWithContext(arg0 context.Context, arg1 *workspaces.UpdateWorkspaceBundleInput, arg2 ...request.Option) (*workspaces.UpdateWorkspaceBundleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceBundleWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.UpdateWorkspaceBundleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceBundleWithContext indicates an expected call of UpdateWorkspaceBundleWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateWorkspaceBundleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceBundleWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateWorkspaceBundleWithContext), varargs...)
}

// UpdateWorkspaceImagePermission mocks base method.
func (m *MockWorkSpacesAPI) UpdateWorkspaceImagePermission(arg0 *workspaces.UpdateWorkspaceImagePermissionInput) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceImagePermission", arg0)
	ret0, _ := ret[0].(*workspaces.UpdateWorkspaceImagePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceImagePermission indicates an expected call of UpdateWorkspaceImagePermission.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateWorkspaceImagePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceImagePermission", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateWorkspaceImagePermission), arg0)
}

// UpdateWorkspaceImagePermissionRequest mocks base method.
func (m *MockWorkSpacesAPI) UpdateWorkspaceImagePermissionRequest(arg0 *workspaces.UpdateWorkspaceImagePermissionInput) (*request.Request, *workspaces.UpdateWorkspaceImagePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceImagePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*workspaces.UpdateWorkspaceImagePermissionOutput)
	return ret0, ret1
}

// UpdateWorkspaceImagePermissionRequest indicates an expected call of UpdateWorkspaceImagePermissionRequest.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateWorkspaceImagePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceImagePermissionRequest", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateWorkspaceImagePermissionRequest), arg0)
}

// UpdateWorkspaceImagePermissionWithContext mocks base method.
func (m *MockWorkSpacesAPI) UpdateWorkspaceImagePermissionWithContext(arg0 context.Context, arg1 *workspaces.UpdateWorkspaceImagePermissionInput, arg2 ...request.Option) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceImagePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*workspaces.UpdateWorkspaceImagePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceImagePermissionWithContext indicates an expected call of UpdateWorkspaceImagePermissionWithContext.
func (mr *MockWorkSpacesAPIMockRecorder) UpdateWorkspaceImagePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceImagePermissionWithContext", reflect.TypeOf((*MockWorkSpacesAPI)(nil).UpdateWorkspaceImagePermissionWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/account/accountiface (interfaces: AccountAPI)

// Package accountmock is a generated GoMock package.
package accountmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	account "github.com/aws/aws-sdk-go/service/account"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountAPI is a mock of AccountAPI interface.
type MockAccountAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAPIMockRecorder
}

// MockAccountAPIMockRecorder is the mock recorder for MockAccountAPI.
type MockAccountAPIMockRecorder struct {
	mock *MockAccountAPI
}

// NewMockAccountAPI creates a new mock instance.
func NewMockAccountAPI(ctrl *gomock.Controller) *MockAccountAPI {
	mock := &MockAccountAPI{ctrl: ctrl}
	mock.recorder = &MockAccountAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountAPI) EXPECT() *MockAccountAPIMockRecorder {
	return m.recorder
}

// DeleteAlternateContact mocks base method.
func (m *MockAccountAPI) DeleteAlternateContact(arg0 *account.DeleteAlternateContactInput) (*account.DeleteAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlternateContact", arg0)
	ret0, _ := ret[0].(*account.DeleteAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlternateContact indicates an expected call of DeleteAlternateContact.
func (mr *MockAccountAPIMockRecorder) DeleteAlternateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlternateContact", reflect.TypeOf((*MockAccountAPI)(nil).DeleteAlternateContact), arg0)
}

// DeleteAlternateContactRequest mocks base method.
func (m *MockAccountAPI) DeleteAlternateContactRequest(arg0 *account.DeleteAlternateContactInput) (*request.Request, *account.DeleteAlternateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlternateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.DeleteAlternateContactOutput)
	return ret0, ret1
}

// DeleteAlternateContactRequest indicates an expected call of DeleteAlternateContactRequest.
func (mr *MockAccountAPIMockRecorder) DeleteAlternateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlternateContactRequest", reflect.TypeOf((*MockAccountAPI)(nil).DeleteAlternateContactRequest), arg0)
}

// DeleteAlternateContactWithContext mocks base method.
func (m *MockAccountAPI) DeleteAlternateContactWithContext(arg0 context.Context, arg1 *account.DeleteAlternateContactInput, arg2 ...request.Option) (*account.DeleteAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAlternateContactWithContext", varargs...)
	ret0, _ := ret[0].(*account.DeleteAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlternateContactWithContext indicates an expected call of DeleteAlternateContactWithContext.
func (mr *MockAccountAPIMockRecorder) DeleteAlternateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlternateContactWithContext", reflect.TypeOf((*MockAccountAPI)(nil).DeleteAlternateContactWithContext), varargs...)
}

// GetAlternateContact mocks base method.
func (m *MockAccountAPI) GetAlternateContact(arg0 *account.GetAlternateContactInput) (*account.GetAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlternateContact", arg0)
	ret0, _ := ret[0].(*account.GetAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlternateContact indicates an expected call of GetAlternateContact.
func (mr *MockAccountAPIMockRecorder) GetAlternateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlternateContact", reflect.TypeOf((*MockAccountAPI)(nil).GetAlternateContact), arg0)
}

// GetAlternateContactRequest mocks base method.
func (m *MockAccountAPI) GetAlternateContactRequest(arg0 *account.GetAlternateContactInput) (*request.Request, *account.GetAlternateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlternateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.GetAlternateContactOutput)
	return ret0, ret1
}

// GetAlternateContactRequest indicates an expected call of GetAlternateContactRequest.
func (mr *MockAccountAPIMockRecorder) GetAlternateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlternateContactRequest", reflect.TypeOf((*MockAccountAPI)(nil).GetAlternateContactRequest), arg0)
}

// GetAlternateContactWithContext mocks base method.
func (m *MockAccountAPI) GetAlternateContactWithContext(arg0 context.Context, arg1 *account.GetAlternateContactInput, arg2 ...request.Option) (*account.GetAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlternateContactWithContext", varargs...)
	ret0, _ := ret[0].(*account.GetAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlternateContactWithContext indicates an expected call of GetAlternateContactWithContext.
func (mr *MockAccountAPIMockRecorder) GetAlternateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlternateContactWithContext", reflect.TypeOf((*MockAccountAPI)(nil).GetAlternateContactWithContext), varargs...)
}

// PutAlternateContact mocks base method.
func (m *MockAccountAPI) PutAlternateContact(arg0 *account.PutAlternateContactInput) (*account.PutAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAlternateContact", arg0)
	ret0, _ := ret[0].(*account.PutAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAlternateContact indicates an expected call of PutAlternateContact.
func (mr *MockAccountAPIMockRecorder) PutAlternateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlternateContact", reflect.TypeOf((*MockAccountAPI)(nil).PutAlternateContact), arg0)
}

// PutAlternateContactRequest mocks base method.
func (m *MockAccountAPI) PutAlternateContactRequest(arg0 *account.PutAlternateContactInput) (*request.Request, *account.PutAlternateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAlternateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*account.PutAlternateContactOutput)
	return ret0, ret1
}

// PutAlternateContactRequest indicates an expected call of PutAlternateContactRequest.
func (mr *MockAccountAPIMockRecorder) PutAlternateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlternateContactRequest", reflect.TypeOf((*MockAccountAPI)(nil).PutAlternateContactRequest), arg0)
}

// PutAlternateContactWithContext mocks base method.
func (m *MockAccountAPI) PutAlternateContactWithContext(arg0 context.Context, arg1 *account.PutAlternateContactInput, arg2 ...request.Option) (*account.PutAlternateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAlternateContactWithContext", varargs...)
	ret0, _ := ret[0].(*account.PutAlternateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAlternateContactWithContext indicates an expected call of PutAlternateContactWithContext.
func (mr *MockAccountAPIMockRecorder) PutAlternateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlternateContactWithContext", reflect.TypeOf((*MockAccountAPI)(nil).PutAlternateContactWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/serverlessapplicationrepository/serverlessapplicationrepositoryiface (interfaces: ServerlessApplicationRepositoryAPI)

// Package serverlessapplicationrepositorymock is a generated GoMock package.
package serverlessapplicationrepositorymock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	serverlessapplicationrepository "github.com/aws/aws-sdk-go/service/serverlessapplicationrepository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServerlessApplicationRepositoryAPI is a mock of ServerlessApplicationRepositoryAPI interface
type MockServerlessApplicationRepositoryAPI struct {
	ctrl     *gomock.Controller
	recorder *MockServerlessApplicationRepositoryAPIMockRecorder
}

// MockServerlessApplicationRepositoryAPIMockRecorder is the mock recorder for MockServerlessApplicationRepositoryAPI
type MockServerlessApplicationRepositoryAPIMockRecorder struct {
	mock *MockServerlessApplicationRepositoryAPI
}

// NewMockServerlessApplicationRepositoryAPI creates a new mock instance
func NewMockServerlessApplicationRepositoryAPI(ctrl *gomock.Controller) *MockServerlessApplicationRepositoryAPI {
	mock := &MockServerlessApplicationRepositoryAPI{ctrl: ctrl}
	mock.recorder = &MockServerlessApplicationRepositoryAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerlessApplicationRepositoryAPI) EXPECT() *MockServerlessApplicationRepositoryAPIMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateApplication(arg0 *serverlessapplicationrepository.CreateApplicationRequest) (*serverlessapplicationrepository.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateApplicationRequest(arg0 *serverlessapplicationrepository.CreateApplicationRequest) (*request.Request, *serverlessapplicationrepository.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationVersion mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateApplicationVersion(arg0 *serverlessapplicationrepository.CreateApplicationVersionRequest) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationVersion", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationVersion indicates an expected call of CreateApplicationVersion
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateApplicationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationVersion", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateApplicationVersion), arg0)
}

// CreateApplicationVersionRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateApplicationVersionRequest(arg0 *serverlessapplicationrepository.CreateApplicationVersionRequest) (*request.Request, *serverlessapplicationrepository.CreateApplicationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.CreateApplicationVersionOutput)
	return ret0, ret1
}

// CreateApplicationVersionRequest indicates an expected call of CreateApplicationVersionRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateApplicationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationVersionRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateApplicationVersionRequest), arg0)
}

// CreateApplicationVersionWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateApplicationVersionWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.CreateApplicationVersionRequest, arg2 ...request.Option) (*serverlessapplicationrepository.CreateApplicationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateApplicationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationVersionWithContext indicates an expected call of CreateApplicationVersionWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateApplicationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationVersionWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateApplicationVersionWithContext), varargs...)
}

// CreateApplicationWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.CreateApplicationRequest, arg2 ...request.Option) (*serverlessapplicationrepository.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateApplicationWithContext), varargs...)
}

// CreateCloudFormationChangeSet mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateCloudFormationChangeSet(arg0 *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFormationChangeSet", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFormationChangeSet indicates an expected call of CreateCloudFormationChangeSet
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateCloudFormationChangeSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFormationChangeSet", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateCloudFormationChangeSet), arg0)
}

// CreateCloudFormationChangeSetRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateCloudFormationChangeSetRequest(arg0 *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest) (*request.Request, *serverlessapplicationrepository.CreateCloudFormationChangeSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFormationChangeSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput)
	return ret0, ret1
}

// CreateCloudFormationChangeSetRequest indicates an expected call of CreateCloudFormationChangeSetRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateCloudFormationChangeSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFormationChangeSetRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateCloudFormationChangeSetRequest), arg0)
}

// CreateCloudFormationChangeSetWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateCloudFormationChangeSetWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.CreateCloudFormationChangeSetRequest, arg2 ...request.Option) (*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudFormationChangeSetWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateCloudFormationChangeSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFormationChangeSetWithContext indicates an expected call of CreateCloudFormationChangeSetWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateCloudFormationChangeSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFormationChangeSetWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateCloudFormationChangeSetWithContext), varargs...)
}

// CreateCloudFormationTemplate mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateCloudFormationTemplate(arg0 *serverlessapplicationrepository.CreateCloudFormationTemplateInput) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFormationTemplate", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateCloudFormationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFormationTemplate indicates an expected call of CreateCloudFormationTemplate
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateCloudFormationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFormationTemplate", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateCloudFormationTemplate), arg0)
}

// CreateCloudFormationTemplateRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateCloudFormationTemplateRequest(arg0 *serverlessapplicationrepository.CreateCloudFormationTemplateInput) (*request.Request, *serverlessapplicationrepository.CreateCloudFormationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFormationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.CreateCloudFormationTemplateOutput)
	return ret0, ret1
}

// CreateCloudFormationTemplateRequest indicates an expected call of CreateCloudFormationTemplateRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateCloudFormationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFormationTemplateRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateCloudFormationTemplateRequest), arg0)
}

// CreateCloudFormationTemplateWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) CreateCloudFormationTemplateWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.CreateCloudFormationTemplateInput, arg2 ...request.Option) (*serverlessapplicationrepository.CreateCloudFormationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudFormationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.CreateCloudFormationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFormationTemplateWithContext indicates an expected call of CreateCloudFormationTemplateWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) CreateCloudFormationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFormationTemplateWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).CreateCloudFormationTemplateWithContext), varargs...)
}

// DeleteApplication mocks base method
func (m *MockServerlessApplicationRepositoryAPI) DeleteApplication(arg0 *serverlessapplicationrepository.DeleteApplicationInput) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) DeleteApplicationRequest(arg0 *serverlessapplicationrepository.DeleteApplicationInput) (*request.Request, *serverlessapplicationrepository.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.DeleteApplicationInput, arg2 ...request.Option) (*serverlessapplicationrepository.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// GetApplication mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetApplication(arg0 *serverlessapplicationrepository.GetApplicationInput) (*serverlessapplicationrepository.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetApplication), arg0)
}

// GetApplicationPolicy mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetApplicationPolicy(arg0 *serverlessapplicationrepository.GetApplicationPolicyInput) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationPolicy", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.GetApplicationPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationPolicy indicates an expected call of GetApplicationPolicy
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetApplicationPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationPolicy", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetApplicationPolicy), arg0)
}

// GetApplicationPolicyRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetApplicationPolicyRequest(arg0 *serverlessapplicationrepository.GetApplicationPolicyInput) (*request.Request, *serverlessapplicationrepository.GetApplicationPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.GetApplicationPolicyOutput)
	return ret0, ret1
}

// GetApplicationPolicyRequest indicates an expected call of GetApplicationPolicyRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetApplicationPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationPolicyRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetApplicationPolicyRequest), arg0)
}

// GetApplicationPolicyWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetApplicationPolicyWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.GetApplicationPolicyInput, arg2 ...request.Option) (*serverlessapplicationrepository.GetApplicationPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.GetApplicationPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationPolicyWithContext indicates an expected call of GetApplicationPolicyWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetApplicationPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationPolicyWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetApplicationPolicyWithContext), varargs...)
}

// GetApplicationRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetApplicationRequest(arg0 *serverlessapplicationrepository.GetApplicationInput) (*request.Request, *serverlessapplicationrepository.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetApplicationWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.GetApplicationInput, arg2 ...request.Option) (*serverlessapplicationrepository.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetCloudFormationTemplate mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetCloudFormationTemplate(arg0 *serverlessapplicationrepository.GetCloudFormationTemplateInput) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFormationTemplate", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.GetCloudFormationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFormationTemplate indicates an expected call of GetCloudFormationTemplate
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetCloudFormationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFormationTemplate", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetCloudFormationTemplate), arg0)
}

// GetCloudFormationTemplateRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetCloudFormationTemplateRequest(arg0 *serverlessapplicationrepository.GetCloudFormationTemplateInput) (*request.Request, *serverlessapplicationrepository.GetCloudFormationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFormationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.GetCloudFormationTemplateOutput)
	return ret0, ret1
}

// GetCloudFormationTemplateRequest indicates an expected call of GetCloudFormationTemplateRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetCloudFormationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFormationTemplateRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetCloudFormationTemplateRequest), arg0)
}

// GetCloudFormationTemplateWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) GetCloudFormationTemplateWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.GetCloudFormationTemplateInput, arg2 ...request.Option) (*serverlessapplicationrepository.GetCloudFormationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFormationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.GetCloudFormationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFormationTemplateWithContext indicates an expected call of GetCloudFormationTemplateWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) GetCloudFormationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFormationTemplateWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).GetCloudFormationTemplateWithContext), varargs...)
}

// ListApplicationDependencies mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationDependencies(arg0 *serverlessapplicationrepository.ListApplicationDependenciesInput) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationDependencies", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.ListApplicationDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationDependencies indicates an expected call of ListApplicationDependencies
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationDependencies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationDependencies", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationDependencies), arg0)
}

// ListApplicationDependenciesPages mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationDependenciesPages(arg0 *serverlessapplicationrepository.ListApplicationDependenciesInput, arg1 func(*serverlessapplicationrepository.ListApplicationDependenciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationDependenciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationDependenciesPages indicates an expected call of ListApplicationDependenciesPages
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationDependenciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationDependenciesPages", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationDependenciesPages), arg0, arg1)
}

// ListApplicationDependenciesPagesWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationDependenciesPagesWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.ListApplicationDependenciesInput, arg2 func(*serverlessapplicationrepository.ListApplicationDependenciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationDependenciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationDependenciesPagesWithContext indicates an expected call of ListApplicationDependenciesPagesWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationDependenciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationDependenciesPagesWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationDependenciesPagesWithContext), varargs...)
}

// ListApplicationDependenciesRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationDependenciesRequest(arg0 *serverlessapplicationrepository.ListApplicationDependenciesInput) (*request.Request, *serverlessapplicationrepository.ListApplicationDependenciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationDependenciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.ListApplicationDependenciesOutput)
	return ret0, ret1
}

// ListApplicationDependenciesRequest indicates an expected call of ListApplicationDependenciesRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationDependenciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationDependenciesRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationDependenciesRequest), arg0)
}

// ListApplicationDependenciesWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationDependenciesWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.ListApplicationDependenciesInput, arg2 ...request.Option) (*serverlessapplicationrepository.ListApplicationDependenciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationDependenciesWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.ListApplicationDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationDependenciesWithContext indicates an expected call of ListApplicationDependenciesWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationDependenciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationDependenciesWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationDependenciesWithContext), varargs...)
}

// ListApplicationVersions mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationVersions(arg0 *serverlessapplicationrepository.ListApplicationVersionsInput) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationVersions", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.ListApplicationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationVersions indicates an expected call of ListApplicationVersions
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersions", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationVersions), arg0)
}

// ListApplicationVersionsPages mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationVersionsPages(arg0 *serverlessapplicationrepository.ListApplicationVersionsInput, arg1 func(*serverlessapplicationrepository.ListApplicationVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationVersionsPages indicates an expected call of ListApplicationVersionsPages
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsPages", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationVersionsPages), arg0, arg1)
}

// ListApplicationVersionsPagesWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationVersionsPagesWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.ListApplicationVersionsInput, arg2 func(*serverlessapplicationrepository.ListApplicationVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationVersionsPagesWithContext indicates an expected call of ListApplicationVersionsPagesWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsPagesWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationVersionsPagesWithContext), varargs...)
}

// ListApplicationVersionsRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationVersionsRequest(arg0 *serverlessapplicationrepository.ListApplicationVersionsInput) (*request.Request, *serverlessapplicationrepository.ListApplicationVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.ListApplicationVersionsOutput)
	return ret0, ret1
}

// ListApplicationVersionsRequest indicates an expected call of ListApplicationVersionsRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationVersionsRequest), arg0)
}

// ListApplicationVersionsWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationVersionsWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.ListApplicationVersionsInput, arg2 ...request.Option) (*serverlessapplicationrepository.ListApplicationVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.ListApplicationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationVersionsWithContext indicates an expected call of ListApplicationVersionsWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationVersionsWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationVersionsWithContext), varargs...)
}

// ListApplications mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplications(arg0 *serverlessapplicationrepository.ListApplicationsInput) (*serverlessapplicationrepository.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationsPages(arg0 *serverlessapplicationrepository.ListApplicationsInput, arg1 func(*serverlessapplicationrepository.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.ListApplicationsInput, arg2 func(*serverlessapplicationrepository.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationsRequest(arg0 *serverlessapplicationrepository.ListApplicationsInput) (*request.Request, *serverlessapplicationrepository.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.ListApplicationsInput, arg2 ...request.Option) (*serverlessapplicationrepository.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).ListApplicationsWithContext), varargs...)
}

// PutApplicationPolicy mocks base method
func (m *MockServerlessApplicationRepositoryAPI) PutApplicationPolicy(arg0 *serverlessapplicationrepository.PutApplicationPolicyInput) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationPolicy", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.PutApplicationPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationPolicy indicates an expected call of PutApplicationPolicy
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) PutApplicationPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationPolicy", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).PutApplicationPolicy), arg0)
}

// PutApplicationPolicyRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) PutApplicationPolicyRequest(arg0 *serverlessapplicationrepository.PutApplicationPolicyInput) (*request.Request, *serverlessapplicationrepository.PutApplicationPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplicationPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.PutApplicationPolicyOutput)
	return ret0, ret1
}

// PutApplicationPolicyRequest indicates an expected call of PutApplicationPolicyRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) PutApplicationPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationPolicyRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).PutApplicationPolicyRequest), arg0)
}

// PutApplicationPolicyWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) PutApplicationPolicyWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.PutApplicationPolicyInput, arg2 ...request.Option) (*serverlessapplicationrepository.PutApplicationPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutApplicationPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.PutApplicationPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutApplicationPolicyWithContext indicates an expected call of PutApplicationPolicyWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) PutApplicationPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplicationPolicyWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).PutApplicationPolicyWithContext), varargs...)
}

// UnshareApplication mocks base method
func (m *MockServerlessApplicationRepositoryAPI) UnshareApplication(arg0 *serverlessapplicationrepository.UnshareApplicationInput) (*serverlessapplicationrepository.UnshareApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareApplication", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.UnshareApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnshareApplication indicates an expected call of UnshareApplication
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) UnshareApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareApplication", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).UnshareApplication), arg0)
}

// UnshareApplicationRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) UnshareApplicationRequest(arg0 *serverlessapplicationrepository.UnshareApplicationInput) (*request.Request, *serverlessapplicationrepository.UnshareApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.UnshareApplicationOutput)
	return ret0, ret1
}

// UnshareApplicationRequest indicates an expected call of UnshareApplicationRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) UnshareApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareApplicationRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).UnshareApplicationRequest), arg0)
}

// UnshareApplicationWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) UnshareApplicationWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.UnshareApplicationInput, arg2 ...request.Option) (*serverlessapplicationrepository.UnshareApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnshareApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.UnshareApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnshareApplicationWithContext indicates an expected call of UnshareApplicationWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) UnshareApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareApplicationWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).UnshareApplicationWithContext), varargs...)
}

// UpdateApplication mocks base method
func (m *MockServerlessApplicationRepositoryAPI) UpdateApplication(arg0 *serverlessapplicationrepository.UpdateApplicationRequest) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*serverlessapplicationrepository.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method
func (m *MockServerlessApplicationRepositoryAPI) UpdateApplicationRequest(arg0 *serverlessapplicationrepository.UpdateApplicationRequest) (*request.Request, *serverlessapplicationrepository.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*serverlessapplicationrepository.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method
func (m *MockServerlessApplicationRepositoryAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *serverlessapplicationrepository.UpdateApplicationRequest, arg2 ...request.Option) (*serverlessapplicationrepository.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*serverlessapplicationrepository.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext
func (mr *MockServerlessApplicationRepositoryAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockServerlessApplicationRepositoryAPI)(nil).UpdateApplicationWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/sesv2/sesv2iface (interfaces: SESV2API)

// Package sesv2mock is a generated GoMock package.
package sesv2mock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	sesv2 "github.com/aws/aws-sdk-go/service/sesv2"
	gomock "github.com/golang/mock/gomock"
)

// MockSESV2API is a mock of SESV2API interface.
type MockSESV2API struct {
	ctrl     *gomock.Controller
	recorder *MockSESV2APIMockRecorder
}

// MockSESV2APIMockRecorder is the mock recorder for MockSESV2API.
type MockSESV2APIMockRecorder struct {
	mock *MockSESV2API
}

// NewMockSESV2API creates a new mock instance.
func NewMockSESV2API(ctrl *gomock.Controller) *MockSESV2API {
	mock := &MockSESV2API{ctrl: ctrl}
	mock.recorder = &MockSESV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSESV2API) EXPECT() *MockSESV2APIMockRecorder {
	return m.recorder
}

// CreateConfigurationSet mocks base method.
func (m *MockSESV2API) CreateConfigurationSet(arg0 *sesv2.CreateConfigurationSetInput) (*sesv2.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSet", arg0)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSet indicates an expected call of CreateConfigurationSet.
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSet", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSet), arg0)
}

// CreateConfigurationSetEventDestination mocks base method.
func (m *MockSESV2API) CreateConfigurationSetEventDestination(arg0 *sesv2.CreateConfigurationSetEventDestinationInput) (*sesv2.CreateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetEventDestination indicates an expected call of CreateConfigurationSetEventDestination.
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestination", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetEventDestination), arg0)
}

// CreateConfigurationSetEventDestinationRequest mocks base method.
func (m *MockSESV2API) CreateConfigurationSetEventDestinationRequest(arg0 *sesv2.CreateConfigurationSetEventDestinationInput) (*request.Request, *sesv2.CreateConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// CreateConfigurationSetEventDestinationRequest indicates an expected call of CreateConfigurationSetEventDestinationRequest.
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetEventDestinationRequest), arg0)
}

// CreateConfigurationSetEventDestinationWithContext mocks base method.
func (m *MockSESV2API) CreateConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *sesv2.CreateConfigurationSetEventDestinationInput, arg2 ...request.Option) (*sesv2.CreateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetEventDestinationWithContext indicates an expected call of CreateConfigurationSetEventDestinationWithContext.
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetEventDestinationWithContext), varargs...)
}

// CreateConfigurationSetRequest mocks base method.
func (m *MockSESV2API) CreateConfigurationSetRequest(arg0 *sesv2.CreateConfigurationSetInput) (*request.Request, *sesv2.CreateConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateConfigurationSetOutput)
	return ret0, ret1
}

// CreateConfigurationSetRequest indicates an expected call of CreateConfigurationSetRequest.
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetRequest), arg0)
}

// CreateConfigurationSetWithContext mocks base method.
func (m *MockSESV2API) CreateConfigurationSetWithContext(arg0 context.Context, arg1 *sesv2.CreateConfigurationSetInput, arg2 ...request.Option) (*sesv2.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetWithContext indicates an expected call of CreateConfigurationSetWithContext.
func (mr *MockSESV2APIMockRecorder) CreateConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateConfigurationSetWithContext), varargs...)
}

// CreateContact mocks base method.
func (m *MockSESV2API) CreateContact(arg0 *sesv2.CreateContactInput) (*sesv2.CreateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0)
	ret0, _ := ret[0].(*sesv2.CreateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockSESV2APIMockRecorder) CreateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockSESV2API)(nil).CreateContact), arg0)
}

// CreateContactList mocks base method.
func (m *MockSESV2API) CreateContactList(arg0 *sesv2.CreateContactListInput) (*sesv2.CreateContactListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactList", arg0)
	ret0, _ := ret[0].(*sesv2.CreateContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactList indicates an expected call of CreateContactList.
func (mr *MockSESV2APIMockRecorder) CreateContactList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactList", reflect.TypeOf((*MockSESV2API)(nil).CreateContactList), arg0)
}

// CreateContactListRequest mocks base method.
func (m *MockSESV2API) CreateContactListRequest(arg0 *sesv2.CreateContactListInput) (*request.Request, *sesv2.CreateContactListOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactListRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateContactListOutput)
	return ret0, ret1
}

// CreateContactListRequest indicates an expected call of CreateContactListRequest.
func (mr *MockSESV2APIMockRecorder) CreateContactListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactListRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateContactListRequest), arg0)
}

// CreateContactListWithContext mocks base method.
func (m *MockSESV2API) CreateContactListWithContext(arg0 context.Context, arg1 *sesv2.CreateContactListInput, arg2 ...request.Option) (*sesv2.CreateContactListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContactListWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactListWithContext indicates an expected call of CreateContactListWithContext.
func (mr *MockSESV2APIMockRecorder) CreateContactListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactListWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateContactListWithContext), varargs...)
}

// CreateContactRequest mocks base method.
func (m *MockSESV2API) CreateContactRequest(arg0 *sesv2.CreateContactInput) (*request.Request, *sesv2.CreateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateContactOutput)
	return ret0, ret1
}

// CreateContactRequest indicates an expected call of CreateContactRequest.
func (mr *MockSESV2APIMockRecorder) CreateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateContactRequest), arg0)
}

// CreateContactWithContext mocks base method.
func (m *MockSESV2API) CreateContactWithContext(arg0 context.Context, arg1 *sesv2.CreateContactInput, arg2 ...request.Option) (*sesv2.CreateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContactWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactWithContext indicates an expected call of CreateContactWithContext.
func (mr *MockSESV2APIMockRecorder) CreateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateContactWithContext), varargs...)
}

// CreateCustomVerificationEmailTemplate mocks base method.
func (m *MockSESV2API) CreateCustomVerificationEmailTemplate(arg0 *sesv2.CreateCustomVerificationEmailTemplateInput) (*sesv2.CreateCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomVerificationEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.CreateCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomVerificationEmailTemplate indicates an expected call of CreateCustomVerificationEmailTemplate.
func (mr *MockSESV2APIMockRecorder) CreateCustomVerificationEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomVerificationEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).CreateCustomVerificationEmailTemplate), arg0)
}

// CreateCustomVerificationEmailTemplateRequest mocks base method.
func (m *MockSESV2API) CreateCustomVerificationEmailTemplateRequest(arg0 *sesv2.CreateCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.CreateCustomVerificationEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomVerificationEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateCustomVerificationEmailTemplateOutput)
	return ret0, ret1
}

// CreateCustomVerificationEmailTemplateRequest indicates an expected call of CreateCustomVerificationEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) CreateCustomVerificationEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomVerificationEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateCustomVerificationEmailTemplateRequest), arg0)
}

// CreateCustomVerificationEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) CreateCustomVerificationEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.CreateCustomVerificationEmailTemplateInput, arg2 ...request.Option) (*sesv2.CreateCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomVerificationEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomVerificationEmailTemplateWithContext indicates an expected call of CreateCustomVerificationEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) CreateCustomVerificationEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomVerificationEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateCustomVerificationEmailTemplateWithContext), varargs...)
}

// CreateDedicatedIpPool mocks base method.
func (m *MockSESV2API) CreateDedicatedIpPool(arg0 *sesv2.CreateDedicatedIpPoolInput) (*sesv2.CreateDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDedicatedIpPool", arg0)
	ret0, _ := ret[0].(*sesv2.CreateDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDedicatedIpPool indicates an expected call of CreateDedicatedIpPool.
func (mr *MockSESV2APIMockRecorder) CreateDedicatedIpPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPool", reflect.TypeOf((*MockSESV2API)(nil).CreateDedicatedIpPool), arg0)
}

// CreateDedicatedIpPoolRequest mocks base method.
func (m *MockSESV2API) CreateDedicatedIpPoolRequest(arg0 *sesv2.CreateDedicatedIpPoolInput) (*request.Request, *sesv2.CreateDedicatedIpPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDedicatedIpPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateDedicatedIpPoolOutput)
	return ret0, ret1
}

// CreateDedicatedIpPoolRequest indicates an expected call of CreateDedicatedIpPoolRequest.
func (mr *MockSESV2APIMockRecorder) CreateDedicatedIpPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPoolRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateDedicatedIpPoolRequest), arg0)
}

// CreateDedicatedIpPoolWithContext mocks base method.
func (m *MockSESV2API) CreateDedicatedIpPoolWithContext(arg0 context.Context, arg1 *sesv2.CreateDedicatedIpPoolInput, arg2 ...request.Option) (*sesv2.CreateDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDedicatedIpPoolWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDedicatedIpPoolWithContext indicates an expected call of CreateDedicatedIpPoolWithContext.
func (mr *MockSESV2APIMockRecorder) CreateDedicatedIpPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDedicatedIpPoolWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateDedicatedIpPoolWithContext), varargs...)
}

// CreateDeliverabilityTestReport mocks base method.
func (m *MockSESV2API) CreateDeliverabilityTestReport(arg0 *sesv2.CreateDeliverabilityTestReportInput) (*sesv2.CreateDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReport", arg0)
	ret0, _ := ret[0].(*sesv2.CreateDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliverabilityTestReport indicates an expected call of CreateDeliverabilityTestReport.
func (mr *MockSESV2APIMockRecorder) CreateDeliverabilityTestReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReport", reflect.TypeOf((*MockSESV2API)(nil).CreateDeliverabilityTestReport), arg0)
}

// CreateDeliverabilityTestReportRequest mocks base method.
func (m *MockSESV2API) CreateDeliverabilityTestReportRequest(arg0 *sesv2.CreateDeliverabilityTestReportInput) (*request.Request, *sesv2.CreateDeliverabilityTestReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateDeliverabilityTestReportOutput)
	return ret0, ret1
}

// CreateDeliverabilityTestReportRequest indicates an expected call of CreateDeliverabilityTestReportRequest.
func (mr *MockSESV2APIMockRecorder) CreateDeliverabilityTestReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReportRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateDeliverabilityTestReportRequest), arg0)
}

// CreateDeliverabilityTestReportWithContext mocks base method.
func (m *MockSESV2API) CreateDeliverabilityTestReportWithContext(arg0 context.Context, arg1 *sesv2.CreateDeliverabilityTestReportInput, arg2 ...request.Option) (*sesv2.CreateDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeliverabilityTestReportWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliverabilityTestReportWithContext indicates an expected call of CreateDeliverabilityTestReportWithContext.
func (mr *MockSESV2APIMockRecorder) CreateDeliverabilityTestReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliverabilityTestReportWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateDeliverabilityTestReportWithContext), varargs...)
}

// CreateEmailIdentity mocks base method.
func (m *MockSESV2API) CreateEmailIdentity(arg0 *sesv2.CreateEmailIdentityInput) (*sesv2.CreateEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentity", arg0)
	ret0, _ := ret[0].(*sesv2.CreateEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentity indicates an expected call of CreateEmailIdentity.
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentity", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentity), arg0)
}

// CreateEmailIdentityPolicy mocks base method.
func (m *MockSESV2API) CreateEmailIdentityPolicy(arg0 *sesv2.CreateEmailIdentityPolicyInput) (*sesv2.CreateEmailIdentityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentityPolicy", arg0)
	ret0, _ := ret[0].(*sesv2.CreateEmailIdentityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentityPolicy indicates an expected call of CreateEmailIdentityPolicy.
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityPolicy", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentityPolicy), arg0)
}

// CreateEmailIdentityPolicyRequest mocks base method.
func (m *MockSESV2API) CreateEmailIdentityPolicyRequest(arg0 *sesv2.CreateEmailIdentityPolicyInput) (*request.Request, *sesv2.CreateEmailIdentityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateEmailIdentityPolicyOutput)
	return ret0, ret1
}

// CreateEmailIdentityPolicyRequest indicates an expected call of CreateEmailIdentityPolicyRequest.
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityPolicyRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentityPolicyRequest), arg0)
}

// CreateEmailIdentityPolicyWithContext mocks base method.
func (m *MockSESV2API) CreateEmailIdentityPolicyWithContext(arg0 context.Context, arg1 *sesv2.CreateEmailIdentityPolicyInput, arg2 ...request.Option) (*sesv2.CreateEmailIdentityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailIdentityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateEmailIdentityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentityPolicyWithContext indicates an expected call of CreateEmailIdentityPolicyWithContext.
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityPolicyWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentityPolicyWithContext), varargs...)
}

// CreateEmailIdentityRequest mocks base method.
func (m *MockSESV2API) CreateEmailIdentityRequest(arg0 *sesv2.CreateEmailIdentityInput) (*request.Request, *sesv2.CreateEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateEmailIdentityOutput)
	return ret0, ret1
}

// CreateEmailIdentityRequest indicates an expected call of CreateEmailIdentityRequest.
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentityRequest), arg0)
}

// CreateEmailIdentityWithContext mocks base method.
func (m *MockSESV2API) CreateEmailIdentityWithContext(arg0 context.Context, arg1 *sesv2.CreateEmailIdentityInput, arg2 ...request.Option) (*sesv2.CreateEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailIdentityWithContext indicates an expected call of CreateEmailIdentityWithContext.
func (mr *MockSESV2APIMockRecorder) CreateEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailIdentityWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailIdentityWithContext), varargs...)
}

// CreateEmailTemplate mocks base method.
func (m *MockSESV2API) CreateEmailTemplate(arg0 *sesv2.CreateEmailTemplateInput) (*sesv2.CreateEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.CreateEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailTemplate indicates an expected call of CreateEmailTemplate.
func (mr *MockSESV2APIMockRecorder) CreateEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailTemplate), arg0)
}

// CreateEmailTemplateRequest mocks base method.
func (m *MockSESV2API) CreateEmailTemplateRequest(arg0 *sesv2.CreateEmailTemplateInput) (*request.Request, *sesv2.CreateEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateEmailTemplateOutput)
	return ret0, ret1
}

// CreateEmailTemplateRequest indicates an expected call of CreateEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) CreateEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailTemplateRequest), arg0)
}

// CreateEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) CreateEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.CreateEmailTemplateInput, arg2 ...request.Option) (*sesv2.CreateEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailTemplateWithContext indicates an expected call of CreateEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) CreateEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateEmailTemplateWithContext), varargs...)
}

// CreateImportJob mocks base method.
func (m *MockSESV2API) CreateImportJob(arg0 *sesv2.CreateImportJobInput) (*sesv2.CreateImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImportJob", arg0)
	ret0, _ := ret[0].(*sesv2.CreateImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImportJob indicates an expected call of CreateImportJob.
func (mr *MockSESV2APIMockRecorder) CreateImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImportJob", reflect.TypeOf((*MockSESV2API)(nil).CreateImportJob), arg0)
}

// CreateImportJobRequest mocks base method.
func (m *MockSESV2API) CreateImportJobRequest(arg0 *sesv2.CreateImportJobInput) (*request.Request, *sesv2.CreateImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.CreateImportJobOutput)
	return ret0, ret1
}

// CreateImportJobRequest indicates an expected call of CreateImportJobRequest.
func (mr *MockSESV2APIMockRecorder) CreateImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImportJobRequest", reflect.TypeOf((*MockSESV2API)(nil).CreateImportJobRequest), arg0)
}

// CreateImportJobWithContext mocks base method.
func (m *MockSESV2API) CreateImportJobWithContext(arg0 context.Context, arg1 *sesv2.CreateImportJobInput, arg2 ...request.Option) (*sesv2.CreateImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.CreateImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImportJobWithContext indicates an expected call of CreateImportJobWithContext.
func (mr *MockSESV2APIMockRecorder) CreateImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImportJobWithContext", reflect.TypeOf((*MockSESV2API)(nil).CreateImportJobWithContext), varargs...)
}

// DeleteConfigurationSet mocks base method.
func (m *MockSESV2API) DeleteConfigurationSet(arg0 *sesv2.DeleteConfigurationSetInput) (*sesv2.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSet", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSet indicates an expected call of DeleteConfigurationSet.
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSet", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSet), arg0)
}

// DeleteConfigurationSetEventDestination mocks base method.
func (m *MockSESV2API) DeleteConfigurationSetEventDestination(arg0 *sesv2.DeleteConfigurationSetEventDestinationInput) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestination indicates an expected call of DeleteConfigurationSetEventDestination.
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestination", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetEventDestination), arg0)
}

// DeleteConfigurationSetEventDestinationRequest mocks base method.
func (m *MockSESV2API) DeleteConfigurationSetEventDestinationRequest(arg0 *sesv2.DeleteConfigurationSetEventDestinationInput) (*request.Request, *sesv2.DeleteConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestinationRequest indicates an expected call of DeleteConfigurationSetEventDestinationRequest.
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetEventDestinationRequest), arg0)
}

// DeleteConfigurationSetEventDestinationWithContext mocks base method.
func (m *MockSESV2API) DeleteConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *sesv2.DeleteConfigurationSetEventDestinationInput, arg2 ...request.Option) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetEventDestinationWithContext indicates an expected call of DeleteConfigurationSetEventDestinationWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetEventDestinationWithContext), varargs...)
}

// DeleteConfigurationSetRequest mocks base method.
func (m *MockSESV2API) DeleteConfigurationSetRequest(arg0 *sesv2.DeleteConfigurationSetInput) (*request.Request, *sesv2.DeleteConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteConfigurationSetOutput)
	return ret0, ret1
}

// DeleteConfigurationSetRequest indicates an expected call of DeleteConfigurationSetRequest.
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetRequest), arg0)
}

// DeleteConfigurationSetWithContext mocks base method.
func (m *MockSESV2API) DeleteConfigurationSetWithContext(arg0 context.Context, arg1 *sesv2.DeleteConfigurationSetInput, arg2 ...request.Option) (*sesv2.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetWithContext indicates an expected call of DeleteConfigurationSetWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteConfigurationSetWithContext), varargs...)
}

// DeleteContact mocks base method.
func (m *MockSESV2API) DeleteContact(arg0 *sesv2.DeleteContactInput) (*sesv2.DeleteContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockSESV2APIMockRecorder) DeleteContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockSESV2API)(nil).DeleteContact), arg0)
}

// DeleteContactList mocks base method.
func (m *MockSESV2API) DeleteContactList(arg0 *sesv2.DeleteContactListInput) (*sesv2.DeleteContactListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactList", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContactList indicates an expected call of DeleteContactList.
func (mr *MockSESV2APIMockRecorder) DeleteContactList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactList", reflect.TypeOf((*MockSESV2API)(nil).DeleteContactList), arg0)
}

// DeleteContactListRequest mocks base method.
func (m *MockSESV2API) DeleteContactListRequest(arg0 *sesv2.DeleteContactListInput) (*request.Request, *sesv2.DeleteContactListOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactListRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteContactListOutput)
	return ret0, ret1
}

// DeleteContactListRequest indicates an expected call of DeleteContactListRequest.
func (mr *MockSESV2APIMockRecorder) DeleteContactListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactListRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteContactListRequest), arg0)
}

// DeleteContactListWithContext mocks base method.
func (m *MockSESV2API) DeleteContactListWithContext(arg0 context.Context, arg1 *sesv2.DeleteContactListInput, arg2 ...request.Option) (*sesv2.DeleteContactListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContactListWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContactListWithContext indicates an expected call of DeleteContactListWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteContactListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactListWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteContactListWithContext), varargs...)
}

// DeleteContactRequest mocks base method.
func (m *MockSESV2API) DeleteContactRequest(arg0 *sesv2.DeleteContactInput) (*request.Request, *sesv2.DeleteContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteContactOutput)
	return ret0, ret1
}

// DeleteContactRequest indicates an expected call of DeleteContactRequest.
func (mr *MockSESV2APIMockRecorder) DeleteContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteContactRequest), arg0)
}

// DeleteContactWithContext mocks base method.
func (m *MockSESV2API) DeleteContactWithContext(arg0 context.Context, arg1 *sesv2.DeleteContactInput, arg2 ...request.Option) (*sesv2.DeleteContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContactWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContactWithContext indicates an expected call of DeleteContactWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteContactWithContext), varargs...)
}

// DeleteCustomVerificationEmailTemplate mocks base method.
func (m *MockSESV2API) DeleteCustomVerificationEmailTemplate(arg0 *sesv2.DeleteCustomVerificationEmailTemplateInput) (*sesv2.DeleteCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomVerificationEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomVerificationEmailTemplate indicates an expected call of DeleteCustomVerificationEmailTemplate.
func (mr *MockSESV2APIMockRecorder) DeleteCustomVerificationEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomVerificationEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).DeleteCustomVerificationEmailTemplate), arg0)
}

// DeleteCustomVerificationEmailTemplateRequest mocks base method.
func (m *MockSESV2API) DeleteCustomVerificationEmailTemplateRequest(arg0 *sesv2.DeleteCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.DeleteCustomVerificationEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomVerificationEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteCustomVerificationEmailTemplateOutput)
	return ret0, ret1
}

// DeleteCustomVerificationEmailTemplateRequest indicates an expected call of DeleteCustomVerificationEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) DeleteCustomVerificationEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomVerificationEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteCustomVerificationEmailTemplateRequest), arg0)
}

// DeleteCustomVerificationEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) DeleteCustomVerificationEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.DeleteCustomVerificationEmailTemplateInput, arg2 ...request.Option) (*sesv2.DeleteCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomVerificationEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomVerificationEmailTemplateWithContext indicates an expected call of DeleteCustomVerificationEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteCustomVerificationEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomVerificationEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteCustomVerificationEmailTemplateWithContext), varargs...)
}

// DeleteDedicatedIpPool mocks base method.
func (m *MockSESV2API) DeleteDedicatedIpPool(arg0 *sesv2.DeleteDedicatedIpPoolInput) (*sesv2.DeleteDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPool", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDedicatedIpPool indicates an expected call of DeleteDedicatedIpPool.
func (mr *MockSESV2APIMockRecorder) DeleteDedicatedIpPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPool", reflect.TypeOf((*MockSESV2API)(nil).DeleteDedicatedIpPool), arg0)
}

// DeleteDedicatedIpPoolRequest mocks base method.
func (m *MockSESV2API) DeleteDedicatedIpPoolRequest(arg0 *sesv2.DeleteDedicatedIpPoolInput) (*request.Request, *sesv2.DeleteDedicatedIpPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteDedicatedIpPoolOutput)
	return ret0, ret1
}

// DeleteDedicatedIpPoolRequest indicates an expected call of DeleteDedicatedIpPoolRequest.
func (mr *MockSESV2APIMockRecorder) DeleteDedicatedIpPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPoolRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteDedicatedIpPoolRequest), arg0)
}

// DeleteDedicatedIpPoolWithContext mocks base method.
func (m *MockSESV2API) DeleteDedicatedIpPoolWithContext(arg0 context.Context, arg1 *sesv2.DeleteDedicatedIpPoolInput, arg2 ...request.Option) (*sesv2.DeleteDedicatedIpPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDedicatedIpPoolWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteDedicatedIpPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDedicatedIpPoolWithContext indicates an expected call of DeleteDedicatedIpPoolWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteDedicatedIpPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDedicatedIpPoolWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteDedicatedIpPoolWithContext), varargs...)
}

// DeleteEmailIdentity mocks base method.
func (m *MockSESV2API) DeleteEmailIdentity(arg0 *sesv2.DeleteEmailIdentityInput) (*sesv2.DeleteEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentity", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentity indicates an expected call of DeleteEmailIdentity.
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentity", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentity), arg0)
}

// DeleteEmailIdentityPolicy mocks base method.
func (m *MockSESV2API) DeleteEmailIdentityPolicy(arg0 *sesv2.DeleteEmailIdentityPolicyInput) (*sesv2.DeleteEmailIdentityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentityPolicy", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteEmailIdentityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentityPolicy indicates an expected call of DeleteEmailIdentityPolicy.
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityPolicy", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentityPolicy), arg0)
}

// DeleteEmailIdentityPolicyRequest mocks base method.
func (m *MockSESV2API) DeleteEmailIdentityPolicyRequest(arg0 *sesv2.DeleteEmailIdentityPolicyInput) (*request.Request, *sesv2.DeleteEmailIdentityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteEmailIdentityPolicyOutput)
	return ret0, ret1
}

// DeleteEmailIdentityPolicyRequest indicates an expected call of DeleteEmailIdentityPolicyRequest.
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityPolicyRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentityPolicyRequest), arg0)
}

// DeleteEmailIdentityPolicyWithContext mocks base method.
func (m *MockSESV2API) DeleteEmailIdentityPolicyWithContext(arg0 context.Context, arg1 *sesv2.DeleteEmailIdentityPolicyInput, arg2 ...request.Option) (*sesv2.DeleteEmailIdentityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailIdentityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteEmailIdentityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentityPolicyWithContext indicates an expected call of DeleteEmailIdentityPolicyWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityPolicyWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentityPolicyWithContext), varargs...)
}

// DeleteEmailIdentityRequest mocks base method.
func (m *MockSESV2API) DeleteEmailIdentityRequest(arg0 *sesv2.DeleteEmailIdentityInput) (*request.Request, *sesv2.DeleteEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteEmailIdentityOutput)
	return ret0, ret1
}

// DeleteEmailIdentityRequest indicates an expected call of DeleteEmailIdentityRequest.
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentityRequest), arg0)
}

// DeleteEmailIdentityWithContext mocks base method.
func (m *MockSESV2API) DeleteEmailIdentityWithContext(arg0 context.Context, arg1 *sesv2.DeleteEmailIdentityInput, arg2 ...request.Option) (*sesv2.DeleteEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailIdentityWithContext indicates an expected call of DeleteEmailIdentityWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailIdentityWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailIdentityWithContext), varargs...)
}

// DeleteEmailTemplate mocks base method.
func (m *MockSESV2API) DeleteEmailTemplate(arg0 *sesv2.DeleteEmailTemplateInput) (*sesv2.DeleteEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailTemplate indicates an expected call of DeleteEmailTemplate.
func (mr *MockSESV2APIMockRecorder) DeleteEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailTemplate), arg0)
}

// DeleteEmailTemplateRequest mocks base method.
func (m *MockSESV2API) DeleteEmailTemplateRequest(arg0 *sesv2.DeleteEmailTemplateInput) (*request.Request, *sesv2.DeleteEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteEmailTemplateOutput)
	return ret0, ret1
}

// DeleteEmailTemplateRequest indicates an expected call of DeleteEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) DeleteEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailTemplateRequest), arg0)
}

// DeleteEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) DeleteEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.DeleteEmailTemplateInput, arg2 ...request.Option) (*sesv2.DeleteEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailTemplateWithContext indicates an expected call of DeleteEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteEmailTemplateWithContext), varargs...)
}

// DeleteSuppressedDestination mocks base method.
func (m *MockSESV2API) DeleteSuppressedDestination(arg0 *sesv2.DeleteSuppressedDestinationInput) (*sesv2.DeleteSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuppressedDestination", arg0)
	ret0, _ := ret[0].(*sesv2.DeleteSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSuppressedDestination indicates an expected call of DeleteSuppressedDestination.
func (mr *MockSESV2APIMockRecorder) DeleteSuppressedDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuppressedDestination", reflect.TypeOf((*MockSESV2API)(nil).DeleteSuppressedDestination), arg0)
}

// DeleteSuppressedDestinationRequest mocks base method.
func (m *MockSESV2API) DeleteSuppressedDestinationRequest(arg0 *sesv2.DeleteSuppressedDestinationInput) (*request.Request, *sesv2.DeleteSuppressedDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuppressedDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.DeleteSuppressedDestinationOutput)
	return ret0, ret1
}

// DeleteSuppressedDestinationRequest indicates an expected call of DeleteSuppressedDestinationRequest.
func (mr *MockSESV2APIMockRecorder) DeleteSuppressedDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuppressedDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).DeleteSuppressedDestinationRequest), arg0)
}

// DeleteSuppressedDestinationWithContext mocks base method.
func (m *MockSESV2API) DeleteSuppressedDestinationWithContext(arg0 context.Context, arg1 *sesv2.DeleteSuppressedDestinationInput, arg2 ...request.Option) (*sesv2.DeleteSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSuppressedDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.DeleteSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSuppressedDestinationWithContext indicates an expected call of DeleteSuppressedDestinationWithContext.
func (mr *MockSESV2APIMockRecorder) DeleteSuppressedDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuppressedDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).DeleteSuppressedDestinationWithContext), varargs...)
}

// GetAccount mocks base method.
func (m *MockSESV2API) GetAccount(arg0 *sesv2.GetAccountInput) (*sesv2.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*sesv2.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockSESV2APIMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockSESV2API)(nil).GetAccount), arg0)
}

// GetAccountRequest mocks base method.
func (m *MockSESV2API) GetAccountRequest(arg0 *sesv2.GetAccountInput) (*request.Request, *sesv2.GetAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetAccountOutput)
	return ret0, ret1
}

// GetAccountRequest indicates an expected call of GetAccountRequest.
func (mr *MockSESV2APIMockRecorder) GetAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRequest", reflect.TypeOf((*MockSESV2API)(nil).GetAccountRequest), arg0)
}

// GetAccountWithContext mocks base method.
func (m *MockSESV2API) GetAccountWithContext(arg0 context.Context, arg1 *sesv2.GetAccountInput, arg2 ...request.Option) (*sesv2.GetAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithContext indicates an expected call of GetAccountWithContext.
func (mr *MockSESV2APIMockRecorder) GetAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetAccountWithContext), varargs...)
}

// GetBlacklistReports mocks base method.
func (m *MockSESV2API) GetBlacklistReports(arg0 *sesv2.GetBlacklistReportsInput) (*sesv2.GetBlacklistReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklistReports", arg0)
	ret0, _ := ret[0].(*sesv2.GetBlacklistReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlacklistReports indicates an expected call of GetBlacklistReports.
func (mr *MockSESV2APIMockRecorder) GetBlacklistReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReports", reflect.TypeOf((*MockSESV2API)(nil).GetBlacklistReports), arg0)
}

// GetBlacklistReportsRequest mocks base method.
func (m *MockSESV2API) GetBlacklistReportsRequest(arg0 *sesv2.GetBlacklistReportsInput) (*request.Request, *sesv2.GetBlacklistReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklistReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetBlacklistReportsOutput)
	return ret0, ret1
}

// GetBlacklistReportsRequest indicates an expected call of GetBlacklistReportsRequest.
func (mr *MockSESV2APIMockRecorder) GetBlacklistReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReportsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetBlacklistReportsRequest), arg0)
}

// GetBlacklistReportsWithContext mocks base method.
func (m *MockSESV2API) GetBlacklistReportsWithContext(arg0 context.Context, arg1 *sesv2.GetBlacklistReportsInput, arg2 ...request.Option) (*sesv2.GetBlacklistReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlacklistReportsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetBlacklistReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlacklistReportsWithContext indicates an expected call of GetBlacklistReportsWithContext.
func (mr *MockSESV2APIMockRecorder) GetBlacklistReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistReportsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetBlacklistReportsWithContext), varargs...)
}

// GetConfigurationSet mocks base method.
func (m *MockSESV2API) GetConfigurationSet(arg0 *sesv2.GetConfigurationSetInput) (*sesv2.GetConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSet", arg0)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSet indicates an expected call of GetConfigurationSet.
func (mr *MockSESV2APIMockRecorder) GetConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSet", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSet), arg0)
}

// GetConfigurationSetEventDestinations mocks base method.
func (m *MockSESV2API) GetConfigurationSetEventDestinations(arg0 *sesv2.GetConfigurationSetEventDestinationsInput) (*sesv2.GetConfigurationSetEventDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinations", arg0)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetEventDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetEventDestinations indicates an expected call of GetConfigurationSetEventDestinations.
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetEventDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinations", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetEventDestinations), arg0)
}

// GetConfigurationSetEventDestinationsRequest mocks base method.
func (m *MockSESV2API) GetConfigurationSetEventDestinationsRequest(arg0 *sesv2.GetConfigurationSetEventDestinationsInput) (*request.Request, *sesv2.GetConfigurationSetEventDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetConfigurationSetEventDestinationsOutput)
	return ret0, ret1
}

// GetConfigurationSetEventDestinationsRequest indicates an expected call of GetConfigurationSetEventDestinationsRequest.
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetEventDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinationsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetEventDestinationsRequest), arg0)
}

// GetConfigurationSetEventDestinationsWithContext mocks base method.
func (m *MockSESV2API) GetConfigurationSetEventDestinationsWithContext(arg0 context.Context, arg1 *sesv2.GetConfigurationSetEventDestinationsInput, arg2 ...request.Option) (*sesv2.GetConfigurationSetEventDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationSetEventDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetEventDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetEventDestinationsWithContext indicates an expected call of GetConfigurationSetEventDestinationsWithContext.
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetEventDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetEventDestinationsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetEventDestinationsWithContext), varargs...)
}

// GetConfigurationSetRequest mocks base method.
func (m *MockSESV2API) GetConfigurationSetRequest(arg0 *sesv2.GetConfigurationSetInput) (*request.Request, *sesv2.GetConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetConfigurationSetOutput)
	return ret0, ret1
}

// GetConfigurationSetRequest indicates an expected call of GetConfigurationSetRequest.
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetRequest", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetRequest), arg0)
}

// GetConfigurationSetWithContext mocks base method.
func (m *MockSESV2API) GetConfigurationSetWithContext(arg0 context.Context, arg1 *sesv2.GetConfigurationSetInput, arg2 ...request.Option) (*sesv2.GetConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationSetWithContext indicates an expected call of GetConfigurationSetWithContext.
func (mr *MockSESV2APIMockRecorder) GetConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationSetWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetConfigurationSetWithContext), varargs...)
}

// GetContact mocks base method.
func (m *MockSESV2API) GetContact(arg0 *sesv2.GetContactInput) (*sesv2.GetContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(*sesv2.GetContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockSESV2APIMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockSESV2API)(nil).GetContact), arg0)
}

// GetContactList mocks base method.
func (m *MockSESV2API) GetContactList(arg0 *sesv2.GetContactListInput) (*sesv2.GetContactListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactList", arg0)
	ret0, _ := ret[0].(*sesv2.GetContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactList indicates an expected call of GetContactList.
func (mr *MockSESV2APIMockRecorder) GetContactList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactList", reflect.TypeOf((*MockSESV2API)(nil).GetContactList), arg0)
}

// GetContactListRequest mocks base method.
func (m *MockSESV2API) GetContactListRequest(arg0 *sesv2.GetContactListInput) (*request.Request, *sesv2.GetContactListOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactListRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetContactListOutput)
	return ret0, ret1
}

// GetContactListRequest indicates an expected call of GetContactListRequest.
func (mr *MockSESV2APIMockRecorder) GetContactListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactListRequest", reflect.TypeOf((*MockSESV2API)(nil).GetContactListRequest), arg0)
}

// GetContactListWithContext mocks base method.
func (m *MockSESV2API) GetContactListWithContext(arg0 context.Context, arg1 *sesv2.GetContactListInput, arg2 ...request.Option) (*sesv2.GetContactListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactListWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactListWithContext indicates an expected call of GetContactListWithContext.
func (mr *MockSESV2APIMockRecorder) GetContactListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactListWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetContactListWithContext), varargs...)
}

// GetContactRequest mocks base method.
func (m *MockSESV2API) GetContactRequest(arg0 *sesv2.GetContactInput) (*request.Request, *sesv2.GetContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetContactOutput)
	return ret0, ret1
}

// GetContactRequest indicates an expected call of GetContactRequest.
func (mr *MockSESV2APIMockRecorder) GetContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactRequest", reflect.TypeOf((*MockSESV2API)(nil).GetContactRequest), arg0)
}

// GetContactWithContext mocks base method.
func (m *MockSESV2API) GetContactWithContext(arg0 context.Context, arg1 *sesv2.GetContactInput, arg2 ...request.Option) (*sesv2.GetContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactWithContext indicates an expected call of GetContactWithContext.
func (mr *MockSESV2APIMockRecorder) GetContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetContactWithContext), varargs...)
}

// GetCustomVerificationEmailTemplate mocks base method.
func (m *MockSESV2API) GetCustomVerificationEmailTemplate(arg0 *sesv2.GetCustomVerificationEmailTemplateInput) (*sesv2.GetCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomVerificationEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.GetCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomVerificationEmailTemplate indicates an expected call of GetCustomVerificationEmailTemplate.
func (mr *MockSESV2APIMockRecorder) GetCustomVerificationEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomVerificationEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).GetCustomVerificationEmailTemplate), arg0)
}

// GetCustomVerificationEmailTemplateRequest mocks base method.
func (m *MockSESV2API) GetCustomVerificationEmailTemplateRequest(arg0 *sesv2.GetCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.GetCustomVerificationEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomVerificationEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetCustomVerificationEmailTemplateOutput)
	return ret0, ret1
}

// GetCustomVerificationEmailTemplateRequest indicates an expected call of GetCustomVerificationEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) GetCustomVerificationEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomVerificationEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).GetCustomVerificationEmailTemplateRequest), arg0)
}

// GetCustomVerificationEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) GetCustomVerificationEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.GetCustomVerificationEmailTemplateInput, arg2 ...request.Option) (*sesv2.GetCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomVerificationEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomVerificationEmailTemplateWithContext indicates an expected call of GetCustomVerificationEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) GetCustomVerificationEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomVerificationEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetCustomVerificationEmailTemplateWithContext), varargs...)
}

// GetDedicatedIp mocks base method.
func (m *MockSESV2API) GetDedicatedIp(arg0 *sesv2.GetDedicatedIpInput) (*sesv2.GetDedicatedIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIp", arg0)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIp indicates an expected call of GetDedicatedIp.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIp", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIp), arg0)
}

// GetDedicatedIpRequest mocks base method.
func (m *MockSESV2API) GetDedicatedIpRequest(arg0 *sesv2.GetDedicatedIpInput) (*request.Request, *sesv2.GetDedicatedIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDedicatedIpOutput)
	return ret0, ret1
}

// GetDedicatedIpRequest indicates an expected call of GetDedicatedIpRequest.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpRequest), arg0)
}

// GetDedicatedIpWithContext mocks base method.
func (m *MockSESV2API) GetDedicatedIpWithContext(arg0 context.Context, arg1 *sesv2.GetDedicatedIpInput, arg2 ...request.Option) (*sesv2.GetDedicatedIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIpWithContext indicates an expected call of GetDedicatedIpWithContext.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpWithContext), varargs...)
}

// GetDedicatedIps mocks base method.
func (m *MockSESV2API) GetDedicatedIps(arg0 *sesv2.GetDedicatedIpsInput) (*sesv2.GetDedicatedIpsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIps", arg0)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIps indicates an expected call of GetDedicatedIps.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIps", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIps), arg0)
}

// GetDedicatedIpsPages mocks base method.
func (m *MockSESV2API) GetDedicatedIpsPages(arg0 *sesv2.GetDedicatedIpsInput, arg1 func(*sesv2.GetDedicatedIpsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDedicatedIpsPages indicates an expected call of GetDedicatedIpsPages.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsPages", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsPages), arg0, arg1)
}

// GetDedicatedIpsPagesWithContext mocks base method.
func (m *MockSESV2API) GetDedicatedIpsPagesWithContext(arg0 context.Context, arg1 *sesv2.GetDedicatedIpsInput, arg2 func(*sesv2.GetDedicatedIpsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDedicatedIpsPagesWithContext indicates an expected call of GetDedicatedIpsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsPagesWithContext), varargs...)
}

// GetDedicatedIpsRequest mocks base method.
func (m *MockSESV2API) GetDedicatedIpsRequest(arg0 *sesv2.GetDedicatedIpsInput) (*request.Request, *sesv2.GetDedicatedIpsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDedicatedIpsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDedicatedIpsOutput)
	return ret0, ret1
}

// GetDedicatedIpsRequest indicates an expected call of GetDedicatedIpsRequest.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsRequest), arg0)
}

// GetDedicatedIpsWithContext mocks base method.
func (m *MockSESV2API) GetDedicatedIpsWithContext(arg0 context.Context, arg1 *sesv2.GetDedicatedIpsInput, arg2 ...request.Option) (*sesv2.GetDedicatedIpsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDedicatedIpsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDedicatedIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDedicatedIpsWithContext indicates an expected call of GetDedicatedIpsWithContext.
func (mr *MockSESV2APIMockRecorder) GetDedicatedIpsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDedicatedIpsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDedicatedIpsWithContext), varargs...)
}

// GetDeliverabilityDashboardOptions mocks base method.
func (m *MockSESV2API) GetDeliverabilityDashboardOptions(arg0 *sesv2.GetDeliverabilityDashboardOptionsInput) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptions", arg0)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityDashboardOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptions indicates an expected call of GetDeliverabilityDashboardOptions.
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityDashboardOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptions", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityDashboardOptions), arg0)
}

// GetDeliverabilityDashboardOptionsRequest mocks base method.
func (m *MockSESV2API) GetDeliverabilityDashboardOptionsRequest(arg0 *sesv2.GetDeliverabilityDashboardOptionsInput) (*request.Request, *sesv2.GetDeliverabilityDashboardOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDeliverabilityDashboardOptionsOutput)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptionsRequest indicates an expected call of GetDeliverabilityDashboardOptionsRequest.
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityDashboardOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityDashboardOptionsRequest), arg0)
}

// GetDeliverabilityDashboardOptionsWithContext mocks base method.
func (m *MockSESV2API) GetDeliverabilityDashboardOptionsWithContext(arg0 context.Context, arg1 *sesv2.GetDeliverabilityDashboardOptionsInput, arg2 ...request.Option) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeliverabilityDashboardOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityDashboardOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityDashboardOptionsWithContext indicates an expected call of GetDeliverabilityDashboardOptionsWithContext.
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityDashboardOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityDashboardOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityDashboardOptionsWithContext), varargs...)
}

// GetDeliverabilityTestReport mocks base method.
func (m *MockSESV2API) GetDeliverabilityTestReport(arg0 *sesv2.GetDeliverabilityTestReportInput) (*sesv2.GetDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReport", arg0)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityTestReport indicates an expected call of GetDeliverabilityTestReport.
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityTestReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReport", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityTestReport), arg0)
}

// GetDeliverabilityTestReportRequest mocks base method.
func (m *MockSESV2API) GetDeliverabilityTestReportRequest(arg0 *sesv2.GetDeliverabilityTestReportInput) (*request.Request, *sesv2.GetDeliverabilityTestReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDeliverabilityTestReportOutput)
	return ret0, ret1
}

// GetDeliverabilityTestReportRequest indicates an expected call of GetDeliverabilityTestReportRequest.
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityTestReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReportRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityTestReportRequest), arg0)
}

// GetDeliverabilityTestReportWithContext mocks base method.
func (m *MockSESV2API) GetDeliverabilityTestReportWithContext(arg0 context.Context, arg1 *sesv2.GetDeliverabilityTestReportInput, arg2 ...request.Option) (*sesv2.GetDeliverabilityTestReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeliverabilityTestReportWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDeliverabilityTestReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliverabilityTestReportWithContext indicates an expected call of GetDeliverabilityTestReportWithContext.
func (mr *MockSESV2APIMockRecorder) GetDeliverabilityTestReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliverabilityTestReportWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDeliverabilityTestReportWithContext), varargs...)
}

// GetDomainDeliverabilityCampaign mocks base method.
func (m *MockSESV2API) GetDomainDeliverabilityCampaign(arg0 *sesv2.GetDomainDeliverabilityCampaignInput) (*sesv2.GetDomainDeliverabilityCampaignOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaign", arg0)
	ret0, _ := ret[0].(*sesv2.GetDomainDeliverabilityCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaign indicates an expected call of GetDomainDeliverabilityCampaign.
func (mr *MockSESV2APIMockRecorder) GetDomainDeliverabilityCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaign", reflect.TypeOf((*MockSESV2API)(nil).GetDomainDeliverabilityCampaign), arg0)
}

// GetDomainDeliverabilityCampaignRequest mocks base method.
func (m *MockSESV2API) GetDomainDeliverabilityCampaignRequest(arg0 *sesv2.GetDomainDeliverabilityCampaignInput) (*request.Request, *sesv2.GetDomainDeliverabilityCampaignOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaignRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDomainDeliverabilityCampaignOutput)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaignRequest indicates an expected call of GetDomainDeliverabilityCampaignRequest.
func (mr *MockSESV2APIMockRecorder) GetDomainDeliverabilityCampaignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaignRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDomainDeliverabilityCampaignRequest), arg0)
}

// GetDomainDeliverabilityCampaignWithContext mocks base method.
func (m *MockSESV2API) GetDomainDeliverabilityCampaignWithContext(arg0 context.Context, arg1 *sesv2.GetDomainDeliverabilityCampaignInput, arg2 ...request.Option) (*sesv2.GetDomainDeliverabilityCampaignOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainDeliverabilityCampaignWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDomainDeliverabilityCampaignOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDeliverabilityCampaignWithContext indicates an expected call of GetDomainDeliverabilityCampaignWithContext.
func (mr *MockSESV2APIMockRecorder) GetDomainDeliverabilityCampaignWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDeliverabilityCampaignWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDomainDeliverabilityCampaignWithContext), varargs...)
}

// GetDomainStatisticsReport mocks base method.
func (m *MockSESV2API) GetDomainStatisticsReport(arg0 *sesv2.GetDomainStatisticsReportInput) (*sesv2.GetDomainStatisticsReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStatisticsReport", arg0)
	ret0, _ := ret[0].(*sesv2.GetDomainStatisticsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStatisticsReport indicates an expected call of GetDomainStatisticsReport.
func (mr *MockSESV2APIMockRecorder) GetDomainStatisticsReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReport", reflect.TypeOf((*MockSESV2API)(nil).GetDomainStatisticsReport), arg0)
}

// GetDomainStatisticsReportRequest mocks base method.
func (m *MockSESV2API) GetDomainStatisticsReportRequest(arg0 *sesv2.GetDomainStatisticsReportInput) (*request.Request, *sesv2.GetDomainStatisticsReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStatisticsReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetDomainStatisticsReportOutput)
	return ret0, ret1
}

// GetDomainStatisticsReportRequest indicates an expected call of GetDomainStatisticsReportRequest.
func (mr *MockSESV2APIMockRecorder) GetDomainStatisticsReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReportRequest", reflect.TypeOf((*MockSESV2API)(nil).GetDomainStatisticsReportRequest), arg0)
}

// GetDomainStatisticsReportWithContext mocks base method.
func (m *MockSESV2API) GetDomainStatisticsReportWithContext(arg0 context.Context, arg1 *sesv2.GetDomainStatisticsReportInput, arg2 ...request.Option) (*sesv2.GetDomainStatisticsReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainStatisticsReportWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetDomainStatisticsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStatisticsReportWithContext indicates an expected call of GetDomainStatisticsReportWithContext.
func (mr *MockSESV2APIMockRecorder) GetDomainStatisticsReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStatisticsReportWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetDomainStatisticsReportWithContext), varargs...)
}

// GetEmailIdentity mocks base method.
func (m *MockSESV2API) GetEmailIdentity(arg0 *sesv2.GetEmailIdentityInput) (*sesv2.GetEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentity", arg0)
	ret0, _ := ret[0].(*sesv2.GetEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentity indicates an expected call of GetEmailIdentity.
func (mr *MockSESV2APIMockRecorder) GetEmailIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentity", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentity), arg0)
}

// GetEmailIdentityPolicies mocks base method.
func (m *MockSESV2API) GetEmailIdentityPolicies(arg0 *sesv2.GetEmailIdentityPoliciesInput) (*sesv2.GetEmailIdentityPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentityPolicies", arg0)
	ret0, _ := ret[0].(*sesv2.GetEmailIdentityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentityPolicies indicates an expected call of GetEmailIdentityPolicies.
func (mr *MockSESV2APIMockRecorder) GetEmailIdentityPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityPolicies", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentityPolicies), arg0)
}

// GetEmailIdentityPoliciesRequest mocks base method.
func (m *MockSESV2API) GetEmailIdentityPoliciesRequest(arg0 *sesv2.GetEmailIdentityPoliciesInput) (*request.Request, *sesv2.GetEmailIdentityPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentityPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetEmailIdentityPoliciesOutput)
	return ret0, ret1
}

// GetEmailIdentityPoliciesRequest indicates an expected call of GetEmailIdentityPoliciesRequest.
func (mr *MockSESV2APIMockRecorder) GetEmailIdentityPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityPoliciesRequest", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentityPoliciesRequest), arg0)
}

// GetEmailIdentityPoliciesWithContext mocks base method.
func (m *MockSESV2API) GetEmailIdentityPoliciesWithContext(arg0 context.Context, arg1 *sesv2.GetEmailIdentityPoliciesInput, arg2 ...request.Option) (*sesv2.GetEmailIdentityPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailIdentityPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetEmailIdentityPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentityPoliciesWithContext indicates an expected call of GetEmailIdentityPoliciesWithContext.
func (mr *MockSESV2APIMockRecorder) GetEmailIdentityPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityPoliciesWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentityPoliciesWithContext), varargs...)
}

// GetEmailIdentityRequest mocks base method.
func (m *MockSESV2API) GetEmailIdentityRequest(arg0 *sesv2.GetEmailIdentityInput) (*request.Request, *sesv2.GetEmailIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetEmailIdentityOutput)
	return ret0, ret1
}

// GetEmailIdentityRequest indicates an expected call of GetEmailIdentityRequest.
func (mr *MockSESV2APIMockRecorder) GetEmailIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityRequest", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentityRequest), arg0)
}

// GetEmailIdentityWithContext mocks base method.
func (m *MockSESV2API) GetEmailIdentityWithContext(arg0 context.Context, arg1 *sesv2.GetEmailIdentityInput, arg2 ...request.Option) (*sesv2.GetEmailIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetEmailIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailIdentityWithContext indicates an expected call of GetEmailIdentityWithContext.
func (mr *MockSESV2APIMockRecorder) GetEmailIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailIdentityWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetEmailIdentityWithContext), varargs...)
}

// GetEmailTemplate mocks base method.
func (m *MockSESV2API) GetEmailTemplate(arg0 *sesv2.GetEmailTemplateInput) (*sesv2.GetEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.GetEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailTemplate indicates an expected call of GetEmailTemplate.
func (mr *MockSESV2APIMockRecorder) GetEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).GetEmailTemplate), arg0)
}

// GetEmailTemplateRequest mocks base method.
func (m *MockSESV2API) GetEmailTemplateRequest(arg0 *sesv2.GetEmailTemplateInput) (*request.Request, *sesv2.GetEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetEmailTemplateOutput)
	return ret0, ret1
}

// GetEmailTemplateRequest indicates an expected call of GetEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) GetEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).GetEmailTemplateRequest), arg0)
}

// GetEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) GetEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.GetEmailTemplateInput, arg2 ...request.Option) (*sesv2.GetEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailTemplateWithContext indicates an expected call of GetEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) GetEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetEmailTemplateWithContext), varargs...)
}

// GetImportJob mocks base method.
func (m *MockSESV2API) GetImportJob(arg0 *sesv2.GetImportJobInput) (*sesv2.GetImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportJob", arg0)
	ret0, _ := ret[0].(*sesv2.GetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportJob indicates an expected call of GetImportJob.
func (mr *MockSESV2APIMockRecorder) GetImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportJob", reflect.TypeOf((*MockSESV2API)(nil).GetImportJob), arg0)
}

// GetImportJobRequest mocks base method.
func (m *MockSESV2API) GetImportJobRequest(arg0 *sesv2.GetImportJobInput) (*request.Request, *sesv2.GetImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetImportJobOutput)
	return ret0, ret1
}

// GetImportJobRequest indicates an expected call of GetImportJobRequest.
func (mr *MockSESV2APIMockRecorder) GetImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportJobRequest", reflect.TypeOf((*MockSESV2API)(nil).GetImportJobRequest), arg0)
}

// GetImportJobWithContext mocks base method.
func (m *MockSESV2API) GetImportJobWithContext(arg0 context.Context, arg1 *sesv2.GetImportJobInput, arg2 ...request.Option) (*sesv2.GetImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportJobWithContext indicates an expected call of GetImportJobWithContext.
func (mr *MockSESV2APIMockRecorder) GetImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportJobWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetImportJobWithContext), varargs...)
}

// GetSuppressedDestination mocks base method.
func (m *MockSESV2API) GetSuppressedDestination(arg0 *sesv2.GetSuppressedDestinationInput) (*sesv2.GetSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuppressedDestination", arg0)
	ret0, _ := ret[0].(*sesv2.GetSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuppressedDestination indicates an expected call of GetSuppressedDestination.
func (mr *MockSESV2APIMockRecorder) GetSuppressedDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuppressedDestination", reflect.TypeOf((*MockSESV2API)(nil).GetSuppressedDestination), arg0)
}

// GetSuppressedDestinationRequest mocks base method.
func (m *MockSESV2API) GetSuppressedDestinationRequest(arg0 *sesv2.GetSuppressedDestinationInput) (*request.Request, *sesv2.GetSuppressedDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuppressedDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.GetSuppressedDestinationOutput)
	return ret0, ret1
}

// GetSuppressedDestinationRequest indicates an expected call of GetSuppressedDestinationRequest.
func (mr *MockSESV2APIMockRecorder) GetSuppressedDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuppressedDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).GetSuppressedDestinationRequest), arg0)
}

// GetSuppressedDestinationWithContext mocks base method.
func (m *MockSESV2API) GetSuppressedDestinationWithContext(arg0 context.Context, arg1 *sesv2.GetSuppressedDestinationInput, arg2 ...request.Option) (*sesv2.GetSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuppressedDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.GetSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuppressedDestinationWithContext indicates an expected call of GetSuppressedDestinationWithContext.
func (mr *MockSESV2APIMockRecorder) GetSuppressedDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuppressedDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).GetSuppressedDestinationWithContext), varargs...)
}

// ListConfigurationSets mocks base method.
func (m *MockSESV2API) ListConfigurationSets(arg0 *sesv2.ListConfigurationSetsInput) (*sesv2.ListConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSets", arg0)
	ret0, _ := ret[0].(*sesv2.ListConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSets indicates an expected call of ListConfigurationSets.
func (mr *MockSESV2APIMockRecorder) ListConfigurationSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSets", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSets), arg0)
}

// ListConfigurationSetsPages mocks base method.
func (m *MockSESV2API) ListConfigurationSetsPages(arg0 *sesv2.ListConfigurationSetsInput, arg1 func(*sesv2.ListConfigurationSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationSetsPages indicates an expected call of ListConfigurationSetsPages.
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsPages", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsPages), arg0, arg1)
}

// ListConfigurationSetsPagesWithContext mocks base method.
func (m *MockSESV2API) ListConfigurationSetsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListConfigurationSetsInput, arg2 func(*sesv2.ListConfigurationSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListConfigurationSetsPagesWithContext indicates an expected call of ListConfigurationSetsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsPagesWithContext), varargs...)
}

// ListConfigurationSetsRequest mocks base method.
func (m *MockSESV2API) ListConfigurationSetsRequest(arg0 *sesv2.ListConfigurationSetsInput) (*request.Request, *sesv2.ListConfigurationSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListConfigurationSetsOutput)
	return ret0, ret1
}

// ListConfigurationSetsRequest indicates an expected call of ListConfigurationSetsRequest.
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsRequest), arg0)
}

// ListConfigurationSetsWithContext mocks base method.
func (m *MockSESV2API) ListConfigurationSetsWithContext(arg0 context.Context, arg1 *sesv2.ListConfigurationSetsInput, arg2 ...request.Option) (*sesv2.ListConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConfigurationSetsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSetsWithContext indicates an expected call of ListConfigurationSetsWithContext.
func (mr *MockSESV2APIMockRecorder) ListConfigurationSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSetsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListConfigurationSetsWithContext), varargs...)
}

// ListContactLists mocks base method.
func (m *MockSESV2API) ListContactLists(arg0 *sesv2.ListContactListsInput) (*sesv2.ListContactListsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactLists", arg0)
	ret0, _ := ret[0].(*sesv2.ListContactListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactLists indicates an expected call of ListContactLists.
func (mr *MockSESV2APIMockRecorder) ListContactLists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactLists", reflect.TypeOf((*MockSESV2API)(nil).ListContactLists), arg0)
}

// ListContactListsPages mocks base method.
func (m *MockSESV2API) ListContactListsPages(arg0 *sesv2.ListContactListsInput, arg1 func(*sesv2.ListContactListsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactListsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactListsPages indicates an expected call of ListContactListsPages.
func (mr *MockSESV2APIMockRecorder) ListContactListsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactListsPages", reflect.TypeOf((*MockSESV2API)(nil).ListContactListsPages), arg0, arg1)
}

// ListContactListsPagesWithContext mocks base method.
func (m *MockSESV2API) ListContactListsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListContactListsInput, arg2 func(*sesv2.ListContactListsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactListsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactListsPagesWithContext indicates an expected call of ListContactListsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListContactListsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactListsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListContactListsPagesWithContext), varargs...)
}

// ListContactListsRequest mocks base method.
func (m *MockSESV2API) ListContactListsRequest(arg0 *sesv2.ListContactListsInput) (*request.Request, *sesv2.ListContactListsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactListsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListContactListsOutput)
	return ret0, ret1
}

// ListContactListsRequest indicates an expected call of ListContactListsRequest.
func (mr *MockSESV2APIMockRecorder) ListContactListsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactListsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListContactListsRequest), arg0)
}

// ListContactListsWithContext mocks base method.
func (m *MockSESV2API) ListContactListsWithContext(arg0 context.Context, arg1 *sesv2.ListContactListsInput, arg2 ...request.Option) (*sesv2.ListContactListsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactListsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListContactListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactListsWithContext indicates an expected call of ListContactListsWithContext.
func (mr *MockSESV2APIMockRecorder) ListContactListsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactListsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListContactListsWithContext), varargs...)
}

// ListContacts mocks base method.
func (m *MockSESV2API) ListContacts(arg0 *sesv2.ListContactsInput) (*sesv2.ListContactsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", arg0)
	ret0, _ := ret[0].(*sesv2.ListContactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockSESV2APIMockRecorder) ListContacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockSESV2API)(nil).ListContacts), arg0)
}

// ListContactsPages mocks base method.
func (m *MockSESV2API) ListContactsPages(arg0 *sesv2.ListContactsInput, arg1 func(*sesv2.ListContactsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactsPages indicates an expected call of ListContactsPages.
func (mr *MockSESV2APIMockRecorder) ListContactsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsPages", reflect.TypeOf((*MockSESV2API)(nil).ListContactsPages), arg0, arg1)
}

// ListContactsPagesWithContext mocks base method.
func (m *MockSESV2API) ListContactsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListContactsInput, arg2 func(*sesv2.ListContactsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactsPagesWithContext indicates an expected call of ListContactsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListContactsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListContactsPagesWithContext), varargs...)
}

// ListContactsRequest mocks base method.
func (m *MockSESV2API) ListContactsRequest(arg0 *sesv2.ListContactsInput) (*request.Request, *sesv2.ListContactsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListContactsOutput)
	return ret0, ret1
}

// ListContactsRequest indicates an expected call of ListContactsRequest.
func (mr *MockSESV2APIMockRecorder) ListContactsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListContactsRequest), arg0)
}

// ListContactsWithContext mocks base method.
func (m *MockSESV2API) ListContactsWithContext(arg0 context.Context, arg1 *sesv2.ListContactsInput, arg2 ...request.Option) (*sesv2.ListContactsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListContactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactsWithContext indicates an expected call of ListContactsWithContext.
func (mr *MockSESV2APIMockRecorder) ListContactsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListContactsWithContext), varargs...)
}

// ListCustomVerificationEmailTemplates mocks base method.
func (m *MockSESV2API) ListCustomVerificationEmailTemplates(arg0 *sesv2.ListCustomVerificationEmailTemplatesInput) (*sesv2.ListCustomVerificationEmailTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomVerificationEmailTemplates", arg0)
	ret0, _ := ret[0].(*sesv2.ListCustomVerificationEmailTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomVerificationEmailTemplates indicates an expected call of ListCustomVerificationEmailTemplates.
func (mr *MockSESV2APIMockRecorder) ListCustomVerificationEmailTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomVerificationEmailTemplates", reflect.TypeOf((*MockSESV2API)(nil).ListCustomVerificationEmailTemplates), arg0)
}

// ListCustomVerificationEmailTemplatesPages mocks base method.
func (m *MockSESV2API) ListCustomVerificationEmailTemplatesPages(arg0 *sesv2.ListCustomVerificationEmailTemplatesInput, arg1 func(*sesv2.ListCustomVerificationEmailTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomVerificationEmailTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomVerificationEmailTemplatesPages indicates an expected call of ListCustomVerificationEmailTemplatesPages.
func (mr *MockSESV2APIMockRecorder) ListCustomVerificationEmailTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomVerificationEmailTemplatesPages", reflect.TypeOf((*MockSESV2API)(nil).ListCustomVerificationEmailTemplatesPages), arg0, arg1)
}

// ListCustomVerificationEmailTemplatesPagesWithContext mocks base method.
func (m *MockSESV2API) ListCustomVerificationEmailTemplatesPagesWithContext(arg0 context.Context, arg1 *sesv2.ListCustomVerificationEmailTemplatesInput, arg2 func(*sesv2.ListCustomVerificationEmailTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomVerificationEmailTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomVerificationEmailTemplatesPagesWithContext indicates an expected call of ListCustomVerificationEmailTemplatesPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListCustomVerificationEmailTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomVerificationEmailTemplatesPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListCustomVerificationEmailTemplatesPagesWithContext), varargs...)
}

// ListCustomVerificationEmailTemplatesRequest mocks base method.
func (m *MockSESV2API) ListCustomVerificationEmailTemplatesRequest(arg0 *sesv2.ListCustomVerificationEmailTemplatesInput) (*request.Request, *sesv2.ListCustomVerificationEmailTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomVerificationEmailTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListCustomVerificationEmailTemplatesOutput)
	return ret0, ret1
}

// ListCustomVerificationEmailTemplatesRequest indicates an expected call of ListCustomVerificationEmailTemplatesRequest.
func (mr *MockSESV2APIMockRecorder) ListCustomVerificationEmailTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomVerificationEmailTemplatesRequest", reflect.TypeOf((*MockSESV2API)(nil).ListCustomVerificationEmailTemplatesRequest), arg0)
}

// ListCustomVerificationEmailTemplatesWithContext mocks base method.
func (m *MockSESV2API) ListCustomVerificationEmailTemplatesWithContext(arg0 context.Context, arg1 *sesv2.ListCustomVerificationEmailTemplatesInput, arg2 ...request.Option) (*sesv2.ListCustomVerificationEmailTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomVerificationEmailTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListCustomVerificationEmailTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomVerificationEmailTemplatesWithContext indicates an expected call of ListCustomVerificationEmailTemplatesWithContext.
func (mr *MockSESV2APIMockRecorder) ListCustomVerificationEmailTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomVerificationEmailTemplatesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListCustomVerificationEmailTemplatesWithContext), varargs...)
}

// ListDedicatedIpPools mocks base method.
func (m *MockSESV2API) ListDedicatedIpPools(arg0 *sesv2.ListDedicatedIpPoolsInput) (*sesv2.ListDedicatedIpPoolsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPools", arg0)
	ret0, _ := ret[0].(*sesv2.ListDedicatedIpPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDedicatedIpPools indicates an expected call of ListDedicatedIpPools.
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPools", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPools), arg0)
}

// ListDedicatedIpPoolsPages mocks base method.
func (m *MockSESV2API) ListDedicatedIpPoolsPages(arg0 *sesv2.ListDedicatedIpPoolsInput, arg1 func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDedicatedIpPoolsPages indicates an expected call of ListDedicatedIpPoolsPages.
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsPages", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsPages), arg0, arg1)
}

// ListDedicatedIpPoolsPagesWithContext mocks base method.
func (m *MockSESV2API) ListDedicatedIpPoolsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListDedicatedIpPoolsInput, arg2 func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDedicatedIpPoolsPagesWithContext indicates an expected call of ListDedicatedIpPoolsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsPagesWithContext), varargs...)
}

// ListDedicatedIpPoolsRequest mocks base method.
func (m *MockSESV2API) ListDedicatedIpPoolsRequest(arg0 *sesv2.ListDedicatedIpPoolsInput) (*request.Request, *sesv2.ListDedicatedIpPoolsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListDedicatedIpPoolsOutput)
	return ret0, ret1
}

// ListDedicatedIpPoolsRequest indicates an expected call of ListDedicatedIpPoolsRequest.
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsRequest), arg0)
}

// ListDedicatedIpPoolsWithContext mocks base method.
func (m *MockSESV2API) ListDedicatedIpPoolsWithContext(arg0 context.Context, arg1 *sesv2.ListDedicatedIpPoolsInput, arg2 ...request.Option) (*sesv2.ListDedicatedIpPoolsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDedicatedIpPoolsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListDedicatedIpPoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDedicatedIpPoolsWithContext indicates an expected call of ListDedicatedIpPoolsWithContext.
func (mr *MockSESV2APIMockRecorder) ListDedicatedIpPoolsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDedicatedIpPoolsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDedicatedIpPoolsWithContext), varargs...)
}

// ListDeliverabilityTestReports mocks base method.
func (m *MockSESV2API) ListDeliverabilityTestReports(arg0 *sesv2.ListDeliverabilityTestReportsInput) (*sesv2.ListDeliverabilityTestReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReports", arg0)
	ret0, _ := ret[0].(*sesv2.ListDeliverabilityTestReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliverabilityTestReports indicates an expected call of ListDeliverabilityTestReports.
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReports", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReports), arg0)
}

// ListDeliverabilityTestReportsPages mocks base method.
func (m *MockSESV2API) ListDeliverabilityTestReportsPages(arg0 *sesv2.ListDeliverabilityTestReportsInput, arg1 func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeliverabilityTestReportsPages indicates an expected call of ListDeliverabilityTestReportsPages.
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsPages", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsPages), arg0, arg1)
}

// ListDeliverabilityTestReportsPagesWithContext mocks base method.
func (m *MockSESV2API) ListDeliverabilityTestReportsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListDeliverabilityTestReportsInput, arg2 func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeliverabilityTestReportsPagesWithContext indicates an expected call of ListDeliverabilityTestReportsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsPagesWithContext), varargs...)
}

// ListDeliverabilityTestReportsRequest mocks base method.
func (m *MockSESV2API) ListDeliverabilityTestReportsRequest(arg0 *sesv2.ListDeliverabilityTestReportsInput) (*request.Request, *sesv2.ListDeliverabilityTestReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListDeliverabilityTestReportsOutput)
	return ret0, ret1
}

// ListDeliverabilityTestReportsRequest indicates an expected call of ListDeliverabilityTestReportsRequest.
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsRequest), arg0)
}

// ListDeliverabilityTestReportsWithContext mocks base method.
func (m *MockSESV2API) ListDeliverabilityTestReportsWithContext(arg0 context.Context, arg1 *sesv2.ListDeliverabilityTestReportsInput, arg2 ...request.Option) (*sesv2.ListDeliverabilityTestReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliverabilityTestReportsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListDeliverabilityTestReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliverabilityTestReportsWithContext indicates an expected call of ListDeliverabilityTestReportsWithContext.
func (mr *MockSESV2APIMockRecorder) ListDeliverabilityTestReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliverabilityTestReportsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDeliverabilityTestReportsWithContext), varargs...)
}

// ListDomainDeliverabilityCampaigns mocks base method.
func (m *MockSESV2API) ListDomainDeliverabilityCampaigns(arg0 *sesv2.ListDomainDeliverabilityCampaignsInput) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaigns", arg0)
	ret0, _ := ret[0].(*sesv2.ListDomainDeliverabilityCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaigns indicates an expected call of ListDomainDeliverabilityCampaigns.
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaigns", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaigns), arg0)
}

// ListDomainDeliverabilityCampaignsPages mocks base method.
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsPages(arg0 *sesv2.ListDomainDeliverabilityCampaignsInput, arg1 func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainDeliverabilityCampaignsPages indicates an expected call of ListDomainDeliverabilityCampaignsPages.
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsPages", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsPages), arg0, arg1)
}

// ListDomainDeliverabilityCampaignsPagesWithContext mocks base method.
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListDomainDeliverabilityCampaignsInput, arg2 func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainDeliverabilityCampaignsPagesWithContext indicates an expected call of ListDomainDeliverabilityCampaignsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsPagesWithContext), varargs...)
}

// ListDomainDeliverabilityCampaignsRequest mocks base method.
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsRequest(arg0 *sesv2.ListDomainDeliverabilityCampaignsInput) (*request.Request, *sesv2.ListDomainDeliverabilityCampaignsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListDomainDeliverabilityCampaignsOutput)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaignsRequest indicates an expected call of ListDomainDeliverabilityCampaignsRequest.
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsRequest), arg0)
}

// ListDomainDeliverabilityCampaignsWithContext mocks base method.
func (m *MockSESV2API) ListDomainDeliverabilityCampaignsWithContext(arg0 context.Context, arg1 *sesv2.ListDomainDeliverabilityCampaignsInput, arg2 ...request.Option) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainDeliverabilityCampaignsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListDomainDeliverabilityCampaignsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainDeliverabilityCampaignsWithContext indicates an expected call of ListDomainDeliverabilityCampaignsWithContext.
func (mr *MockSESV2APIMockRecorder) ListDomainDeliverabilityCampaignsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainDeliverabilityCampaignsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListDomainDeliverabilityCampaignsWithContext), varargs...)
}

// ListEmailIdentities mocks base method.
func (m *MockSESV2API) ListEmailIdentities(arg0 *sesv2.ListEmailIdentitiesInput) (*sesv2.ListEmailIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentities", arg0)
	ret0, _ := ret[0].(*sesv2.ListEmailIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailIdentities indicates an expected call of ListEmailIdentities.
func (mr *MockSESV2APIMockRecorder) ListEmailIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentities", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentities), arg0)
}

// ListEmailIdentitiesPages mocks base method.
func (m *MockSESV2API) ListEmailIdentitiesPages(arg0 *sesv2.ListEmailIdentitiesInput, arg1 func(*sesv2.ListEmailIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailIdentitiesPages indicates an expected call of ListEmailIdentitiesPages.
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesPages", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesPages), arg0, arg1)
}

// ListEmailIdentitiesPagesWithContext mocks base method.
func (m *MockSESV2API) ListEmailIdentitiesPagesWithContext(arg0 context.Context, arg1 *sesv2.ListEmailIdentitiesInput, arg2 func(*sesv2.ListEmailIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailIdentitiesPagesWithContext indicates an expected call of ListEmailIdentitiesPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesPagesWithContext), varargs...)
}

// ListEmailIdentitiesRequest mocks base method.
func (m *MockSESV2API) ListEmailIdentitiesRequest(arg0 *sesv2.ListEmailIdentitiesInput) (*request.Request, *sesv2.ListEmailIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListEmailIdentitiesOutput)
	return ret0, ret1
}

// ListEmailIdentitiesRequest indicates an expected call of ListEmailIdentitiesRequest.
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesRequest", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesRequest), arg0)
}

// ListEmailIdentitiesWithContext mocks base method.
func (m *MockSESV2API) ListEmailIdentitiesWithContext(arg0 context.Context, arg1 *sesv2.ListEmailIdentitiesInput, arg2 ...request.Option) (*sesv2.ListEmailIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListEmailIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailIdentitiesWithContext indicates an expected call of ListEmailIdentitiesWithContext.
func (mr *MockSESV2APIMockRecorder) ListEmailIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailIdentitiesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListEmailIdentitiesWithContext), varargs...)
}

// ListEmailTemplates mocks base method.
func (m *MockSESV2API) ListEmailTemplates(arg0 *sesv2.ListEmailTemplatesInput) (*sesv2.ListEmailTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailTemplates", arg0)
	ret0, _ := ret[0].(*sesv2.ListEmailTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailTemplates indicates an expected call of ListEmailTemplates.
func (mr *MockSESV2APIMockRecorder) ListEmailTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailTemplates", reflect.TypeOf((*MockSESV2API)(nil).ListEmailTemplates), arg0)
}

// ListEmailTemplatesPages mocks base method.
func (m *MockSESV2API) ListEmailTemplatesPages(arg0 *sesv2.ListEmailTemplatesInput, arg1 func(*sesv2.ListEmailTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailTemplatesPages indicates an expected call of ListEmailTemplatesPages.
func (mr *MockSESV2APIMockRecorder) ListEmailTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailTemplatesPages", reflect.TypeOf((*MockSESV2API)(nil).ListEmailTemplatesPages), arg0, arg1)
}

// ListEmailTemplatesPagesWithContext mocks base method.
func (m *MockSESV2API) ListEmailTemplatesPagesWithContext(arg0 context.Context, arg1 *sesv2.ListEmailTemplatesInput, arg2 func(*sesv2.ListEmailTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEmailTemplatesPagesWithContext indicates an expected call of ListEmailTemplatesPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListEmailTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailTemplatesPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListEmailTemplatesPagesWithContext), varargs...)
}

// ListEmailTemplatesRequest mocks base method.
func (m *MockSESV2API) ListEmailTemplatesRequest(arg0 *sesv2.ListEmailTemplatesInput) (*request.Request, *sesv2.ListEmailTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListEmailTemplatesOutput)
	return ret0, ret1
}

// ListEmailTemplatesRequest indicates an expected call of ListEmailTemplatesRequest.
func (mr *MockSESV2APIMockRecorder) ListEmailTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailTemplatesRequest", reflect.TypeOf((*MockSESV2API)(nil).ListEmailTemplatesRequest), arg0)
}

// ListEmailTemplatesWithContext mocks base method.
func (m *MockSESV2API) ListEmailTemplatesWithContext(arg0 context.Context, arg1 *sesv2.ListEmailTemplatesInput, arg2 ...request.Option) (*sesv2.ListEmailTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEmailTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListEmailTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailTemplatesWithContext indicates an expected call of ListEmailTemplatesWithContext.
func (mr *MockSESV2APIMockRecorder) ListEmailTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailTemplatesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListEmailTemplatesWithContext), varargs...)
}

// ListImportJobs mocks base method.
func (m *MockSESV2API) ListImportJobs(arg0 *sesv2.ListImportJobsInput) (*sesv2.ListImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportJobs", arg0)
	ret0, _ := ret[0].(*sesv2.ListImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImportJobs indicates an expected call of ListImportJobs.
func (mr *MockSESV2APIMockRecorder) ListImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobs", reflect.TypeOf((*MockSESV2API)(nil).ListImportJobs), arg0)
}

// ListImportJobsPages mocks base method.
func (m *MockSESV2API) ListImportJobsPages(arg0 *sesv2.ListImportJobsInput, arg1 func(*sesv2.ListImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImportJobsPages indicates an expected call of ListImportJobsPages.
func (mr *MockSESV2APIMockRecorder) ListImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsPages", reflect.TypeOf((*MockSESV2API)(nil).ListImportJobsPages), arg0, arg1)
}

// ListImportJobsPagesWithContext mocks base method.
func (m *MockSESV2API) ListImportJobsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListImportJobsInput, arg2 func(*sesv2.ListImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListImportJobsPagesWithContext indicates an expected call of ListImportJobsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListImportJobsPagesWithContext), varargs...)
}

// ListImportJobsRequest mocks base method.
func (m *MockSESV2API) ListImportJobsRequest(arg0 *sesv2.ListImportJobsInput) (*request.Request, *sesv2.ListImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListImportJobsOutput)
	return ret0, ret1
}

// ListImportJobsRequest indicates an expected call of ListImportJobsRequest.
func (mr *MockSESV2APIMockRecorder) ListImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListImportJobsRequest), arg0)
}

// ListImportJobsWithContext mocks base method.
func (m *MockSESV2API) ListImportJobsWithContext(arg0 context.Context, arg1 *sesv2.ListImportJobsInput, arg2 ...request.Option) (*sesv2.ListImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImportJobsWithContext indicates an expected call of ListImportJobsWithContext.
func (mr *MockSESV2APIMockRecorder) ListImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImportJobsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListImportJobsWithContext), varargs...)
}

// ListSuppressedDestinations mocks base method.
func (m *MockSESV2API) ListSuppressedDestinations(arg0 *sesv2.ListSuppressedDestinationsInput) (*sesv2.ListSuppressedDestinationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuppressedDestinations", arg0)
	ret0, _ := ret[0].(*sesv2.ListSuppressedDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuppressedDestinations indicates an expected call of ListSuppressedDestinations.
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinations", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinations), arg0)
}

// ListSuppressedDestinationsPages mocks base method.
func (m *MockSESV2API) ListSuppressedDestinationsPages(arg0 *sesv2.ListSuppressedDestinationsInput, arg1 func(*sesv2.ListSuppressedDestinationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuppressedDestinationsPages indicates an expected call of ListSuppressedDestinationsPages.
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsPages", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsPages), arg0, arg1)
}

// ListSuppressedDestinationsPagesWithContext mocks base method.
func (m *MockSESV2API) ListSuppressedDestinationsPagesWithContext(arg0 context.Context, arg1 *sesv2.ListSuppressedDestinationsInput, arg2 func(*sesv2.ListSuppressedDestinationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuppressedDestinationsPagesWithContext indicates an expected call of ListSuppressedDestinationsPagesWithContext.
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsPagesWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsPagesWithContext), varargs...)
}

// ListSuppressedDestinationsRequest mocks base method.
func (m *MockSESV2API) ListSuppressedDestinationsRequest(arg0 *sesv2.ListSuppressedDestinationsInput) (*request.Request, *sesv2.ListSuppressedDestinationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListSuppressedDestinationsOutput)
	return ret0, ret1
}

// ListSuppressedDestinationsRequest indicates an expected call of ListSuppressedDestinationsRequest.
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsRequest", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsRequest), arg0)
}

// ListSuppressedDestinationsWithContext mocks base method.
func (m *MockSESV2API) ListSuppressedDestinationsWithContext(arg0 context.Context, arg1 *sesv2.ListSuppressedDestinationsInput, arg2 ...request.Option) (*sesv2.ListSuppressedDestinationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuppressedDestinationsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListSuppressedDestinationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuppressedDestinationsWithContext indicates an expected call of ListSuppressedDestinationsWithContext.
func (mr *MockSESV2APIMockRecorder) ListSuppressedDestinationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuppressedDestinationsWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListSuppressedDestinationsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSESV2API) ListTagsForResource(arg0 *sesv2.ListTagsForResourceInput) (*sesv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*sesv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSESV2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSESV2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockSESV2API) ListTagsForResourceRequest(arg0 *sesv2.ListTagsForResourceInput) (*request.Request, *sesv2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockSESV2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSESV2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockSESV2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *sesv2.ListTagsForResourceInput, arg2 ...request.Option) (*sesv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockSESV2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSESV2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutAccountDedicatedIpWarmupAttributes mocks base method.
func (m *MockSESV2API) PutAccountDedicatedIpWarmupAttributes(arg0 *sesv2.PutAccountDedicatedIpWarmupAttributesInput) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributes indicates an expected call of PutAccountDedicatedIpWarmupAttributes.
func (mr *MockSESV2APIMockRecorder) PutAccountDedicatedIpWarmupAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDedicatedIpWarmupAttributes), arg0)
}

// PutAccountDedicatedIpWarmupAttributesRequest mocks base method.
func (m *MockSESV2API) PutAccountDedicatedIpWarmupAttributesRequest(arg0 *sesv2.PutAccountDedicatedIpWarmupAttributesInput) (*request.Request, *sesv2.PutAccountDedicatedIpWarmupAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributesRequest indicates an expected call of PutAccountDedicatedIpWarmupAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutAccountDedicatedIpWarmupAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDedicatedIpWarmupAttributesRequest), arg0)
}

// PutAccountDedicatedIpWarmupAttributesWithContext mocks base method.
func (m *MockSESV2API) PutAccountDedicatedIpWarmupAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutAccountDedicatedIpWarmupAttributesInput, arg2 ...request.Option) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountDedicatedIpWarmupAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDedicatedIpWarmupAttributesWithContext indicates an expected call of PutAccountDedicatedIpWarmupAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutAccountDedicatedIpWarmupAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDedicatedIpWarmupAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDedicatedIpWarmupAttributesWithContext), varargs...)
}

// PutAccountDetails mocks base method.
func (m *MockSESV2API) PutAccountDetails(arg0 *sesv2.PutAccountDetailsInput) (*sesv2.PutAccountDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDetails", arg0)
	ret0, _ := ret[0].(*sesv2.PutAccountDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDetails indicates an expected call of PutAccountDetails.
func (mr *MockSESV2APIMockRecorder) PutAccountDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDetails", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDetails), arg0)
}

// PutAccountDetailsRequest mocks base method.
func (m *MockSESV2API) PutAccountDetailsRequest(arg0 *sesv2.PutAccountDetailsInput) (*request.Request, *sesv2.PutAccountDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutAccountDetailsOutput)
	return ret0, ret1
}

// PutAccountDetailsRequest indicates an expected call of PutAccountDetailsRequest.
func (mr *MockSESV2APIMockRecorder) PutAccountDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDetailsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDetailsRequest), arg0)
}

// PutAccountDetailsWithContext mocks base method.
func (m *MockSESV2API) PutAccountDetailsWithContext(arg0 context.Context, arg1 *sesv2.PutAccountDetailsInput, arg2 ...request.Option) (*sesv2.PutAccountDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutAccountDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountDetailsWithContext indicates an expected call of PutAccountDetailsWithContext.
func (mr *MockSESV2APIMockRecorder) PutAccountDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountDetailsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutAccountDetailsWithContext), varargs...)
}

// PutAccountSendingAttributes mocks base method.
func (m *MockSESV2API) PutAccountSendingAttributes(arg0 *sesv2.PutAccountSendingAttributesInput) (*sesv2.PutAccountSendingAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSendingAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutAccountSendingAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSendingAttributes indicates an expected call of PutAccountSendingAttributes.
func (mr *MockSESV2APIMockRecorder) PutAccountSendingAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSendingAttributes), arg0)
}

// PutAccountSendingAttributesRequest mocks base method.
func (m *MockSESV2API) PutAccountSendingAttributesRequest(arg0 *sesv2.PutAccountSendingAttributesInput) (*request.Request, *sesv2.PutAccountSendingAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSendingAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutAccountSendingAttributesOutput)
	return ret0, ret1
}

// PutAccountSendingAttributesRequest indicates an expected call of PutAccountSendingAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutAccountSendingAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSendingAttributesRequest), arg0)
}

// PutAccountSendingAttributesWithContext mocks base method.
func (m *MockSESV2API) PutAccountSendingAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutAccountSendingAttributesInput, arg2 ...request.Option) (*sesv2.PutAccountSendingAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountSendingAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutAccountSendingAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSendingAttributesWithContext indicates an expected call of PutAccountSendingAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutAccountSendingAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSendingAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSendingAttributesWithContext), varargs...)
}

// PutAccountSuppressionAttributes mocks base method.
func (m *MockSESV2API) PutAccountSuppressionAttributes(arg0 *sesv2.PutAccountSuppressionAttributesInput) (*sesv2.PutAccountSuppressionAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSuppressionAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutAccountSuppressionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSuppressionAttributes indicates an expected call of PutAccountSuppressionAttributes.
func (mr *MockSESV2APIMockRecorder) PutAccountSuppressionAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSuppressionAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSuppressionAttributes), arg0)
}

// PutAccountSuppressionAttributesRequest mocks base method.
func (m *MockSESV2API) PutAccountSuppressionAttributesRequest(arg0 *sesv2.PutAccountSuppressionAttributesInput) (*request.Request, *sesv2.PutAccountSuppressionAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAccountSuppressionAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutAccountSuppressionAttributesOutput)
	return ret0, ret1
}

// PutAccountSuppressionAttributesRequest indicates an expected call of PutAccountSuppressionAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutAccountSuppressionAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSuppressionAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSuppressionAttributesRequest), arg0)
}

// PutAccountSuppressionAttributesWithContext mocks base method.
func (m *MockSESV2API) PutAccountSuppressionAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutAccountSuppressionAttributesInput, arg2 ...request.Option) (*sesv2.PutAccountSuppressionAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAccountSuppressionAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutAccountSuppressionAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAccountSuppressionAttributesWithContext indicates an expected call of PutAccountSuppressionAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutAccountSuppressionAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAccountSuppressionAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutAccountSuppressionAttributesWithContext), varargs...)
}

// PutConfigurationSetDeliveryOptions mocks base method.
func (m *MockSESV2API) PutConfigurationSetDeliveryOptions(arg0 *sesv2.PutConfigurationSetDeliveryOptionsInput) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptions indicates an expected call of PutConfigurationSetDeliveryOptions.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetDeliveryOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetDeliveryOptions), arg0)
}

// PutConfigurationSetDeliveryOptionsRequest mocks base method.
func (m *MockSESV2API) PutConfigurationSetDeliveryOptionsRequest(arg0 *sesv2.PutConfigurationSetDeliveryOptionsInput) (*request.Request, *sesv2.PutConfigurationSetDeliveryOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptionsRequest indicates an expected call of PutConfigurationSetDeliveryOptionsRequest.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetDeliveryOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetDeliveryOptionsRequest), arg0)
}

// PutConfigurationSetDeliveryOptionsWithContext mocks base method.
func (m *MockSESV2API) PutConfigurationSetDeliveryOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetDeliveryOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetDeliveryOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetDeliveryOptionsWithContext indicates an expected call of PutConfigurationSetDeliveryOptionsWithContext.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetDeliveryOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetDeliveryOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetDeliveryOptionsWithContext), varargs...)
}

// PutConfigurationSetReputationOptions mocks base method.
func (m *MockSESV2API) PutConfigurationSetReputationOptions(arg0 *sesv2.PutConfigurationSetReputationOptionsInput) (*sesv2.PutConfigurationSetReputationOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetReputationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetReputationOptions indicates an expected call of PutConfigurationSetReputationOptions.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetReputationOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetReputationOptions), arg0)
}

// PutConfigurationSetReputationOptionsRequest mocks base method.
func (m *MockSESV2API) PutConfigurationSetReputationOptionsRequest(arg0 *sesv2.PutConfigurationSetReputationOptionsInput) (*request.Request, *sesv2.PutConfigurationSetReputationOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetReputationOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetReputationOptionsRequest indicates an expected call of PutConfigurationSetReputationOptionsRequest.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetReputationOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetReputationOptionsRequest), arg0)
}

// PutConfigurationSetReputationOptionsWithContext mocks base method.
func (m *MockSESV2API) PutConfigurationSetReputationOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetReputationOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetReputationOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetReputationOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetReputationOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetReputationOptionsWithContext indicates an expected call of PutConfigurationSetReputationOptionsWithContext.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetReputationOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetReputationOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetReputationOptionsWithContext), varargs...)
}

// PutConfigurationSetSendingOptions mocks base method.
func (m *MockSESV2API) PutConfigurationSetSendingOptions(arg0 *sesv2.PutConfigurationSetSendingOptionsInput) (*sesv2.PutConfigurationSetSendingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSendingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSendingOptions indicates an expected call of PutConfigurationSetSendingOptions.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSendingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSendingOptions), arg0)
}

// PutConfigurationSetSendingOptionsRequest mocks base method.
func (m *MockSESV2API) PutConfigurationSetSendingOptionsRequest(arg0 *sesv2.PutConfigurationSetSendingOptionsInput) (*request.Request, *sesv2.PutConfigurationSetSendingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetSendingOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetSendingOptionsRequest indicates an expected call of PutConfigurationSetSendingOptionsRequest.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSendingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSendingOptionsRequest), arg0)
}

// PutConfigurationSetSendingOptionsWithContext mocks base method.
func (m *MockSESV2API) PutConfigurationSetSendingOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetSendingOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetSendingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetSendingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSendingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSendingOptionsWithContext indicates an expected call of PutConfigurationSetSendingOptionsWithContext.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSendingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSendingOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSendingOptionsWithContext), varargs...)
}

// PutConfigurationSetSuppressionOptions mocks base method.
func (m *MockSESV2API) PutConfigurationSetSuppressionOptions(arg0 *sesv2.PutConfigurationSetSuppressionOptionsInput) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSuppressionOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSuppressionOptions indicates an expected call of PutConfigurationSetSuppressionOptions.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSuppressionOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSuppressionOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSuppressionOptions), arg0)
}

// PutConfigurationSetSuppressionOptionsRequest mocks base method.
func (m *MockSESV2API) PutConfigurationSetSuppressionOptionsRequest(arg0 *sesv2.PutConfigurationSetSuppressionOptionsInput) (*request.Request, *sesv2.PutConfigurationSetSuppressionOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetSuppressionOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetSuppressionOptionsRequest indicates an expected call of PutConfigurationSetSuppressionOptionsRequest.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSuppressionOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSuppressionOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSuppressionOptionsRequest), arg0)
}

// PutConfigurationSetSuppressionOptionsWithContext mocks base method.
func (m *MockSESV2API) PutConfigurationSetSuppressionOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetSuppressionOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetSuppressionOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetSuppressionOptionsWithContext indicates an expected call of PutConfigurationSetSuppressionOptionsWithContext.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetSuppressionOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetSuppressionOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetSuppressionOptionsWithContext), varargs...)
}

// PutConfigurationSetTrackingOptions mocks base method.
func (m *MockSESV2API) PutConfigurationSetTrackingOptions(arg0 *sesv2.PutConfigurationSetTrackingOptionsInput) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptions", arg0)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetTrackingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptions indicates an expected call of PutConfigurationSetTrackingOptions.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetTrackingOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptions", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetTrackingOptions), arg0)
}

// PutConfigurationSetTrackingOptionsRequest mocks base method.
func (m *MockSESV2API) PutConfigurationSetTrackingOptionsRequest(arg0 *sesv2.PutConfigurationSetTrackingOptionsInput) (*request.Request, *sesv2.PutConfigurationSetTrackingOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutConfigurationSetTrackingOptionsOutput)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptionsRequest indicates an expected call of PutConfigurationSetTrackingOptionsRequest.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetTrackingOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptionsRequest", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetTrackingOptionsRequest), arg0)
}

// PutConfigurationSetTrackingOptionsWithContext mocks base method.
func (m *MockSESV2API) PutConfigurationSetTrackingOptionsWithContext(arg0 context.Context, arg1 *sesv2.PutConfigurationSetTrackingOptionsInput, arg2 ...request.Option) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutConfigurationSetTrackingOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutConfigurationSetTrackingOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutConfigurationSetTrackingOptionsWithContext indicates an expected call of PutConfigurationSetTrackingOptionsWithContext.
func (mr *MockSESV2APIMockRecorder) PutConfigurationSetTrackingOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutConfigurationSetTrackingOptionsWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutConfigurationSetTrackingOptionsWithContext), varargs...)
}

// PutDedicatedIpInPool mocks base method.
func (m *MockSESV2API) PutDedicatedIpInPool(arg0 *sesv2.PutDedicatedIpInPoolInput) (*sesv2.PutDedicatedIpInPoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpInPool", arg0)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpInPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpInPool indicates an expected call of PutDedicatedIpInPool.
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpInPool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPool", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpInPool), arg0)
}

// PutDedicatedIpInPoolRequest mocks base method.
func (m *MockSESV2API) PutDedicatedIpInPoolRequest(arg0 *sesv2.PutDedicatedIpInPoolInput) (*request.Request, *sesv2.PutDedicatedIpInPoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpInPoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutDedicatedIpInPoolOutput)
	return ret0, ret1
}

// PutDedicatedIpInPoolRequest indicates an expected call of PutDedicatedIpInPoolRequest.
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpInPoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPoolRequest", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpInPoolRequest), arg0)
}

// PutDedicatedIpInPoolWithContext mocks base method.
func (m *MockSESV2API) PutDedicatedIpInPoolWithContext(arg0 context.Context, arg1 *sesv2.PutDedicatedIpInPoolInput, arg2 ...request.Option) (*sesv2.PutDedicatedIpInPoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDedicatedIpInPoolWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpInPoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpInPoolWithContext indicates an expected call of PutDedicatedIpInPoolWithContext.
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpInPoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpInPoolWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpInPoolWithContext), varargs...)
}

// PutDedicatedIpWarmupAttributes mocks base method.
func (m *MockSESV2API) PutDedicatedIpWarmupAttributes(arg0 *sesv2.PutDedicatedIpWarmupAttributesInput) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributes indicates an expected call of PutDedicatedIpWarmupAttributes.
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpWarmupAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpWarmupAttributes), arg0)
}

// PutDedicatedIpWarmupAttributesRequest mocks base method.
func (m *MockSESV2API) PutDedicatedIpWarmupAttributesRequest(arg0 *sesv2.PutDedicatedIpWarmupAttributesInput) (*request.Request, *sesv2.PutDedicatedIpWarmupAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutDedicatedIpWarmupAttributesOutput)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributesRequest indicates an expected call of PutDedicatedIpWarmupAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpWarmupAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpWarmupAttributesRequest), arg0)
}

// PutDedicatedIpWarmupAttributesWithContext mocks base method.
func (m *MockSESV2API) PutDedicatedIpWarmupAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutDedicatedIpWarmupAttributesInput, arg2 ...request.Option) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDedicatedIpWarmupAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutDedicatedIpWarmupAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDedicatedIpWarmupAttributesWithContext indicates an expected call of PutDedicatedIpWarmupAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutDedicatedIpWarmupAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDedicatedIpWarmupAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutDedicatedIpWarmupAttributesWithContext), varargs...)
}

// PutDeliverabilityDashboardOption mocks base method.
func (m *MockSESV2API) PutDeliverabilityDashboardOption(arg0 *sesv2.PutDeliverabilityDashboardOptionInput) (*sesv2.PutDeliverabilityDashboardOptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOption", arg0)
	ret0, _ := ret[0].(*sesv2.PutDeliverabilityDashboardOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliverabilityDashboardOption indicates an expected call of PutDeliverabilityDashboardOption.
func (mr *MockSESV2APIMockRecorder) PutDeliverabilityDashboardOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOption", reflect.TypeOf((*MockSESV2API)(nil).PutDeliverabilityDashboardOption), arg0)
}

// PutDeliverabilityDashboardOptionRequest mocks base method.
func (m *MockSESV2API) PutDeliverabilityDashboardOptionRequest(arg0 *sesv2.PutDeliverabilityDashboardOptionInput) (*request.Request, *sesv2.PutDeliverabilityDashboardOptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutDeliverabilityDashboardOptionOutput)
	return ret0, ret1
}

// PutDeliverabilityDashboardOptionRequest indicates an expected call of PutDeliverabilityDashboardOptionRequest.
func (mr *MockSESV2APIMockRecorder) PutDeliverabilityDashboardOptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOptionRequest", reflect.TypeOf((*MockSESV2API)(nil).PutDeliverabilityDashboardOptionRequest), arg0)
}

// PutDeliverabilityDashboardOptionWithContext mocks base method.
func (m *MockSESV2API) PutDeliverabilityDashboardOptionWithContext(arg0 context.Context, arg1 *sesv2.PutDeliverabilityDashboardOptionInput, arg2 ...request.Option) (*sesv2.PutDeliverabilityDashboardOptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDeliverabilityDashboardOptionWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutDeliverabilityDashboardOptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeliverabilityDashboardOptionWithContext indicates an expected call of PutDeliverabilityDashboardOptionWithContext.
func (mr *MockSESV2APIMockRecorder) PutDeliverabilityDashboardOptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeliverabilityDashboardOptionWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutDeliverabilityDashboardOptionWithContext), varargs...)
}

// PutEmailIdentityConfigurationSetAttributes mocks base method.
func (m *MockSESV2API) PutEmailIdentityConfigurationSetAttributes(arg0 *sesv2.PutEmailIdentityConfigurationSetAttributesInput) (*sesv2.PutEmailIdentityConfigurationSetAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityConfigurationSetAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityConfigurationSetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityConfigurationSetAttributes indicates an expected call of PutEmailIdentityConfigurationSetAttributes.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityConfigurationSetAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityConfigurationSetAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityConfigurationSetAttributes), arg0)
}

// PutEmailIdentityConfigurationSetAttributesRequest mocks base method.
func (m *MockSESV2API) PutEmailIdentityConfigurationSetAttributesRequest(arg0 *sesv2.PutEmailIdentityConfigurationSetAttributesInput) (*request.Request, *sesv2.PutEmailIdentityConfigurationSetAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityConfigurationSetAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityConfigurationSetAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityConfigurationSetAttributesRequest indicates an expected call of PutEmailIdentityConfigurationSetAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityConfigurationSetAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityConfigurationSetAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityConfigurationSetAttributesRequest), arg0)
}

// PutEmailIdentityConfigurationSetAttributesWithContext mocks base method.
func (m *MockSESV2API) PutEmailIdentityConfigurationSetAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityConfigurationSetAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityConfigurationSetAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityConfigurationSetAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityConfigurationSetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityConfigurationSetAttributesWithContext indicates an expected call of PutEmailIdentityConfigurationSetAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityConfigurationSetAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityConfigurationSetAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityConfigurationSetAttributesWithContext), varargs...)
}

// PutEmailIdentityDkimAttributes mocks base method.
func (m *MockSESV2API) PutEmailIdentityDkimAttributes(arg0 *sesv2.PutEmailIdentityDkimAttributesInput) (*sesv2.PutEmailIdentityDkimAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributes indicates an expected call of PutEmailIdentityDkimAttributes.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimAttributes), arg0)
}

// PutEmailIdentityDkimAttributesRequest mocks base method.
func (m *MockSESV2API) PutEmailIdentityDkimAttributesRequest(arg0 *sesv2.PutEmailIdentityDkimAttributesInput) (*request.Request, *sesv2.PutEmailIdentityDkimAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityDkimAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributesRequest indicates an expected call of PutEmailIdentityDkimAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimAttributesRequest), arg0)
}

// PutEmailIdentityDkimAttributesWithContext mocks base method.
func (m *MockSESV2API) PutEmailIdentityDkimAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityDkimAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityDkimAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimAttributesWithContext indicates an expected call of PutEmailIdentityDkimAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimAttributesWithContext), varargs...)
}

// PutEmailIdentityDkimSigningAttributes mocks base method.
func (m *MockSESV2API) PutEmailIdentityDkimSigningAttributes(arg0 *sesv2.PutEmailIdentityDkimSigningAttributesInput) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimSigningAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimSigningAttributes indicates an expected call of PutEmailIdentityDkimSigningAttributes.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimSigningAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimSigningAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimSigningAttributes), arg0)
}

// PutEmailIdentityDkimSigningAttributesRequest mocks base method.
func (m *MockSESV2API) PutEmailIdentityDkimSigningAttributesRequest(arg0 *sesv2.PutEmailIdentityDkimSigningAttributesInput) (*request.Request, *sesv2.PutEmailIdentityDkimSigningAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimSigningAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityDkimSigningAttributesRequest indicates an expected call of PutEmailIdentityDkimSigningAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimSigningAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimSigningAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimSigningAttributesRequest), arg0)
}

// PutEmailIdentityDkimSigningAttributesWithContext mocks base method.
func (m *MockSESV2API) PutEmailIdentityDkimSigningAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityDkimSigningAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityDkimSigningAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityDkimSigningAttributesWithContext indicates an expected call of PutEmailIdentityDkimSigningAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityDkimSigningAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityDkimSigningAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityDkimSigningAttributesWithContext), varargs...)
}

// PutEmailIdentityFeedbackAttributes mocks base method.
func (m *MockSESV2API) PutEmailIdentityFeedbackAttributes(arg0 *sesv2.PutEmailIdentityFeedbackAttributesInput) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributes indicates an expected call of PutEmailIdentityFeedbackAttributes.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityFeedbackAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityFeedbackAttributes), arg0)
}

// PutEmailIdentityFeedbackAttributesRequest mocks base method.
func (m *MockSESV2API) PutEmailIdentityFeedbackAttributesRequest(arg0 *sesv2.PutEmailIdentityFeedbackAttributesInput) (*request.Request, *sesv2.PutEmailIdentityFeedbackAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributesRequest indicates an expected call of PutEmailIdentityFeedbackAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityFeedbackAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityFeedbackAttributesRequest), arg0)
}

// PutEmailIdentityFeedbackAttributesWithContext mocks base method.
func (m *MockSESV2API) PutEmailIdentityFeedbackAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityFeedbackAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityFeedbackAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityFeedbackAttributesWithContext indicates an expected call of PutEmailIdentityFeedbackAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityFeedbackAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityFeedbackAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityFeedbackAttributesWithContext), varargs...)
}

// PutEmailIdentityMailFromAttributes mocks base method.
func (m *MockSESV2API) PutEmailIdentityMailFromAttributes(arg0 *sesv2.PutEmailIdentityMailFromAttributesInput) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributes", arg0)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityMailFromAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributes indicates an expected call of PutEmailIdentityMailFromAttributes.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityMailFromAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributes", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityMailFromAttributes), arg0)
}

// PutEmailIdentityMailFromAttributesRequest mocks base method.
func (m *MockSESV2API) PutEmailIdentityMailFromAttributesRequest(arg0 *sesv2.PutEmailIdentityMailFromAttributesInput) (*request.Request, *sesv2.PutEmailIdentityMailFromAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutEmailIdentityMailFromAttributesOutput)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributesRequest indicates an expected call of PutEmailIdentityMailFromAttributesRequest.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityMailFromAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributesRequest", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityMailFromAttributesRequest), arg0)
}

// PutEmailIdentityMailFromAttributesWithContext mocks base method.
func (m *MockSESV2API) PutEmailIdentityMailFromAttributesWithContext(arg0 context.Context, arg1 *sesv2.PutEmailIdentityMailFromAttributesInput, arg2 ...request.Option) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEmailIdentityMailFromAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutEmailIdentityMailFromAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEmailIdentityMailFromAttributesWithContext indicates an expected call of PutEmailIdentityMailFromAttributesWithContext.
func (mr *MockSESV2APIMockRecorder) PutEmailIdentityMailFromAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEmailIdentityMailFromAttributesWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutEmailIdentityMailFromAttributesWithContext), varargs...)
}

// PutSuppressedDestination mocks base method.
func (m *MockSESV2API) PutSuppressedDestination(arg0 *sesv2.PutSuppressedDestinationInput) (*sesv2.PutSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSuppressedDestination", arg0)
	ret0, _ := ret[0].(*sesv2.PutSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSuppressedDestination indicates an expected call of PutSuppressedDestination.
func (mr *MockSESV2APIMockRecorder) PutSuppressedDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSuppressedDestination", reflect.TypeOf((*MockSESV2API)(nil).PutSuppressedDestination), arg0)
}

// PutSuppressedDestinationRequest mocks base method.
func (m *MockSESV2API) PutSuppressedDestinationRequest(arg0 *sesv2.PutSuppressedDestinationInput) (*request.Request, *sesv2.PutSuppressedDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSuppressedDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.PutSuppressedDestinationOutput)
	return ret0, ret1
}

// PutSuppressedDestinationRequest indicates an expected call of PutSuppressedDestinationRequest.
func (mr *MockSESV2APIMockRecorder) PutSuppressedDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSuppressedDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).PutSuppressedDestinationRequest), arg0)
}

// PutSuppressedDestinationWithContext mocks base method.
func (m *MockSESV2API) PutSuppressedDestinationWithContext(arg0 context.Context, arg1 *sesv2.PutSuppressedDestinationInput, arg2 ...request.Option) (*sesv2.PutSuppressedDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSuppressedDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.PutSuppressedDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSuppressedDestinationWithContext indicates an expected call of PutSuppressedDestinationWithContext.
func (mr *MockSESV2APIMockRecorder) PutSuppressedDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSuppressedDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).PutSuppressedDestinationWithContext), varargs...)
}

// SendBulkEmail mocks base method.
func (m *MockSESV2API) SendBulkEmail(arg0 *sesv2.SendBulkEmailInput) (*sesv2.SendBulkEmailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBulkEmail", arg0)
	ret0, _ := ret[0].(*sesv2.SendBulkEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBulkEmail indicates an expected call of SendBulkEmail.
func (mr *MockSESV2APIMockRecorder) SendBulkEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBulkEmail", reflect.TypeOf((*MockSESV2API)(nil).SendBulkEmail), arg0)
}

// SendBulkEmailRequest mocks base method.
func (m *MockSESV2API) SendBulkEmailRequest(arg0 *sesv2.SendBulkEmailInput) (*request.Request, *sesv2.SendBulkEmailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBulkEmailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.SendBulkEmailOutput)
	return ret0, ret1
}

// SendBulkEmailRequest indicates an expected call of SendBulkEmailRequest.
func (mr *MockSESV2APIMockRecorder) SendBulkEmailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBulkEmailRequest", reflect.TypeOf((*MockSESV2API)(nil).SendBulkEmailRequest), arg0)
}

// SendBulkEmailWithContext mocks base method.
func (m *MockSESV2API) SendBulkEmailWithContext(arg0 context.Context, arg1 *sesv2.SendBulkEmailInput, arg2 ...request.Option) (*sesv2.SendBulkEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendBulkEmailWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.SendBulkEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBulkEmailWithContext indicates an expected call of SendBulkEmailWithContext.
func (mr *MockSESV2APIMockRecorder) SendBulkEmailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBulkEmailWithContext", reflect.TypeOf((*MockSESV2API)(nil).SendBulkEmailWithContext), varargs...)
}

// SendCustomVerificationEmail mocks base method.
func (m *MockSESV2API) SendCustomVerificationEmail(arg0 *sesv2.SendCustomVerificationEmailInput) (*sesv2.SendCustomVerificationEmailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCustomVerificationEmail", arg0)
	ret0, _ := ret[0].(*sesv2.SendCustomVerificationEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCustomVerificationEmail indicates an expected call of SendCustomVerificationEmail.
func (mr *MockSESV2APIMockRecorder) SendCustomVerificationEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCustomVerificationEmail", reflect.TypeOf((*MockSESV2API)(nil).SendCustomVerificationEmail), arg0)
}

// SendCustomVerificationEmailRequest mocks base method.
func (m *MockSESV2API) SendCustomVerificationEmailRequest(arg0 *sesv2.SendCustomVerificationEmailInput) (*request.Request, *sesv2.SendCustomVerificationEmailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCustomVerificationEmailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.SendCustomVerificationEmailOutput)
	return ret0, ret1
}

// SendCustomVerificationEmailRequest indicates an expected call of SendCustomVerificationEmailRequest.
func (mr *MockSESV2APIMockRecorder) SendCustomVerificationEmailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCustomVerificationEmailRequest", reflect.TypeOf((*MockSESV2API)(nil).SendCustomVerificationEmailRequest), arg0)
}

// SendCustomVerificationEmailWithContext mocks base method.
func (m *MockSESV2API) SendCustomVerificationEmailWithContext(arg0 context.Context, arg1 *sesv2.SendCustomVerificationEmailInput, arg2 ...request.Option) (*sesv2.SendCustomVerificationEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCustomVerificationEmailWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.SendCustomVerificationEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCustomVerificationEmailWithContext indicates an expected call of SendCustomVerificationEmailWithContext.
func (mr *MockSESV2APIMockRecorder) SendCustomVerificationEmailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCustomVerificationEmailWithContext", reflect.TypeOf((*MockSESV2API)(nil).SendCustomVerificationEmailWithContext), varargs...)
}

// SendEmail mocks base method.
func (m *MockSESV2API) SendEmail(arg0 *sesv2.SendEmailInput) (*sesv2.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0)
	ret0, _ := ret[0].(*sesv2.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSESV2APIMockRecorder) SendEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSESV2API)(nil).SendEmail), arg0)
}

// SendEmailRequest mocks base method.
func (m *MockSESV2API) SendEmailRequest(arg0 *sesv2.SendEmailInput) (*request.Request, *sesv2.SendEmailOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.SendEmailOutput)
	return ret0, ret1
}

// SendEmailRequest indicates an expected call of SendEmailRequest.
func (mr *MockSESV2APIMockRecorder) SendEmailRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailRequest", reflect.TypeOf((*MockSESV2API)(nil).SendEmailRequest), arg0)
}

// SendEmailWithContext mocks base method.
func (m *MockSESV2API) SendEmailWithContext(arg0 context.Context, arg1 *sesv2.SendEmailInput, arg2 ...request.Option) (*sesv2.SendEmailOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmailWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.SendEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailWithContext indicates an expected call of SendEmailWithContext.
func (mr *MockSESV2APIMockRecorder) SendEmailWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailWithContext", reflect.TypeOf((*MockSESV2API)(nil).SendEmailWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockSESV2API) TagResource(arg0 *sesv2.TagResourceInput) (*sesv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*sesv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockSESV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSESV2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockSESV2API) TagResourceRequest(arg0 *sesv2.TagResourceInput) (*request.Request, *sesv2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockSESV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSESV2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockSESV2API) TagResourceWithContext(arg0 context.Context, arg1 *sesv2.TagResourceInput, arg2 ...request.Option) (*sesv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockSESV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSESV2API)(nil).TagResourceWithContext), varargs...)
}

// TestRenderEmailTemplate mocks base method.
func (m *MockSESV2API) TestRenderEmailTemplate(arg0 *sesv2.TestRenderEmailTemplateInput) (*sesv2.TestRenderEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestRenderEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.TestRenderEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRenderEmailTemplate indicates an expected call of TestRenderEmailTemplate.
func (mr *MockSESV2APIMockRecorder) TestRenderEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRenderEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).TestRenderEmailTemplate), arg0)
}

// TestRenderEmailTemplateRequest mocks base method.
func (m *MockSESV2API) TestRenderEmailTemplateRequest(arg0 *sesv2.TestRenderEmailTemplateInput) (*request.Request, *sesv2.TestRenderEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestRenderEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.TestRenderEmailTemplateOutput)
	return ret0, ret1
}

// TestRenderEmailTemplateRequest indicates an expected call of TestRenderEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) TestRenderEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRenderEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).TestRenderEmailTemplateRequest), arg0)
}

// TestRenderEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) TestRenderEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.TestRenderEmailTemplateInput, arg2 ...request.Option) (*sesv2.TestRenderEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestRenderEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.TestRenderEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRenderEmailTemplateWithContext indicates an expected call of TestRenderEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) TestRenderEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRenderEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).TestRenderEmailTemplateWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockSESV2API) UntagResource(arg0 *sesv2.UntagResourceInput) (*sesv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*sesv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockSESV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSESV2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockSESV2API) UntagResourceRequest(arg0 *sesv2.UntagResourceInput) (*request.Request, *sesv2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockSESV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSESV2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockSESV2API) UntagResourceWithContext(arg0 context.Context, arg1 *sesv2.UntagResourceInput, arg2 ...request.Option) (*sesv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockSESV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSESV2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateConfigurationSetEventDestination mocks base method.
func (m *MockSESV2API) UpdateConfigurationSetEventDestination(arg0 *sesv2.UpdateConfigurationSetEventDestinationInput) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestination", arg0)
	ret0, _ := ret[0].(*sesv2.UpdateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestination indicates an expected call of UpdateConfigurationSetEventDestination.
func (mr *MockSESV2APIMockRecorder) UpdateConfigurationSetEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestination", reflect.TypeOf((*MockSESV2API)(nil).UpdateConfigurationSetEventDestination), arg0)
}

// UpdateConfigurationSetEventDestinationRequest mocks base method.
func (m *MockSESV2API) UpdateConfigurationSetEventDestinationRequest(arg0 *sesv2.UpdateConfigurationSetEventDestinationInput) (*request.Request, *sesv2.UpdateConfigurationSetEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UpdateConfigurationSetEventDestinationOutput)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestinationRequest indicates an expected call of UpdateConfigurationSetEventDestinationRequest.
func (mr *MockSESV2APIMockRecorder) UpdateConfigurationSetEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestinationRequest", reflect.TypeOf((*MockSESV2API)(nil).UpdateConfigurationSetEventDestinationRequest), arg0)
}

// UpdateConfigurationSetEventDestinationWithContext mocks base method.
func (m *MockSESV2API) UpdateConfigurationSetEventDestinationWithContext(arg0 context.Context, arg1 *sesv2.UpdateConfigurationSetEventDestinationInput, arg2 ...request.Option) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigurationSetEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UpdateConfigurationSetEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigurationSetEventDestinationWithContext indicates an expected call of UpdateConfigurationSetEventDestinationWithContext.
func (mr *MockSESV2APIMockRecorder) UpdateConfigurationSetEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigurationSetEventDestinationWithContext", reflect.TypeOf((*MockSESV2API)(nil).UpdateConfigurationSetEventDestinationWithContext), varargs...)
}

// UpdateContact mocks base method.
func (m *MockSESV2API) UpdateContact(arg0 *sesv2.UpdateContactInput) (*sesv2.UpdateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0)
	ret0, _ := ret[0].(*sesv2.UpdateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockSESV2APIMockRecorder) UpdateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockSESV2API)(nil).UpdateContact), arg0)
}

// UpdateContactList mocks base method.
func (m *MockSESV2API) UpdateContactList(arg0 *sesv2.UpdateContactListInput) (*sesv2.UpdateContactListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactList", arg0)
	ret0, _ := ret[0].(*sesv2.UpdateContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactList indicates an expected call of UpdateContactList.
func (mr *MockSESV2APIMockRecorder) UpdateContactList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactList", reflect.TypeOf((*MockSESV2API)(nil).UpdateContactList), arg0)
}

// UpdateContactListRequest mocks base method.
func (m *MockSESV2API) UpdateContactListRequest(arg0 *sesv2.UpdateContactListInput) (*request.Request, *sesv2.UpdateContactListOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactListRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UpdateContactListOutput)
	return ret0, ret1
}

// UpdateContactListRequest indicates an expected call of UpdateContactListRequest.
func (mr *MockSESV2APIMockRecorder) UpdateContactListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactListRequest", reflect.TypeOf((*MockSESV2API)(nil).UpdateContactListRequest), arg0)
}

// UpdateContactListWithContext mocks base method.
func (m *MockSESV2API) UpdateContactListWithContext(arg0 context.Context, arg1 *sesv2.UpdateContactListInput, arg2 ...request.Option) (*sesv2.UpdateContactListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactListWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UpdateContactListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactListWithContext indicates an expected call of UpdateContactListWithContext.
func (mr *MockSESV2APIMockRecorder) UpdateContactListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactListWithContext", reflect.TypeOf((*MockSESV2API)(nil).UpdateContactListWithContext), varargs...)
}

// UpdateContactRequest mocks base method.
func (m *MockSESV2API) UpdateContactRequest(arg0 *sesv2.UpdateContactInput) (*request.Request, *sesv2.UpdateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UpdateContactOutput)
	return ret0, ret1
}

// UpdateContactRequest indicates an expected call of UpdateContactRequest.
func (mr *MockSESV2APIMockRecorder) UpdateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactRequest", reflect.TypeOf((*MockSESV2API)(nil).UpdateContactRequest), arg0)
}

// UpdateContactWithContext mocks base method.
func (m *MockSESV2API) UpdateContactWithContext(arg0 context.Context, arg1 *sesv2.UpdateContactInput, arg2 ...request.Option) (*sesv2.UpdateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UpdateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactWithContext indicates an expected call of UpdateContactWithContext.
func (mr *MockSESV2APIMockRecorder) UpdateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactWithContext", reflect.TypeOf((*MockSESV2API)(nil).UpdateContactWithContext), varargs...)
}

// UpdateCustomVerificationEmailTemplate mocks base method.
func (m *MockSESV2API) UpdateCustomVerificationEmailTemplate(arg0 *sesv2.UpdateCustomVerificationEmailTemplateInput) (*sesv2.UpdateCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomVerificationEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.UpdateCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomVerificationEmailTemplate indicates an expected call of UpdateCustomVerificationEmailTemplate.
func (mr *MockSESV2APIMockRecorder) UpdateCustomVerificationEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomVerificationEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).UpdateCustomVerificationEmailTemplate), arg0)
}

// UpdateCustomVerificationEmailTemplateRequest mocks base method.
func (m *MockSESV2API) UpdateCustomVerificationEmailTemplateRequest(arg0 *sesv2.UpdateCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.UpdateCustomVerificationEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomVerificationEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UpdateCustomVerificationEmailTemplateOutput)
	return ret0, ret1
}

// UpdateCustomVerificationEmailTemplateRequest indicates an expected call of UpdateCustomVerificationEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) UpdateCustomVerificationEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomVerificationEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).UpdateCustomVerificationEmailTemplateRequest), arg0)
}

// UpdateCustomVerificationEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) UpdateCustomVerificationEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.UpdateCustomVerificationEmailTemplateInput, arg2 ...request.Option) (*sesv2.UpdateCustomVerificationEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCustomVerificationEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UpdateCustomVerificationEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomVerificationEmailTemplateWithContext indicates an expected call of UpdateCustomVerificationEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) UpdateCustomVerificationEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomVerificationEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).UpdateCustomVerificationEmailTemplateWithContext), varargs...)
}

// UpdateEmailIdentityPolicy mocks base method.
func (m *MockSESV2API) UpdateEmailIdentityPolicy(arg0 *sesv2.UpdateEmailIdentityPolicyInput) (*sesv2.UpdateEmailIdentityPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailIdentityPolicy", arg0)
	ret0, _ := ret[0].(*sesv2.UpdateEmailIdentityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailIdentityPolicy indicates an expected call of UpdateEmailIdentityPolicy.
func (mr *MockSESV2APIMockRecorder) UpdateEmailIdentityPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailIdentityPolicy", reflect.TypeOf((*MockSESV2API)(nil).UpdateEmailIdentityPolicy), arg0)
}

// UpdateEmailIdentityPolicyRequest mocks base method.
func (m *MockSESV2API) UpdateEmailIdentityPolicyRequest(arg0 *sesv2.UpdateEmailIdentityPolicyInput) (*request.Request, *sesv2.UpdateEmailIdentityPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailIdentityPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UpdateEmailIdentityPolicyOutput)
	return ret0, ret1
}

// UpdateEmailIdentityPolicyRequest indicates an expected call of UpdateEmailIdentityPolicyRequest.
func (mr *MockSESV2APIMockRecorder) UpdateEmailIdentityPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailIdentityPolicyRequest", reflect.TypeOf((*MockSESV2API)(nil).UpdateEmailIdentityPolicyRequest), arg0)
}

// UpdateEmailIdentityPolicyWithContext mocks base method.
func (m *MockSESV2API) UpdateEmailIdentityPolicyWithContext(arg0 context.Context, arg1 *sesv2.UpdateEmailIdentityPolicyInput, arg2 ...request.Option) (*sesv2.UpdateEmailIdentityPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEmailIdentityPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UpdateEmailIdentityPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailIdentityPolicyWithContext indicates an expected call of UpdateEmailIdentityPolicyWithContext.
func (mr *MockSESV2APIMockRecorder) UpdateEmailIdentityPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailIdentityPolicyWithContext", reflect.TypeOf((*MockSESV2API)(nil).UpdateEmailIdentityPolicyWithContext), varargs...)
}

// UpdateEmailTemplate mocks base method.
func (m *MockSESV2API) UpdateEmailTemplate(arg0 *sesv2.UpdateEmailTemplateInput) (*sesv2.UpdateEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailTemplate", arg0)
	ret0, _ := ret[0].(*sesv2.UpdateEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailTemplate indicates an expected call of UpdateEmailTemplate.
func (mr *MockSESV2APIMockRecorder) UpdateEmailTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailTemplate", reflect.TypeOf((*MockSESV2API)(nil).UpdateEmailTemplate), arg0)
}

// UpdateEmailTemplateRequest mocks base method.
func (m *MockSESV2API) UpdateEmailTemplateRequest(arg0 *sesv2.UpdateEmailTemplateInput) (*request.Request, *sesv2.UpdateEmailTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*sesv2.UpdateEmailTemplateOutput)
	return ret0, ret1
}

// UpdateEmailTemplateRequest indicates an expected call of UpdateEmailTemplateRequest.
func (mr *MockSESV2APIMockRecorder) UpdateEmailTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailTemplateRequest", reflect.TypeOf((*MockSESV2API)(nil).UpdateEmailTemplateRequest), arg0)
}

// UpdateEmailTemplateWithContext mocks base method.
func (m *MockSESV2API) UpdateEmailTemplateWithContext(arg0 context.Context, arg1 *sesv2.UpdateEmailTemplateInput, arg2 ...request.Option) (*sesv2.UpdateEmailTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEmailTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*sesv2.UpdateEmailTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailTemplateWithContext indicates an expected call of UpdateEmailTemplateWithContext.
func (mr *MockSESV2APIMockRecorder) UpdateEmailTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailTemplateWithContext", reflect.TypeOf((*MockSESV2API)(nil).UpdateEmailTemplateWithContext), varargs...)
}

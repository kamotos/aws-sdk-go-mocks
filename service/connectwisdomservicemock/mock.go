// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/connectwisdomservice/connectwisdomserviceiface (interfaces: ConnectWisdomServiceAPI)

// Package connectwisdomservicemock is a generated GoMock package.
package connectwisdomservicemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	connectwisdomservice "github.com/aws/aws-sdk-go/service/connectwisdomservice"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectWisdomServiceAPI is a mock of ConnectWisdomServiceAPI interface.
type MockConnectWisdomServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectWisdomServiceAPIMockRecorder
}

// MockConnectWisdomServiceAPIMockRecorder is the mock recorder for MockConnectWisdomServiceAPI.
type MockConnectWisdomServiceAPIMockRecorder struct {
	mock *MockConnectWisdomServiceAPI
}

// NewMockConnectWisdomServiceAPI creates a new mock instance.
func NewMockConnectWisdomServiceAPI(ctrl *gomock.Controller) *MockConnectWisdomServiceAPI {
	mock := &MockConnectWisdomServiceAPI{ctrl: ctrl}
	mock.recorder = &MockConnectWisdomServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectWisdomServiceAPI) EXPECT() *MockConnectWisdomServiceAPIMockRecorder {
	return m.recorder
}

// CreateAssistant mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateAssistant(arg0 *connectwisdomservice.CreateAssistantInput) (*connectwisdomservice.CreateAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistant", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.CreateAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistant indicates an expected call of CreateAssistant.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistant", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateAssistant), arg0)
}

// CreateAssistantAssociation mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateAssistantAssociation(arg0 *connectwisdomservice.CreateAssistantAssociationInput) (*connectwisdomservice.CreateAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistantAssociation", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.CreateAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistantAssociation indicates an expected call of CreateAssistantAssociation.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateAssistantAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantAssociation", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateAssistantAssociation), arg0)
}

// CreateAssistantAssociationRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateAssistantAssociationRequest(arg0 *connectwisdomservice.CreateAssistantAssociationInput) (*request.Request, *connectwisdomservice.CreateAssistantAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistantAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.CreateAssistantAssociationOutput)
	return ret0, ret1
}

// CreateAssistantAssociationRequest indicates an expected call of CreateAssistantAssociationRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateAssistantAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantAssociationRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateAssistantAssociationRequest), arg0)
}

// CreateAssistantAssociationWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateAssistantAssociationWithContext(arg0 context.Context, arg1 *connectwisdomservice.CreateAssistantAssociationInput, arg2 ...request.Option) (*connectwisdomservice.CreateAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssistantAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.CreateAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistantAssociationWithContext indicates an expected call of CreateAssistantAssociationWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateAssistantAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantAssociationWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateAssistantAssociationWithContext), varargs...)
}

// CreateAssistantRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateAssistantRequest(arg0 *connectwisdomservice.CreateAssistantInput) (*request.Request, *connectwisdomservice.CreateAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.CreateAssistantOutput)
	return ret0, ret1
}

// CreateAssistantRequest indicates an expected call of CreateAssistantRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateAssistantRequest), arg0)
}

// CreateAssistantWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateAssistantWithContext(arg0 context.Context, arg1 *connectwisdomservice.CreateAssistantInput, arg2 ...request.Option) (*connectwisdomservice.CreateAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.CreateAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssistantWithContext indicates an expected call of CreateAssistantWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssistantWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateAssistantWithContext), varargs...)
}

// CreateContent mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateContent(arg0 *connectwisdomservice.CreateContentInput) (*connectwisdomservice.CreateContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.CreateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContent indicates an expected call of CreateContent.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateContent), arg0)
}

// CreateContentRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateContentRequest(arg0 *connectwisdomservice.CreateContentInput) (*request.Request, *connectwisdomservice.CreateContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.CreateContentOutput)
	return ret0, ret1
}

// CreateContentRequest indicates an expected call of CreateContentRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateContentRequest), arg0)
}

// CreateContentWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateContentWithContext(arg0 context.Context, arg1 *connectwisdomservice.CreateContentInput, arg2 ...request.Option) (*connectwisdomservice.CreateContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContentWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.CreateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContentWithContext indicates an expected call of CreateContentWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateContentWithContext), varargs...)
}

// CreateKnowledgeBase mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateKnowledgeBase(arg0 *connectwisdomservice.CreateKnowledgeBaseInput) (*connectwisdomservice.CreateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeBase", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.CreateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeBase indicates an expected call of CreateKnowledgeBase.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBase", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateKnowledgeBase), arg0)
}

// CreateKnowledgeBaseRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateKnowledgeBaseRequest(arg0 *connectwisdomservice.CreateKnowledgeBaseInput) (*request.Request, *connectwisdomservice.CreateKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.CreateKnowledgeBaseOutput)
	return ret0, ret1
}

// CreateKnowledgeBaseRequest indicates an expected call of CreateKnowledgeBaseRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBaseRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateKnowledgeBaseRequest), arg0)
}

// CreateKnowledgeBaseWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateKnowledgeBaseWithContext(arg0 context.Context, arg1 *connectwisdomservice.CreateKnowledgeBaseInput, arg2 ...request.Option) (*connectwisdomservice.CreateKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.CreateKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKnowledgeBaseWithContext indicates an expected call of CreateKnowledgeBaseWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKnowledgeBaseWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateKnowledgeBaseWithContext), varargs...)
}

// CreateSession mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateSession(arg0 *connectwisdomservice.CreateSessionInput) (*connectwisdomservice.CreateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.CreateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateSession), arg0)
}

// CreateSessionRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateSessionRequest(arg0 *connectwisdomservice.CreateSessionInput) (*request.Request, *connectwisdomservice.CreateSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.CreateSessionOutput)
	return ret0, ret1
}

// CreateSessionRequest indicates an expected call of CreateSessionRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateSessionRequest), arg0)
}

// CreateSessionWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) CreateSessionWithContext(arg0 context.Context, arg1 *connectwisdomservice.CreateSessionInput, arg2 ...request.Option) (*connectwisdomservice.CreateSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSessionWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.CreateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionWithContext indicates an expected call of CreateSessionWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) CreateSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).CreateSessionWithContext), varargs...)
}

// DeleteAssistant mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteAssistant(arg0 *connectwisdomservice.DeleteAssistantInput) (*connectwisdomservice.DeleteAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistant", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistant indicates an expected call of DeleteAssistant.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistant", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteAssistant), arg0)
}

// DeleteAssistantAssociation mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteAssistantAssociation(arg0 *connectwisdomservice.DeleteAssistantAssociationInput) (*connectwisdomservice.DeleteAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistantAssociation", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistantAssociation indicates an expected call of DeleteAssistantAssociation.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteAssistantAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantAssociation", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteAssistantAssociation), arg0)
}

// DeleteAssistantAssociationRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteAssistantAssociationRequest(arg0 *connectwisdomservice.DeleteAssistantAssociationInput) (*request.Request, *connectwisdomservice.DeleteAssistantAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistantAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.DeleteAssistantAssociationOutput)
	return ret0, ret1
}

// DeleteAssistantAssociationRequest indicates an expected call of DeleteAssistantAssociationRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteAssistantAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantAssociationRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteAssistantAssociationRequest), arg0)
}

// DeleteAssistantAssociationWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteAssistantAssociationWithContext(arg0 context.Context, arg1 *connectwisdomservice.DeleteAssistantAssociationInput, arg2 ...request.Option) (*connectwisdomservice.DeleteAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssistantAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistantAssociationWithContext indicates an expected call of DeleteAssistantAssociationWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteAssistantAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantAssociationWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteAssistantAssociationWithContext), varargs...)
}

// DeleteAssistantRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteAssistantRequest(arg0 *connectwisdomservice.DeleteAssistantInput) (*request.Request, *connectwisdomservice.DeleteAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.DeleteAssistantOutput)
	return ret0, ret1
}

// DeleteAssistantRequest indicates an expected call of DeleteAssistantRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteAssistantRequest), arg0)
}

// DeleteAssistantWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteAssistantWithContext(arg0 context.Context, arg1 *connectwisdomservice.DeleteAssistantInput, arg2 ...request.Option) (*connectwisdomservice.DeleteAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssistantWithContext indicates an expected call of DeleteAssistantWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssistantWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteAssistantWithContext), varargs...)
}

// DeleteContent mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteContent(arg0 *connectwisdomservice.DeleteContentInput) (*connectwisdomservice.DeleteContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContent", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContent indicates an expected call of DeleteContent.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContent", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteContent), arg0)
}

// DeleteContentRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteContentRequest(arg0 *connectwisdomservice.DeleteContentInput) (*request.Request, *connectwisdomservice.DeleteContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.DeleteContentOutput)
	return ret0, ret1
}

// DeleteContentRequest indicates an expected call of DeleteContentRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteContentRequest), arg0)
}

// DeleteContentWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteContentWithContext(arg0 context.Context, arg1 *connectwisdomservice.DeleteContentInput, arg2 ...request.Option) (*connectwisdomservice.DeleteContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContentWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContentWithContext indicates an expected call of DeleteContentWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteContentWithContext), varargs...)
}

// DeleteKnowledgeBase mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteKnowledgeBase(arg0 *connectwisdomservice.DeleteKnowledgeBaseInput) (*connectwisdomservice.DeleteKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeBase", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKnowledgeBase indicates an expected call of DeleteKnowledgeBase.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBase", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteKnowledgeBase), arg0)
}

// DeleteKnowledgeBaseRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteKnowledgeBaseRequest(arg0 *connectwisdomservice.DeleteKnowledgeBaseInput) (*request.Request, *connectwisdomservice.DeleteKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.DeleteKnowledgeBaseOutput)
	return ret0, ret1
}

// DeleteKnowledgeBaseRequest indicates an expected call of DeleteKnowledgeBaseRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBaseRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteKnowledgeBaseRequest), arg0)
}

// DeleteKnowledgeBaseWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) DeleteKnowledgeBaseWithContext(arg0 context.Context, arg1 *connectwisdomservice.DeleteKnowledgeBaseInput, arg2 ...request.Option) (*connectwisdomservice.DeleteKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.DeleteKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKnowledgeBaseWithContext indicates an expected call of DeleteKnowledgeBaseWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) DeleteKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKnowledgeBaseWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).DeleteKnowledgeBaseWithContext), varargs...)
}

// GetAssistant mocks base method.
func (m *MockConnectWisdomServiceAPI) GetAssistant(arg0 *connectwisdomservice.GetAssistantInput) (*connectwisdomservice.GetAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistant", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.GetAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistant indicates an expected call of GetAssistant.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistant", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetAssistant), arg0)
}

// GetAssistantAssociation mocks base method.
func (m *MockConnectWisdomServiceAPI) GetAssistantAssociation(arg0 *connectwisdomservice.GetAssistantAssociationInput) (*connectwisdomservice.GetAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistantAssociation", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.GetAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistantAssociation indicates an expected call of GetAssistantAssociation.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetAssistantAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantAssociation", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetAssistantAssociation), arg0)
}

// GetAssistantAssociationRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) GetAssistantAssociationRequest(arg0 *connectwisdomservice.GetAssistantAssociationInput) (*request.Request, *connectwisdomservice.GetAssistantAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistantAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.GetAssistantAssociationOutput)
	return ret0, ret1
}

// GetAssistantAssociationRequest indicates an expected call of GetAssistantAssociationRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetAssistantAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantAssociationRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetAssistantAssociationRequest), arg0)
}

// GetAssistantAssociationWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) GetAssistantAssociationWithContext(arg0 context.Context, arg1 *connectwisdomservice.GetAssistantAssociationInput, arg2 ...request.Option) (*connectwisdomservice.GetAssistantAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssistantAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.GetAssistantAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistantAssociationWithContext indicates an expected call of GetAssistantAssociationWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetAssistantAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantAssociationWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetAssistantAssociationWithContext), varargs...)
}

// GetAssistantRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) GetAssistantRequest(arg0 *connectwisdomservice.GetAssistantInput) (*request.Request, *connectwisdomservice.GetAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.GetAssistantOutput)
	return ret0, ret1
}

// GetAssistantRequest indicates an expected call of GetAssistantRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetAssistantRequest), arg0)
}

// GetAssistantWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) GetAssistantWithContext(arg0 context.Context, arg1 *connectwisdomservice.GetAssistantInput, arg2 ...request.Option) (*connectwisdomservice.GetAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.GetAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssistantWithContext indicates an expected call of GetAssistantWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssistantWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetAssistantWithContext), varargs...)
}

// GetContent mocks base method.
func (m *MockConnectWisdomServiceAPI) GetContent(arg0 *connectwisdomservice.GetContentInput) (*connectwisdomservice.GetContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.GetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetContent), arg0)
}

// GetContentRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) GetContentRequest(arg0 *connectwisdomservice.GetContentInput) (*request.Request, *connectwisdomservice.GetContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.GetContentOutput)
	return ret0, ret1
}

// GetContentRequest indicates an expected call of GetContentRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetContentRequest), arg0)
}

// GetContentSummary mocks base method.
func (m *MockConnectWisdomServiceAPI) GetContentSummary(arg0 *connectwisdomservice.GetContentSummaryInput) (*connectwisdomservice.GetContentSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentSummary", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.GetContentSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentSummary indicates an expected call of GetContentSummary.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetContentSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentSummary", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetContentSummary), arg0)
}

// GetContentSummaryRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) GetContentSummaryRequest(arg0 *connectwisdomservice.GetContentSummaryInput) (*request.Request, *connectwisdomservice.GetContentSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.GetContentSummaryOutput)
	return ret0, ret1
}

// GetContentSummaryRequest indicates an expected call of GetContentSummaryRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetContentSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentSummaryRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetContentSummaryRequest), arg0)
}

// GetContentSummaryWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) GetContentSummaryWithContext(arg0 context.Context, arg1 *connectwisdomservice.GetContentSummaryInput, arg2 ...request.Option) (*connectwisdomservice.GetContentSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.GetContentSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentSummaryWithContext indicates an expected call of GetContentSummaryWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetContentSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentSummaryWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetContentSummaryWithContext), varargs...)
}

// GetContentWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) GetContentWithContext(arg0 context.Context, arg1 *connectwisdomservice.GetContentInput, arg2 ...request.Option) (*connectwisdomservice.GetContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.GetContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentWithContext indicates an expected call of GetContentWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetContentWithContext), varargs...)
}

// GetKnowledgeBase mocks base method.
func (m *MockConnectWisdomServiceAPI) GetKnowledgeBase(arg0 *connectwisdomservice.GetKnowledgeBaseInput) (*connectwisdomservice.GetKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeBase", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.GetKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeBase indicates an expected call of GetKnowledgeBase.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetKnowledgeBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBase", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetKnowledgeBase), arg0)
}

// GetKnowledgeBaseRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) GetKnowledgeBaseRequest(arg0 *connectwisdomservice.GetKnowledgeBaseInput) (*request.Request, *connectwisdomservice.GetKnowledgeBaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnowledgeBaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.GetKnowledgeBaseOutput)
	return ret0, ret1
}

// GetKnowledgeBaseRequest indicates an expected call of GetKnowledgeBaseRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetKnowledgeBaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBaseRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetKnowledgeBaseRequest), arg0)
}

// GetKnowledgeBaseWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) GetKnowledgeBaseWithContext(arg0 context.Context, arg1 *connectwisdomservice.GetKnowledgeBaseInput, arg2 ...request.Option) (*connectwisdomservice.GetKnowledgeBaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKnowledgeBaseWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.GetKnowledgeBaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKnowledgeBaseWithContext indicates an expected call of GetKnowledgeBaseWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetKnowledgeBaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnowledgeBaseWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetKnowledgeBaseWithContext), varargs...)
}

// GetRecommendations mocks base method.
func (m *MockConnectWisdomServiceAPI) GetRecommendations(arg0 *connectwisdomservice.GetRecommendationsInput) (*connectwisdomservice.GetRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendations", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.GetRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendations indicates an expected call of GetRecommendations.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendations", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetRecommendations), arg0)
}

// GetRecommendationsRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) GetRecommendationsRequest(arg0 *connectwisdomservice.GetRecommendationsInput) (*request.Request, *connectwisdomservice.GetRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.GetRecommendationsOutput)
	return ret0, ret1
}

// GetRecommendationsRequest indicates an expected call of GetRecommendationsRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetRecommendationsRequest), arg0)
}

// GetRecommendationsWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) GetRecommendationsWithContext(arg0 context.Context, arg1 *connectwisdomservice.GetRecommendationsInput, arg2 ...request.Option) (*connectwisdomservice.GetRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.GetRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationsWithContext indicates an expected call of GetRecommendationsWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetRecommendationsWithContext), varargs...)
}

// GetSession mocks base method.
func (m *MockConnectWisdomServiceAPI) GetSession(arg0 *connectwisdomservice.GetSessionInput) (*connectwisdomservice.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetSession), arg0)
}

// GetSessionRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) GetSessionRequest(arg0 *connectwisdomservice.GetSessionInput) (*request.Request, *connectwisdomservice.GetSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.GetSessionOutput)
	return ret0, ret1
}

// GetSessionRequest indicates an expected call of GetSessionRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetSessionRequest), arg0)
}

// GetSessionWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) GetSessionWithContext(arg0 context.Context, arg1 *connectwisdomservice.GetSessionInput, arg2 ...request.Option) (*connectwisdomservice.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionWithContext indicates an expected call of GetSessionWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) GetSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).GetSessionWithContext), varargs...)
}

// ListAssistantAssociations mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantAssociations(arg0 *connectwisdomservice.ListAssistantAssociationsInput) (*connectwisdomservice.ListAssistantAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantAssociations", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.ListAssistantAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistantAssociations indicates an expected call of ListAssistantAssociations.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociations", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantAssociations), arg0)
}

// ListAssistantAssociationsPages mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantAssociationsPages(arg0 *connectwisdomservice.ListAssistantAssociationsInput, arg1 func(*connectwisdomservice.ListAssistantAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantAssociationsPages indicates an expected call of ListAssistantAssociationsPages.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsPages", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantAssociationsPages), arg0, arg1)
}

// ListAssistantAssociationsPagesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantAssociationsPagesWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListAssistantAssociationsInput, arg2 func(*connectwisdomservice.ListAssistantAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantAssociationsPagesWithContext indicates an expected call of ListAssistantAssociationsPagesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsPagesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantAssociationsPagesWithContext), varargs...)
}

// ListAssistantAssociationsRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantAssociationsRequest(arg0 *connectwisdomservice.ListAssistantAssociationsInput) (*request.Request, *connectwisdomservice.ListAssistantAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.ListAssistantAssociationsOutput)
	return ret0, ret1
}

// ListAssistantAssociationsRequest indicates an expected call of ListAssistantAssociationsRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantAssociationsRequest), arg0)
}

// ListAssistantAssociationsWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantAssociationsWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListAssistantAssociationsInput, arg2 ...request.Option) (*connectwisdomservice.ListAssistantAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.ListAssistantAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistantAssociationsWithContext indicates an expected call of ListAssistantAssociationsWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantAssociationsWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantAssociationsWithContext), varargs...)
}

// ListAssistants mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistants(arg0 *connectwisdomservice.ListAssistantsInput) (*connectwisdomservice.ListAssistantsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistants", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.ListAssistantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistants indicates an expected call of ListAssistants.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistants", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistants), arg0)
}

// ListAssistantsPages mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantsPages(arg0 *connectwisdomservice.ListAssistantsInput, arg1 func(*connectwisdomservice.ListAssistantsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantsPages indicates an expected call of ListAssistantsPages.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsPages", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantsPages), arg0, arg1)
}

// ListAssistantsPagesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantsPagesWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListAssistantsInput, arg2 func(*connectwisdomservice.ListAssistantsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssistantsPagesWithContext indicates an expected call of ListAssistantsPagesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsPagesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantsPagesWithContext), varargs...)
}

// ListAssistantsRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantsRequest(arg0 *connectwisdomservice.ListAssistantsInput) (*request.Request, *connectwisdomservice.ListAssistantsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssistantsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.ListAssistantsOutput)
	return ret0, ret1
}

// ListAssistantsRequest indicates an expected call of ListAssistantsRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantsRequest), arg0)
}

// ListAssistantsWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListAssistantsWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListAssistantsInput, arg2 ...request.Option) (*connectwisdomservice.ListAssistantsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssistantsWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.ListAssistantsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssistantsWithContext indicates an expected call of ListAssistantsWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListAssistantsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssistantsWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListAssistantsWithContext), varargs...)
}

// ListContents mocks base method.
func (m *MockConnectWisdomServiceAPI) ListContents(arg0 *connectwisdomservice.ListContentsInput) (*connectwisdomservice.ListContentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContents", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.ListContentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContents indicates an expected call of ListContents.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListContents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContents", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListContents), arg0)
}

// ListContentsPages mocks base method.
func (m *MockConnectWisdomServiceAPI) ListContentsPages(arg0 *connectwisdomservice.ListContentsInput, arg1 func(*connectwisdomservice.ListContentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContentsPages indicates an expected call of ListContentsPages.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListContentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsPages", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListContentsPages), arg0, arg1)
}

// ListContentsPagesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListContentsPagesWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListContentsInput, arg2 func(*connectwisdomservice.ListContentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContentsPagesWithContext indicates an expected call of ListContentsPagesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListContentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsPagesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListContentsPagesWithContext), varargs...)
}

// ListContentsRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) ListContentsRequest(arg0 *connectwisdomservice.ListContentsInput) (*request.Request, *connectwisdomservice.ListContentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.ListContentsOutput)
	return ret0, ret1
}

// ListContentsRequest indicates an expected call of ListContentsRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListContentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListContentsRequest), arg0)
}

// ListContentsWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListContentsWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListContentsInput, arg2 ...request.Option) (*connectwisdomservice.ListContentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContentsWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.ListContentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContentsWithContext indicates an expected call of ListContentsWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListContentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContentsWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListContentsWithContext), varargs...)
}

// ListKnowledgeBases mocks base method.
func (m *MockConnectWisdomServiceAPI) ListKnowledgeBases(arg0 *connectwisdomservice.ListKnowledgeBasesInput) (*connectwisdomservice.ListKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBases", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.ListKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBases indicates an expected call of ListKnowledgeBases.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListKnowledgeBases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBases", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListKnowledgeBases), arg0)
}

// ListKnowledgeBasesPages mocks base method.
func (m *MockConnectWisdomServiceAPI) ListKnowledgeBasesPages(arg0 *connectwisdomservice.ListKnowledgeBasesInput, arg1 func(*connectwisdomservice.ListKnowledgeBasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKnowledgeBasesPages indicates an expected call of ListKnowledgeBasesPages.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListKnowledgeBasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesPages", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListKnowledgeBasesPages), arg0, arg1)
}

// ListKnowledgeBasesPagesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListKnowledgeBasesPagesWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListKnowledgeBasesInput, arg2 func(*connectwisdomservice.ListKnowledgeBasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKnowledgeBasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKnowledgeBasesPagesWithContext indicates an expected call of ListKnowledgeBasesPagesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListKnowledgeBasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesPagesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListKnowledgeBasesPagesWithContext), varargs...)
}

// ListKnowledgeBasesRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) ListKnowledgeBasesRequest(arg0 *connectwisdomservice.ListKnowledgeBasesInput) (*request.Request, *connectwisdomservice.ListKnowledgeBasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledgeBasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.ListKnowledgeBasesOutput)
	return ret0, ret1
}

// ListKnowledgeBasesRequest indicates an expected call of ListKnowledgeBasesRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListKnowledgeBasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListKnowledgeBasesRequest), arg0)
}

// ListKnowledgeBasesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListKnowledgeBasesWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListKnowledgeBasesInput, arg2 ...request.Option) (*connectwisdomservice.ListKnowledgeBasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKnowledgeBasesWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.ListKnowledgeBasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledgeBasesWithContext indicates an expected call of ListKnowledgeBasesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListKnowledgeBasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledgeBasesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListKnowledgeBasesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockConnectWisdomServiceAPI) ListTagsForResource(arg0 *connectwisdomservice.ListTagsForResourceInput) (*connectwisdomservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) ListTagsForResourceRequest(arg0 *connectwisdomservice.ListTagsForResourceInput) (*request.Request, *connectwisdomservice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *connectwisdomservice.ListTagsForResourceInput, arg2 ...request.Option) (*connectwisdomservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// NotifyRecommendationsReceived mocks base method.
func (m *MockConnectWisdomServiceAPI) NotifyRecommendationsReceived(arg0 *connectwisdomservice.NotifyRecommendationsReceivedInput) (*connectwisdomservice.NotifyRecommendationsReceivedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRecommendationsReceived", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.NotifyRecommendationsReceivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyRecommendationsReceived indicates an expected call of NotifyRecommendationsReceived.
func (mr *MockConnectWisdomServiceAPIMockRecorder) NotifyRecommendationsReceived(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecommendationsReceived", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).NotifyRecommendationsReceived), arg0)
}

// NotifyRecommendationsReceivedRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) NotifyRecommendationsReceivedRequest(arg0 *connectwisdomservice.NotifyRecommendationsReceivedInput) (*request.Request, *connectwisdomservice.NotifyRecommendationsReceivedOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRecommendationsReceivedRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.NotifyRecommendationsReceivedOutput)
	return ret0, ret1
}

// NotifyRecommendationsReceivedRequest indicates an expected call of NotifyRecommendationsReceivedRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) NotifyRecommendationsReceivedRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecommendationsReceivedRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).NotifyRecommendationsReceivedRequest), arg0)
}

// NotifyRecommendationsReceivedWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) NotifyRecommendationsReceivedWithContext(arg0 context.Context, arg1 *connectwisdomservice.NotifyRecommendationsReceivedInput, arg2 ...request.Option) (*connectwisdomservice.NotifyRecommendationsReceivedOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyRecommendationsReceivedWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.NotifyRecommendationsReceivedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyRecommendationsReceivedWithContext indicates an expected call of NotifyRecommendationsReceivedWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) NotifyRecommendationsReceivedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRecommendationsReceivedWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).NotifyRecommendationsReceivedWithContext), varargs...)
}

// QueryAssistant mocks base method.
func (m *MockConnectWisdomServiceAPI) QueryAssistant(arg0 *connectwisdomservice.QueryAssistantInput) (*connectwisdomservice.QueryAssistantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssistant", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.QueryAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssistant indicates an expected call of QueryAssistant.
func (mr *MockConnectWisdomServiceAPIMockRecorder) QueryAssistant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistant", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).QueryAssistant), arg0)
}

// QueryAssistantPages mocks base method.
func (m *MockConnectWisdomServiceAPI) QueryAssistantPages(arg0 *connectwisdomservice.QueryAssistantInput, arg1 func(*connectwisdomservice.QueryAssistantOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssistantPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryAssistantPages indicates an expected call of QueryAssistantPages.
func (mr *MockConnectWisdomServiceAPIMockRecorder) QueryAssistantPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantPages", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).QueryAssistantPages), arg0, arg1)
}

// QueryAssistantPagesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) QueryAssistantPagesWithContext(arg0 context.Context, arg1 *connectwisdomservice.QueryAssistantInput, arg2 func(*connectwisdomservice.QueryAssistantOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAssistantPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryAssistantPagesWithContext indicates an expected call of QueryAssistantPagesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) QueryAssistantPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantPagesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).QueryAssistantPagesWithContext), varargs...)
}

// QueryAssistantRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) QueryAssistantRequest(arg0 *connectwisdomservice.QueryAssistantInput) (*request.Request, *connectwisdomservice.QueryAssistantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssistantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.QueryAssistantOutput)
	return ret0, ret1
}

// QueryAssistantRequest indicates an expected call of QueryAssistantRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) QueryAssistantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).QueryAssistantRequest), arg0)
}

// QueryAssistantWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) QueryAssistantWithContext(arg0 context.Context, arg1 *connectwisdomservice.QueryAssistantInput, arg2 ...request.Option) (*connectwisdomservice.QueryAssistantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAssistantWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.QueryAssistantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssistantWithContext indicates an expected call of QueryAssistantWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) QueryAssistantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssistantWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).QueryAssistantWithContext), varargs...)
}

// RemoveKnowledgeBaseTemplateUri mocks base method.
func (m *MockConnectWisdomServiceAPI) RemoveKnowledgeBaseTemplateUri(arg0 *connectwisdomservice.RemoveKnowledgeBaseTemplateUriInput) (*connectwisdomservice.RemoveKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKnowledgeBaseTemplateUri", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.RemoveKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKnowledgeBaseTemplateUri indicates an expected call of RemoveKnowledgeBaseTemplateUri.
func (mr *MockConnectWisdomServiceAPIMockRecorder) RemoveKnowledgeBaseTemplateUri(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnowledgeBaseTemplateUri", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).RemoveKnowledgeBaseTemplateUri), arg0)
}

// RemoveKnowledgeBaseTemplateUriRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) RemoveKnowledgeBaseTemplateUriRequest(arg0 *connectwisdomservice.RemoveKnowledgeBaseTemplateUriInput) (*request.Request, *connectwisdomservice.RemoveKnowledgeBaseTemplateUriOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKnowledgeBaseTemplateUriRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.RemoveKnowledgeBaseTemplateUriOutput)
	return ret0, ret1
}

// RemoveKnowledgeBaseTemplateUriRequest indicates an expected call of RemoveKnowledgeBaseTemplateUriRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) RemoveKnowledgeBaseTemplateUriRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnowledgeBaseTemplateUriRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).RemoveKnowledgeBaseTemplateUriRequest), arg0)
}

// RemoveKnowledgeBaseTemplateUriWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) RemoveKnowledgeBaseTemplateUriWithContext(arg0 context.Context, arg1 *connectwisdomservice.RemoveKnowledgeBaseTemplateUriInput, arg2 ...request.Option) (*connectwisdomservice.RemoveKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveKnowledgeBaseTemplateUriWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.RemoveKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKnowledgeBaseTemplateUriWithContext indicates an expected call of RemoveKnowledgeBaseTemplateUriWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) RemoveKnowledgeBaseTemplateUriWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnowledgeBaseTemplateUriWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).RemoveKnowledgeBaseTemplateUriWithContext), varargs...)
}

// SearchContent mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchContent(arg0 *connectwisdomservice.SearchContentInput) (*connectwisdomservice.SearchContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContent", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.SearchContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContent indicates an expected call of SearchContent.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContent", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchContent), arg0)
}

// SearchContentPages mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchContentPages(arg0 *connectwisdomservice.SearchContentInput, arg1 func(*connectwisdomservice.SearchContentOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContentPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchContentPages indicates an expected call of SearchContentPages.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchContentPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentPages", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchContentPages), arg0, arg1)
}

// SearchContentPagesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchContentPagesWithContext(arg0 context.Context, arg1 *connectwisdomservice.SearchContentInput, arg2 func(*connectwisdomservice.SearchContentOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchContentPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchContentPagesWithContext indicates an expected call of SearchContentPagesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchContentPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentPagesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchContentPagesWithContext), varargs...)
}

// SearchContentRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchContentRequest(arg0 *connectwisdomservice.SearchContentInput) (*request.Request, *connectwisdomservice.SearchContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.SearchContentOutput)
	return ret0, ret1
}

// SearchContentRequest indicates an expected call of SearchContentRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchContentRequest), arg0)
}

// SearchContentWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchContentWithContext(arg0 context.Context, arg1 *connectwisdomservice.SearchContentInput, arg2 ...request.Option) (*connectwisdomservice.SearchContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchContentWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.SearchContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContentWithContext indicates an expected call of SearchContentWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContentWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchContentWithContext), varargs...)
}

// SearchSessions mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchSessions(arg0 *connectwisdomservice.SearchSessionsInput) (*connectwisdomservice.SearchSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSessions", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.SearchSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSessions indicates an expected call of SearchSessions.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessions", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchSessions), arg0)
}

// SearchSessionsPages mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchSessionsPages(arg0 *connectwisdomservice.SearchSessionsInput, arg1 func(*connectwisdomservice.SearchSessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchSessionsPages indicates an expected call of SearchSessionsPages.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchSessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsPages", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchSessionsPages), arg0, arg1)
}

// SearchSessionsPagesWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchSessionsPagesWithContext(arg0 context.Context, arg1 *connectwisdomservice.SearchSessionsInput, arg2 func(*connectwisdomservice.SearchSessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchSessionsPagesWithContext indicates an expected call of SearchSessionsPagesWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchSessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsPagesWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchSessionsPagesWithContext), varargs...)
}

// SearchSessionsRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchSessionsRequest(arg0 *connectwisdomservice.SearchSessionsInput) (*request.Request, *connectwisdomservice.SearchSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.SearchSessionsOutput)
	return ret0, ret1
}

// SearchSessionsRequest indicates an expected call of SearchSessionsRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchSessionsRequest), arg0)
}

// SearchSessionsWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) SearchSessionsWithContext(arg0 context.Context, arg1 *connectwisdomservice.SearchSessionsInput, arg2 ...request.Option) (*connectwisdomservice.SearchSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.SearchSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSessionsWithContext indicates an expected call of SearchSessionsWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) SearchSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSessionsWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).SearchSessionsWithContext), varargs...)
}

// StartContentUpload mocks base method.
func (m *MockConnectWisdomServiceAPI) StartContentUpload(arg0 *connectwisdomservice.StartContentUploadInput) (*connectwisdomservice.StartContentUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContentUpload", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.StartContentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContentUpload indicates an expected call of StartContentUpload.
func (mr *MockConnectWisdomServiceAPIMockRecorder) StartContentUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentUpload", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).StartContentUpload), arg0)
}

// StartContentUploadRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) StartContentUploadRequest(arg0 *connectwisdomservice.StartContentUploadInput) (*request.Request, *connectwisdomservice.StartContentUploadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContentUploadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.StartContentUploadOutput)
	return ret0, ret1
}

// StartContentUploadRequest indicates an expected call of StartContentUploadRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) StartContentUploadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentUploadRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).StartContentUploadRequest), arg0)
}

// StartContentUploadWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) StartContentUploadWithContext(arg0 context.Context, arg1 *connectwisdomservice.StartContentUploadInput, arg2 ...request.Option) (*connectwisdomservice.StartContentUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartContentUploadWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.StartContentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContentUploadWithContext indicates an expected call of StartContentUploadWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) StartContentUploadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentUploadWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).StartContentUploadWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockConnectWisdomServiceAPI) TagResource(arg0 *connectwisdomservice.TagResourceInput) (*connectwisdomservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockConnectWisdomServiceAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) TagResourceRequest(arg0 *connectwisdomservice.TagResourceInput) (*request.Request, *connectwisdomservice.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) TagResourceWithContext(arg0 context.Context, arg1 *connectwisdomservice.TagResourceInput, arg2 ...request.Option) (*connectwisdomservice.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockConnectWisdomServiceAPI) UntagResource(arg0 *connectwisdomservice.UntagResourceInput) (*connectwisdomservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) UntagResourceRequest(arg0 *connectwisdomservice.UntagResourceInput) (*request.Request, *connectwisdomservice.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) UntagResourceWithContext(arg0 context.Context, arg1 *connectwisdomservice.UntagResourceInput, arg2 ...request.Option) (*connectwisdomservice.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateContent mocks base method.
func (m *MockConnectWisdomServiceAPI) UpdateContent(arg0 *connectwisdomservice.UpdateContentInput) (*connectwisdomservice.UpdateContentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContent", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.UpdateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContent indicates an expected call of UpdateContent.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UpdateContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContent", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UpdateContent), arg0)
}

// UpdateContentRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) UpdateContentRequest(arg0 *connectwisdomservice.UpdateContentInput) (*request.Request, *connectwisdomservice.UpdateContentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.UpdateContentOutput)
	return ret0, ret1
}

// UpdateContentRequest indicates an expected call of UpdateContentRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UpdateContentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UpdateContentRequest), arg0)
}

// UpdateContentWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) UpdateContentWithContext(arg0 context.Context, arg1 *connectwisdomservice.UpdateContentInput, arg2 ...request.Option) (*connectwisdomservice.UpdateContentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContentWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.UpdateContentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContentWithContext indicates an expected call of UpdateContentWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UpdateContentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UpdateContentWithContext), varargs...)
}

// UpdateKnowledgeBaseTemplateUri mocks base method.
func (m *MockConnectWisdomServiceAPI) UpdateKnowledgeBaseTemplateUri(arg0 *connectwisdomservice.UpdateKnowledgeBaseTemplateUriInput) (*connectwisdomservice.UpdateKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseTemplateUri", arg0)
	ret0, _ := ret[0].(*connectwisdomservice.UpdateKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledgeBaseTemplateUri indicates an expected call of UpdateKnowledgeBaseTemplateUri.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UpdateKnowledgeBaseTemplateUri(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseTemplateUri", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UpdateKnowledgeBaseTemplateUri), arg0)
}

// UpdateKnowledgeBaseTemplateUriRequest mocks base method.
func (m *MockConnectWisdomServiceAPI) UpdateKnowledgeBaseTemplateUriRequest(arg0 *connectwisdomservice.UpdateKnowledgeBaseTemplateUriInput) (*request.Request, *connectwisdomservice.UpdateKnowledgeBaseTemplateUriOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseTemplateUriRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectwisdomservice.UpdateKnowledgeBaseTemplateUriOutput)
	return ret0, ret1
}

// UpdateKnowledgeBaseTemplateUriRequest indicates an expected call of UpdateKnowledgeBaseTemplateUriRequest.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UpdateKnowledgeBaseTemplateUriRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseTemplateUriRequest", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UpdateKnowledgeBaseTemplateUriRequest), arg0)
}

// UpdateKnowledgeBaseTemplateUriWithContext mocks base method.
func (m *MockConnectWisdomServiceAPI) UpdateKnowledgeBaseTemplateUriWithContext(arg0 context.Context, arg1 *connectwisdomservice.UpdateKnowledgeBaseTemplateUriInput, arg2 ...request.Option) (*connectwisdomservice.UpdateKnowledgeBaseTemplateUriOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKnowledgeBaseTemplateUriWithContext", varargs...)
	ret0, _ := ret[0].(*connectwisdomservice.UpdateKnowledgeBaseTemplateUriOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKnowledgeBaseTemplateUriWithContext indicates an expected call of UpdateKnowledgeBaseTemplateUriWithContext.
func (mr *MockConnectWisdomServiceAPIMockRecorder) UpdateKnowledgeBaseTemplateUriWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKnowledgeBaseTemplateUriWithContext", reflect.TypeOf((*MockConnectWisdomServiceAPI)(nil).UpdateKnowledgeBaseTemplateUriWithContext), varargs...)
}

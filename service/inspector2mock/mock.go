// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/inspector2/inspector2iface (interfaces: Inspector2API)

// Package inspector2mock is a generated GoMock package.
package inspector2mock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	inspector2 "github.com/aws/aws-sdk-go/service/inspector2"
	gomock "github.com/golang/mock/gomock"
)

// MockInspector2API is a mock of Inspector2API interface.
type MockInspector2API struct {
	ctrl     *gomock.Controller
	recorder *MockInspector2APIMockRecorder
}

// MockInspector2APIMockRecorder is the mock recorder for MockInspector2API.
type MockInspector2APIMockRecorder struct {
	mock *MockInspector2API
}

// NewMockInspector2API creates a new mock instance.
func NewMockInspector2API(ctrl *gomock.Controller) *MockInspector2API {
	mock := &MockInspector2API{ctrl: ctrl}
	mock.recorder = &MockInspector2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInspector2API) EXPECT() *MockInspector2APIMockRecorder {
	return m.recorder
}

// AssociateMember mocks base method.
func (m *MockInspector2API) AssociateMember(arg0 *inspector2.AssociateMemberInput) (*inspector2.AssociateMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMember", arg0)
	ret0, _ := ret[0].(*inspector2.AssociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMember indicates an expected call of AssociateMember.
func (mr *MockInspector2APIMockRecorder) AssociateMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMember", reflect.TypeOf((*MockInspector2API)(nil).AssociateMember), arg0)
}

// AssociateMemberRequest mocks base method.
func (m *MockInspector2API) AssociateMemberRequest(arg0 *inspector2.AssociateMemberInput) (*request.Request, *inspector2.AssociateMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.AssociateMemberOutput)
	return ret0, ret1
}

// AssociateMemberRequest indicates an expected call of AssociateMemberRequest.
func (mr *MockInspector2APIMockRecorder) AssociateMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberRequest", reflect.TypeOf((*MockInspector2API)(nil).AssociateMemberRequest), arg0)
}

// AssociateMemberWithContext mocks base method.
func (m *MockInspector2API) AssociateMemberWithContext(arg0 context.Context, arg1 *inspector2.AssociateMemberInput, arg2 ...request.Option) (*inspector2.AssociateMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateMemberWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.AssociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateMemberWithContext indicates an expected call of AssociateMemberWithContext.
func (mr *MockInspector2APIMockRecorder) AssociateMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateMemberWithContext", reflect.TypeOf((*MockInspector2API)(nil).AssociateMemberWithContext), varargs...)
}

// BatchGetAccountStatus mocks base method.
func (m *MockInspector2API) BatchGetAccountStatus(arg0 *inspector2.BatchGetAccountStatusInput) (*inspector2.BatchGetAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetAccountStatus", arg0)
	ret0, _ := ret[0].(*inspector2.BatchGetAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAccountStatus indicates an expected call of BatchGetAccountStatus.
func (mr *MockInspector2APIMockRecorder) BatchGetAccountStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAccountStatus", reflect.TypeOf((*MockInspector2API)(nil).BatchGetAccountStatus), arg0)
}

// BatchGetAccountStatusRequest mocks base method.
func (m *MockInspector2API) BatchGetAccountStatusRequest(arg0 *inspector2.BatchGetAccountStatusInput) (*request.Request, *inspector2.BatchGetAccountStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetAccountStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchGetAccountStatusOutput)
	return ret0, ret1
}

// BatchGetAccountStatusRequest indicates an expected call of BatchGetAccountStatusRequest.
func (mr *MockInspector2APIMockRecorder) BatchGetAccountStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAccountStatusRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchGetAccountStatusRequest), arg0)
}

// BatchGetAccountStatusWithContext mocks base method.
func (m *MockInspector2API) BatchGetAccountStatusWithContext(arg0 context.Context, arg1 *inspector2.BatchGetAccountStatusInput, arg2 ...request.Option) (*inspector2.BatchGetAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetAccountStatusWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchGetAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetAccountStatusWithContext indicates an expected call of BatchGetAccountStatusWithContext.
func (mr *MockInspector2APIMockRecorder) BatchGetAccountStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetAccountStatusWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchGetAccountStatusWithContext), varargs...)
}

// BatchGetFreeTrialInfo mocks base method.
func (m *MockInspector2API) BatchGetFreeTrialInfo(arg0 *inspector2.BatchGetFreeTrialInfoInput) (*inspector2.BatchGetFreeTrialInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFreeTrialInfo", arg0)
	ret0, _ := ret[0].(*inspector2.BatchGetFreeTrialInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFreeTrialInfo indicates an expected call of BatchGetFreeTrialInfo.
func (mr *MockInspector2APIMockRecorder) BatchGetFreeTrialInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFreeTrialInfo", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFreeTrialInfo), arg0)
}

// BatchGetFreeTrialInfoRequest mocks base method.
func (m *MockInspector2API) BatchGetFreeTrialInfoRequest(arg0 *inspector2.BatchGetFreeTrialInfoInput) (*request.Request, *inspector2.BatchGetFreeTrialInfoOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFreeTrialInfoRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.BatchGetFreeTrialInfoOutput)
	return ret0, ret1
}

// BatchGetFreeTrialInfoRequest indicates an expected call of BatchGetFreeTrialInfoRequest.
func (mr *MockInspector2APIMockRecorder) BatchGetFreeTrialInfoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFreeTrialInfoRequest", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFreeTrialInfoRequest), arg0)
}

// BatchGetFreeTrialInfoWithContext mocks base method.
func (m *MockInspector2API) BatchGetFreeTrialInfoWithContext(arg0 context.Context, arg1 *inspector2.BatchGetFreeTrialInfoInput, arg2 ...request.Option) (*inspector2.BatchGetFreeTrialInfoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetFreeTrialInfoWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.BatchGetFreeTrialInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFreeTrialInfoWithContext indicates an expected call of BatchGetFreeTrialInfoWithContext.
func (mr *MockInspector2APIMockRecorder) BatchGetFreeTrialInfoWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFreeTrialInfoWithContext", reflect.TypeOf((*MockInspector2API)(nil).BatchGetFreeTrialInfoWithContext), varargs...)
}

// CancelFindingsReport mocks base method.
func (m *MockInspector2API) CancelFindingsReport(arg0 *inspector2.CancelFindingsReportInput) (*inspector2.CancelFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFindingsReport", arg0)
	ret0, _ := ret[0].(*inspector2.CancelFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFindingsReport indicates an expected call of CancelFindingsReport.
func (mr *MockInspector2APIMockRecorder) CancelFindingsReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFindingsReport", reflect.TypeOf((*MockInspector2API)(nil).CancelFindingsReport), arg0)
}

// CancelFindingsReportRequest mocks base method.
func (m *MockInspector2API) CancelFindingsReportRequest(arg0 *inspector2.CancelFindingsReportInput) (*request.Request, *inspector2.CancelFindingsReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelFindingsReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CancelFindingsReportOutput)
	return ret0, ret1
}

// CancelFindingsReportRequest indicates an expected call of CancelFindingsReportRequest.
func (mr *MockInspector2APIMockRecorder) CancelFindingsReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFindingsReportRequest", reflect.TypeOf((*MockInspector2API)(nil).CancelFindingsReportRequest), arg0)
}

// CancelFindingsReportWithContext mocks base method.
func (m *MockInspector2API) CancelFindingsReportWithContext(arg0 context.Context, arg1 *inspector2.CancelFindingsReportInput, arg2 ...request.Option) (*inspector2.CancelFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelFindingsReportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CancelFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFindingsReportWithContext indicates an expected call of CancelFindingsReportWithContext.
func (mr *MockInspector2APIMockRecorder) CancelFindingsReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFindingsReportWithContext", reflect.TypeOf((*MockInspector2API)(nil).CancelFindingsReportWithContext), varargs...)
}

// CreateFilter mocks base method.
func (m *MockInspector2API) CreateFilter(arg0 *inspector2.CreateFilterInput) (*inspector2.CreateFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilter", arg0)
	ret0, _ := ret[0].(*inspector2.CreateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilter indicates an expected call of CreateFilter.
func (mr *MockInspector2APIMockRecorder) CreateFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilter", reflect.TypeOf((*MockInspector2API)(nil).CreateFilter), arg0)
}

// CreateFilterRequest mocks base method.
func (m *MockInspector2API) CreateFilterRequest(arg0 *inspector2.CreateFilterInput) (*request.Request, *inspector2.CreateFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CreateFilterOutput)
	return ret0, ret1
}

// CreateFilterRequest indicates an expected call of CreateFilterRequest.
func (mr *MockInspector2APIMockRecorder) CreateFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterRequest", reflect.TypeOf((*MockInspector2API)(nil).CreateFilterRequest), arg0)
}

// CreateFilterWithContext mocks base method.
func (m *MockInspector2API) CreateFilterWithContext(arg0 context.Context, arg1 *inspector2.CreateFilterInput, arg2 ...request.Option) (*inspector2.CreateFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFilterWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CreateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilterWithContext indicates an expected call of CreateFilterWithContext.
func (mr *MockInspector2APIMockRecorder) CreateFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterWithContext", reflect.TypeOf((*MockInspector2API)(nil).CreateFilterWithContext), varargs...)
}

// CreateFindingsReport mocks base method.
func (m *MockInspector2API) CreateFindingsReport(arg0 *inspector2.CreateFindingsReportInput) (*inspector2.CreateFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFindingsReport", arg0)
	ret0, _ := ret[0].(*inspector2.CreateFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFindingsReport indicates an expected call of CreateFindingsReport.
func (mr *MockInspector2APIMockRecorder) CreateFindingsReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingsReport", reflect.TypeOf((*MockInspector2API)(nil).CreateFindingsReport), arg0)
}

// CreateFindingsReportRequest mocks base method.
func (m *MockInspector2API) CreateFindingsReportRequest(arg0 *inspector2.CreateFindingsReportInput) (*request.Request, *inspector2.CreateFindingsReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFindingsReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.CreateFindingsReportOutput)
	return ret0, ret1
}

// CreateFindingsReportRequest indicates an expected call of CreateFindingsReportRequest.
func (mr *MockInspector2APIMockRecorder) CreateFindingsReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingsReportRequest", reflect.TypeOf((*MockInspector2API)(nil).CreateFindingsReportRequest), arg0)
}

// CreateFindingsReportWithContext mocks base method.
func (m *MockInspector2API) CreateFindingsReportWithContext(arg0 context.Context, arg1 *inspector2.CreateFindingsReportInput, arg2 ...request.Option) (*inspector2.CreateFindingsReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFindingsReportWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.CreateFindingsReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFindingsReportWithContext indicates an expected call of CreateFindingsReportWithContext.
func (mr *MockInspector2APIMockRecorder) CreateFindingsReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFindingsReportWithContext", reflect.TypeOf((*MockInspector2API)(nil).CreateFindingsReportWithContext), varargs...)
}

// DeleteFilter mocks base method.
func (m *MockInspector2API) DeleteFilter(arg0 *inspector2.DeleteFilterInput) (*inspector2.DeleteFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilter", arg0)
	ret0, _ := ret[0].(*inspector2.DeleteFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilter indicates an expected call of DeleteFilter.
func (mr *MockInspector2APIMockRecorder) DeleteFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilter", reflect.TypeOf((*MockInspector2API)(nil).DeleteFilter), arg0)
}

// DeleteFilterRequest mocks base method.
func (m *MockInspector2API) DeleteFilterRequest(arg0 *inspector2.DeleteFilterInput) (*request.Request, *inspector2.DeleteFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DeleteFilterOutput)
	return ret0, ret1
}

// DeleteFilterRequest indicates an expected call of DeleteFilterRequest.
func (mr *MockInspector2APIMockRecorder) DeleteFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilterRequest", reflect.TypeOf((*MockInspector2API)(nil).DeleteFilterRequest), arg0)
}

// DeleteFilterWithContext mocks base method.
func (m *MockInspector2API) DeleteFilterWithContext(arg0 context.Context, arg1 *inspector2.DeleteFilterInput, arg2 ...request.Option) (*inspector2.DeleteFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFilterWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DeleteFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilterWithContext indicates an expected call of DeleteFilterWithContext.
func (mr *MockInspector2APIMockRecorder) DeleteFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilterWithContext", reflect.TypeOf((*MockInspector2API)(nil).DeleteFilterWithContext), varargs...)
}

// DescribeOrganizationConfiguration mocks base method.
func (m *MockInspector2API) DescribeOrganizationConfiguration(arg0 *inspector2.DescribeOrganizationConfigurationInput) (*inspector2.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfiguration indicates an expected call of DescribeOrganizationConfiguration.
func (mr *MockInspector2APIMockRecorder) DescribeOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfiguration", reflect.TypeOf((*MockInspector2API)(nil).DescribeOrganizationConfiguration), arg0)
}

// DescribeOrganizationConfigurationRequest mocks base method.
func (m *MockInspector2API) DescribeOrganizationConfigurationRequest(arg0 *inspector2.DescribeOrganizationConfigurationInput) (*request.Request, *inspector2.DescribeOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DescribeOrganizationConfigurationOutput)
	return ret0, ret1
}

// DescribeOrganizationConfigurationRequest indicates an expected call of DescribeOrganizationConfigurationRequest.
func (mr *MockInspector2APIMockRecorder) DescribeOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).DescribeOrganizationConfigurationRequest), arg0)
}

// DescribeOrganizationConfigurationWithContext mocks base method.
func (m *MockInspector2API) DescribeOrganizationConfigurationWithContext(arg0 context.Context, arg1 *inspector2.DescribeOrganizationConfigurationInput, arg2 ...request.Option) (*inspector2.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfigurationWithContext indicates an expected call of DescribeOrganizationConfigurationWithContext.
func (mr *MockInspector2APIMockRecorder) DescribeOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).DescribeOrganizationConfigurationWithContext), varargs...)
}

// Disable mocks base method.
func (m *MockInspector2API) Disable(arg0 *inspector2.DisableInput) (*inspector2.DisableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", arg0)
	ret0, _ := ret[0].(*inspector2.DisableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockInspector2APIMockRecorder) Disable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockInspector2API)(nil).Disable), arg0)
}

// DisableDelegatedAdminAccount mocks base method.
func (m *MockInspector2API) DisableDelegatedAdminAccount(arg0 *inspector2.DisableDelegatedAdminAccountInput) (*inspector2.DisableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDelegatedAdminAccount", arg0)
	ret0, _ := ret[0].(*inspector2.DisableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableDelegatedAdminAccount indicates an expected call of DisableDelegatedAdminAccount.
func (mr *MockInspector2APIMockRecorder) DisableDelegatedAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDelegatedAdminAccount", reflect.TypeOf((*MockInspector2API)(nil).DisableDelegatedAdminAccount), arg0)
}

// DisableDelegatedAdminAccountRequest mocks base method.
func (m *MockInspector2API) DisableDelegatedAdminAccountRequest(arg0 *inspector2.DisableDelegatedAdminAccountInput) (*request.Request, *inspector2.DisableDelegatedAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDelegatedAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DisableDelegatedAdminAccountOutput)
	return ret0, ret1
}

// DisableDelegatedAdminAccountRequest indicates an expected call of DisableDelegatedAdminAccountRequest.
func (mr *MockInspector2APIMockRecorder) DisableDelegatedAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDelegatedAdminAccountRequest", reflect.TypeOf((*MockInspector2API)(nil).DisableDelegatedAdminAccountRequest), arg0)
}

// DisableDelegatedAdminAccountWithContext mocks base method.
func (m *MockInspector2API) DisableDelegatedAdminAccountWithContext(arg0 context.Context, arg1 *inspector2.DisableDelegatedAdminAccountInput, arg2 ...request.Option) (*inspector2.DisableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableDelegatedAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DisableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableDelegatedAdminAccountWithContext indicates an expected call of DisableDelegatedAdminAccountWithContext.
func (mr *MockInspector2APIMockRecorder) DisableDelegatedAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDelegatedAdminAccountWithContext", reflect.TypeOf((*MockInspector2API)(nil).DisableDelegatedAdminAccountWithContext), varargs...)
}

// DisableRequest mocks base method.
func (m *MockInspector2API) DisableRequest(arg0 *inspector2.DisableInput) (*request.Request, *inspector2.DisableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DisableOutput)
	return ret0, ret1
}

// DisableRequest indicates an expected call of DisableRequest.
func (mr *MockInspector2APIMockRecorder) DisableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRequest", reflect.TypeOf((*MockInspector2API)(nil).DisableRequest), arg0)
}

// DisableWithContext mocks base method.
func (m *MockInspector2API) DisableWithContext(arg0 context.Context, arg1 *inspector2.DisableInput, arg2 ...request.Option) (*inspector2.DisableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DisableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableWithContext indicates an expected call of DisableWithContext.
func (mr *MockInspector2APIMockRecorder) DisableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWithContext", reflect.TypeOf((*MockInspector2API)(nil).DisableWithContext), varargs...)
}

// DisassociateMember mocks base method.
func (m *MockInspector2API) DisassociateMember(arg0 *inspector2.DisassociateMemberInput) (*inspector2.DisassociateMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMember", arg0)
	ret0, _ := ret[0].(*inspector2.DisassociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMember indicates an expected call of DisassociateMember.
func (mr *MockInspector2APIMockRecorder) DisassociateMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMember", reflect.TypeOf((*MockInspector2API)(nil).DisassociateMember), arg0)
}

// DisassociateMemberRequest mocks base method.
func (m *MockInspector2API) DisassociateMemberRequest(arg0 *inspector2.DisassociateMemberInput) (*request.Request, *inspector2.DisassociateMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.DisassociateMemberOutput)
	return ret0, ret1
}

// DisassociateMemberRequest indicates an expected call of DisassociateMemberRequest.
func (mr *MockInspector2APIMockRecorder) DisassociateMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberRequest", reflect.TypeOf((*MockInspector2API)(nil).DisassociateMemberRequest), arg0)
}

// DisassociateMemberWithContext mocks base method.
func (m *MockInspector2API) DisassociateMemberWithContext(arg0 context.Context, arg1 *inspector2.DisassociateMemberInput, arg2 ...request.Option) (*inspector2.DisassociateMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMemberWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.DisassociateMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMemberWithContext indicates an expected call of DisassociateMemberWithContext.
func (mr *MockInspector2APIMockRecorder) DisassociateMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMemberWithContext", reflect.TypeOf((*MockInspector2API)(nil).DisassociateMemberWithContext), varargs...)
}

// Enable mocks base method.
func (m *MockInspector2API) Enable(arg0 *inspector2.EnableInput) (*inspector2.EnableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", arg0)
	ret0, _ := ret[0].(*inspector2.EnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockInspector2APIMockRecorder) Enable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockInspector2API)(nil).Enable), arg0)
}

// EnableDelegatedAdminAccount mocks base method.
func (m *MockInspector2API) EnableDelegatedAdminAccount(arg0 *inspector2.EnableDelegatedAdminAccountInput) (*inspector2.EnableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDelegatedAdminAccount", arg0)
	ret0, _ := ret[0].(*inspector2.EnableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableDelegatedAdminAccount indicates an expected call of EnableDelegatedAdminAccount.
func (mr *MockInspector2APIMockRecorder) EnableDelegatedAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDelegatedAdminAccount", reflect.TypeOf((*MockInspector2API)(nil).EnableDelegatedAdminAccount), arg0)
}

// EnableDelegatedAdminAccountRequest mocks base method.
func (m *MockInspector2API) EnableDelegatedAdminAccountRequest(arg0 *inspector2.EnableDelegatedAdminAccountInput) (*request.Request, *inspector2.EnableDelegatedAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDelegatedAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.EnableDelegatedAdminAccountOutput)
	return ret0, ret1
}

// EnableDelegatedAdminAccountRequest indicates an expected call of EnableDelegatedAdminAccountRequest.
func (mr *MockInspector2APIMockRecorder) EnableDelegatedAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDelegatedAdminAccountRequest", reflect.TypeOf((*MockInspector2API)(nil).EnableDelegatedAdminAccountRequest), arg0)
}

// EnableDelegatedAdminAccountWithContext mocks base method.
func (m *MockInspector2API) EnableDelegatedAdminAccountWithContext(arg0 context.Context, arg1 *inspector2.EnableDelegatedAdminAccountInput, arg2 ...request.Option) (*inspector2.EnableDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableDelegatedAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.EnableDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableDelegatedAdminAccountWithContext indicates an expected call of EnableDelegatedAdminAccountWithContext.
func (mr *MockInspector2APIMockRecorder) EnableDelegatedAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDelegatedAdminAccountWithContext", reflect.TypeOf((*MockInspector2API)(nil).EnableDelegatedAdminAccountWithContext), varargs...)
}

// EnableRequest mocks base method.
func (m *MockInspector2API) EnableRequest(arg0 *inspector2.EnableInput) (*request.Request, *inspector2.EnableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.EnableOutput)
	return ret0, ret1
}

// EnableRequest indicates an expected call of EnableRequest.
func (mr *MockInspector2APIMockRecorder) EnableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRequest", reflect.TypeOf((*MockInspector2API)(nil).EnableRequest), arg0)
}

// EnableWithContext mocks base method.
func (m *MockInspector2API) EnableWithContext(arg0 context.Context, arg1 *inspector2.EnableInput, arg2 ...request.Option) (*inspector2.EnableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.EnableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWithContext indicates an expected call of EnableWithContext.
func (mr *MockInspector2APIMockRecorder) EnableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWithContext", reflect.TypeOf((*MockInspector2API)(nil).EnableWithContext), varargs...)
}

// GetDelegatedAdminAccount mocks base method.
func (m *MockInspector2API) GetDelegatedAdminAccount(arg0 *inspector2.GetDelegatedAdminAccountInput) (*inspector2.GetDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatedAdminAccount", arg0)
	ret0, _ := ret[0].(*inspector2.GetDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatedAdminAccount indicates an expected call of GetDelegatedAdminAccount.
func (mr *MockInspector2APIMockRecorder) GetDelegatedAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedAdminAccount", reflect.TypeOf((*MockInspector2API)(nil).GetDelegatedAdminAccount), arg0)
}

// GetDelegatedAdminAccountRequest mocks base method.
func (m *MockInspector2API) GetDelegatedAdminAccountRequest(arg0 *inspector2.GetDelegatedAdminAccountInput) (*request.Request, *inspector2.GetDelegatedAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatedAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetDelegatedAdminAccountOutput)
	return ret0, ret1
}

// GetDelegatedAdminAccountRequest indicates an expected call of GetDelegatedAdminAccountRequest.
func (mr *MockInspector2APIMockRecorder) GetDelegatedAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedAdminAccountRequest", reflect.TypeOf((*MockInspector2API)(nil).GetDelegatedAdminAccountRequest), arg0)
}

// GetDelegatedAdminAccountWithContext mocks base method.
func (m *MockInspector2API) GetDelegatedAdminAccountWithContext(arg0 context.Context, arg1 *inspector2.GetDelegatedAdminAccountInput, arg2 ...request.Option) (*inspector2.GetDelegatedAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDelegatedAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetDelegatedAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatedAdminAccountWithContext indicates an expected call of GetDelegatedAdminAccountWithContext.
func (mr *MockInspector2APIMockRecorder) GetDelegatedAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatedAdminAccountWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetDelegatedAdminAccountWithContext), varargs...)
}

// GetFindingsReportStatus mocks base method.
func (m *MockInspector2API) GetFindingsReportStatus(arg0 *inspector2.GetFindingsReportStatusInput) (*inspector2.GetFindingsReportStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsReportStatus", arg0)
	ret0, _ := ret[0].(*inspector2.GetFindingsReportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsReportStatus indicates an expected call of GetFindingsReportStatus.
func (mr *MockInspector2APIMockRecorder) GetFindingsReportStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportStatus", reflect.TypeOf((*MockInspector2API)(nil).GetFindingsReportStatus), arg0)
}

// GetFindingsReportStatusRequest mocks base method.
func (m *MockInspector2API) GetFindingsReportStatusRequest(arg0 *inspector2.GetFindingsReportStatusInput) (*request.Request, *inspector2.GetFindingsReportStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsReportStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetFindingsReportStatusOutput)
	return ret0, ret1
}

// GetFindingsReportStatusRequest indicates an expected call of GetFindingsReportStatusRequest.
func (mr *MockInspector2APIMockRecorder) GetFindingsReportStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportStatusRequest", reflect.TypeOf((*MockInspector2API)(nil).GetFindingsReportStatusRequest), arg0)
}

// GetFindingsReportStatusWithContext mocks base method.
func (m *MockInspector2API) GetFindingsReportStatusWithContext(arg0 context.Context, arg1 *inspector2.GetFindingsReportStatusInput, arg2 ...request.Option) (*inspector2.GetFindingsReportStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsReportStatusWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetFindingsReportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsReportStatusWithContext indicates an expected call of GetFindingsReportStatusWithContext.
func (mr *MockInspector2APIMockRecorder) GetFindingsReportStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportStatusWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetFindingsReportStatusWithContext), varargs...)
}

// GetMember mocks base method.
func (m *MockInspector2API) GetMember(arg0 *inspector2.GetMemberInput) (*inspector2.GetMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", arg0)
	ret0, _ := ret[0].(*inspector2.GetMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockInspector2APIMockRecorder) GetMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockInspector2API)(nil).GetMember), arg0)
}

// GetMemberRequest mocks base method.
func (m *MockInspector2API) GetMemberRequest(arg0 *inspector2.GetMemberInput) (*request.Request, *inspector2.GetMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.GetMemberOutput)
	return ret0, ret1
}

// GetMemberRequest indicates an expected call of GetMemberRequest.
func (mr *MockInspector2APIMockRecorder) GetMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberRequest", reflect.TypeOf((*MockInspector2API)(nil).GetMemberRequest), arg0)
}

// GetMemberWithContext mocks base method.
func (m *MockInspector2API) GetMemberWithContext(arg0 context.Context, arg1 *inspector2.GetMemberInput, arg2 ...request.Option) (*inspector2.GetMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMemberWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.GetMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberWithContext indicates an expected call of GetMemberWithContext.
func (mr *MockInspector2APIMockRecorder) GetMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberWithContext", reflect.TypeOf((*MockInspector2API)(nil).GetMemberWithContext), varargs...)
}

// ListAccountPermissions mocks base method.
func (m *MockInspector2API) ListAccountPermissions(arg0 *inspector2.ListAccountPermissionsInput) (*inspector2.ListAccountPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountPermissions", arg0)
	ret0, _ := ret[0].(*inspector2.ListAccountPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountPermissions indicates an expected call of ListAccountPermissions.
func (mr *MockInspector2APIMockRecorder) ListAccountPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissions", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissions), arg0)
}

// ListAccountPermissionsPages mocks base method.
func (m *MockInspector2API) ListAccountPermissionsPages(arg0 *inspector2.ListAccountPermissionsInput, arg1 func(*inspector2.ListAccountPermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountPermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountPermissionsPages indicates an expected call of ListAccountPermissionsPages.
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsPages", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsPages), arg0, arg1)
}

// ListAccountPermissionsPagesWithContext mocks base method.
func (m *MockInspector2API) ListAccountPermissionsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListAccountPermissionsInput, arg2 func(*inspector2.ListAccountPermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountPermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAccountPermissionsPagesWithContext indicates an expected call of ListAccountPermissionsPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsPagesWithContext), varargs...)
}

// ListAccountPermissionsRequest mocks base method.
func (m *MockInspector2API) ListAccountPermissionsRequest(arg0 *inspector2.ListAccountPermissionsInput) (*request.Request, *inspector2.ListAccountPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListAccountPermissionsOutput)
	return ret0, ret1
}

// ListAccountPermissionsRequest indicates an expected call of ListAccountPermissionsRequest.
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsRequest), arg0)
}

// ListAccountPermissionsWithContext mocks base method.
func (m *MockInspector2API) ListAccountPermissionsWithContext(arg0 context.Context, arg1 *inspector2.ListAccountPermissionsInput, arg2 ...request.Option) (*inspector2.ListAccountPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListAccountPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountPermissionsWithContext indicates an expected call of ListAccountPermissionsWithContext.
func (mr *MockInspector2APIMockRecorder) ListAccountPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountPermissionsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListAccountPermissionsWithContext), varargs...)
}

// ListCoverage mocks base method.
func (m *MockInspector2API) ListCoverage(arg0 *inspector2.ListCoverageInput) (*inspector2.ListCoverageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverage", arg0)
	ret0, _ := ret[0].(*inspector2.ListCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverage indicates an expected call of ListCoverage.
func (mr *MockInspector2APIMockRecorder) ListCoverage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverage", reflect.TypeOf((*MockInspector2API)(nil).ListCoverage), arg0)
}

// ListCoveragePages mocks base method.
func (m *MockInspector2API) ListCoveragePages(arg0 *inspector2.ListCoverageInput, arg1 func(*inspector2.ListCoverageOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoveragePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoveragePages indicates an expected call of ListCoveragePages.
func (mr *MockInspector2APIMockRecorder) ListCoveragePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoveragePages", reflect.TypeOf((*MockInspector2API)(nil).ListCoveragePages), arg0, arg1)
}

// ListCoveragePagesWithContext mocks base method.
func (m *MockInspector2API) ListCoveragePagesWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageInput, arg2 func(*inspector2.ListCoverageOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoveragePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoveragePagesWithContext indicates an expected call of ListCoveragePagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListCoveragePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoveragePagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoveragePagesWithContext), varargs...)
}

// ListCoverageRequest mocks base method.
func (m *MockInspector2API) ListCoverageRequest(arg0 *inspector2.ListCoverageInput) (*request.Request, *inspector2.ListCoverageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCoverageOutput)
	return ret0, ret1
}

// ListCoverageRequest indicates an expected call of ListCoverageRequest.
func (mr *MockInspector2APIMockRecorder) ListCoverageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageRequest), arg0)
}

// ListCoverageStatistics mocks base method.
func (m *MockInspector2API) ListCoverageStatistics(arg0 *inspector2.ListCoverageStatisticsInput) (*inspector2.ListCoverageStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageStatistics", arg0)
	ret0, _ := ret[0].(*inspector2.ListCoverageStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverageStatistics indicates an expected call of ListCoverageStatistics.
func (mr *MockInspector2APIMockRecorder) ListCoverageStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatistics", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatistics), arg0)
}

// ListCoverageStatisticsPages mocks base method.
func (m *MockInspector2API) ListCoverageStatisticsPages(arg0 *inspector2.ListCoverageStatisticsInput, arg1 func(*inspector2.ListCoverageStatisticsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageStatisticsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoverageStatisticsPages indicates an expected call of ListCoverageStatisticsPages.
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsPages", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsPages), arg0, arg1)
}

// ListCoverageStatisticsPagesWithContext mocks base method.
func (m *MockInspector2API) ListCoverageStatisticsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageStatisticsInput, arg2 func(*inspector2.ListCoverageStatisticsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoverageStatisticsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCoverageStatisticsPagesWithContext indicates an expected call of ListCoverageStatisticsPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsPagesWithContext), varargs...)
}

// ListCoverageStatisticsRequest mocks base method.
func (m *MockInspector2API) ListCoverageStatisticsRequest(arg0 *inspector2.ListCoverageStatisticsInput) (*request.Request, *inspector2.ListCoverageStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoverageStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListCoverageStatisticsOutput)
	return ret0, ret1
}

// ListCoverageStatisticsRequest indicates an expected call of ListCoverageStatisticsRequest.
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsRequest), arg0)
}

// ListCoverageStatisticsWithContext mocks base method.
func (m *MockInspector2API) ListCoverageStatisticsWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageStatisticsInput, arg2 ...request.Option) (*inspector2.ListCoverageStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoverageStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCoverageStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverageStatisticsWithContext indicates an expected call of ListCoverageStatisticsWithContext.
func (mr *MockInspector2APIMockRecorder) ListCoverageStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageStatisticsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageStatisticsWithContext), varargs...)
}

// ListCoverageWithContext mocks base method.
func (m *MockInspector2API) ListCoverageWithContext(arg0 context.Context, arg1 *inspector2.ListCoverageInput, arg2 ...request.Option) (*inspector2.ListCoverageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCoverageWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListCoverageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoverageWithContext indicates an expected call of ListCoverageWithContext.
func (mr *MockInspector2APIMockRecorder) ListCoverageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoverageWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListCoverageWithContext), varargs...)
}

// ListDelegatedAdminAccounts mocks base method.
func (m *MockInspector2API) ListDelegatedAdminAccounts(arg0 *inspector2.ListDelegatedAdminAccountsInput) (*inspector2.ListDelegatedAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccounts", arg0)
	ret0, _ := ret[0].(*inspector2.ListDelegatedAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedAdminAccounts indicates an expected call of ListDelegatedAdminAccounts.
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccounts", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccounts), arg0)
}

// ListDelegatedAdminAccountsPages mocks base method.
func (m *MockInspector2API) ListDelegatedAdminAccountsPages(arg0 *inspector2.ListDelegatedAdminAccountsInput, arg1 func(*inspector2.ListDelegatedAdminAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDelegatedAdminAccountsPages indicates an expected call of ListDelegatedAdminAccountsPages.
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsPages", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsPages), arg0, arg1)
}

// ListDelegatedAdminAccountsPagesWithContext mocks base method.
func (m *MockInspector2API) ListDelegatedAdminAccountsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListDelegatedAdminAccountsInput, arg2 func(*inspector2.ListDelegatedAdminAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDelegatedAdminAccountsPagesWithContext indicates an expected call of ListDelegatedAdminAccountsPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsPagesWithContext), varargs...)
}

// ListDelegatedAdminAccountsRequest mocks base method.
func (m *MockInspector2API) ListDelegatedAdminAccountsRequest(arg0 *inspector2.ListDelegatedAdminAccountsInput) (*request.Request, *inspector2.ListDelegatedAdminAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListDelegatedAdminAccountsOutput)
	return ret0, ret1
}

// ListDelegatedAdminAccountsRequest indicates an expected call of ListDelegatedAdminAccountsRequest.
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsRequest), arg0)
}

// ListDelegatedAdminAccountsWithContext mocks base method.
func (m *MockInspector2API) ListDelegatedAdminAccountsWithContext(arg0 context.Context, arg1 *inspector2.ListDelegatedAdminAccountsInput, arg2 ...request.Option) (*inspector2.ListDelegatedAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegatedAdminAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListDelegatedAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegatedAdminAccountsWithContext indicates an expected call of ListDelegatedAdminAccountsWithContext.
func (mr *MockInspector2APIMockRecorder) ListDelegatedAdminAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegatedAdminAccountsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListDelegatedAdminAccountsWithContext), varargs...)
}

// ListFilters mocks base method.
func (m *MockInspector2API) ListFilters(arg0 *inspector2.ListFiltersInput) (*inspector2.ListFiltersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilters", arg0)
	ret0, _ := ret[0].(*inspector2.ListFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilters indicates an expected call of ListFilters.
func (mr *MockInspector2APIMockRecorder) ListFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilters", reflect.TypeOf((*MockInspector2API)(nil).ListFilters), arg0)
}

// ListFiltersPages mocks base method.
func (m *MockInspector2API) ListFiltersPages(arg0 *inspector2.ListFiltersInput, arg1 func(*inspector2.ListFiltersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiltersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFiltersPages indicates an expected call of ListFiltersPages.
func (mr *MockInspector2APIMockRecorder) ListFiltersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersPages", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersPages), arg0, arg1)
}

// ListFiltersPagesWithContext mocks base method.
func (m *MockInspector2API) ListFiltersPagesWithContext(arg0 context.Context, arg1 *inspector2.ListFiltersInput, arg2 func(*inspector2.ListFiltersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFiltersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFiltersPagesWithContext indicates an expected call of ListFiltersPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListFiltersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersPagesWithContext), varargs...)
}

// ListFiltersRequest mocks base method.
func (m *MockInspector2API) ListFiltersRequest(arg0 *inspector2.ListFiltersInput) (*request.Request, *inspector2.ListFiltersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiltersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListFiltersOutput)
	return ret0, ret1
}

// ListFiltersRequest indicates an expected call of ListFiltersRequest.
func (mr *MockInspector2APIMockRecorder) ListFiltersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersRequest", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersRequest), arg0)
}

// ListFiltersWithContext mocks base method.
func (m *MockInspector2API) ListFiltersWithContext(arg0 context.Context, arg1 *inspector2.ListFiltersInput, arg2 ...request.Option) (*inspector2.ListFiltersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFiltersWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListFiltersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiltersWithContext indicates an expected call of ListFiltersWithContext.
func (mr *MockInspector2APIMockRecorder) ListFiltersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltersWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFiltersWithContext), varargs...)
}

// ListFindingAggregations mocks base method.
func (m *MockInspector2API) ListFindingAggregations(arg0 *inspector2.ListFindingAggregationsInput) (*inspector2.ListFindingAggregationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregations", arg0)
	ret0, _ := ret[0].(*inspector2.ListFindingAggregationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingAggregations indicates an expected call of ListFindingAggregations.
func (mr *MockInspector2APIMockRecorder) ListFindingAggregations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregations", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregations), arg0)
}

// ListFindingAggregationsPages mocks base method.
func (m *MockInspector2API) ListFindingAggregationsPages(arg0 *inspector2.ListFindingAggregationsInput, arg1 func(*inspector2.ListFindingAggregationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingAggregationsPages indicates an expected call of ListFindingAggregationsPages.
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsPages", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsPages), arg0, arg1)
}

// ListFindingAggregationsPagesWithContext mocks base method.
func (m *MockInspector2API) ListFindingAggregationsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListFindingAggregationsInput, arg2 func(*inspector2.ListFindingAggregationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingAggregationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingAggregationsPagesWithContext indicates an expected call of ListFindingAggregationsPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsPagesWithContext), varargs...)
}

// ListFindingAggregationsRequest mocks base method.
func (m *MockInspector2API) ListFindingAggregationsRequest(arg0 *inspector2.ListFindingAggregationsInput) (*request.Request, *inspector2.ListFindingAggregationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingAggregationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListFindingAggregationsOutput)
	return ret0, ret1
}

// ListFindingAggregationsRequest indicates an expected call of ListFindingAggregationsRequest.
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsRequest), arg0)
}

// ListFindingAggregationsWithContext mocks base method.
func (m *MockInspector2API) ListFindingAggregationsWithContext(arg0 context.Context, arg1 *inspector2.ListFindingAggregationsInput, arg2 ...request.Option) (*inspector2.ListFindingAggregationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingAggregationsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListFindingAggregationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingAggregationsWithContext indicates an expected call of ListFindingAggregationsWithContext.
func (mr *MockInspector2APIMockRecorder) ListFindingAggregationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingAggregationsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingAggregationsWithContext), varargs...)
}

// ListFindings mocks base method.
func (m *MockInspector2API) ListFindings(arg0 *inspector2.ListFindingsInput) (*inspector2.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindings", arg0)
	ret0, _ := ret[0].(*inspector2.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindings indicates an expected call of ListFindings.
func (mr *MockInspector2APIMockRecorder) ListFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindings", reflect.TypeOf((*MockInspector2API)(nil).ListFindings), arg0)
}

// ListFindingsPages mocks base method.
func (m *MockInspector2API) ListFindingsPages(arg0 *inspector2.ListFindingsInput, arg1 func(*inspector2.ListFindingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPages indicates an expected call of ListFindingsPages.
func (mr *MockInspector2APIMockRecorder) ListFindingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPages", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsPages), arg0, arg1)
}

// ListFindingsPagesWithContext mocks base method.
func (m *MockInspector2API) ListFindingsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListFindingsInput, arg2 func(*inspector2.ListFindingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPagesWithContext indicates an expected call of ListFindingsPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListFindingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsPagesWithContext), varargs...)
}

// ListFindingsRequest mocks base method.
func (m *MockInspector2API) ListFindingsRequest(arg0 *inspector2.ListFindingsInput) (*request.Request, *inspector2.ListFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListFindingsOutput)
	return ret0, ret1
}

// ListFindingsRequest indicates an expected call of ListFindingsRequest.
func (mr *MockInspector2APIMockRecorder) ListFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsRequest), arg0)
}

// ListFindingsWithContext mocks base method.
func (m *MockInspector2API) ListFindingsWithContext(arg0 context.Context, arg1 *inspector2.ListFindingsInput, arg2 ...request.Option) (*inspector2.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsWithContext indicates an expected call of ListFindingsWithContext.
func (mr *MockInspector2APIMockRecorder) ListFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListFindingsWithContext), varargs...)
}

// ListMembers mocks base method.
func (m *MockInspector2API) ListMembers(arg0 *inspector2.ListMembersInput) (*inspector2.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*inspector2.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockInspector2APIMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockInspector2API)(nil).ListMembers), arg0)
}

// ListMembersPages mocks base method.
func (m *MockInspector2API) ListMembersPages(arg0 *inspector2.ListMembersInput, arg1 func(*inspector2.ListMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPages indicates an expected call of ListMembersPages.
func (mr *MockInspector2APIMockRecorder) ListMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPages", reflect.TypeOf((*MockInspector2API)(nil).ListMembersPages), arg0, arg1)
}

// ListMembersPagesWithContext mocks base method.
func (m *MockInspector2API) ListMembersPagesWithContext(arg0 context.Context, arg1 *inspector2.ListMembersInput, arg2 func(*inspector2.ListMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPagesWithContext indicates an expected call of ListMembersPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListMembersPagesWithContext), varargs...)
}

// ListMembersRequest mocks base method.
func (m *MockInspector2API) ListMembersRequest(arg0 *inspector2.ListMembersInput) (*request.Request, *inspector2.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest.
func (mr *MockInspector2APIMockRecorder) ListMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockInspector2API)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method.
func (m *MockInspector2API) ListMembersWithContext(arg0 context.Context, arg1 *inspector2.ListMembersInput, arg2 ...request.Option) (*inspector2.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext.
func (mr *MockInspector2APIMockRecorder) ListMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListMembersWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockInspector2API) ListTagsForResource(arg0 *inspector2.ListTagsForResourceInput) (*inspector2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*inspector2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockInspector2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockInspector2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockInspector2API) ListTagsForResourceRequest(arg0 *inspector2.ListTagsForResourceInput) (*request.Request, *inspector2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockInspector2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockInspector2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockInspector2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *inspector2.ListTagsForResourceInput, arg2 ...request.Option) (*inspector2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockInspector2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListUsageTotals mocks base method.
func (m *MockInspector2API) ListUsageTotals(arg0 *inspector2.ListUsageTotalsInput) (*inspector2.ListUsageTotalsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageTotals", arg0)
	ret0, _ := ret[0].(*inspector2.ListUsageTotalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageTotals indicates an expected call of ListUsageTotals.
func (mr *MockInspector2APIMockRecorder) ListUsageTotals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotals", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotals), arg0)
}

// ListUsageTotalsPages mocks base method.
func (m *MockInspector2API) ListUsageTotalsPages(arg0 *inspector2.ListUsageTotalsInput, arg1 func(*inspector2.ListUsageTotalsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageTotalsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageTotalsPages indicates an expected call of ListUsageTotalsPages.
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsPages", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsPages), arg0, arg1)
}

// ListUsageTotalsPagesWithContext mocks base method.
func (m *MockInspector2API) ListUsageTotalsPagesWithContext(arg0 context.Context, arg1 *inspector2.ListUsageTotalsInput, arg2 func(*inspector2.ListUsageTotalsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageTotalsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageTotalsPagesWithContext indicates an expected call of ListUsageTotalsPagesWithContext.
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsPagesWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsPagesWithContext), varargs...)
}

// ListUsageTotalsRequest mocks base method.
func (m *MockInspector2API) ListUsageTotalsRequest(arg0 *inspector2.ListUsageTotalsInput) (*request.Request, *inspector2.ListUsageTotalsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageTotalsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.ListUsageTotalsOutput)
	return ret0, ret1
}

// ListUsageTotalsRequest indicates an expected call of ListUsageTotalsRequest.
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsRequest", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsRequest), arg0)
}

// ListUsageTotalsWithContext mocks base method.
func (m *MockInspector2API) ListUsageTotalsWithContext(arg0 context.Context, arg1 *inspector2.ListUsageTotalsInput, arg2 ...request.Option) (*inspector2.ListUsageTotalsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageTotalsWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.ListUsageTotalsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageTotalsWithContext indicates an expected call of ListUsageTotalsWithContext.
func (mr *MockInspector2APIMockRecorder) ListUsageTotalsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageTotalsWithContext", reflect.TypeOf((*MockInspector2API)(nil).ListUsageTotalsWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockInspector2API) TagResource(arg0 *inspector2.TagResourceInput) (*inspector2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*inspector2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockInspector2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockInspector2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockInspector2API) TagResourceRequest(arg0 *inspector2.TagResourceInput) (*request.Request, *inspector2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockInspector2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockInspector2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockInspector2API) TagResourceWithContext(arg0 context.Context, arg1 *inspector2.TagResourceInput, arg2 ...request.Option) (*inspector2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockInspector2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockInspector2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockInspector2API) UntagResource(arg0 *inspector2.UntagResourceInput) (*inspector2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*inspector2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockInspector2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockInspector2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockInspector2API) UntagResourceRequest(arg0 *inspector2.UntagResourceInput) (*request.Request, *inspector2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockInspector2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockInspector2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockInspector2API) UntagResourceWithContext(arg0 context.Context, arg1 *inspector2.UntagResourceInput, arg2 ...request.Option) (*inspector2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockInspector2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockInspector2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFilter mocks base method.
func (m *MockInspector2API) UpdateFilter(arg0 *inspector2.UpdateFilterInput) (*inspector2.UpdateFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilter", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilter indicates an expected call of UpdateFilter.
func (mr *MockInspector2APIMockRecorder) UpdateFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilter", reflect.TypeOf((*MockInspector2API)(nil).UpdateFilter), arg0)
}

// UpdateFilterRequest mocks base method.
func (m *MockInspector2API) UpdateFilterRequest(arg0 *inspector2.UpdateFilterInput) (*request.Request, *inspector2.UpdateFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateFilterOutput)
	return ret0, ret1
}

// UpdateFilterRequest indicates an expected call of UpdateFilterRequest.
func (mr *MockInspector2APIMockRecorder) UpdateFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilterRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateFilterRequest), arg0)
}

// UpdateFilterWithContext mocks base method.
func (m *MockInspector2API) UpdateFilterWithContext(arg0 context.Context, arg1 *inspector2.UpdateFilterInput, arg2 ...request.Option) (*inspector2.UpdateFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFilterWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilterWithContext indicates an expected call of UpdateFilterWithContext.
func (mr *MockInspector2APIMockRecorder) UpdateFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilterWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateFilterWithContext), varargs...)
}

// UpdateOrganizationConfiguration mocks base method.
func (m *MockInspector2API) UpdateOrganizationConfiguration(arg0 *inspector2.UpdateOrganizationConfigurationInput) (*inspector2.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*inspector2.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfiguration indicates an expected call of UpdateOrganizationConfiguration.
func (mr *MockInspector2APIMockRecorder) UpdateOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfiguration", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrganizationConfiguration), arg0)
}

// UpdateOrganizationConfigurationRequest mocks base method.
func (m *MockInspector2API) UpdateOrganizationConfigurationRequest(arg0 *inspector2.UpdateOrganizationConfigurationInput) (*request.Request, *inspector2.UpdateOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*inspector2.UpdateOrganizationConfigurationOutput)
	return ret0, ret1
}

// UpdateOrganizationConfigurationRequest indicates an expected call of UpdateOrganizationConfigurationRequest.
func (mr *MockInspector2APIMockRecorder) UpdateOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationRequest", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrganizationConfigurationRequest), arg0)
}

// UpdateOrganizationConfigurationWithContext mocks base method.
func (m *MockInspector2API) UpdateOrganizationConfigurationWithContext(arg0 context.Context, arg1 *inspector2.UpdateOrganizationConfigurationInput, arg2 ...request.Option) (*inspector2.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*inspector2.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfigurationWithContext indicates an expected call of UpdateOrganizationConfigurationWithContext.
func (mr *MockInspector2APIMockRecorder) UpdateOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationWithContext", reflect.TypeOf((*MockInspector2API)(nil).UpdateOrganizationConfigurationWithContext), varargs...)
}

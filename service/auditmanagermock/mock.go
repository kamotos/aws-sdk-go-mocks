// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/auditmanager/auditmanageriface (interfaces: AuditManagerAPI)

// Package auditmanagermock is a generated GoMock package.
package auditmanagermock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	auditmanager "github.com/aws/aws-sdk-go/service/auditmanager"
	gomock "github.com/golang/mock/gomock"
)

// MockAuditManagerAPI is a mock of AuditManagerAPI interface.
type MockAuditManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAuditManagerAPIMockRecorder
}

// MockAuditManagerAPIMockRecorder is the mock recorder for MockAuditManagerAPI.
type MockAuditManagerAPIMockRecorder struct {
	mock *MockAuditManagerAPI
}

// NewMockAuditManagerAPI creates a new mock instance.
func NewMockAuditManagerAPI(ctrl *gomock.Controller) *MockAuditManagerAPI {
	mock := &MockAuditManagerAPI{ctrl: ctrl}
	mock.recorder = &MockAuditManagerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditManagerAPI) EXPECT() *MockAuditManagerAPIMockRecorder {
	return m.recorder
}

// AssociateAssessmentReportEvidenceFolder mocks base method.
func (m *MockAuditManagerAPI) AssociateAssessmentReportEvidenceFolder(arg0 *auditmanager.AssociateAssessmentReportEvidenceFolderInput) (*auditmanager.AssociateAssessmentReportEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAssessmentReportEvidenceFolder", arg0)
	ret0, _ := ret[0].(*auditmanager.AssociateAssessmentReportEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAssessmentReportEvidenceFolder indicates an expected call of AssociateAssessmentReportEvidenceFolder.
func (mr *MockAuditManagerAPIMockRecorder) AssociateAssessmentReportEvidenceFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAssessmentReportEvidenceFolder", reflect.TypeOf((*MockAuditManagerAPI)(nil).AssociateAssessmentReportEvidenceFolder), arg0)
}

// AssociateAssessmentReportEvidenceFolderRequest mocks base method.
func (m *MockAuditManagerAPI) AssociateAssessmentReportEvidenceFolderRequest(arg0 *auditmanager.AssociateAssessmentReportEvidenceFolderInput) (*request.Request, *auditmanager.AssociateAssessmentReportEvidenceFolderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAssessmentReportEvidenceFolderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.AssociateAssessmentReportEvidenceFolderOutput)
	return ret0, ret1
}

// AssociateAssessmentReportEvidenceFolderRequest indicates an expected call of AssociateAssessmentReportEvidenceFolderRequest.
func (mr *MockAuditManagerAPIMockRecorder) AssociateAssessmentReportEvidenceFolderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAssessmentReportEvidenceFolderRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).AssociateAssessmentReportEvidenceFolderRequest), arg0)
}

// AssociateAssessmentReportEvidenceFolderWithContext mocks base method.
func (m *MockAuditManagerAPI) AssociateAssessmentReportEvidenceFolderWithContext(arg0 context.Context, arg1 *auditmanager.AssociateAssessmentReportEvidenceFolderInput, arg2 ...request.Option) (*auditmanager.AssociateAssessmentReportEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAssessmentReportEvidenceFolderWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.AssociateAssessmentReportEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAssessmentReportEvidenceFolderWithContext indicates an expected call of AssociateAssessmentReportEvidenceFolderWithContext.
func (mr *MockAuditManagerAPIMockRecorder) AssociateAssessmentReportEvidenceFolderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAssessmentReportEvidenceFolderWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).AssociateAssessmentReportEvidenceFolderWithContext), varargs...)
}

// BatchAssociateAssessmentReportEvidence mocks base method.
func (m *MockAuditManagerAPI) BatchAssociateAssessmentReportEvidence(arg0 *auditmanager.BatchAssociateAssessmentReportEvidenceInput) (*auditmanager.BatchAssociateAssessmentReportEvidenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateAssessmentReportEvidence", arg0)
	ret0, _ := ret[0].(*auditmanager.BatchAssociateAssessmentReportEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateAssessmentReportEvidence indicates an expected call of BatchAssociateAssessmentReportEvidence.
func (mr *MockAuditManagerAPIMockRecorder) BatchAssociateAssessmentReportEvidence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateAssessmentReportEvidence", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchAssociateAssessmentReportEvidence), arg0)
}

// BatchAssociateAssessmentReportEvidenceRequest mocks base method.
func (m *MockAuditManagerAPI) BatchAssociateAssessmentReportEvidenceRequest(arg0 *auditmanager.BatchAssociateAssessmentReportEvidenceInput) (*request.Request, *auditmanager.BatchAssociateAssessmentReportEvidenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssociateAssessmentReportEvidenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.BatchAssociateAssessmentReportEvidenceOutput)
	return ret0, ret1
}

// BatchAssociateAssessmentReportEvidenceRequest indicates an expected call of BatchAssociateAssessmentReportEvidenceRequest.
func (mr *MockAuditManagerAPIMockRecorder) BatchAssociateAssessmentReportEvidenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateAssessmentReportEvidenceRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchAssociateAssessmentReportEvidenceRequest), arg0)
}

// BatchAssociateAssessmentReportEvidenceWithContext mocks base method.
func (m *MockAuditManagerAPI) BatchAssociateAssessmentReportEvidenceWithContext(arg0 context.Context, arg1 *auditmanager.BatchAssociateAssessmentReportEvidenceInput, arg2 ...request.Option) (*auditmanager.BatchAssociateAssessmentReportEvidenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAssociateAssessmentReportEvidenceWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.BatchAssociateAssessmentReportEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAssociateAssessmentReportEvidenceWithContext indicates an expected call of BatchAssociateAssessmentReportEvidenceWithContext.
func (mr *MockAuditManagerAPIMockRecorder) BatchAssociateAssessmentReportEvidenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssociateAssessmentReportEvidenceWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchAssociateAssessmentReportEvidenceWithContext), varargs...)
}

// BatchCreateDelegationByAssessment mocks base method.
func (m *MockAuditManagerAPI) BatchCreateDelegationByAssessment(arg0 *auditmanager.BatchCreateDelegationByAssessmentInput) (*auditmanager.BatchCreateDelegationByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateDelegationByAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.BatchCreateDelegationByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateDelegationByAssessment indicates an expected call of BatchCreateDelegationByAssessment.
func (mr *MockAuditManagerAPIMockRecorder) BatchCreateDelegationByAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateDelegationByAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchCreateDelegationByAssessment), arg0)
}

// BatchCreateDelegationByAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) BatchCreateDelegationByAssessmentRequest(arg0 *auditmanager.BatchCreateDelegationByAssessmentInput) (*request.Request, *auditmanager.BatchCreateDelegationByAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateDelegationByAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.BatchCreateDelegationByAssessmentOutput)
	return ret0, ret1
}

// BatchCreateDelegationByAssessmentRequest indicates an expected call of BatchCreateDelegationByAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) BatchCreateDelegationByAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateDelegationByAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchCreateDelegationByAssessmentRequest), arg0)
}

// BatchCreateDelegationByAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) BatchCreateDelegationByAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.BatchCreateDelegationByAssessmentInput, arg2 ...request.Option) (*auditmanager.BatchCreateDelegationByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateDelegationByAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.BatchCreateDelegationByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateDelegationByAssessmentWithContext indicates an expected call of BatchCreateDelegationByAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) BatchCreateDelegationByAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateDelegationByAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchCreateDelegationByAssessmentWithContext), varargs...)
}

// BatchDeleteDelegationByAssessment mocks base method.
func (m *MockAuditManagerAPI) BatchDeleteDelegationByAssessment(arg0 *auditmanager.BatchDeleteDelegationByAssessmentInput) (*auditmanager.BatchDeleteDelegationByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDelegationByAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.BatchDeleteDelegationByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteDelegationByAssessment indicates an expected call of BatchDeleteDelegationByAssessment.
func (mr *MockAuditManagerAPIMockRecorder) BatchDeleteDelegationByAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDelegationByAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchDeleteDelegationByAssessment), arg0)
}

// BatchDeleteDelegationByAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) BatchDeleteDelegationByAssessmentRequest(arg0 *auditmanager.BatchDeleteDelegationByAssessmentInput) (*request.Request, *auditmanager.BatchDeleteDelegationByAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDelegationByAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.BatchDeleteDelegationByAssessmentOutput)
	return ret0, ret1
}

// BatchDeleteDelegationByAssessmentRequest indicates an expected call of BatchDeleteDelegationByAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) BatchDeleteDelegationByAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDelegationByAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchDeleteDelegationByAssessmentRequest), arg0)
}

// BatchDeleteDelegationByAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) BatchDeleteDelegationByAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.BatchDeleteDelegationByAssessmentInput, arg2 ...request.Option) (*auditmanager.BatchDeleteDelegationByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteDelegationByAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.BatchDeleteDelegationByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteDelegationByAssessmentWithContext indicates an expected call of BatchDeleteDelegationByAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) BatchDeleteDelegationByAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDelegationByAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchDeleteDelegationByAssessmentWithContext), varargs...)
}

// BatchDisassociateAssessmentReportEvidence mocks base method.
func (m *MockAuditManagerAPI) BatchDisassociateAssessmentReportEvidence(arg0 *auditmanager.BatchDisassociateAssessmentReportEvidenceInput) (*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateAssessmentReportEvidence", arg0)
	ret0, _ := ret[0].(*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateAssessmentReportEvidence indicates an expected call of BatchDisassociateAssessmentReportEvidence.
func (mr *MockAuditManagerAPIMockRecorder) BatchDisassociateAssessmentReportEvidence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateAssessmentReportEvidence", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchDisassociateAssessmentReportEvidence), arg0)
}

// BatchDisassociateAssessmentReportEvidenceRequest mocks base method.
func (m *MockAuditManagerAPI) BatchDisassociateAssessmentReportEvidenceRequest(arg0 *auditmanager.BatchDisassociateAssessmentReportEvidenceInput) (*request.Request, *auditmanager.BatchDisassociateAssessmentReportEvidenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDisassociateAssessmentReportEvidenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput)
	return ret0, ret1
}

// BatchDisassociateAssessmentReportEvidenceRequest indicates an expected call of BatchDisassociateAssessmentReportEvidenceRequest.
func (mr *MockAuditManagerAPIMockRecorder) BatchDisassociateAssessmentReportEvidenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateAssessmentReportEvidenceRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchDisassociateAssessmentReportEvidenceRequest), arg0)
}

// BatchDisassociateAssessmentReportEvidenceWithContext mocks base method.
func (m *MockAuditManagerAPI) BatchDisassociateAssessmentReportEvidenceWithContext(arg0 context.Context, arg1 *auditmanager.BatchDisassociateAssessmentReportEvidenceInput, arg2 ...request.Option) (*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDisassociateAssessmentReportEvidenceWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.BatchDisassociateAssessmentReportEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDisassociateAssessmentReportEvidenceWithContext indicates an expected call of BatchDisassociateAssessmentReportEvidenceWithContext.
func (mr *MockAuditManagerAPIMockRecorder) BatchDisassociateAssessmentReportEvidenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDisassociateAssessmentReportEvidenceWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchDisassociateAssessmentReportEvidenceWithContext), varargs...)
}

// BatchImportEvidenceToAssessmentControl mocks base method.
func (m *MockAuditManagerAPI) BatchImportEvidenceToAssessmentControl(arg0 *auditmanager.BatchImportEvidenceToAssessmentControlInput) (*auditmanager.BatchImportEvidenceToAssessmentControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchImportEvidenceToAssessmentControl", arg0)
	ret0, _ := ret[0].(*auditmanager.BatchImportEvidenceToAssessmentControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchImportEvidenceToAssessmentControl indicates an expected call of BatchImportEvidenceToAssessmentControl.
func (mr *MockAuditManagerAPIMockRecorder) BatchImportEvidenceToAssessmentControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportEvidenceToAssessmentControl", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchImportEvidenceToAssessmentControl), arg0)
}

// BatchImportEvidenceToAssessmentControlRequest mocks base method.
func (m *MockAuditManagerAPI) BatchImportEvidenceToAssessmentControlRequest(arg0 *auditmanager.BatchImportEvidenceToAssessmentControlInput) (*request.Request, *auditmanager.BatchImportEvidenceToAssessmentControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchImportEvidenceToAssessmentControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.BatchImportEvidenceToAssessmentControlOutput)
	return ret0, ret1
}

// BatchImportEvidenceToAssessmentControlRequest indicates an expected call of BatchImportEvidenceToAssessmentControlRequest.
func (mr *MockAuditManagerAPIMockRecorder) BatchImportEvidenceToAssessmentControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportEvidenceToAssessmentControlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchImportEvidenceToAssessmentControlRequest), arg0)
}

// BatchImportEvidenceToAssessmentControlWithContext mocks base method.
func (m *MockAuditManagerAPI) BatchImportEvidenceToAssessmentControlWithContext(arg0 context.Context, arg1 *auditmanager.BatchImportEvidenceToAssessmentControlInput, arg2 ...request.Option) (*auditmanager.BatchImportEvidenceToAssessmentControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchImportEvidenceToAssessmentControlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.BatchImportEvidenceToAssessmentControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchImportEvidenceToAssessmentControlWithContext indicates an expected call of BatchImportEvidenceToAssessmentControlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) BatchImportEvidenceToAssessmentControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportEvidenceToAssessmentControlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).BatchImportEvidenceToAssessmentControlWithContext), varargs...)
}

// CreateAssessment mocks base method.
func (m *MockAuditManagerAPI) CreateAssessment(arg0 *auditmanager.CreateAssessmentInput) (*auditmanager.CreateAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.CreateAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessment indicates an expected call of CreateAssessment.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessment), arg0)
}

// CreateAssessmentFramework mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentFramework(arg0 *auditmanager.CreateAssessmentFrameworkInput) (*auditmanager.CreateAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentFramework", arg0)
	ret0, _ := ret[0].(*auditmanager.CreateAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentFramework indicates an expected call of CreateAssessmentFramework.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentFramework", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentFramework), arg0)
}

// CreateAssessmentFrameworkRequest mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentFrameworkRequest(arg0 *auditmanager.CreateAssessmentFrameworkInput) (*request.Request, *auditmanager.CreateAssessmentFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.CreateAssessmentFrameworkOutput)
	return ret0, ret1
}

// CreateAssessmentFrameworkRequest indicates an expected call of CreateAssessmentFrameworkRequest.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentFrameworkRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentFrameworkRequest), arg0)
}

// CreateAssessmentFrameworkWithContext mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentFrameworkWithContext(arg0 context.Context, arg1 *auditmanager.CreateAssessmentFrameworkInput, arg2 ...request.Option) (*auditmanager.CreateAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssessmentFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.CreateAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentFrameworkWithContext indicates an expected call of CreateAssessmentFrameworkWithContext.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentFrameworkWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentFrameworkWithContext), varargs...)
}

// CreateAssessmentReport mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentReport(arg0 *auditmanager.CreateAssessmentReportInput) (*auditmanager.CreateAssessmentReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentReport", arg0)
	ret0, _ := ret[0].(*auditmanager.CreateAssessmentReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentReport indicates an expected call of CreateAssessmentReport.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentReport", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentReport), arg0)
}

// CreateAssessmentReportRequest mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentReportRequest(arg0 *auditmanager.CreateAssessmentReportInput) (*request.Request, *auditmanager.CreateAssessmentReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.CreateAssessmentReportOutput)
	return ret0, ret1
}

// CreateAssessmentReportRequest indicates an expected call of CreateAssessmentReportRequest.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentReportRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentReportRequest), arg0)
}

// CreateAssessmentReportWithContext mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentReportWithContext(arg0 context.Context, arg1 *auditmanager.CreateAssessmentReportInput, arg2 ...request.Option) (*auditmanager.CreateAssessmentReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssessmentReportWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.CreateAssessmentReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentReportWithContext indicates an expected call of CreateAssessmentReportWithContext.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentReportWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentReportWithContext), varargs...)
}

// CreateAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentRequest(arg0 *auditmanager.CreateAssessmentInput) (*request.Request, *auditmanager.CreateAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.CreateAssessmentOutput)
	return ret0, ret1
}

// CreateAssessmentRequest indicates an expected call of CreateAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentRequest), arg0)
}

// CreateAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) CreateAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.CreateAssessmentInput, arg2 ...request.Option) (*auditmanager.CreateAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.CreateAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessmentWithContext indicates an expected call of CreateAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) CreateAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateAssessmentWithContext), varargs...)
}

// CreateControl mocks base method.
func (m *MockAuditManagerAPI) CreateControl(arg0 *auditmanager.CreateControlInput) (*auditmanager.CreateControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateControl", arg0)
	ret0, _ := ret[0].(*auditmanager.CreateControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateControl indicates an expected call of CreateControl.
func (mr *MockAuditManagerAPIMockRecorder) CreateControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateControl", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateControl), arg0)
}

// CreateControlRequest mocks base method.
func (m *MockAuditManagerAPI) CreateControlRequest(arg0 *auditmanager.CreateControlInput) (*request.Request, *auditmanager.CreateControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.CreateControlOutput)
	return ret0, ret1
}

// CreateControlRequest indicates an expected call of CreateControlRequest.
func (mr *MockAuditManagerAPIMockRecorder) CreateControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateControlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateControlRequest), arg0)
}

// CreateControlWithContext mocks base method.
func (m *MockAuditManagerAPI) CreateControlWithContext(arg0 context.Context, arg1 *auditmanager.CreateControlInput, arg2 ...request.Option) (*auditmanager.CreateControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateControlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.CreateControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateControlWithContext indicates an expected call of CreateControlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) CreateControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateControlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).CreateControlWithContext), varargs...)
}

// DeleteAssessment mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessment(arg0 *auditmanager.DeleteAssessmentInput) (*auditmanager.DeleteAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessment indicates an expected call of DeleteAssessment.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessment), arg0)
}

// DeleteAssessmentFramework mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentFramework(arg0 *auditmanager.DeleteAssessmentFrameworkInput) (*auditmanager.DeleteAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentFramework", arg0)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentFramework indicates an expected call of DeleteAssessmentFramework.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentFramework", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentFramework), arg0)
}

// DeleteAssessmentFrameworkRequest mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentFrameworkRequest(arg0 *auditmanager.DeleteAssessmentFrameworkInput) (*request.Request, *auditmanager.DeleteAssessmentFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DeleteAssessmentFrameworkOutput)
	return ret0, ret1
}

// DeleteAssessmentFrameworkRequest indicates an expected call of DeleteAssessmentFrameworkRequest.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentFrameworkRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentFrameworkRequest), arg0)
}

// DeleteAssessmentFrameworkShare mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentFrameworkShare(arg0 *auditmanager.DeleteAssessmentFrameworkShareInput) (*auditmanager.DeleteAssessmentFrameworkShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentFrameworkShare", arg0)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentFrameworkShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentFrameworkShare indicates an expected call of DeleteAssessmentFrameworkShare.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentFrameworkShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentFrameworkShare", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentFrameworkShare), arg0)
}

// DeleteAssessmentFrameworkShareRequest mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentFrameworkShareRequest(arg0 *auditmanager.DeleteAssessmentFrameworkShareInput) (*request.Request, *auditmanager.DeleteAssessmentFrameworkShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentFrameworkShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DeleteAssessmentFrameworkShareOutput)
	return ret0, ret1
}

// DeleteAssessmentFrameworkShareRequest indicates an expected call of DeleteAssessmentFrameworkShareRequest.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentFrameworkShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentFrameworkShareRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentFrameworkShareRequest), arg0)
}

// DeleteAssessmentFrameworkShareWithContext mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentFrameworkShareWithContext(arg0 context.Context, arg1 *auditmanager.DeleteAssessmentFrameworkShareInput, arg2 ...request.Option) (*auditmanager.DeleteAssessmentFrameworkShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssessmentFrameworkShareWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentFrameworkShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentFrameworkShareWithContext indicates an expected call of DeleteAssessmentFrameworkShareWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentFrameworkShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentFrameworkShareWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentFrameworkShareWithContext), varargs...)
}

// DeleteAssessmentFrameworkWithContext mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentFrameworkWithContext(arg0 context.Context, arg1 *auditmanager.DeleteAssessmentFrameworkInput, arg2 ...request.Option) (*auditmanager.DeleteAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssessmentFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentFrameworkWithContext indicates an expected call of DeleteAssessmentFrameworkWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentFrameworkWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentFrameworkWithContext), varargs...)
}

// DeleteAssessmentReport mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentReport(arg0 *auditmanager.DeleteAssessmentReportInput) (*auditmanager.DeleteAssessmentReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentReport", arg0)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentReport indicates an expected call of DeleteAssessmentReport.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentReport", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentReport), arg0)
}

// DeleteAssessmentReportRequest mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentReportRequest(arg0 *auditmanager.DeleteAssessmentReportInput) (*request.Request, *auditmanager.DeleteAssessmentReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DeleteAssessmentReportOutput)
	return ret0, ret1
}

// DeleteAssessmentReportRequest indicates an expected call of DeleteAssessmentReportRequest.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentReportRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentReportRequest), arg0)
}

// DeleteAssessmentReportWithContext mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentReportWithContext(arg0 context.Context, arg1 *auditmanager.DeleteAssessmentReportInput, arg2 ...request.Option) (*auditmanager.DeleteAssessmentReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssessmentReportWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentReportWithContext indicates an expected call of DeleteAssessmentReportWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentReportWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentReportWithContext), varargs...)
}

// DeleteAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentRequest(arg0 *auditmanager.DeleteAssessmentInput) (*request.Request, *auditmanager.DeleteAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DeleteAssessmentOutput)
	return ret0, ret1
}

// DeleteAssessmentRequest indicates an expected call of DeleteAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentRequest), arg0)
}

// DeleteAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) DeleteAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.DeleteAssessmentInput, arg2 ...request.Option) (*auditmanager.DeleteAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DeleteAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssessmentWithContext indicates an expected call of DeleteAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DeleteAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteAssessmentWithContext), varargs...)
}

// DeleteControl mocks base method.
func (m *MockAuditManagerAPI) DeleteControl(arg0 *auditmanager.DeleteControlInput) (*auditmanager.DeleteControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteControl", arg0)
	ret0, _ := ret[0].(*auditmanager.DeleteControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteControl indicates an expected call of DeleteControl.
func (mr *MockAuditManagerAPIMockRecorder) DeleteControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteControl", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteControl), arg0)
}

// DeleteControlRequest mocks base method.
func (m *MockAuditManagerAPI) DeleteControlRequest(arg0 *auditmanager.DeleteControlInput) (*request.Request, *auditmanager.DeleteControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DeleteControlOutput)
	return ret0, ret1
}

// DeleteControlRequest indicates an expected call of DeleteControlRequest.
func (mr *MockAuditManagerAPIMockRecorder) DeleteControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteControlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteControlRequest), arg0)
}

// DeleteControlWithContext mocks base method.
func (m *MockAuditManagerAPI) DeleteControlWithContext(arg0 context.Context, arg1 *auditmanager.DeleteControlInput, arg2 ...request.Option) (*auditmanager.DeleteControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteControlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DeleteControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteControlWithContext indicates an expected call of DeleteControlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DeleteControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteControlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeleteControlWithContext), varargs...)
}

// DeregisterAccount mocks base method.
func (m *MockAuditManagerAPI) DeregisterAccount(arg0 *auditmanager.DeregisterAccountInput) (*auditmanager.DeregisterAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAccount", arg0)
	ret0, _ := ret[0].(*auditmanager.DeregisterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterAccount indicates an expected call of DeregisterAccount.
func (mr *MockAuditManagerAPIMockRecorder) DeregisterAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAccount", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeregisterAccount), arg0)
}

// DeregisterAccountRequest mocks base method.
func (m *MockAuditManagerAPI) DeregisterAccountRequest(arg0 *auditmanager.DeregisterAccountInput) (*request.Request, *auditmanager.DeregisterAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DeregisterAccountOutput)
	return ret0, ret1
}

// DeregisterAccountRequest indicates an expected call of DeregisterAccountRequest.
func (mr *MockAuditManagerAPIMockRecorder) DeregisterAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAccountRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeregisterAccountRequest), arg0)
}

// DeregisterAccountWithContext mocks base method.
func (m *MockAuditManagerAPI) DeregisterAccountWithContext(arg0 context.Context, arg1 *auditmanager.DeregisterAccountInput, arg2 ...request.Option) (*auditmanager.DeregisterAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterAccountWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DeregisterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterAccountWithContext indicates an expected call of DeregisterAccountWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DeregisterAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAccountWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeregisterAccountWithContext), varargs...)
}

// DeregisterOrganizationAdminAccount mocks base method.
func (m *MockAuditManagerAPI) DeregisterOrganizationAdminAccount(arg0 *auditmanager.DeregisterOrganizationAdminAccountInput) (*auditmanager.DeregisterOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterOrganizationAdminAccount", arg0)
	ret0, _ := ret[0].(*auditmanager.DeregisterOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterOrganizationAdminAccount indicates an expected call of DeregisterOrganizationAdminAccount.
func (mr *MockAuditManagerAPIMockRecorder) DeregisterOrganizationAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterOrganizationAdminAccount", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeregisterOrganizationAdminAccount), arg0)
}

// DeregisterOrganizationAdminAccountRequest mocks base method.
func (m *MockAuditManagerAPI) DeregisterOrganizationAdminAccountRequest(arg0 *auditmanager.DeregisterOrganizationAdminAccountInput) (*request.Request, *auditmanager.DeregisterOrganizationAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterOrganizationAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DeregisterOrganizationAdminAccountOutput)
	return ret0, ret1
}

// DeregisterOrganizationAdminAccountRequest indicates an expected call of DeregisterOrganizationAdminAccountRequest.
func (mr *MockAuditManagerAPIMockRecorder) DeregisterOrganizationAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterOrganizationAdminAccountRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeregisterOrganizationAdminAccountRequest), arg0)
}

// DeregisterOrganizationAdminAccountWithContext mocks base method.
func (m *MockAuditManagerAPI) DeregisterOrganizationAdminAccountWithContext(arg0 context.Context, arg1 *auditmanager.DeregisterOrganizationAdminAccountInput, arg2 ...request.Option) (*auditmanager.DeregisterOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterOrganizationAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DeregisterOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterOrganizationAdminAccountWithContext indicates an expected call of DeregisterOrganizationAdminAccountWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DeregisterOrganizationAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterOrganizationAdminAccountWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DeregisterOrganizationAdminAccountWithContext), varargs...)
}

// DisassociateAssessmentReportEvidenceFolder mocks base method.
func (m *MockAuditManagerAPI) DisassociateAssessmentReportEvidenceFolder(arg0 *auditmanager.DisassociateAssessmentReportEvidenceFolderInput) (*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAssessmentReportEvidenceFolder", arg0)
	ret0, _ := ret[0].(*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAssessmentReportEvidenceFolder indicates an expected call of DisassociateAssessmentReportEvidenceFolder.
func (mr *MockAuditManagerAPIMockRecorder) DisassociateAssessmentReportEvidenceFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAssessmentReportEvidenceFolder", reflect.TypeOf((*MockAuditManagerAPI)(nil).DisassociateAssessmentReportEvidenceFolder), arg0)
}

// DisassociateAssessmentReportEvidenceFolderRequest mocks base method.
func (m *MockAuditManagerAPI) DisassociateAssessmentReportEvidenceFolderRequest(arg0 *auditmanager.DisassociateAssessmentReportEvidenceFolderInput) (*request.Request, *auditmanager.DisassociateAssessmentReportEvidenceFolderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAssessmentReportEvidenceFolderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput)
	return ret0, ret1
}

// DisassociateAssessmentReportEvidenceFolderRequest indicates an expected call of DisassociateAssessmentReportEvidenceFolderRequest.
func (mr *MockAuditManagerAPIMockRecorder) DisassociateAssessmentReportEvidenceFolderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAssessmentReportEvidenceFolderRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).DisassociateAssessmentReportEvidenceFolderRequest), arg0)
}

// DisassociateAssessmentReportEvidenceFolderWithContext mocks base method.
func (m *MockAuditManagerAPI) DisassociateAssessmentReportEvidenceFolderWithContext(arg0 context.Context, arg1 *auditmanager.DisassociateAssessmentReportEvidenceFolderInput, arg2 ...request.Option) (*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateAssessmentReportEvidenceFolderWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.DisassociateAssessmentReportEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAssessmentReportEvidenceFolderWithContext indicates an expected call of DisassociateAssessmentReportEvidenceFolderWithContext.
func (mr *MockAuditManagerAPIMockRecorder) DisassociateAssessmentReportEvidenceFolderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAssessmentReportEvidenceFolderWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).DisassociateAssessmentReportEvidenceFolderWithContext), varargs...)
}

// GetAccountStatus mocks base method.
func (m *MockAuditManagerAPI) GetAccountStatus(arg0 *auditmanager.GetAccountStatusInput) (*auditmanager.GetAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountStatus", arg0)
	ret0, _ := ret[0].(*auditmanager.GetAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountStatus indicates an expected call of GetAccountStatus.
func (mr *MockAuditManagerAPIMockRecorder) GetAccountStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStatus", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAccountStatus), arg0)
}

// GetAccountStatusRequest mocks base method.
func (m *MockAuditManagerAPI) GetAccountStatusRequest(arg0 *auditmanager.GetAccountStatusInput) (*request.Request, *auditmanager.GetAccountStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetAccountStatusOutput)
	return ret0, ret1
}

// GetAccountStatusRequest indicates an expected call of GetAccountStatusRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetAccountStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStatusRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAccountStatusRequest), arg0)
}

// GetAccountStatusWithContext mocks base method.
func (m *MockAuditManagerAPI) GetAccountStatusWithContext(arg0 context.Context, arg1 *auditmanager.GetAccountStatusInput, arg2 ...request.Option) (*auditmanager.GetAccountStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountStatusWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAccountStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountStatusWithContext indicates an expected call of GetAccountStatusWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetAccountStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStatusWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAccountStatusWithContext), varargs...)
}

// GetAssessment mocks base method.
func (m *MockAuditManagerAPI) GetAssessment(arg0 *auditmanager.GetAssessmentInput) (*auditmanager.GetAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessment indicates an expected call of GetAssessment.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessment), arg0)
}

// GetAssessmentFramework mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentFramework(arg0 *auditmanager.GetAssessmentFrameworkInput) (*auditmanager.GetAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentFramework", arg0)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentFramework indicates an expected call of GetAssessmentFramework.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentFramework", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentFramework), arg0)
}

// GetAssessmentFrameworkRequest mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentFrameworkRequest(arg0 *auditmanager.GetAssessmentFrameworkInput) (*request.Request, *auditmanager.GetAssessmentFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetAssessmentFrameworkOutput)
	return ret0, ret1
}

// GetAssessmentFrameworkRequest indicates an expected call of GetAssessmentFrameworkRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentFrameworkRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentFrameworkRequest), arg0)
}

// GetAssessmentFrameworkWithContext mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentFrameworkWithContext(arg0 context.Context, arg1 *auditmanager.GetAssessmentFrameworkInput, arg2 ...request.Option) (*auditmanager.GetAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssessmentFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentFrameworkWithContext indicates an expected call of GetAssessmentFrameworkWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentFrameworkWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentFrameworkWithContext), varargs...)
}

// GetAssessmentReportUrl mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentReportUrl(arg0 *auditmanager.GetAssessmentReportUrlInput) (*auditmanager.GetAssessmentReportUrlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentReportUrl", arg0)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentReportUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentReportUrl indicates an expected call of GetAssessmentReportUrl.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentReportUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentReportUrl", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentReportUrl), arg0)
}

// GetAssessmentReportUrlRequest mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentReportUrlRequest(arg0 *auditmanager.GetAssessmentReportUrlInput) (*request.Request, *auditmanager.GetAssessmentReportUrlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentReportUrlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetAssessmentReportUrlOutput)
	return ret0, ret1
}

// GetAssessmentReportUrlRequest indicates an expected call of GetAssessmentReportUrlRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentReportUrlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentReportUrlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentReportUrlRequest), arg0)
}

// GetAssessmentReportUrlWithContext mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentReportUrlWithContext(arg0 context.Context, arg1 *auditmanager.GetAssessmentReportUrlInput, arg2 ...request.Option) (*auditmanager.GetAssessmentReportUrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssessmentReportUrlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentReportUrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentReportUrlWithContext indicates an expected call of GetAssessmentReportUrlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentReportUrlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentReportUrlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentReportUrlWithContext), varargs...)
}

// GetAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentRequest(arg0 *auditmanager.GetAssessmentInput) (*request.Request, *auditmanager.GetAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetAssessmentOutput)
	return ret0, ret1
}

// GetAssessmentRequest indicates an expected call of GetAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentRequest), arg0)
}

// GetAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) GetAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.GetAssessmentInput, arg2 ...request.Option) (*auditmanager.GetAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentWithContext indicates an expected call of GetAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetAssessmentWithContext), varargs...)
}

// GetChangeLogs mocks base method.
func (m *MockAuditManagerAPI) GetChangeLogs(arg0 *auditmanager.GetChangeLogsInput) (*auditmanager.GetChangeLogsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeLogs", arg0)
	ret0, _ := ret[0].(*auditmanager.GetChangeLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeLogs indicates an expected call of GetChangeLogs.
func (mr *MockAuditManagerAPIMockRecorder) GetChangeLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeLogs", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetChangeLogs), arg0)
}

// GetChangeLogsPages mocks base method.
func (m *MockAuditManagerAPI) GetChangeLogsPages(arg0 *auditmanager.GetChangeLogsInput, arg1 func(*auditmanager.GetChangeLogsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeLogsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChangeLogsPages indicates an expected call of GetChangeLogsPages.
func (mr *MockAuditManagerAPIMockRecorder) GetChangeLogsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeLogsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetChangeLogsPages), arg0, arg1)
}

// GetChangeLogsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) GetChangeLogsPagesWithContext(arg0 context.Context, arg1 *auditmanager.GetChangeLogsInput, arg2 func(*auditmanager.GetChangeLogsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangeLogsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChangeLogsPagesWithContext indicates an expected call of GetChangeLogsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetChangeLogsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeLogsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetChangeLogsPagesWithContext), varargs...)
}

// GetChangeLogsRequest mocks base method.
func (m *MockAuditManagerAPI) GetChangeLogsRequest(arg0 *auditmanager.GetChangeLogsInput) (*request.Request, *auditmanager.GetChangeLogsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeLogsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetChangeLogsOutput)
	return ret0, ret1
}

// GetChangeLogsRequest indicates an expected call of GetChangeLogsRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetChangeLogsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeLogsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetChangeLogsRequest), arg0)
}

// GetChangeLogsWithContext mocks base method.
func (m *MockAuditManagerAPI) GetChangeLogsWithContext(arg0 context.Context, arg1 *auditmanager.GetChangeLogsInput, arg2 ...request.Option) (*auditmanager.GetChangeLogsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChangeLogsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetChangeLogsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeLogsWithContext indicates an expected call of GetChangeLogsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetChangeLogsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeLogsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetChangeLogsWithContext), varargs...)
}

// GetControl mocks base method.
func (m *MockAuditManagerAPI) GetControl(arg0 *auditmanager.GetControlInput) (*auditmanager.GetControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControl", arg0)
	ret0, _ := ret[0].(*auditmanager.GetControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControl indicates an expected call of GetControl.
func (mr *MockAuditManagerAPIMockRecorder) GetControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControl", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetControl), arg0)
}

// GetControlRequest mocks base method.
func (m *MockAuditManagerAPI) GetControlRequest(arg0 *auditmanager.GetControlInput) (*request.Request, *auditmanager.GetControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetControlOutput)
	return ret0, ret1
}

// GetControlRequest indicates an expected call of GetControlRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetControlRequest), arg0)
}

// GetControlWithContext mocks base method.
func (m *MockAuditManagerAPI) GetControlWithContext(arg0 context.Context, arg1 *auditmanager.GetControlInput, arg2 ...request.Option) (*auditmanager.GetControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetControlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlWithContext indicates an expected call of GetControlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetControlWithContext), varargs...)
}

// GetDelegations mocks base method.
func (m *MockAuditManagerAPI) GetDelegations(arg0 *auditmanager.GetDelegationsInput) (*auditmanager.GetDelegationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", arg0)
	ret0, _ := ret[0].(*auditmanager.GetDelegationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations.
func (mr *MockAuditManagerAPIMockRecorder) GetDelegations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetDelegations), arg0)
}

// GetDelegationsPages mocks base method.
func (m *MockAuditManagerAPI) GetDelegationsPages(arg0 *auditmanager.GetDelegationsInput, arg1 func(*auditmanager.GetDelegationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDelegationsPages indicates an expected call of GetDelegationsPages.
func (mr *MockAuditManagerAPIMockRecorder) GetDelegationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetDelegationsPages), arg0, arg1)
}

// GetDelegationsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) GetDelegationsPagesWithContext(arg0 context.Context, arg1 *auditmanager.GetDelegationsInput, arg2 func(*auditmanager.GetDelegationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDelegationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDelegationsPagesWithContext indicates an expected call of GetDelegationsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetDelegationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetDelegationsPagesWithContext), varargs...)
}

// GetDelegationsRequest mocks base method.
func (m *MockAuditManagerAPI) GetDelegationsRequest(arg0 *auditmanager.GetDelegationsInput) (*request.Request, *auditmanager.GetDelegationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetDelegationsOutput)
	return ret0, ret1
}

// GetDelegationsRequest indicates an expected call of GetDelegationsRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetDelegationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetDelegationsRequest), arg0)
}

// GetDelegationsWithContext mocks base method.
func (m *MockAuditManagerAPI) GetDelegationsWithContext(arg0 context.Context, arg1 *auditmanager.GetDelegationsInput, arg2 ...request.Option) (*auditmanager.GetDelegationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDelegationsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetDelegationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsWithContext indicates an expected call of GetDelegationsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetDelegationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetDelegationsWithContext), varargs...)
}

// GetEvidence mocks base method.
func (m *MockAuditManagerAPI) GetEvidence(arg0 *auditmanager.GetEvidenceInput) (*auditmanager.GetEvidenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidence", arg0)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidence indicates an expected call of GetEvidence.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidence", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidence), arg0)
}

// GetEvidenceByEvidenceFolder mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceByEvidenceFolder(arg0 *auditmanager.GetEvidenceByEvidenceFolderInput) (*auditmanager.GetEvidenceByEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceByEvidenceFolder", arg0)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceByEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceByEvidenceFolder indicates an expected call of GetEvidenceByEvidenceFolder.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceByEvidenceFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByEvidenceFolder", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceByEvidenceFolder), arg0)
}

// GetEvidenceByEvidenceFolderPages mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceByEvidenceFolderPages(arg0 *auditmanager.GetEvidenceByEvidenceFolderInput, arg1 func(*auditmanager.GetEvidenceByEvidenceFolderOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceByEvidenceFolderPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvidenceByEvidenceFolderPages indicates an expected call of GetEvidenceByEvidenceFolderPages.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceByEvidenceFolderPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByEvidenceFolderPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceByEvidenceFolderPages), arg0, arg1)
}

// GetEvidenceByEvidenceFolderPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceByEvidenceFolderPagesWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceByEvidenceFolderInput, arg2 func(*auditmanager.GetEvidenceByEvidenceFolderOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceByEvidenceFolderPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvidenceByEvidenceFolderPagesWithContext indicates an expected call of GetEvidenceByEvidenceFolderPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceByEvidenceFolderPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByEvidenceFolderPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceByEvidenceFolderPagesWithContext), varargs...)
}

// GetEvidenceByEvidenceFolderRequest mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceByEvidenceFolderRequest(arg0 *auditmanager.GetEvidenceByEvidenceFolderInput) (*request.Request, *auditmanager.GetEvidenceByEvidenceFolderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceByEvidenceFolderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetEvidenceByEvidenceFolderOutput)
	return ret0, ret1
}

// GetEvidenceByEvidenceFolderRequest indicates an expected call of GetEvidenceByEvidenceFolderRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceByEvidenceFolderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByEvidenceFolderRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceByEvidenceFolderRequest), arg0)
}

// GetEvidenceByEvidenceFolderWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceByEvidenceFolderWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceByEvidenceFolderInput, arg2 ...request.Option) (*auditmanager.GetEvidenceByEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceByEvidenceFolderWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceByEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceByEvidenceFolderWithContext indicates an expected call of GetEvidenceByEvidenceFolderWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceByEvidenceFolderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceByEvidenceFolderWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceByEvidenceFolderWithContext), varargs...)
}

// GetEvidenceFolder mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFolder(arg0 *auditmanager.GetEvidenceFolderInput) (*auditmanager.GetEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFolder", arg0)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFolder indicates an expected call of GetEvidenceFolder.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFolder", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFolder), arg0)
}

// GetEvidenceFolderRequest mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFolderRequest(arg0 *auditmanager.GetEvidenceFolderInput) (*request.Request, *auditmanager.GetEvidenceFolderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFolderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetEvidenceFolderOutput)
	return ret0, ret1
}

// GetEvidenceFolderRequest indicates an expected call of GetEvidenceFolderRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFolderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFolderRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFolderRequest), arg0)
}

// GetEvidenceFolderWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFolderWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceFolderInput, arg2 ...request.Option) (*auditmanager.GetEvidenceFolderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFolderWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFolderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFolderWithContext indicates an expected call of GetEvidenceFolderWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFolderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFolderWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFolderWithContext), varargs...)
}

// GetEvidenceFoldersByAssessment mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessment(arg0 *auditmanager.GetEvidenceFoldersByAssessmentInput) (*auditmanager.GetEvidenceFoldersByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFoldersByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessment indicates an expected call of GetEvidenceFoldersByAssessment.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessment), arg0)
}

// GetEvidenceFoldersByAssessmentControl mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentControl(arg0 *auditmanager.GetEvidenceFoldersByAssessmentControlInput) (*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentControl", arg0)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFoldersByAssessmentControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessmentControl indicates an expected call of GetEvidenceFoldersByAssessmentControl.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentControl", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentControl), arg0)
}

// GetEvidenceFoldersByAssessmentControlPages mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentControlPages(arg0 *auditmanager.GetEvidenceFoldersByAssessmentControlInput, arg1 func(*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentControlPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvidenceFoldersByAssessmentControlPages indicates an expected call of GetEvidenceFoldersByAssessmentControlPages.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentControlPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentControlPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentControlPages), arg0, arg1)
}

// GetEvidenceFoldersByAssessmentControlPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentControlPagesWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceFoldersByAssessmentControlInput, arg2 func(*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentControlPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvidenceFoldersByAssessmentControlPagesWithContext indicates an expected call of GetEvidenceFoldersByAssessmentControlPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentControlPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentControlPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentControlPagesWithContext), varargs...)
}

// GetEvidenceFoldersByAssessmentControlRequest mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentControlRequest(arg0 *auditmanager.GetEvidenceFoldersByAssessmentControlInput) (*request.Request, *auditmanager.GetEvidenceFoldersByAssessmentControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetEvidenceFoldersByAssessmentControlOutput)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessmentControlRequest indicates an expected call of GetEvidenceFoldersByAssessmentControlRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentControlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentControlRequest), arg0)
}

// GetEvidenceFoldersByAssessmentControlWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentControlWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceFoldersByAssessmentControlInput, arg2 ...request.Option) (*auditmanager.GetEvidenceFoldersByAssessmentControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentControlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFoldersByAssessmentControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessmentControlWithContext indicates an expected call of GetEvidenceFoldersByAssessmentControlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentControlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentControlWithContext), varargs...)
}

// GetEvidenceFoldersByAssessmentPages mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentPages(arg0 *auditmanager.GetEvidenceFoldersByAssessmentInput, arg1 func(*auditmanager.GetEvidenceFoldersByAssessmentOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvidenceFoldersByAssessmentPages indicates an expected call of GetEvidenceFoldersByAssessmentPages.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentPages), arg0, arg1)
}

// GetEvidenceFoldersByAssessmentPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentPagesWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceFoldersByAssessmentInput, arg2 func(*auditmanager.GetEvidenceFoldersByAssessmentOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvidenceFoldersByAssessmentPagesWithContext indicates an expected call of GetEvidenceFoldersByAssessmentPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentPagesWithContext), varargs...)
}

// GetEvidenceFoldersByAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentRequest(arg0 *auditmanager.GetEvidenceFoldersByAssessmentInput) (*request.Request, *auditmanager.GetEvidenceFoldersByAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetEvidenceFoldersByAssessmentOutput)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessmentRequest indicates an expected call of GetEvidenceFoldersByAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentRequest), arg0)
}

// GetEvidenceFoldersByAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceFoldersByAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceFoldersByAssessmentInput, arg2 ...request.Option) (*auditmanager.GetEvidenceFoldersByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceFoldersByAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceFoldersByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceFoldersByAssessmentWithContext indicates an expected call of GetEvidenceFoldersByAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceFoldersByAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceFoldersByAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceFoldersByAssessmentWithContext), varargs...)
}

// GetEvidenceRequest mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceRequest(arg0 *auditmanager.GetEvidenceInput) (*request.Request, *auditmanager.GetEvidenceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidenceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetEvidenceOutput)
	return ret0, ret1
}

// GetEvidenceRequest indicates an expected call of GetEvidenceRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceRequest), arg0)
}

// GetEvidenceWithContext mocks base method.
func (m *MockAuditManagerAPI) GetEvidenceWithContext(arg0 context.Context, arg1 *auditmanager.GetEvidenceInput, arg2 ...request.Option) (*auditmanager.GetEvidenceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvidenceWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetEvidenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidenceWithContext indicates an expected call of GetEvidenceWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetEvidenceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidenceWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetEvidenceWithContext), varargs...)
}

// GetInsights mocks base method.
func (m *MockAuditManagerAPI) GetInsights(arg0 *auditmanager.GetInsightsInput) (*auditmanager.GetInsightsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsights", arg0)
	ret0, _ := ret[0].(*auditmanager.GetInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsights indicates an expected call of GetInsights.
func (mr *MockAuditManagerAPIMockRecorder) GetInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsights", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetInsights), arg0)
}

// GetInsightsByAssessment mocks base method.
func (m *MockAuditManagerAPI) GetInsightsByAssessment(arg0 *auditmanager.GetInsightsByAssessmentInput) (*auditmanager.GetInsightsByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsByAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.GetInsightsByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsByAssessment indicates an expected call of GetInsightsByAssessment.
func (mr *MockAuditManagerAPIMockRecorder) GetInsightsByAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsByAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetInsightsByAssessment), arg0)
}

// GetInsightsByAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) GetInsightsByAssessmentRequest(arg0 *auditmanager.GetInsightsByAssessmentInput) (*request.Request, *auditmanager.GetInsightsByAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsByAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetInsightsByAssessmentOutput)
	return ret0, ret1
}

// GetInsightsByAssessmentRequest indicates an expected call of GetInsightsByAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetInsightsByAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsByAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetInsightsByAssessmentRequest), arg0)
}

// GetInsightsByAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) GetInsightsByAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.GetInsightsByAssessmentInput, arg2 ...request.Option) (*auditmanager.GetInsightsByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightsByAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetInsightsByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsByAssessmentWithContext indicates an expected call of GetInsightsByAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetInsightsByAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsByAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetInsightsByAssessmentWithContext), varargs...)
}

// GetInsightsRequest mocks base method.
func (m *MockAuditManagerAPI) GetInsightsRequest(arg0 *auditmanager.GetInsightsInput) (*request.Request, *auditmanager.GetInsightsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsightsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetInsightsOutput)
	return ret0, ret1
}

// GetInsightsRequest indicates an expected call of GetInsightsRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetInsightsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetInsightsRequest), arg0)
}

// GetInsightsWithContext mocks base method.
func (m *MockAuditManagerAPI) GetInsightsWithContext(arg0 context.Context, arg1 *auditmanager.GetInsightsInput, arg2 ...request.Option) (*auditmanager.GetInsightsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInsightsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInsightsWithContext indicates an expected call of GetInsightsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetInsightsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsightsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetInsightsWithContext), varargs...)
}

// GetOrganizationAdminAccount mocks base method.
func (m *MockAuditManagerAPI) GetOrganizationAdminAccount(arg0 *auditmanager.GetOrganizationAdminAccountInput) (*auditmanager.GetOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationAdminAccount", arg0)
	ret0, _ := ret[0].(*auditmanager.GetOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationAdminAccount indicates an expected call of GetOrganizationAdminAccount.
func (mr *MockAuditManagerAPIMockRecorder) GetOrganizationAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationAdminAccount", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetOrganizationAdminAccount), arg0)
}

// GetOrganizationAdminAccountRequest mocks base method.
func (m *MockAuditManagerAPI) GetOrganizationAdminAccountRequest(arg0 *auditmanager.GetOrganizationAdminAccountInput) (*request.Request, *auditmanager.GetOrganizationAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetOrganizationAdminAccountOutput)
	return ret0, ret1
}

// GetOrganizationAdminAccountRequest indicates an expected call of GetOrganizationAdminAccountRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetOrganizationAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationAdminAccountRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetOrganizationAdminAccountRequest), arg0)
}

// GetOrganizationAdminAccountWithContext mocks base method.
func (m *MockAuditManagerAPI) GetOrganizationAdminAccountWithContext(arg0 context.Context, arg1 *auditmanager.GetOrganizationAdminAccountInput, arg2 ...request.Option) (*auditmanager.GetOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationAdminAccountWithContext indicates an expected call of GetOrganizationAdminAccountWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetOrganizationAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationAdminAccountWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetOrganizationAdminAccountWithContext), varargs...)
}

// GetServicesInScope mocks base method.
func (m *MockAuditManagerAPI) GetServicesInScope(arg0 *auditmanager.GetServicesInScopeInput) (*auditmanager.GetServicesInScopeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesInScope", arg0)
	ret0, _ := ret[0].(*auditmanager.GetServicesInScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesInScope indicates an expected call of GetServicesInScope.
func (mr *MockAuditManagerAPIMockRecorder) GetServicesInScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesInScope", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetServicesInScope), arg0)
}

// GetServicesInScopeRequest mocks base method.
func (m *MockAuditManagerAPI) GetServicesInScopeRequest(arg0 *auditmanager.GetServicesInScopeInput) (*request.Request, *auditmanager.GetServicesInScopeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesInScopeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetServicesInScopeOutput)
	return ret0, ret1
}

// GetServicesInScopeRequest indicates an expected call of GetServicesInScopeRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetServicesInScopeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesInScopeRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetServicesInScopeRequest), arg0)
}

// GetServicesInScopeWithContext mocks base method.
func (m *MockAuditManagerAPI) GetServicesInScopeWithContext(arg0 context.Context, arg1 *auditmanager.GetServicesInScopeInput, arg2 ...request.Option) (*auditmanager.GetServicesInScopeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServicesInScopeWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetServicesInScopeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesInScopeWithContext indicates an expected call of GetServicesInScopeWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetServicesInScopeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesInScopeWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetServicesInScopeWithContext), varargs...)
}

// GetSettings mocks base method.
func (m *MockAuditManagerAPI) GetSettings(arg0 *auditmanager.GetSettingsInput) (*auditmanager.GetSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0)
	ret0, _ := ret[0].(*auditmanager.GetSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockAuditManagerAPIMockRecorder) GetSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetSettings), arg0)
}

// GetSettingsRequest mocks base method.
func (m *MockAuditManagerAPI) GetSettingsRequest(arg0 *auditmanager.GetSettingsInput) (*request.Request, *auditmanager.GetSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.GetSettingsOutput)
	return ret0, ret1
}

// GetSettingsRequest indicates an expected call of GetSettingsRequest.
func (mr *MockAuditManagerAPIMockRecorder) GetSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetSettingsRequest), arg0)
}

// GetSettingsWithContext mocks base method.
func (m *MockAuditManagerAPI) GetSettingsWithContext(arg0 context.Context, arg1 *auditmanager.GetSettingsInput, arg2 ...request.Option) (*auditmanager.GetSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.GetSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsWithContext indicates an expected call of GetSettingsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) GetSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).GetSettingsWithContext), varargs...)
}

// ListAssessmentControlInsightsByControlDomain mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentControlInsightsByControlDomain(arg0 *auditmanager.ListAssessmentControlInsightsByControlDomainInput) (*auditmanager.ListAssessmentControlInsightsByControlDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentControlInsightsByControlDomain", arg0)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentControlInsightsByControlDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentControlInsightsByControlDomain indicates an expected call of ListAssessmentControlInsightsByControlDomain.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentControlInsightsByControlDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentControlInsightsByControlDomain", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentControlInsightsByControlDomain), arg0)
}

// ListAssessmentControlInsightsByControlDomainPages mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentControlInsightsByControlDomainPages(arg0 *auditmanager.ListAssessmentControlInsightsByControlDomainInput, arg1 func(*auditmanager.ListAssessmentControlInsightsByControlDomainOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentControlInsightsByControlDomainPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentControlInsightsByControlDomainPages indicates an expected call of ListAssessmentControlInsightsByControlDomainPages.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentControlInsightsByControlDomainPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentControlInsightsByControlDomainPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentControlInsightsByControlDomainPages), arg0, arg1)
}

// ListAssessmentControlInsightsByControlDomainPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentControlInsightsByControlDomainPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentControlInsightsByControlDomainInput, arg2 func(*auditmanager.ListAssessmentControlInsightsByControlDomainOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentControlInsightsByControlDomainPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentControlInsightsByControlDomainPagesWithContext indicates an expected call of ListAssessmentControlInsightsByControlDomainPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentControlInsightsByControlDomainPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentControlInsightsByControlDomainPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentControlInsightsByControlDomainPagesWithContext), varargs...)
}

// ListAssessmentControlInsightsByControlDomainRequest mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentControlInsightsByControlDomainRequest(arg0 *auditmanager.ListAssessmentControlInsightsByControlDomainInput) (*request.Request, *auditmanager.ListAssessmentControlInsightsByControlDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentControlInsightsByControlDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListAssessmentControlInsightsByControlDomainOutput)
	return ret0, ret1
}

// ListAssessmentControlInsightsByControlDomainRequest indicates an expected call of ListAssessmentControlInsightsByControlDomainRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentControlInsightsByControlDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentControlInsightsByControlDomainRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentControlInsightsByControlDomainRequest), arg0)
}

// ListAssessmentControlInsightsByControlDomainWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentControlInsightsByControlDomainWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentControlInsightsByControlDomainInput, arg2 ...request.Option) (*auditmanager.ListAssessmentControlInsightsByControlDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentControlInsightsByControlDomainWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentControlInsightsByControlDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentControlInsightsByControlDomainWithContext indicates an expected call of ListAssessmentControlInsightsByControlDomainWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentControlInsightsByControlDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentControlInsightsByControlDomainWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentControlInsightsByControlDomainWithContext), varargs...)
}

// ListAssessmentFrameworkShareRequests mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworkShareRequests(arg0 *auditmanager.ListAssessmentFrameworkShareRequestsInput) (*auditmanager.ListAssessmentFrameworkShareRequestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentFrameworkShareRequests", arg0)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentFrameworkShareRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentFrameworkShareRequests indicates an expected call of ListAssessmentFrameworkShareRequests.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworkShareRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworkShareRequests", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworkShareRequests), arg0)
}

// ListAssessmentFrameworkShareRequestsPages mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworkShareRequestsPages(arg0 *auditmanager.ListAssessmentFrameworkShareRequestsInput, arg1 func(*auditmanager.ListAssessmentFrameworkShareRequestsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentFrameworkShareRequestsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentFrameworkShareRequestsPages indicates an expected call of ListAssessmentFrameworkShareRequestsPages.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworkShareRequestsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworkShareRequestsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworkShareRequestsPages), arg0, arg1)
}

// ListAssessmentFrameworkShareRequestsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworkShareRequestsPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentFrameworkShareRequestsInput, arg2 func(*auditmanager.ListAssessmentFrameworkShareRequestsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentFrameworkShareRequestsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentFrameworkShareRequestsPagesWithContext indicates an expected call of ListAssessmentFrameworkShareRequestsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworkShareRequestsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworkShareRequestsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworkShareRequestsPagesWithContext), varargs...)
}

// ListAssessmentFrameworkShareRequestsRequest mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworkShareRequestsRequest(arg0 *auditmanager.ListAssessmentFrameworkShareRequestsInput) (*request.Request, *auditmanager.ListAssessmentFrameworkShareRequestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentFrameworkShareRequestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListAssessmentFrameworkShareRequestsOutput)
	return ret0, ret1
}

// ListAssessmentFrameworkShareRequestsRequest indicates an expected call of ListAssessmentFrameworkShareRequestsRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworkShareRequestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworkShareRequestsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworkShareRequestsRequest), arg0)
}

// ListAssessmentFrameworkShareRequestsWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworkShareRequestsWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentFrameworkShareRequestsInput, arg2 ...request.Option) (*auditmanager.ListAssessmentFrameworkShareRequestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentFrameworkShareRequestsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentFrameworkShareRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentFrameworkShareRequestsWithContext indicates an expected call of ListAssessmentFrameworkShareRequestsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworkShareRequestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworkShareRequestsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworkShareRequestsWithContext), varargs...)
}

// ListAssessmentFrameworks mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworks(arg0 *auditmanager.ListAssessmentFrameworksInput) (*auditmanager.ListAssessmentFrameworksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentFrameworks", arg0)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentFrameworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentFrameworks indicates an expected call of ListAssessmentFrameworks.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworks", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworks), arg0)
}

// ListAssessmentFrameworksPages mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworksPages(arg0 *auditmanager.ListAssessmentFrameworksInput, arg1 func(*auditmanager.ListAssessmentFrameworksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentFrameworksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentFrameworksPages indicates an expected call of ListAssessmentFrameworksPages.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworksPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworksPages), arg0, arg1)
}

// ListAssessmentFrameworksPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworksPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentFrameworksInput, arg2 func(*auditmanager.ListAssessmentFrameworksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentFrameworksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentFrameworksPagesWithContext indicates an expected call of ListAssessmentFrameworksPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworksPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworksPagesWithContext), varargs...)
}

// ListAssessmentFrameworksRequest mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworksRequest(arg0 *auditmanager.ListAssessmentFrameworksInput) (*request.Request, *auditmanager.ListAssessmentFrameworksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentFrameworksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListAssessmentFrameworksOutput)
	return ret0, ret1
}

// ListAssessmentFrameworksRequest indicates an expected call of ListAssessmentFrameworksRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworksRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworksRequest), arg0)
}

// ListAssessmentFrameworksWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentFrameworksWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentFrameworksInput, arg2 ...request.Option) (*auditmanager.ListAssessmentFrameworksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentFrameworksWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentFrameworksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentFrameworksWithContext indicates an expected call of ListAssessmentFrameworksWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentFrameworksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentFrameworksWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentFrameworksWithContext), varargs...)
}

// ListAssessmentReports mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentReports(arg0 *auditmanager.ListAssessmentReportsInput) (*auditmanager.ListAssessmentReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentReports", arg0)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentReports indicates an expected call of ListAssessmentReports.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentReports", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentReports), arg0)
}

// ListAssessmentReportsPages mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentReportsPages(arg0 *auditmanager.ListAssessmentReportsInput, arg1 func(*auditmanager.ListAssessmentReportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentReportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentReportsPages indicates an expected call of ListAssessmentReportsPages.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentReportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentReportsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentReportsPages), arg0, arg1)
}

// ListAssessmentReportsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentReportsPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentReportsInput, arg2 func(*auditmanager.ListAssessmentReportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentReportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentReportsPagesWithContext indicates an expected call of ListAssessmentReportsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentReportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentReportsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentReportsPagesWithContext), varargs...)
}

// ListAssessmentReportsRequest mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentReportsRequest(arg0 *auditmanager.ListAssessmentReportsInput) (*request.Request, *auditmanager.ListAssessmentReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListAssessmentReportsOutput)
	return ret0, ret1
}

// ListAssessmentReportsRequest indicates an expected call of ListAssessmentReportsRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentReportsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentReportsRequest), arg0)
}

// ListAssessmentReportsWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentReportsWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentReportsInput, arg2 ...request.Option) (*auditmanager.ListAssessmentReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentReportsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentReportsWithContext indicates an expected call of ListAssessmentReportsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentReportsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentReportsWithContext), varargs...)
}

// ListAssessments mocks base method.
func (m *MockAuditManagerAPI) ListAssessments(arg0 *auditmanager.ListAssessmentsInput) (*auditmanager.ListAssessmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessments", arg0)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessments indicates an expected call of ListAssessments.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessments", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessments), arg0)
}

// ListAssessmentsPages mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentsPages(arg0 *auditmanager.ListAssessmentsInput, arg1 func(*auditmanager.ListAssessmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentsPages indicates an expected call of ListAssessmentsPages.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentsPages), arg0, arg1)
}

// ListAssessmentsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentsPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentsInput, arg2 func(*auditmanager.ListAssessmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssessmentsPagesWithContext indicates an expected call of ListAssessmentsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentsPagesWithContext), varargs...)
}

// ListAssessmentsRequest mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentsRequest(arg0 *auditmanager.ListAssessmentsInput) (*request.Request, *auditmanager.ListAssessmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssessmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListAssessmentsOutput)
	return ret0, ret1
}

// ListAssessmentsRequest indicates an expected call of ListAssessmentsRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentsRequest), arg0)
}

// ListAssessmentsWithContext mocks base method.
func (m *MockAuditManagerAPI) ListAssessmentsWithContext(arg0 context.Context, arg1 *auditmanager.ListAssessmentsInput, arg2 ...request.Option) (*auditmanager.ListAssessmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssessmentsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListAssessmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssessmentsWithContext indicates an expected call of ListAssessmentsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListAssessmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssessmentsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListAssessmentsWithContext), varargs...)
}

// ListControlDomainInsights mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsights(arg0 *auditmanager.ListControlDomainInsightsInput) (*auditmanager.ListControlDomainInsightsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlDomainInsights", arg0)
	ret0, _ := ret[0].(*auditmanager.ListControlDomainInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlDomainInsights indicates an expected call of ListControlDomainInsights.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsights", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsights), arg0)
}

// ListControlDomainInsightsByAssessment mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsByAssessment(arg0 *auditmanager.ListControlDomainInsightsByAssessmentInput) (*auditmanager.ListControlDomainInsightsByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlDomainInsightsByAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.ListControlDomainInsightsByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlDomainInsightsByAssessment indicates an expected call of ListControlDomainInsightsByAssessment.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsByAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsByAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsByAssessment), arg0)
}

// ListControlDomainInsightsByAssessmentPages mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsByAssessmentPages(arg0 *auditmanager.ListControlDomainInsightsByAssessmentInput, arg1 func(*auditmanager.ListControlDomainInsightsByAssessmentOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlDomainInsightsByAssessmentPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlDomainInsightsByAssessmentPages indicates an expected call of ListControlDomainInsightsByAssessmentPages.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsByAssessmentPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsByAssessmentPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsByAssessmentPages), arg0, arg1)
}

// ListControlDomainInsightsByAssessmentPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsByAssessmentPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListControlDomainInsightsByAssessmentInput, arg2 func(*auditmanager.ListControlDomainInsightsByAssessmentOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlDomainInsightsByAssessmentPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlDomainInsightsByAssessmentPagesWithContext indicates an expected call of ListControlDomainInsightsByAssessmentPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsByAssessmentPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsByAssessmentPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsByAssessmentPagesWithContext), varargs...)
}

// ListControlDomainInsightsByAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsByAssessmentRequest(arg0 *auditmanager.ListControlDomainInsightsByAssessmentInput) (*request.Request, *auditmanager.ListControlDomainInsightsByAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlDomainInsightsByAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListControlDomainInsightsByAssessmentOutput)
	return ret0, ret1
}

// ListControlDomainInsightsByAssessmentRequest indicates an expected call of ListControlDomainInsightsByAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsByAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsByAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsByAssessmentRequest), arg0)
}

// ListControlDomainInsightsByAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsByAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.ListControlDomainInsightsByAssessmentInput, arg2 ...request.Option) (*auditmanager.ListControlDomainInsightsByAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlDomainInsightsByAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlDomainInsightsByAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlDomainInsightsByAssessmentWithContext indicates an expected call of ListControlDomainInsightsByAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsByAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsByAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsByAssessmentWithContext), varargs...)
}

// ListControlDomainInsightsPages mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsPages(arg0 *auditmanager.ListControlDomainInsightsInput, arg1 func(*auditmanager.ListControlDomainInsightsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlDomainInsightsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlDomainInsightsPages indicates an expected call of ListControlDomainInsightsPages.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsPages), arg0, arg1)
}

// ListControlDomainInsightsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListControlDomainInsightsInput, arg2 func(*auditmanager.ListControlDomainInsightsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlDomainInsightsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlDomainInsightsPagesWithContext indicates an expected call of ListControlDomainInsightsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsPagesWithContext), varargs...)
}

// ListControlDomainInsightsRequest mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsRequest(arg0 *auditmanager.ListControlDomainInsightsInput) (*request.Request, *auditmanager.ListControlDomainInsightsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlDomainInsightsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListControlDomainInsightsOutput)
	return ret0, ret1
}

// ListControlDomainInsightsRequest indicates an expected call of ListControlDomainInsightsRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsRequest), arg0)
}

// ListControlDomainInsightsWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlDomainInsightsWithContext(arg0 context.Context, arg1 *auditmanager.ListControlDomainInsightsInput, arg2 ...request.Option) (*auditmanager.ListControlDomainInsightsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlDomainInsightsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlDomainInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlDomainInsightsWithContext indicates an expected call of ListControlDomainInsightsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlDomainInsightsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlDomainInsightsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlDomainInsightsWithContext), varargs...)
}

// ListControlInsightsByControlDomain mocks base method.
func (m *MockAuditManagerAPI) ListControlInsightsByControlDomain(arg0 *auditmanager.ListControlInsightsByControlDomainInput) (*auditmanager.ListControlInsightsByControlDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlInsightsByControlDomain", arg0)
	ret0, _ := ret[0].(*auditmanager.ListControlInsightsByControlDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlInsightsByControlDomain indicates an expected call of ListControlInsightsByControlDomain.
func (mr *MockAuditManagerAPIMockRecorder) ListControlInsightsByControlDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlInsightsByControlDomain", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlInsightsByControlDomain), arg0)
}

// ListControlInsightsByControlDomainPages mocks base method.
func (m *MockAuditManagerAPI) ListControlInsightsByControlDomainPages(arg0 *auditmanager.ListControlInsightsByControlDomainInput, arg1 func(*auditmanager.ListControlInsightsByControlDomainOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlInsightsByControlDomainPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlInsightsByControlDomainPages indicates an expected call of ListControlInsightsByControlDomainPages.
func (mr *MockAuditManagerAPIMockRecorder) ListControlInsightsByControlDomainPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlInsightsByControlDomainPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlInsightsByControlDomainPages), arg0, arg1)
}

// ListControlInsightsByControlDomainPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlInsightsByControlDomainPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListControlInsightsByControlDomainInput, arg2 func(*auditmanager.ListControlInsightsByControlDomainOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlInsightsByControlDomainPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlInsightsByControlDomainPagesWithContext indicates an expected call of ListControlInsightsByControlDomainPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlInsightsByControlDomainPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlInsightsByControlDomainPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlInsightsByControlDomainPagesWithContext), varargs...)
}

// ListControlInsightsByControlDomainRequest mocks base method.
func (m *MockAuditManagerAPI) ListControlInsightsByControlDomainRequest(arg0 *auditmanager.ListControlInsightsByControlDomainInput) (*request.Request, *auditmanager.ListControlInsightsByControlDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlInsightsByControlDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListControlInsightsByControlDomainOutput)
	return ret0, ret1
}

// ListControlInsightsByControlDomainRequest indicates an expected call of ListControlInsightsByControlDomainRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListControlInsightsByControlDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlInsightsByControlDomainRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlInsightsByControlDomainRequest), arg0)
}

// ListControlInsightsByControlDomainWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlInsightsByControlDomainWithContext(arg0 context.Context, arg1 *auditmanager.ListControlInsightsByControlDomainInput, arg2 ...request.Option) (*auditmanager.ListControlInsightsByControlDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlInsightsByControlDomainWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlInsightsByControlDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlInsightsByControlDomainWithContext indicates an expected call of ListControlInsightsByControlDomainWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlInsightsByControlDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlInsightsByControlDomainWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlInsightsByControlDomainWithContext), varargs...)
}

// ListControls mocks base method.
func (m *MockAuditManagerAPI) ListControls(arg0 *auditmanager.ListControlsInput) (*auditmanager.ListControlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControls", arg0)
	ret0, _ := ret[0].(*auditmanager.ListControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControls indicates an expected call of ListControls.
func (mr *MockAuditManagerAPIMockRecorder) ListControls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControls", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControls), arg0)
}

// ListControlsPages mocks base method.
func (m *MockAuditManagerAPI) ListControlsPages(arg0 *auditmanager.ListControlsInput, arg1 func(*auditmanager.ListControlsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlsPages indicates an expected call of ListControlsPages.
func (mr *MockAuditManagerAPIMockRecorder) ListControlsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlsPages), arg0, arg1)
}

// ListControlsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlsPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListControlsInput, arg2 func(*auditmanager.ListControlsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListControlsPagesWithContext indicates an expected call of ListControlsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlsPagesWithContext), varargs...)
}

// ListControlsRequest mocks base method.
func (m *MockAuditManagerAPI) ListControlsRequest(arg0 *auditmanager.ListControlsInput) (*request.Request, *auditmanager.ListControlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListControlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListControlsOutput)
	return ret0, ret1
}

// ListControlsRequest indicates an expected call of ListControlsRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListControlsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlsRequest), arg0)
}

// ListControlsWithContext mocks base method.
func (m *MockAuditManagerAPI) ListControlsWithContext(arg0 context.Context, arg1 *auditmanager.ListControlsInput, arg2 ...request.Option) (*auditmanager.ListControlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListControlsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListControlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListControlsWithContext indicates an expected call of ListControlsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListControlsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListControlsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListControlsWithContext), varargs...)
}

// ListKeywordsForDataSource mocks base method.
func (m *MockAuditManagerAPI) ListKeywordsForDataSource(arg0 *auditmanager.ListKeywordsForDataSourceInput) (*auditmanager.ListKeywordsForDataSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeywordsForDataSource", arg0)
	ret0, _ := ret[0].(*auditmanager.ListKeywordsForDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeywordsForDataSource indicates an expected call of ListKeywordsForDataSource.
func (mr *MockAuditManagerAPIMockRecorder) ListKeywordsForDataSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeywordsForDataSource", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListKeywordsForDataSource), arg0)
}

// ListKeywordsForDataSourcePages mocks base method.
func (m *MockAuditManagerAPI) ListKeywordsForDataSourcePages(arg0 *auditmanager.ListKeywordsForDataSourceInput, arg1 func(*auditmanager.ListKeywordsForDataSourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeywordsForDataSourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeywordsForDataSourcePages indicates an expected call of ListKeywordsForDataSourcePages.
func (mr *MockAuditManagerAPIMockRecorder) ListKeywordsForDataSourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeywordsForDataSourcePages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListKeywordsForDataSourcePages), arg0, arg1)
}

// ListKeywordsForDataSourcePagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListKeywordsForDataSourcePagesWithContext(arg0 context.Context, arg1 *auditmanager.ListKeywordsForDataSourceInput, arg2 func(*auditmanager.ListKeywordsForDataSourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeywordsForDataSourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListKeywordsForDataSourcePagesWithContext indicates an expected call of ListKeywordsForDataSourcePagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListKeywordsForDataSourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeywordsForDataSourcePagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListKeywordsForDataSourcePagesWithContext), varargs...)
}

// ListKeywordsForDataSourceRequest mocks base method.
func (m *MockAuditManagerAPI) ListKeywordsForDataSourceRequest(arg0 *auditmanager.ListKeywordsForDataSourceInput) (*request.Request, *auditmanager.ListKeywordsForDataSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeywordsForDataSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListKeywordsForDataSourceOutput)
	return ret0, ret1
}

// ListKeywordsForDataSourceRequest indicates an expected call of ListKeywordsForDataSourceRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListKeywordsForDataSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeywordsForDataSourceRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListKeywordsForDataSourceRequest), arg0)
}

// ListKeywordsForDataSourceWithContext mocks base method.
func (m *MockAuditManagerAPI) ListKeywordsForDataSourceWithContext(arg0 context.Context, arg1 *auditmanager.ListKeywordsForDataSourceInput, arg2 ...request.Option) (*auditmanager.ListKeywordsForDataSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeywordsForDataSourceWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListKeywordsForDataSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeywordsForDataSourceWithContext indicates an expected call of ListKeywordsForDataSourceWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListKeywordsForDataSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeywordsForDataSourceWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListKeywordsForDataSourceWithContext), varargs...)
}

// ListNotifications mocks base method.
func (m *MockAuditManagerAPI) ListNotifications(arg0 *auditmanager.ListNotificationsInput) (*auditmanager.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", arg0)
	ret0, _ := ret[0].(*auditmanager.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockAuditManagerAPIMockRecorder) ListNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListNotifications), arg0)
}

// ListNotificationsPages mocks base method.
func (m *MockAuditManagerAPI) ListNotificationsPages(arg0 *auditmanager.ListNotificationsInput, arg1 func(*auditmanager.ListNotificationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPages indicates an expected call of ListNotificationsPages.
func (mr *MockAuditManagerAPIMockRecorder) ListNotificationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPages", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListNotificationsPages), arg0, arg1)
}

// ListNotificationsPagesWithContext mocks base method.
func (m *MockAuditManagerAPI) ListNotificationsPagesWithContext(arg0 context.Context, arg1 *auditmanager.ListNotificationsInput, arg2 func(*auditmanager.ListNotificationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNotificationsPagesWithContext indicates an expected call of ListNotificationsPagesWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListNotificationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsPagesWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListNotificationsPagesWithContext), varargs...)
}

// ListNotificationsRequest mocks base method.
func (m *MockAuditManagerAPI) ListNotificationsRequest(arg0 *auditmanager.ListNotificationsInput) (*request.Request, *auditmanager.ListNotificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListNotificationsOutput)
	return ret0, ret1
}

// ListNotificationsRequest indicates an expected call of ListNotificationsRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListNotificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListNotificationsRequest), arg0)
}

// ListNotificationsWithContext mocks base method.
func (m *MockAuditManagerAPI) ListNotificationsWithContext(arg0 context.Context, arg1 *auditmanager.ListNotificationsInput, arg2 ...request.Option) (*auditmanager.ListNotificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNotificationsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListNotificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotificationsWithContext indicates an expected call of ListNotificationsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListNotificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotificationsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListNotificationsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAuditManagerAPI) ListTagsForResource(arg0 *auditmanager.ListTagsForResourceInput) (*auditmanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*auditmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAuditManagerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockAuditManagerAPI) ListTagsForResourceRequest(arg0 *auditmanager.ListTagsForResourceInput) (*request.Request, *auditmanager.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockAuditManagerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockAuditManagerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *auditmanager.ListTagsForResourceInput, arg2 ...request.Option) (*auditmanager.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RegisterAccount mocks base method.
func (m *MockAuditManagerAPI) RegisterAccount(arg0 *auditmanager.RegisterAccountInput) (*auditmanager.RegisterAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccount", arg0)
	ret0, _ := ret[0].(*auditmanager.RegisterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccount indicates an expected call of RegisterAccount.
func (mr *MockAuditManagerAPIMockRecorder) RegisterAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccount", reflect.TypeOf((*MockAuditManagerAPI)(nil).RegisterAccount), arg0)
}

// RegisterAccountRequest mocks base method.
func (m *MockAuditManagerAPI) RegisterAccountRequest(arg0 *auditmanager.RegisterAccountInput) (*request.Request, *auditmanager.RegisterAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.RegisterAccountOutput)
	return ret0, ret1
}

// RegisterAccountRequest indicates an expected call of RegisterAccountRequest.
func (mr *MockAuditManagerAPIMockRecorder) RegisterAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccountRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).RegisterAccountRequest), arg0)
}

// RegisterAccountWithContext mocks base method.
func (m *MockAuditManagerAPI) RegisterAccountWithContext(arg0 context.Context, arg1 *auditmanager.RegisterAccountInput, arg2 ...request.Option) (*auditmanager.RegisterAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAccountWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.RegisterAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAccountWithContext indicates an expected call of RegisterAccountWithContext.
func (mr *MockAuditManagerAPIMockRecorder) RegisterAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAccountWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).RegisterAccountWithContext), varargs...)
}

// RegisterOrganizationAdminAccount mocks base method.
func (m *MockAuditManagerAPI) RegisterOrganizationAdminAccount(arg0 *auditmanager.RegisterOrganizationAdminAccountInput) (*auditmanager.RegisterOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrganizationAdminAccount", arg0)
	ret0, _ := ret[0].(*auditmanager.RegisterOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOrganizationAdminAccount indicates an expected call of RegisterOrganizationAdminAccount.
func (mr *MockAuditManagerAPIMockRecorder) RegisterOrganizationAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrganizationAdminAccount", reflect.TypeOf((*MockAuditManagerAPI)(nil).RegisterOrganizationAdminAccount), arg0)
}

// RegisterOrganizationAdminAccountRequest mocks base method.
func (m *MockAuditManagerAPI) RegisterOrganizationAdminAccountRequest(arg0 *auditmanager.RegisterOrganizationAdminAccountInput) (*request.Request, *auditmanager.RegisterOrganizationAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrganizationAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.RegisterOrganizationAdminAccountOutput)
	return ret0, ret1
}

// RegisterOrganizationAdminAccountRequest indicates an expected call of RegisterOrganizationAdminAccountRequest.
func (mr *MockAuditManagerAPIMockRecorder) RegisterOrganizationAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrganizationAdminAccountRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).RegisterOrganizationAdminAccountRequest), arg0)
}

// RegisterOrganizationAdminAccountWithContext mocks base method.
func (m *MockAuditManagerAPI) RegisterOrganizationAdminAccountWithContext(arg0 context.Context, arg1 *auditmanager.RegisterOrganizationAdminAccountInput, arg2 ...request.Option) (*auditmanager.RegisterOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterOrganizationAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.RegisterOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOrganizationAdminAccountWithContext indicates an expected call of RegisterOrganizationAdminAccountWithContext.
func (mr *MockAuditManagerAPIMockRecorder) RegisterOrganizationAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrganizationAdminAccountWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).RegisterOrganizationAdminAccountWithContext), varargs...)
}

// StartAssessmentFrameworkShare mocks base method.
func (m *MockAuditManagerAPI) StartAssessmentFrameworkShare(arg0 *auditmanager.StartAssessmentFrameworkShareInput) (*auditmanager.StartAssessmentFrameworkShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAssessmentFrameworkShare", arg0)
	ret0, _ := ret[0].(*auditmanager.StartAssessmentFrameworkShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAssessmentFrameworkShare indicates an expected call of StartAssessmentFrameworkShare.
func (mr *MockAuditManagerAPIMockRecorder) StartAssessmentFrameworkShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAssessmentFrameworkShare", reflect.TypeOf((*MockAuditManagerAPI)(nil).StartAssessmentFrameworkShare), arg0)
}

// StartAssessmentFrameworkShareRequest mocks base method.
func (m *MockAuditManagerAPI) StartAssessmentFrameworkShareRequest(arg0 *auditmanager.StartAssessmentFrameworkShareInput) (*request.Request, *auditmanager.StartAssessmentFrameworkShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAssessmentFrameworkShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.StartAssessmentFrameworkShareOutput)
	return ret0, ret1
}

// StartAssessmentFrameworkShareRequest indicates an expected call of StartAssessmentFrameworkShareRequest.
func (mr *MockAuditManagerAPIMockRecorder) StartAssessmentFrameworkShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAssessmentFrameworkShareRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).StartAssessmentFrameworkShareRequest), arg0)
}

// StartAssessmentFrameworkShareWithContext mocks base method.
func (m *MockAuditManagerAPI) StartAssessmentFrameworkShareWithContext(arg0 context.Context, arg1 *auditmanager.StartAssessmentFrameworkShareInput, arg2 ...request.Option) (*auditmanager.StartAssessmentFrameworkShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAssessmentFrameworkShareWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.StartAssessmentFrameworkShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAssessmentFrameworkShareWithContext indicates an expected call of StartAssessmentFrameworkShareWithContext.
func (mr *MockAuditManagerAPIMockRecorder) StartAssessmentFrameworkShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAssessmentFrameworkShareWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).StartAssessmentFrameworkShareWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockAuditManagerAPI) TagResource(arg0 *auditmanager.TagResourceInput) (*auditmanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*auditmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockAuditManagerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAuditManagerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockAuditManagerAPI) TagResourceRequest(arg0 *auditmanager.TagResourceInput) (*request.Request, *auditmanager.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockAuditManagerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockAuditManagerAPI) TagResourceWithContext(arg0 context.Context, arg1 *auditmanager.TagResourceInput, arg2 ...request.Option) (*auditmanager.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockAuditManagerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockAuditManagerAPI) UntagResource(arg0 *auditmanager.UntagResourceInput) (*auditmanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*auditmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockAuditManagerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAuditManagerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockAuditManagerAPI) UntagResourceRequest(arg0 *auditmanager.UntagResourceInput) (*request.Request, *auditmanager.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockAuditManagerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockAuditManagerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *auditmanager.UntagResourceInput, arg2 ...request.Option) (*auditmanager.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAssessment mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessment(arg0 *auditmanager.UpdateAssessmentInput) (*auditmanager.UpdateAssessmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessment", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessment indicates an expected call of UpdateAssessment.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessment", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessment), arg0)
}

// UpdateAssessmentControl mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentControl(arg0 *auditmanager.UpdateAssessmentControlInput) (*auditmanager.UpdateAssessmentControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentControl", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentControl indicates an expected call of UpdateAssessmentControl.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentControl", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentControl), arg0)
}

// UpdateAssessmentControlRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentControlRequest(arg0 *auditmanager.UpdateAssessmentControlInput) (*request.Request, *auditmanager.UpdateAssessmentControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateAssessmentControlOutput)
	return ret0, ret1
}

// UpdateAssessmentControlRequest indicates an expected call of UpdateAssessmentControlRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentControlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentControlRequest), arg0)
}

// UpdateAssessmentControlSetStatus mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentControlSetStatus(arg0 *auditmanager.UpdateAssessmentControlSetStatusInput) (*auditmanager.UpdateAssessmentControlSetStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentControlSetStatus", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentControlSetStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentControlSetStatus indicates an expected call of UpdateAssessmentControlSetStatus.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentControlSetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentControlSetStatus", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentControlSetStatus), arg0)
}

// UpdateAssessmentControlSetStatusRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentControlSetStatusRequest(arg0 *auditmanager.UpdateAssessmentControlSetStatusInput) (*request.Request, *auditmanager.UpdateAssessmentControlSetStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentControlSetStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateAssessmentControlSetStatusOutput)
	return ret0, ret1
}

// UpdateAssessmentControlSetStatusRequest indicates an expected call of UpdateAssessmentControlSetStatusRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentControlSetStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentControlSetStatusRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentControlSetStatusRequest), arg0)
}

// UpdateAssessmentControlSetStatusWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentControlSetStatusWithContext(arg0 context.Context, arg1 *auditmanager.UpdateAssessmentControlSetStatusInput, arg2 ...request.Option) (*auditmanager.UpdateAssessmentControlSetStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssessmentControlSetStatusWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentControlSetStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentControlSetStatusWithContext indicates an expected call of UpdateAssessmentControlSetStatusWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentControlSetStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentControlSetStatusWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentControlSetStatusWithContext), varargs...)
}

// UpdateAssessmentControlWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentControlWithContext(arg0 context.Context, arg1 *auditmanager.UpdateAssessmentControlInput, arg2 ...request.Option) (*auditmanager.UpdateAssessmentControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssessmentControlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentControlWithContext indicates an expected call of UpdateAssessmentControlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentControlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentControlWithContext), varargs...)
}

// UpdateAssessmentFramework mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentFramework(arg0 *auditmanager.UpdateAssessmentFrameworkInput) (*auditmanager.UpdateAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentFramework", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentFramework indicates an expected call of UpdateAssessmentFramework.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentFramework(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentFramework", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentFramework), arg0)
}

// UpdateAssessmentFrameworkRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentFrameworkRequest(arg0 *auditmanager.UpdateAssessmentFrameworkInput) (*request.Request, *auditmanager.UpdateAssessmentFrameworkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentFrameworkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateAssessmentFrameworkOutput)
	return ret0, ret1
}

// UpdateAssessmentFrameworkRequest indicates an expected call of UpdateAssessmentFrameworkRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentFrameworkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentFrameworkRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentFrameworkRequest), arg0)
}

// UpdateAssessmentFrameworkShare mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentFrameworkShare(arg0 *auditmanager.UpdateAssessmentFrameworkShareInput) (*auditmanager.UpdateAssessmentFrameworkShareOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentFrameworkShare", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentFrameworkShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentFrameworkShare indicates an expected call of UpdateAssessmentFrameworkShare.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentFrameworkShare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentFrameworkShare", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentFrameworkShare), arg0)
}

// UpdateAssessmentFrameworkShareRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentFrameworkShareRequest(arg0 *auditmanager.UpdateAssessmentFrameworkShareInput) (*request.Request, *auditmanager.UpdateAssessmentFrameworkShareOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentFrameworkShareRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateAssessmentFrameworkShareOutput)
	return ret0, ret1
}

// UpdateAssessmentFrameworkShareRequest indicates an expected call of UpdateAssessmentFrameworkShareRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentFrameworkShareRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentFrameworkShareRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentFrameworkShareRequest), arg0)
}

// UpdateAssessmentFrameworkShareWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentFrameworkShareWithContext(arg0 context.Context, arg1 *auditmanager.UpdateAssessmentFrameworkShareInput, arg2 ...request.Option) (*auditmanager.UpdateAssessmentFrameworkShareOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssessmentFrameworkShareWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentFrameworkShareOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentFrameworkShareWithContext indicates an expected call of UpdateAssessmentFrameworkShareWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentFrameworkShareWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentFrameworkShareWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentFrameworkShareWithContext), varargs...)
}

// UpdateAssessmentFrameworkWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentFrameworkWithContext(arg0 context.Context, arg1 *auditmanager.UpdateAssessmentFrameworkInput, arg2 ...request.Option) (*auditmanager.UpdateAssessmentFrameworkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssessmentFrameworkWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentFrameworkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentFrameworkWithContext indicates an expected call of UpdateAssessmentFrameworkWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentFrameworkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentFrameworkWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentFrameworkWithContext), varargs...)
}

// UpdateAssessmentRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentRequest(arg0 *auditmanager.UpdateAssessmentInput) (*request.Request, *auditmanager.UpdateAssessmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateAssessmentOutput)
	return ret0, ret1
}

// UpdateAssessmentRequest indicates an expected call of UpdateAssessmentRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentRequest), arg0)
}

// UpdateAssessmentStatus mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentStatus(arg0 *auditmanager.UpdateAssessmentStatusInput) (*auditmanager.UpdateAssessmentStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentStatus", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentStatus indicates an expected call of UpdateAssessmentStatus.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentStatus", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentStatus), arg0)
}

// UpdateAssessmentStatusRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentStatusRequest(arg0 *auditmanager.UpdateAssessmentStatusInput) (*request.Request, *auditmanager.UpdateAssessmentStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssessmentStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateAssessmentStatusOutput)
	return ret0, ret1
}

// UpdateAssessmentStatusRequest indicates an expected call of UpdateAssessmentStatusRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentStatusRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentStatusRequest), arg0)
}

// UpdateAssessmentStatusWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentStatusWithContext(arg0 context.Context, arg1 *auditmanager.UpdateAssessmentStatusInput, arg2 ...request.Option) (*auditmanager.UpdateAssessmentStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssessmentStatusWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentStatusWithContext indicates an expected call of UpdateAssessmentStatusWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentStatusWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentStatusWithContext), varargs...)
}

// UpdateAssessmentWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateAssessmentWithContext(arg0 context.Context, arg1 *auditmanager.UpdateAssessmentInput, arg2 ...request.Option) (*auditmanager.UpdateAssessmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssessmentWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateAssessmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssessmentWithContext indicates an expected call of UpdateAssessmentWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateAssessmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssessmentWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateAssessmentWithContext), varargs...)
}

// UpdateControl mocks base method.
func (m *MockAuditManagerAPI) UpdateControl(arg0 *auditmanager.UpdateControlInput) (*auditmanager.UpdateControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateControl", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateControl indicates an expected call of UpdateControl.
func (mr *MockAuditManagerAPIMockRecorder) UpdateControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControl", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateControl), arg0)
}

// UpdateControlRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateControlRequest(arg0 *auditmanager.UpdateControlInput) (*request.Request, *auditmanager.UpdateControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateControlOutput)
	return ret0, ret1
}

// UpdateControlRequest indicates an expected call of UpdateControlRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControlRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateControlRequest), arg0)
}

// UpdateControlWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateControlWithContext(arg0 context.Context, arg1 *auditmanager.UpdateControlInput, arg2 ...request.Option) (*auditmanager.UpdateControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateControlWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateControlWithContext indicates an expected call of UpdateControlWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateControlWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateControlWithContext), varargs...)
}

// UpdateSettings mocks base method.
func (m *MockAuditManagerAPI) UpdateSettings(arg0 *auditmanager.UpdateSettingsInput) (*auditmanager.UpdateSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettings", arg0)
	ret0, _ := ret[0].(*auditmanager.UpdateSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockAuditManagerAPIMockRecorder) UpdateSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateSettings), arg0)
}

// UpdateSettingsRequest mocks base method.
func (m *MockAuditManagerAPI) UpdateSettingsRequest(arg0 *auditmanager.UpdateSettingsInput) (*request.Request, *auditmanager.UpdateSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.UpdateSettingsOutput)
	return ret0, ret1
}

// UpdateSettingsRequest indicates an expected call of UpdateSettingsRequest.
func (mr *MockAuditManagerAPIMockRecorder) UpdateSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingsRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateSettingsRequest), arg0)
}

// UpdateSettingsWithContext mocks base method.
func (m *MockAuditManagerAPI) UpdateSettingsWithContext(arg0 context.Context, arg1 *auditmanager.UpdateSettingsInput, arg2 ...request.Option) (*auditmanager.UpdateSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.UpdateSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettingsWithContext indicates an expected call of UpdateSettingsWithContext.
func (mr *MockAuditManagerAPIMockRecorder) UpdateSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingsWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).UpdateSettingsWithContext), varargs...)
}

// ValidateAssessmentReportIntegrity mocks base method.
func (m *MockAuditManagerAPI) ValidateAssessmentReportIntegrity(arg0 *auditmanager.ValidateAssessmentReportIntegrityInput) (*auditmanager.ValidateAssessmentReportIntegrityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAssessmentReportIntegrity", arg0)
	ret0, _ := ret[0].(*auditmanager.ValidateAssessmentReportIntegrityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAssessmentReportIntegrity indicates an expected call of ValidateAssessmentReportIntegrity.
func (mr *MockAuditManagerAPIMockRecorder) ValidateAssessmentReportIntegrity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAssessmentReportIntegrity", reflect.TypeOf((*MockAuditManagerAPI)(nil).ValidateAssessmentReportIntegrity), arg0)
}

// ValidateAssessmentReportIntegrityRequest mocks base method.
func (m *MockAuditManagerAPI) ValidateAssessmentReportIntegrityRequest(arg0 *auditmanager.ValidateAssessmentReportIntegrityInput) (*request.Request, *auditmanager.ValidateAssessmentReportIntegrityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAssessmentReportIntegrityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*auditmanager.ValidateAssessmentReportIntegrityOutput)
	return ret0, ret1
}

// ValidateAssessmentReportIntegrityRequest indicates an expected call of ValidateAssessmentReportIntegrityRequest.
func (mr *MockAuditManagerAPIMockRecorder) ValidateAssessmentReportIntegrityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAssessmentReportIntegrityRequest", reflect.TypeOf((*MockAuditManagerAPI)(nil).ValidateAssessmentReportIntegrityRequest), arg0)
}

// ValidateAssessmentReportIntegrityWithContext mocks base method.
func (m *MockAuditManagerAPI) ValidateAssessmentReportIntegrityWithContext(arg0 context.Context, arg1 *auditmanager.ValidateAssessmentReportIntegrityInput, arg2 ...request.Option) (*auditmanager.ValidateAssessmentReportIntegrityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateAssessmentReportIntegrityWithContext", varargs...)
	ret0, _ := ret[0].(*auditmanager.ValidateAssessmentReportIntegrityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAssessmentReportIntegrityWithContext indicates an expected call of ValidateAssessmentReportIntegrityWithContext.
func (mr *MockAuditManagerAPIMockRecorder) ValidateAssessmentReportIntegrityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAssessmentReportIntegrityWithContext", reflect.TypeOf((*MockAuditManagerAPI)(nil).ValidateAssessmentReportIntegrityWithContext), varargs...)
}

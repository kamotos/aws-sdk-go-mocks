// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cloudwatchevidently/cloudwatchevidentlyiface (interfaces: CloudWatchEvidentlyAPI)

// Package cloudwatchevidentlymock is a generated GoMock package.
package cloudwatchevidentlymock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	cloudwatchevidently "github.com/aws/aws-sdk-go/service/cloudwatchevidently"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudWatchEvidentlyAPI is a mock of CloudWatchEvidentlyAPI interface.
type MockCloudWatchEvidentlyAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudWatchEvidentlyAPIMockRecorder
}

// MockCloudWatchEvidentlyAPIMockRecorder is the mock recorder for MockCloudWatchEvidentlyAPI.
type MockCloudWatchEvidentlyAPIMockRecorder struct {
	mock *MockCloudWatchEvidentlyAPI
}

// NewMockCloudWatchEvidentlyAPI creates a new mock instance.
func NewMockCloudWatchEvidentlyAPI(ctrl *gomock.Controller) *MockCloudWatchEvidentlyAPI {
	mock := &MockCloudWatchEvidentlyAPI{ctrl: ctrl}
	mock.recorder = &MockCloudWatchEvidentlyAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudWatchEvidentlyAPI) EXPECT() *MockCloudWatchEvidentlyAPIMockRecorder {
	return m.recorder
}

// BatchEvaluateFeature mocks base method.
func (m *MockCloudWatchEvidentlyAPI) BatchEvaluateFeature(arg0 *cloudwatchevidently.BatchEvaluateFeatureInput) (*cloudwatchevidently.BatchEvaluateFeatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEvaluateFeature", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.BatchEvaluateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEvaluateFeature indicates an expected call of BatchEvaluateFeature.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) BatchEvaluateFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEvaluateFeature", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).BatchEvaluateFeature), arg0)
}

// BatchEvaluateFeatureRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) BatchEvaluateFeatureRequest(arg0 *cloudwatchevidently.BatchEvaluateFeatureInput) (*request.Request, *cloudwatchevidently.BatchEvaluateFeatureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchEvaluateFeatureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.BatchEvaluateFeatureOutput)
	return ret0, ret1
}

// BatchEvaluateFeatureRequest indicates an expected call of BatchEvaluateFeatureRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) BatchEvaluateFeatureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEvaluateFeatureRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).BatchEvaluateFeatureRequest), arg0)
}

// BatchEvaluateFeatureWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) BatchEvaluateFeatureWithContext(arg0 context.Context, arg1 *cloudwatchevidently.BatchEvaluateFeatureInput, arg2 ...request.Option) (*cloudwatchevidently.BatchEvaluateFeatureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchEvaluateFeatureWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.BatchEvaluateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchEvaluateFeatureWithContext indicates an expected call of BatchEvaluateFeatureWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) BatchEvaluateFeatureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchEvaluateFeatureWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).BatchEvaluateFeatureWithContext), varargs...)
}

// CreateExperiment mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateExperiment(arg0 *cloudwatchevidently.CreateExperimentInput) (*cloudwatchevidently.CreateExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExperiment", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExperiment indicates an expected call of CreateExperiment.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExperiment", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateExperiment), arg0)
}

// CreateExperimentRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateExperimentRequest(arg0 *cloudwatchevidently.CreateExperimentInput) (*request.Request, *cloudwatchevidently.CreateExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.CreateExperimentOutput)
	return ret0, ret1
}

// CreateExperimentRequest indicates an expected call of CreateExperimentRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExperimentRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateExperimentRequest), arg0)
}

// CreateExperimentWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateExperimentWithContext(arg0 context.Context, arg1 *cloudwatchevidently.CreateExperimentInput, arg2 ...request.Option) (*cloudwatchevidently.CreateExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExperimentWithContext indicates an expected call of CreateExperimentWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExperimentWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateExperimentWithContext), varargs...)
}

// CreateFeature mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateFeature(arg0 *cloudwatchevidently.CreateFeatureInput) (*cloudwatchevidently.CreateFeatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateFeature), arg0)
}

// CreateFeatureRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateFeatureRequest(arg0 *cloudwatchevidently.CreateFeatureInput) (*request.Request, *cloudwatchevidently.CreateFeatureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeatureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.CreateFeatureOutput)
	return ret0, ret1
}

// CreateFeatureRequest indicates an expected call of CreateFeatureRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateFeatureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeatureRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateFeatureRequest), arg0)
}

// CreateFeatureWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateFeatureWithContext(arg0 context.Context, arg1 *cloudwatchevidently.CreateFeatureInput, arg2 ...request.Option) (*cloudwatchevidently.CreateFeatureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFeatureWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeatureWithContext indicates an expected call of CreateFeatureWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateFeatureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeatureWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateFeatureWithContext), varargs...)
}

// CreateLaunch mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateLaunch(arg0 *cloudwatchevidently.CreateLaunchInput) (*cloudwatchevidently.CreateLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunch", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunch indicates an expected call of CreateLaunch.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunch", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateLaunch), arg0)
}

// CreateLaunchRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateLaunchRequest(arg0 *cloudwatchevidently.CreateLaunchInput) (*request.Request, *cloudwatchevidently.CreateLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.CreateLaunchOutput)
	return ret0, ret1
}

// CreateLaunchRequest indicates an expected call of CreateLaunchRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateLaunchRequest), arg0)
}

// CreateLaunchWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateLaunchWithContext(arg0 context.Context, arg1 *cloudwatchevidently.CreateLaunchInput, arg2 ...request.Option) (*cloudwatchevidently.CreateLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLaunchWithContext indicates an expected call of CreateLaunchWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLaunchWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateLaunchWithContext), varargs...)
}

// CreateProject mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateProject(arg0 *cloudwatchevidently.CreateProjectInput) (*cloudwatchevidently.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateProject), arg0)
}

// CreateProjectRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateProjectRequest(arg0 *cloudwatchevidently.CreateProjectInput) (*request.Request, *cloudwatchevidently.CreateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.CreateProjectOutput)
	return ret0, ret1
}

// CreateProjectRequest indicates an expected call of CreateProjectRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateProjectRequest), arg0)
}

// CreateProjectWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) CreateProjectWithContext(arg0 context.Context, arg1 *cloudwatchevidently.CreateProjectInput, arg2 ...request.Option) (*cloudwatchevidently.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectWithContext indicates an expected call of CreateProjectWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) CreateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).CreateProjectWithContext), varargs...)
}

// DeleteExperiment mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteExperiment(arg0 *cloudwatchevidently.DeleteExperimentInput) (*cloudwatchevidently.DeleteExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExperiment", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExperiment indicates an expected call of DeleteExperiment.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExperiment", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteExperiment), arg0)
}

// DeleteExperimentRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteExperimentRequest(arg0 *cloudwatchevidently.DeleteExperimentInput) (*request.Request, *cloudwatchevidently.DeleteExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.DeleteExperimentOutput)
	return ret0, ret1
}

// DeleteExperimentRequest indicates an expected call of DeleteExperimentRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExperimentRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteExperimentRequest), arg0)
}

// DeleteExperimentWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteExperimentWithContext(arg0 context.Context, arg1 *cloudwatchevidently.DeleteExperimentInput, arg2 ...request.Option) (*cloudwatchevidently.DeleteExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExperimentWithContext indicates an expected call of DeleteExperimentWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExperimentWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteExperimentWithContext), varargs...)
}

// DeleteFeature mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteFeature(arg0 *cloudwatchevidently.DeleteFeatureInput) (*cloudwatchevidently.DeleteFeatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeature", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeature indicates an expected call of DeleteFeature.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeature", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteFeature), arg0)
}

// DeleteFeatureRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteFeatureRequest(arg0 *cloudwatchevidently.DeleteFeatureInput) (*request.Request, *cloudwatchevidently.DeleteFeatureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeatureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.DeleteFeatureOutput)
	return ret0, ret1
}

// DeleteFeatureRequest indicates an expected call of DeleteFeatureRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteFeatureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteFeatureRequest), arg0)
}

// DeleteFeatureWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteFeatureWithContext(arg0 context.Context, arg1 *cloudwatchevidently.DeleteFeatureInput, arg2 ...request.Option) (*cloudwatchevidently.DeleteFeatureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFeatureWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeatureWithContext indicates an expected call of DeleteFeatureWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteFeatureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteFeatureWithContext), varargs...)
}

// DeleteLaunch mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteLaunch(arg0 *cloudwatchevidently.DeleteLaunchInput) (*cloudwatchevidently.DeleteLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunch", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunch indicates an expected call of DeleteLaunch.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunch", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteLaunch), arg0)
}

// DeleteLaunchRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteLaunchRequest(arg0 *cloudwatchevidently.DeleteLaunchInput) (*request.Request, *cloudwatchevidently.DeleteLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.DeleteLaunchOutput)
	return ret0, ret1
}

// DeleteLaunchRequest indicates an expected call of DeleteLaunchRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteLaunchRequest), arg0)
}

// DeleteLaunchWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteLaunchWithContext(arg0 context.Context, arg1 *cloudwatchevidently.DeleteLaunchInput, arg2 ...request.Option) (*cloudwatchevidently.DeleteLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLaunchWithContext indicates an expected call of DeleteLaunchWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLaunchWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteLaunchWithContext), varargs...)
}

// DeleteProject mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteProject(arg0 *cloudwatchevidently.DeleteProjectInput) (*cloudwatchevidently.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteProject), arg0)
}

// DeleteProjectRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteProjectRequest(arg0 *cloudwatchevidently.DeleteProjectInput) (*request.Request, *cloudwatchevidently.DeleteProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.DeleteProjectOutput)
	return ret0, ret1
}

// DeleteProjectRequest indicates an expected call of DeleteProjectRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteProjectRequest), arg0)
}

// DeleteProjectWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) DeleteProjectWithContext(arg0 context.Context, arg1 *cloudwatchevidently.DeleteProjectInput, arg2 ...request.Option) (*cloudwatchevidently.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectWithContext indicates an expected call of DeleteProjectWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) DeleteProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).DeleteProjectWithContext), varargs...)
}

// EvaluateFeature mocks base method.
func (m *MockCloudWatchEvidentlyAPI) EvaluateFeature(arg0 *cloudwatchevidently.EvaluateFeatureInput) (*cloudwatchevidently.EvaluateFeatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateFeature", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.EvaluateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateFeature indicates an expected call of EvaluateFeature.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) EvaluateFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateFeature", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).EvaluateFeature), arg0)
}

// EvaluateFeatureRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) EvaluateFeatureRequest(arg0 *cloudwatchevidently.EvaluateFeatureInput) (*request.Request, *cloudwatchevidently.EvaluateFeatureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateFeatureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.EvaluateFeatureOutput)
	return ret0, ret1
}

// EvaluateFeatureRequest indicates an expected call of EvaluateFeatureRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) EvaluateFeatureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateFeatureRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).EvaluateFeatureRequest), arg0)
}

// EvaluateFeatureWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) EvaluateFeatureWithContext(arg0 context.Context, arg1 *cloudwatchevidently.EvaluateFeatureInput, arg2 ...request.Option) (*cloudwatchevidently.EvaluateFeatureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvaluateFeatureWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.EvaluateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateFeatureWithContext indicates an expected call of EvaluateFeatureWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) EvaluateFeatureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateFeatureWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).EvaluateFeatureWithContext), varargs...)
}

// GetExperiment mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetExperiment(arg0 *cloudwatchevidently.GetExperimentInput) (*cloudwatchevidently.GetExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperiment", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.GetExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperiment indicates an expected call of GetExperiment.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperiment", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetExperiment), arg0)
}

// GetExperimentRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetExperimentRequest(arg0 *cloudwatchevidently.GetExperimentInput) (*request.Request, *cloudwatchevidently.GetExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.GetExperimentOutput)
	return ret0, ret1
}

// GetExperimentRequest indicates an expected call of GetExperimentRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetExperimentRequest), arg0)
}

// GetExperimentResults mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetExperimentResults(arg0 *cloudwatchevidently.GetExperimentResultsInput) (*cloudwatchevidently.GetExperimentResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentResults", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.GetExperimentResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentResults indicates an expected call of GetExperimentResults.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetExperimentResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentResults", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetExperimentResults), arg0)
}

// GetExperimentResultsRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetExperimentResultsRequest(arg0 *cloudwatchevidently.GetExperimentResultsInput) (*request.Request, *cloudwatchevidently.GetExperimentResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExperimentResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.GetExperimentResultsOutput)
	return ret0, ret1
}

// GetExperimentResultsRequest indicates an expected call of GetExperimentResultsRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetExperimentResultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentResultsRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetExperimentResultsRequest), arg0)
}

// GetExperimentResultsWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetExperimentResultsWithContext(arg0 context.Context, arg1 *cloudwatchevidently.GetExperimentResultsInput, arg2 ...request.Option) (*cloudwatchevidently.GetExperimentResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperimentResultsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.GetExperimentResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentResultsWithContext indicates an expected call of GetExperimentResultsWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetExperimentResultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentResultsWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetExperimentResultsWithContext), varargs...)
}

// GetExperimentWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetExperimentWithContext(arg0 context.Context, arg1 *cloudwatchevidently.GetExperimentInput, arg2 ...request.Option) (*cloudwatchevidently.GetExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.GetExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentWithContext indicates an expected call of GetExperimentWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetExperimentWithContext), varargs...)
}

// GetFeature mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetFeature(arg0 *cloudwatchevidently.GetFeatureInput) (*cloudwatchevidently.GetFeatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeature", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.GetFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeature indicates an expected call of GetFeature.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeature", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetFeature), arg0)
}

// GetFeatureRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetFeatureRequest(arg0 *cloudwatchevidently.GetFeatureInput) (*request.Request, *cloudwatchevidently.GetFeatureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.GetFeatureOutput)
	return ret0, ret1
}

// GetFeatureRequest indicates an expected call of GetFeatureRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetFeatureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetFeatureRequest), arg0)
}

// GetFeatureWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetFeatureWithContext(arg0 context.Context, arg1 *cloudwatchevidently.GetFeatureInput, arg2 ...request.Option) (*cloudwatchevidently.GetFeatureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeatureWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.GetFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureWithContext indicates an expected call of GetFeatureWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetFeatureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetFeatureWithContext), varargs...)
}

// GetLaunch mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetLaunch(arg0 *cloudwatchevidently.GetLaunchInput) (*cloudwatchevidently.GetLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunch", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.GetLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunch indicates an expected call of GetLaunch.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunch", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetLaunch), arg0)
}

// GetLaunchRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetLaunchRequest(arg0 *cloudwatchevidently.GetLaunchInput) (*request.Request, *cloudwatchevidently.GetLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.GetLaunchOutput)
	return ret0, ret1
}

// GetLaunchRequest indicates an expected call of GetLaunchRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetLaunchRequest), arg0)
}

// GetLaunchWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetLaunchWithContext(arg0 context.Context, arg1 *cloudwatchevidently.GetLaunchInput, arg2 ...request.Option) (*cloudwatchevidently.GetLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.GetLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchWithContext indicates an expected call of GetLaunchWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetLaunchWithContext), varargs...)
}

// GetProject mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetProject(arg0 *cloudwatchevidently.GetProjectInput) (*cloudwatchevidently.GetProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.GetProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetProject), arg0)
}

// GetProjectRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetProjectRequest(arg0 *cloudwatchevidently.GetProjectInput) (*request.Request, *cloudwatchevidently.GetProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.GetProjectOutput)
	return ret0, ret1
}

// GetProjectRequest indicates an expected call of GetProjectRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetProjectRequest), arg0)
}

// GetProjectWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) GetProjectWithContext(arg0 context.Context, arg1 *cloudwatchevidently.GetProjectInput, arg2 ...request.Option) (*cloudwatchevidently.GetProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.GetProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectWithContext indicates an expected call of GetProjectWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) GetProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).GetProjectWithContext), varargs...)
}

// ListExperiments mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListExperiments(arg0 *cloudwatchevidently.ListExperimentsInput) (*cloudwatchevidently.ListExperimentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperiments", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.ListExperimentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperiments indicates an expected call of ListExperiments.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListExperiments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperiments", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListExperiments), arg0)
}

// ListExperimentsPages mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListExperimentsPages(arg0 *cloudwatchevidently.ListExperimentsInput, arg1 func(*cloudwatchevidently.ListExperimentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentsPages indicates an expected call of ListExperimentsPages.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListExperimentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsPages", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListExperimentsPages), arg0, arg1)
}

// ListExperimentsPagesWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListExperimentsPagesWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListExperimentsInput, arg2 func(*cloudwatchevidently.ListExperimentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExperimentsPagesWithContext indicates an expected call of ListExperimentsPagesWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListExperimentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsPagesWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListExperimentsPagesWithContext), varargs...)
}

// ListExperimentsRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListExperimentsRequest(arg0 *cloudwatchevidently.ListExperimentsInput) (*request.Request, *cloudwatchevidently.ListExperimentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExperimentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.ListExperimentsOutput)
	return ret0, ret1
}

// ListExperimentsRequest indicates an expected call of ListExperimentsRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListExperimentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListExperimentsRequest), arg0)
}

// ListExperimentsWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListExperimentsWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListExperimentsInput, arg2 ...request.Option) (*cloudwatchevidently.ListExperimentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExperimentsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.ListExperimentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExperimentsWithContext indicates an expected call of ListExperimentsWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListExperimentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExperimentsWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListExperimentsWithContext), varargs...)
}

// ListFeatures mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListFeatures(arg0 *cloudwatchevidently.ListFeaturesInput) (*cloudwatchevidently.ListFeaturesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatures", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.ListFeaturesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeatures indicates an expected call of ListFeatures.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListFeatures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListFeatures), arg0)
}

// ListFeaturesPages mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListFeaturesPages(arg0 *cloudwatchevidently.ListFeaturesInput, arg1 func(*cloudwatchevidently.ListFeaturesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeaturesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFeaturesPages indicates an expected call of ListFeaturesPages.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListFeaturesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturesPages", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListFeaturesPages), arg0, arg1)
}

// ListFeaturesPagesWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListFeaturesPagesWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListFeaturesInput, arg2 func(*cloudwatchevidently.ListFeaturesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeaturesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFeaturesPagesWithContext indicates an expected call of ListFeaturesPagesWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListFeaturesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturesPagesWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListFeaturesPagesWithContext), varargs...)
}

// ListFeaturesRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListFeaturesRequest(arg0 *cloudwatchevidently.ListFeaturesInput) (*request.Request, *cloudwatchevidently.ListFeaturesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeaturesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.ListFeaturesOutput)
	return ret0, ret1
}

// ListFeaturesRequest indicates an expected call of ListFeaturesRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListFeaturesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturesRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListFeaturesRequest), arg0)
}

// ListFeaturesWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListFeaturesWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListFeaturesInput, arg2 ...request.Option) (*cloudwatchevidently.ListFeaturesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeaturesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.ListFeaturesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeaturesWithContext indicates an expected call of ListFeaturesWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListFeaturesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturesWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListFeaturesWithContext), varargs...)
}

// ListLaunches mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListLaunches(arg0 *cloudwatchevidently.ListLaunchesInput) (*cloudwatchevidently.ListLaunchesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunches", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.ListLaunchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunches indicates an expected call of ListLaunches.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListLaunches(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunches", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListLaunches), arg0)
}

// ListLaunchesPages mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListLaunchesPages(arg0 *cloudwatchevidently.ListLaunchesInput, arg1 func(*cloudwatchevidently.ListLaunchesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchesPages indicates an expected call of ListLaunchesPages.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListLaunchesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchesPages", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListLaunchesPages), arg0, arg1)
}

// ListLaunchesPagesWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListLaunchesPagesWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListLaunchesInput, arg2 func(*cloudwatchevidently.ListLaunchesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLaunchesPagesWithContext indicates an expected call of ListLaunchesPagesWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListLaunchesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchesPagesWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListLaunchesPagesWithContext), varargs...)
}

// ListLaunchesRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListLaunchesRequest(arg0 *cloudwatchevidently.ListLaunchesInput) (*request.Request, *cloudwatchevidently.ListLaunchesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLaunchesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.ListLaunchesOutput)
	return ret0, ret1
}

// ListLaunchesRequest indicates an expected call of ListLaunchesRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListLaunchesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchesRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListLaunchesRequest), arg0)
}

// ListLaunchesWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListLaunchesWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListLaunchesInput, arg2 ...request.Option) (*cloudwatchevidently.ListLaunchesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLaunchesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.ListLaunchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLaunchesWithContext indicates an expected call of ListLaunchesWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListLaunchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLaunchesWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListLaunchesWithContext), varargs...)
}

// ListProjects mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListProjects(arg0 *cloudwatchevidently.ListProjectsInput) (*cloudwatchevidently.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListProjects), arg0)
}

// ListProjectsPages mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListProjectsPages(arg0 *cloudwatchevidently.ListProjectsInput, arg1 func(*cloudwatchevidently.ListProjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPages indicates an expected call of ListProjectsPages.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListProjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPages", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListProjectsPages), arg0, arg1)
}

// ListProjectsPagesWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListProjectsPagesWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListProjectsInput, arg2 func(*cloudwatchevidently.ListProjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjectsPagesWithContext indicates an expected call of ListProjectsPagesWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListProjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsPagesWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListProjectsPagesWithContext), varargs...)
}

// ListProjectsRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListProjectsRequest(arg0 *cloudwatchevidently.ListProjectsInput) (*request.Request, *cloudwatchevidently.ListProjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.ListProjectsOutput)
	return ret0, ret1
}

// ListProjectsRequest indicates an expected call of ListProjectsRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListProjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListProjectsRequest), arg0)
}

// ListProjectsWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListProjectsWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListProjectsInput, arg2 ...request.Option) (*cloudwatchevidently.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectsWithContext indicates an expected call of ListProjectsWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectsWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListProjectsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListTagsForResource(arg0 *cloudwatchevidently.ListTagsForResourceInput) (*cloudwatchevidently.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListTagsForResourceRequest(arg0 *cloudwatchevidently.ListTagsForResourceInput) (*request.Request, *cloudwatchevidently.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *cloudwatchevidently.ListTagsForResourceInput, arg2 ...request.Option) (*cloudwatchevidently.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutProjectEvents mocks base method.
func (m *MockCloudWatchEvidentlyAPI) PutProjectEvents(arg0 *cloudwatchevidently.PutProjectEventsInput) (*cloudwatchevidently.PutProjectEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProjectEvents", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.PutProjectEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutProjectEvents indicates an expected call of PutProjectEvents.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) PutProjectEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProjectEvents", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).PutProjectEvents), arg0)
}

// PutProjectEventsRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) PutProjectEventsRequest(arg0 *cloudwatchevidently.PutProjectEventsInput) (*request.Request, *cloudwatchevidently.PutProjectEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProjectEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.PutProjectEventsOutput)
	return ret0, ret1
}

// PutProjectEventsRequest indicates an expected call of PutProjectEventsRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) PutProjectEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProjectEventsRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).PutProjectEventsRequest), arg0)
}

// PutProjectEventsWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) PutProjectEventsWithContext(arg0 context.Context, arg1 *cloudwatchevidently.PutProjectEventsInput, arg2 ...request.Option) (*cloudwatchevidently.PutProjectEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutProjectEventsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.PutProjectEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutProjectEventsWithContext indicates an expected call of PutProjectEventsWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) PutProjectEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProjectEventsWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).PutProjectEventsWithContext), varargs...)
}

// StartExperiment mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StartExperiment(arg0 *cloudwatchevidently.StartExperimentInput) (*cloudwatchevidently.StartExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExperiment", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.StartExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExperiment indicates an expected call of StartExperiment.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StartExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExperiment", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StartExperiment), arg0)
}

// StartExperimentRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StartExperimentRequest(arg0 *cloudwatchevidently.StartExperimentInput) (*request.Request, *cloudwatchevidently.StartExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.StartExperimentOutput)
	return ret0, ret1
}

// StartExperimentRequest indicates an expected call of StartExperimentRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StartExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExperimentRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StartExperimentRequest), arg0)
}

// StartExperimentWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StartExperimentWithContext(arg0 context.Context, arg1 *cloudwatchevidently.StartExperimentInput, arg2 ...request.Option) (*cloudwatchevidently.StartExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.StartExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExperimentWithContext indicates an expected call of StartExperimentWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StartExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExperimentWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StartExperimentWithContext), varargs...)
}

// StartLaunch mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StartLaunch(arg0 *cloudwatchevidently.StartLaunchInput) (*cloudwatchevidently.StartLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLaunch", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.StartLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLaunch indicates an expected call of StartLaunch.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StartLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLaunch", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StartLaunch), arg0)
}

// StartLaunchRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StartLaunchRequest(arg0 *cloudwatchevidently.StartLaunchInput) (*request.Request, *cloudwatchevidently.StartLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.StartLaunchOutput)
	return ret0, ret1
}

// StartLaunchRequest indicates an expected call of StartLaunchRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StartLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLaunchRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StartLaunchRequest), arg0)
}

// StartLaunchWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StartLaunchWithContext(arg0 context.Context, arg1 *cloudwatchevidently.StartLaunchInput, arg2 ...request.Option) (*cloudwatchevidently.StartLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.StartLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLaunchWithContext indicates an expected call of StartLaunchWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StartLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLaunchWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StartLaunchWithContext), varargs...)
}

// StopExperiment mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StopExperiment(arg0 *cloudwatchevidently.StopExperimentInput) (*cloudwatchevidently.StopExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExperiment", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.StopExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExperiment indicates an expected call of StopExperiment.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StopExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExperiment", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StopExperiment), arg0)
}

// StopExperimentRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StopExperimentRequest(arg0 *cloudwatchevidently.StopExperimentInput) (*request.Request, *cloudwatchevidently.StopExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.StopExperimentOutput)
	return ret0, ret1
}

// StopExperimentRequest indicates an expected call of StopExperimentRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StopExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExperimentRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StopExperimentRequest), arg0)
}

// StopExperimentWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StopExperimentWithContext(arg0 context.Context, arg1 *cloudwatchevidently.StopExperimentInput, arg2 ...request.Option) (*cloudwatchevidently.StopExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.StopExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExperimentWithContext indicates an expected call of StopExperimentWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StopExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExperimentWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StopExperimentWithContext), varargs...)
}

// StopLaunch mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StopLaunch(arg0 *cloudwatchevidently.StopLaunchInput) (*cloudwatchevidently.StopLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopLaunch", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.StopLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopLaunch indicates an expected call of StopLaunch.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StopLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLaunch", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StopLaunch), arg0)
}

// StopLaunchRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StopLaunchRequest(arg0 *cloudwatchevidently.StopLaunchInput) (*request.Request, *cloudwatchevidently.StopLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.StopLaunchOutput)
	return ret0, ret1
}

// StopLaunchRequest indicates an expected call of StopLaunchRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StopLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLaunchRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StopLaunchRequest), arg0)
}

// StopLaunchWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) StopLaunchWithContext(arg0 context.Context, arg1 *cloudwatchevidently.StopLaunchInput, arg2 ...request.Option) (*cloudwatchevidently.StopLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.StopLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopLaunchWithContext indicates an expected call of StopLaunchWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) StopLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLaunchWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).StopLaunchWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockCloudWatchEvidentlyAPI) TagResource(arg0 *cloudwatchevidently.TagResourceInput) (*cloudwatchevidently.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) TagResourceRequest(arg0 *cloudwatchevidently.TagResourceInput) (*request.Request, *cloudwatchevidently.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) TagResourceWithContext(arg0 context.Context, arg1 *cloudwatchevidently.TagResourceInput, arg2 ...request.Option) (*cloudwatchevidently.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UntagResource(arg0 *cloudwatchevidently.UntagResourceInput) (*cloudwatchevidently.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UntagResourceRequest(arg0 *cloudwatchevidently.UntagResourceInput) (*request.Request, *cloudwatchevidently.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UntagResourceWithContext(arg0 context.Context, arg1 *cloudwatchevidently.UntagResourceInput, arg2 ...request.Option) (*cloudwatchevidently.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateExperiment mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateExperiment(arg0 *cloudwatchevidently.UpdateExperimentInput) (*cloudwatchevidently.UpdateExperimentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExperiment", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExperiment indicates an expected call of UpdateExperiment.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateExperiment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperiment", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateExperiment), arg0)
}

// UpdateExperimentRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateExperimentRequest(arg0 *cloudwatchevidently.UpdateExperimentInput) (*request.Request, *cloudwatchevidently.UpdateExperimentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExperimentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.UpdateExperimentOutput)
	return ret0, ret1
}

// UpdateExperimentRequest indicates an expected call of UpdateExperimentRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateExperimentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperimentRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateExperimentRequest), arg0)
}

// UpdateExperimentWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateExperimentWithContext(arg0 context.Context, arg1 *cloudwatchevidently.UpdateExperimentInput, arg2 ...request.Option) (*cloudwatchevidently.UpdateExperimentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExperimentWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateExperimentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExperimentWithContext indicates an expected call of UpdateExperimentWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateExperimentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExperimentWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateExperimentWithContext), varargs...)
}

// UpdateFeature mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateFeature(arg0 *cloudwatchevidently.UpdateFeatureInput) (*cloudwatchevidently.UpdateFeatureOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeature", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeature indicates an expected call of UpdateFeature.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeature", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateFeature), arg0)
}

// UpdateFeatureRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateFeatureRequest(arg0 *cloudwatchevidently.UpdateFeatureInput) (*request.Request, *cloudwatchevidently.UpdateFeatureOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeatureRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.UpdateFeatureOutput)
	return ret0, ret1
}

// UpdateFeatureRequest indicates an expected call of UpdateFeatureRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateFeatureRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeatureRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateFeatureRequest), arg0)
}

// UpdateFeatureWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateFeatureWithContext(arg0 context.Context, arg1 *cloudwatchevidently.UpdateFeatureInput, arg2 ...request.Option) (*cloudwatchevidently.UpdateFeatureOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFeatureWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateFeatureOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeatureWithContext indicates an expected call of UpdateFeatureWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateFeatureWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeatureWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateFeatureWithContext), varargs...)
}

// UpdateLaunch mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateLaunch(arg0 *cloudwatchevidently.UpdateLaunchInput) (*cloudwatchevidently.UpdateLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunch", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunch indicates an expected call of UpdateLaunch.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunch", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateLaunch), arg0)
}

// UpdateLaunchRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateLaunchRequest(arg0 *cloudwatchevidently.UpdateLaunchInput) (*request.Request, *cloudwatchevidently.UpdateLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.UpdateLaunchOutput)
	return ret0, ret1
}

// UpdateLaunchRequest indicates an expected call of UpdateLaunchRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateLaunchRequest), arg0)
}

// UpdateLaunchWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateLaunchWithContext(arg0 context.Context, arg1 *cloudwatchevidently.UpdateLaunchInput, arg2 ...request.Option) (*cloudwatchevidently.UpdateLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchWithContext indicates an expected call of UpdateLaunchWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateLaunchWithContext), varargs...)
}

// UpdateProject mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateProject(arg0 *cloudwatchevidently.UpdateProjectInput) (*cloudwatchevidently.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateProject), arg0)
}

// UpdateProjectDataDelivery mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateProjectDataDelivery(arg0 *cloudwatchevidently.UpdateProjectDataDeliveryInput) (*cloudwatchevidently.UpdateProjectDataDeliveryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectDataDelivery", arg0)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateProjectDataDeliveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectDataDelivery indicates an expected call of UpdateProjectDataDelivery.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateProjectDataDelivery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectDataDelivery", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateProjectDataDelivery), arg0)
}

// UpdateProjectDataDeliveryRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateProjectDataDeliveryRequest(arg0 *cloudwatchevidently.UpdateProjectDataDeliveryInput) (*request.Request, *cloudwatchevidently.UpdateProjectDataDeliveryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectDataDeliveryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.UpdateProjectDataDeliveryOutput)
	return ret0, ret1
}

// UpdateProjectDataDeliveryRequest indicates an expected call of UpdateProjectDataDeliveryRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateProjectDataDeliveryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectDataDeliveryRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateProjectDataDeliveryRequest), arg0)
}

// UpdateProjectDataDeliveryWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateProjectDataDeliveryWithContext(arg0 context.Context, arg1 *cloudwatchevidently.UpdateProjectDataDeliveryInput, arg2 ...request.Option) (*cloudwatchevidently.UpdateProjectDataDeliveryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectDataDeliveryWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateProjectDataDeliveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectDataDeliveryWithContext indicates an expected call of UpdateProjectDataDeliveryWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateProjectDataDeliveryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectDataDeliveryWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateProjectDataDeliveryWithContext), varargs...)
}

// UpdateProjectRequest mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateProjectRequest(arg0 *cloudwatchevidently.UpdateProjectInput) (*request.Request, *cloudwatchevidently.UpdateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevidently.UpdateProjectOutput)
	return ret0, ret1
}

// UpdateProjectRequest indicates an expected call of UpdateProjectRequest.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectRequest", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateProjectRequest), arg0)
}

// UpdateProjectWithContext mocks base method.
func (m *MockCloudWatchEvidentlyAPI) UpdateProjectWithContext(arg0 context.Context, arg1 *cloudwatchevidently.UpdateProjectInput, arg2 ...request.Option) (*cloudwatchevidently.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevidently.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectWithContext indicates an expected call of UpdateProjectWithContext.
func (mr *MockCloudWatchEvidentlyAPIMockRecorder) UpdateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectWithContext", reflect.TypeOf((*MockCloudWatchEvidentlyAPI)(nil).UpdateProjectWithContext), varargs...)
}

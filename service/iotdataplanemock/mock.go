// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotdataplane/iotdataplaneiface (interfaces: IoTDataPlaneAPI)

// Package iotdataplanemock is a generated GoMock package.
package iotdataplanemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	iotdataplane "github.com/aws/aws-sdk-go/service/iotdataplane"
	gomock "github.com/golang/mock/gomock"
)

// MockIoTDataPlaneAPI is a mock of IoTDataPlaneAPI interface.
type MockIoTDataPlaneAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTDataPlaneAPIMockRecorder
}

// MockIoTDataPlaneAPIMockRecorder is the mock recorder for MockIoTDataPlaneAPI.
type MockIoTDataPlaneAPIMockRecorder struct {
	mock *MockIoTDataPlaneAPI
}

// NewMockIoTDataPlaneAPI creates a new mock instance.
func NewMockIoTDataPlaneAPI(ctrl *gomock.Controller) *MockIoTDataPlaneAPI {
	mock := &MockIoTDataPlaneAPI{ctrl: ctrl}
	mock.recorder = &MockIoTDataPlaneAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoTDataPlaneAPI) EXPECT() *MockIoTDataPlaneAPIMockRecorder {
	return m.recorder
}

// DeleteThingShadow mocks base method.
func (m *MockIoTDataPlaneAPI) DeleteThingShadow(arg0 *iotdataplane.DeleteThingShadowInput) (*iotdataplane.DeleteThingShadowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThingShadow", arg0)
	ret0, _ := ret[0].(*iotdataplane.DeleteThingShadowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThingShadow indicates an expected call of DeleteThingShadow.
func (mr *MockIoTDataPlaneAPIMockRecorder) DeleteThingShadow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingShadow", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).DeleteThingShadow), arg0)
}

// DeleteThingShadowRequest mocks base method.
func (m *MockIoTDataPlaneAPI) DeleteThingShadowRequest(arg0 *iotdataplane.DeleteThingShadowInput) (*request.Request, *iotdataplane.DeleteThingShadowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThingShadowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdataplane.DeleteThingShadowOutput)
	return ret0, ret1
}

// DeleteThingShadowRequest indicates an expected call of DeleteThingShadowRequest.
func (mr *MockIoTDataPlaneAPIMockRecorder) DeleteThingShadowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingShadowRequest", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).DeleteThingShadowRequest), arg0)
}

// DeleteThingShadowWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) DeleteThingShadowWithContext(arg0 context.Context, arg1 *iotdataplane.DeleteThingShadowInput, arg2 ...request.Option) (*iotdataplane.DeleteThingShadowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteThingShadowWithContext", varargs...)
	ret0, _ := ret[0].(*iotdataplane.DeleteThingShadowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteThingShadowWithContext indicates an expected call of DeleteThingShadowWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) DeleteThingShadowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThingShadowWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).DeleteThingShadowWithContext), varargs...)
}

// GetRetainedMessage mocks base method.
func (m *MockIoTDataPlaneAPI) GetRetainedMessage(arg0 *iotdataplane.GetRetainedMessageInput) (*iotdataplane.GetRetainedMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetainedMessage", arg0)
	ret0, _ := ret[0].(*iotdataplane.GetRetainedMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetainedMessage indicates an expected call of GetRetainedMessage.
func (mr *MockIoTDataPlaneAPIMockRecorder) GetRetainedMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetainedMessage", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).GetRetainedMessage), arg0)
}

// GetRetainedMessageRequest mocks base method.
func (m *MockIoTDataPlaneAPI) GetRetainedMessageRequest(arg0 *iotdataplane.GetRetainedMessageInput) (*request.Request, *iotdataplane.GetRetainedMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetainedMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdataplane.GetRetainedMessageOutput)
	return ret0, ret1
}

// GetRetainedMessageRequest indicates an expected call of GetRetainedMessageRequest.
func (mr *MockIoTDataPlaneAPIMockRecorder) GetRetainedMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetainedMessageRequest", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).GetRetainedMessageRequest), arg0)
}

// GetRetainedMessageWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) GetRetainedMessageWithContext(arg0 context.Context, arg1 *iotdataplane.GetRetainedMessageInput, arg2 ...request.Option) (*iotdataplane.GetRetainedMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRetainedMessageWithContext", varargs...)
	ret0, _ := ret[0].(*iotdataplane.GetRetainedMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetainedMessageWithContext indicates an expected call of GetRetainedMessageWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) GetRetainedMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetainedMessageWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).GetRetainedMessageWithContext), varargs...)
}

// GetThingShadow mocks base method.
func (m *MockIoTDataPlaneAPI) GetThingShadow(arg0 *iotdataplane.GetThingShadowInput) (*iotdataplane.GetThingShadowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThingShadow", arg0)
	ret0, _ := ret[0].(*iotdataplane.GetThingShadowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThingShadow indicates an expected call of GetThingShadow.
func (mr *MockIoTDataPlaneAPIMockRecorder) GetThingShadow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThingShadow", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).GetThingShadow), arg0)
}

// GetThingShadowRequest mocks base method.
func (m *MockIoTDataPlaneAPI) GetThingShadowRequest(arg0 *iotdataplane.GetThingShadowInput) (*request.Request, *iotdataplane.GetThingShadowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThingShadowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdataplane.GetThingShadowOutput)
	return ret0, ret1
}

// GetThingShadowRequest indicates an expected call of GetThingShadowRequest.
func (mr *MockIoTDataPlaneAPIMockRecorder) GetThingShadowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThingShadowRequest", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).GetThingShadowRequest), arg0)
}

// GetThingShadowWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) GetThingShadowWithContext(arg0 context.Context, arg1 *iotdataplane.GetThingShadowInput, arg2 ...request.Option) (*iotdataplane.GetThingShadowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetThingShadowWithContext", varargs...)
	ret0, _ := ret[0].(*iotdataplane.GetThingShadowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThingShadowWithContext indicates an expected call of GetThingShadowWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) GetThingShadowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThingShadowWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).GetThingShadowWithContext), varargs...)
}

// ListNamedShadowsForThing mocks base method.
func (m *MockIoTDataPlaneAPI) ListNamedShadowsForThing(arg0 *iotdataplane.ListNamedShadowsForThingInput) (*iotdataplane.ListNamedShadowsForThingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamedShadowsForThing", arg0)
	ret0, _ := ret[0].(*iotdataplane.ListNamedShadowsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamedShadowsForThing indicates an expected call of ListNamedShadowsForThing.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListNamedShadowsForThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamedShadowsForThing", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListNamedShadowsForThing), arg0)
}

// ListNamedShadowsForThingRequest mocks base method.
func (m *MockIoTDataPlaneAPI) ListNamedShadowsForThingRequest(arg0 *iotdataplane.ListNamedShadowsForThingInput) (*request.Request, *iotdataplane.ListNamedShadowsForThingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamedShadowsForThingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdataplane.ListNamedShadowsForThingOutput)
	return ret0, ret1
}

// ListNamedShadowsForThingRequest indicates an expected call of ListNamedShadowsForThingRequest.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListNamedShadowsForThingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamedShadowsForThingRequest", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListNamedShadowsForThingRequest), arg0)
}

// ListNamedShadowsForThingWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) ListNamedShadowsForThingWithContext(arg0 context.Context, arg1 *iotdataplane.ListNamedShadowsForThingInput, arg2 ...request.Option) (*iotdataplane.ListNamedShadowsForThingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamedShadowsForThingWithContext", varargs...)
	ret0, _ := ret[0].(*iotdataplane.ListNamedShadowsForThingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamedShadowsForThingWithContext indicates an expected call of ListNamedShadowsForThingWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListNamedShadowsForThingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamedShadowsForThingWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListNamedShadowsForThingWithContext), varargs...)
}

// ListRetainedMessages mocks base method.
func (m *MockIoTDataPlaneAPI) ListRetainedMessages(arg0 *iotdataplane.ListRetainedMessagesInput) (*iotdataplane.ListRetainedMessagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRetainedMessages", arg0)
	ret0, _ := ret[0].(*iotdataplane.ListRetainedMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRetainedMessages indicates an expected call of ListRetainedMessages.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListRetainedMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetainedMessages", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListRetainedMessages), arg0)
}

// ListRetainedMessagesPages mocks base method.
func (m *MockIoTDataPlaneAPI) ListRetainedMessagesPages(arg0 *iotdataplane.ListRetainedMessagesInput, arg1 func(*iotdataplane.ListRetainedMessagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRetainedMessagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRetainedMessagesPages indicates an expected call of ListRetainedMessagesPages.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListRetainedMessagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetainedMessagesPages", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListRetainedMessagesPages), arg0, arg1)
}

// ListRetainedMessagesPagesWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) ListRetainedMessagesPagesWithContext(arg0 context.Context, arg1 *iotdataplane.ListRetainedMessagesInput, arg2 func(*iotdataplane.ListRetainedMessagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRetainedMessagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRetainedMessagesPagesWithContext indicates an expected call of ListRetainedMessagesPagesWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListRetainedMessagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetainedMessagesPagesWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListRetainedMessagesPagesWithContext), varargs...)
}

// ListRetainedMessagesRequest mocks base method.
func (m *MockIoTDataPlaneAPI) ListRetainedMessagesRequest(arg0 *iotdataplane.ListRetainedMessagesInput) (*request.Request, *iotdataplane.ListRetainedMessagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRetainedMessagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdataplane.ListRetainedMessagesOutput)
	return ret0, ret1
}

// ListRetainedMessagesRequest indicates an expected call of ListRetainedMessagesRequest.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListRetainedMessagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetainedMessagesRequest", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListRetainedMessagesRequest), arg0)
}

// ListRetainedMessagesWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) ListRetainedMessagesWithContext(arg0 context.Context, arg1 *iotdataplane.ListRetainedMessagesInput, arg2 ...request.Option) (*iotdataplane.ListRetainedMessagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRetainedMessagesWithContext", varargs...)
	ret0, _ := ret[0].(*iotdataplane.ListRetainedMessagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRetainedMessagesWithContext indicates an expected call of ListRetainedMessagesWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) ListRetainedMessagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetainedMessagesWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).ListRetainedMessagesWithContext), varargs...)
}

// Publish mocks base method.
func (m *MockIoTDataPlaneAPI) Publish(arg0 *iotdataplane.PublishInput) (*iotdataplane.PublishOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(*iotdataplane.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockIoTDataPlaneAPIMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).Publish), arg0)
}

// PublishRequest mocks base method.
func (m *MockIoTDataPlaneAPI) PublishRequest(arg0 *iotdataplane.PublishInput) (*request.Request, *iotdataplane.PublishOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdataplane.PublishOutput)
	return ret0, ret1
}

// PublishRequest indicates an expected call of PublishRequest.
func (mr *MockIoTDataPlaneAPIMockRecorder) PublishRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRequest", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).PublishRequest), arg0)
}

// PublishWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) PublishWithContext(arg0 context.Context, arg1 *iotdataplane.PublishInput, arg2 ...request.Option) (*iotdataplane.PublishOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithContext", varargs...)
	ret0, _ := ret[0].(*iotdataplane.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) PublishWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).PublishWithContext), varargs...)
}

// UpdateThingShadow mocks base method.
func (m *MockIoTDataPlaneAPI) UpdateThingShadow(arg0 *iotdataplane.UpdateThingShadowInput) (*iotdataplane.UpdateThingShadowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThingShadow", arg0)
	ret0, _ := ret[0].(*iotdataplane.UpdateThingShadowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThingShadow indicates an expected call of UpdateThingShadow.
func (mr *MockIoTDataPlaneAPIMockRecorder) UpdateThingShadow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingShadow", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).UpdateThingShadow), arg0)
}

// UpdateThingShadowRequest mocks base method.
func (m *MockIoTDataPlaneAPI) UpdateThingShadowRequest(arg0 *iotdataplane.UpdateThingShadowInput) (*request.Request, *iotdataplane.UpdateThingShadowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThingShadowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdataplane.UpdateThingShadowOutput)
	return ret0, ret1
}

// UpdateThingShadowRequest indicates an expected call of UpdateThingShadowRequest.
func (mr *MockIoTDataPlaneAPIMockRecorder) UpdateThingShadowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingShadowRequest", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).UpdateThingShadowRequest), arg0)
}

// UpdateThingShadowWithContext mocks base method.
func (m *MockIoTDataPlaneAPI) UpdateThingShadowWithContext(arg0 context.Context, arg1 *iotdataplane.UpdateThingShadowInput, arg2 ...request.Option) (*iotdataplane.UpdateThingShadowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateThingShadowWithContext", varargs...)
	ret0, _ := ret[0].(*iotdataplane.UpdateThingShadowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateThingShadowWithContext indicates an expected call of UpdateThingShadowWithContext.
func (mr *MockIoTDataPlaneAPIMockRecorder) UpdateThingShadowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThingShadowWithContext", reflect.TypeOf((*MockIoTDataPlaneAPI)(nil).UpdateThingShadowWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cloudwatchevents/cloudwatcheventsiface (interfaces: CloudWatchEventsAPI)

// Package cloudwatcheventsmock is a generated GoMock package.
package cloudwatcheventsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	cloudwatchevents "github.com/aws/aws-sdk-go/service/cloudwatchevents"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudWatchEventsAPI is a mock of CloudWatchEventsAPI interface
type MockCloudWatchEventsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudWatchEventsAPIMockRecorder
}

// MockCloudWatchEventsAPIMockRecorder is the mock recorder for MockCloudWatchEventsAPI
type MockCloudWatchEventsAPIMockRecorder struct {
	mock *MockCloudWatchEventsAPI
}

// NewMockCloudWatchEventsAPI creates a new mock instance
func NewMockCloudWatchEventsAPI(ctrl *gomock.Controller) *MockCloudWatchEventsAPI {
	mock := &MockCloudWatchEventsAPI{ctrl: ctrl}
	mock.recorder = &MockCloudWatchEventsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudWatchEventsAPI) EXPECT() *MockCloudWatchEventsAPIMockRecorder {
	return m.recorder
}

// ActivateEventSource mocks base method
func (m *MockCloudWatchEventsAPI) ActivateEventSource(arg0 *cloudwatchevents.ActivateEventSourceInput) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateEventSource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ActivateEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateEventSource indicates an expected call of ActivateEventSource
func (mr *MockCloudWatchEventsAPIMockRecorder) ActivateEventSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateEventSource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ActivateEventSource), arg0)
}

// ActivateEventSourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) ActivateEventSourceRequest(arg0 *cloudwatchevents.ActivateEventSourceInput) (*request.Request, *cloudwatchevents.ActivateEventSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateEventSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ActivateEventSourceOutput)
	return ret0, ret1
}

// ActivateEventSourceRequest indicates an expected call of ActivateEventSourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ActivateEventSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateEventSourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ActivateEventSourceRequest), arg0)
}

// ActivateEventSourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ActivateEventSourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.ActivateEventSourceInput, arg2 ...request.Option) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateEventSourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ActivateEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateEventSourceWithContext indicates an expected call of ActivateEventSourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ActivateEventSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateEventSourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ActivateEventSourceWithContext), varargs...)
}

// CancelReplay mocks base method
func (m *MockCloudWatchEventsAPI) CancelReplay(arg0 *cloudwatchevents.CancelReplayInput) (*cloudwatchevents.CancelReplayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReplay", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.CancelReplayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelReplay indicates an expected call of CancelReplay
func (mr *MockCloudWatchEventsAPIMockRecorder) CancelReplay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReplay", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CancelReplay), arg0)
}

// CancelReplayRequest mocks base method
func (m *MockCloudWatchEventsAPI) CancelReplayRequest(arg0 *cloudwatchevents.CancelReplayInput) (*request.Request, *cloudwatchevents.CancelReplayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReplayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.CancelReplayOutput)
	return ret0, ret1
}

// CancelReplayRequest indicates an expected call of CancelReplayRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) CancelReplayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReplayRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CancelReplayRequest), arg0)
}

// CancelReplayWithContext mocks base method
func (m *MockCloudWatchEventsAPI) CancelReplayWithContext(arg0 context.Context, arg1 *cloudwatchevents.CancelReplayInput, arg2 ...request.Option) (*cloudwatchevents.CancelReplayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelReplayWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.CancelReplayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelReplayWithContext indicates an expected call of CancelReplayWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) CancelReplayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReplayWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CancelReplayWithContext), varargs...)
}

// CreateArchive mocks base method
func (m *MockCloudWatchEventsAPI) CreateArchive(arg0 *cloudwatchevents.CreateArchiveInput) (*cloudwatchevents.CreateArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchive", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.CreateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArchive indicates an expected call of CreateArchive
func (mr *MockCloudWatchEventsAPIMockRecorder) CreateArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchive", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreateArchive), arg0)
}

// CreateArchiveRequest mocks base method
func (m *MockCloudWatchEventsAPI) CreateArchiveRequest(arg0 *cloudwatchevents.CreateArchiveInput) (*request.Request, *cloudwatchevents.CreateArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.CreateArchiveOutput)
	return ret0, ret1
}

// CreateArchiveRequest indicates an expected call of CreateArchiveRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) CreateArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreateArchiveRequest), arg0)
}

// CreateArchiveWithContext mocks base method
func (m *MockCloudWatchEventsAPI) CreateArchiveWithContext(arg0 context.Context, arg1 *cloudwatchevents.CreateArchiveInput, arg2 ...request.Option) (*cloudwatchevents.CreateArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.CreateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArchiveWithContext indicates an expected call of CreateArchiveWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) CreateArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreateArchiveWithContext), varargs...)
}

// CreateEventBus mocks base method
func (m *MockCloudWatchEventsAPI) CreateEventBus(arg0 *cloudwatchevents.CreateEventBusInput) (*cloudwatchevents.CreateEventBusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventBus", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.CreateEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventBus indicates an expected call of CreateEventBus
func (mr *MockCloudWatchEventsAPIMockRecorder) CreateEventBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventBus", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreateEventBus), arg0)
}

// CreateEventBusRequest mocks base method
func (m *MockCloudWatchEventsAPI) CreateEventBusRequest(arg0 *cloudwatchevents.CreateEventBusInput) (*request.Request, *cloudwatchevents.CreateEventBusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventBusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.CreateEventBusOutput)
	return ret0, ret1
}

// CreateEventBusRequest indicates an expected call of CreateEventBusRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) CreateEventBusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventBusRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreateEventBusRequest), arg0)
}

// CreateEventBusWithContext mocks base method
func (m *MockCloudWatchEventsAPI) CreateEventBusWithContext(arg0 context.Context, arg1 *cloudwatchevents.CreateEventBusInput, arg2 ...request.Option) (*cloudwatchevents.CreateEventBusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventBusWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.CreateEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventBusWithContext indicates an expected call of CreateEventBusWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) CreateEventBusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventBusWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreateEventBusWithContext), varargs...)
}

// CreatePartnerEventSource mocks base method
func (m *MockCloudWatchEventsAPI) CreatePartnerEventSource(arg0 *cloudwatchevents.CreatePartnerEventSourceInput) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartnerEventSource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.CreatePartnerEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartnerEventSource indicates an expected call of CreatePartnerEventSource
func (mr *MockCloudWatchEventsAPIMockRecorder) CreatePartnerEventSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnerEventSource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreatePartnerEventSource), arg0)
}

// CreatePartnerEventSourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) CreatePartnerEventSourceRequest(arg0 *cloudwatchevents.CreatePartnerEventSourceInput) (*request.Request, *cloudwatchevents.CreatePartnerEventSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartnerEventSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.CreatePartnerEventSourceOutput)
	return ret0, ret1
}

// CreatePartnerEventSourceRequest indicates an expected call of CreatePartnerEventSourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) CreatePartnerEventSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnerEventSourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreatePartnerEventSourceRequest), arg0)
}

// CreatePartnerEventSourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) CreatePartnerEventSourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.CreatePartnerEventSourceInput, arg2 ...request.Option) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartnerEventSourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.CreatePartnerEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartnerEventSourceWithContext indicates an expected call of CreatePartnerEventSourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) CreatePartnerEventSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartnerEventSourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).CreatePartnerEventSourceWithContext), varargs...)
}

// DeactivateEventSource mocks base method
func (m *MockCloudWatchEventsAPI) DeactivateEventSource(arg0 *cloudwatchevents.DeactivateEventSourceInput) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateEventSource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DeactivateEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateEventSource indicates an expected call of DeactivateEventSource
func (mr *MockCloudWatchEventsAPIMockRecorder) DeactivateEventSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateEventSource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeactivateEventSource), arg0)
}

// DeactivateEventSourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) DeactivateEventSourceRequest(arg0 *cloudwatchevents.DeactivateEventSourceInput) (*request.Request, *cloudwatchevents.DeactivateEventSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateEventSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DeactivateEventSourceOutput)
	return ret0, ret1
}

// DeactivateEventSourceRequest indicates an expected call of DeactivateEventSourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DeactivateEventSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateEventSourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeactivateEventSourceRequest), arg0)
}

// DeactivateEventSourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DeactivateEventSourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.DeactivateEventSourceInput, arg2 ...request.Option) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivateEventSourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DeactivateEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateEventSourceWithContext indicates an expected call of DeactivateEventSourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DeactivateEventSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateEventSourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeactivateEventSourceWithContext), varargs...)
}

// DeleteArchive mocks base method
func (m *MockCloudWatchEventsAPI) DeleteArchive(arg0 *cloudwatchevents.DeleteArchiveInput) (*cloudwatchevents.DeleteArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArchive", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArchive indicates an expected call of DeleteArchive
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchive", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteArchive), arg0)
}

// DeleteArchiveRequest mocks base method
func (m *MockCloudWatchEventsAPI) DeleteArchiveRequest(arg0 *cloudwatchevents.DeleteArchiveInput) (*request.Request, *cloudwatchevents.DeleteArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DeleteArchiveOutput)
	return ret0, ret1
}

// DeleteArchiveRequest indicates an expected call of DeleteArchiveRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchiveRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteArchiveRequest), arg0)
}

// DeleteArchiveWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DeleteArchiveWithContext(arg0 context.Context, arg1 *cloudwatchevents.DeleteArchiveInput, arg2 ...request.Option) (*cloudwatchevents.DeleteArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArchiveWithContext indicates an expected call of DeleteArchiveWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchiveWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteArchiveWithContext), varargs...)
}

// DeleteEventBus mocks base method
func (m *MockCloudWatchEventsAPI) DeleteEventBus(arg0 *cloudwatchevents.DeleteEventBusInput) (*cloudwatchevents.DeleteEventBusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventBus", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventBus indicates an expected call of DeleteEventBus
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteEventBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventBus", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteEventBus), arg0)
}

// DeleteEventBusRequest mocks base method
func (m *MockCloudWatchEventsAPI) DeleteEventBusRequest(arg0 *cloudwatchevents.DeleteEventBusInput) (*request.Request, *cloudwatchevents.DeleteEventBusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventBusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DeleteEventBusOutput)
	return ret0, ret1
}

// DeleteEventBusRequest indicates an expected call of DeleteEventBusRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteEventBusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventBusRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteEventBusRequest), arg0)
}

// DeleteEventBusWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DeleteEventBusWithContext(arg0 context.Context, arg1 *cloudwatchevents.DeleteEventBusInput, arg2 ...request.Option) (*cloudwatchevents.DeleteEventBusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventBusWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventBusWithContext indicates an expected call of DeleteEventBusWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteEventBusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventBusWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteEventBusWithContext), varargs...)
}

// DeletePartnerEventSource mocks base method
func (m *MockCloudWatchEventsAPI) DeletePartnerEventSource(arg0 *cloudwatchevents.DeletePartnerEventSourceInput) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnerEventSource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DeletePartnerEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartnerEventSource indicates an expected call of DeletePartnerEventSource
func (mr *MockCloudWatchEventsAPIMockRecorder) DeletePartnerEventSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnerEventSource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeletePartnerEventSource), arg0)
}

// DeletePartnerEventSourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) DeletePartnerEventSourceRequest(arg0 *cloudwatchevents.DeletePartnerEventSourceInput) (*request.Request, *cloudwatchevents.DeletePartnerEventSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartnerEventSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DeletePartnerEventSourceOutput)
	return ret0, ret1
}

// DeletePartnerEventSourceRequest indicates an expected call of DeletePartnerEventSourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DeletePartnerEventSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnerEventSourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeletePartnerEventSourceRequest), arg0)
}

// DeletePartnerEventSourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DeletePartnerEventSourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.DeletePartnerEventSourceInput, arg2 ...request.Option) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePartnerEventSourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DeletePartnerEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartnerEventSourceWithContext indicates an expected call of DeletePartnerEventSourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DeletePartnerEventSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartnerEventSourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeletePartnerEventSourceWithContext), varargs...)
}

// DeleteRule mocks base method
func (m *MockCloudWatchEventsAPI) DeleteRule(arg0 *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteRule), arg0)
}

// DeleteRuleRequest mocks base method
func (m *MockCloudWatchEventsAPI) DeleteRuleRequest(arg0 *cloudwatchevents.DeleteRuleInput) (*request.Request, *cloudwatchevents.DeleteRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DeleteRuleOutput)
	return ret0, ret1
}

// DeleteRuleRequest indicates an expected call of DeleteRuleRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteRuleRequest), arg0)
}

// DeleteRuleWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DeleteRuleWithContext(arg0 context.Context, arg1 *cloudwatchevents.DeleteRuleInput, arg2 ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleWithContext indicates an expected call of DeleteRuleWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DeleteRuleWithContext), varargs...)
}

// DescribeArchive mocks base method
func (m *MockCloudWatchEventsAPI) DescribeArchive(arg0 *cloudwatchevents.DescribeArchiveInput) (*cloudwatchevents.DescribeArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeArchive", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeArchive indicates an expected call of DescribeArchive
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeArchive", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeArchive), arg0)
}

// DescribeArchiveRequest mocks base method
func (m *MockCloudWatchEventsAPI) DescribeArchiveRequest(arg0 *cloudwatchevents.DescribeArchiveInput) (*request.Request, *cloudwatchevents.DescribeArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribeArchiveOutput)
	return ret0, ret1
}

// DescribeArchiveRequest indicates an expected call of DescribeArchiveRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeArchiveRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeArchiveRequest), arg0)
}

// DescribeArchiveWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DescribeArchiveWithContext(arg0 context.Context, arg1 *cloudwatchevents.DescribeArchiveInput, arg2 ...request.Option) (*cloudwatchevents.DescribeArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeArchiveWithContext indicates an expected call of DescribeArchiveWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeArchiveWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeArchiveWithContext), varargs...)
}

// DescribeEventBus mocks base method
func (m *MockCloudWatchEventsAPI) DescribeEventBus(arg0 *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventBus", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventBus indicates an expected call of DescribeEventBus
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeEventBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventBus", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeEventBus), arg0)
}

// DescribeEventBusRequest mocks base method
func (m *MockCloudWatchEventsAPI) DescribeEventBusRequest(arg0 *cloudwatchevents.DescribeEventBusInput) (*request.Request, *cloudwatchevents.DescribeEventBusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventBusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribeEventBusOutput)
	return ret0, ret1
}

// DescribeEventBusRequest indicates an expected call of DescribeEventBusRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeEventBusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventBusRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeEventBusRequest), arg0)
}

// DescribeEventBusWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DescribeEventBusWithContext(arg0 context.Context, arg1 *cloudwatchevents.DescribeEventBusInput, arg2 ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventBusWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventBusWithContext indicates an expected call of DescribeEventBusWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeEventBusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventBusWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeEventBusWithContext), varargs...)
}

// DescribeEventSource mocks base method
func (m *MockCloudWatchEventsAPI) DescribeEventSource(arg0 *cloudwatchevents.DescribeEventSourceInput) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSource indicates an expected call of DescribeEventSource
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeEventSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeEventSource), arg0)
}

// DescribeEventSourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) DescribeEventSourceRequest(arg0 *cloudwatchevents.DescribeEventSourceInput) (*request.Request, *cloudwatchevents.DescribeEventSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribeEventSourceOutput)
	return ret0, ret1
}

// DescribeEventSourceRequest indicates an expected call of DescribeEventSourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeEventSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeEventSourceRequest), arg0)
}

// DescribeEventSourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DescribeEventSourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.DescribeEventSourceInput, arg2 ...request.Option) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSourceWithContext indicates an expected call of DescribeEventSourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeEventSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeEventSourceWithContext), varargs...)
}

// DescribePartnerEventSource mocks base method
func (m *MockCloudWatchEventsAPI) DescribePartnerEventSource(arg0 *cloudwatchevents.DescribePartnerEventSourceInput) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePartnerEventSource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribePartnerEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePartnerEventSource indicates an expected call of DescribePartnerEventSource
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribePartnerEventSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePartnerEventSource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribePartnerEventSource), arg0)
}

// DescribePartnerEventSourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) DescribePartnerEventSourceRequest(arg0 *cloudwatchevents.DescribePartnerEventSourceInput) (*request.Request, *cloudwatchevents.DescribePartnerEventSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePartnerEventSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribePartnerEventSourceOutput)
	return ret0, ret1
}

// DescribePartnerEventSourceRequest indicates an expected call of DescribePartnerEventSourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribePartnerEventSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePartnerEventSourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribePartnerEventSourceRequest), arg0)
}

// DescribePartnerEventSourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DescribePartnerEventSourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.DescribePartnerEventSourceInput, arg2 ...request.Option) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePartnerEventSourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribePartnerEventSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePartnerEventSourceWithContext indicates an expected call of DescribePartnerEventSourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribePartnerEventSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePartnerEventSourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribePartnerEventSourceWithContext), varargs...)
}

// DescribeReplay mocks base method
func (m *MockCloudWatchEventsAPI) DescribeReplay(arg0 *cloudwatchevents.DescribeReplayInput) (*cloudwatchevents.DescribeReplayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplay", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeReplayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplay indicates an expected call of DescribeReplay
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeReplay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplay", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeReplay), arg0)
}

// DescribeReplayRequest mocks base method
func (m *MockCloudWatchEventsAPI) DescribeReplayRequest(arg0 *cloudwatchevents.DescribeReplayInput) (*request.Request, *cloudwatchevents.DescribeReplayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribeReplayOutput)
	return ret0, ret1
}

// DescribeReplayRequest indicates an expected call of DescribeReplayRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeReplayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplayRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeReplayRequest), arg0)
}

// DescribeReplayWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DescribeReplayWithContext(arg0 context.Context, arg1 *cloudwatchevents.DescribeReplayInput, arg2 ...request.Option) (*cloudwatchevents.DescribeReplayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplayWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeReplayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplayWithContext indicates an expected call of DescribeReplayWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeReplayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplayWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeReplayWithContext), varargs...)
}

// DescribeRule mocks base method
func (m *MockCloudWatchEventsAPI) DescribeRule(arg0 *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRule", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRule indicates an expected call of DescribeRule
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRule", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeRule), arg0)
}

// DescribeRuleRequest mocks base method
func (m *MockCloudWatchEventsAPI) DescribeRuleRequest(arg0 *cloudwatchevents.DescribeRuleInput) (*request.Request, *cloudwatchevents.DescribeRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribeRuleOutput)
	return ret0, ret1
}

// DescribeRuleRequest indicates an expected call of DescribeRuleRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuleRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeRuleRequest), arg0)
}

// DescribeRuleWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DescribeRuleWithContext(arg0 context.Context, arg1 *cloudwatchevents.DescribeRuleInput, arg2 ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRuleWithContext indicates an expected call of DescribeRuleWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DescribeRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRuleWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DescribeRuleWithContext), varargs...)
}

// DisableRule mocks base method
func (m *MockCloudWatchEventsAPI) DisableRule(arg0 *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRule", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.DisableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRule indicates an expected call of DisableRule
func (mr *MockCloudWatchEventsAPIMockRecorder) DisableRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRule", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DisableRule), arg0)
}

// DisableRuleRequest mocks base method
func (m *MockCloudWatchEventsAPI) DisableRuleRequest(arg0 *cloudwatchevents.DisableRuleInput) (*request.Request, *cloudwatchevents.DisableRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DisableRuleOutput)
	return ret0, ret1
}

// DisableRuleRequest indicates an expected call of DisableRuleRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) DisableRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRuleRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DisableRuleRequest), arg0)
}

// DisableRuleWithContext mocks base method
func (m *MockCloudWatchEventsAPI) DisableRuleWithContext(arg0 context.Context, arg1 *cloudwatchevents.DisableRuleInput, arg2 ...request.Option) (*cloudwatchevents.DisableRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.DisableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRuleWithContext indicates an expected call of DisableRuleWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) DisableRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRuleWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).DisableRuleWithContext), varargs...)
}

// EnableRule mocks base method
func (m *MockCloudWatchEventsAPI) EnableRule(arg0 *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRule", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.EnableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRule indicates an expected call of EnableRule
func (mr *MockCloudWatchEventsAPIMockRecorder) EnableRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRule", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).EnableRule), arg0)
}

// EnableRuleRequest mocks base method
func (m *MockCloudWatchEventsAPI) EnableRuleRequest(arg0 *cloudwatchevents.EnableRuleInput) (*request.Request, *cloudwatchevents.EnableRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.EnableRuleOutput)
	return ret0, ret1
}

// EnableRuleRequest indicates an expected call of EnableRuleRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) EnableRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRuleRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).EnableRuleRequest), arg0)
}

// EnableRuleWithContext mocks base method
func (m *MockCloudWatchEventsAPI) EnableRuleWithContext(arg0 context.Context, arg1 *cloudwatchevents.EnableRuleInput, arg2 ...request.Option) (*cloudwatchevents.EnableRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.EnableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRuleWithContext indicates an expected call of EnableRuleWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) EnableRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRuleWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).EnableRuleWithContext), varargs...)
}

// ListArchives mocks base method
func (m *MockCloudWatchEventsAPI) ListArchives(arg0 *cloudwatchevents.ListArchivesInput) (*cloudwatchevents.ListArchivesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchives", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListArchivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchives indicates an expected call of ListArchives
func (mr *MockCloudWatchEventsAPIMockRecorder) ListArchives(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchives", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListArchives), arg0)
}

// ListArchivesRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListArchivesRequest(arg0 *cloudwatchevents.ListArchivesInput) (*request.Request, *cloudwatchevents.ListArchivesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchivesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListArchivesOutput)
	return ret0, ret1
}

// ListArchivesRequest indicates an expected call of ListArchivesRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListArchivesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivesRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListArchivesRequest), arg0)
}

// ListArchivesWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListArchivesWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListArchivesInput, arg2 ...request.Option) (*cloudwatchevents.ListArchivesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchivesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListArchivesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchivesWithContext indicates an expected call of ListArchivesWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListArchivesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivesWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListArchivesWithContext), varargs...)
}

// ListEventBuses mocks base method
func (m *MockCloudWatchEventsAPI) ListEventBuses(arg0 *cloudwatchevents.ListEventBusesInput) (*cloudwatchevents.ListEventBusesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventBuses", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListEventBusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventBuses indicates an expected call of ListEventBuses
func (mr *MockCloudWatchEventsAPIMockRecorder) ListEventBuses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventBuses", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListEventBuses), arg0)
}

// ListEventBusesRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListEventBusesRequest(arg0 *cloudwatchevents.ListEventBusesInput) (*request.Request, *cloudwatchevents.ListEventBusesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventBusesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListEventBusesOutput)
	return ret0, ret1
}

// ListEventBusesRequest indicates an expected call of ListEventBusesRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListEventBusesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventBusesRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListEventBusesRequest), arg0)
}

// ListEventBusesWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListEventBusesWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListEventBusesInput, arg2 ...request.Option) (*cloudwatchevents.ListEventBusesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventBusesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListEventBusesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventBusesWithContext indicates an expected call of ListEventBusesWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListEventBusesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventBusesWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListEventBusesWithContext), varargs...)
}

// ListEventSources mocks base method
func (m *MockCloudWatchEventsAPI) ListEventSources(arg0 *cloudwatchevents.ListEventSourcesInput) (*cloudwatchevents.ListEventSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventSources", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListEventSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSources indicates an expected call of ListEventSources
func (mr *MockCloudWatchEventsAPIMockRecorder) ListEventSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSources", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListEventSources), arg0)
}

// ListEventSourcesRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListEventSourcesRequest(arg0 *cloudwatchevents.ListEventSourcesInput) (*request.Request, *cloudwatchevents.ListEventSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListEventSourcesOutput)
	return ret0, ret1
}

// ListEventSourcesRequest indicates an expected call of ListEventSourcesRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListEventSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourcesRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListEventSourcesRequest), arg0)
}

// ListEventSourcesWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListEventSourcesWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListEventSourcesInput, arg2 ...request.Option) (*cloudwatchevents.ListEventSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListEventSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventSourcesWithContext indicates an expected call of ListEventSourcesWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListEventSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventSourcesWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListEventSourcesWithContext), varargs...)
}

// ListPartnerEventSourceAccounts mocks base method
func (m *MockCloudWatchEventsAPI) ListPartnerEventSourceAccounts(arg0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerEventSourceAccounts", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerEventSourceAccounts indicates an expected call of ListPartnerEventSourceAccounts
func (mr *MockCloudWatchEventsAPIMockRecorder) ListPartnerEventSourceAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSourceAccounts", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListPartnerEventSourceAccounts), arg0)
}

// ListPartnerEventSourceAccountsRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListPartnerEventSourceAccountsRequest(arg0 *cloudwatchevents.ListPartnerEventSourceAccountsInput) (*request.Request, *cloudwatchevents.ListPartnerEventSourceAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerEventSourceAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
	return ret0, ret1
}

// ListPartnerEventSourceAccountsRequest indicates an expected call of ListPartnerEventSourceAccountsRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListPartnerEventSourceAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSourceAccountsRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListPartnerEventSourceAccountsRequest), arg0)
}

// ListPartnerEventSourceAccountsWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListPartnerEventSourceAccountsWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListPartnerEventSourceAccountsInput, arg2 ...request.Option) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartnerEventSourceAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerEventSourceAccountsWithContext indicates an expected call of ListPartnerEventSourceAccountsWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListPartnerEventSourceAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSourceAccountsWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListPartnerEventSourceAccountsWithContext), varargs...)
}

// ListPartnerEventSources mocks base method
func (m *MockCloudWatchEventsAPI) ListPartnerEventSources(arg0 *cloudwatchevents.ListPartnerEventSourcesInput) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerEventSources", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListPartnerEventSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerEventSources indicates an expected call of ListPartnerEventSources
func (mr *MockCloudWatchEventsAPIMockRecorder) ListPartnerEventSources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSources", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListPartnerEventSources), arg0)
}

// ListPartnerEventSourcesRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListPartnerEventSourcesRequest(arg0 *cloudwatchevents.ListPartnerEventSourcesInput) (*request.Request, *cloudwatchevents.ListPartnerEventSourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartnerEventSourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListPartnerEventSourcesOutput)
	return ret0, ret1
}

// ListPartnerEventSourcesRequest indicates an expected call of ListPartnerEventSourcesRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListPartnerEventSourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSourcesRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListPartnerEventSourcesRequest), arg0)
}

// ListPartnerEventSourcesWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListPartnerEventSourcesWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListPartnerEventSourcesInput, arg2 ...request.Option) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartnerEventSourcesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListPartnerEventSourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartnerEventSourcesWithContext indicates an expected call of ListPartnerEventSourcesWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListPartnerEventSourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartnerEventSourcesWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListPartnerEventSourcesWithContext), varargs...)
}

// ListReplays mocks base method
func (m *MockCloudWatchEventsAPI) ListReplays(arg0 *cloudwatchevents.ListReplaysInput) (*cloudwatchevents.ListReplaysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplays", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListReplaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplays indicates an expected call of ListReplays
func (mr *MockCloudWatchEventsAPIMockRecorder) ListReplays(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplays", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListReplays), arg0)
}

// ListReplaysRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListReplaysRequest(arg0 *cloudwatchevents.ListReplaysInput) (*request.Request, *cloudwatchevents.ListReplaysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplaysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListReplaysOutput)
	return ret0, ret1
}

// ListReplaysRequest indicates an expected call of ListReplaysRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListReplaysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplaysRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListReplaysRequest), arg0)
}

// ListReplaysWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListReplaysWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListReplaysInput, arg2 ...request.Option) (*cloudwatchevents.ListReplaysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReplaysWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListReplaysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplaysWithContext indicates an expected call of ListReplaysWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListReplaysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplaysWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListReplaysWithContext), varargs...)
}

// ListRuleNamesByTarget mocks base method
func (m *MockCloudWatchEventsAPI) ListRuleNamesByTarget(arg0 *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleNamesByTarget", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleNamesByTarget indicates an expected call of ListRuleNamesByTarget
func (mr *MockCloudWatchEventsAPIMockRecorder) ListRuleNamesByTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleNamesByTarget", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListRuleNamesByTarget), arg0)
}

// ListRuleNamesByTargetRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListRuleNamesByTargetRequest(arg0 *cloudwatchevents.ListRuleNamesByTargetInput) (*request.Request, *cloudwatchevents.ListRuleNamesByTargetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleNamesByTargetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	return ret0, ret1
}

// ListRuleNamesByTargetRequest indicates an expected call of ListRuleNamesByTargetRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListRuleNamesByTargetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleNamesByTargetRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListRuleNamesByTargetRequest), arg0)
}

// ListRuleNamesByTargetWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListRuleNamesByTargetWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListRuleNamesByTargetInput, arg2 ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleNamesByTargetWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleNamesByTargetWithContext indicates an expected call of ListRuleNamesByTargetWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListRuleNamesByTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleNamesByTargetWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListRuleNamesByTargetWithContext), varargs...)
}

// ListRules mocks base method
func (m *MockCloudWatchEventsAPI) ListRules(arg0 *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules
func (mr *MockCloudWatchEventsAPIMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListRules), arg0)
}

// ListRulesRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListRulesRequest(arg0 *cloudwatchevents.ListRulesInput) (*request.Request, *cloudwatchevents.ListRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListRulesOutput)
	return ret0, ret1
}

// ListRulesRequest indicates an expected call of ListRulesRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListRulesRequest), arg0)
}

// ListRulesWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListRulesWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListRulesInput, arg2 ...request.Option) (*cloudwatchevents.ListRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRulesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRulesWithContext indicates an expected call of ListRulesWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRulesWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListRulesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCloudWatchEventsAPI) ListTagsForResource(arg0 *cloudwatchevents.ListTagsForResourceInput) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCloudWatchEventsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListTagsForResourceRequest(arg0 *cloudwatchevents.ListTagsForResourceInput) (*request.Request, *cloudwatchevents.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListTagsForResourceInput, arg2 ...request.Option) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTargetsByRule mocks base method
func (m *MockCloudWatchEventsAPI) ListTargetsByRule(arg0 *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsByRule", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.ListTargetsByRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsByRule indicates an expected call of ListTargetsByRule
func (mr *MockCloudWatchEventsAPIMockRecorder) ListTargetsByRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsByRule", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListTargetsByRule), arg0)
}

// ListTargetsByRuleRequest mocks base method
func (m *MockCloudWatchEventsAPI) ListTargetsByRuleRequest(arg0 *cloudwatchevents.ListTargetsByRuleInput) (*request.Request, *cloudwatchevents.ListTargetsByRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetsByRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListTargetsByRuleOutput)
	return ret0, ret1
}

// ListTargetsByRuleRequest indicates an expected call of ListTargetsByRuleRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) ListTargetsByRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsByRuleRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListTargetsByRuleRequest), arg0)
}

// ListTargetsByRuleWithContext mocks base method
func (m *MockCloudWatchEventsAPI) ListTargetsByRuleWithContext(arg0 context.Context, arg1 *cloudwatchevents.ListTargetsByRuleInput, arg2 ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsByRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.ListTargetsByRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsByRuleWithContext indicates an expected call of ListTargetsByRuleWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) ListTargetsByRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsByRuleWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).ListTargetsByRuleWithContext), varargs...)
}

// PutEvents mocks base method
func (m *MockCloudWatchEventsAPI) PutEvents(arg0 *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEvents", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEvents indicates an expected call of PutEvents
func (mr *MockCloudWatchEventsAPIMockRecorder) PutEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvents", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutEvents), arg0)
}

// PutEventsRequest mocks base method
func (m *MockCloudWatchEventsAPI) PutEventsRequest(arg0 *cloudwatchevents.PutEventsInput) (*request.Request, *cloudwatchevents.PutEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutEventsOutput)
	return ret0, ret1
}

// PutEventsRequest indicates an expected call of PutEventsRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) PutEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventsRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutEventsRequest), arg0)
}

// PutEventsWithContext mocks base method
func (m *MockCloudWatchEventsAPI) PutEventsWithContext(arg0 context.Context, arg1 *cloudwatchevents.PutEventsInput, arg2 ...request.Option) (*cloudwatchevents.PutEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEventsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEventsWithContext indicates an expected call of PutEventsWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) PutEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventsWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutEventsWithContext), varargs...)
}

// PutPartnerEvents mocks base method
func (m *MockCloudWatchEventsAPI) PutPartnerEvents(arg0 *cloudwatchevents.PutPartnerEventsInput) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPartnerEvents", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.PutPartnerEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPartnerEvents indicates an expected call of PutPartnerEvents
func (mr *MockCloudWatchEventsAPIMockRecorder) PutPartnerEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPartnerEvents", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutPartnerEvents), arg0)
}

// PutPartnerEventsRequest mocks base method
func (m *MockCloudWatchEventsAPI) PutPartnerEventsRequest(arg0 *cloudwatchevents.PutPartnerEventsInput) (*request.Request, *cloudwatchevents.PutPartnerEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPartnerEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutPartnerEventsOutput)
	return ret0, ret1
}

// PutPartnerEventsRequest indicates an expected call of PutPartnerEventsRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) PutPartnerEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPartnerEventsRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutPartnerEventsRequest), arg0)
}

// PutPartnerEventsWithContext mocks base method
func (m *MockCloudWatchEventsAPI) PutPartnerEventsWithContext(arg0 context.Context, arg1 *cloudwatchevents.PutPartnerEventsInput, arg2 ...request.Option) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPartnerEventsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.PutPartnerEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPartnerEventsWithContext indicates an expected call of PutPartnerEventsWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) PutPartnerEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPartnerEventsWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutPartnerEventsWithContext), varargs...)
}

// PutPermission mocks base method
func (m *MockCloudWatchEventsAPI) PutPermission(arg0 *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermission", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.PutPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermission indicates an expected call of PutPermission
func (mr *MockCloudWatchEventsAPIMockRecorder) PutPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermission", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutPermission), arg0)
}

// PutPermissionRequest mocks base method
func (m *MockCloudWatchEventsAPI) PutPermissionRequest(arg0 *cloudwatchevents.PutPermissionInput) (*request.Request, *cloudwatchevents.PutPermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutPermissionOutput)
	return ret0, ret1
}

// PutPermissionRequest indicates an expected call of PutPermissionRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) PutPermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutPermissionRequest), arg0)
}

// PutPermissionWithContext mocks base method
func (m *MockCloudWatchEventsAPI) PutPermissionWithContext(arg0 context.Context, arg1 *cloudwatchevents.PutPermissionInput, arg2 ...request.Option) (*cloudwatchevents.PutPermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPermissionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.PutPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionWithContext indicates an expected call of PutPermissionWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) PutPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutPermissionWithContext), varargs...)
}

// PutRule mocks base method
func (m *MockCloudWatchEventsAPI) PutRule(arg0 *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRule", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.PutRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRule indicates an expected call of PutRule
func (mr *MockCloudWatchEventsAPIMockRecorder) PutRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRule", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutRule), arg0)
}

// PutRuleRequest mocks base method
func (m *MockCloudWatchEventsAPI) PutRuleRequest(arg0 *cloudwatchevents.PutRuleInput) (*request.Request, *cloudwatchevents.PutRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutRuleOutput)
	return ret0, ret1
}

// PutRuleRequest indicates an expected call of PutRuleRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) PutRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRuleRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutRuleRequest), arg0)
}

// PutRuleWithContext mocks base method
func (m *MockCloudWatchEventsAPI) PutRuleWithContext(arg0 context.Context, arg1 *cloudwatchevents.PutRuleInput, arg2 ...request.Option) (*cloudwatchevents.PutRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRuleWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.PutRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRuleWithContext indicates an expected call of PutRuleWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) PutRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRuleWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutRuleWithContext), varargs...)
}

// PutTargets mocks base method
func (m *MockCloudWatchEventsAPI) PutTargets(arg0 *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTargets", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.PutTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTargets indicates an expected call of PutTargets
func (mr *MockCloudWatchEventsAPIMockRecorder) PutTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTargets", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutTargets), arg0)
}

// PutTargetsRequest mocks base method
func (m *MockCloudWatchEventsAPI) PutTargetsRequest(arg0 *cloudwatchevents.PutTargetsInput) (*request.Request, *cloudwatchevents.PutTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutTargetsOutput)
	return ret0, ret1
}

// PutTargetsRequest indicates an expected call of PutTargetsRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) PutTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTargetsRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutTargetsRequest), arg0)
}

// PutTargetsWithContext mocks base method
func (m *MockCloudWatchEventsAPI) PutTargetsWithContext(arg0 context.Context, arg1 *cloudwatchevents.PutTargetsInput, arg2 ...request.Option) (*cloudwatchevents.PutTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.PutTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTargetsWithContext indicates an expected call of PutTargetsWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) PutTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTargetsWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).PutTargetsWithContext), varargs...)
}

// RemovePermission mocks base method
func (m *MockCloudWatchEventsAPI) RemovePermission(arg0 *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermission", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermission indicates an expected call of RemovePermission
func (mr *MockCloudWatchEventsAPIMockRecorder) RemovePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermission", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).RemovePermission), arg0)
}

// RemovePermissionRequest mocks base method
func (m *MockCloudWatchEventsAPI) RemovePermissionRequest(arg0 *cloudwatchevents.RemovePermissionInput) (*request.Request, *cloudwatchevents.RemovePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.RemovePermissionOutput)
	return ret0, ret1
}

// RemovePermissionRequest indicates an expected call of RemovePermissionRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) RemovePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).RemovePermissionRequest), arg0)
}

// RemovePermissionWithContext mocks base method
func (m *MockCloudWatchEventsAPI) RemovePermissionWithContext(arg0 context.Context, arg1 *cloudwatchevents.RemovePermissionInput, arg2 ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermissionWithContext indicates an expected call of RemovePermissionWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) RemovePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).RemovePermissionWithContext), varargs...)
}

// RemoveTargets mocks base method
func (m *MockCloudWatchEventsAPI) RemoveTargets(arg0 *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTargets", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.RemoveTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTargets indicates an expected call of RemoveTargets
func (mr *MockCloudWatchEventsAPIMockRecorder) RemoveTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTargets", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).RemoveTargets), arg0)
}

// RemoveTargetsRequest mocks base method
func (m *MockCloudWatchEventsAPI) RemoveTargetsRequest(arg0 *cloudwatchevents.RemoveTargetsInput) (*request.Request, *cloudwatchevents.RemoveTargetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTargetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.RemoveTargetsOutput)
	return ret0, ret1
}

// RemoveTargetsRequest indicates an expected call of RemoveTargetsRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) RemoveTargetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTargetsRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).RemoveTargetsRequest), arg0)
}

// RemoveTargetsWithContext mocks base method
func (m *MockCloudWatchEventsAPI) RemoveTargetsWithContext(arg0 context.Context, arg1 *cloudwatchevents.RemoveTargetsInput, arg2 ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTargetsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.RemoveTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTargetsWithContext indicates an expected call of RemoveTargetsWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) RemoveTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTargetsWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).RemoveTargetsWithContext), varargs...)
}

// StartReplay mocks base method
func (m *MockCloudWatchEventsAPI) StartReplay(arg0 *cloudwatchevents.StartReplayInput) (*cloudwatchevents.StartReplayOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplay", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.StartReplayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplay indicates an expected call of StartReplay
func (mr *MockCloudWatchEventsAPIMockRecorder) StartReplay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplay", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).StartReplay), arg0)
}

// StartReplayRequest mocks base method
func (m *MockCloudWatchEventsAPI) StartReplayRequest(arg0 *cloudwatchevents.StartReplayInput) (*request.Request, *cloudwatchevents.StartReplayOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartReplayRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.StartReplayOutput)
	return ret0, ret1
}

// StartReplayRequest indicates an expected call of StartReplayRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) StartReplayRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplayRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).StartReplayRequest), arg0)
}

// StartReplayWithContext mocks base method
func (m *MockCloudWatchEventsAPI) StartReplayWithContext(arg0 context.Context, arg1 *cloudwatchevents.StartReplayInput, arg2 ...request.Option) (*cloudwatchevents.StartReplayOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartReplayWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.StartReplayOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplayWithContext indicates an expected call of StartReplayWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) StartReplayWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplayWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).StartReplayWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCloudWatchEventsAPI) TagResource(arg0 *cloudwatchevents.TagResourceInput) (*cloudwatchevents.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCloudWatchEventsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) TagResourceRequest(arg0 *cloudwatchevents.TagResourceInput) (*request.Request, *cloudwatchevents.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) TagResourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.TagResourceInput, arg2 ...request.Option) (*cloudwatchevents.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).TagResourceWithContext), varargs...)
}

// TestEventPattern mocks base method
func (m *MockCloudWatchEventsAPI) TestEventPattern(arg0 *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestEventPattern", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.TestEventPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestEventPattern indicates an expected call of TestEventPattern
func (mr *MockCloudWatchEventsAPIMockRecorder) TestEventPattern(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestEventPattern", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).TestEventPattern), arg0)
}

// TestEventPatternRequest mocks base method
func (m *MockCloudWatchEventsAPI) TestEventPatternRequest(arg0 *cloudwatchevents.TestEventPatternInput) (*request.Request, *cloudwatchevents.TestEventPatternOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestEventPatternRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.TestEventPatternOutput)
	return ret0, ret1
}

// TestEventPatternRequest indicates an expected call of TestEventPatternRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) TestEventPatternRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestEventPatternRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).TestEventPatternRequest), arg0)
}

// TestEventPatternWithContext mocks base method
func (m *MockCloudWatchEventsAPI) TestEventPatternWithContext(arg0 context.Context, arg1 *cloudwatchevents.TestEventPatternInput, arg2 ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestEventPatternWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.TestEventPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestEventPatternWithContext indicates an expected call of TestEventPatternWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) TestEventPatternWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestEventPatternWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).TestEventPatternWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCloudWatchEventsAPI) UntagResource(arg0 *cloudwatchevents.UntagResourceInput) (*cloudwatchevents.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCloudWatchEventsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCloudWatchEventsAPI) UntagResourceRequest(arg0 *cloudwatchevents.UntagResourceInput) (*request.Request, *cloudwatchevents.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCloudWatchEventsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *cloudwatchevents.UntagResourceInput, arg2 ...request.Option) (*cloudwatchevents.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateArchive mocks base method
func (m *MockCloudWatchEventsAPI) UpdateArchive(arg0 *cloudwatchevents.UpdateArchiveInput) (*cloudwatchevents.UpdateArchiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArchive", arg0)
	ret0, _ := ret[0].(*cloudwatchevents.UpdateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArchive indicates an expected call of UpdateArchive
func (mr *MockCloudWatchEventsAPIMockRecorder) UpdateArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchive", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).UpdateArchive), arg0)
}

// UpdateArchiveRequest mocks base method
func (m *MockCloudWatchEventsAPI) UpdateArchiveRequest(arg0 *cloudwatchevents.UpdateArchiveInput) (*request.Request, *cloudwatchevents.UpdateArchiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArchiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.UpdateArchiveOutput)
	return ret0, ret1
}

// UpdateArchiveRequest indicates an expected call of UpdateArchiveRequest
func (mr *MockCloudWatchEventsAPIMockRecorder) UpdateArchiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchiveRequest", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).UpdateArchiveRequest), arg0)
}

// UpdateArchiveWithContext mocks base method
func (m *MockCloudWatchEventsAPI) UpdateArchiveWithContext(arg0 context.Context, arg1 *cloudwatchevents.UpdateArchiveInput, arg2 ...request.Option) (*cloudwatchevents.UpdateArchiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateArchiveWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatchevents.UpdateArchiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArchiveWithContext indicates an expected call of UpdateArchiveWithContext
func (mr *MockCloudWatchEventsAPIMockRecorder) UpdateArchiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchiveWithContext", reflect.TypeOf((*MockCloudWatchEventsAPI)(nil).UpdateArchiveWithContext), varargs...)
}

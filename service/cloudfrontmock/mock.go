// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface (interfaces: CloudFrontAPI)

// Package cloudfrontmock is a generated GoMock package.
package cloudfrontmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	cloudfront "github.com/aws/aws-sdk-go/service/cloudfront"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudFrontAPI is a mock of CloudFrontAPI interface
type MockCloudFrontAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFrontAPIMockRecorder
}

// MockCloudFrontAPIMockRecorder is the mock recorder for MockCloudFrontAPI
type MockCloudFrontAPIMockRecorder struct {
	mock *MockCloudFrontAPI
}

// NewMockCloudFrontAPI creates a new mock instance
func NewMockCloudFrontAPI(ctrl *gomock.Controller) *MockCloudFrontAPI {
	mock := &MockCloudFrontAPI{ctrl: ctrl}
	mock.recorder = &MockCloudFrontAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudFrontAPI) EXPECT() *MockCloudFrontAPIMockRecorder {
	return m.recorder
}

// CreateCachePolicy mocks base method
func (m *MockCloudFrontAPI) CreateCachePolicy(arg0 *cloudfront.CreateCachePolicyInput) (*cloudfront.CreateCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCachePolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCachePolicy indicates an expected call of CreateCachePolicy
func (mr *MockCloudFrontAPIMockRecorder) CreateCachePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCachePolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCachePolicy), arg0)
}

// CreateCachePolicyRequest mocks base method
func (m *MockCloudFrontAPI) CreateCachePolicyRequest(arg0 *cloudfront.CreateCachePolicyInput) (*request.Request, *cloudfront.CreateCachePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCachePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateCachePolicyOutput)
	return ret0, ret1
}

// CreateCachePolicyRequest indicates an expected call of CreateCachePolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateCachePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCachePolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCachePolicyRequest), arg0)
}

// CreateCachePolicyWithContext mocks base method
func (m *MockCloudFrontAPI) CreateCachePolicyWithContext(arg0 context.Context, arg1 *cloudfront.CreateCachePolicyInput, arg2 ...request.Option) (*cloudfront.CreateCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCachePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCachePolicyWithContext indicates an expected call of CreateCachePolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateCachePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCachePolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCachePolicyWithContext), varargs...)
}

// CreateCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) CreateCloudFrontOriginAccessIdentity(arg0 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFrontOriginAccessIdentity indicates an expected call of CreateCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) CreateCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCloudFrontOriginAccessIdentity), arg0)
}

// CreateCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) CreateCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// CreateCloudFrontOriginAccessIdentityRequest indicates an expected call of CreateCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCloudFrontOriginAccessIdentityRequest), arg0)
}

// CreateCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) CreateCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudFrontOriginAccessIdentityWithContext indicates an expected call of CreateCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// CreateDistribution mocks base method
func (m *MockCloudFrontAPI) CreateDistribution(arg0 *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistribution indicates an expected call of CreateDistribution
func (mr *MockCloudFrontAPIMockRecorder) CreateDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistribution), arg0)
}

// CreateDistributionRequest mocks base method
func (m *MockCloudFrontAPI) CreateDistributionRequest(arg0 *cloudfront.CreateDistributionInput) (*request.Request, *cloudfront.CreateDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateDistributionOutput)
	return ret0, ret1
}

// CreateDistributionRequest indicates an expected call of CreateDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionRequest), arg0)
}

// CreateDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithContext(arg0 context.Context, arg1 *cloudfront.CreateDistributionInput, arg2 ...request.Option) (*cloudfront.CreateDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistributionWithContext indicates an expected call of CreateDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithContext), varargs...)
}

// CreateDistributionWithTags mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithTags(arg0 *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistributionWithTags", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistributionWithTags indicates an expected call of CreateDistributionWithTags
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithTags", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithTags), arg0)
}

// CreateDistributionWithTagsRequest mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithTagsRequest(arg0 *cloudfront.CreateDistributionWithTagsInput) (*request.Request, *cloudfront.CreateDistributionWithTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistributionWithTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateDistributionWithTagsOutput)
	return ret0, ret1
}

// CreateDistributionWithTagsRequest indicates an expected call of CreateDistributionWithTagsRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithTagsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithTagsRequest), arg0)
}

// CreateDistributionWithTagsWithContext mocks base method
func (m *MockCloudFrontAPI) CreateDistributionWithTagsWithContext(arg0 context.Context, arg1 *cloudfront.CreateDistributionWithTagsInput, arg2 ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDistributionWithTagsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDistributionWithTagsWithContext indicates an expected call of CreateDistributionWithTagsWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateDistributionWithTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistributionWithTagsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateDistributionWithTagsWithContext), varargs...)
}

// CreateFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionConfig(arg0 *cloudfront.CreateFieldLevelEncryptionConfigInput) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionConfig indicates an expected call of CreateFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionConfig), arg0)
}

// CreateFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionConfigRequest(arg0 *cloudfront.CreateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// CreateFieldLevelEncryptionConfigRequest indicates an expected call of CreateFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionConfigRequest), arg0)
}

// CreateFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.CreateFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.CreateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionConfigWithContext indicates an expected call of CreateFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionConfigWithContext), varargs...)
}

// CreateFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionProfile(arg0 *cloudfront.CreateFieldLevelEncryptionProfileInput) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionProfile indicates an expected call of CreateFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionProfile), arg0)
}

// CreateFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionProfileRequest(arg0 *cloudfront.CreateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.CreateFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// CreateFieldLevelEncryptionProfileRequest indicates an expected call of CreateFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionProfileRequest), arg0)
}

// CreateFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) CreateFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.CreateFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.CreateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFieldLevelEncryptionProfileWithContext indicates an expected call of CreateFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateFieldLevelEncryptionProfileWithContext), varargs...)
}

// CreateInvalidation mocks base method
func (m *MockCloudFrontAPI) CreateInvalidation(arg0 *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvalidation", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvalidation indicates an expected call of CreateInvalidation
func (mr *MockCloudFrontAPIMockRecorder) CreateInvalidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidation", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateInvalidation), arg0)
}

// CreateInvalidationRequest mocks base method
func (m *MockCloudFrontAPI) CreateInvalidationRequest(arg0 *cloudfront.CreateInvalidationInput) (*request.Request, *cloudfront.CreateInvalidationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvalidationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateInvalidationOutput)
	return ret0, ret1
}

// CreateInvalidationRequest indicates an expected call of CreateInvalidationRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateInvalidationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidationRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateInvalidationRequest), arg0)
}

// CreateInvalidationWithContext mocks base method
func (m *MockCloudFrontAPI) CreateInvalidationWithContext(arg0 context.Context, arg1 *cloudfront.CreateInvalidationInput, arg2 ...request.Option) (*cloudfront.CreateInvalidationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvalidationWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvalidationWithContext indicates an expected call of CreateInvalidationWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateInvalidationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvalidationWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateInvalidationWithContext), varargs...)
}

// CreateKeyGroup mocks base method
func (m *MockCloudFrontAPI) CreateKeyGroup(arg0 *cloudfront.CreateKeyGroupInput) (*cloudfront.CreateKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyGroup", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyGroup indicates an expected call of CreateKeyGroup
func (mr *MockCloudFrontAPIMockRecorder) CreateKeyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyGroup", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateKeyGroup), arg0)
}

// CreateKeyGroupRequest mocks base method
func (m *MockCloudFrontAPI) CreateKeyGroupRequest(arg0 *cloudfront.CreateKeyGroupInput) (*request.Request, *cloudfront.CreateKeyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateKeyGroupOutput)
	return ret0, ret1
}

// CreateKeyGroupRequest indicates an expected call of CreateKeyGroupRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateKeyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyGroupRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateKeyGroupRequest), arg0)
}

// CreateKeyGroupWithContext mocks base method
func (m *MockCloudFrontAPI) CreateKeyGroupWithContext(arg0 context.Context, arg1 *cloudfront.CreateKeyGroupInput, arg2 ...request.Option) (*cloudfront.CreateKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyGroupWithContext indicates an expected call of CreateKeyGroupWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateKeyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyGroupWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateKeyGroupWithContext), varargs...)
}

// CreateMonitoringSubscription mocks base method
func (m *MockCloudFrontAPI) CreateMonitoringSubscription(arg0 *cloudfront.CreateMonitoringSubscriptionInput) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitoringSubscription", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateMonitoringSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitoringSubscription indicates an expected call of CreateMonitoringSubscription
func (mr *MockCloudFrontAPIMockRecorder) CreateMonitoringSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitoringSubscription", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateMonitoringSubscription), arg0)
}

// CreateMonitoringSubscriptionRequest mocks base method
func (m *MockCloudFrontAPI) CreateMonitoringSubscriptionRequest(arg0 *cloudfront.CreateMonitoringSubscriptionInput) (*request.Request, *cloudfront.CreateMonitoringSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitoringSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateMonitoringSubscriptionOutput)
	return ret0, ret1
}

// CreateMonitoringSubscriptionRequest indicates an expected call of CreateMonitoringSubscriptionRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateMonitoringSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitoringSubscriptionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateMonitoringSubscriptionRequest), arg0)
}

// CreateMonitoringSubscriptionWithContext mocks base method
func (m *MockCloudFrontAPI) CreateMonitoringSubscriptionWithContext(arg0 context.Context, arg1 *cloudfront.CreateMonitoringSubscriptionInput, arg2 ...request.Option) (*cloudfront.CreateMonitoringSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMonitoringSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateMonitoringSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitoringSubscriptionWithContext indicates an expected call of CreateMonitoringSubscriptionWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateMonitoringSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitoringSubscriptionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateMonitoringSubscriptionWithContext), varargs...)
}

// CreateOriginRequestPolicy mocks base method
func (m *MockCloudFrontAPI) CreateOriginRequestPolicy(arg0 *cloudfront.CreateOriginRequestPolicyInput) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOriginRequestPolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOriginRequestPolicy indicates an expected call of CreateOriginRequestPolicy
func (mr *MockCloudFrontAPIMockRecorder) CreateOriginRequestPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginRequestPolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateOriginRequestPolicy), arg0)
}

// CreateOriginRequestPolicyRequest mocks base method
func (m *MockCloudFrontAPI) CreateOriginRequestPolicyRequest(arg0 *cloudfront.CreateOriginRequestPolicyInput) (*request.Request, *cloudfront.CreateOriginRequestPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOriginRequestPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateOriginRequestPolicyOutput)
	return ret0, ret1
}

// CreateOriginRequestPolicyRequest indicates an expected call of CreateOriginRequestPolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateOriginRequestPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginRequestPolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateOriginRequestPolicyRequest), arg0)
}

// CreateOriginRequestPolicyWithContext mocks base method
func (m *MockCloudFrontAPI) CreateOriginRequestPolicyWithContext(arg0 context.Context, arg1 *cloudfront.CreateOriginRequestPolicyInput, arg2 ...request.Option) (*cloudfront.CreateOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOriginRequestPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOriginRequestPolicyWithContext indicates an expected call of CreateOriginRequestPolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateOriginRequestPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOriginRequestPolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateOriginRequestPolicyWithContext), varargs...)
}

// CreatePublicKey mocks base method
func (m *MockCloudFrontAPI) CreatePublicKey(arg0 *cloudfront.CreatePublicKeyInput) (*cloudfront.CreatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.CreatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicKey indicates an expected call of CreatePublicKey
func (mr *MockCloudFrontAPIMockRecorder) CreatePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreatePublicKey), arg0)
}

// CreatePublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) CreatePublicKeyRequest(arg0 *cloudfront.CreatePublicKeyInput) (*request.Request, *cloudfront.CreatePublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreatePublicKeyOutput)
	return ret0, ret1
}

// CreatePublicKeyRequest indicates an expected call of CreatePublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) CreatePublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreatePublicKeyRequest), arg0)
}

// CreatePublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) CreatePublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.CreatePublicKeyInput, arg2 ...request.Option) (*cloudfront.CreatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicKeyWithContext indicates an expected call of CreatePublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreatePublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreatePublicKeyWithContext), varargs...)
}

// CreateRealtimeLogConfig mocks base method
func (m *MockCloudFrontAPI) CreateRealtimeLogConfig(arg0 *cloudfront.CreateRealtimeLogConfigInput) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealtimeLogConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealtimeLogConfig indicates an expected call of CreateRealtimeLogConfig
func (mr *MockCloudFrontAPIMockRecorder) CreateRealtimeLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealtimeLogConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateRealtimeLogConfig), arg0)
}

// CreateRealtimeLogConfigRequest mocks base method
func (m *MockCloudFrontAPI) CreateRealtimeLogConfigRequest(arg0 *cloudfront.CreateRealtimeLogConfigInput) (*request.Request, *cloudfront.CreateRealtimeLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealtimeLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateRealtimeLogConfigOutput)
	return ret0, ret1
}

// CreateRealtimeLogConfigRequest indicates an expected call of CreateRealtimeLogConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateRealtimeLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealtimeLogConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateRealtimeLogConfigRequest), arg0)
}

// CreateRealtimeLogConfigWithContext mocks base method
func (m *MockCloudFrontAPI) CreateRealtimeLogConfigWithContext(arg0 context.Context, arg1 *cloudfront.CreateRealtimeLogConfigInput, arg2 ...request.Option) (*cloudfront.CreateRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRealtimeLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealtimeLogConfigWithContext indicates an expected call of CreateRealtimeLogConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateRealtimeLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealtimeLogConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateRealtimeLogConfigWithContext), varargs...)
}

// CreateStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistribution(arg0 *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistribution indicates an expected call of CreateStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistribution), arg0)
}

// CreateStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionRequest(arg0 *cloudfront.CreateStreamingDistributionInput) (*request.Request, *cloudfront.CreateStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateStreamingDistributionOutput)
	return ret0, ret1
}

// CreateStreamingDistributionRequest indicates an expected call of CreateStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionRequest), arg0)
}

// CreateStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.CreateStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistributionWithContext indicates an expected call of CreateStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithContext), varargs...)
}

// CreateStreamingDistributionWithTags mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithTags(arg0 *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithTags", arg0)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistributionWithTags indicates an expected call of CreateStreamingDistributionWithTags
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithTags", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithTags), arg0)
}

// CreateStreamingDistributionWithTagsRequest mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithTagsRequest(arg0 *cloudfront.CreateStreamingDistributionWithTagsInput) (*request.Request, *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	return ret0, ret1
}

// CreateStreamingDistributionWithTagsRequest indicates an expected call of CreateStreamingDistributionWithTagsRequest
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithTagsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithTagsRequest), arg0)
}

// CreateStreamingDistributionWithTagsWithContext mocks base method
func (m *MockCloudFrontAPI) CreateStreamingDistributionWithTagsWithContext(arg0 context.Context, arg1 *cloudfront.CreateStreamingDistributionWithTagsInput, arg2 ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamingDistributionWithTagsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateStreamingDistributionWithTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamingDistributionWithTagsWithContext indicates an expected call of CreateStreamingDistributionWithTagsWithContext
func (mr *MockCloudFrontAPIMockRecorder) CreateStreamingDistributionWithTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamingDistributionWithTagsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).CreateStreamingDistributionWithTagsWithContext), varargs...)
}

// DeleteCachePolicy mocks base method
func (m *MockCloudFrontAPI) DeleteCachePolicy(arg0 *cloudfront.DeleteCachePolicyInput) (*cloudfront.DeleteCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCachePolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCachePolicy indicates an expected call of DeleteCachePolicy
func (mr *MockCloudFrontAPIMockRecorder) DeleteCachePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachePolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCachePolicy), arg0)
}

// DeleteCachePolicyRequest mocks base method
func (m *MockCloudFrontAPI) DeleteCachePolicyRequest(arg0 *cloudfront.DeleteCachePolicyInput) (*request.Request, *cloudfront.DeleteCachePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCachePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteCachePolicyOutput)
	return ret0, ret1
}

// DeleteCachePolicyRequest indicates an expected call of DeleteCachePolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteCachePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachePolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCachePolicyRequest), arg0)
}

// DeleteCachePolicyWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteCachePolicyWithContext(arg0 context.Context, arg1 *cloudfront.DeleteCachePolicyInput, arg2 ...request.Option) (*cloudfront.DeleteCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCachePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCachePolicyWithContext indicates an expected call of DeleteCachePolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteCachePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachePolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCachePolicyWithContext), varargs...)
}

// DeleteCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) DeleteCloudFrontOriginAccessIdentity(arg0 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCloudFrontOriginAccessIdentity indicates an expected call of DeleteCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) DeleteCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCloudFrontOriginAccessIdentity), arg0)
}

// DeleteCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// DeleteCloudFrontOriginAccessIdentityRequest indicates an expected call of DeleteCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCloudFrontOriginAccessIdentityRequest), arg0)
}

// DeleteCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCloudFrontOriginAccessIdentityWithContext indicates an expected call of DeleteCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// DeleteDistribution mocks base method
func (m *MockCloudFrontAPI) DeleteDistribution(arg0 *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDistribution indicates an expected call of DeleteDistribution
func (mr *MockCloudFrontAPIMockRecorder) DeleteDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteDistribution), arg0)
}

// DeleteDistributionRequest mocks base method
func (m *MockCloudFrontAPI) DeleteDistributionRequest(arg0 *cloudfront.DeleteDistributionInput) (*request.Request, *cloudfront.DeleteDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteDistributionOutput)
	return ret0, ret1
}

// DeleteDistributionRequest indicates an expected call of DeleteDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteDistributionRequest), arg0)
}

// DeleteDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteDistributionWithContext(arg0 context.Context, arg1 *cloudfront.DeleteDistributionInput, arg2 ...request.Option) (*cloudfront.DeleteDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDistributionWithContext indicates an expected call of DeleteDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteDistributionWithContext), varargs...)
}

// DeleteFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionConfig(arg0 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionConfig indicates an expected call of DeleteFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionConfig), arg0)
}

// DeleteFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionConfigRequest(arg0 *cloudfront.DeleteFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionConfigRequest indicates an expected call of DeleteFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionConfigRequest), arg0)
}

// DeleteFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.DeleteFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionConfigWithContext indicates an expected call of DeleteFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionConfigWithContext), varargs...)
}

// DeleteFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionProfile(arg0 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionProfile indicates an expected call of DeleteFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionProfile), arg0)
}

// DeleteFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionProfileRequest(arg0 *cloudfront.DeleteFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.DeleteFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionProfileRequest indicates an expected call of DeleteFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionProfileRequest), arg0)
}

// DeleteFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.DeleteFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.DeleteFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFieldLevelEncryptionProfileWithContext indicates an expected call of DeleteFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteFieldLevelEncryptionProfileWithContext), varargs...)
}

// DeleteKeyGroup mocks base method
func (m *MockCloudFrontAPI) DeleteKeyGroup(arg0 *cloudfront.DeleteKeyGroupInput) (*cloudfront.DeleteKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyGroup", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyGroup indicates an expected call of DeleteKeyGroup
func (mr *MockCloudFrontAPIMockRecorder) DeleteKeyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyGroup", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteKeyGroup), arg0)
}

// DeleteKeyGroupRequest mocks base method
func (m *MockCloudFrontAPI) DeleteKeyGroupRequest(arg0 *cloudfront.DeleteKeyGroupInput) (*request.Request, *cloudfront.DeleteKeyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteKeyGroupOutput)
	return ret0, ret1
}

// DeleteKeyGroupRequest indicates an expected call of DeleteKeyGroupRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteKeyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyGroupRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteKeyGroupRequest), arg0)
}

// DeleteKeyGroupWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteKeyGroupWithContext(arg0 context.Context, arg1 *cloudfront.DeleteKeyGroupInput, arg2 ...request.Option) (*cloudfront.DeleteKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyGroupWithContext indicates an expected call of DeleteKeyGroupWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteKeyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyGroupWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteKeyGroupWithContext), varargs...)
}

// DeleteMonitoringSubscription mocks base method
func (m *MockCloudFrontAPI) DeleteMonitoringSubscription(arg0 *cloudfront.DeleteMonitoringSubscriptionInput) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitoringSubscription", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteMonitoringSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitoringSubscription indicates an expected call of DeleteMonitoringSubscription
func (mr *MockCloudFrontAPIMockRecorder) DeleteMonitoringSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitoringSubscription", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteMonitoringSubscription), arg0)
}

// DeleteMonitoringSubscriptionRequest mocks base method
func (m *MockCloudFrontAPI) DeleteMonitoringSubscriptionRequest(arg0 *cloudfront.DeleteMonitoringSubscriptionInput) (*request.Request, *cloudfront.DeleteMonitoringSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitoringSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteMonitoringSubscriptionOutput)
	return ret0, ret1
}

// DeleteMonitoringSubscriptionRequest indicates an expected call of DeleteMonitoringSubscriptionRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteMonitoringSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitoringSubscriptionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteMonitoringSubscriptionRequest), arg0)
}

// DeleteMonitoringSubscriptionWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteMonitoringSubscriptionWithContext(arg0 context.Context, arg1 *cloudfront.DeleteMonitoringSubscriptionInput, arg2 ...request.Option) (*cloudfront.DeleteMonitoringSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMonitoringSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteMonitoringSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMonitoringSubscriptionWithContext indicates an expected call of DeleteMonitoringSubscriptionWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteMonitoringSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitoringSubscriptionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteMonitoringSubscriptionWithContext), varargs...)
}

// DeleteOriginRequestPolicy mocks base method
func (m *MockCloudFrontAPI) DeleteOriginRequestPolicy(arg0 *cloudfront.DeleteOriginRequestPolicyInput) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginRequestPolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginRequestPolicy indicates an expected call of DeleteOriginRequestPolicy
func (mr *MockCloudFrontAPIMockRecorder) DeleteOriginRequestPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginRequestPolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteOriginRequestPolicy), arg0)
}

// DeleteOriginRequestPolicyRequest mocks base method
func (m *MockCloudFrontAPI) DeleteOriginRequestPolicyRequest(arg0 *cloudfront.DeleteOriginRequestPolicyInput) (*request.Request, *cloudfront.DeleteOriginRequestPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOriginRequestPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteOriginRequestPolicyOutput)
	return ret0, ret1
}

// DeleteOriginRequestPolicyRequest indicates an expected call of DeleteOriginRequestPolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteOriginRequestPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginRequestPolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteOriginRequestPolicyRequest), arg0)
}

// DeleteOriginRequestPolicyWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteOriginRequestPolicyWithContext(arg0 context.Context, arg1 *cloudfront.DeleteOriginRequestPolicyInput, arg2 ...request.Option) (*cloudfront.DeleteOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOriginRequestPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOriginRequestPolicyWithContext indicates an expected call of DeleteOriginRequestPolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteOriginRequestPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOriginRequestPolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteOriginRequestPolicyWithContext), varargs...)
}

// DeletePublicKey mocks base method
func (m *MockCloudFrontAPI) DeletePublicKey(arg0 *cloudfront.DeletePublicKeyInput) (*cloudfront.DeletePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.DeletePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicKey indicates an expected call of DeletePublicKey
func (mr *MockCloudFrontAPIMockRecorder) DeletePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeletePublicKey), arg0)
}

// DeletePublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) DeletePublicKeyRequest(arg0 *cloudfront.DeletePublicKeyInput) (*request.Request, *cloudfront.DeletePublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeletePublicKeyOutput)
	return ret0, ret1
}

// DeletePublicKeyRequest indicates an expected call of DeletePublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) DeletePublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeletePublicKeyRequest), arg0)
}

// DeletePublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) DeletePublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.DeletePublicKeyInput, arg2 ...request.Option) (*cloudfront.DeletePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeletePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicKeyWithContext indicates an expected call of DeletePublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeletePublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeletePublicKeyWithContext), varargs...)
}

// DeleteRealtimeLogConfig mocks base method
func (m *MockCloudFrontAPI) DeleteRealtimeLogConfig(arg0 *cloudfront.DeleteRealtimeLogConfigInput) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealtimeLogConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRealtimeLogConfig indicates an expected call of DeleteRealtimeLogConfig
func (mr *MockCloudFrontAPIMockRecorder) DeleteRealtimeLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealtimeLogConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteRealtimeLogConfig), arg0)
}

// DeleteRealtimeLogConfigRequest mocks base method
func (m *MockCloudFrontAPI) DeleteRealtimeLogConfigRequest(arg0 *cloudfront.DeleteRealtimeLogConfigInput) (*request.Request, *cloudfront.DeleteRealtimeLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealtimeLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteRealtimeLogConfigOutput)
	return ret0, ret1
}

// DeleteRealtimeLogConfigRequest indicates an expected call of DeleteRealtimeLogConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteRealtimeLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealtimeLogConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteRealtimeLogConfigRequest), arg0)
}

// DeleteRealtimeLogConfigWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteRealtimeLogConfigWithContext(arg0 context.Context, arg1 *cloudfront.DeleteRealtimeLogConfigInput, arg2 ...request.Option) (*cloudfront.DeleteRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRealtimeLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRealtimeLogConfigWithContext indicates an expected call of DeleteRealtimeLogConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteRealtimeLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealtimeLogConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteRealtimeLogConfigWithContext), varargs...)
}

// DeleteStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) DeleteStreamingDistribution(arg0 *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.DeleteStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingDistribution indicates an expected call of DeleteStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) DeleteStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteStreamingDistribution), arg0)
}

// DeleteStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) DeleteStreamingDistributionRequest(arg0 *cloudfront.DeleteStreamingDistributionInput) (*request.Request, *cloudfront.DeleteStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.DeleteStreamingDistributionOutput)
	return ret0, ret1
}

// DeleteStreamingDistributionRequest indicates an expected call of DeleteStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) DeleteStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteStreamingDistributionRequest), arg0)
}

// DeleteStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) DeleteStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.DeleteStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamingDistributionWithContext indicates an expected call of DeleteStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) DeleteStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).DeleteStreamingDistributionWithContext), varargs...)
}

// GetCachePolicy mocks base method
func (m *MockCloudFrontAPI) GetCachePolicy(arg0 *cloudfront.GetCachePolicyInput) (*cloudfront.GetCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachePolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.GetCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachePolicy indicates an expected call of GetCachePolicy
func (mr *MockCloudFrontAPIMockRecorder) GetCachePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCachePolicy), arg0)
}

// GetCachePolicyConfig mocks base method
func (m *MockCloudFrontAPI) GetCachePolicyConfig(arg0 *cloudfront.GetCachePolicyConfigInput) (*cloudfront.GetCachePolicyConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachePolicyConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetCachePolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachePolicyConfig indicates an expected call of GetCachePolicyConfig
func (mr *MockCloudFrontAPIMockRecorder) GetCachePolicyConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicyConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCachePolicyConfig), arg0)
}

// GetCachePolicyConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetCachePolicyConfigRequest(arg0 *cloudfront.GetCachePolicyConfigInput) (*request.Request, *cloudfront.GetCachePolicyConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachePolicyConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetCachePolicyConfigOutput)
	return ret0, ret1
}

// GetCachePolicyConfigRequest indicates an expected call of GetCachePolicyConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetCachePolicyConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicyConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCachePolicyConfigRequest), arg0)
}

// GetCachePolicyConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetCachePolicyConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetCachePolicyConfigInput, arg2 ...request.Option) (*cloudfront.GetCachePolicyConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCachePolicyConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCachePolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachePolicyConfigWithContext indicates an expected call of GetCachePolicyConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetCachePolicyConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicyConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCachePolicyConfigWithContext), varargs...)
}

// GetCachePolicyRequest mocks base method
func (m *MockCloudFrontAPI) GetCachePolicyRequest(arg0 *cloudfront.GetCachePolicyInput) (*request.Request, *cloudfront.GetCachePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetCachePolicyOutput)
	return ret0, ret1
}

// GetCachePolicyRequest indicates an expected call of GetCachePolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) GetCachePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCachePolicyRequest), arg0)
}

// GetCachePolicyWithContext mocks base method
func (m *MockCloudFrontAPI) GetCachePolicyWithContext(arg0 context.Context, arg1 *cloudfront.GetCachePolicyInput, arg2 ...request.Option) (*cloudfront.GetCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCachePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachePolicyWithContext indicates an expected call of GetCachePolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetCachePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachePolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCachePolicyWithContext), varargs...)
}

// GetCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentity(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentity indicates an expected call of GetCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentity), arg0)
}

// GetCloudFrontOriginAccessIdentityConfig mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfig(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityConfig indicates an expected call of GetCloudFrontOriginAccessIdentityConfig
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityConfig), arg0)
}

// GetCloudFrontOriginAccessIdentityConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigRequest(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityConfigRequest indicates an expected call of GetCloudFrontOriginAccessIdentityConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityConfigRequest), arg0)
}

// GetCloudFrontOriginAccessIdentityConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, arg2 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityConfigWithContext indicates an expected call of GetCloudFrontOriginAccessIdentityConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityConfigWithContext), varargs...)
}

// GetCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityRequest indicates an expected call of GetCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityRequest), arg0)
}

// GetCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) GetCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudFrontOriginAccessIdentityWithContext indicates an expected call of GetCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// GetDistribution mocks base method
func (m *MockCloudFrontAPI) GetDistribution(arg0 *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.GetDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution
func (mr *MockCloudFrontAPIMockRecorder) GetDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistribution), arg0)
}

// GetDistributionConfig mocks base method
func (m *MockCloudFrontAPI) GetDistributionConfig(arg0 *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionConfig indicates an expected call of GetDistributionConfig
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionConfig), arg0)
}

// GetDistributionConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetDistributionConfigRequest(arg0 *cloudfront.GetDistributionConfigInput) (*request.Request, *cloudfront.GetDistributionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetDistributionConfigOutput)
	return ret0, ret1
}

// GetDistributionConfigRequest indicates an expected call of GetDistributionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionConfigRequest), arg0)
}

// GetDistributionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetDistributionConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetDistributionConfigInput, arg2 ...request.Option) (*cloudfront.GetDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionConfigWithContext indicates an expected call of GetDistributionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionConfigWithContext), varargs...)
}

// GetDistributionRequest mocks base method
func (m *MockCloudFrontAPI) GetDistributionRequest(arg0 *cloudfront.GetDistributionInput) (*request.Request, *cloudfront.GetDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetDistributionOutput)
	return ret0, ret1
}

// GetDistributionRequest indicates an expected call of GetDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionRequest), arg0)
}

// GetDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) GetDistributionWithContext(arg0 context.Context, arg1 *cloudfront.GetDistributionInput, arg2 ...request.Option) (*cloudfront.GetDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistributionWithContext indicates an expected call of GetDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetDistributionWithContext), varargs...)
}

// GetFieldLevelEncryption mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryption(arg0 *cloudfront.GetFieldLevelEncryptionInput) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryption", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryption indicates an expected call of GetFieldLevelEncryption
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryption", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryption), arg0)
}

// GetFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionConfig(arg0 *cloudfront.GetFieldLevelEncryptionConfigInput) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionConfig indicates an expected call of GetFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionConfig), arg0)
}

// GetFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionConfigRequest(arg0 *cloudfront.GetFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionConfigRequest indicates an expected call of GetFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionConfigRequest), arg0)
}

// GetFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionConfigWithContext indicates an expected call of GetFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionConfigWithContext), varargs...)
}

// GetFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfile(arg0 *cloudfront.GetFieldLevelEncryptionProfileInput) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfile indicates an expected call of GetFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfile), arg0)
}

// GetFieldLevelEncryptionProfileConfig mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileConfig(arg0 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileConfig indicates an expected call of GetFieldLevelEncryptionProfileConfig
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileConfig), arg0)
}

// GetFieldLevelEncryptionProfileConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileConfigRequest(arg0 *cloudfront.GetFieldLevelEncryptionProfileConfigInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileConfigRequest indicates an expected call of GetFieldLevelEncryptionProfileConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileConfigRequest), arg0)
}

// GetFieldLevelEncryptionProfileConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionProfileConfigInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileConfigWithContext indicates an expected call of GetFieldLevelEncryptionProfileConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileConfigWithContext), varargs...)
}

// GetFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileRequest(arg0 *cloudfront.GetFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileRequest indicates an expected call of GetFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileRequest), arg0)
}

// GetFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionProfileWithContext indicates an expected call of GetFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionProfileWithContext), varargs...)
}

// GetFieldLevelEncryptionRequest mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionRequest(arg0 *cloudfront.GetFieldLevelEncryptionInput) (*request.Request, *cloudfront.GetFieldLevelEncryptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetFieldLevelEncryptionOutput)
	return ret0, ret1
}

// GetFieldLevelEncryptionRequest indicates an expected call of GetFieldLevelEncryptionRequest
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionRequest), arg0)
}

// GetFieldLevelEncryptionWithContext mocks base method
func (m *MockCloudFrontAPI) GetFieldLevelEncryptionWithContext(arg0 context.Context, arg1 *cloudfront.GetFieldLevelEncryptionInput, arg2 ...request.Option) (*cloudfront.GetFieldLevelEncryptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFieldLevelEncryptionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetFieldLevelEncryptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFieldLevelEncryptionWithContext indicates an expected call of GetFieldLevelEncryptionWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetFieldLevelEncryptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldLevelEncryptionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetFieldLevelEncryptionWithContext), varargs...)
}

// GetInvalidation mocks base method
func (m *MockCloudFrontAPI) GetInvalidation(arg0 *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidation", arg0)
	ret0, _ := ret[0].(*cloudfront.GetInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidation indicates an expected call of GetInvalidation
func (mr *MockCloudFrontAPIMockRecorder) GetInvalidation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidation", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetInvalidation), arg0)
}

// GetInvalidationRequest mocks base method
func (m *MockCloudFrontAPI) GetInvalidationRequest(arg0 *cloudfront.GetInvalidationInput) (*request.Request, *cloudfront.GetInvalidationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalidationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetInvalidationOutput)
	return ret0, ret1
}

// GetInvalidationRequest indicates an expected call of GetInvalidationRequest
func (mr *MockCloudFrontAPIMockRecorder) GetInvalidationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidationRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetInvalidationRequest), arg0)
}

// GetInvalidationWithContext mocks base method
func (m *MockCloudFrontAPI) GetInvalidationWithContext(arg0 context.Context, arg1 *cloudfront.GetInvalidationInput, arg2 ...request.Option) (*cloudfront.GetInvalidationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvalidationWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetInvalidationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvalidationWithContext indicates an expected call of GetInvalidationWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetInvalidationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalidationWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetInvalidationWithContext), varargs...)
}

// GetKeyGroup mocks base method
func (m *MockCloudFrontAPI) GetKeyGroup(arg0 *cloudfront.GetKeyGroupInput) (*cloudfront.GetKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyGroup", arg0)
	ret0, _ := ret[0].(*cloudfront.GetKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyGroup indicates an expected call of GetKeyGroup
func (mr *MockCloudFrontAPIMockRecorder) GetKeyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroup", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetKeyGroup), arg0)
}

// GetKeyGroupConfig mocks base method
func (m *MockCloudFrontAPI) GetKeyGroupConfig(arg0 *cloudfront.GetKeyGroupConfigInput) (*cloudfront.GetKeyGroupConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyGroupConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetKeyGroupConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyGroupConfig indicates an expected call of GetKeyGroupConfig
func (mr *MockCloudFrontAPIMockRecorder) GetKeyGroupConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroupConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetKeyGroupConfig), arg0)
}

// GetKeyGroupConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetKeyGroupConfigRequest(arg0 *cloudfront.GetKeyGroupConfigInput) (*request.Request, *cloudfront.GetKeyGroupConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyGroupConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetKeyGroupConfigOutput)
	return ret0, ret1
}

// GetKeyGroupConfigRequest indicates an expected call of GetKeyGroupConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetKeyGroupConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroupConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetKeyGroupConfigRequest), arg0)
}

// GetKeyGroupConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetKeyGroupConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetKeyGroupConfigInput, arg2 ...request.Option) (*cloudfront.GetKeyGroupConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyGroupConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetKeyGroupConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyGroupConfigWithContext indicates an expected call of GetKeyGroupConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetKeyGroupConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroupConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetKeyGroupConfigWithContext), varargs...)
}

// GetKeyGroupRequest mocks base method
func (m *MockCloudFrontAPI) GetKeyGroupRequest(arg0 *cloudfront.GetKeyGroupInput) (*request.Request, *cloudfront.GetKeyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetKeyGroupOutput)
	return ret0, ret1
}

// GetKeyGroupRequest indicates an expected call of GetKeyGroupRequest
func (mr *MockCloudFrontAPIMockRecorder) GetKeyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroupRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetKeyGroupRequest), arg0)
}

// GetKeyGroupWithContext mocks base method
func (m *MockCloudFrontAPI) GetKeyGroupWithContext(arg0 context.Context, arg1 *cloudfront.GetKeyGroupInput, arg2 ...request.Option) (*cloudfront.GetKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyGroupWithContext indicates an expected call of GetKeyGroupWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetKeyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyGroupWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetKeyGroupWithContext), varargs...)
}

// GetMonitoringSubscription mocks base method
func (m *MockCloudFrontAPI) GetMonitoringSubscription(arg0 *cloudfront.GetMonitoringSubscriptionInput) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitoringSubscription", arg0)
	ret0, _ := ret[0].(*cloudfront.GetMonitoringSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitoringSubscription indicates an expected call of GetMonitoringSubscription
func (mr *MockCloudFrontAPIMockRecorder) GetMonitoringSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringSubscription", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetMonitoringSubscription), arg0)
}

// GetMonitoringSubscriptionRequest mocks base method
func (m *MockCloudFrontAPI) GetMonitoringSubscriptionRequest(arg0 *cloudfront.GetMonitoringSubscriptionInput) (*request.Request, *cloudfront.GetMonitoringSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitoringSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetMonitoringSubscriptionOutput)
	return ret0, ret1
}

// GetMonitoringSubscriptionRequest indicates an expected call of GetMonitoringSubscriptionRequest
func (mr *MockCloudFrontAPIMockRecorder) GetMonitoringSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringSubscriptionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetMonitoringSubscriptionRequest), arg0)
}

// GetMonitoringSubscriptionWithContext mocks base method
func (m *MockCloudFrontAPI) GetMonitoringSubscriptionWithContext(arg0 context.Context, arg1 *cloudfront.GetMonitoringSubscriptionInput, arg2 ...request.Option) (*cloudfront.GetMonitoringSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMonitoringSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetMonitoringSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitoringSubscriptionWithContext indicates an expected call of GetMonitoringSubscriptionWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetMonitoringSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringSubscriptionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetMonitoringSubscriptionWithContext), varargs...)
}

// GetOriginRequestPolicy mocks base method
func (m *MockCloudFrontAPI) GetOriginRequestPolicy(arg0 *cloudfront.GetOriginRequestPolicyInput) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequestPolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.GetOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequestPolicy indicates an expected call of GetOriginRequestPolicy
func (mr *MockCloudFrontAPIMockRecorder) GetOriginRequestPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetOriginRequestPolicy), arg0)
}

// GetOriginRequestPolicyConfig mocks base method
func (m *MockCloudFrontAPI) GetOriginRequestPolicyConfig(arg0 *cloudfront.GetOriginRequestPolicyConfigInput) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequestPolicyConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetOriginRequestPolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequestPolicyConfig indicates an expected call of GetOriginRequestPolicyConfig
func (mr *MockCloudFrontAPIMockRecorder) GetOriginRequestPolicyConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicyConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetOriginRequestPolicyConfig), arg0)
}

// GetOriginRequestPolicyConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetOriginRequestPolicyConfigRequest(arg0 *cloudfront.GetOriginRequestPolicyConfigInput) (*request.Request, *cloudfront.GetOriginRequestPolicyConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequestPolicyConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetOriginRequestPolicyConfigOutput)
	return ret0, ret1
}

// GetOriginRequestPolicyConfigRequest indicates an expected call of GetOriginRequestPolicyConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetOriginRequestPolicyConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicyConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetOriginRequestPolicyConfigRequest), arg0)
}

// GetOriginRequestPolicyConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetOriginRequestPolicyConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetOriginRequestPolicyConfigInput, arg2 ...request.Option) (*cloudfront.GetOriginRequestPolicyConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginRequestPolicyConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetOriginRequestPolicyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequestPolicyConfigWithContext indicates an expected call of GetOriginRequestPolicyConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetOriginRequestPolicyConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicyConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetOriginRequestPolicyConfigWithContext), varargs...)
}

// GetOriginRequestPolicyRequest mocks base method
func (m *MockCloudFrontAPI) GetOriginRequestPolicyRequest(arg0 *cloudfront.GetOriginRequestPolicyInput) (*request.Request, *cloudfront.GetOriginRequestPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequestPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetOriginRequestPolicyOutput)
	return ret0, ret1
}

// GetOriginRequestPolicyRequest indicates an expected call of GetOriginRequestPolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) GetOriginRequestPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetOriginRequestPolicyRequest), arg0)
}

// GetOriginRequestPolicyWithContext mocks base method
func (m *MockCloudFrontAPI) GetOriginRequestPolicyWithContext(arg0 context.Context, arg1 *cloudfront.GetOriginRequestPolicyInput, arg2 ...request.Option) (*cloudfront.GetOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOriginRequestPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequestPolicyWithContext indicates an expected call of GetOriginRequestPolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetOriginRequestPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequestPolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetOriginRequestPolicyWithContext), varargs...)
}

// GetPublicKey mocks base method
func (m *MockCloudFrontAPI) GetPublicKey(arg0 *cloudfront.GetPublicKeyInput) (*cloudfront.GetPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKey), arg0)
}

// GetPublicKeyConfig mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyConfig(arg0 *cloudfront.GetPublicKeyConfigInput) (*cloudfront.GetPublicKeyConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyConfig indicates an expected call of GetPublicKeyConfig
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyConfig), arg0)
}

// GetPublicKeyConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyConfigRequest(arg0 *cloudfront.GetPublicKeyConfigInput) (*request.Request, *cloudfront.GetPublicKeyConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetPublicKeyConfigOutput)
	return ret0, ret1
}

// GetPublicKeyConfigRequest indicates an expected call of GetPublicKeyConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyConfigRequest), arg0)
}

// GetPublicKeyConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetPublicKeyConfigInput, arg2 ...request.Option) (*cloudfront.GetPublicKeyConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKeyConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyConfigWithContext indicates an expected call of GetPublicKeyConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyConfigWithContext), varargs...)
}

// GetPublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyRequest(arg0 *cloudfront.GetPublicKeyInput) (*request.Request, *cloudfront.GetPublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetPublicKeyOutput)
	return ret0, ret1
}

// GetPublicKeyRequest indicates an expected call of GetPublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyRequest), arg0)
}

// GetPublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) GetPublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.GetPublicKeyInput, arg2 ...request.Option) (*cloudfront.GetPublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetPublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyWithContext indicates an expected call of GetPublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetPublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetPublicKeyWithContext), varargs...)
}

// GetRealtimeLogConfig mocks base method
func (m *MockCloudFrontAPI) GetRealtimeLogConfig(arg0 *cloudfront.GetRealtimeLogConfigInput) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealtimeLogConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealtimeLogConfig indicates an expected call of GetRealtimeLogConfig
func (mr *MockCloudFrontAPIMockRecorder) GetRealtimeLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealtimeLogConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetRealtimeLogConfig), arg0)
}

// GetRealtimeLogConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetRealtimeLogConfigRequest(arg0 *cloudfront.GetRealtimeLogConfigInput) (*request.Request, *cloudfront.GetRealtimeLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealtimeLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetRealtimeLogConfigOutput)
	return ret0, ret1
}

// GetRealtimeLogConfigRequest indicates an expected call of GetRealtimeLogConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetRealtimeLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealtimeLogConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetRealtimeLogConfigRequest), arg0)
}

// GetRealtimeLogConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetRealtimeLogConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetRealtimeLogConfigInput, arg2 ...request.Option) (*cloudfront.GetRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRealtimeLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealtimeLogConfigWithContext indicates an expected call of GetRealtimeLogConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetRealtimeLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealtimeLogConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetRealtimeLogConfigWithContext), varargs...)
}

// GetStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistribution(arg0 *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistribution indicates an expected call of GetStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistribution), arg0)
}

// GetStreamingDistributionConfig mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionConfig(arg0 *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistributionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistributionConfig indicates an expected call of GetStreamingDistributionConfig
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionConfig), arg0)
}

// GetStreamingDistributionConfigRequest mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionConfigRequest(arg0 *cloudfront.GetStreamingDistributionConfigInput) (*request.Request, *cloudfront.GetStreamingDistributionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistributionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetStreamingDistributionConfigOutput)
	return ret0, ret1
}

// GetStreamingDistributionConfigRequest indicates an expected call of GetStreamingDistributionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionConfigRequest), arg0)
}

// GetStreamingDistributionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionConfigWithContext(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionConfigInput, arg2 ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingDistributionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistributionConfigWithContext indicates an expected call of GetStreamingDistributionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionConfigWithContext), varargs...)
}

// GetStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionRequest(arg0 *cloudfront.GetStreamingDistributionInput) (*request.Request, *cloudfront.GetStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.GetStreamingDistributionOutput)
	return ret0, ret1
}

// GetStreamingDistributionRequest indicates an expected call of GetStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionRequest), arg0)
}

// GetStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) GetStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.GetStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingDistributionWithContext indicates an expected call of GetStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) GetStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).GetStreamingDistributionWithContext), varargs...)
}

// ListCachePolicies mocks base method
func (m *MockCloudFrontAPI) ListCachePolicies(arg0 *cloudfront.ListCachePoliciesInput) (*cloudfront.ListCachePoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCachePolicies", arg0)
	ret0, _ := ret[0].(*cloudfront.ListCachePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCachePolicies indicates an expected call of ListCachePolicies
func (mr *MockCloudFrontAPIMockRecorder) ListCachePolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCachePolicies", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCachePolicies), arg0)
}

// ListCachePoliciesRequest mocks base method
func (m *MockCloudFrontAPI) ListCachePoliciesRequest(arg0 *cloudfront.ListCachePoliciesInput) (*request.Request, *cloudfront.ListCachePoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCachePoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListCachePoliciesOutput)
	return ret0, ret1
}

// ListCachePoliciesRequest indicates an expected call of ListCachePoliciesRequest
func (mr *MockCloudFrontAPIMockRecorder) ListCachePoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCachePoliciesRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCachePoliciesRequest), arg0)
}

// ListCachePoliciesWithContext mocks base method
func (m *MockCloudFrontAPI) ListCachePoliciesWithContext(arg0 context.Context, arg1 *cloudfront.ListCachePoliciesInput, arg2 ...request.Option) (*cloudfront.ListCachePoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCachePoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListCachePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCachePoliciesWithContext indicates an expected call of ListCachePoliciesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListCachePoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCachePoliciesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCachePoliciesWithContext), varargs...)
}

// ListCloudFrontOriginAccessIdentities mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentities(arg0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentities", arg0)
	ret0, _ := ret[0].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudFrontOriginAccessIdentities indicates an expected call of ListCloudFrontOriginAccessIdentities
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentities", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentities), arg0)
}

// ListCloudFrontOriginAccessIdentitiesPages mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPages(arg0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg1 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCloudFrontOriginAccessIdentitiesPages indicates an expected call of ListCloudFrontOriginAccessIdentitiesPages
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesPages), arg0, arg1)
}

// ListCloudFrontOriginAccessIdentitiesPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCloudFrontOriginAccessIdentitiesPagesWithContext indicates an expected call of ListCloudFrontOriginAccessIdentitiesPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesPagesWithContext), varargs...)
}

// ListCloudFrontOriginAccessIdentitiesRequest mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesRequest(arg0 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*request.Request, *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	return ret0, ret1
}

// ListCloudFrontOriginAccessIdentitiesRequest indicates an expected call of ListCloudFrontOriginAccessIdentitiesRequest
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesRequest), arg0)
}

// ListCloudFrontOriginAccessIdentitiesWithContext mocks base method
func (m *MockCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesWithContext(arg0 context.Context, arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg2 ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCloudFrontOriginAccessIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCloudFrontOriginAccessIdentitiesWithContext indicates an expected call of ListCloudFrontOriginAccessIdentitiesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListCloudFrontOriginAccessIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCloudFrontOriginAccessIdentitiesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListCloudFrontOriginAccessIdentitiesWithContext), varargs...)
}

// ListDistributions mocks base method
func (m *MockCloudFrontAPI) ListDistributions(arg0 *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributions", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions
func (mr *MockCloudFrontAPIMockRecorder) ListDistributions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributions), arg0)
}

// ListDistributionsByCachePolicyId mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByCachePolicyId(arg0 *cloudfront.ListDistributionsByCachePolicyIdInput) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByCachePolicyId", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByCachePolicyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByCachePolicyId indicates an expected call of ListDistributionsByCachePolicyId
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByCachePolicyId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByCachePolicyId", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByCachePolicyId), arg0)
}

// ListDistributionsByCachePolicyIdRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByCachePolicyIdRequest(arg0 *cloudfront.ListDistributionsByCachePolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByCachePolicyIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByCachePolicyIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsByCachePolicyIdOutput)
	return ret0, ret1
}

// ListDistributionsByCachePolicyIdRequest indicates an expected call of ListDistributionsByCachePolicyIdRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByCachePolicyIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByCachePolicyIdRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByCachePolicyIdRequest), arg0)
}

// ListDistributionsByCachePolicyIdWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByCachePolicyIdWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsByCachePolicyIdInput, arg2 ...request.Option) (*cloudfront.ListDistributionsByCachePolicyIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByCachePolicyIdWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByCachePolicyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByCachePolicyIdWithContext indicates an expected call of ListDistributionsByCachePolicyIdWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByCachePolicyIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByCachePolicyIdWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByCachePolicyIdWithContext), varargs...)
}

// ListDistributionsByKeyGroup mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByKeyGroup(arg0 *cloudfront.ListDistributionsByKeyGroupInput) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByKeyGroup", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByKeyGroup indicates an expected call of ListDistributionsByKeyGroup
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByKeyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByKeyGroup", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByKeyGroup), arg0)
}

// ListDistributionsByKeyGroupRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByKeyGroupRequest(arg0 *cloudfront.ListDistributionsByKeyGroupInput) (*request.Request, *cloudfront.ListDistributionsByKeyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByKeyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsByKeyGroupOutput)
	return ret0, ret1
}

// ListDistributionsByKeyGroupRequest indicates an expected call of ListDistributionsByKeyGroupRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByKeyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByKeyGroupRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByKeyGroupRequest), arg0)
}

// ListDistributionsByKeyGroupWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByKeyGroupWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsByKeyGroupInput, arg2 ...request.Option) (*cloudfront.ListDistributionsByKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByKeyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByKeyGroupWithContext indicates an expected call of ListDistributionsByKeyGroupWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByKeyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByKeyGroupWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByKeyGroupWithContext), varargs...)
}

// ListDistributionsByOriginRequestPolicyId mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByOriginRequestPolicyId(arg0 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByOriginRequestPolicyId", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByOriginRequestPolicyId indicates an expected call of ListDistributionsByOriginRequestPolicyId
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByOriginRequestPolicyId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByOriginRequestPolicyId", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByOriginRequestPolicyId), arg0)
}

// ListDistributionsByOriginRequestPolicyIdRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByOriginRequestPolicyIdRequest(arg0 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput) (*request.Request, *cloudfront.ListDistributionsByOriginRequestPolicyIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByOriginRequestPolicyIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)
	return ret0, ret1
}

// ListDistributionsByOriginRequestPolicyIdRequest indicates an expected call of ListDistributionsByOriginRequestPolicyIdRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByOriginRequestPolicyIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByOriginRequestPolicyIdRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByOriginRequestPolicyIdRequest), arg0)
}

// ListDistributionsByOriginRequestPolicyIdWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByOriginRequestPolicyIdWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsByOriginRequestPolicyIdInput, arg2 ...request.Option) (*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByOriginRequestPolicyIdWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByOriginRequestPolicyIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByOriginRequestPolicyIdWithContext indicates an expected call of ListDistributionsByOriginRequestPolicyIdWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByOriginRequestPolicyIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByOriginRequestPolicyIdWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByOriginRequestPolicyIdWithContext), varargs...)
}

// ListDistributionsByRealtimeLogConfig mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByRealtimeLogConfig(arg0 *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByRealtimeLogConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByRealtimeLogConfig indicates an expected call of ListDistributionsByRealtimeLogConfig
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByRealtimeLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByRealtimeLogConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByRealtimeLogConfig), arg0)
}

// ListDistributionsByRealtimeLogConfigRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByRealtimeLogConfigRequest(arg0 *cloudfront.ListDistributionsByRealtimeLogConfigInput) (*request.Request, *cloudfront.ListDistributionsByRealtimeLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByRealtimeLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsByRealtimeLogConfigOutput)
	return ret0, ret1
}

// ListDistributionsByRealtimeLogConfigRequest indicates an expected call of ListDistributionsByRealtimeLogConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByRealtimeLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByRealtimeLogConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByRealtimeLogConfigRequest), arg0)
}

// ListDistributionsByRealtimeLogConfigWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByRealtimeLogConfigWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsByRealtimeLogConfigInput, arg2 ...request.Option) (*cloudfront.ListDistributionsByRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByRealtimeLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByRealtimeLogConfigWithContext indicates an expected call of ListDistributionsByRealtimeLogConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByRealtimeLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByRealtimeLogConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByRealtimeLogConfigWithContext), varargs...)
}

// ListDistributionsByWebACLId mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByWebACLId(arg0 *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByWebACLId", arg0)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByWebACLIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByWebACLId indicates an expected call of ListDistributionsByWebACLId
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByWebACLId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByWebACLId", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByWebACLId), arg0)
}

// ListDistributionsByWebACLIdRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByWebACLIdRequest(arg0 *cloudfront.ListDistributionsByWebACLIdInput) (*request.Request, *cloudfront.ListDistributionsByWebACLIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsByWebACLIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsByWebACLIdOutput)
	return ret0, ret1
}

// ListDistributionsByWebACLIdRequest indicates an expected call of ListDistributionsByWebACLIdRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByWebACLIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByWebACLIdRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByWebACLIdRequest), arg0)
}

// ListDistributionsByWebACLIdWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsByWebACLIdWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsByWebACLIdInput, arg2 ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsByWebACLIdWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsByWebACLIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsByWebACLIdWithContext indicates an expected call of ListDistributionsByWebACLIdWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsByWebACLIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsByWebACLIdWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsByWebACLIdWithContext), varargs...)
}

// ListDistributionsPages mocks base method
func (m *MockCloudFrontAPI) ListDistributionsPages(arg0 *cloudfront.ListDistributionsInput, arg1 func(*cloudfront.ListDistributionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDistributionsPages indicates an expected call of ListDistributionsPages
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsPages), arg0, arg1)
}

// ListDistributionsPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsInput, arg2 func(*cloudfront.ListDistributionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDistributionsPagesWithContext indicates an expected call of ListDistributionsPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsPagesWithContext), varargs...)
}

// ListDistributionsRequest mocks base method
func (m *MockCloudFrontAPI) ListDistributionsRequest(arg0 *cloudfront.ListDistributionsInput) (*request.Request, *cloudfront.ListDistributionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListDistributionsOutput)
	return ret0, ret1
}

// ListDistributionsRequest indicates an expected call of ListDistributionsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsRequest), arg0)
}

// ListDistributionsWithContext mocks base method
func (m *MockCloudFrontAPI) ListDistributionsWithContext(arg0 context.Context, arg1 *cloudfront.ListDistributionsInput, arg2 ...request.Option) (*cloudfront.ListDistributionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDistributionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributionsWithContext indicates an expected call of ListDistributionsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListDistributionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributionsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListDistributionsWithContext), varargs...)
}

// ListFieldLevelEncryptionConfigs mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionConfigs(arg0 *cloudfront.ListFieldLevelEncryptionConfigsInput) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionConfigs", arg0)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionConfigs indicates an expected call of ListFieldLevelEncryptionConfigs
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionConfigs", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionConfigs), arg0)
}

// ListFieldLevelEncryptionConfigsRequest mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionConfigsRequest(arg0 *cloudfront.ListFieldLevelEncryptionConfigsInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	return ret0, ret1
}

// ListFieldLevelEncryptionConfigsRequest indicates an expected call of ListFieldLevelEncryptionConfigsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionConfigsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionConfigsRequest), arg0)
}

// ListFieldLevelEncryptionConfigsWithContext mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionConfigsWithContext(arg0 context.Context, arg1 *cloudfront.ListFieldLevelEncryptionConfigsInput, arg2 ...request.Option) (*cloudfront.ListFieldLevelEncryptionConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionConfigsWithContext indicates an expected call of ListFieldLevelEncryptionConfigsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionConfigsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionConfigsWithContext), varargs...)
}

// ListFieldLevelEncryptionProfiles mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionProfiles(arg0 *cloudfront.ListFieldLevelEncryptionProfilesInput) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionProfiles", arg0)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionProfiles indicates an expected call of ListFieldLevelEncryptionProfiles
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionProfiles", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionProfiles), arg0)
}

// ListFieldLevelEncryptionProfilesRequest mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionProfilesRequest(arg0 *cloudfront.ListFieldLevelEncryptionProfilesInput) (*request.Request, *cloudfront.ListFieldLevelEncryptionProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	return ret0, ret1
}

// ListFieldLevelEncryptionProfilesRequest indicates an expected call of ListFieldLevelEncryptionProfilesRequest
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionProfilesRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionProfilesRequest), arg0)
}

// ListFieldLevelEncryptionProfilesWithContext mocks base method
func (m *MockCloudFrontAPI) ListFieldLevelEncryptionProfilesWithContext(arg0 context.Context, arg1 *cloudfront.ListFieldLevelEncryptionProfilesInput, arg2 ...request.Option) (*cloudfront.ListFieldLevelEncryptionProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFieldLevelEncryptionProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListFieldLevelEncryptionProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFieldLevelEncryptionProfilesWithContext indicates an expected call of ListFieldLevelEncryptionProfilesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListFieldLevelEncryptionProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFieldLevelEncryptionProfilesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListFieldLevelEncryptionProfilesWithContext), varargs...)
}

// ListInvalidations mocks base method
func (m *MockCloudFrontAPI) ListInvalidations(arg0 *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvalidations", arg0)
	ret0, _ := ret[0].(*cloudfront.ListInvalidationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvalidations indicates an expected call of ListInvalidations
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidations", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidations), arg0)
}

// ListInvalidationsPages mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsPages(arg0 *cloudfront.ListInvalidationsInput, arg1 func(*cloudfront.ListInvalidationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvalidationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvalidationsPages indicates an expected call of ListInvalidationsPages
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsPages), arg0, arg1)
}

// ListInvalidationsPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListInvalidationsInput, arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvalidationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvalidationsPagesWithContext indicates an expected call of ListInvalidationsPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsPagesWithContext), varargs...)
}

// ListInvalidationsRequest mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsRequest(arg0 *cloudfront.ListInvalidationsInput) (*request.Request, *cloudfront.ListInvalidationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvalidationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListInvalidationsOutput)
	return ret0, ret1
}

// ListInvalidationsRequest indicates an expected call of ListInvalidationsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsRequest), arg0)
}

// ListInvalidationsWithContext mocks base method
func (m *MockCloudFrontAPI) ListInvalidationsWithContext(arg0 context.Context, arg1 *cloudfront.ListInvalidationsInput, arg2 ...request.Option) (*cloudfront.ListInvalidationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvalidationsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListInvalidationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvalidationsWithContext indicates an expected call of ListInvalidationsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListInvalidationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvalidationsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListInvalidationsWithContext), varargs...)
}

// ListKeyGroups mocks base method
func (m *MockCloudFrontAPI) ListKeyGroups(arg0 *cloudfront.ListKeyGroupsInput) (*cloudfront.ListKeyGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyGroups", arg0)
	ret0, _ := ret[0].(*cloudfront.ListKeyGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyGroups indicates an expected call of ListKeyGroups
func (mr *MockCloudFrontAPIMockRecorder) ListKeyGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyGroups", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListKeyGroups), arg0)
}

// ListKeyGroupsRequest mocks base method
func (m *MockCloudFrontAPI) ListKeyGroupsRequest(arg0 *cloudfront.ListKeyGroupsInput) (*request.Request, *cloudfront.ListKeyGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListKeyGroupsOutput)
	return ret0, ret1
}

// ListKeyGroupsRequest indicates an expected call of ListKeyGroupsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListKeyGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyGroupsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListKeyGroupsRequest), arg0)
}

// ListKeyGroupsWithContext mocks base method
func (m *MockCloudFrontAPI) ListKeyGroupsWithContext(arg0 context.Context, arg1 *cloudfront.ListKeyGroupsInput, arg2 ...request.Option) (*cloudfront.ListKeyGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListKeyGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyGroupsWithContext indicates an expected call of ListKeyGroupsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListKeyGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyGroupsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListKeyGroupsWithContext), varargs...)
}

// ListOriginRequestPolicies mocks base method
func (m *MockCloudFrontAPI) ListOriginRequestPolicies(arg0 *cloudfront.ListOriginRequestPoliciesInput) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginRequestPolicies", arg0)
	ret0, _ := ret[0].(*cloudfront.ListOriginRequestPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginRequestPolicies indicates an expected call of ListOriginRequestPolicies
func (mr *MockCloudFrontAPIMockRecorder) ListOriginRequestPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginRequestPolicies", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListOriginRequestPolicies), arg0)
}

// ListOriginRequestPoliciesRequest mocks base method
func (m *MockCloudFrontAPI) ListOriginRequestPoliciesRequest(arg0 *cloudfront.ListOriginRequestPoliciesInput) (*request.Request, *cloudfront.ListOriginRequestPoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOriginRequestPoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListOriginRequestPoliciesOutput)
	return ret0, ret1
}

// ListOriginRequestPoliciesRequest indicates an expected call of ListOriginRequestPoliciesRequest
func (mr *MockCloudFrontAPIMockRecorder) ListOriginRequestPoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginRequestPoliciesRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListOriginRequestPoliciesRequest), arg0)
}

// ListOriginRequestPoliciesWithContext mocks base method
func (m *MockCloudFrontAPI) ListOriginRequestPoliciesWithContext(arg0 context.Context, arg1 *cloudfront.ListOriginRequestPoliciesInput, arg2 ...request.Option) (*cloudfront.ListOriginRequestPoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOriginRequestPoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListOriginRequestPoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOriginRequestPoliciesWithContext indicates an expected call of ListOriginRequestPoliciesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListOriginRequestPoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOriginRequestPoliciesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListOriginRequestPoliciesWithContext), varargs...)
}

// ListPublicKeys mocks base method
func (m *MockCloudFrontAPI) ListPublicKeys(arg0 *cloudfront.ListPublicKeysInput) (*cloudfront.ListPublicKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeys", arg0)
	ret0, _ := ret[0].(*cloudfront.ListPublicKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeys indicates an expected call of ListPublicKeys
func (mr *MockCloudFrontAPIMockRecorder) ListPublicKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeys", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListPublicKeys), arg0)
}

// ListPublicKeysRequest mocks base method
func (m *MockCloudFrontAPI) ListPublicKeysRequest(arg0 *cloudfront.ListPublicKeysInput) (*request.Request, *cloudfront.ListPublicKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListPublicKeysOutput)
	return ret0, ret1
}

// ListPublicKeysRequest indicates an expected call of ListPublicKeysRequest
func (mr *MockCloudFrontAPIMockRecorder) ListPublicKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeysRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListPublicKeysRequest), arg0)
}

// ListPublicKeysWithContext mocks base method
func (m *MockCloudFrontAPI) ListPublicKeysWithContext(arg0 context.Context, arg1 *cloudfront.ListPublicKeysInput, arg2 ...request.Option) (*cloudfront.ListPublicKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPublicKeysWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListPublicKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicKeysWithContext indicates an expected call of ListPublicKeysWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListPublicKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicKeysWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListPublicKeysWithContext), varargs...)
}

// ListRealtimeLogConfigs mocks base method
func (m *MockCloudFrontAPI) ListRealtimeLogConfigs(arg0 *cloudfront.ListRealtimeLogConfigsInput) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRealtimeLogConfigs", arg0)
	ret0, _ := ret[0].(*cloudfront.ListRealtimeLogConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRealtimeLogConfigs indicates an expected call of ListRealtimeLogConfigs
func (mr *MockCloudFrontAPIMockRecorder) ListRealtimeLogConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRealtimeLogConfigs", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListRealtimeLogConfigs), arg0)
}

// ListRealtimeLogConfigsRequest mocks base method
func (m *MockCloudFrontAPI) ListRealtimeLogConfigsRequest(arg0 *cloudfront.ListRealtimeLogConfigsInput) (*request.Request, *cloudfront.ListRealtimeLogConfigsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRealtimeLogConfigsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListRealtimeLogConfigsOutput)
	return ret0, ret1
}

// ListRealtimeLogConfigsRequest indicates an expected call of ListRealtimeLogConfigsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListRealtimeLogConfigsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRealtimeLogConfigsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListRealtimeLogConfigsRequest), arg0)
}

// ListRealtimeLogConfigsWithContext mocks base method
func (m *MockCloudFrontAPI) ListRealtimeLogConfigsWithContext(arg0 context.Context, arg1 *cloudfront.ListRealtimeLogConfigsInput, arg2 ...request.Option) (*cloudfront.ListRealtimeLogConfigsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRealtimeLogConfigsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListRealtimeLogConfigsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRealtimeLogConfigsWithContext indicates an expected call of ListRealtimeLogConfigsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListRealtimeLogConfigsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRealtimeLogConfigsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListRealtimeLogConfigsWithContext), varargs...)
}

// ListStreamingDistributions mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributions(arg0 *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingDistributions", arg0)
	ret0, _ := ret[0].(*cloudfront.ListStreamingDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingDistributions indicates an expected call of ListStreamingDistributions
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributions", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributions), arg0)
}

// ListStreamingDistributionsPages mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsPages(arg0 *cloudfront.ListStreamingDistributionsInput, arg1 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingDistributionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingDistributionsPages indicates an expected call of ListStreamingDistributionsPages
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsPages", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsPages), arg0, arg1)
}

// ListStreamingDistributionsPagesWithContext mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsPagesWithContext(arg0 context.Context, arg1 *cloudfront.ListStreamingDistributionsInput, arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingDistributionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamingDistributionsPagesWithContext indicates an expected call of ListStreamingDistributionsPagesWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsPagesWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsPagesWithContext), varargs...)
}

// ListStreamingDistributionsRequest mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsRequest(arg0 *cloudfront.ListStreamingDistributionsInput) (*request.Request, *cloudfront.ListStreamingDistributionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamingDistributionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListStreamingDistributionsOutput)
	return ret0, ret1
}

// ListStreamingDistributionsRequest indicates an expected call of ListStreamingDistributionsRequest
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsRequest), arg0)
}

// ListStreamingDistributionsWithContext mocks base method
func (m *MockCloudFrontAPI) ListStreamingDistributionsWithContext(arg0 context.Context, arg1 *cloudfront.ListStreamingDistributionsInput, arg2 ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamingDistributionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListStreamingDistributionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamingDistributionsWithContext indicates an expected call of ListStreamingDistributionsWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListStreamingDistributionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamingDistributionsWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListStreamingDistributionsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCloudFrontAPI) ListTagsForResource(arg0 *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*cloudfront.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCloudFrontAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCloudFrontAPI) ListTagsForResourceRequest(arg0 *cloudfront.ListTagsForResourceInput) (*request.Request, *cloudfront.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCloudFrontAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCloudFrontAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *cloudfront.ListTagsForResourceInput, arg2 ...request.Option) (*cloudfront.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCloudFrontAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCloudFrontAPI) TagResource(arg0 *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*cloudfront.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCloudFrontAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCloudFrontAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCloudFrontAPI) TagResourceRequest(arg0 *cloudfront.TagResourceInput) (*request.Request, *cloudfront.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCloudFrontAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCloudFrontAPI) TagResourceWithContext(arg0 context.Context, arg1 *cloudfront.TagResourceInput, arg2 ...request.Option) (*cloudfront.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCloudFrontAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCloudFrontAPI) UntagResource(arg0 *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*cloudfront.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCloudFrontAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCloudFrontAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCloudFrontAPI) UntagResourceRequest(arg0 *cloudfront.UntagResourceInput) (*request.Request, *cloudfront.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCloudFrontAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCloudFrontAPI) UntagResourceWithContext(arg0 context.Context, arg1 *cloudfront.UntagResourceInput, arg2 ...request.Option) (*cloudfront.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCloudFrontAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateCachePolicy mocks base method
func (m *MockCloudFrontAPI) UpdateCachePolicy(arg0 *cloudfront.UpdateCachePolicyInput) (*cloudfront.UpdateCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCachePolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCachePolicy indicates an expected call of UpdateCachePolicy
func (mr *MockCloudFrontAPIMockRecorder) UpdateCachePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCachePolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCachePolicy), arg0)
}

// UpdateCachePolicyRequest mocks base method
func (m *MockCloudFrontAPI) UpdateCachePolicyRequest(arg0 *cloudfront.UpdateCachePolicyInput) (*request.Request, *cloudfront.UpdateCachePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCachePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateCachePolicyOutput)
	return ret0, ret1
}

// UpdateCachePolicyRequest indicates an expected call of UpdateCachePolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateCachePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCachePolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCachePolicyRequest), arg0)
}

// UpdateCachePolicyWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateCachePolicyWithContext(arg0 context.Context, arg1 *cloudfront.UpdateCachePolicyInput, arg2 ...request.Option) (*cloudfront.UpdateCachePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCachePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateCachePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCachePolicyWithContext indicates an expected call of UpdateCachePolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateCachePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCachePolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCachePolicyWithContext), varargs...)
}

// UpdateCloudFrontOriginAccessIdentity mocks base method
func (m *MockCloudFrontAPI) UpdateCloudFrontOriginAccessIdentity(arg0 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudFrontOriginAccessIdentity", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudFrontOriginAccessIdentity indicates an expected call of UpdateCloudFrontOriginAccessIdentity
func (mr *MockCloudFrontAPIMockRecorder) UpdateCloudFrontOriginAccessIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudFrontOriginAccessIdentity", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCloudFrontOriginAccessIdentity), arg0)
}

// UpdateCloudFrontOriginAccessIdentityRequest mocks base method
func (m *MockCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityRequest(arg0 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudFrontOriginAccessIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	return ret0, ret1
}

// UpdateCloudFrontOriginAccessIdentityRequest indicates an expected call of UpdateCloudFrontOriginAccessIdentityRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateCloudFrontOriginAccessIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudFrontOriginAccessIdentityRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCloudFrontOriginAccessIdentityRequest), arg0)
}

// UpdateCloudFrontOriginAccessIdentityWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityWithContext(arg0 context.Context, arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, arg2 ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCloudFrontOriginAccessIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCloudFrontOriginAccessIdentityWithContext indicates an expected call of UpdateCloudFrontOriginAccessIdentityWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateCloudFrontOriginAccessIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudFrontOriginAccessIdentityWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateCloudFrontOriginAccessIdentityWithContext), varargs...)
}

// UpdateDistribution mocks base method
func (m *MockCloudFrontAPI) UpdateDistribution(arg0 *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDistribution indicates an expected call of UpdateDistribution
func (mr *MockCloudFrontAPIMockRecorder) UpdateDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateDistribution), arg0)
}

// UpdateDistributionRequest mocks base method
func (m *MockCloudFrontAPI) UpdateDistributionRequest(arg0 *cloudfront.UpdateDistributionInput) (*request.Request, *cloudfront.UpdateDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateDistributionOutput)
	return ret0, ret1
}

// UpdateDistributionRequest indicates an expected call of UpdateDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateDistributionRequest), arg0)
}

// UpdateDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateDistributionWithContext(arg0 context.Context, arg1 *cloudfront.UpdateDistributionInput, arg2 ...request.Option) (*cloudfront.UpdateDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDistributionWithContext indicates an expected call of UpdateDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateDistributionWithContext), varargs...)
}

// UpdateFieldLevelEncryptionConfig mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionConfig(arg0 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionConfig indicates an expected call of UpdateFieldLevelEncryptionConfig
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionConfig), arg0)
}

// UpdateFieldLevelEncryptionConfigRequest mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionConfigRequest(arg0 *cloudfront.UpdateFieldLevelEncryptionConfigInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionConfigRequest indicates an expected call of UpdateFieldLevelEncryptionConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionConfigRequest), arg0)
}

// UpdateFieldLevelEncryptionConfigWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionConfigWithContext(arg0 context.Context, arg1 *cloudfront.UpdateFieldLevelEncryptionConfigInput, arg2 ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionConfigWithContext indicates an expected call of UpdateFieldLevelEncryptionConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionConfigWithContext), varargs...)
}

// UpdateFieldLevelEncryptionProfile mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionProfile(arg0 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionProfile", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionProfile indicates an expected call of UpdateFieldLevelEncryptionProfile
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionProfile", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionProfile), arg0)
}

// UpdateFieldLevelEncryptionProfileRequest mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionProfileRequest(arg0 *cloudfront.UpdateFieldLevelEncryptionProfileInput) (*request.Request, *cloudfront.UpdateFieldLevelEncryptionProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionProfileRequest indicates an expected call of UpdateFieldLevelEncryptionProfileRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionProfileRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionProfileRequest), arg0)
}

// UpdateFieldLevelEncryptionProfileWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateFieldLevelEncryptionProfileWithContext(arg0 context.Context, arg1 *cloudfront.UpdateFieldLevelEncryptionProfileInput, arg2 ...request.Option) (*cloudfront.UpdateFieldLevelEncryptionProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFieldLevelEncryptionProfileWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateFieldLevelEncryptionProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFieldLevelEncryptionProfileWithContext indicates an expected call of UpdateFieldLevelEncryptionProfileWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateFieldLevelEncryptionProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFieldLevelEncryptionProfileWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateFieldLevelEncryptionProfileWithContext), varargs...)
}

// UpdateKeyGroup mocks base method
func (m *MockCloudFrontAPI) UpdateKeyGroup(arg0 *cloudfront.UpdateKeyGroupInput) (*cloudfront.UpdateKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyGroup", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeyGroup indicates an expected call of UpdateKeyGroup
func (mr *MockCloudFrontAPIMockRecorder) UpdateKeyGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyGroup", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateKeyGroup), arg0)
}

// UpdateKeyGroupRequest mocks base method
func (m *MockCloudFrontAPI) UpdateKeyGroupRequest(arg0 *cloudfront.UpdateKeyGroupInput) (*request.Request, *cloudfront.UpdateKeyGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateKeyGroupOutput)
	return ret0, ret1
}

// UpdateKeyGroupRequest indicates an expected call of UpdateKeyGroupRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateKeyGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyGroupRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateKeyGroupRequest), arg0)
}

// UpdateKeyGroupWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateKeyGroupWithContext(arg0 context.Context, arg1 *cloudfront.UpdateKeyGroupInput, arg2 ...request.Option) (*cloudfront.UpdateKeyGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKeyGroupWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateKeyGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeyGroupWithContext indicates an expected call of UpdateKeyGroupWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateKeyGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyGroupWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateKeyGroupWithContext), varargs...)
}

// UpdateOriginRequestPolicy mocks base method
func (m *MockCloudFrontAPI) UpdateOriginRequestPolicy(arg0 *cloudfront.UpdateOriginRequestPolicyInput) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOriginRequestPolicy", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOriginRequestPolicy indicates an expected call of UpdateOriginRequestPolicy
func (mr *MockCloudFrontAPIMockRecorder) UpdateOriginRequestPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginRequestPolicy", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateOriginRequestPolicy), arg0)
}

// UpdateOriginRequestPolicyRequest mocks base method
func (m *MockCloudFrontAPI) UpdateOriginRequestPolicyRequest(arg0 *cloudfront.UpdateOriginRequestPolicyInput) (*request.Request, *cloudfront.UpdateOriginRequestPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOriginRequestPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateOriginRequestPolicyOutput)
	return ret0, ret1
}

// UpdateOriginRequestPolicyRequest indicates an expected call of UpdateOriginRequestPolicyRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateOriginRequestPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginRequestPolicyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateOriginRequestPolicyRequest), arg0)
}

// UpdateOriginRequestPolicyWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateOriginRequestPolicyWithContext(arg0 context.Context, arg1 *cloudfront.UpdateOriginRequestPolicyInput, arg2 ...request.Option) (*cloudfront.UpdateOriginRequestPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOriginRequestPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateOriginRequestPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOriginRequestPolicyWithContext indicates an expected call of UpdateOriginRequestPolicyWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateOriginRequestPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOriginRequestPolicyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateOriginRequestPolicyWithContext), varargs...)
}

// UpdatePublicKey mocks base method
func (m *MockCloudFrontAPI) UpdatePublicKey(arg0 *cloudfront.UpdatePublicKeyInput) (*cloudfront.UpdatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicKey", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublicKey indicates an expected call of UpdatePublicKey
func (mr *MockCloudFrontAPIMockRecorder) UpdatePublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKey", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdatePublicKey), arg0)
}

// UpdatePublicKeyRequest mocks base method
func (m *MockCloudFrontAPI) UpdatePublicKeyRequest(arg0 *cloudfront.UpdatePublicKeyInput) (*request.Request, *cloudfront.UpdatePublicKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdatePublicKeyOutput)
	return ret0, ret1
}

// UpdatePublicKeyRequest indicates an expected call of UpdatePublicKeyRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdatePublicKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKeyRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdatePublicKeyRequest), arg0)
}

// UpdatePublicKeyWithContext mocks base method
func (m *MockCloudFrontAPI) UpdatePublicKeyWithContext(arg0 context.Context, arg1 *cloudfront.UpdatePublicKeyInput, arg2 ...request.Option) (*cloudfront.UpdatePublicKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePublicKeyWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdatePublicKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublicKeyWithContext indicates an expected call of UpdatePublicKeyWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdatePublicKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKeyWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdatePublicKeyWithContext), varargs...)
}

// UpdateRealtimeLogConfig mocks base method
func (m *MockCloudFrontAPI) UpdateRealtimeLogConfig(arg0 *cloudfront.UpdateRealtimeLogConfigInput) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealtimeLogConfig", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRealtimeLogConfig indicates an expected call of UpdateRealtimeLogConfig
func (mr *MockCloudFrontAPIMockRecorder) UpdateRealtimeLogConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealtimeLogConfig", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateRealtimeLogConfig), arg0)
}

// UpdateRealtimeLogConfigRequest mocks base method
func (m *MockCloudFrontAPI) UpdateRealtimeLogConfigRequest(arg0 *cloudfront.UpdateRealtimeLogConfigInput) (*request.Request, *cloudfront.UpdateRealtimeLogConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealtimeLogConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateRealtimeLogConfigOutput)
	return ret0, ret1
}

// UpdateRealtimeLogConfigRequest indicates an expected call of UpdateRealtimeLogConfigRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateRealtimeLogConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealtimeLogConfigRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateRealtimeLogConfigRequest), arg0)
}

// UpdateRealtimeLogConfigWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateRealtimeLogConfigWithContext(arg0 context.Context, arg1 *cloudfront.UpdateRealtimeLogConfigInput, arg2 ...request.Option) (*cloudfront.UpdateRealtimeLogConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRealtimeLogConfigWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateRealtimeLogConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRealtimeLogConfigWithContext indicates an expected call of UpdateRealtimeLogConfigWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateRealtimeLogConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealtimeLogConfigWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateRealtimeLogConfigWithContext), varargs...)
}

// UpdateStreamingDistribution mocks base method
func (m *MockCloudFrontAPI) UpdateStreamingDistribution(arg0 *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingDistribution", arg0)
	ret0, _ := ret[0].(*cloudfront.UpdateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamingDistribution indicates an expected call of UpdateStreamingDistribution
func (mr *MockCloudFrontAPIMockRecorder) UpdateStreamingDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingDistribution", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateStreamingDistribution), arg0)
}

// UpdateStreamingDistributionRequest mocks base method
func (m *MockCloudFrontAPI) UpdateStreamingDistributionRequest(arg0 *cloudfront.UpdateStreamingDistributionInput) (*request.Request, *cloudfront.UpdateStreamingDistributionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingDistributionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudfront.UpdateStreamingDistributionOutput)
	return ret0, ret1
}

// UpdateStreamingDistributionRequest indicates an expected call of UpdateStreamingDistributionRequest
func (mr *MockCloudFrontAPIMockRecorder) UpdateStreamingDistributionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingDistributionRequest", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateStreamingDistributionRequest), arg0)
}

// UpdateStreamingDistributionWithContext mocks base method
func (m *MockCloudFrontAPI) UpdateStreamingDistributionWithContext(arg0 context.Context, arg1 *cloudfront.UpdateStreamingDistributionInput, arg2 ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStreamingDistributionWithContext", varargs...)
	ret0, _ := ret[0].(*cloudfront.UpdateStreamingDistributionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamingDistributionWithContext indicates an expected call of UpdateStreamingDistributionWithContext
func (mr *MockCloudFrontAPIMockRecorder) UpdateStreamingDistributionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingDistributionWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).UpdateStreamingDistributionWithContext), varargs...)
}

// WaitUntilDistributionDeployed mocks base method
func (m *MockCloudFrontAPI) WaitUntilDistributionDeployed(arg0 *cloudfront.GetDistributionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDistributionDeployed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDistributionDeployed indicates an expected call of WaitUntilDistributionDeployed
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilDistributionDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDistributionDeployed", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilDistributionDeployed), arg0)
}

// WaitUntilDistributionDeployedWithContext mocks base method
func (m *MockCloudFrontAPI) WaitUntilDistributionDeployedWithContext(arg0 context.Context, arg1 *cloudfront.GetDistributionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilDistributionDeployedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDistributionDeployedWithContext indicates an expected call of WaitUntilDistributionDeployedWithContext
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilDistributionDeployedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDistributionDeployedWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilDistributionDeployedWithContext), varargs...)
}

// WaitUntilInvalidationCompleted mocks base method
func (m *MockCloudFrontAPI) WaitUntilInvalidationCompleted(arg0 *cloudfront.GetInvalidationInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilInvalidationCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInvalidationCompleted indicates an expected call of WaitUntilInvalidationCompleted
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilInvalidationCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInvalidationCompleted", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilInvalidationCompleted), arg0)
}

// WaitUntilInvalidationCompletedWithContext mocks base method
func (m *MockCloudFrontAPI) WaitUntilInvalidationCompletedWithContext(arg0 context.Context, arg1 *cloudfront.GetInvalidationInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilInvalidationCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInvalidationCompletedWithContext indicates an expected call of WaitUntilInvalidationCompletedWithContext
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilInvalidationCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInvalidationCompletedWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilInvalidationCompletedWithContext), varargs...)
}

// WaitUntilStreamingDistributionDeployed mocks base method
func (m *MockCloudFrontAPI) WaitUntilStreamingDistributionDeployed(arg0 *cloudfront.GetStreamingDistributionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilStreamingDistributionDeployed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilStreamingDistributionDeployed indicates an expected call of WaitUntilStreamingDistributionDeployed
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilStreamingDistributionDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilStreamingDistributionDeployed", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilStreamingDistributionDeployed), arg0)
}

// WaitUntilStreamingDistributionDeployedWithContext mocks base method
func (m *MockCloudFrontAPI) WaitUntilStreamingDistributionDeployedWithContext(arg0 context.Context, arg1 *cloudfront.GetStreamingDistributionInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilStreamingDistributionDeployedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilStreamingDistributionDeployedWithContext indicates an expected call of WaitUntilStreamingDistributionDeployedWithContext
func (mr *MockCloudFrontAPIMockRecorder) WaitUntilStreamingDistributionDeployedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilStreamingDistributionDeployedWithContext", reflect.TypeOf((*MockCloudFrontAPI)(nil).WaitUntilStreamingDistributionDeployedWithContext), varargs...)
}

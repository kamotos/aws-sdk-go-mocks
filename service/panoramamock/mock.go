// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/panorama/panoramaiface (interfaces: PanoramaAPI)

// Package panoramamock is a generated GoMock package.
package panoramamock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	panorama "github.com/aws/aws-sdk-go/service/panorama"
	gomock "github.com/golang/mock/gomock"
)

// MockPanoramaAPI is a mock of PanoramaAPI interface.
type MockPanoramaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPanoramaAPIMockRecorder
}

// MockPanoramaAPIMockRecorder is the mock recorder for MockPanoramaAPI.
type MockPanoramaAPIMockRecorder struct {
	mock *MockPanoramaAPI
}

// NewMockPanoramaAPI creates a new mock instance.
func NewMockPanoramaAPI(ctrl *gomock.Controller) *MockPanoramaAPI {
	mock := &MockPanoramaAPI{ctrl: ctrl}
	mock.recorder = &MockPanoramaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPanoramaAPI) EXPECT() *MockPanoramaAPIMockRecorder {
	return m.recorder
}

// CreateApplicationInstance mocks base method.
func (m *MockPanoramaAPI) CreateApplicationInstance(arg0 *panorama.CreateApplicationInstanceInput) (*panorama.CreateApplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationInstance", arg0)
	ret0, _ := ret[0].(*panorama.CreateApplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationInstance indicates an expected call of CreateApplicationInstance.
func (mr *MockPanoramaAPIMockRecorder) CreateApplicationInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationInstance", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateApplicationInstance), arg0)
}

// CreateApplicationInstanceRequest mocks base method.
func (m *MockPanoramaAPI) CreateApplicationInstanceRequest(arg0 *panorama.CreateApplicationInstanceInput) (*request.Request, *panorama.CreateApplicationInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.CreateApplicationInstanceOutput)
	return ret0, ret1
}

// CreateApplicationInstanceRequest indicates an expected call of CreateApplicationInstanceRequest.
func (mr *MockPanoramaAPIMockRecorder) CreateApplicationInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationInstanceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateApplicationInstanceRequest), arg0)
}

// CreateApplicationInstanceWithContext mocks base method.
func (m *MockPanoramaAPI) CreateApplicationInstanceWithContext(arg0 context.Context, arg1 *panorama.CreateApplicationInstanceInput, arg2 ...request.Option) (*panorama.CreateApplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.CreateApplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationInstanceWithContext indicates an expected call of CreateApplicationInstanceWithContext.
func (mr *MockPanoramaAPIMockRecorder) CreateApplicationInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationInstanceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateApplicationInstanceWithContext), varargs...)
}

// CreateJobForDevices mocks base method.
func (m *MockPanoramaAPI) CreateJobForDevices(arg0 *panorama.CreateJobForDevicesInput) (*panorama.CreateJobForDevicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobForDevices", arg0)
	ret0, _ := ret[0].(*panorama.CreateJobForDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobForDevices indicates an expected call of CreateJobForDevices.
func (mr *MockPanoramaAPIMockRecorder) CreateJobForDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobForDevices", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateJobForDevices), arg0)
}

// CreateJobForDevicesRequest mocks base method.
func (m *MockPanoramaAPI) CreateJobForDevicesRequest(arg0 *panorama.CreateJobForDevicesInput) (*request.Request, *panorama.CreateJobForDevicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobForDevicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.CreateJobForDevicesOutput)
	return ret0, ret1
}

// CreateJobForDevicesRequest indicates an expected call of CreateJobForDevicesRequest.
func (mr *MockPanoramaAPIMockRecorder) CreateJobForDevicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobForDevicesRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateJobForDevicesRequest), arg0)
}

// CreateJobForDevicesWithContext mocks base method.
func (m *MockPanoramaAPI) CreateJobForDevicesWithContext(arg0 context.Context, arg1 *panorama.CreateJobForDevicesInput, arg2 ...request.Option) (*panorama.CreateJobForDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobForDevicesWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.CreateJobForDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobForDevicesWithContext indicates an expected call of CreateJobForDevicesWithContext.
func (mr *MockPanoramaAPIMockRecorder) CreateJobForDevicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobForDevicesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateJobForDevicesWithContext), varargs...)
}

// CreateNodeFromTemplateJob mocks base method.
func (m *MockPanoramaAPI) CreateNodeFromTemplateJob(arg0 *panorama.CreateNodeFromTemplateJobInput) (*panorama.CreateNodeFromTemplateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeFromTemplateJob", arg0)
	ret0, _ := ret[0].(*panorama.CreateNodeFromTemplateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeFromTemplateJob indicates an expected call of CreateNodeFromTemplateJob.
func (mr *MockPanoramaAPIMockRecorder) CreateNodeFromTemplateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeFromTemplateJob", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateNodeFromTemplateJob), arg0)
}

// CreateNodeFromTemplateJobRequest mocks base method.
func (m *MockPanoramaAPI) CreateNodeFromTemplateJobRequest(arg0 *panorama.CreateNodeFromTemplateJobInput) (*request.Request, *panorama.CreateNodeFromTemplateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeFromTemplateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.CreateNodeFromTemplateJobOutput)
	return ret0, ret1
}

// CreateNodeFromTemplateJobRequest indicates an expected call of CreateNodeFromTemplateJobRequest.
func (mr *MockPanoramaAPIMockRecorder) CreateNodeFromTemplateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeFromTemplateJobRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateNodeFromTemplateJobRequest), arg0)
}

// CreateNodeFromTemplateJobWithContext mocks base method.
func (m *MockPanoramaAPI) CreateNodeFromTemplateJobWithContext(arg0 context.Context, arg1 *panorama.CreateNodeFromTemplateJobInput, arg2 ...request.Option) (*panorama.CreateNodeFromTemplateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNodeFromTemplateJobWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.CreateNodeFromTemplateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeFromTemplateJobWithContext indicates an expected call of CreateNodeFromTemplateJobWithContext.
func (mr *MockPanoramaAPIMockRecorder) CreateNodeFromTemplateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeFromTemplateJobWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).CreateNodeFromTemplateJobWithContext), varargs...)
}

// CreatePackage mocks base method.
func (m *MockPanoramaAPI) CreatePackage(arg0 *panorama.CreatePackageInput) (*panorama.CreatePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", arg0)
	ret0, _ := ret[0].(*panorama.CreatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockPanoramaAPIMockRecorder) CreatePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockPanoramaAPI)(nil).CreatePackage), arg0)
}

// CreatePackageImportJob mocks base method.
func (m *MockPanoramaAPI) CreatePackageImportJob(arg0 *panorama.CreatePackageImportJobInput) (*panorama.CreatePackageImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageImportJob", arg0)
	ret0, _ := ret[0].(*panorama.CreatePackageImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageImportJob indicates an expected call of CreatePackageImportJob.
func (mr *MockPanoramaAPIMockRecorder) CreatePackageImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageImportJob", reflect.TypeOf((*MockPanoramaAPI)(nil).CreatePackageImportJob), arg0)
}

// CreatePackageImportJobRequest mocks base method.
func (m *MockPanoramaAPI) CreatePackageImportJobRequest(arg0 *panorama.CreatePackageImportJobInput) (*request.Request, *panorama.CreatePackageImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.CreatePackageImportJobOutput)
	return ret0, ret1
}

// CreatePackageImportJobRequest indicates an expected call of CreatePackageImportJobRequest.
func (mr *MockPanoramaAPIMockRecorder) CreatePackageImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageImportJobRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).CreatePackageImportJobRequest), arg0)
}

// CreatePackageImportJobWithContext mocks base method.
func (m *MockPanoramaAPI) CreatePackageImportJobWithContext(arg0 context.Context, arg1 *panorama.CreatePackageImportJobInput, arg2 ...request.Option) (*panorama.CreatePackageImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePackageImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.CreatePackageImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageImportJobWithContext indicates an expected call of CreatePackageImportJobWithContext.
func (mr *MockPanoramaAPIMockRecorder) CreatePackageImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageImportJobWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).CreatePackageImportJobWithContext), varargs...)
}

// CreatePackageRequest mocks base method.
func (m *MockPanoramaAPI) CreatePackageRequest(arg0 *panorama.CreatePackageInput) (*request.Request, *panorama.CreatePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.CreatePackageOutput)
	return ret0, ret1
}

// CreatePackageRequest indicates an expected call of CreatePackageRequest.
func (mr *MockPanoramaAPIMockRecorder) CreatePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).CreatePackageRequest), arg0)
}

// CreatePackageWithContext mocks base method.
func (m *MockPanoramaAPI) CreatePackageWithContext(arg0 context.Context, arg1 *panorama.CreatePackageInput, arg2 ...request.Option) (*panorama.CreatePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePackageWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.CreatePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageWithContext indicates an expected call of CreatePackageWithContext.
func (mr *MockPanoramaAPIMockRecorder) CreatePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).CreatePackageWithContext), varargs...)
}

// DeleteDevice mocks base method.
func (m *MockPanoramaAPI) DeleteDevice(arg0 *panorama.DeleteDeviceInput) (*panorama.DeleteDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0)
	ret0, _ := ret[0].(*panorama.DeleteDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockPanoramaAPIMockRecorder) DeleteDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockPanoramaAPI)(nil).DeleteDevice), arg0)
}

// DeleteDeviceRequest mocks base method.
func (m *MockPanoramaAPI) DeleteDeviceRequest(arg0 *panorama.DeleteDeviceInput) (*request.Request, *panorama.DeleteDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DeleteDeviceOutput)
	return ret0, ret1
}

// DeleteDeviceRequest indicates an expected call of DeleteDeviceRequest.
func (mr *MockPanoramaAPIMockRecorder) DeleteDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DeleteDeviceRequest), arg0)
}

// DeleteDeviceWithContext mocks base method.
func (m *MockPanoramaAPI) DeleteDeviceWithContext(arg0 context.Context, arg1 *panorama.DeleteDeviceInput, arg2 ...request.Option) (*panorama.DeleteDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DeleteDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeviceWithContext indicates an expected call of DeleteDeviceWithContext.
func (mr *MockPanoramaAPIMockRecorder) DeleteDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DeleteDeviceWithContext), varargs...)
}

// DeletePackage mocks base method.
func (m *MockPanoramaAPI) DeletePackage(arg0 *panorama.DeletePackageInput) (*panorama.DeletePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", arg0)
	ret0, _ := ret[0].(*panorama.DeletePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockPanoramaAPIMockRecorder) DeletePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockPanoramaAPI)(nil).DeletePackage), arg0)
}

// DeletePackageRequest mocks base method.
func (m *MockPanoramaAPI) DeletePackageRequest(arg0 *panorama.DeletePackageInput) (*request.Request, *panorama.DeletePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DeletePackageOutput)
	return ret0, ret1
}

// DeletePackageRequest indicates an expected call of DeletePackageRequest.
func (mr *MockPanoramaAPIMockRecorder) DeletePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackageRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DeletePackageRequest), arg0)
}

// DeletePackageWithContext mocks base method.
func (m *MockPanoramaAPI) DeletePackageWithContext(arg0 context.Context, arg1 *panorama.DeletePackageInput, arg2 ...request.Option) (*panorama.DeletePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePackageWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DeletePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackageWithContext indicates an expected call of DeletePackageWithContext.
func (mr *MockPanoramaAPIMockRecorder) DeletePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackageWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DeletePackageWithContext), varargs...)
}

// DeregisterPackageVersion mocks base method.
func (m *MockPanoramaAPI) DeregisterPackageVersion(arg0 *panorama.DeregisterPackageVersionInput) (*panorama.DeregisterPackageVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterPackageVersion", arg0)
	ret0, _ := ret[0].(*panorama.DeregisterPackageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterPackageVersion indicates an expected call of DeregisterPackageVersion.
func (mr *MockPanoramaAPIMockRecorder) DeregisterPackageVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterPackageVersion", reflect.TypeOf((*MockPanoramaAPI)(nil).DeregisterPackageVersion), arg0)
}

// DeregisterPackageVersionRequest mocks base method.
func (m *MockPanoramaAPI) DeregisterPackageVersionRequest(arg0 *panorama.DeregisterPackageVersionInput) (*request.Request, *panorama.DeregisterPackageVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterPackageVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DeregisterPackageVersionOutput)
	return ret0, ret1
}

// DeregisterPackageVersionRequest indicates an expected call of DeregisterPackageVersionRequest.
func (mr *MockPanoramaAPIMockRecorder) DeregisterPackageVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterPackageVersionRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DeregisterPackageVersionRequest), arg0)
}

// DeregisterPackageVersionWithContext mocks base method.
func (m *MockPanoramaAPI) DeregisterPackageVersionWithContext(arg0 context.Context, arg1 *panorama.DeregisterPackageVersionInput, arg2 ...request.Option) (*panorama.DeregisterPackageVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterPackageVersionWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DeregisterPackageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterPackageVersionWithContext indicates an expected call of DeregisterPackageVersionWithContext.
func (mr *MockPanoramaAPIMockRecorder) DeregisterPackageVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterPackageVersionWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DeregisterPackageVersionWithContext), varargs...)
}

// DescribeApplicationInstance mocks base method.
func (m *MockPanoramaAPI) DescribeApplicationInstance(arg0 *panorama.DescribeApplicationInstanceInput) (*panorama.DescribeApplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationInstance", arg0)
	ret0, _ := ret[0].(*panorama.DescribeApplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationInstance indicates an expected call of DescribeApplicationInstance.
func (mr *MockPanoramaAPIMockRecorder) DescribeApplicationInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationInstance", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeApplicationInstance), arg0)
}

// DescribeApplicationInstanceDetails mocks base method.
func (m *MockPanoramaAPI) DescribeApplicationInstanceDetails(arg0 *panorama.DescribeApplicationInstanceDetailsInput) (*panorama.DescribeApplicationInstanceDetailsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationInstanceDetails", arg0)
	ret0, _ := ret[0].(*panorama.DescribeApplicationInstanceDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationInstanceDetails indicates an expected call of DescribeApplicationInstanceDetails.
func (mr *MockPanoramaAPIMockRecorder) DescribeApplicationInstanceDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationInstanceDetails", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeApplicationInstanceDetails), arg0)
}

// DescribeApplicationInstanceDetailsRequest mocks base method.
func (m *MockPanoramaAPI) DescribeApplicationInstanceDetailsRequest(arg0 *panorama.DescribeApplicationInstanceDetailsInput) (*request.Request, *panorama.DescribeApplicationInstanceDetailsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationInstanceDetailsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribeApplicationInstanceDetailsOutput)
	return ret0, ret1
}

// DescribeApplicationInstanceDetailsRequest indicates an expected call of DescribeApplicationInstanceDetailsRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribeApplicationInstanceDetailsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationInstanceDetailsRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeApplicationInstanceDetailsRequest), arg0)
}

// DescribeApplicationInstanceDetailsWithContext mocks base method.
func (m *MockPanoramaAPI) DescribeApplicationInstanceDetailsWithContext(arg0 context.Context, arg1 *panorama.DescribeApplicationInstanceDetailsInput, arg2 ...request.Option) (*panorama.DescribeApplicationInstanceDetailsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationInstanceDetailsWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribeApplicationInstanceDetailsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationInstanceDetailsWithContext indicates an expected call of DescribeApplicationInstanceDetailsWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribeApplicationInstanceDetailsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationInstanceDetailsWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeApplicationInstanceDetailsWithContext), varargs...)
}

// DescribeApplicationInstanceRequest mocks base method.
func (m *MockPanoramaAPI) DescribeApplicationInstanceRequest(arg0 *panorama.DescribeApplicationInstanceInput) (*request.Request, *panorama.DescribeApplicationInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApplicationInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribeApplicationInstanceOutput)
	return ret0, ret1
}

// DescribeApplicationInstanceRequest indicates an expected call of DescribeApplicationInstanceRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribeApplicationInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationInstanceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeApplicationInstanceRequest), arg0)
}

// DescribeApplicationInstanceWithContext mocks base method.
func (m *MockPanoramaAPI) DescribeApplicationInstanceWithContext(arg0 context.Context, arg1 *panorama.DescribeApplicationInstanceInput, arg2 ...request.Option) (*panorama.DescribeApplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeApplicationInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribeApplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApplicationInstanceWithContext indicates an expected call of DescribeApplicationInstanceWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribeApplicationInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApplicationInstanceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeApplicationInstanceWithContext), varargs...)
}

// DescribeDevice mocks base method.
func (m *MockPanoramaAPI) DescribeDevice(arg0 *panorama.DescribeDeviceInput) (*panorama.DescribeDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDevice", arg0)
	ret0, _ := ret[0].(*panorama.DescribeDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDevice indicates an expected call of DescribeDevice.
func (mr *MockPanoramaAPIMockRecorder) DescribeDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDevice", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeDevice), arg0)
}

// DescribeDeviceJob mocks base method.
func (m *MockPanoramaAPI) DescribeDeviceJob(arg0 *panorama.DescribeDeviceJobInput) (*panorama.DescribeDeviceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeviceJob", arg0)
	ret0, _ := ret[0].(*panorama.DescribeDeviceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeviceJob indicates an expected call of DescribeDeviceJob.
func (mr *MockPanoramaAPIMockRecorder) DescribeDeviceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceJob", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeDeviceJob), arg0)
}

// DescribeDeviceJobRequest mocks base method.
func (m *MockPanoramaAPI) DescribeDeviceJobRequest(arg0 *panorama.DescribeDeviceJobInput) (*request.Request, *panorama.DescribeDeviceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeviceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribeDeviceJobOutput)
	return ret0, ret1
}

// DescribeDeviceJobRequest indicates an expected call of DescribeDeviceJobRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribeDeviceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceJobRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeDeviceJobRequest), arg0)
}

// DescribeDeviceJobWithContext mocks base method.
func (m *MockPanoramaAPI) DescribeDeviceJobWithContext(arg0 context.Context, arg1 *panorama.DescribeDeviceJobInput, arg2 ...request.Option) (*panorama.DescribeDeviceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeviceJobWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribeDeviceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeviceJobWithContext indicates an expected call of DescribeDeviceJobWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribeDeviceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceJobWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeDeviceJobWithContext), varargs...)
}

// DescribeDeviceRequest mocks base method.
func (m *MockPanoramaAPI) DescribeDeviceRequest(arg0 *panorama.DescribeDeviceInput) (*request.Request, *panorama.DescribeDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribeDeviceOutput)
	return ret0, ret1
}

// DescribeDeviceRequest indicates an expected call of DescribeDeviceRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribeDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeDeviceRequest), arg0)
}

// DescribeDeviceWithContext mocks base method.
func (m *MockPanoramaAPI) DescribeDeviceWithContext(arg0 context.Context, arg1 *panorama.DescribeDeviceInput, arg2 ...request.Option) (*panorama.DescribeDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribeDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeviceWithContext indicates an expected call of DescribeDeviceWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribeDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeDeviceWithContext), varargs...)
}

// DescribeNode mocks base method.
func (m *MockPanoramaAPI) DescribeNode(arg0 *panorama.DescribeNodeInput) (*panorama.DescribeNodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNode", arg0)
	ret0, _ := ret[0].(*panorama.DescribeNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNode indicates an expected call of DescribeNode.
func (mr *MockPanoramaAPIMockRecorder) DescribeNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNode", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeNode), arg0)
}

// DescribeNodeFromTemplateJob mocks base method.
func (m *MockPanoramaAPI) DescribeNodeFromTemplateJob(arg0 *panorama.DescribeNodeFromTemplateJobInput) (*panorama.DescribeNodeFromTemplateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNodeFromTemplateJob", arg0)
	ret0, _ := ret[0].(*panorama.DescribeNodeFromTemplateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNodeFromTemplateJob indicates an expected call of DescribeNodeFromTemplateJob.
func (mr *MockPanoramaAPIMockRecorder) DescribeNodeFromTemplateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNodeFromTemplateJob", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeNodeFromTemplateJob), arg0)
}

// DescribeNodeFromTemplateJobRequest mocks base method.
func (m *MockPanoramaAPI) DescribeNodeFromTemplateJobRequest(arg0 *panorama.DescribeNodeFromTemplateJobInput) (*request.Request, *panorama.DescribeNodeFromTemplateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNodeFromTemplateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribeNodeFromTemplateJobOutput)
	return ret0, ret1
}

// DescribeNodeFromTemplateJobRequest indicates an expected call of DescribeNodeFromTemplateJobRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribeNodeFromTemplateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNodeFromTemplateJobRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeNodeFromTemplateJobRequest), arg0)
}

// DescribeNodeFromTemplateJobWithContext mocks base method.
func (m *MockPanoramaAPI) DescribeNodeFromTemplateJobWithContext(arg0 context.Context, arg1 *panorama.DescribeNodeFromTemplateJobInput, arg2 ...request.Option) (*panorama.DescribeNodeFromTemplateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNodeFromTemplateJobWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribeNodeFromTemplateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNodeFromTemplateJobWithContext indicates an expected call of DescribeNodeFromTemplateJobWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribeNodeFromTemplateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNodeFromTemplateJobWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeNodeFromTemplateJobWithContext), varargs...)
}

// DescribeNodeRequest mocks base method.
func (m *MockPanoramaAPI) DescribeNodeRequest(arg0 *panorama.DescribeNodeInput) (*request.Request, *panorama.DescribeNodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeNodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribeNodeOutput)
	return ret0, ret1
}

// DescribeNodeRequest indicates an expected call of DescribeNodeRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribeNodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNodeRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeNodeRequest), arg0)
}

// DescribeNodeWithContext mocks base method.
func (m *MockPanoramaAPI) DescribeNodeWithContext(arg0 context.Context, arg1 *panorama.DescribeNodeInput, arg2 ...request.Option) (*panorama.DescribeNodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNodeWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribeNodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNodeWithContext indicates an expected call of DescribeNodeWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribeNodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNodeWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribeNodeWithContext), varargs...)
}

// DescribePackage mocks base method.
func (m *MockPanoramaAPI) DescribePackage(arg0 *panorama.DescribePackageInput) (*panorama.DescribePackageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackage", arg0)
	ret0, _ := ret[0].(*panorama.DescribePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackage indicates an expected call of DescribePackage.
func (mr *MockPanoramaAPIMockRecorder) DescribePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackage", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackage), arg0)
}

// DescribePackageImportJob mocks base method.
func (m *MockPanoramaAPI) DescribePackageImportJob(arg0 *panorama.DescribePackageImportJobInput) (*panorama.DescribePackageImportJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackageImportJob", arg0)
	ret0, _ := ret[0].(*panorama.DescribePackageImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackageImportJob indicates an expected call of DescribePackageImportJob.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageImportJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageImportJob", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageImportJob), arg0)
}

// DescribePackageImportJobRequest mocks base method.
func (m *MockPanoramaAPI) DescribePackageImportJobRequest(arg0 *panorama.DescribePackageImportJobInput) (*request.Request, *panorama.DescribePackageImportJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackageImportJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribePackageImportJobOutput)
	return ret0, ret1
}

// DescribePackageImportJobRequest indicates an expected call of DescribePackageImportJobRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageImportJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageImportJobRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageImportJobRequest), arg0)
}

// DescribePackageImportJobWithContext mocks base method.
func (m *MockPanoramaAPI) DescribePackageImportJobWithContext(arg0 context.Context, arg1 *panorama.DescribePackageImportJobInput, arg2 ...request.Option) (*panorama.DescribePackageImportJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePackageImportJobWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribePackageImportJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackageImportJobWithContext indicates an expected call of DescribePackageImportJobWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageImportJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageImportJobWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageImportJobWithContext), varargs...)
}

// DescribePackageRequest mocks base method.
func (m *MockPanoramaAPI) DescribePackageRequest(arg0 *panorama.DescribePackageInput) (*request.Request, *panorama.DescribePackageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribePackageOutput)
	return ret0, ret1
}

// DescribePackageRequest indicates an expected call of DescribePackageRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageRequest), arg0)
}

// DescribePackageVersion mocks base method.
func (m *MockPanoramaAPI) DescribePackageVersion(arg0 *panorama.DescribePackageVersionInput) (*panorama.DescribePackageVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackageVersion", arg0)
	ret0, _ := ret[0].(*panorama.DescribePackageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackageVersion indicates an expected call of DescribePackageVersion.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageVersion", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageVersion), arg0)
}

// DescribePackageVersionRequest mocks base method.
func (m *MockPanoramaAPI) DescribePackageVersionRequest(arg0 *panorama.DescribePackageVersionInput) (*request.Request, *panorama.DescribePackageVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePackageVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.DescribePackageVersionOutput)
	return ret0, ret1
}

// DescribePackageVersionRequest indicates an expected call of DescribePackageVersionRequest.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageVersionRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageVersionRequest), arg0)
}

// DescribePackageVersionWithContext mocks base method.
func (m *MockPanoramaAPI) DescribePackageVersionWithContext(arg0 context.Context, arg1 *panorama.DescribePackageVersionInput, arg2 ...request.Option) (*panorama.DescribePackageVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePackageVersionWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribePackageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackageVersionWithContext indicates an expected call of DescribePackageVersionWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageVersionWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageVersionWithContext), varargs...)
}

// DescribePackageWithContext mocks base method.
func (m *MockPanoramaAPI) DescribePackageWithContext(arg0 context.Context, arg1 *panorama.DescribePackageInput, arg2 ...request.Option) (*panorama.DescribePackageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePackageWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.DescribePackageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePackageWithContext indicates an expected call of DescribePackageWithContext.
func (mr *MockPanoramaAPIMockRecorder) DescribePackageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePackageWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).DescribePackageWithContext), varargs...)
}

// ListApplicationInstanceDependencies mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceDependencies(arg0 *panorama.ListApplicationInstanceDependenciesInput) (*panorama.ListApplicationInstanceDependenciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstanceDependencies", arg0)
	ret0, _ := ret[0].(*panorama.ListApplicationInstanceDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationInstanceDependencies indicates an expected call of ListApplicationInstanceDependencies.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceDependencies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceDependencies", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceDependencies), arg0)
}

// ListApplicationInstanceDependenciesPages mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceDependenciesPages(arg0 *panorama.ListApplicationInstanceDependenciesInput, arg1 func(*panorama.ListApplicationInstanceDependenciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstanceDependenciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationInstanceDependenciesPages indicates an expected call of ListApplicationInstanceDependenciesPages.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceDependenciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceDependenciesPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceDependenciesPages), arg0, arg1)
}

// ListApplicationInstanceDependenciesPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceDependenciesPagesWithContext(arg0 context.Context, arg1 *panorama.ListApplicationInstanceDependenciesInput, arg2 func(*panorama.ListApplicationInstanceDependenciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationInstanceDependenciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationInstanceDependenciesPagesWithContext indicates an expected call of ListApplicationInstanceDependenciesPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceDependenciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceDependenciesPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceDependenciesPagesWithContext), varargs...)
}

// ListApplicationInstanceDependenciesRequest mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceDependenciesRequest(arg0 *panorama.ListApplicationInstanceDependenciesInput) (*request.Request, *panorama.ListApplicationInstanceDependenciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstanceDependenciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListApplicationInstanceDependenciesOutput)
	return ret0, ret1
}

// ListApplicationInstanceDependenciesRequest indicates an expected call of ListApplicationInstanceDependenciesRequest.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceDependenciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceDependenciesRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceDependenciesRequest), arg0)
}

// ListApplicationInstanceDependenciesWithContext mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceDependenciesWithContext(arg0 context.Context, arg1 *panorama.ListApplicationInstanceDependenciesInput, arg2 ...request.Option) (*panorama.ListApplicationInstanceDependenciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationInstanceDependenciesWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListApplicationInstanceDependenciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationInstanceDependenciesWithContext indicates an expected call of ListApplicationInstanceDependenciesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceDependenciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceDependenciesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceDependenciesWithContext), varargs...)
}

// ListApplicationInstanceNodeInstances mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceNodeInstances(arg0 *panorama.ListApplicationInstanceNodeInstancesInput) (*panorama.ListApplicationInstanceNodeInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstanceNodeInstances", arg0)
	ret0, _ := ret[0].(*panorama.ListApplicationInstanceNodeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationInstanceNodeInstances indicates an expected call of ListApplicationInstanceNodeInstances.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceNodeInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceNodeInstances", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceNodeInstances), arg0)
}

// ListApplicationInstanceNodeInstancesPages mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceNodeInstancesPages(arg0 *panorama.ListApplicationInstanceNodeInstancesInput, arg1 func(*panorama.ListApplicationInstanceNodeInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstanceNodeInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationInstanceNodeInstancesPages indicates an expected call of ListApplicationInstanceNodeInstancesPages.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceNodeInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceNodeInstancesPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceNodeInstancesPages), arg0, arg1)
}

// ListApplicationInstanceNodeInstancesPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceNodeInstancesPagesWithContext(arg0 context.Context, arg1 *panorama.ListApplicationInstanceNodeInstancesInput, arg2 func(*panorama.ListApplicationInstanceNodeInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationInstanceNodeInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationInstanceNodeInstancesPagesWithContext indicates an expected call of ListApplicationInstanceNodeInstancesPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceNodeInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceNodeInstancesPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceNodeInstancesPagesWithContext), varargs...)
}

// ListApplicationInstanceNodeInstancesRequest mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceNodeInstancesRequest(arg0 *panorama.ListApplicationInstanceNodeInstancesInput) (*request.Request, *panorama.ListApplicationInstanceNodeInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstanceNodeInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListApplicationInstanceNodeInstancesOutput)
	return ret0, ret1
}

// ListApplicationInstanceNodeInstancesRequest indicates an expected call of ListApplicationInstanceNodeInstancesRequest.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceNodeInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceNodeInstancesRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceNodeInstancesRequest), arg0)
}

// ListApplicationInstanceNodeInstancesWithContext mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstanceNodeInstancesWithContext(arg0 context.Context, arg1 *panorama.ListApplicationInstanceNodeInstancesInput, arg2 ...request.Option) (*panorama.ListApplicationInstanceNodeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationInstanceNodeInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListApplicationInstanceNodeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationInstanceNodeInstancesWithContext indicates an expected call of ListApplicationInstanceNodeInstancesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstanceNodeInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstanceNodeInstancesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstanceNodeInstancesWithContext), varargs...)
}

// ListApplicationInstances mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstances(arg0 *panorama.ListApplicationInstancesInput) (*panorama.ListApplicationInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstances", arg0)
	ret0, _ := ret[0].(*panorama.ListApplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationInstances indicates an expected call of ListApplicationInstances.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstances", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstances), arg0)
}

// ListApplicationInstancesPages mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstancesPages(arg0 *panorama.ListApplicationInstancesInput, arg1 func(*panorama.ListApplicationInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationInstancesPages indicates an expected call of ListApplicationInstancesPages.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstancesPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstancesPages), arg0, arg1)
}

// ListApplicationInstancesPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstancesPagesWithContext(arg0 context.Context, arg1 *panorama.ListApplicationInstancesInput, arg2 func(*panorama.ListApplicationInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationInstancesPagesWithContext indicates an expected call of ListApplicationInstancesPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstancesPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstancesPagesWithContext), varargs...)
}

// ListApplicationInstancesRequest mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstancesRequest(arg0 *panorama.ListApplicationInstancesInput) (*request.Request, *panorama.ListApplicationInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListApplicationInstancesOutput)
	return ret0, ret1
}

// ListApplicationInstancesRequest indicates an expected call of ListApplicationInstancesRequest.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstancesRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstancesRequest), arg0)
}

// ListApplicationInstancesWithContext mocks base method.
func (m *MockPanoramaAPI) ListApplicationInstancesWithContext(arg0 context.Context, arg1 *panorama.ListApplicationInstancesInput, arg2 ...request.Option) (*panorama.ListApplicationInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListApplicationInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationInstancesWithContext indicates an expected call of ListApplicationInstancesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListApplicationInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationInstancesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListApplicationInstancesWithContext), varargs...)
}

// ListDevices mocks base method.
func (m *MockPanoramaAPI) ListDevices(arg0 *panorama.ListDevicesInput) (*panorama.ListDevicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", arg0)
	ret0, _ := ret[0].(*panorama.ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockPanoramaAPIMockRecorder) ListDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevices), arg0)
}

// ListDevicesJobs mocks base method.
func (m *MockPanoramaAPI) ListDevicesJobs(arg0 *panorama.ListDevicesJobsInput) (*panorama.ListDevicesJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesJobs", arg0)
	ret0, _ := ret[0].(*panorama.ListDevicesJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicesJobs indicates an expected call of ListDevicesJobs.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesJobs", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesJobs), arg0)
}

// ListDevicesJobsPages mocks base method.
func (m *MockPanoramaAPI) ListDevicesJobsPages(arg0 *panorama.ListDevicesJobsInput, arg1 func(*panorama.ListDevicesJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesJobsPages indicates an expected call of ListDevicesJobsPages.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesJobsPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesJobsPages), arg0, arg1)
}

// ListDevicesJobsPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListDevicesJobsPagesWithContext(arg0 context.Context, arg1 *panorama.ListDevicesJobsInput, arg2 func(*panorama.ListDevicesJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesJobsPagesWithContext indicates an expected call of ListDevicesJobsPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesJobsPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesJobsPagesWithContext), varargs...)
}

// ListDevicesJobsRequest mocks base method.
func (m *MockPanoramaAPI) ListDevicesJobsRequest(arg0 *panorama.ListDevicesJobsInput) (*request.Request, *panorama.ListDevicesJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListDevicesJobsOutput)
	return ret0, ret1
}

// ListDevicesJobsRequest indicates an expected call of ListDevicesJobsRequest.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesJobsRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesJobsRequest), arg0)
}

// ListDevicesJobsWithContext mocks base method.
func (m *MockPanoramaAPI) ListDevicesJobsWithContext(arg0 context.Context, arg1 *panorama.ListDevicesJobsInput, arg2 ...request.Option) (*panorama.ListDevicesJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesJobsWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListDevicesJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicesJobsWithContext indicates an expected call of ListDevicesJobsWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesJobsWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesJobsWithContext), varargs...)
}

// ListDevicesPages mocks base method.
func (m *MockPanoramaAPI) ListDevicesPages(arg0 *panorama.ListDevicesInput, arg1 func(*panorama.ListDevicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesPages indicates an expected call of ListDevicesPages.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesPages), arg0, arg1)
}

// ListDevicesPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListDevicesPagesWithContext(arg0 context.Context, arg1 *panorama.ListDevicesInput, arg2 func(*panorama.ListDevicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesPagesWithContext indicates an expected call of ListDevicesPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesPagesWithContext), varargs...)
}

// ListDevicesRequest mocks base method.
func (m *MockPanoramaAPI) ListDevicesRequest(arg0 *panorama.ListDevicesInput) (*request.Request, *panorama.ListDevicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListDevicesOutput)
	return ret0, ret1
}

// ListDevicesRequest indicates an expected call of ListDevicesRequest.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesRequest), arg0)
}

// ListDevicesWithContext mocks base method.
func (m *MockPanoramaAPI) ListDevicesWithContext(arg0 context.Context, arg1 *panorama.ListDevicesInput, arg2 ...request.Option) (*panorama.ListDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicesWithContext indicates an expected call of ListDevicesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListDevicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListDevicesWithContext), varargs...)
}

// ListNodeFromTemplateJobs mocks base method.
func (m *MockPanoramaAPI) ListNodeFromTemplateJobs(arg0 *panorama.ListNodeFromTemplateJobsInput) (*panorama.ListNodeFromTemplateJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodeFromTemplateJobs", arg0)
	ret0, _ := ret[0].(*panorama.ListNodeFromTemplateJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeFromTemplateJobs indicates an expected call of ListNodeFromTemplateJobs.
func (mr *MockPanoramaAPIMockRecorder) ListNodeFromTemplateJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeFromTemplateJobs", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodeFromTemplateJobs), arg0)
}

// ListNodeFromTemplateJobsPages mocks base method.
func (m *MockPanoramaAPI) ListNodeFromTemplateJobsPages(arg0 *panorama.ListNodeFromTemplateJobsInput, arg1 func(*panorama.ListNodeFromTemplateJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodeFromTemplateJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodeFromTemplateJobsPages indicates an expected call of ListNodeFromTemplateJobsPages.
func (mr *MockPanoramaAPIMockRecorder) ListNodeFromTemplateJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeFromTemplateJobsPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodeFromTemplateJobsPages), arg0, arg1)
}

// ListNodeFromTemplateJobsPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListNodeFromTemplateJobsPagesWithContext(arg0 context.Context, arg1 *panorama.ListNodeFromTemplateJobsInput, arg2 func(*panorama.ListNodeFromTemplateJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodeFromTemplateJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodeFromTemplateJobsPagesWithContext indicates an expected call of ListNodeFromTemplateJobsPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListNodeFromTemplateJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeFromTemplateJobsPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodeFromTemplateJobsPagesWithContext), varargs...)
}

// ListNodeFromTemplateJobsRequest mocks base method.
func (m *MockPanoramaAPI) ListNodeFromTemplateJobsRequest(arg0 *panorama.ListNodeFromTemplateJobsInput) (*request.Request, *panorama.ListNodeFromTemplateJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodeFromTemplateJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListNodeFromTemplateJobsOutput)
	return ret0, ret1
}

// ListNodeFromTemplateJobsRequest indicates an expected call of ListNodeFromTemplateJobsRequest.
func (mr *MockPanoramaAPIMockRecorder) ListNodeFromTemplateJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeFromTemplateJobsRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodeFromTemplateJobsRequest), arg0)
}

// ListNodeFromTemplateJobsWithContext mocks base method.
func (m *MockPanoramaAPI) ListNodeFromTemplateJobsWithContext(arg0 context.Context, arg1 *panorama.ListNodeFromTemplateJobsInput, arg2 ...request.Option) (*panorama.ListNodeFromTemplateJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodeFromTemplateJobsWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListNodeFromTemplateJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeFromTemplateJobsWithContext indicates an expected call of ListNodeFromTemplateJobsWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListNodeFromTemplateJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeFromTemplateJobsWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodeFromTemplateJobsWithContext), varargs...)
}

// ListNodes mocks base method.
func (m *MockPanoramaAPI) ListNodes(arg0 *panorama.ListNodesInput) (*panorama.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", arg0)
	ret0, _ := ret[0].(*panorama.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockPanoramaAPIMockRecorder) ListNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodes), arg0)
}

// ListNodesPages mocks base method.
func (m *MockPanoramaAPI) ListNodesPages(arg0 *panorama.ListNodesInput, arg1 func(*panorama.ListNodesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodesPages indicates an expected call of ListNodesPages.
func (mr *MockPanoramaAPIMockRecorder) ListNodesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodesPages), arg0, arg1)
}

// ListNodesPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListNodesPagesWithContext(arg0 context.Context, arg1 *panorama.ListNodesInput, arg2 func(*panorama.ListNodesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodesPagesWithContext indicates an expected call of ListNodesPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListNodesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodesPagesWithContext), varargs...)
}

// ListNodesRequest mocks base method.
func (m *MockPanoramaAPI) ListNodesRequest(arg0 *panorama.ListNodesInput) (*request.Request, *panorama.ListNodesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListNodesOutput)
	return ret0, ret1
}

// ListNodesRequest indicates an expected call of ListNodesRequest.
func (mr *MockPanoramaAPIMockRecorder) ListNodesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodesRequest), arg0)
}

// ListNodesWithContext mocks base method.
func (m *MockPanoramaAPI) ListNodesWithContext(arg0 context.Context, arg1 *panorama.ListNodesInput, arg2 ...request.Option) (*panorama.ListNodesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodesWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListNodesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesWithContext indicates an expected call of ListNodesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListNodesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListNodesWithContext), varargs...)
}

// ListPackageImportJobs mocks base method.
func (m *MockPanoramaAPI) ListPackageImportJobs(arg0 *panorama.ListPackageImportJobsInput) (*panorama.ListPackageImportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackageImportJobs", arg0)
	ret0, _ := ret[0].(*panorama.ListPackageImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackageImportJobs indicates an expected call of ListPackageImportJobs.
func (mr *MockPanoramaAPIMockRecorder) ListPackageImportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageImportJobs", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackageImportJobs), arg0)
}

// ListPackageImportJobsPages mocks base method.
func (m *MockPanoramaAPI) ListPackageImportJobsPages(arg0 *panorama.ListPackageImportJobsInput, arg1 func(*panorama.ListPackageImportJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackageImportJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPackageImportJobsPages indicates an expected call of ListPackageImportJobsPages.
func (mr *MockPanoramaAPIMockRecorder) ListPackageImportJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageImportJobsPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackageImportJobsPages), arg0, arg1)
}

// ListPackageImportJobsPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListPackageImportJobsPagesWithContext(arg0 context.Context, arg1 *panorama.ListPackageImportJobsInput, arg2 func(*panorama.ListPackageImportJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackageImportJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPackageImportJobsPagesWithContext indicates an expected call of ListPackageImportJobsPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListPackageImportJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageImportJobsPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackageImportJobsPagesWithContext), varargs...)
}

// ListPackageImportJobsRequest mocks base method.
func (m *MockPanoramaAPI) ListPackageImportJobsRequest(arg0 *panorama.ListPackageImportJobsInput) (*request.Request, *panorama.ListPackageImportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackageImportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListPackageImportJobsOutput)
	return ret0, ret1
}

// ListPackageImportJobsRequest indicates an expected call of ListPackageImportJobsRequest.
func (mr *MockPanoramaAPIMockRecorder) ListPackageImportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageImportJobsRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackageImportJobsRequest), arg0)
}

// ListPackageImportJobsWithContext mocks base method.
func (m *MockPanoramaAPI) ListPackageImportJobsWithContext(arg0 context.Context, arg1 *panorama.ListPackageImportJobsInput, arg2 ...request.Option) (*panorama.ListPackageImportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackageImportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListPackageImportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackageImportJobsWithContext indicates an expected call of ListPackageImportJobsWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListPackageImportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageImportJobsWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackageImportJobsWithContext), varargs...)
}

// ListPackages mocks base method.
func (m *MockPanoramaAPI) ListPackages(arg0 *panorama.ListPackagesInput) (*panorama.ListPackagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", arg0)
	ret0, _ := ret[0].(*panorama.ListPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockPanoramaAPIMockRecorder) ListPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackages), arg0)
}

// ListPackagesPages mocks base method.
func (m *MockPanoramaAPI) ListPackagesPages(arg0 *panorama.ListPackagesInput, arg1 func(*panorama.ListPackagesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackagesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPackagesPages indicates an expected call of ListPackagesPages.
func (mr *MockPanoramaAPIMockRecorder) ListPackagesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesPages", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackagesPages), arg0, arg1)
}

// ListPackagesPagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListPackagesPagesWithContext(arg0 context.Context, arg1 *panorama.ListPackagesInput, arg2 func(*panorama.ListPackagesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackagesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPackagesPagesWithContext indicates an expected call of ListPackagesPagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListPackagesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesPagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackagesPagesWithContext), varargs...)
}

// ListPackagesRequest mocks base method.
func (m *MockPanoramaAPI) ListPackagesRequest(arg0 *panorama.ListPackagesInput) (*request.Request, *panorama.ListPackagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListPackagesOutput)
	return ret0, ret1
}

// ListPackagesRequest indicates an expected call of ListPackagesRequest.
func (mr *MockPanoramaAPIMockRecorder) ListPackagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackagesRequest), arg0)
}

// ListPackagesWithContext mocks base method.
func (m *MockPanoramaAPI) ListPackagesWithContext(arg0 context.Context, arg1 *panorama.ListPackagesInput, arg2 ...request.Option) (*panorama.ListPackagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackagesWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListPackagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackagesWithContext indicates an expected call of ListPackagesWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListPackagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackagesWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListPackagesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockPanoramaAPI) ListTagsForResource(arg0 *panorama.ListTagsForResourceInput) (*panorama.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*panorama.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockPanoramaAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockPanoramaAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockPanoramaAPI) ListTagsForResourceRequest(arg0 *panorama.ListTagsForResourceInput) (*request.Request, *panorama.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockPanoramaAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockPanoramaAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *panorama.ListTagsForResourceInput, arg2 ...request.Option) (*panorama.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockPanoramaAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ProvisionDevice mocks base method.
func (m *MockPanoramaAPI) ProvisionDevice(arg0 *panorama.ProvisionDeviceInput) (*panorama.ProvisionDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionDevice", arg0)
	ret0, _ := ret[0].(*panorama.ProvisionDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionDevice indicates an expected call of ProvisionDevice.
func (mr *MockPanoramaAPIMockRecorder) ProvisionDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionDevice", reflect.TypeOf((*MockPanoramaAPI)(nil).ProvisionDevice), arg0)
}

// ProvisionDeviceRequest mocks base method.
func (m *MockPanoramaAPI) ProvisionDeviceRequest(arg0 *panorama.ProvisionDeviceInput) (*request.Request, *panorama.ProvisionDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.ProvisionDeviceOutput)
	return ret0, ret1
}

// ProvisionDeviceRequest indicates an expected call of ProvisionDeviceRequest.
func (mr *MockPanoramaAPIMockRecorder) ProvisionDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionDeviceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).ProvisionDeviceRequest), arg0)
}

// ProvisionDeviceWithContext mocks base method.
func (m *MockPanoramaAPI) ProvisionDeviceWithContext(arg0 context.Context, arg1 *panorama.ProvisionDeviceInput, arg2 ...request.Option) (*panorama.ProvisionDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProvisionDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.ProvisionDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionDeviceWithContext indicates an expected call of ProvisionDeviceWithContext.
func (mr *MockPanoramaAPIMockRecorder) ProvisionDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionDeviceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).ProvisionDeviceWithContext), varargs...)
}

// RegisterPackageVersion mocks base method.
func (m *MockPanoramaAPI) RegisterPackageVersion(arg0 *panorama.RegisterPackageVersionInput) (*panorama.RegisterPackageVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPackageVersion", arg0)
	ret0, _ := ret[0].(*panorama.RegisterPackageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPackageVersion indicates an expected call of RegisterPackageVersion.
func (mr *MockPanoramaAPIMockRecorder) RegisterPackageVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPackageVersion", reflect.TypeOf((*MockPanoramaAPI)(nil).RegisterPackageVersion), arg0)
}

// RegisterPackageVersionRequest mocks base method.
func (m *MockPanoramaAPI) RegisterPackageVersionRequest(arg0 *panorama.RegisterPackageVersionInput) (*request.Request, *panorama.RegisterPackageVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPackageVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.RegisterPackageVersionOutput)
	return ret0, ret1
}

// RegisterPackageVersionRequest indicates an expected call of RegisterPackageVersionRequest.
func (mr *MockPanoramaAPIMockRecorder) RegisterPackageVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPackageVersionRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).RegisterPackageVersionRequest), arg0)
}

// RegisterPackageVersionWithContext mocks base method.
func (m *MockPanoramaAPI) RegisterPackageVersionWithContext(arg0 context.Context, arg1 *panorama.RegisterPackageVersionInput, arg2 ...request.Option) (*panorama.RegisterPackageVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterPackageVersionWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.RegisterPackageVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPackageVersionWithContext indicates an expected call of RegisterPackageVersionWithContext.
func (mr *MockPanoramaAPIMockRecorder) RegisterPackageVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPackageVersionWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).RegisterPackageVersionWithContext), varargs...)
}

// RemoveApplicationInstance mocks base method.
func (m *MockPanoramaAPI) RemoveApplicationInstance(arg0 *panorama.RemoveApplicationInstanceInput) (*panorama.RemoveApplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApplicationInstance", arg0)
	ret0, _ := ret[0].(*panorama.RemoveApplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveApplicationInstance indicates an expected call of RemoveApplicationInstance.
func (mr *MockPanoramaAPIMockRecorder) RemoveApplicationInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApplicationInstance", reflect.TypeOf((*MockPanoramaAPI)(nil).RemoveApplicationInstance), arg0)
}

// RemoveApplicationInstanceRequest mocks base method.
func (m *MockPanoramaAPI) RemoveApplicationInstanceRequest(arg0 *panorama.RemoveApplicationInstanceInput) (*request.Request, *panorama.RemoveApplicationInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApplicationInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.RemoveApplicationInstanceOutput)
	return ret0, ret1
}

// RemoveApplicationInstanceRequest indicates an expected call of RemoveApplicationInstanceRequest.
func (mr *MockPanoramaAPIMockRecorder) RemoveApplicationInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApplicationInstanceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).RemoveApplicationInstanceRequest), arg0)
}

// RemoveApplicationInstanceWithContext mocks base method.
func (m *MockPanoramaAPI) RemoveApplicationInstanceWithContext(arg0 context.Context, arg1 *panorama.RemoveApplicationInstanceInput, arg2 ...request.Option) (*panorama.RemoveApplicationInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveApplicationInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.RemoveApplicationInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveApplicationInstanceWithContext indicates an expected call of RemoveApplicationInstanceWithContext.
func (mr *MockPanoramaAPIMockRecorder) RemoveApplicationInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApplicationInstanceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).RemoveApplicationInstanceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockPanoramaAPI) TagResource(arg0 *panorama.TagResourceInput) (*panorama.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*panorama.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockPanoramaAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockPanoramaAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockPanoramaAPI) TagResourceRequest(arg0 *panorama.TagResourceInput) (*request.Request, *panorama.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockPanoramaAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockPanoramaAPI) TagResourceWithContext(arg0 context.Context, arg1 *panorama.TagResourceInput, arg2 ...request.Option) (*panorama.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockPanoramaAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockPanoramaAPI) UntagResource(arg0 *panorama.UntagResourceInput) (*panorama.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*panorama.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockPanoramaAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockPanoramaAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockPanoramaAPI) UntagResourceRequest(arg0 *panorama.UntagResourceInput) (*request.Request, *panorama.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockPanoramaAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockPanoramaAPI) UntagResourceWithContext(arg0 context.Context, arg1 *panorama.UntagResourceInput, arg2 ...request.Option) (*panorama.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockPanoramaAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDeviceMetadata mocks base method.
func (m *MockPanoramaAPI) UpdateDeviceMetadata(arg0 *panorama.UpdateDeviceMetadataInput) (*panorama.UpdateDeviceMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceMetadata", arg0)
	ret0, _ := ret[0].(*panorama.UpdateDeviceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceMetadata indicates an expected call of UpdateDeviceMetadata.
func (mr *MockPanoramaAPIMockRecorder) UpdateDeviceMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceMetadata", reflect.TypeOf((*MockPanoramaAPI)(nil).UpdateDeviceMetadata), arg0)
}

// UpdateDeviceMetadataRequest mocks base method.
func (m *MockPanoramaAPI) UpdateDeviceMetadataRequest(arg0 *panorama.UpdateDeviceMetadataInput) (*request.Request, *panorama.UpdateDeviceMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*panorama.UpdateDeviceMetadataOutput)
	return ret0, ret1
}

// UpdateDeviceMetadataRequest indicates an expected call of UpdateDeviceMetadataRequest.
func (mr *MockPanoramaAPIMockRecorder) UpdateDeviceMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceMetadataRequest", reflect.TypeOf((*MockPanoramaAPI)(nil).UpdateDeviceMetadataRequest), arg0)
}

// UpdateDeviceMetadataWithContext mocks base method.
func (m *MockPanoramaAPI) UpdateDeviceMetadataWithContext(arg0 context.Context, arg1 *panorama.UpdateDeviceMetadataInput, arg2 ...request.Option) (*panorama.UpdateDeviceMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeviceMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*panorama.UpdateDeviceMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceMetadataWithContext indicates an expected call of UpdateDeviceMetadataWithContext.
func (mr *MockPanoramaAPIMockRecorder) UpdateDeviceMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceMetadataWithContext", reflect.TypeOf((*MockPanoramaAPI)(nil).UpdateDeviceMetadataWithContext), varargs...)
}

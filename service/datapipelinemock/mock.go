// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/datapipeline/datapipelineiface (interfaces: DataPipelineAPI)

// Package datapipelinemock is a generated GoMock package.
package datapipelinemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	datapipeline "github.com/aws/aws-sdk-go/service/datapipeline"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataPipelineAPI is a mock of DataPipelineAPI interface
type MockDataPipelineAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDataPipelineAPIMockRecorder
}

// MockDataPipelineAPIMockRecorder is the mock recorder for MockDataPipelineAPI
type MockDataPipelineAPIMockRecorder struct {
	mock *MockDataPipelineAPI
}

// NewMockDataPipelineAPI creates a new mock instance
func NewMockDataPipelineAPI(ctrl *gomock.Controller) *MockDataPipelineAPI {
	mock := &MockDataPipelineAPI{ctrl: ctrl}
	mock.recorder = &MockDataPipelineAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataPipelineAPI) EXPECT() *MockDataPipelineAPIMockRecorder {
	return m.recorder
}

// ActivatePipeline mocks base method
func (m *MockDataPipelineAPI) ActivatePipeline(arg0 *datapipeline.ActivatePipelineInput) (*datapipeline.ActivatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivatePipeline", arg0)
	ret0, _ := ret[0].(*datapipeline.ActivatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivatePipeline indicates an expected call of ActivatePipeline
func (mr *MockDataPipelineAPIMockRecorder) ActivatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivatePipeline", reflect.TypeOf((*MockDataPipelineAPI)(nil).ActivatePipeline), arg0)
}

// ActivatePipelineRequest mocks base method
func (m *MockDataPipelineAPI) ActivatePipelineRequest(arg0 *datapipeline.ActivatePipelineInput) (*request.Request, *datapipeline.ActivatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.ActivatePipelineOutput)
	return ret0, ret1
}

// ActivatePipelineRequest indicates an expected call of ActivatePipelineRequest
func (mr *MockDataPipelineAPIMockRecorder) ActivatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivatePipelineRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).ActivatePipelineRequest), arg0)
}

// ActivatePipelineWithContext mocks base method
func (m *MockDataPipelineAPI) ActivatePipelineWithContext(arg0 context.Context, arg1 *datapipeline.ActivatePipelineInput, arg2 ...request.Option) (*datapipeline.ActivatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.ActivatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivatePipelineWithContext indicates an expected call of ActivatePipelineWithContext
func (mr *MockDataPipelineAPIMockRecorder) ActivatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivatePipelineWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).ActivatePipelineWithContext), varargs...)
}

// AddTags mocks base method
func (m *MockDataPipelineAPI) AddTags(arg0 *datapipeline.AddTagsInput) (*datapipeline.AddTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTags", arg0)
	ret0, _ := ret[0].(*datapipeline.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTags indicates an expected call of AddTags
func (mr *MockDataPipelineAPIMockRecorder) AddTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockDataPipelineAPI)(nil).AddTags), arg0)
}

// AddTagsRequest mocks base method
func (m *MockDataPipelineAPI) AddTagsRequest(arg0 *datapipeline.AddTagsInput) (*request.Request, *datapipeline.AddTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.AddTagsOutput)
	return ret0, ret1
}

// AddTagsRequest indicates an expected call of AddTagsRequest
func (mr *MockDataPipelineAPIMockRecorder) AddTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).AddTagsRequest), arg0)
}

// AddTagsWithContext mocks base method
func (m *MockDataPipelineAPI) AddTagsWithContext(arg0 context.Context, arg1 *datapipeline.AddTagsInput, arg2 ...request.Option) (*datapipeline.AddTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.AddTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsWithContext indicates an expected call of AddTagsWithContext
func (mr *MockDataPipelineAPIMockRecorder) AddTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).AddTagsWithContext), varargs...)
}

// CreatePipeline mocks base method
func (m *MockDataPipelineAPI) CreatePipeline(arg0 *datapipeline.CreatePipelineInput) (*datapipeline.CreatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", arg0)
	ret0, _ := ret[0].(*datapipeline.CreatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockDataPipelineAPIMockRecorder) CreatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockDataPipelineAPI)(nil).CreatePipeline), arg0)
}

// CreatePipelineRequest mocks base method
func (m *MockDataPipelineAPI) CreatePipelineRequest(arg0 *datapipeline.CreatePipelineInput) (*request.Request, *datapipeline.CreatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.CreatePipelineOutput)
	return ret0, ret1
}

// CreatePipelineRequest indicates an expected call of CreatePipelineRequest
func (mr *MockDataPipelineAPIMockRecorder) CreatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).CreatePipelineRequest), arg0)
}

// CreatePipelineWithContext mocks base method
func (m *MockDataPipelineAPI) CreatePipelineWithContext(arg0 context.Context, arg1 *datapipeline.CreatePipelineInput, arg2 ...request.Option) (*datapipeline.CreatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.CreatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipelineWithContext indicates an expected call of CreatePipelineWithContext
func (mr *MockDataPipelineAPIMockRecorder) CreatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).CreatePipelineWithContext), varargs...)
}

// DeactivatePipeline mocks base method
func (m *MockDataPipelineAPI) DeactivatePipeline(arg0 *datapipeline.DeactivatePipelineInput) (*datapipeline.DeactivatePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivatePipeline", arg0)
	ret0, _ := ret[0].(*datapipeline.DeactivatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivatePipeline indicates an expected call of DeactivatePipeline
func (mr *MockDataPipelineAPIMockRecorder) DeactivatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivatePipeline", reflect.TypeOf((*MockDataPipelineAPI)(nil).DeactivatePipeline), arg0)
}

// DeactivatePipelineRequest mocks base method
func (m *MockDataPipelineAPI) DeactivatePipelineRequest(arg0 *datapipeline.DeactivatePipelineInput) (*request.Request, *datapipeline.DeactivatePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivatePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.DeactivatePipelineOutput)
	return ret0, ret1
}

// DeactivatePipelineRequest indicates an expected call of DeactivatePipelineRequest
func (mr *MockDataPipelineAPIMockRecorder) DeactivatePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivatePipelineRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).DeactivatePipelineRequest), arg0)
}

// DeactivatePipelineWithContext mocks base method
func (m *MockDataPipelineAPI) DeactivatePipelineWithContext(arg0 context.Context, arg1 *datapipeline.DeactivatePipelineInput, arg2 ...request.Option) (*datapipeline.DeactivatePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivatePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.DeactivatePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivatePipelineWithContext indicates an expected call of DeactivatePipelineWithContext
func (mr *MockDataPipelineAPIMockRecorder) DeactivatePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivatePipelineWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).DeactivatePipelineWithContext), varargs...)
}

// DeletePipeline mocks base method
func (m *MockDataPipelineAPI) DeletePipeline(arg0 *datapipeline.DeletePipelineInput) (*datapipeline.DeletePipelineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", arg0)
	ret0, _ := ret[0].(*datapipeline.DeletePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockDataPipelineAPIMockRecorder) DeletePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockDataPipelineAPI)(nil).DeletePipeline), arg0)
}

// DeletePipelineRequest mocks base method
func (m *MockDataPipelineAPI) DeletePipelineRequest(arg0 *datapipeline.DeletePipelineInput) (*request.Request, *datapipeline.DeletePipelineOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipelineRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.DeletePipelineOutput)
	return ret0, ret1
}

// DeletePipelineRequest indicates an expected call of DeletePipelineRequest
func (mr *MockDataPipelineAPIMockRecorder) DeletePipelineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).DeletePipelineRequest), arg0)
}

// DeletePipelineWithContext mocks base method
func (m *MockDataPipelineAPI) DeletePipelineWithContext(arg0 context.Context, arg1 *datapipeline.DeletePipelineInput, arg2 ...request.Option) (*datapipeline.DeletePipelineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePipelineWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.DeletePipelineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePipelineWithContext indicates an expected call of DeletePipelineWithContext
func (mr *MockDataPipelineAPIMockRecorder) DeletePipelineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).DeletePipelineWithContext), varargs...)
}

// DescribeObjects mocks base method
func (m *MockDataPipelineAPI) DescribeObjects(arg0 *datapipeline.DescribeObjectsInput) (*datapipeline.DescribeObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeObjects", arg0)
	ret0, _ := ret[0].(*datapipeline.DescribeObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeObjects indicates an expected call of DescribeObjects
func (mr *MockDataPipelineAPIMockRecorder) DescribeObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeObjects", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribeObjects), arg0)
}

// DescribeObjectsPages mocks base method
func (m *MockDataPipelineAPI) DescribeObjectsPages(arg0 *datapipeline.DescribeObjectsInput, arg1 func(*datapipeline.DescribeObjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeObjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeObjectsPages indicates an expected call of DescribeObjectsPages
func (mr *MockDataPipelineAPIMockRecorder) DescribeObjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeObjectsPages", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribeObjectsPages), arg0, arg1)
}

// DescribeObjectsPagesWithContext mocks base method
func (m *MockDataPipelineAPI) DescribeObjectsPagesWithContext(arg0 context.Context, arg1 *datapipeline.DescribeObjectsInput, arg2 func(*datapipeline.DescribeObjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeObjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeObjectsPagesWithContext indicates an expected call of DescribeObjectsPagesWithContext
func (mr *MockDataPipelineAPIMockRecorder) DescribeObjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeObjectsPagesWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribeObjectsPagesWithContext), varargs...)
}

// DescribeObjectsRequest mocks base method
func (m *MockDataPipelineAPI) DescribeObjectsRequest(arg0 *datapipeline.DescribeObjectsInput) (*request.Request, *datapipeline.DescribeObjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeObjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.DescribeObjectsOutput)
	return ret0, ret1
}

// DescribeObjectsRequest indicates an expected call of DescribeObjectsRequest
func (mr *MockDataPipelineAPIMockRecorder) DescribeObjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeObjectsRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribeObjectsRequest), arg0)
}

// DescribeObjectsWithContext mocks base method
func (m *MockDataPipelineAPI) DescribeObjectsWithContext(arg0 context.Context, arg1 *datapipeline.DescribeObjectsInput, arg2 ...request.Option) (*datapipeline.DescribeObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeObjectsWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.DescribeObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeObjectsWithContext indicates an expected call of DescribeObjectsWithContext
func (mr *MockDataPipelineAPIMockRecorder) DescribeObjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeObjectsWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribeObjectsWithContext), varargs...)
}

// DescribePipelines mocks base method
func (m *MockDataPipelineAPI) DescribePipelines(arg0 *datapipeline.DescribePipelinesInput) (*datapipeline.DescribePipelinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePipelines", arg0)
	ret0, _ := ret[0].(*datapipeline.DescribePipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePipelines indicates an expected call of DescribePipelines
func (mr *MockDataPipelineAPIMockRecorder) DescribePipelines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipelines", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribePipelines), arg0)
}

// DescribePipelinesRequest mocks base method
func (m *MockDataPipelineAPI) DescribePipelinesRequest(arg0 *datapipeline.DescribePipelinesInput) (*request.Request, *datapipeline.DescribePipelinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePipelinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.DescribePipelinesOutput)
	return ret0, ret1
}

// DescribePipelinesRequest indicates an expected call of DescribePipelinesRequest
func (mr *MockDataPipelineAPIMockRecorder) DescribePipelinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipelinesRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribePipelinesRequest), arg0)
}

// DescribePipelinesWithContext mocks base method
func (m *MockDataPipelineAPI) DescribePipelinesWithContext(arg0 context.Context, arg1 *datapipeline.DescribePipelinesInput, arg2 ...request.Option) (*datapipeline.DescribePipelinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePipelinesWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.DescribePipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePipelinesWithContext indicates an expected call of DescribePipelinesWithContext
func (mr *MockDataPipelineAPIMockRecorder) DescribePipelinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePipelinesWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).DescribePipelinesWithContext), varargs...)
}

// EvaluateExpression mocks base method
func (m *MockDataPipelineAPI) EvaluateExpression(arg0 *datapipeline.EvaluateExpressionInput) (*datapipeline.EvaluateExpressionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateExpression", arg0)
	ret0, _ := ret[0].(*datapipeline.EvaluateExpressionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateExpression indicates an expected call of EvaluateExpression
func (mr *MockDataPipelineAPIMockRecorder) EvaluateExpression(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateExpression", reflect.TypeOf((*MockDataPipelineAPI)(nil).EvaluateExpression), arg0)
}

// EvaluateExpressionRequest mocks base method
func (m *MockDataPipelineAPI) EvaluateExpressionRequest(arg0 *datapipeline.EvaluateExpressionInput) (*request.Request, *datapipeline.EvaluateExpressionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateExpressionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.EvaluateExpressionOutput)
	return ret0, ret1
}

// EvaluateExpressionRequest indicates an expected call of EvaluateExpressionRequest
func (mr *MockDataPipelineAPIMockRecorder) EvaluateExpressionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateExpressionRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).EvaluateExpressionRequest), arg0)
}

// EvaluateExpressionWithContext mocks base method
func (m *MockDataPipelineAPI) EvaluateExpressionWithContext(arg0 context.Context, arg1 *datapipeline.EvaluateExpressionInput, arg2 ...request.Option) (*datapipeline.EvaluateExpressionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvaluateExpressionWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.EvaluateExpressionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateExpressionWithContext indicates an expected call of EvaluateExpressionWithContext
func (mr *MockDataPipelineAPIMockRecorder) EvaluateExpressionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateExpressionWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).EvaluateExpressionWithContext), varargs...)
}

// GetPipelineDefinition mocks base method
func (m *MockDataPipelineAPI) GetPipelineDefinition(arg0 *datapipeline.GetPipelineDefinitionInput) (*datapipeline.GetPipelineDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineDefinition", arg0)
	ret0, _ := ret[0].(*datapipeline.GetPipelineDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineDefinition indicates an expected call of GetPipelineDefinition
func (mr *MockDataPipelineAPIMockRecorder) GetPipelineDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineDefinition", reflect.TypeOf((*MockDataPipelineAPI)(nil).GetPipelineDefinition), arg0)
}

// GetPipelineDefinitionRequest mocks base method
func (m *MockDataPipelineAPI) GetPipelineDefinitionRequest(arg0 *datapipeline.GetPipelineDefinitionInput) (*request.Request, *datapipeline.GetPipelineDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.GetPipelineDefinitionOutput)
	return ret0, ret1
}

// GetPipelineDefinitionRequest indicates an expected call of GetPipelineDefinitionRequest
func (mr *MockDataPipelineAPIMockRecorder) GetPipelineDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineDefinitionRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).GetPipelineDefinitionRequest), arg0)
}

// GetPipelineDefinitionWithContext mocks base method
func (m *MockDataPipelineAPI) GetPipelineDefinitionWithContext(arg0 context.Context, arg1 *datapipeline.GetPipelineDefinitionInput, arg2 ...request.Option) (*datapipeline.GetPipelineDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipelineDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.GetPipelineDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineDefinitionWithContext indicates an expected call of GetPipelineDefinitionWithContext
func (mr *MockDataPipelineAPIMockRecorder) GetPipelineDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineDefinitionWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).GetPipelineDefinitionWithContext), varargs...)
}

// ListPipelines mocks base method
func (m *MockDataPipelineAPI) ListPipelines(arg0 *datapipeline.ListPipelinesInput) (*datapipeline.ListPipelinesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", arg0)
	ret0, _ := ret[0].(*datapipeline.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines
func (mr *MockDataPipelineAPIMockRecorder) ListPipelines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockDataPipelineAPI)(nil).ListPipelines), arg0)
}

// ListPipelinesPages mocks base method
func (m *MockDataPipelineAPI) ListPipelinesPages(arg0 *datapipeline.ListPipelinesInput, arg1 func(*datapipeline.ListPipelinesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPipelinesPages indicates an expected call of ListPipelinesPages
func (mr *MockDataPipelineAPIMockRecorder) ListPipelinesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesPages", reflect.TypeOf((*MockDataPipelineAPI)(nil).ListPipelinesPages), arg0, arg1)
}

// ListPipelinesPagesWithContext mocks base method
func (m *MockDataPipelineAPI) ListPipelinesPagesWithContext(arg0 context.Context, arg1 *datapipeline.ListPipelinesInput, arg2 func(*datapipeline.ListPipelinesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelinesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPipelinesPagesWithContext indicates an expected call of ListPipelinesPagesWithContext
func (mr *MockDataPipelineAPIMockRecorder) ListPipelinesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesPagesWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).ListPipelinesPagesWithContext), varargs...)
}

// ListPipelinesRequest mocks base method
func (m *MockDataPipelineAPI) ListPipelinesRequest(arg0 *datapipeline.ListPipelinesInput) (*request.Request, *datapipeline.ListPipelinesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.ListPipelinesOutput)
	return ret0, ret1
}

// ListPipelinesRequest indicates an expected call of ListPipelinesRequest
func (mr *MockDataPipelineAPIMockRecorder) ListPipelinesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).ListPipelinesRequest), arg0)
}

// ListPipelinesWithContext mocks base method
func (m *MockDataPipelineAPI) ListPipelinesWithContext(arg0 context.Context, arg1 *datapipeline.ListPipelinesInput, arg2 ...request.Option) (*datapipeline.ListPipelinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelinesWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.ListPipelinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelinesWithContext indicates an expected call of ListPipelinesWithContext
func (mr *MockDataPipelineAPIMockRecorder) ListPipelinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).ListPipelinesWithContext), varargs...)
}

// PollForTask mocks base method
func (m *MockDataPipelineAPI) PollForTask(arg0 *datapipeline.PollForTaskInput) (*datapipeline.PollForTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollForTask", arg0)
	ret0, _ := ret[0].(*datapipeline.PollForTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollForTask indicates an expected call of PollForTask
func (mr *MockDataPipelineAPIMockRecorder) PollForTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollForTask", reflect.TypeOf((*MockDataPipelineAPI)(nil).PollForTask), arg0)
}

// PollForTaskRequest mocks base method
func (m *MockDataPipelineAPI) PollForTaskRequest(arg0 *datapipeline.PollForTaskInput) (*request.Request, *datapipeline.PollForTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollForTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.PollForTaskOutput)
	return ret0, ret1
}

// PollForTaskRequest indicates an expected call of PollForTaskRequest
func (mr *MockDataPipelineAPIMockRecorder) PollForTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollForTaskRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).PollForTaskRequest), arg0)
}

// PollForTaskWithContext mocks base method
func (m *MockDataPipelineAPI) PollForTaskWithContext(arg0 context.Context, arg1 *datapipeline.PollForTaskInput, arg2 ...request.Option) (*datapipeline.PollForTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PollForTaskWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.PollForTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollForTaskWithContext indicates an expected call of PollForTaskWithContext
func (mr *MockDataPipelineAPIMockRecorder) PollForTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollForTaskWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).PollForTaskWithContext), varargs...)
}

// PutPipelineDefinition mocks base method
func (m *MockDataPipelineAPI) PutPipelineDefinition(arg0 *datapipeline.PutPipelineDefinitionInput) (*datapipeline.PutPipelineDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPipelineDefinition", arg0)
	ret0, _ := ret[0].(*datapipeline.PutPipelineDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPipelineDefinition indicates an expected call of PutPipelineDefinition
func (mr *MockDataPipelineAPIMockRecorder) PutPipelineDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPipelineDefinition", reflect.TypeOf((*MockDataPipelineAPI)(nil).PutPipelineDefinition), arg0)
}

// PutPipelineDefinitionRequest mocks base method
func (m *MockDataPipelineAPI) PutPipelineDefinitionRequest(arg0 *datapipeline.PutPipelineDefinitionInput) (*request.Request, *datapipeline.PutPipelineDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPipelineDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.PutPipelineDefinitionOutput)
	return ret0, ret1
}

// PutPipelineDefinitionRequest indicates an expected call of PutPipelineDefinitionRequest
func (mr *MockDataPipelineAPIMockRecorder) PutPipelineDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPipelineDefinitionRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).PutPipelineDefinitionRequest), arg0)
}

// PutPipelineDefinitionWithContext mocks base method
func (m *MockDataPipelineAPI) PutPipelineDefinitionWithContext(arg0 context.Context, arg1 *datapipeline.PutPipelineDefinitionInput, arg2 ...request.Option) (*datapipeline.PutPipelineDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPipelineDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.PutPipelineDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPipelineDefinitionWithContext indicates an expected call of PutPipelineDefinitionWithContext
func (mr *MockDataPipelineAPIMockRecorder) PutPipelineDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPipelineDefinitionWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).PutPipelineDefinitionWithContext), varargs...)
}

// QueryObjects mocks base method
func (m *MockDataPipelineAPI) QueryObjects(arg0 *datapipeline.QueryObjectsInput) (*datapipeline.QueryObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryObjects", arg0)
	ret0, _ := ret[0].(*datapipeline.QueryObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryObjects indicates an expected call of QueryObjects
func (mr *MockDataPipelineAPIMockRecorder) QueryObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjects", reflect.TypeOf((*MockDataPipelineAPI)(nil).QueryObjects), arg0)
}

// QueryObjectsPages mocks base method
func (m *MockDataPipelineAPI) QueryObjectsPages(arg0 *datapipeline.QueryObjectsInput, arg1 func(*datapipeline.QueryObjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryObjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryObjectsPages indicates an expected call of QueryObjectsPages
func (mr *MockDataPipelineAPIMockRecorder) QueryObjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectsPages", reflect.TypeOf((*MockDataPipelineAPI)(nil).QueryObjectsPages), arg0, arg1)
}

// QueryObjectsPagesWithContext mocks base method
func (m *MockDataPipelineAPI) QueryObjectsPagesWithContext(arg0 context.Context, arg1 *datapipeline.QueryObjectsInput, arg2 func(*datapipeline.QueryObjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryObjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryObjectsPagesWithContext indicates an expected call of QueryObjectsPagesWithContext
func (mr *MockDataPipelineAPIMockRecorder) QueryObjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectsPagesWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).QueryObjectsPagesWithContext), varargs...)
}

// QueryObjectsRequest mocks base method
func (m *MockDataPipelineAPI) QueryObjectsRequest(arg0 *datapipeline.QueryObjectsInput) (*request.Request, *datapipeline.QueryObjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryObjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.QueryObjectsOutput)
	return ret0, ret1
}

// QueryObjectsRequest indicates an expected call of QueryObjectsRequest
func (mr *MockDataPipelineAPIMockRecorder) QueryObjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectsRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).QueryObjectsRequest), arg0)
}

// QueryObjectsWithContext mocks base method
func (m *MockDataPipelineAPI) QueryObjectsWithContext(arg0 context.Context, arg1 *datapipeline.QueryObjectsInput, arg2 ...request.Option) (*datapipeline.QueryObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryObjectsWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.QueryObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryObjectsWithContext indicates an expected call of QueryObjectsWithContext
func (mr *MockDataPipelineAPIMockRecorder) QueryObjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectsWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).QueryObjectsWithContext), varargs...)
}

// RemoveTags mocks base method
func (m *MockDataPipelineAPI) RemoveTags(arg0 *datapipeline.RemoveTagsInput) (*datapipeline.RemoveTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTags", arg0)
	ret0, _ := ret[0].(*datapipeline.RemoveTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTags indicates an expected call of RemoveTags
func (mr *MockDataPipelineAPIMockRecorder) RemoveTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTags", reflect.TypeOf((*MockDataPipelineAPI)(nil).RemoveTags), arg0)
}

// RemoveTagsRequest mocks base method
func (m *MockDataPipelineAPI) RemoveTagsRequest(arg0 *datapipeline.RemoveTagsInput) (*request.Request, *datapipeline.RemoveTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.RemoveTagsOutput)
	return ret0, ret1
}

// RemoveTagsRequest indicates an expected call of RemoveTagsRequest
func (mr *MockDataPipelineAPIMockRecorder) RemoveTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).RemoveTagsRequest), arg0)
}

// RemoveTagsWithContext mocks base method
func (m *MockDataPipelineAPI) RemoveTagsWithContext(arg0 context.Context, arg1 *datapipeline.RemoveTagsInput, arg2 ...request.Option) (*datapipeline.RemoveTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.RemoveTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsWithContext indicates an expected call of RemoveTagsWithContext
func (mr *MockDataPipelineAPIMockRecorder) RemoveTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).RemoveTagsWithContext), varargs...)
}

// ReportTaskProgress mocks base method
func (m *MockDataPipelineAPI) ReportTaskProgress(arg0 *datapipeline.ReportTaskProgressInput) (*datapipeline.ReportTaskProgressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportTaskProgress", arg0)
	ret0, _ := ret[0].(*datapipeline.ReportTaskProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportTaskProgress indicates an expected call of ReportTaskProgress
func (mr *MockDataPipelineAPIMockRecorder) ReportTaskProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTaskProgress", reflect.TypeOf((*MockDataPipelineAPI)(nil).ReportTaskProgress), arg0)
}

// ReportTaskProgressRequest mocks base method
func (m *MockDataPipelineAPI) ReportTaskProgressRequest(arg0 *datapipeline.ReportTaskProgressInput) (*request.Request, *datapipeline.ReportTaskProgressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportTaskProgressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.ReportTaskProgressOutput)
	return ret0, ret1
}

// ReportTaskProgressRequest indicates an expected call of ReportTaskProgressRequest
func (mr *MockDataPipelineAPIMockRecorder) ReportTaskProgressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTaskProgressRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).ReportTaskProgressRequest), arg0)
}

// ReportTaskProgressWithContext mocks base method
func (m *MockDataPipelineAPI) ReportTaskProgressWithContext(arg0 context.Context, arg1 *datapipeline.ReportTaskProgressInput, arg2 ...request.Option) (*datapipeline.ReportTaskProgressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportTaskProgressWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.ReportTaskProgressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportTaskProgressWithContext indicates an expected call of ReportTaskProgressWithContext
func (mr *MockDataPipelineAPIMockRecorder) ReportTaskProgressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTaskProgressWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).ReportTaskProgressWithContext), varargs...)
}

// ReportTaskRunnerHeartbeat mocks base method
func (m *MockDataPipelineAPI) ReportTaskRunnerHeartbeat(arg0 *datapipeline.ReportTaskRunnerHeartbeatInput) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportTaskRunnerHeartbeat", arg0)
	ret0, _ := ret[0].(*datapipeline.ReportTaskRunnerHeartbeatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportTaskRunnerHeartbeat indicates an expected call of ReportTaskRunnerHeartbeat
func (mr *MockDataPipelineAPIMockRecorder) ReportTaskRunnerHeartbeat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTaskRunnerHeartbeat", reflect.TypeOf((*MockDataPipelineAPI)(nil).ReportTaskRunnerHeartbeat), arg0)
}

// ReportTaskRunnerHeartbeatRequest mocks base method
func (m *MockDataPipelineAPI) ReportTaskRunnerHeartbeatRequest(arg0 *datapipeline.ReportTaskRunnerHeartbeatInput) (*request.Request, *datapipeline.ReportTaskRunnerHeartbeatOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportTaskRunnerHeartbeatRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.ReportTaskRunnerHeartbeatOutput)
	return ret0, ret1
}

// ReportTaskRunnerHeartbeatRequest indicates an expected call of ReportTaskRunnerHeartbeatRequest
func (mr *MockDataPipelineAPIMockRecorder) ReportTaskRunnerHeartbeatRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTaskRunnerHeartbeatRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).ReportTaskRunnerHeartbeatRequest), arg0)
}

// ReportTaskRunnerHeartbeatWithContext mocks base method
func (m *MockDataPipelineAPI) ReportTaskRunnerHeartbeatWithContext(arg0 context.Context, arg1 *datapipeline.ReportTaskRunnerHeartbeatInput, arg2 ...request.Option) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportTaskRunnerHeartbeatWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.ReportTaskRunnerHeartbeatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportTaskRunnerHeartbeatWithContext indicates an expected call of ReportTaskRunnerHeartbeatWithContext
func (mr *MockDataPipelineAPIMockRecorder) ReportTaskRunnerHeartbeatWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTaskRunnerHeartbeatWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).ReportTaskRunnerHeartbeatWithContext), varargs...)
}

// SetStatus mocks base method
func (m *MockDataPipelineAPI) SetStatus(arg0 *datapipeline.SetStatusInput) (*datapipeline.SetStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0)
	ret0, _ := ret[0].(*datapipeline.SetStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockDataPipelineAPIMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDataPipelineAPI)(nil).SetStatus), arg0)
}

// SetStatusRequest mocks base method
func (m *MockDataPipelineAPI) SetStatusRequest(arg0 *datapipeline.SetStatusInput) (*request.Request, *datapipeline.SetStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.SetStatusOutput)
	return ret0, ret1
}

// SetStatusRequest indicates an expected call of SetStatusRequest
func (mr *MockDataPipelineAPIMockRecorder) SetStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).SetStatusRequest), arg0)
}

// SetStatusWithContext mocks base method
func (m *MockDataPipelineAPI) SetStatusWithContext(arg0 context.Context, arg1 *datapipeline.SetStatusInput, arg2 ...request.Option) (*datapipeline.SetStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStatusWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.SetStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatusWithContext indicates an expected call of SetStatusWithContext
func (mr *MockDataPipelineAPIMockRecorder) SetStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).SetStatusWithContext), varargs...)
}

// SetTaskStatus mocks base method
func (m *MockDataPipelineAPI) SetTaskStatus(arg0 *datapipeline.SetTaskStatusInput) (*datapipeline.SetTaskStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskStatus", arg0)
	ret0, _ := ret[0].(*datapipeline.SetTaskStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTaskStatus indicates an expected call of SetTaskStatus
func (mr *MockDataPipelineAPIMockRecorder) SetTaskStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatus", reflect.TypeOf((*MockDataPipelineAPI)(nil).SetTaskStatus), arg0)
}

// SetTaskStatusRequest mocks base method
func (m *MockDataPipelineAPI) SetTaskStatusRequest(arg0 *datapipeline.SetTaskStatusInput) (*request.Request, *datapipeline.SetTaskStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.SetTaskStatusOutput)
	return ret0, ret1
}

// SetTaskStatusRequest indicates an expected call of SetTaskStatusRequest
func (mr *MockDataPipelineAPIMockRecorder) SetTaskStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatusRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).SetTaskStatusRequest), arg0)
}

// SetTaskStatusWithContext mocks base method
func (m *MockDataPipelineAPI) SetTaskStatusWithContext(arg0 context.Context, arg1 *datapipeline.SetTaskStatusInput, arg2 ...request.Option) (*datapipeline.SetTaskStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTaskStatusWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.SetTaskStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTaskStatusWithContext indicates an expected call of SetTaskStatusWithContext
func (mr *MockDataPipelineAPIMockRecorder) SetTaskStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatusWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).SetTaskStatusWithContext), varargs...)
}

// ValidatePipelineDefinition mocks base method
func (m *MockDataPipelineAPI) ValidatePipelineDefinition(arg0 *datapipeline.ValidatePipelineDefinitionInput) (*datapipeline.ValidatePipelineDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePipelineDefinition", arg0)
	ret0, _ := ret[0].(*datapipeline.ValidatePipelineDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePipelineDefinition indicates an expected call of ValidatePipelineDefinition
func (mr *MockDataPipelineAPIMockRecorder) ValidatePipelineDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePipelineDefinition", reflect.TypeOf((*MockDataPipelineAPI)(nil).ValidatePipelineDefinition), arg0)
}

// ValidatePipelineDefinitionRequest mocks base method
func (m *MockDataPipelineAPI) ValidatePipelineDefinitionRequest(arg0 *datapipeline.ValidatePipelineDefinitionInput) (*request.Request, *datapipeline.ValidatePipelineDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePipelineDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*datapipeline.ValidatePipelineDefinitionOutput)
	return ret0, ret1
}

// ValidatePipelineDefinitionRequest indicates an expected call of ValidatePipelineDefinitionRequest
func (mr *MockDataPipelineAPIMockRecorder) ValidatePipelineDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePipelineDefinitionRequest", reflect.TypeOf((*MockDataPipelineAPI)(nil).ValidatePipelineDefinitionRequest), arg0)
}

// ValidatePipelineDefinitionWithContext mocks base method
func (m *MockDataPipelineAPI) ValidatePipelineDefinitionWithContext(arg0 context.Context, arg1 *datapipeline.ValidatePipelineDefinitionInput, arg2 ...request.Option) (*datapipeline.ValidatePipelineDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidatePipelineDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*datapipeline.ValidatePipelineDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePipelineDefinitionWithContext indicates an expected call of ValidatePipelineDefinitionWithContext
func (mr *MockDataPipelineAPIMockRecorder) ValidatePipelineDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePipelineDefinitionWithContext", reflect.TypeOf((*MockDataPipelineAPI)(nil).ValidatePipelineDefinitionWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/migrationhubrefactorspaces/migrationhubrefactorspacesiface (interfaces: MigrationHubRefactorSpacesAPI)

// Package migrationhubrefactorspacesmock is a generated GoMock package.
package migrationhubrefactorspacesmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	migrationhubrefactorspaces "github.com/aws/aws-sdk-go/service/migrationhubrefactorspaces"
	gomock "github.com/golang/mock/gomock"
)

// MockMigrationHubRefactorSpacesAPI is a mock of MigrationHubRefactorSpacesAPI interface.
type MockMigrationHubRefactorSpacesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationHubRefactorSpacesAPIMockRecorder
}

// MockMigrationHubRefactorSpacesAPIMockRecorder is the mock recorder for MockMigrationHubRefactorSpacesAPI.
type MockMigrationHubRefactorSpacesAPIMockRecorder struct {
	mock *MockMigrationHubRefactorSpacesAPI
}

// NewMockMigrationHubRefactorSpacesAPI creates a new mock instance.
func NewMockMigrationHubRefactorSpacesAPI(ctrl *gomock.Controller) *MockMigrationHubRefactorSpacesAPI {
	mock := &MockMigrationHubRefactorSpacesAPI{ctrl: ctrl}
	mock.recorder = &MockMigrationHubRefactorSpacesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationHubRefactorSpacesAPI) EXPECT() *MockMigrationHubRefactorSpacesAPIMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateApplication(arg0 *migrationhubrefactorspaces.CreateApplicationInput) (*migrationhubrefactorspaces.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateApplicationRequest(arg0 *migrationhubrefactorspaces.CreateApplicationInput) (*request.Request, *migrationhubrefactorspaces.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.CreateApplicationInput, arg2 ...request.Option) (*migrationhubrefactorspaces.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateApplicationWithContext), varargs...)
}

// CreateEnvironment mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateEnvironment(arg0 *migrationhubrefactorspaces.CreateEnvironmentInput) (*migrationhubrefactorspaces.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateEnvironmentRequest(arg0 *migrationhubrefactorspaces.CreateEnvironmentInput) (*request.Request, *migrationhubrefactorspaces.CreateEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.CreateEnvironmentOutput)
	return ret0, ret1
}

// CreateEnvironmentRequest indicates an expected call of CreateEnvironmentRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateEnvironmentRequest), arg0)
}

// CreateEnvironmentWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateEnvironmentWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.CreateEnvironmentInput, arg2 ...request.Option) (*migrationhubrefactorspaces.CreateEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironmentWithContext indicates an expected call of CreateEnvironmentWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateEnvironmentWithContext), varargs...)
}

// CreateRoute mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateRoute(arg0 *migrationhubrefactorspaces.CreateRouteInput) (*migrationhubrefactorspaces.CreateRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateRoute), arg0)
}

// CreateRouteRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateRouteRequest(arg0 *migrationhubrefactorspaces.CreateRouteInput) (*request.Request, *migrationhubrefactorspaces.CreateRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.CreateRouteOutput)
	return ret0, ret1
}

// CreateRouteRequest indicates an expected call of CreateRouteRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateRouteRequest), arg0)
}

// CreateRouteWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateRouteWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.CreateRouteInput, arg2 ...request.Option) (*migrationhubrefactorspaces.CreateRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteWithContext indicates an expected call of CreateRouteWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateRouteWithContext), varargs...)
}

// CreateService mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateService(arg0 *migrationhubrefactorspaces.CreateServiceInput) (*migrationhubrefactorspaces.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateService), arg0)
}

// CreateServiceRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateServiceRequest(arg0 *migrationhubrefactorspaces.CreateServiceInput) (*request.Request, *migrationhubrefactorspaces.CreateServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.CreateServiceOutput)
	return ret0, ret1
}

// CreateServiceRequest indicates an expected call of CreateServiceRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateServiceRequest), arg0)
}

// CreateServiceWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) CreateServiceWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.CreateServiceInput, arg2 ...request.Option) (*migrationhubrefactorspaces.CreateServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.CreateServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceWithContext indicates an expected call of CreateServiceWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) CreateServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).CreateServiceWithContext), varargs...)
}

// DeleteApplication mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteApplication(arg0 *migrationhubrefactorspaces.DeleteApplicationInput) (*migrationhubrefactorspaces.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteApplicationRequest(arg0 *migrationhubrefactorspaces.DeleteApplicationInput) (*request.Request, *migrationhubrefactorspaces.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.DeleteApplicationInput, arg2 ...request.Option) (*migrationhubrefactorspaces.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteEnvironment mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteEnvironment(arg0 *migrationhubrefactorspaces.DeleteEnvironmentInput) (*migrationhubrefactorspaces.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteEnvironment), arg0)
}

// DeleteEnvironmentRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteEnvironmentRequest(arg0 *migrationhubrefactorspaces.DeleteEnvironmentInput) (*request.Request, *migrationhubrefactorspaces.DeleteEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.DeleteEnvironmentOutput)
	return ret0, ret1
}

// DeleteEnvironmentRequest indicates an expected call of DeleteEnvironmentRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteEnvironmentRequest), arg0)
}

// DeleteEnvironmentWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteEnvironmentWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.DeleteEnvironmentInput, arg2 ...request.Option) (*migrationhubrefactorspaces.DeleteEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironmentWithContext indicates an expected call of DeleteEnvironmentWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteEnvironmentWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteResourcePolicy(arg0 *migrationhubrefactorspaces.DeleteResourcePolicyInput) (*migrationhubrefactorspaces.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteResourcePolicyRequest(arg0 *migrationhubrefactorspaces.DeleteResourcePolicyInput) (*request.Request, *migrationhubrefactorspaces.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteResourcePolicyWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.DeleteResourcePolicyInput, arg2 ...request.Option) (*migrationhubrefactorspaces.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteRoute mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteRoute(arg0 *migrationhubrefactorspaces.DeleteRouteInput) (*migrationhubrefactorspaces.DeleteRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteRoute), arg0)
}

// DeleteRouteRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteRouteRequest(arg0 *migrationhubrefactorspaces.DeleteRouteInput) (*request.Request, *migrationhubrefactorspaces.DeleteRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.DeleteRouteOutput)
	return ret0, ret1
}

// DeleteRouteRequest indicates an expected call of DeleteRouteRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteRouteRequest), arg0)
}

// DeleteRouteWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteRouteWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.DeleteRouteInput, arg2 ...request.Option) (*migrationhubrefactorspaces.DeleteRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteWithContext indicates an expected call of DeleteRouteWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteRouteWithContext), varargs...)
}

// DeleteService mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteService(arg0 *migrationhubrefactorspaces.DeleteServiceInput) (*migrationhubrefactorspaces.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteService), arg0)
}

// DeleteServiceRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteServiceRequest(arg0 *migrationhubrefactorspaces.DeleteServiceInput) (*request.Request, *migrationhubrefactorspaces.DeleteServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.DeleteServiceOutput)
	return ret0, ret1
}

// DeleteServiceRequest indicates an expected call of DeleteServiceRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteServiceRequest), arg0)
}

// DeleteServiceWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) DeleteServiceWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.DeleteServiceInput, arg2 ...request.Option) (*migrationhubrefactorspaces.DeleteServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.DeleteServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceWithContext indicates an expected call of DeleteServiceWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) DeleteServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).DeleteServiceWithContext), varargs...)
}

// GetApplication mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetApplication(arg0 *migrationhubrefactorspaces.GetApplicationInput) (*migrationhubrefactorspaces.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetApplicationRequest(arg0 *migrationhubrefactorspaces.GetApplicationInput) (*request.Request, *migrationhubrefactorspaces.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetApplicationWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.GetApplicationInput, arg2 ...request.Option) (*migrationhubrefactorspaces.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetEnvironment mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetEnvironment(arg0 *migrationhubrefactorspaces.GetEnvironmentInput) (*migrationhubrefactorspaces.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetEnvironment), arg0)
}

// GetEnvironmentRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetEnvironmentRequest(arg0 *migrationhubrefactorspaces.GetEnvironmentInput) (*request.Request, *migrationhubrefactorspaces.GetEnvironmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.GetEnvironmentOutput)
	return ret0, ret1
}

// GetEnvironmentRequest indicates an expected call of GetEnvironmentRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetEnvironmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetEnvironmentRequest), arg0)
}

// GetEnvironmentWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetEnvironmentWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.GetEnvironmentInput, arg2 ...request.Option) (*migrationhubrefactorspaces.GetEnvironmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetEnvironmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentWithContext indicates an expected call of GetEnvironmentWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetEnvironmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetEnvironmentWithContext), varargs...)
}

// GetResourcePolicy mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetResourcePolicy(arg0 *migrationhubrefactorspaces.GetResourcePolicyInput) (*migrationhubrefactorspaces.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetResourcePolicy), arg0)
}

// GetResourcePolicyRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetResourcePolicyRequest(arg0 *migrationhubrefactorspaces.GetResourcePolicyInput) (*request.Request, *migrationhubrefactorspaces.GetResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.GetResourcePolicyOutput)
	return ret0, ret1
}

// GetResourcePolicyRequest indicates an expected call of GetResourcePolicyRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetResourcePolicyRequest), arg0)
}

// GetResourcePolicyWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetResourcePolicyWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.GetResourcePolicyInput, arg2 ...request.Option) (*migrationhubrefactorspaces.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicyWithContext indicates an expected call of GetResourcePolicyWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetResourcePolicyWithContext), varargs...)
}

// GetRoute mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetRoute(arg0 *migrationhubrefactorspaces.GetRouteInput) (*migrationhubrefactorspaces.GetRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetRoute), arg0)
}

// GetRouteRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetRouteRequest(arg0 *migrationhubrefactorspaces.GetRouteInput) (*request.Request, *migrationhubrefactorspaces.GetRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.GetRouteOutput)
	return ret0, ret1
}

// GetRouteRequest indicates an expected call of GetRouteRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetRouteRequest), arg0)
}

// GetRouteWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetRouteWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.GetRouteInput, arg2 ...request.Option) (*migrationhubrefactorspaces.GetRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteWithContext indicates an expected call of GetRouteWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetRouteWithContext), varargs...)
}

// GetService mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetService(arg0 *migrationhubrefactorspaces.GetServiceInput) (*migrationhubrefactorspaces.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetService), arg0)
}

// GetServiceRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetServiceRequest(arg0 *migrationhubrefactorspaces.GetServiceInput) (*request.Request, *migrationhubrefactorspaces.GetServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.GetServiceOutput)
	return ret0, ret1
}

// GetServiceRequest indicates an expected call of GetServiceRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetServiceRequest), arg0)
}

// GetServiceWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) GetServiceWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.GetServiceInput, arg2 ...request.Option) (*migrationhubrefactorspaces.GetServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.GetServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) GetServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).GetServiceWithContext), varargs...)
}

// ListApplications mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListApplications(arg0 *migrationhubrefactorspaces.ListApplicationsInput) (*migrationhubrefactorspaces.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListApplicationsPages(arg0 *migrationhubrefactorspaces.ListApplicationsInput, arg1 func(*migrationhubrefactorspaces.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListApplicationsInput, arg2 func(*migrationhubrefactorspaces.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListApplicationsRequest(arg0 *migrationhubrefactorspaces.ListApplicationsInput) (*request.Request, *migrationhubrefactorspaces.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListApplicationsInput, arg2 ...request.Option) (*migrationhubrefactorspaces.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListEnvironmentVpcs mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentVpcs(arg0 *migrationhubrefactorspaces.ListEnvironmentVpcsInput) (*migrationhubrefactorspaces.ListEnvironmentVpcsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentVpcs", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListEnvironmentVpcsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentVpcs indicates an expected call of ListEnvironmentVpcs.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentVpcs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentVpcs", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentVpcs), arg0)
}

// ListEnvironmentVpcsPages mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentVpcsPages(arg0 *migrationhubrefactorspaces.ListEnvironmentVpcsInput, arg1 func(*migrationhubrefactorspaces.ListEnvironmentVpcsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentVpcsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentVpcsPages indicates an expected call of ListEnvironmentVpcsPages.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentVpcsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentVpcsPages", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentVpcsPages), arg0, arg1)
}

// ListEnvironmentVpcsPagesWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentVpcsPagesWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListEnvironmentVpcsInput, arg2 func(*migrationhubrefactorspaces.ListEnvironmentVpcsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentVpcsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentVpcsPagesWithContext indicates an expected call of ListEnvironmentVpcsPagesWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentVpcsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentVpcsPagesWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentVpcsPagesWithContext), varargs...)
}

// ListEnvironmentVpcsRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentVpcsRequest(arg0 *migrationhubrefactorspaces.ListEnvironmentVpcsInput) (*request.Request, *migrationhubrefactorspaces.ListEnvironmentVpcsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentVpcsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.ListEnvironmentVpcsOutput)
	return ret0, ret1
}

// ListEnvironmentVpcsRequest indicates an expected call of ListEnvironmentVpcsRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentVpcsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentVpcsRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentVpcsRequest), arg0)
}

// ListEnvironmentVpcsWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentVpcsWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListEnvironmentVpcsInput, arg2 ...request.Option) (*migrationhubrefactorspaces.ListEnvironmentVpcsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentVpcsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListEnvironmentVpcsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentVpcsWithContext indicates an expected call of ListEnvironmentVpcsWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentVpcsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentVpcsWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentVpcsWithContext), varargs...)
}

// ListEnvironments mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironments(arg0 *migrationhubrefactorspaces.ListEnvironmentsInput) (*migrationhubrefactorspaces.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsPages mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentsPages(arg0 *migrationhubrefactorspaces.ListEnvironmentsInput, arg1 func(*migrationhubrefactorspaces.ListEnvironmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPages indicates an expected call of ListEnvironmentsPages.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPages", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentsPages), arg0, arg1)
}

// ListEnvironmentsPagesWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentsPagesWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListEnvironmentsInput, arg2 func(*migrationhubrefactorspaces.ListEnvironmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEnvironmentsPagesWithContext indicates an expected call of ListEnvironmentsPagesWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsPagesWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentsPagesWithContext), varargs...)
}

// ListEnvironmentsRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentsRequest(arg0 *migrationhubrefactorspaces.ListEnvironmentsInput) (*request.Request, *migrationhubrefactorspaces.ListEnvironmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.ListEnvironmentsOutput)
	return ret0, ret1
}

// ListEnvironmentsRequest indicates an expected call of ListEnvironmentsRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentsRequest), arg0)
}

// ListEnvironmentsWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListEnvironmentsWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListEnvironmentsInput, arg2 ...request.Option) (*migrationhubrefactorspaces.ListEnvironmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironmentsWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListEnvironmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironmentsWithContext indicates an expected call of ListEnvironmentsWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListEnvironmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListEnvironmentsWithContext), varargs...)
}

// ListRoutes mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListRoutes(arg0 *migrationhubrefactorspaces.ListRoutesInput) (*migrationhubrefactorspaces.ListRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListRoutes), arg0)
}

// ListRoutesPages mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListRoutesPages(arg0 *migrationhubrefactorspaces.ListRoutesInput, arg1 func(*migrationhubrefactorspaces.ListRoutesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutesPages indicates an expected call of ListRoutesPages.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListRoutesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesPages", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListRoutesPages), arg0, arg1)
}

// ListRoutesPagesWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListRoutesPagesWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListRoutesInput, arg2 func(*migrationhubrefactorspaces.ListRoutesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutesPagesWithContext indicates an expected call of ListRoutesPagesWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListRoutesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesPagesWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListRoutesPagesWithContext), varargs...)
}

// ListRoutesRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListRoutesRequest(arg0 *migrationhubrefactorspaces.ListRoutesInput) (*request.Request, *migrationhubrefactorspaces.ListRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.ListRoutesOutput)
	return ret0, ret1
}

// ListRoutesRequest indicates an expected call of ListRoutesRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListRoutesRequest), arg0)
}

// ListRoutesWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListRoutesWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListRoutesInput, arg2 ...request.Option) (*migrationhubrefactorspaces.ListRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutesWithContext indicates an expected call of ListRoutesWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutesWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListRoutesWithContext), varargs...)
}

// ListServices mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListServices(arg0 *migrationhubrefactorspaces.ListServicesInput) (*migrationhubrefactorspaces.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListServices), arg0)
}

// ListServicesPages mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListServicesPages(arg0 *migrationhubrefactorspaces.ListServicesInput, arg1 func(*migrationhubrefactorspaces.ListServicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPages indicates an expected call of ListServicesPages.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListServicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPages", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListServicesPages), arg0, arg1)
}

// ListServicesPagesWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListServicesPagesWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListServicesInput, arg2 func(*migrationhubrefactorspaces.ListServicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListServicesPagesWithContext indicates an expected call of ListServicesPagesWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListServicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesPagesWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListServicesPagesWithContext), varargs...)
}

// ListServicesRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListServicesRequest(arg0 *migrationhubrefactorspaces.ListServicesInput) (*request.Request, *migrationhubrefactorspaces.ListServicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.ListServicesOutput)
	return ret0, ret1
}

// ListServicesRequest indicates an expected call of ListServicesRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListServicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListServicesRequest), arg0)
}

// ListServicesWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListServicesWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListServicesInput, arg2 ...request.Option) (*migrationhubrefactorspaces.ListServicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServicesWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesWithContext indicates an expected call of ListServicesWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListServicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListServicesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListTagsForResource(arg0 *migrationhubrefactorspaces.ListTagsForResourceInput) (*migrationhubrefactorspaces.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListTagsForResourceRequest(arg0 *migrationhubrefactorspaces.ListTagsForResourceInput) (*request.Request, *migrationhubrefactorspaces.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.ListTagsForResourceInput, arg2 ...request.Option) (*migrationhubrefactorspaces.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutResourcePolicy mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) PutResourcePolicy(arg0 *migrationhubrefactorspaces.PutResourcePolicyInput) (*migrationhubrefactorspaces.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) PutResourcePolicyRequest(arg0 *migrationhubrefactorspaces.PutResourcePolicyInput) (*request.Request, *migrationhubrefactorspaces.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) PutResourcePolicyWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.PutResourcePolicyInput, arg2 ...request.Option) (*migrationhubrefactorspaces.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).PutResourcePolicyWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) TagResource(arg0 *migrationhubrefactorspaces.TagResourceInput) (*migrationhubrefactorspaces.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) TagResourceRequest(arg0 *migrationhubrefactorspaces.TagResourceInput) (*request.Request, *migrationhubrefactorspaces.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) TagResourceWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.TagResourceInput, arg2 ...request.Option) (*migrationhubrefactorspaces.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) UntagResource(arg0 *migrationhubrefactorspaces.UntagResourceInput) (*migrationhubrefactorspaces.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) UntagResourceRequest(arg0 *migrationhubrefactorspaces.UntagResourceInput) (*request.Request, *migrationhubrefactorspaces.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*migrationhubrefactorspaces.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockMigrationHubRefactorSpacesAPI) UntagResourceWithContext(arg0 context.Context, arg1 *migrationhubrefactorspaces.UntagResourceInput, arg2 ...request.Option) (*migrationhubrefactorspaces.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*migrationhubrefactorspaces.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockMigrationHubRefactorSpacesAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMigrationHubRefactorSpacesAPI)(nil).UntagResourceWithContext), varargs...)
}

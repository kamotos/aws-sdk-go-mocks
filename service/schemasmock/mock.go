// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/schemas/schemasiface (interfaces: SchemasAPI)

// Package schemasmock is a generated GoMock package.
package schemasmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	schemas "github.com/aws/aws-sdk-go/service/schemas"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSchemasAPI is a mock of SchemasAPI interface
type MockSchemasAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSchemasAPIMockRecorder
}

// MockSchemasAPIMockRecorder is the mock recorder for MockSchemasAPI
type MockSchemasAPIMockRecorder struct {
	mock *MockSchemasAPI
}

// NewMockSchemasAPI creates a new mock instance
func NewMockSchemasAPI(ctrl *gomock.Controller) *MockSchemasAPI {
	mock := &MockSchemasAPI{ctrl: ctrl}
	mock.recorder = &MockSchemasAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemasAPI) EXPECT() *MockSchemasAPIMockRecorder {
	return m.recorder
}

// CreateDiscoverer mocks base method
func (m *MockSchemasAPI) CreateDiscoverer(arg0 *schemas.CreateDiscovererInput) (*schemas.CreateDiscovererOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscoverer", arg0)
	ret0, _ := ret[0].(*schemas.CreateDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiscoverer indicates an expected call of CreateDiscoverer
func (mr *MockSchemasAPIMockRecorder) CreateDiscoverer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscoverer", reflect.TypeOf((*MockSchemasAPI)(nil).CreateDiscoverer), arg0)
}

// CreateDiscovererRequest mocks base method
func (m *MockSchemasAPI) CreateDiscovererRequest(arg0 *schemas.CreateDiscovererInput) (*request.Request, *schemas.CreateDiscovererOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscovererRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.CreateDiscovererOutput)
	return ret0, ret1
}

// CreateDiscovererRequest indicates an expected call of CreateDiscovererRequest
func (mr *MockSchemasAPIMockRecorder) CreateDiscovererRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscovererRequest", reflect.TypeOf((*MockSchemasAPI)(nil).CreateDiscovererRequest), arg0)
}

// CreateDiscovererWithContext mocks base method
func (m *MockSchemasAPI) CreateDiscovererWithContext(arg0 context.Context, arg1 *schemas.CreateDiscovererInput, arg2 ...request.Option) (*schemas.CreateDiscovererOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDiscovererWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.CreateDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiscovererWithContext indicates an expected call of CreateDiscovererWithContext
func (mr *MockSchemasAPIMockRecorder) CreateDiscovererWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscovererWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).CreateDiscovererWithContext), varargs...)
}

// CreateRegistry mocks base method
func (m *MockSchemasAPI) CreateRegistry(arg0 *schemas.CreateRegistryInput) (*schemas.CreateRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistry", arg0)
	ret0, _ := ret[0].(*schemas.CreateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistry indicates an expected call of CreateRegistry
func (mr *MockSchemasAPIMockRecorder) CreateRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistry", reflect.TypeOf((*MockSchemasAPI)(nil).CreateRegistry), arg0)
}

// CreateRegistryRequest mocks base method
func (m *MockSchemasAPI) CreateRegistryRequest(arg0 *schemas.CreateRegistryInput) (*request.Request, *schemas.CreateRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.CreateRegistryOutput)
	return ret0, ret1
}

// CreateRegistryRequest indicates an expected call of CreateRegistryRequest
func (mr *MockSchemasAPIMockRecorder) CreateRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistryRequest", reflect.TypeOf((*MockSchemasAPI)(nil).CreateRegistryRequest), arg0)
}

// CreateRegistryWithContext mocks base method
func (m *MockSchemasAPI) CreateRegistryWithContext(arg0 context.Context, arg1 *schemas.CreateRegistryInput, arg2 ...request.Option) (*schemas.CreateRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.CreateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistryWithContext indicates an expected call of CreateRegistryWithContext
func (mr *MockSchemasAPIMockRecorder) CreateRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistryWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).CreateRegistryWithContext), varargs...)
}

// CreateSchema mocks base method
func (m *MockSchemasAPI) CreateSchema(arg0 *schemas.CreateSchemaInput) (*schemas.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", arg0)
	ret0, _ := ret[0].(*schemas.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema
func (mr *MockSchemasAPIMockRecorder) CreateSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockSchemasAPI)(nil).CreateSchema), arg0)
}

// CreateSchemaRequest mocks base method
func (m *MockSchemasAPI) CreateSchemaRequest(arg0 *schemas.CreateSchemaInput) (*request.Request, *schemas.CreateSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.CreateSchemaOutput)
	return ret0, ret1
}

// CreateSchemaRequest indicates an expected call of CreateSchemaRequest
func (mr *MockSchemasAPIMockRecorder) CreateSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaRequest", reflect.TypeOf((*MockSchemasAPI)(nil).CreateSchemaRequest), arg0)
}

// CreateSchemaWithContext mocks base method
func (m *MockSchemasAPI) CreateSchemaWithContext(arg0 context.Context, arg1 *schemas.CreateSchemaInput, arg2 ...request.Option) (*schemas.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaWithContext indicates an expected call of CreateSchemaWithContext
func (mr *MockSchemasAPIMockRecorder) CreateSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).CreateSchemaWithContext), varargs...)
}

// DeleteDiscoverer mocks base method
func (m *MockSchemasAPI) DeleteDiscoverer(arg0 *schemas.DeleteDiscovererInput) (*schemas.DeleteDiscovererOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscoverer", arg0)
	ret0, _ := ret[0].(*schemas.DeleteDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscoverer indicates an expected call of DeleteDiscoverer
func (mr *MockSchemasAPIMockRecorder) DeleteDiscoverer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscoverer", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteDiscoverer), arg0)
}

// DeleteDiscovererRequest mocks base method
func (m *MockSchemasAPI) DeleteDiscovererRequest(arg0 *schemas.DeleteDiscovererInput) (*request.Request, *schemas.DeleteDiscovererOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscovererRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DeleteDiscovererOutput)
	return ret0, ret1
}

// DeleteDiscovererRequest indicates an expected call of DeleteDiscovererRequest
func (mr *MockSchemasAPIMockRecorder) DeleteDiscovererRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscovererRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteDiscovererRequest), arg0)
}

// DeleteDiscovererWithContext mocks base method
func (m *MockSchemasAPI) DeleteDiscovererWithContext(arg0 context.Context, arg1 *schemas.DeleteDiscovererInput, arg2 ...request.Option) (*schemas.DeleteDiscovererOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDiscovererWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DeleteDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDiscovererWithContext indicates an expected call of DeleteDiscovererWithContext
func (mr *MockSchemasAPIMockRecorder) DeleteDiscovererWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscovererWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteDiscovererWithContext), varargs...)
}

// DeleteRegistry mocks base method
func (m *MockSchemasAPI) DeleteRegistry(arg0 *schemas.DeleteRegistryInput) (*schemas.DeleteRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistry", arg0)
	ret0, _ := ret[0].(*schemas.DeleteRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistry indicates an expected call of DeleteRegistry
func (mr *MockSchemasAPIMockRecorder) DeleteRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistry", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteRegistry), arg0)
}

// DeleteRegistryRequest mocks base method
func (m *MockSchemasAPI) DeleteRegistryRequest(arg0 *schemas.DeleteRegistryInput) (*request.Request, *schemas.DeleteRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DeleteRegistryOutput)
	return ret0, ret1
}

// DeleteRegistryRequest indicates an expected call of DeleteRegistryRequest
func (mr *MockSchemasAPIMockRecorder) DeleteRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteRegistryRequest), arg0)
}

// DeleteRegistryWithContext mocks base method
func (m *MockSchemasAPI) DeleteRegistryWithContext(arg0 context.Context, arg1 *schemas.DeleteRegistryInput, arg2 ...request.Option) (*schemas.DeleteRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DeleteRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistryWithContext indicates an expected call of DeleteRegistryWithContext
func (mr *MockSchemasAPIMockRecorder) DeleteRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteRegistryWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method
func (m *MockSchemasAPI) DeleteResourcePolicy(arg0 *schemas.DeleteResourcePolicyInput) (*schemas.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*schemas.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy
func (mr *MockSchemasAPIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method
func (m *MockSchemasAPI) DeleteResourcePolicyRequest(arg0 *schemas.DeleteResourcePolicyInput) (*request.Request, *schemas.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest
func (mr *MockSchemasAPIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method
func (m *MockSchemasAPI) DeleteResourcePolicyWithContext(arg0 context.Context, arg1 *schemas.DeleteResourcePolicyInput, arg2 ...request.Option) (*schemas.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext
func (mr *MockSchemasAPIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteSchema mocks base method
func (m *MockSchemasAPI) DeleteSchema(arg0 *schemas.DeleteSchemaInput) (*schemas.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchema", arg0)
	ret0, _ := ret[0].(*schemas.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchema indicates an expected call of DeleteSchema
func (mr *MockSchemasAPIMockRecorder) DeleteSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteSchema), arg0)
}

// DeleteSchemaRequest mocks base method
func (m *MockSchemasAPI) DeleteSchemaRequest(arg0 *schemas.DeleteSchemaInput) (*request.Request, *schemas.DeleteSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DeleteSchemaOutput)
	return ret0, ret1
}

// DeleteSchemaRequest indicates an expected call of DeleteSchemaRequest
func (mr *MockSchemasAPIMockRecorder) DeleteSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteSchemaRequest), arg0)
}

// DeleteSchemaVersion mocks base method
func (m *MockSchemasAPI) DeleteSchemaVersion(arg0 *schemas.DeleteSchemaVersionInput) (*schemas.DeleteSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaVersion", arg0)
	ret0, _ := ret[0].(*schemas.DeleteSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaVersion indicates an expected call of DeleteSchemaVersion
func (mr *MockSchemasAPIMockRecorder) DeleteSchemaVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaVersion", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteSchemaVersion), arg0)
}

// DeleteSchemaVersionRequest mocks base method
func (m *MockSchemasAPI) DeleteSchemaVersionRequest(arg0 *schemas.DeleteSchemaVersionInput) (*request.Request, *schemas.DeleteSchemaVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DeleteSchemaVersionOutput)
	return ret0, ret1
}

// DeleteSchemaVersionRequest indicates an expected call of DeleteSchemaVersionRequest
func (mr *MockSchemasAPIMockRecorder) DeleteSchemaVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaVersionRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteSchemaVersionRequest), arg0)
}

// DeleteSchemaVersionWithContext mocks base method
func (m *MockSchemasAPI) DeleteSchemaVersionWithContext(arg0 context.Context, arg1 *schemas.DeleteSchemaVersionInput, arg2 ...request.Option) (*schemas.DeleteSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaVersionWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DeleteSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaVersionWithContext indicates an expected call of DeleteSchemaVersionWithContext
func (mr *MockSchemasAPIMockRecorder) DeleteSchemaVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaVersionWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteSchemaVersionWithContext), varargs...)
}

// DeleteSchemaWithContext mocks base method
func (m *MockSchemasAPI) DeleteSchemaWithContext(arg0 context.Context, arg1 *schemas.DeleteSchemaInput, arg2 ...request.Option) (*schemas.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaWithContext indicates an expected call of DeleteSchemaWithContext
func (mr *MockSchemasAPIMockRecorder) DeleteSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DeleteSchemaWithContext), varargs...)
}

// DescribeCodeBinding mocks base method
func (m *MockSchemasAPI) DescribeCodeBinding(arg0 *schemas.DescribeCodeBindingInput) (*schemas.DescribeCodeBindingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCodeBinding", arg0)
	ret0, _ := ret[0].(*schemas.DescribeCodeBindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCodeBinding indicates an expected call of DescribeCodeBinding
func (mr *MockSchemasAPIMockRecorder) DescribeCodeBinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCodeBinding", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeCodeBinding), arg0)
}

// DescribeCodeBindingRequest mocks base method
func (m *MockSchemasAPI) DescribeCodeBindingRequest(arg0 *schemas.DescribeCodeBindingInput) (*request.Request, *schemas.DescribeCodeBindingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCodeBindingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DescribeCodeBindingOutput)
	return ret0, ret1
}

// DescribeCodeBindingRequest indicates an expected call of DescribeCodeBindingRequest
func (mr *MockSchemasAPIMockRecorder) DescribeCodeBindingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCodeBindingRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeCodeBindingRequest), arg0)
}

// DescribeCodeBindingWithContext mocks base method
func (m *MockSchemasAPI) DescribeCodeBindingWithContext(arg0 context.Context, arg1 *schemas.DescribeCodeBindingInput, arg2 ...request.Option) (*schemas.DescribeCodeBindingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCodeBindingWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DescribeCodeBindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCodeBindingWithContext indicates an expected call of DescribeCodeBindingWithContext
func (mr *MockSchemasAPIMockRecorder) DescribeCodeBindingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCodeBindingWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeCodeBindingWithContext), varargs...)
}

// DescribeDiscoverer mocks base method
func (m *MockSchemasAPI) DescribeDiscoverer(arg0 *schemas.DescribeDiscovererInput) (*schemas.DescribeDiscovererOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDiscoverer", arg0)
	ret0, _ := ret[0].(*schemas.DescribeDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDiscoverer indicates an expected call of DescribeDiscoverer
func (mr *MockSchemasAPIMockRecorder) DescribeDiscoverer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDiscoverer", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeDiscoverer), arg0)
}

// DescribeDiscovererRequest mocks base method
func (m *MockSchemasAPI) DescribeDiscovererRequest(arg0 *schemas.DescribeDiscovererInput) (*request.Request, *schemas.DescribeDiscovererOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDiscovererRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DescribeDiscovererOutput)
	return ret0, ret1
}

// DescribeDiscovererRequest indicates an expected call of DescribeDiscovererRequest
func (mr *MockSchemasAPIMockRecorder) DescribeDiscovererRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDiscovererRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeDiscovererRequest), arg0)
}

// DescribeDiscovererWithContext mocks base method
func (m *MockSchemasAPI) DescribeDiscovererWithContext(arg0 context.Context, arg1 *schemas.DescribeDiscovererInput, arg2 ...request.Option) (*schemas.DescribeDiscovererOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDiscovererWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DescribeDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDiscovererWithContext indicates an expected call of DescribeDiscovererWithContext
func (mr *MockSchemasAPIMockRecorder) DescribeDiscovererWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDiscovererWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeDiscovererWithContext), varargs...)
}

// DescribeRegistry mocks base method
func (m *MockSchemasAPI) DescribeRegistry(arg0 *schemas.DescribeRegistryInput) (*schemas.DescribeRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistry", arg0)
	ret0, _ := ret[0].(*schemas.DescribeRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistry indicates an expected call of DescribeRegistry
func (mr *MockSchemasAPIMockRecorder) DescribeRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistry", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeRegistry), arg0)
}

// DescribeRegistryRequest mocks base method
func (m *MockSchemasAPI) DescribeRegistryRequest(arg0 *schemas.DescribeRegistryInput) (*request.Request, *schemas.DescribeRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DescribeRegistryOutput)
	return ret0, ret1
}

// DescribeRegistryRequest indicates an expected call of DescribeRegistryRequest
func (mr *MockSchemasAPIMockRecorder) DescribeRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistryRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeRegistryRequest), arg0)
}

// DescribeRegistryWithContext mocks base method
func (m *MockSchemasAPI) DescribeRegistryWithContext(arg0 context.Context, arg1 *schemas.DescribeRegistryInput, arg2 ...request.Option) (*schemas.DescribeRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DescribeRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistryWithContext indicates an expected call of DescribeRegistryWithContext
func (mr *MockSchemasAPIMockRecorder) DescribeRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistryWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeRegistryWithContext), varargs...)
}

// DescribeSchema mocks base method
func (m *MockSchemasAPI) DescribeSchema(arg0 *schemas.DescribeSchemaInput) (*schemas.DescribeSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchema", arg0)
	ret0, _ := ret[0].(*schemas.DescribeSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchema indicates an expected call of DescribeSchema
func (mr *MockSchemasAPIMockRecorder) DescribeSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchema", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeSchema), arg0)
}

// DescribeSchemaRequest mocks base method
func (m *MockSchemasAPI) DescribeSchemaRequest(arg0 *schemas.DescribeSchemaInput) (*request.Request, *schemas.DescribeSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.DescribeSchemaOutput)
	return ret0, ret1
}

// DescribeSchemaRequest indicates an expected call of DescribeSchemaRequest
func (mr *MockSchemasAPIMockRecorder) DescribeSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemaRequest", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeSchemaRequest), arg0)
}

// DescribeSchemaWithContext mocks base method
func (m *MockSchemasAPI) DescribeSchemaWithContext(arg0 context.Context, arg1 *schemas.DescribeSchemaInput, arg2 ...request.Option) (*schemas.DescribeSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.DescribeSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSchemaWithContext indicates an expected call of DescribeSchemaWithContext
func (mr *MockSchemasAPIMockRecorder) DescribeSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSchemaWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).DescribeSchemaWithContext), varargs...)
}

// ExportSchema mocks base method
func (m *MockSchemasAPI) ExportSchema(arg0 *schemas.ExportSchemaInput) (*schemas.ExportSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSchema", arg0)
	ret0, _ := ret[0].(*schemas.ExportSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSchema indicates an expected call of ExportSchema
func (mr *MockSchemasAPIMockRecorder) ExportSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSchema", reflect.TypeOf((*MockSchemasAPI)(nil).ExportSchema), arg0)
}

// ExportSchemaRequest mocks base method
func (m *MockSchemasAPI) ExportSchemaRequest(arg0 *schemas.ExportSchemaInput) (*request.Request, *schemas.ExportSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.ExportSchemaOutput)
	return ret0, ret1
}

// ExportSchemaRequest indicates an expected call of ExportSchemaRequest
func (mr *MockSchemasAPIMockRecorder) ExportSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSchemaRequest", reflect.TypeOf((*MockSchemasAPI)(nil).ExportSchemaRequest), arg0)
}

// ExportSchemaWithContext mocks base method
func (m *MockSchemasAPI) ExportSchemaWithContext(arg0 context.Context, arg1 *schemas.ExportSchemaInput, arg2 ...request.Option) (*schemas.ExportSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.ExportSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSchemaWithContext indicates an expected call of ExportSchemaWithContext
func (mr *MockSchemasAPIMockRecorder) ExportSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSchemaWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ExportSchemaWithContext), varargs...)
}

// GetCodeBindingSource mocks base method
func (m *MockSchemasAPI) GetCodeBindingSource(arg0 *schemas.GetCodeBindingSourceInput) (*schemas.GetCodeBindingSourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeBindingSource", arg0)
	ret0, _ := ret[0].(*schemas.GetCodeBindingSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeBindingSource indicates an expected call of GetCodeBindingSource
func (mr *MockSchemasAPIMockRecorder) GetCodeBindingSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeBindingSource", reflect.TypeOf((*MockSchemasAPI)(nil).GetCodeBindingSource), arg0)
}

// GetCodeBindingSourceRequest mocks base method
func (m *MockSchemasAPI) GetCodeBindingSourceRequest(arg0 *schemas.GetCodeBindingSourceInput) (*request.Request, *schemas.GetCodeBindingSourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeBindingSourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.GetCodeBindingSourceOutput)
	return ret0, ret1
}

// GetCodeBindingSourceRequest indicates an expected call of GetCodeBindingSourceRequest
func (mr *MockSchemasAPIMockRecorder) GetCodeBindingSourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeBindingSourceRequest", reflect.TypeOf((*MockSchemasAPI)(nil).GetCodeBindingSourceRequest), arg0)
}

// GetCodeBindingSourceWithContext mocks base method
func (m *MockSchemasAPI) GetCodeBindingSourceWithContext(arg0 context.Context, arg1 *schemas.GetCodeBindingSourceInput, arg2 ...request.Option) (*schemas.GetCodeBindingSourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCodeBindingSourceWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.GetCodeBindingSourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeBindingSourceWithContext indicates an expected call of GetCodeBindingSourceWithContext
func (mr *MockSchemasAPIMockRecorder) GetCodeBindingSourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeBindingSourceWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).GetCodeBindingSourceWithContext), varargs...)
}

// GetDiscoveredSchema mocks base method
func (m *MockSchemasAPI) GetDiscoveredSchema(arg0 *schemas.GetDiscoveredSchemaInput) (*schemas.GetDiscoveredSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredSchema", arg0)
	ret0, _ := ret[0].(*schemas.GetDiscoveredSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredSchema indicates an expected call of GetDiscoveredSchema
func (mr *MockSchemasAPIMockRecorder) GetDiscoveredSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredSchema", reflect.TypeOf((*MockSchemasAPI)(nil).GetDiscoveredSchema), arg0)
}

// GetDiscoveredSchemaRequest mocks base method
func (m *MockSchemasAPI) GetDiscoveredSchemaRequest(arg0 *schemas.GetDiscoveredSchemaInput) (*request.Request, *schemas.GetDiscoveredSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.GetDiscoveredSchemaOutput)
	return ret0, ret1
}

// GetDiscoveredSchemaRequest indicates an expected call of GetDiscoveredSchemaRequest
func (mr *MockSchemasAPIMockRecorder) GetDiscoveredSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredSchemaRequest", reflect.TypeOf((*MockSchemasAPI)(nil).GetDiscoveredSchemaRequest), arg0)
}

// GetDiscoveredSchemaWithContext mocks base method
func (m *MockSchemasAPI) GetDiscoveredSchemaWithContext(arg0 context.Context, arg1 *schemas.GetDiscoveredSchemaInput, arg2 ...request.Option) (*schemas.GetDiscoveredSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDiscoveredSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.GetDiscoveredSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveredSchemaWithContext indicates an expected call of GetDiscoveredSchemaWithContext
func (mr *MockSchemasAPIMockRecorder) GetDiscoveredSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredSchemaWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).GetDiscoveredSchemaWithContext), varargs...)
}

// GetResourcePolicy mocks base method
func (m *MockSchemasAPI) GetResourcePolicy(arg0 *schemas.GetResourcePolicyInput) (*schemas.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0)
	ret0, _ := ret[0].(*schemas.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy
func (mr *MockSchemasAPIMockRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockSchemasAPI)(nil).GetResourcePolicy), arg0)
}

// GetResourcePolicyRequest mocks base method
func (m *MockSchemasAPI) GetResourcePolicyRequest(arg0 *schemas.GetResourcePolicyInput) (*request.Request, *schemas.GetResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.GetResourcePolicyOutput)
	return ret0, ret1
}

// GetResourcePolicyRequest indicates an expected call of GetResourcePolicyRequest
func (mr *MockSchemasAPIMockRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyRequest", reflect.TypeOf((*MockSchemasAPI)(nil).GetResourcePolicyRequest), arg0)
}

// GetResourcePolicyWithContext mocks base method
func (m *MockSchemasAPI) GetResourcePolicyWithContext(arg0 context.Context, arg1 *schemas.GetResourcePolicyInput, arg2 ...request.Option) (*schemas.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicyWithContext indicates an expected call of GetResourcePolicyWithContext
func (mr *MockSchemasAPIMockRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).GetResourcePolicyWithContext), varargs...)
}

// ListDiscoverers mocks base method
func (m *MockSchemasAPI) ListDiscoverers(arg0 *schemas.ListDiscoverersInput) (*schemas.ListDiscoverersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscoverers", arg0)
	ret0, _ := ret[0].(*schemas.ListDiscoverersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoverers indicates an expected call of ListDiscoverers
func (mr *MockSchemasAPIMockRecorder) ListDiscoverers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoverers", reflect.TypeOf((*MockSchemasAPI)(nil).ListDiscoverers), arg0)
}

// ListDiscoverersPages mocks base method
func (m *MockSchemasAPI) ListDiscoverersPages(arg0 *schemas.ListDiscoverersInput, arg1 func(*schemas.ListDiscoverersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscoverersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDiscoverersPages indicates an expected call of ListDiscoverersPages
func (mr *MockSchemasAPIMockRecorder) ListDiscoverersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoverersPages", reflect.TypeOf((*MockSchemasAPI)(nil).ListDiscoverersPages), arg0, arg1)
}

// ListDiscoverersPagesWithContext mocks base method
func (m *MockSchemasAPI) ListDiscoverersPagesWithContext(arg0 context.Context, arg1 *schemas.ListDiscoverersInput, arg2 func(*schemas.ListDiscoverersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoverersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDiscoverersPagesWithContext indicates an expected call of ListDiscoverersPagesWithContext
func (mr *MockSchemasAPIMockRecorder) ListDiscoverersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoverersPagesWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListDiscoverersPagesWithContext), varargs...)
}

// ListDiscoverersRequest mocks base method
func (m *MockSchemasAPI) ListDiscoverersRequest(arg0 *schemas.ListDiscoverersInput) (*request.Request, *schemas.ListDiscoverersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscoverersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.ListDiscoverersOutput)
	return ret0, ret1
}

// ListDiscoverersRequest indicates an expected call of ListDiscoverersRequest
func (mr *MockSchemasAPIMockRecorder) ListDiscoverersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoverersRequest", reflect.TypeOf((*MockSchemasAPI)(nil).ListDiscoverersRequest), arg0)
}

// ListDiscoverersWithContext mocks base method
func (m *MockSchemasAPI) ListDiscoverersWithContext(arg0 context.Context, arg1 *schemas.ListDiscoverersInput, arg2 ...request.Option) (*schemas.ListDiscoverersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDiscoverersWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.ListDiscoverersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscoverersWithContext indicates an expected call of ListDiscoverersWithContext
func (mr *MockSchemasAPIMockRecorder) ListDiscoverersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscoverersWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListDiscoverersWithContext), varargs...)
}

// ListRegistries mocks base method
func (m *MockSchemasAPI) ListRegistries(arg0 *schemas.ListRegistriesInput) (*schemas.ListRegistriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistries", arg0)
	ret0, _ := ret[0].(*schemas.ListRegistriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistries indicates an expected call of ListRegistries
func (mr *MockSchemasAPIMockRecorder) ListRegistries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistries", reflect.TypeOf((*MockSchemasAPI)(nil).ListRegistries), arg0)
}

// ListRegistriesPages mocks base method
func (m *MockSchemasAPI) ListRegistriesPages(arg0 *schemas.ListRegistriesInput, arg1 func(*schemas.ListRegistriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegistriesPages indicates an expected call of ListRegistriesPages
func (mr *MockSchemasAPIMockRecorder) ListRegistriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesPages", reflect.TypeOf((*MockSchemasAPI)(nil).ListRegistriesPages), arg0, arg1)
}

// ListRegistriesPagesWithContext mocks base method
func (m *MockSchemasAPI) ListRegistriesPagesWithContext(arg0 context.Context, arg1 *schemas.ListRegistriesInput, arg2 func(*schemas.ListRegistriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegistriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegistriesPagesWithContext indicates an expected call of ListRegistriesPagesWithContext
func (mr *MockSchemasAPIMockRecorder) ListRegistriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesPagesWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListRegistriesPagesWithContext), varargs...)
}

// ListRegistriesRequest mocks base method
func (m *MockSchemasAPI) ListRegistriesRequest(arg0 *schemas.ListRegistriesInput) (*request.Request, *schemas.ListRegistriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.ListRegistriesOutput)
	return ret0, ret1
}

// ListRegistriesRequest indicates an expected call of ListRegistriesRequest
func (mr *MockSchemasAPIMockRecorder) ListRegistriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesRequest", reflect.TypeOf((*MockSchemasAPI)(nil).ListRegistriesRequest), arg0)
}

// ListRegistriesWithContext mocks base method
func (m *MockSchemasAPI) ListRegistriesWithContext(arg0 context.Context, arg1 *schemas.ListRegistriesInput, arg2 ...request.Option) (*schemas.ListRegistriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegistriesWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.ListRegistriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistriesWithContext indicates an expected call of ListRegistriesWithContext
func (mr *MockSchemasAPIMockRecorder) ListRegistriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListRegistriesWithContext), varargs...)
}

// ListSchemaVersions mocks base method
func (m *MockSchemasAPI) ListSchemaVersions(arg0 *schemas.ListSchemaVersionsInput) (*schemas.ListSchemaVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaVersions", arg0)
	ret0, _ := ret[0].(*schemas.ListSchemaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaVersions indicates an expected call of ListSchemaVersions
func (mr *MockSchemasAPIMockRecorder) ListSchemaVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersions", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemaVersions), arg0)
}

// ListSchemaVersionsPages mocks base method
func (m *MockSchemasAPI) ListSchemaVersionsPages(arg0 *schemas.ListSchemaVersionsInput, arg1 func(*schemas.ListSchemaVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaVersionsPages indicates an expected call of ListSchemaVersionsPages
func (mr *MockSchemasAPIMockRecorder) ListSchemaVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsPages", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemaVersionsPages), arg0, arg1)
}

// ListSchemaVersionsPagesWithContext mocks base method
func (m *MockSchemasAPI) ListSchemaVersionsPagesWithContext(arg0 context.Context, arg1 *schemas.ListSchemaVersionsInput, arg2 func(*schemas.ListSchemaVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaVersionsPagesWithContext indicates an expected call of ListSchemaVersionsPagesWithContext
func (mr *MockSchemasAPIMockRecorder) ListSchemaVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsPagesWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemaVersionsPagesWithContext), varargs...)
}

// ListSchemaVersionsRequest mocks base method
func (m *MockSchemasAPI) ListSchemaVersionsRequest(arg0 *schemas.ListSchemaVersionsInput) (*request.Request, *schemas.ListSchemaVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.ListSchemaVersionsOutput)
	return ret0, ret1
}

// ListSchemaVersionsRequest indicates an expected call of ListSchemaVersionsRequest
func (mr *MockSchemasAPIMockRecorder) ListSchemaVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsRequest", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemaVersionsRequest), arg0)
}

// ListSchemaVersionsWithContext mocks base method
func (m *MockSchemasAPI) ListSchemaVersionsWithContext(arg0 context.Context, arg1 *schemas.ListSchemaVersionsInput, arg2 ...request.Option) (*schemas.ListSchemaVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.ListSchemaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaVersionsWithContext indicates an expected call of ListSchemaVersionsWithContext
func (mr *MockSchemasAPIMockRecorder) ListSchemaVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemaVersionsWithContext), varargs...)
}

// ListSchemas mocks base method
func (m *MockSchemasAPI) ListSchemas(arg0 *schemas.ListSchemasInput) (*schemas.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemas", arg0)
	ret0, _ := ret[0].(*schemas.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemas indicates an expected call of ListSchemas
func (mr *MockSchemasAPIMockRecorder) ListSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemas", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemas), arg0)
}

// ListSchemasPages mocks base method
func (m *MockSchemasAPI) ListSchemasPages(arg0 *schemas.ListSchemasInput, arg1 func(*schemas.ListSchemasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPages indicates an expected call of ListSchemasPages
func (mr *MockSchemasAPIMockRecorder) ListSchemasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPages", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemasPages), arg0, arg1)
}

// ListSchemasPagesWithContext mocks base method
func (m *MockSchemasAPI) ListSchemasPagesWithContext(arg0 context.Context, arg1 *schemas.ListSchemasInput, arg2 func(*schemas.ListSchemasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPagesWithContext indicates an expected call of ListSchemasPagesWithContext
func (mr *MockSchemasAPIMockRecorder) ListSchemasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPagesWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemasPagesWithContext), varargs...)
}

// ListSchemasRequest mocks base method
func (m *MockSchemasAPI) ListSchemasRequest(arg0 *schemas.ListSchemasInput) (*request.Request, *schemas.ListSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.ListSchemasOutput)
	return ret0, ret1
}

// ListSchemasRequest indicates an expected call of ListSchemasRequest
func (mr *MockSchemasAPIMockRecorder) ListSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasRequest", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemasRequest), arg0)
}

// ListSchemasWithContext mocks base method
func (m *MockSchemasAPI) ListSchemasWithContext(arg0 context.Context, arg1 *schemas.ListSchemasInput, arg2 ...request.Option) (*schemas.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemasWithContext indicates an expected call of ListSchemasWithContext
func (mr *MockSchemasAPIMockRecorder) ListSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListSchemasWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockSchemasAPI) ListTagsForResource(arg0 *schemas.ListTagsForResourceInput) (*schemas.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*schemas.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockSchemasAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSchemasAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockSchemasAPI) ListTagsForResourceRequest(arg0 *schemas.ListTagsForResourceInput) (*request.Request, *schemas.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockSchemasAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSchemasAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockSchemasAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *schemas.ListTagsForResourceInput, arg2 ...request.Option) (*schemas.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockSchemasAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutCodeBinding mocks base method
func (m *MockSchemasAPI) PutCodeBinding(arg0 *schemas.PutCodeBindingInput) (*schemas.PutCodeBindingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCodeBinding", arg0)
	ret0, _ := ret[0].(*schemas.PutCodeBindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCodeBinding indicates an expected call of PutCodeBinding
func (mr *MockSchemasAPIMockRecorder) PutCodeBinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCodeBinding", reflect.TypeOf((*MockSchemasAPI)(nil).PutCodeBinding), arg0)
}

// PutCodeBindingRequest mocks base method
func (m *MockSchemasAPI) PutCodeBindingRequest(arg0 *schemas.PutCodeBindingInput) (*request.Request, *schemas.PutCodeBindingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCodeBindingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.PutCodeBindingOutput)
	return ret0, ret1
}

// PutCodeBindingRequest indicates an expected call of PutCodeBindingRequest
func (mr *MockSchemasAPIMockRecorder) PutCodeBindingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCodeBindingRequest", reflect.TypeOf((*MockSchemasAPI)(nil).PutCodeBindingRequest), arg0)
}

// PutCodeBindingWithContext mocks base method
func (m *MockSchemasAPI) PutCodeBindingWithContext(arg0 context.Context, arg1 *schemas.PutCodeBindingInput, arg2 ...request.Option) (*schemas.PutCodeBindingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutCodeBindingWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.PutCodeBindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCodeBindingWithContext indicates an expected call of PutCodeBindingWithContext
func (mr *MockSchemasAPIMockRecorder) PutCodeBindingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCodeBindingWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).PutCodeBindingWithContext), varargs...)
}

// PutResourcePolicy mocks base method
func (m *MockSchemasAPI) PutResourcePolicy(arg0 *schemas.PutResourcePolicyInput) (*schemas.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*schemas.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy
func (mr *MockSchemasAPIMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockSchemasAPI)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method
func (m *MockSchemasAPI) PutResourcePolicyRequest(arg0 *schemas.PutResourcePolicyInput) (*request.Request, *schemas.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest
func (mr *MockSchemasAPIMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockSchemasAPI)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method
func (m *MockSchemasAPI) PutResourcePolicyWithContext(arg0 context.Context, arg1 *schemas.PutResourcePolicyInput, arg2 ...request.Option) (*schemas.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext
func (mr *MockSchemasAPIMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).PutResourcePolicyWithContext), varargs...)
}

// SearchSchemas mocks base method
func (m *MockSchemasAPI) SearchSchemas(arg0 *schemas.SearchSchemasInput) (*schemas.SearchSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSchemas", arg0)
	ret0, _ := ret[0].(*schemas.SearchSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSchemas indicates an expected call of SearchSchemas
func (mr *MockSchemasAPIMockRecorder) SearchSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchemas", reflect.TypeOf((*MockSchemasAPI)(nil).SearchSchemas), arg0)
}

// SearchSchemasPages mocks base method
func (m *MockSchemasAPI) SearchSchemasPages(arg0 *schemas.SearchSchemasInput, arg1 func(*schemas.SearchSchemasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSchemasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchSchemasPages indicates an expected call of SearchSchemasPages
func (mr *MockSchemasAPIMockRecorder) SearchSchemasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchemasPages", reflect.TypeOf((*MockSchemasAPI)(nil).SearchSchemasPages), arg0, arg1)
}

// SearchSchemasPagesWithContext mocks base method
func (m *MockSchemasAPI) SearchSchemasPagesWithContext(arg0 context.Context, arg1 *schemas.SearchSchemasInput, arg2 func(*schemas.SearchSchemasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSchemasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchSchemasPagesWithContext indicates an expected call of SearchSchemasPagesWithContext
func (mr *MockSchemasAPIMockRecorder) SearchSchemasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchemasPagesWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).SearchSchemasPagesWithContext), varargs...)
}

// SearchSchemasRequest mocks base method
func (m *MockSchemasAPI) SearchSchemasRequest(arg0 *schemas.SearchSchemasInput) (*request.Request, *schemas.SearchSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.SearchSchemasOutput)
	return ret0, ret1
}

// SearchSchemasRequest indicates an expected call of SearchSchemasRequest
func (mr *MockSchemasAPIMockRecorder) SearchSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchemasRequest", reflect.TypeOf((*MockSchemasAPI)(nil).SearchSchemasRequest), arg0)
}

// SearchSchemasWithContext mocks base method
func (m *MockSchemasAPI) SearchSchemasWithContext(arg0 context.Context, arg1 *schemas.SearchSchemasInput, arg2 ...request.Option) (*schemas.SearchSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.SearchSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSchemasWithContext indicates an expected call of SearchSchemasWithContext
func (mr *MockSchemasAPIMockRecorder) SearchSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSchemasWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).SearchSchemasWithContext), varargs...)
}

// StartDiscoverer mocks base method
func (m *MockSchemasAPI) StartDiscoverer(arg0 *schemas.StartDiscovererInput) (*schemas.StartDiscovererOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscoverer", arg0)
	ret0, _ := ret[0].(*schemas.StartDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDiscoverer indicates an expected call of StartDiscoverer
func (mr *MockSchemasAPIMockRecorder) StartDiscoverer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscoverer", reflect.TypeOf((*MockSchemasAPI)(nil).StartDiscoverer), arg0)
}

// StartDiscovererRequest mocks base method
func (m *MockSchemasAPI) StartDiscovererRequest(arg0 *schemas.StartDiscovererInput) (*request.Request, *schemas.StartDiscovererOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscovererRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.StartDiscovererOutput)
	return ret0, ret1
}

// StartDiscovererRequest indicates an expected call of StartDiscovererRequest
func (mr *MockSchemasAPIMockRecorder) StartDiscovererRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscovererRequest", reflect.TypeOf((*MockSchemasAPI)(nil).StartDiscovererRequest), arg0)
}

// StartDiscovererWithContext mocks base method
func (m *MockSchemasAPI) StartDiscovererWithContext(arg0 context.Context, arg1 *schemas.StartDiscovererInput, arg2 ...request.Option) (*schemas.StartDiscovererOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDiscovererWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.StartDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDiscovererWithContext indicates an expected call of StartDiscovererWithContext
func (mr *MockSchemasAPIMockRecorder) StartDiscovererWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscovererWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).StartDiscovererWithContext), varargs...)
}

// StopDiscoverer mocks base method
func (m *MockSchemasAPI) StopDiscoverer(arg0 *schemas.StopDiscovererInput) (*schemas.StopDiscovererOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDiscoverer", arg0)
	ret0, _ := ret[0].(*schemas.StopDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDiscoverer indicates an expected call of StopDiscoverer
func (mr *MockSchemasAPIMockRecorder) StopDiscoverer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDiscoverer", reflect.TypeOf((*MockSchemasAPI)(nil).StopDiscoverer), arg0)
}

// StopDiscovererRequest mocks base method
func (m *MockSchemasAPI) StopDiscovererRequest(arg0 *schemas.StopDiscovererInput) (*request.Request, *schemas.StopDiscovererOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDiscovererRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.StopDiscovererOutput)
	return ret0, ret1
}

// StopDiscovererRequest indicates an expected call of StopDiscovererRequest
func (mr *MockSchemasAPIMockRecorder) StopDiscovererRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDiscovererRequest", reflect.TypeOf((*MockSchemasAPI)(nil).StopDiscovererRequest), arg0)
}

// StopDiscovererWithContext mocks base method
func (m *MockSchemasAPI) StopDiscovererWithContext(arg0 context.Context, arg1 *schemas.StopDiscovererInput, arg2 ...request.Option) (*schemas.StopDiscovererOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopDiscovererWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.StopDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDiscovererWithContext indicates an expected call of StopDiscovererWithContext
func (mr *MockSchemasAPIMockRecorder) StopDiscovererWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDiscovererWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).StopDiscovererWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockSchemasAPI) TagResource(arg0 *schemas.TagResourceInput) (*schemas.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*schemas.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockSchemasAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSchemasAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockSchemasAPI) TagResourceRequest(arg0 *schemas.TagResourceInput) (*request.Request, *schemas.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockSchemasAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSchemasAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockSchemasAPI) TagResourceWithContext(arg0 context.Context, arg1 *schemas.TagResourceInput, arg2 ...request.Option) (*schemas.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockSchemasAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockSchemasAPI) UntagResource(arg0 *schemas.UntagResourceInput) (*schemas.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*schemas.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockSchemasAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSchemasAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockSchemasAPI) UntagResourceRequest(arg0 *schemas.UntagResourceInput) (*request.Request, *schemas.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockSchemasAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSchemasAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockSchemasAPI) UntagResourceWithContext(arg0 context.Context, arg1 *schemas.UntagResourceInput, arg2 ...request.Option) (*schemas.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockSchemasAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDiscoverer mocks base method
func (m *MockSchemasAPI) UpdateDiscoverer(arg0 *schemas.UpdateDiscovererInput) (*schemas.UpdateDiscovererOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscoverer", arg0)
	ret0, _ := ret[0].(*schemas.UpdateDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDiscoverer indicates an expected call of UpdateDiscoverer
func (mr *MockSchemasAPIMockRecorder) UpdateDiscoverer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscoverer", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateDiscoverer), arg0)
}

// UpdateDiscovererRequest mocks base method
func (m *MockSchemasAPI) UpdateDiscovererRequest(arg0 *schemas.UpdateDiscovererInput) (*request.Request, *schemas.UpdateDiscovererOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscovererRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.UpdateDiscovererOutput)
	return ret0, ret1
}

// UpdateDiscovererRequest indicates an expected call of UpdateDiscovererRequest
func (mr *MockSchemasAPIMockRecorder) UpdateDiscovererRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscovererRequest", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateDiscovererRequest), arg0)
}

// UpdateDiscovererWithContext mocks base method
func (m *MockSchemasAPI) UpdateDiscovererWithContext(arg0 context.Context, arg1 *schemas.UpdateDiscovererInput, arg2 ...request.Option) (*schemas.UpdateDiscovererOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDiscovererWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.UpdateDiscovererOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDiscovererWithContext indicates an expected call of UpdateDiscovererWithContext
func (mr *MockSchemasAPIMockRecorder) UpdateDiscovererWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscovererWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateDiscovererWithContext), varargs...)
}

// UpdateRegistry mocks base method
func (m *MockSchemasAPI) UpdateRegistry(arg0 *schemas.UpdateRegistryInput) (*schemas.UpdateRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistry", arg0)
	ret0, _ := ret[0].(*schemas.UpdateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistry indicates an expected call of UpdateRegistry
func (mr *MockSchemasAPIMockRecorder) UpdateRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistry", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateRegistry), arg0)
}

// UpdateRegistryRequest mocks base method
func (m *MockSchemasAPI) UpdateRegistryRequest(arg0 *schemas.UpdateRegistryInput) (*request.Request, *schemas.UpdateRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.UpdateRegistryOutput)
	return ret0, ret1
}

// UpdateRegistryRequest indicates an expected call of UpdateRegistryRequest
func (mr *MockSchemasAPIMockRecorder) UpdateRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistryRequest", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateRegistryRequest), arg0)
}

// UpdateRegistryWithContext mocks base method
func (m *MockSchemasAPI) UpdateRegistryWithContext(arg0 context.Context, arg1 *schemas.UpdateRegistryInput, arg2 ...request.Option) (*schemas.UpdateRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.UpdateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistryWithContext indicates an expected call of UpdateRegistryWithContext
func (mr *MockSchemasAPIMockRecorder) UpdateRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistryWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateRegistryWithContext), varargs...)
}

// UpdateSchema mocks base method
func (m *MockSchemasAPI) UpdateSchema(arg0 *schemas.UpdateSchemaInput) (*schemas.UpdateSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchema", arg0)
	ret0, _ := ret[0].(*schemas.UpdateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchema indicates an expected call of UpdateSchema
func (mr *MockSchemasAPIMockRecorder) UpdateSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateSchema), arg0)
}

// UpdateSchemaRequest mocks base method
func (m *MockSchemasAPI) UpdateSchemaRequest(arg0 *schemas.UpdateSchemaInput) (*request.Request, *schemas.UpdateSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*schemas.UpdateSchemaOutput)
	return ret0, ret1
}

// UpdateSchemaRequest indicates an expected call of UpdateSchemaRequest
func (mr *MockSchemasAPIMockRecorder) UpdateSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaRequest", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateSchemaRequest), arg0)
}

// UpdateSchemaWithContext mocks base method
func (m *MockSchemasAPI) UpdateSchemaWithContext(arg0 context.Context, arg1 *schemas.UpdateSchemaInput, arg2 ...request.Option) (*schemas.UpdateSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*schemas.UpdateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchemaWithContext indicates an expected call of UpdateSchemaWithContext
func (mr *MockSchemasAPIMockRecorder) UpdateSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).UpdateSchemaWithContext), varargs...)
}

// WaitUntilCodeBindingExists mocks base method
func (m *MockSchemasAPI) WaitUntilCodeBindingExists(arg0 *schemas.DescribeCodeBindingInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilCodeBindingExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilCodeBindingExists indicates an expected call of WaitUntilCodeBindingExists
func (mr *MockSchemasAPIMockRecorder) WaitUntilCodeBindingExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCodeBindingExists", reflect.TypeOf((*MockSchemasAPI)(nil).WaitUntilCodeBindingExists), arg0)
}

// WaitUntilCodeBindingExistsWithContext mocks base method
func (m *MockSchemasAPI) WaitUntilCodeBindingExistsWithContext(arg0 context.Context, arg1 *schemas.DescribeCodeBindingInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilCodeBindingExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilCodeBindingExistsWithContext indicates an expected call of WaitUntilCodeBindingExistsWithContext
func (mr *MockSchemasAPIMockRecorder) WaitUntilCodeBindingExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCodeBindingExistsWithContext", reflect.TypeOf((*MockSchemasAPI)(nil).WaitUntilCodeBindingExistsWithContext), varargs...)
}

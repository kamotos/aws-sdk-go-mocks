// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/computeoptimizer/computeoptimizeriface (interfaces: ComputeOptimizerAPI)

// Package computeoptimizermock is a generated GoMock package.
package computeoptimizermock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	computeoptimizer "github.com/aws/aws-sdk-go/service/computeoptimizer"
	gomock "github.com/golang/mock/gomock"
)

// MockComputeOptimizerAPI is a mock of ComputeOptimizerAPI interface.
type MockComputeOptimizerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockComputeOptimizerAPIMockRecorder
}

// MockComputeOptimizerAPIMockRecorder is the mock recorder for MockComputeOptimizerAPI.
type MockComputeOptimizerAPIMockRecorder struct {
	mock *MockComputeOptimizerAPI
}

// NewMockComputeOptimizerAPI creates a new mock instance.
func NewMockComputeOptimizerAPI(ctrl *gomock.Controller) *MockComputeOptimizerAPI {
	mock := &MockComputeOptimizerAPI{ctrl: ctrl}
	mock.recorder = &MockComputeOptimizerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeOptimizerAPI) EXPECT() *MockComputeOptimizerAPIMockRecorder {
	return m.recorder
}

// DeleteRecommendationPreferences mocks base method.
func (m *MockComputeOptimizerAPI) DeleteRecommendationPreferences(arg0 *computeoptimizer.DeleteRecommendationPreferencesInput) (*computeoptimizer.DeleteRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommendationPreferences", arg0)
	ret0, _ := ret[0].(*computeoptimizer.DeleteRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecommendationPreferences indicates an expected call of DeleteRecommendationPreferences.
func (mr *MockComputeOptimizerAPIMockRecorder) DeleteRecommendationPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationPreferences", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).DeleteRecommendationPreferences), arg0)
}

// DeleteRecommendationPreferencesRequest mocks base method.
func (m *MockComputeOptimizerAPI) DeleteRecommendationPreferencesRequest(arg0 *computeoptimizer.DeleteRecommendationPreferencesInput) (*request.Request, *computeoptimizer.DeleteRecommendationPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommendationPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.DeleteRecommendationPreferencesOutput)
	return ret0, ret1
}

// DeleteRecommendationPreferencesRequest indicates an expected call of DeleteRecommendationPreferencesRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) DeleteRecommendationPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationPreferencesRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).DeleteRecommendationPreferencesRequest), arg0)
}

// DeleteRecommendationPreferencesWithContext mocks base method.
func (m *MockComputeOptimizerAPI) DeleteRecommendationPreferencesWithContext(arg0 context.Context, arg1 *computeoptimizer.DeleteRecommendationPreferencesInput, arg2 ...request.Option) (*computeoptimizer.DeleteRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecommendationPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.DeleteRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecommendationPreferencesWithContext indicates an expected call of DeleteRecommendationPreferencesWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) DeleteRecommendationPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationPreferencesWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).DeleteRecommendationPreferencesWithContext), varargs...)
}

// DescribeRecommendationExportJobs mocks base method.
func (m *MockComputeOptimizerAPI) DescribeRecommendationExportJobs(arg0 *computeoptimizer.DescribeRecommendationExportJobsInput) (*computeoptimizer.DescribeRecommendationExportJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecommendationExportJobs", arg0)
	ret0, _ := ret[0].(*computeoptimizer.DescribeRecommendationExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecommendationExportJobs indicates an expected call of DescribeRecommendationExportJobs.
func (mr *MockComputeOptimizerAPIMockRecorder) DescribeRecommendationExportJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecommendationExportJobs", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).DescribeRecommendationExportJobs), arg0)
}

// DescribeRecommendationExportJobsRequest mocks base method.
func (m *MockComputeOptimizerAPI) DescribeRecommendationExportJobsRequest(arg0 *computeoptimizer.DescribeRecommendationExportJobsInput) (*request.Request, *computeoptimizer.DescribeRecommendationExportJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecommendationExportJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.DescribeRecommendationExportJobsOutput)
	return ret0, ret1
}

// DescribeRecommendationExportJobsRequest indicates an expected call of DescribeRecommendationExportJobsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) DescribeRecommendationExportJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecommendationExportJobsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).DescribeRecommendationExportJobsRequest), arg0)
}

// DescribeRecommendationExportJobsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) DescribeRecommendationExportJobsWithContext(arg0 context.Context, arg1 *computeoptimizer.DescribeRecommendationExportJobsInput, arg2 ...request.Option) (*computeoptimizer.DescribeRecommendationExportJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecommendationExportJobsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.DescribeRecommendationExportJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecommendationExportJobsWithContext indicates an expected call of DescribeRecommendationExportJobsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) DescribeRecommendationExportJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecommendationExportJobsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).DescribeRecommendationExportJobsWithContext), varargs...)
}

// ExportAutoScalingGroupRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) ExportAutoScalingGroupRecommendations(arg0 *computeoptimizer.ExportAutoScalingGroupRecommendationsInput) (*computeoptimizer.ExportAutoScalingGroupRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportAutoScalingGroupRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.ExportAutoScalingGroupRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportAutoScalingGroupRecommendations indicates an expected call of ExportAutoScalingGroupRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportAutoScalingGroupRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportAutoScalingGroupRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportAutoScalingGroupRecommendations), arg0)
}

// ExportAutoScalingGroupRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) ExportAutoScalingGroupRecommendationsRequest(arg0 *computeoptimizer.ExportAutoScalingGroupRecommendationsInput) (*request.Request, *computeoptimizer.ExportAutoScalingGroupRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportAutoScalingGroupRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.ExportAutoScalingGroupRecommendationsOutput)
	return ret0, ret1
}

// ExportAutoScalingGroupRecommendationsRequest indicates an expected call of ExportAutoScalingGroupRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportAutoScalingGroupRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportAutoScalingGroupRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportAutoScalingGroupRecommendationsRequest), arg0)
}

// ExportAutoScalingGroupRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) ExportAutoScalingGroupRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.ExportAutoScalingGroupRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.ExportAutoScalingGroupRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportAutoScalingGroupRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.ExportAutoScalingGroupRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportAutoScalingGroupRecommendationsWithContext indicates an expected call of ExportAutoScalingGroupRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportAutoScalingGroupRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportAutoScalingGroupRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportAutoScalingGroupRecommendationsWithContext), varargs...)
}

// ExportEBSVolumeRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) ExportEBSVolumeRecommendations(arg0 *computeoptimizer.ExportEBSVolumeRecommendationsInput) (*computeoptimizer.ExportEBSVolumeRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEBSVolumeRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.ExportEBSVolumeRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportEBSVolumeRecommendations indicates an expected call of ExportEBSVolumeRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportEBSVolumeRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEBSVolumeRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportEBSVolumeRecommendations), arg0)
}

// ExportEBSVolumeRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) ExportEBSVolumeRecommendationsRequest(arg0 *computeoptimizer.ExportEBSVolumeRecommendationsInput) (*request.Request, *computeoptimizer.ExportEBSVolumeRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEBSVolumeRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.ExportEBSVolumeRecommendationsOutput)
	return ret0, ret1
}

// ExportEBSVolumeRecommendationsRequest indicates an expected call of ExportEBSVolumeRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportEBSVolumeRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEBSVolumeRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportEBSVolumeRecommendationsRequest), arg0)
}

// ExportEBSVolumeRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) ExportEBSVolumeRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.ExportEBSVolumeRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.ExportEBSVolumeRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportEBSVolumeRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.ExportEBSVolumeRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportEBSVolumeRecommendationsWithContext indicates an expected call of ExportEBSVolumeRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportEBSVolumeRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEBSVolumeRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportEBSVolumeRecommendationsWithContext), varargs...)
}

// ExportEC2InstanceRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) ExportEC2InstanceRecommendations(arg0 *computeoptimizer.ExportEC2InstanceRecommendationsInput) (*computeoptimizer.ExportEC2InstanceRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEC2InstanceRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.ExportEC2InstanceRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportEC2InstanceRecommendations indicates an expected call of ExportEC2InstanceRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportEC2InstanceRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEC2InstanceRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportEC2InstanceRecommendations), arg0)
}

// ExportEC2InstanceRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) ExportEC2InstanceRecommendationsRequest(arg0 *computeoptimizer.ExportEC2InstanceRecommendationsInput) (*request.Request, *computeoptimizer.ExportEC2InstanceRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEC2InstanceRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.ExportEC2InstanceRecommendationsOutput)
	return ret0, ret1
}

// ExportEC2InstanceRecommendationsRequest indicates an expected call of ExportEC2InstanceRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportEC2InstanceRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEC2InstanceRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportEC2InstanceRecommendationsRequest), arg0)
}

// ExportEC2InstanceRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) ExportEC2InstanceRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.ExportEC2InstanceRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.ExportEC2InstanceRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportEC2InstanceRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.ExportEC2InstanceRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportEC2InstanceRecommendationsWithContext indicates an expected call of ExportEC2InstanceRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportEC2InstanceRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEC2InstanceRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportEC2InstanceRecommendationsWithContext), varargs...)
}

// ExportLambdaFunctionRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) ExportLambdaFunctionRecommendations(arg0 *computeoptimizer.ExportLambdaFunctionRecommendationsInput) (*computeoptimizer.ExportLambdaFunctionRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportLambdaFunctionRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.ExportLambdaFunctionRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportLambdaFunctionRecommendations indicates an expected call of ExportLambdaFunctionRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportLambdaFunctionRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLambdaFunctionRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportLambdaFunctionRecommendations), arg0)
}

// ExportLambdaFunctionRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) ExportLambdaFunctionRecommendationsRequest(arg0 *computeoptimizer.ExportLambdaFunctionRecommendationsInput) (*request.Request, *computeoptimizer.ExportLambdaFunctionRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportLambdaFunctionRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.ExportLambdaFunctionRecommendationsOutput)
	return ret0, ret1
}

// ExportLambdaFunctionRecommendationsRequest indicates an expected call of ExportLambdaFunctionRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportLambdaFunctionRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLambdaFunctionRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportLambdaFunctionRecommendationsRequest), arg0)
}

// ExportLambdaFunctionRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) ExportLambdaFunctionRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.ExportLambdaFunctionRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.ExportLambdaFunctionRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportLambdaFunctionRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.ExportLambdaFunctionRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportLambdaFunctionRecommendationsWithContext indicates an expected call of ExportLambdaFunctionRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) ExportLambdaFunctionRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportLambdaFunctionRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).ExportLambdaFunctionRecommendationsWithContext), varargs...)
}

// GetAutoScalingGroupRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) GetAutoScalingGroupRecommendations(arg0 *computeoptimizer.GetAutoScalingGroupRecommendationsInput) (*computeoptimizer.GetAutoScalingGroupRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroupRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetAutoScalingGroupRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoScalingGroupRecommendations indicates an expected call of GetAutoScalingGroupRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) GetAutoScalingGroupRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetAutoScalingGroupRecommendations), arg0)
}

// GetAutoScalingGroupRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetAutoScalingGroupRecommendationsRequest(arg0 *computeoptimizer.GetAutoScalingGroupRecommendationsInput) (*request.Request, *computeoptimizer.GetAutoScalingGroupRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoScalingGroupRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetAutoScalingGroupRecommendationsOutput)
	return ret0, ret1
}

// GetAutoScalingGroupRecommendationsRequest indicates an expected call of GetAutoScalingGroupRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetAutoScalingGroupRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetAutoScalingGroupRecommendationsRequest), arg0)
}

// GetAutoScalingGroupRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetAutoScalingGroupRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.GetAutoScalingGroupRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.GetAutoScalingGroupRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutoScalingGroupRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetAutoScalingGroupRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoScalingGroupRecommendationsWithContext indicates an expected call of GetAutoScalingGroupRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetAutoScalingGroupRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoScalingGroupRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetAutoScalingGroupRecommendationsWithContext), varargs...)
}

// GetEBSVolumeRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) GetEBSVolumeRecommendations(arg0 *computeoptimizer.GetEBSVolumeRecommendationsInput) (*computeoptimizer.GetEBSVolumeRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEBSVolumeRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetEBSVolumeRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEBSVolumeRecommendations indicates an expected call of GetEBSVolumeRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEBSVolumeRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEBSVolumeRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEBSVolumeRecommendations), arg0)
}

// GetEBSVolumeRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetEBSVolumeRecommendationsRequest(arg0 *computeoptimizer.GetEBSVolumeRecommendationsInput) (*request.Request, *computeoptimizer.GetEBSVolumeRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEBSVolumeRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetEBSVolumeRecommendationsOutput)
	return ret0, ret1
}

// GetEBSVolumeRecommendationsRequest indicates an expected call of GetEBSVolumeRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEBSVolumeRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEBSVolumeRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEBSVolumeRecommendationsRequest), arg0)
}

// GetEBSVolumeRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetEBSVolumeRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.GetEBSVolumeRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.GetEBSVolumeRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEBSVolumeRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetEBSVolumeRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEBSVolumeRecommendationsWithContext indicates an expected call of GetEBSVolumeRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEBSVolumeRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEBSVolumeRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEBSVolumeRecommendationsWithContext), varargs...)
}

// GetEC2InstanceRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) GetEC2InstanceRecommendations(arg0 *computeoptimizer.GetEC2InstanceRecommendationsInput) (*computeoptimizer.GetEC2InstanceRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEC2InstanceRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetEC2InstanceRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2InstanceRecommendations indicates an expected call of GetEC2InstanceRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEC2InstanceRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2InstanceRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEC2InstanceRecommendations), arg0)
}

// GetEC2InstanceRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetEC2InstanceRecommendationsRequest(arg0 *computeoptimizer.GetEC2InstanceRecommendationsInput) (*request.Request, *computeoptimizer.GetEC2InstanceRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEC2InstanceRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetEC2InstanceRecommendationsOutput)
	return ret0, ret1
}

// GetEC2InstanceRecommendationsRequest indicates an expected call of GetEC2InstanceRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEC2InstanceRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2InstanceRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEC2InstanceRecommendationsRequest), arg0)
}

// GetEC2InstanceRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetEC2InstanceRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.GetEC2InstanceRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.GetEC2InstanceRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEC2InstanceRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetEC2InstanceRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2InstanceRecommendationsWithContext indicates an expected call of GetEC2InstanceRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEC2InstanceRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2InstanceRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEC2InstanceRecommendationsWithContext), varargs...)
}

// GetEC2RecommendationProjectedMetrics mocks base method.
func (m *MockComputeOptimizerAPI) GetEC2RecommendationProjectedMetrics(arg0 *computeoptimizer.GetEC2RecommendationProjectedMetricsInput) (*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEC2RecommendationProjectedMetrics", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2RecommendationProjectedMetrics indicates an expected call of GetEC2RecommendationProjectedMetrics.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEC2RecommendationProjectedMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2RecommendationProjectedMetrics", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEC2RecommendationProjectedMetrics), arg0)
}

// GetEC2RecommendationProjectedMetricsRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetEC2RecommendationProjectedMetricsRequest(arg0 *computeoptimizer.GetEC2RecommendationProjectedMetricsInput) (*request.Request, *computeoptimizer.GetEC2RecommendationProjectedMetricsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEC2RecommendationProjectedMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput)
	return ret0, ret1
}

// GetEC2RecommendationProjectedMetricsRequest indicates an expected call of GetEC2RecommendationProjectedMetricsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEC2RecommendationProjectedMetricsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2RecommendationProjectedMetricsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEC2RecommendationProjectedMetricsRequest), arg0)
}

// GetEC2RecommendationProjectedMetricsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetEC2RecommendationProjectedMetricsWithContext(arg0 context.Context, arg1 *computeoptimizer.GetEC2RecommendationProjectedMetricsInput, arg2 ...request.Option) (*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEC2RecommendationProjectedMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetEC2RecommendationProjectedMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2RecommendationProjectedMetricsWithContext indicates an expected call of GetEC2RecommendationProjectedMetricsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEC2RecommendationProjectedMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2RecommendationProjectedMetricsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEC2RecommendationProjectedMetricsWithContext), varargs...)
}

// GetEffectiveRecommendationPreferences mocks base method.
func (m *MockComputeOptimizerAPI) GetEffectiveRecommendationPreferences(arg0 *computeoptimizer.GetEffectiveRecommendationPreferencesInput) (*computeoptimizer.GetEffectiveRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveRecommendationPreferences", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetEffectiveRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveRecommendationPreferences indicates an expected call of GetEffectiveRecommendationPreferences.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEffectiveRecommendationPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveRecommendationPreferences", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEffectiveRecommendationPreferences), arg0)
}

// GetEffectiveRecommendationPreferencesRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetEffectiveRecommendationPreferencesRequest(arg0 *computeoptimizer.GetEffectiveRecommendationPreferencesInput) (*request.Request, *computeoptimizer.GetEffectiveRecommendationPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveRecommendationPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetEffectiveRecommendationPreferencesOutput)
	return ret0, ret1
}

// GetEffectiveRecommendationPreferencesRequest indicates an expected call of GetEffectiveRecommendationPreferencesRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEffectiveRecommendationPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveRecommendationPreferencesRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEffectiveRecommendationPreferencesRequest), arg0)
}

// GetEffectiveRecommendationPreferencesWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetEffectiveRecommendationPreferencesWithContext(arg0 context.Context, arg1 *computeoptimizer.GetEffectiveRecommendationPreferencesInput, arg2 ...request.Option) (*computeoptimizer.GetEffectiveRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEffectiveRecommendationPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetEffectiveRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveRecommendationPreferencesWithContext indicates an expected call of GetEffectiveRecommendationPreferencesWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEffectiveRecommendationPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveRecommendationPreferencesWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEffectiveRecommendationPreferencesWithContext), varargs...)
}

// GetEnrollmentStatus mocks base method.
func (m *MockComputeOptimizerAPI) GetEnrollmentStatus(arg0 *computeoptimizer.GetEnrollmentStatusInput) (*computeoptimizer.GetEnrollmentStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentStatus", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetEnrollmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentStatus indicates an expected call of GetEnrollmentStatus.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEnrollmentStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentStatus", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEnrollmentStatus), arg0)
}

// GetEnrollmentStatusRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetEnrollmentStatusRequest(arg0 *computeoptimizer.GetEnrollmentStatusInput) (*request.Request, *computeoptimizer.GetEnrollmentStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetEnrollmentStatusOutput)
	return ret0, ret1
}

// GetEnrollmentStatusRequest indicates an expected call of GetEnrollmentStatusRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEnrollmentStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentStatusRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEnrollmentStatusRequest), arg0)
}

// GetEnrollmentStatusWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetEnrollmentStatusWithContext(arg0 context.Context, arg1 *computeoptimizer.GetEnrollmentStatusInput, arg2 ...request.Option) (*computeoptimizer.GetEnrollmentStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnrollmentStatusWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetEnrollmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentStatusWithContext indicates an expected call of GetEnrollmentStatusWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEnrollmentStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentStatusWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEnrollmentStatusWithContext), varargs...)
}

// GetEnrollmentStatusesForOrganization mocks base method.
func (m *MockComputeOptimizerAPI) GetEnrollmentStatusesForOrganization(arg0 *computeoptimizer.GetEnrollmentStatusesForOrganizationInput) (*computeoptimizer.GetEnrollmentStatusesForOrganizationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentStatusesForOrganization", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetEnrollmentStatusesForOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentStatusesForOrganization indicates an expected call of GetEnrollmentStatusesForOrganization.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEnrollmentStatusesForOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentStatusesForOrganization", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEnrollmentStatusesForOrganization), arg0)
}

// GetEnrollmentStatusesForOrganizationRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetEnrollmentStatusesForOrganizationRequest(arg0 *computeoptimizer.GetEnrollmentStatusesForOrganizationInput) (*request.Request, *computeoptimizer.GetEnrollmentStatusesForOrganizationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentStatusesForOrganizationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetEnrollmentStatusesForOrganizationOutput)
	return ret0, ret1
}

// GetEnrollmentStatusesForOrganizationRequest indicates an expected call of GetEnrollmentStatusesForOrganizationRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEnrollmentStatusesForOrganizationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentStatusesForOrganizationRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEnrollmentStatusesForOrganizationRequest), arg0)
}

// GetEnrollmentStatusesForOrganizationWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetEnrollmentStatusesForOrganizationWithContext(arg0 context.Context, arg1 *computeoptimizer.GetEnrollmentStatusesForOrganizationInput, arg2 ...request.Option) (*computeoptimizer.GetEnrollmentStatusesForOrganizationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnrollmentStatusesForOrganizationWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetEnrollmentStatusesForOrganizationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentStatusesForOrganizationWithContext indicates an expected call of GetEnrollmentStatusesForOrganizationWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetEnrollmentStatusesForOrganizationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentStatusesForOrganizationWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetEnrollmentStatusesForOrganizationWithContext), varargs...)
}

// GetLambdaFunctionRecommendations mocks base method.
func (m *MockComputeOptimizerAPI) GetLambdaFunctionRecommendations(arg0 *computeoptimizer.GetLambdaFunctionRecommendationsInput) (*computeoptimizer.GetLambdaFunctionRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLambdaFunctionRecommendations", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetLambdaFunctionRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLambdaFunctionRecommendations indicates an expected call of GetLambdaFunctionRecommendations.
func (mr *MockComputeOptimizerAPIMockRecorder) GetLambdaFunctionRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLambdaFunctionRecommendations", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetLambdaFunctionRecommendations), arg0)
}

// GetLambdaFunctionRecommendationsRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetLambdaFunctionRecommendationsRequest(arg0 *computeoptimizer.GetLambdaFunctionRecommendationsInput) (*request.Request, *computeoptimizer.GetLambdaFunctionRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLambdaFunctionRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetLambdaFunctionRecommendationsOutput)
	return ret0, ret1
}

// GetLambdaFunctionRecommendationsRequest indicates an expected call of GetLambdaFunctionRecommendationsRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetLambdaFunctionRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLambdaFunctionRecommendationsRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetLambdaFunctionRecommendationsRequest), arg0)
}

// GetLambdaFunctionRecommendationsWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetLambdaFunctionRecommendationsWithContext(arg0 context.Context, arg1 *computeoptimizer.GetLambdaFunctionRecommendationsInput, arg2 ...request.Option) (*computeoptimizer.GetLambdaFunctionRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLambdaFunctionRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetLambdaFunctionRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLambdaFunctionRecommendationsWithContext indicates an expected call of GetLambdaFunctionRecommendationsWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetLambdaFunctionRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLambdaFunctionRecommendationsWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetLambdaFunctionRecommendationsWithContext), varargs...)
}

// GetRecommendationPreferences mocks base method.
func (m *MockComputeOptimizerAPI) GetRecommendationPreferences(arg0 *computeoptimizer.GetRecommendationPreferencesInput) (*computeoptimizer.GetRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationPreferences", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationPreferences indicates an expected call of GetRecommendationPreferences.
func (mr *MockComputeOptimizerAPIMockRecorder) GetRecommendationPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationPreferences", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetRecommendationPreferences), arg0)
}

// GetRecommendationPreferencesRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetRecommendationPreferencesRequest(arg0 *computeoptimizer.GetRecommendationPreferencesInput) (*request.Request, *computeoptimizer.GetRecommendationPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetRecommendationPreferencesOutput)
	return ret0, ret1
}

// GetRecommendationPreferencesRequest indicates an expected call of GetRecommendationPreferencesRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetRecommendationPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationPreferencesRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetRecommendationPreferencesRequest), arg0)
}

// GetRecommendationPreferencesWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetRecommendationPreferencesWithContext(arg0 context.Context, arg1 *computeoptimizer.GetRecommendationPreferencesInput, arg2 ...request.Option) (*computeoptimizer.GetRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationPreferencesWithContext indicates an expected call of GetRecommendationPreferencesWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetRecommendationPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationPreferencesWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetRecommendationPreferencesWithContext), varargs...)
}

// GetRecommendationSummaries mocks base method.
func (m *MockComputeOptimizerAPI) GetRecommendationSummaries(arg0 *computeoptimizer.GetRecommendationSummariesInput) (*computeoptimizer.GetRecommendationSummariesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationSummaries", arg0)
	ret0, _ := ret[0].(*computeoptimizer.GetRecommendationSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationSummaries indicates an expected call of GetRecommendationSummaries.
func (mr *MockComputeOptimizerAPIMockRecorder) GetRecommendationSummaries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationSummaries", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetRecommendationSummaries), arg0)
}

// GetRecommendationSummariesRequest mocks base method.
func (m *MockComputeOptimizerAPI) GetRecommendationSummariesRequest(arg0 *computeoptimizer.GetRecommendationSummariesInput) (*request.Request, *computeoptimizer.GetRecommendationSummariesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationSummariesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.GetRecommendationSummariesOutput)
	return ret0, ret1
}

// GetRecommendationSummariesRequest indicates an expected call of GetRecommendationSummariesRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) GetRecommendationSummariesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationSummariesRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetRecommendationSummariesRequest), arg0)
}

// GetRecommendationSummariesWithContext mocks base method.
func (m *MockComputeOptimizerAPI) GetRecommendationSummariesWithContext(arg0 context.Context, arg1 *computeoptimizer.GetRecommendationSummariesInput, arg2 ...request.Option) (*computeoptimizer.GetRecommendationSummariesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationSummariesWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.GetRecommendationSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationSummariesWithContext indicates an expected call of GetRecommendationSummariesWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) GetRecommendationSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationSummariesWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).GetRecommendationSummariesWithContext), varargs...)
}

// PutRecommendationPreferences mocks base method.
func (m *MockComputeOptimizerAPI) PutRecommendationPreferences(arg0 *computeoptimizer.PutRecommendationPreferencesInput) (*computeoptimizer.PutRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRecommendationPreferences", arg0)
	ret0, _ := ret[0].(*computeoptimizer.PutRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecommendationPreferences indicates an expected call of PutRecommendationPreferences.
func (mr *MockComputeOptimizerAPIMockRecorder) PutRecommendationPreferences(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecommendationPreferences", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).PutRecommendationPreferences), arg0)
}

// PutRecommendationPreferencesRequest mocks base method.
func (m *MockComputeOptimizerAPI) PutRecommendationPreferencesRequest(arg0 *computeoptimizer.PutRecommendationPreferencesInput) (*request.Request, *computeoptimizer.PutRecommendationPreferencesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRecommendationPreferencesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.PutRecommendationPreferencesOutput)
	return ret0, ret1
}

// PutRecommendationPreferencesRequest indicates an expected call of PutRecommendationPreferencesRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) PutRecommendationPreferencesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecommendationPreferencesRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).PutRecommendationPreferencesRequest), arg0)
}

// PutRecommendationPreferencesWithContext mocks base method.
func (m *MockComputeOptimizerAPI) PutRecommendationPreferencesWithContext(arg0 context.Context, arg1 *computeoptimizer.PutRecommendationPreferencesInput, arg2 ...request.Option) (*computeoptimizer.PutRecommendationPreferencesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRecommendationPreferencesWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.PutRecommendationPreferencesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecommendationPreferencesWithContext indicates an expected call of PutRecommendationPreferencesWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) PutRecommendationPreferencesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecommendationPreferencesWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).PutRecommendationPreferencesWithContext), varargs...)
}

// UpdateEnrollmentStatus mocks base method.
func (m *MockComputeOptimizerAPI) UpdateEnrollmentStatus(arg0 *computeoptimizer.UpdateEnrollmentStatusInput) (*computeoptimizer.UpdateEnrollmentStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrollmentStatus", arg0)
	ret0, _ := ret[0].(*computeoptimizer.UpdateEnrollmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrollmentStatus indicates an expected call of UpdateEnrollmentStatus.
func (mr *MockComputeOptimizerAPIMockRecorder) UpdateEnrollmentStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrollmentStatus", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).UpdateEnrollmentStatus), arg0)
}

// UpdateEnrollmentStatusRequest mocks base method.
func (m *MockComputeOptimizerAPI) UpdateEnrollmentStatusRequest(arg0 *computeoptimizer.UpdateEnrollmentStatusInput) (*request.Request, *computeoptimizer.UpdateEnrollmentStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrollmentStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*computeoptimizer.UpdateEnrollmentStatusOutput)
	return ret0, ret1
}

// UpdateEnrollmentStatusRequest indicates an expected call of UpdateEnrollmentStatusRequest.
func (mr *MockComputeOptimizerAPIMockRecorder) UpdateEnrollmentStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrollmentStatusRequest", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).UpdateEnrollmentStatusRequest), arg0)
}

// UpdateEnrollmentStatusWithContext mocks base method.
func (m *MockComputeOptimizerAPI) UpdateEnrollmentStatusWithContext(arg0 context.Context, arg1 *computeoptimizer.UpdateEnrollmentStatusInput, arg2 ...request.Option) (*computeoptimizer.UpdateEnrollmentStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnrollmentStatusWithContext", varargs...)
	ret0, _ := ret[0].(*computeoptimizer.UpdateEnrollmentStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrollmentStatusWithContext indicates an expected call of UpdateEnrollmentStatusWithContext.
func (mr *MockComputeOptimizerAPIMockRecorder) UpdateEnrollmentStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrollmentStatusWithContext", reflect.TypeOf((*MockComputeOptimizerAPI)(nil).UpdateEnrollmentStatusWithContext), varargs...)
}

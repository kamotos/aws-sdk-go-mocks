// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/apigatewayv2/apigatewayv2iface (interfaces: ApiGatewayV2API)

// Package apigatewayv2mock is a generated GoMock package.
package apigatewayv2mock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	apigatewayv2 "github.com/aws/aws-sdk-go/service/apigatewayv2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApiGatewayV2API is a mock of ApiGatewayV2API interface
type MockApiGatewayV2API struct {
	ctrl     *gomock.Controller
	recorder *MockApiGatewayV2APIMockRecorder
}

// MockApiGatewayV2APIMockRecorder is the mock recorder for MockApiGatewayV2API
type MockApiGatewayV2APIMockRecorder struct {
	mock *MockApiGatewayV2API
}

// NewMockApiGatewayV2API creates a new mock instance
func NewMockApiGatewayV2API(ctrl *gomock.Controller) *MockApiGatewayV2API {
	mock := &MockApiGatewayV2API{ctrl: ctrl}
	mock.recorder = &MockApiGatewayV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiGatewayV2API) EXPECT() *MockApiGatewayV2APIMockRecorder {
	return m.recorder
}

// CreateApi mocks base method
func (m *MockApiGatewayV2API) CreateApi(arg0 *apigatewayv2.CreateApiInput) (*apigatewayv2.CreateApiOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApi", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApi indicates an expected call of CreateApi
func (mr *MockApiGatewayV2APIMockRecorder) CreateApi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApi", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateApi), arg0)
}

// CreateApiMapping mocks base method
func (m *MockApiGatewayV2API) CreateApiMapping(arg0 *apigatewayv2.CreateApiMappingInput) (*apigatewayv2.CreateApiMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiMapping", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiMapping indicates an expected call of CreateApiMapping
func (mr *MockApiGatewayV2APIMockRecorder) CreateApiMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiMapping", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateApiMapping), arg0)
}

// CreateApiMappingRequest mocks base method
func (m *MockApiGatewayV2API) CreateApiMappingRequest(arg0 *apigatewayv2.CreateApiMappingInput) (*request.Request, *apigatewayv2.CreateApiMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateApiMappingOutput)
	return ret0, ret1
}

// CreateApiMappingRequest indicates an expected call of CreateApiMappingRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateApiMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiMappingRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateApiMappingRequest), arg0)
}

// CreateApiMappingWithContext mocks base method
func (m *MockApiGatewayV2API) CreateApiMappingWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateApiMappingInput, arg2 ...request.Option) (*apigatewayv2.CreateApiMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApiMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiMappingWithContext indicates an expected call of CreateApiMappingWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateApiMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiMappingWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateApiMappingWithContext), varargs...)
}

// CreateApiRequest mocks base method
func (m *MockApiGatewayV2API) CreateApiRequest(arg0 *apigatewayv2.CreateApiInput) (*request.Request, *apigatewayv2.CreateApiOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateApiOutput)
	return ret0, ret1
}

// CreateApiRequest indicates an expected call of CreateApiRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateApiRequest), arg0)
}

// CreateApiWithContext mocks base method
func (m *MockApiGatewayV2API) CreateApiWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateApiInput, arg2 ...request.Option) (*apigatewayv2.CreateApiOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiWithContext indicates an expected call of CreateApiWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateApiWithContext), varargs...)
}

// CreateAuthorizer mocks base method
func (m *MockApiGatewayV2API) CreateAuthorizer(arg0 *apigatewayv2.CreateAuthorizerInput) (*apigatewayv2.CreateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizer", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizer indicates an expected call of CreateAuthorizer
func (mr *MockApiGatewayV2APIMockRecorder) CreateAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizer", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateAuthorizer), arg0)
}

// CreateAuthorizerRequest mocks base method
func (m *MockApiGatewayV2API) CreateAuthorizerRequest(arg0 *apigatewayv2.CreateAuthorizerInput) (*request.Request, *apigatewayv2.CreateAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateAuthorizerOutput)
	return ret0, ret1
}

// CreateAuthorizerRequest indicates an expected call of CreateAuthorizerRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizerRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateAuthorizerRequest), arg0)
}

// CreateAuthorizerWithContext mocks base method
func (m *MockApiGatewayV2API) CreateAuthorizerWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateAuthorizerInput, arg2 ...request.Option) (*apigatewayv2.CreateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizerWithContext indicates an expected call of CreateAuthorizerWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizerWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateAuthorizerWithContext), varargs...)
}

// CreateDeployment mocks base method
func (m *MockApiGatewayV2API) CreateDeployment(arg0 *apigatewayv2.CreateDeploymentInput) (*apigatewayv2.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockApiGatewayV2APIMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateDeployment), arg0)
}

// CreateDeploymentRequest mocks base method
func (m *MockApiGatewayV2API) CreateDeploymentRequest(arg0 *apigatewayv2.CreateDeploymentInput) (*request.Request, *apigatewayv2.CreateDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateDeploymentOutput)
	return ret0, ret1
}

// CreateDeploymentRequest indicates an expected call of CreateDeploymentRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateDeploymentRequest), arg0)
}

// CreateDeploymentWithContext mocks base method
func (m *MockApiGatewayV2API) CreateDeploymentWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateDeploymentInput, arg2 ...request.Option) (*apigatewayv2.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentWithContext indicates an expected call of CreateDeploymentWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateDeploymentWithContext), varargs...)
}

// CreateDomainName mocks base method
func (m *MockApiGatewayV2API) CreateDomainName(arg0 *apigatewayv2.CreateDomainNameInput) (*apigatewayv2.CreateDomainNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainName", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainName indicates an expected call of CreateDomainName
func (mr *MockApiGatewayV2APIMockRecorder) CreateDomainName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainName", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateDomainName), arg0)
}

// CreateDomainNameRequest mocks base method
func (m *MockApiGatewayV2API) CreateDomainNameRequest(arg0 *apigatewayv2.CreateDomainNameInput) (*request.Request, *apigatewayv2.CreateDomainNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateDomainNameOutput)
	return ret0, ret1
}

// CreateDomainNameRequest indicates an expected call of CreateDomainNameRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateDomainNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainNameRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateDomainNameRequest), arg0)
}

// CreateDomainNameWithContext mocks base method
func (m *MockApiGatewayV2API) CreateDomainNameWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateDomainNameInput, arg2 ...request.Option) (*apigatewayv2.CreateDomainNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainNameWithContext indicates an expected call of CreateDomainNameWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainNameWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateDomainNameWithContext), varargs...)
}

// CreateIntegration mocks base method
func (m *MockApiGatewayV2API) CreateIntegration(arg0 *apigatewayv2.CreateIntegrationInput) (*apigatewayv2.CreateIntegrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegration", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntegration indicates an expected call of CreateIntegration
func (mr *MockApiGatewayV2APIMockRecorder) CreateIntegration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegration", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateIntegration), arg0)
}

// CreateIntegrationRequest mocks base method
func (m *MockApiGatewayV2API) CreateIntegrationRequest(arg0 *apigatewayv2.CreateIntegrationInput) (*request.Request, *apigatewayv2.CreateIntegrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateIntegrationOutput)
	return ret0, ret1
}

// CreateIntegrationRequest indicates an expected call of CreateIntegrationRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateIntegrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateIntegrationRequest), arg0)
}

// CreateIntegrationResponse mocks base method
func (m *MockApiGatewayV2API) CreateIntegrationResponse(arg0 *apigatewayv2.CreateIntegrationResponseInput) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntegrationResponse indicates an expected call of CreateIntegrationResponse
func (mr *MockApiGatewayV2APIMockRecorder) CreateIntegrationResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateIntegrationResponse), arg0)
}

// CreateIntegrationResponseRequest mocks base method
func (m *MockApiGatewayV2API) CreateIntegrationResponseRequest(arg0 *apigatewayv2.CreateIntegrationResponseInput) (*request.Request, *apigatewayv2.CreateIntegrationResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateIntegrationResponseOutput)
	return ret0, ret1
}

// CreateIntegrationResponseRequest indicates an expected call of CreateIntegrationResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateIntegrationResponseRequest), arg0)
}

// CreateIntegrationResponseWithContext mocks base method
func (m *MockApiGatewayV2API) CreateIntegrationResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateIntegrationResponseInput, arg2 ...request.Option) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntegrationResponseWithContext indicates an expected call of CreateIntegrationResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateIntegrationResponseWithContext), varargs...)
}

// CreateIntegrationWithContext mocks base method
func (m *MockApiGatewayV2API) CreateIntegrationWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateIntegrationInput, arg2 ...request.Option) (*apigatewayv2.CreateIntegrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntegrationWithContext indicates an expected call of CreateIntegrationWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegrationWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateIntegrationWithContext), varargs...)
}

// CreateModel mocks base method
func (m *MockApiGatewayV2API) CreateModel(arg0 *apigatewayv2.CreateModelInput) (*apigatewayv2.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel
func (mr *MockApiGatewayV2APIMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateModel), arg0)
}

// CreateModelRequest mocks base method
func (m *MockApiGatewayV2API) CreateModelRequest(arg0 *apigatewayv2.CreateModelInput) (*request.Request, *apigatewayv2.CreateModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateModelOutput)
	return ret0, ret1
}

// CreateModelRequest indicates an expected call of CreateModelRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateModelRequest), arg0)
}

// CreateModelWithContext mocks base method
func (m *MockApiGatewayV2API) CreateModelWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateModelInput, arg2 ...request.Option) (*apigatewayv2.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelWithContext indicates an expected call of CreateModelWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateModelWithContext), varargs...)
}

// CreateRoute mocks base method
func (m *MockApiGatewayV2API) CreateRoute(arg0 *apigatewayv2.CreateRouteInput) (*apigatewayv2.CreateRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute
func (mr *MockApiGatewayV2APIMockRecorder) CreateRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateRoute), arg0)
}

// CreateRouteRequest mocks base method
func (m *MockApiGatewayV2API) CreateRouteRequest(arg0 *apigatewayv2.CreateRouteInput) (*request.Request, *apigatewayv2.CreateRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateRouteOutput)
	return ret0, ret1
}

// CreateRouteRequest indicates an expected call of CreateRouteRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateRouteRequest), arg0)
}

// CreateRouteResponse mocks base method
func (m *MockApiGatewayV2API) CreateRouteResponse(arg0 *apigatewayv2.CreateRouteResponseInput) (*apigatewayv2.CreateRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteResponse indicates an expected call of CreateRouteResponse
func (mr *MockApiGatewayV2APIMockRecorder) CreateRouteResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateRouteResponse), arg0)
}

// CreateRouteResponseRequest mocks base method
func (m *MockApiGatewayV2API) CreateRouteResponseRequest(arg0 *apigatewayv2.CreateRouteResponseInput) (*request.Request, *apigatewayv2.CreateRouteResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouteResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateRouteResponseOutput)
	return ret0, ret1
}

// CreateRouteResponseRequest indicates an expected call of CreateRouteResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateRouteResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateRouteResponseRequest), arg0)
}

// CreateRouteResponseWithContext mocks base method
func (m *MockApiGatewayV2API) CreateRouteResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateRouteResponseInput, arg2 ...request.Option) (*apigatewayv2.CreateRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteResponseWithContext indicates an expected call of CreateRouteResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateRouteResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateRouteResponseWithContext), varargs...)
}

// CreateRouteWithContext mocks base method
func (m *MockApiGatewayV2API) CreateRouteWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateRouteInput, arg2 ...request.Option) (*apigatewayv2.CreateRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRouteWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouteWithContext indicates an expected call of CreateRouteWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouteWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateRouteWithContext), varargs...)
}

// CreateStage mocks base method
func (m *MockApiGatewayV2API) CreateStage(arg0 *apigatewayv2.CreateStageInput) (*apigatewayv2.CreateStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStage", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStage indicates an expected call of CreateStage
func (mr *MockApiGatewayV2APIMockRecorder) CreateStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStage", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateStage), arg0)
}

// CreateStageRequest mocks base method
func (m *MockApiGatewayV2API) CreateStageRequest(arg0 *apigatewayv2.CreateStageInput) (*request.Request, *apigatewayv2.CreateStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateStageOutput)
	return ret0, ret1
}

// CreateStageRequest indicates an expected call of CreateStageRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateStageRequest), arg0)
}

// CreateStageWithContext mocks base method
func (m *MockApiGatewayV2API) CreateStageWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateStageInput, arg2 ...request.Option) (*apigatewayv2.CreateStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStageWithContext indicates an expected call of CreateStageWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateStageWithContext), varargs...)
}

// CreateVpcLink mocks base method
func (m *MockApiGatewayV2API) CreateVpcLink(arg0 *apigatewayv2.CreateVpcLinkInput) (*apigatewayv2.CreateVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcLink", arg0)
	ret0, _ := ret[0].(*apigatewayv2.CreateVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcLink indicates an expected call of CreateVpcLink
func (mr *MockApiGatewayV2APIMockRecorder) CreateVpcLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcLink", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateVpcLink), arg0)
}

// CreateVpcLinkRequest mocks base method
func (m *MockApiGatewayV2API) CreateVpcLinkRequest(arg0 *apigatewayv2.CreateVpcLinkInput) (*request.Request, *apigatewayv2.CreateVpcLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVpcLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.CreateVpcLinkOutput)
	return ret0, ret1
}

// CreateVpcLinkRequest indicates an expected call of CreateVpcLinkRequest
func (mr *MockApiGatewayV2APIMockRecorder) CreateVpcLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcLinkRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateVpcLinkRequest), arg0)
}

// CreateVpcLinkWithContext mocks base method
func (m *MockApiGatewayV2API) CreateVpcLinkWithContext(arg0 context.Context, arg1 *apigatewayv2.CreateVpcLinkInput, arg2 ...request.Option) (*apigatewayv2.CreateVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVpcLinkWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.CreateVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVpcLinkWithContext indicates an expected call of CreateVpcLinkWithContext
func (mr *MockApiGatewayV2APIMockRecorder) CreateVpcLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVpcLinkWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).CreateVpcLinkWithContext), varargs...)
}

// DeleteAccessLogSettings mocks base method
func (m *MockApiGatewayV2API) DeleteAccessLogSettings(arg0 *apigatewayv2.DeleteAccessLogSettingsInput) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogSettings", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteAccessLogSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessLogSettings indicates an expected call of DeleteAccessLogSettings
func (mr *MockApiGatewayV2APIMockRecorder) DeleteAccessLogSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSettings", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteAccessLogSettings), arg0)
}

// DeleteAccessLogSettingsRequest mocks base method
func (m *MockApiGatewayV2API) DeleteAccessLogSettingsRequest(arg0 *apigatewayv2.DeleteAccessLogSettingsInput) (*request.Request, *apigatewayv2.DeleteAccessLogSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessLogSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteAccessLogSettingsOutput)
	return ret0, ret1
}

// DeleteAccessLogSettingsRequest indicates an expected call of DeleteAccessLogSettingsRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteAccessLogSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSettingsRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteAccessLogSettingsRequest), arg0)
}

// DeleteAccessLogSettingsWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteAccessLogSettingsWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteAccessLogSettingsInput, arg2 ...request.Option) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccessLogSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteAccessLogSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccessLogSettingsWithContext indicates an expected call of DeleteAccessLogSettingsWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteAccessLogSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessLogSettingsWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteAccessLogSettingsWithContext), varargs...)
}

// DeleteApi mocks base method
func (m *MockApiGatewayV2API) DeleteApi(arg0 *apigatewayv2.DeleteApiInput) (*apigatewayv2.DeleteApiOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApi", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApi indicates an expected call of DeleteApi
func (mr *MockApiGatewayV2APIMockRecorder) DeleteApi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApi", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteApi), arg0)
}

// DeleteApiMapping mocks base method
func (m *MockApiGatewayV2API) DeleteApiMapping(arg0 *apigatewayv2.DeleteApiMappingInput) (*apigatewayv2.DeleteApiMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiMapping", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiMapping indicates an expected call of DeleteApiMapping
func (mr *MockApiGatewayV2APIMockRecorder) DeleteApiMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiMapping", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteApiMapping), arg0)
}

// DeleteApiMappingRequest mocks base method
func (m *MockApiGatewayV2API) DeleteApiMappingRequest(arg0 *apigatewayv2.DeleteApiMappingInput) (*request.Request, *apigatewayv2.DeleteApiMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteApiMappingOutput)
	return ret0, ret1
}

// DeleteApiMappingRequest indicates an expected call of DeleteApiMappingRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteApiMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiMappingRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteApiMappingRequest), arg0)
}

// DeleteApiMappingWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteApiMappingWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteApiMappingInput, arg2 ...request.Option) (*apigatewayv2.DeleteApiMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApiMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiMappingWithContext indicates an expected call of DeleteApiMappingWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteApiMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiMappingWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteApiMappingWithContext), varargs...)
}

// DeleteApiRequest mocks base method
func (m *MockApiGatewayV2API) DeleteApiRequest(arg0 *apigatewayv2.DeleteApiInput) (*request.Request, *apigatewayv2.DeleteApiOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteApiOutput)
	return ret0, ret1
}

// DeleteApiRequest indicates an expected call of DeleteApiRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteApiRequest), arg0)
}

// DeleteApiWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteApiWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteApiInput, arg2 ...request.Option) (*apigatewayv2.DeleteApiOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiWithContext indicates an expected call of DeleteApiWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteApiWithContext), varargs...)
}

// DeleteAuthorizer mocks base method
func (m *MockApiGatewayV2API) DeleteAuthorizer(arg0 *apigatewayv2.DeleteAuthorizerInput) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizer", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizer indicates an expected call of DeleteAuthorizer
func (mr *MockApiGatewayV2APIMockRecorder) DeleteAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizer", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteAuthorizer), arg0)
}

// DeleteAuthorizerRequest mocks base method
func (m *MockApiGatewayV2API) DeleteAuthorizerRequest(arg0 *apigatewayv2.DeleteAuthorizerInput) (*request.Request, *apigatewayv2.DeleteAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteAuthorizerOutput)
	return ret0, ret1
}

// DeleteAuthorizerRequest indicates an expected call of DeleteAuthorizerRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizerRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteAuthorizerRequest), arg0)
}

// DeleteAuthorizerWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteAuthorizerWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteAuthorizerInput, arg2 ...request.Option) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizerWithContext indicates an expected call of DeleteAuthorizerWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizerWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteAuthorizerWithContext), varargs...)
}

// DeleteCorsConfiguration mocks base method
func (m *MockApiGatewayV2API) DeleteCorsConfiguration(arg0 *apigatewayv2.DeleteCorsConfigurationInput) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCorsConfiguration", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteCorsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCorsConfiguration indicates an expected call of DeleteCorsConfiguration
func (mr *MockApiGatewayV2APIMockRecorder) DeleteCorsConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCorsConfiguration", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteCorsConfiguration), arg0)
}

// DeleteCorsConfigurationRequest mocks base method
func (m *MockApiGatewayV2API) DeleteCorsConfigurationRequest(arg0 *apigatewayv2.DeleteCorsConfigurationInput) (*request.Request, *apigatewayv2.DeleteCorsConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCorsConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteCorsConfigurationOutput)
	return ret0, ret1
}

// DeleteCorsConfigurationRequest indicates an expected call of DeleteCorsConfigurationRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteCorsConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCorsConfigurationRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteCorsConfigurationRequest), arg0)
}

// DeleteCorsConfigurationWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteCorsConfigurationWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteCorsConfigurationInput, arg2 ...request.Option) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCorsConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteCorsConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCorsConfigurationWithContext indicates an expected call of DeleteCorsConfigurationWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteCorsConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCorsConfigurationWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteCorsConfigurationWithContext), varargs...)
}

// DeleteDeployment mocks base method
func (m *MockApiGatewayV2API) DeleteDeployment(arg0 *apigatewayv2.DeleteDeploymentInput) (*apigatewayv2.DeleteDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockApiGatewayV2APIMockRecorder) DeleteDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteDeployment), arg0)
}

// DeleteDeploymentRequest mocks base method
func (m *MockApiGatewayV2API) DeleteDeploymentRequest(arg0 *apigatewayv2.DeleteDeploymentInput) (*request.Request, *apigatewayv2.DeleteDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteDeploymentOutput)
	return ret0, ret1
}

// DeleteDeploymentRequest indicates an expected call of DeleteDeploymentRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteDeploymentRequest), arg0)
}

// DeleteDeploymentWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteDeploymentWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteDeploymentInput, arg2 ...request.Option) (*apigatewayv2.DeleteDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentWithContext indicates an expected call of DeleteDeploymentWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteDeploymentWithContext), varargs...)
}

// DeleteDomainName mocks base method
func (m *MockApiGatewayV2API) DeleteDomainName(arg0 *apigatewayv2.DeleteDomainNameInput) (*apigatewayv2.DeleteDomainNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainName", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainName indicates an expected call of DeleteDomainName
func (mr *MockApiGatewayV2APIMockRecorder) DeleteDomainName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainName", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteDomainName), arg0)
}

// DeleteDomainNameRequest mocks base method
func (m *MockApiGatewayV2API) DeleteDomainNameRequest(arg0 *apigatewayv2.DeleteDomainNameInput) (*request.Request, *apigatewayv2.DeleteDomainNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteDomainNameOutput)
	return ret0, ret1
}

// DeleteDomainNameRequest indicates an expected call of DeleteDomainNameRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteDomainNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainNameRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteDomainNameRequest), arg0)
}

// DeleteDomainNameWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteDomainNameWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteDomainNameInput, arg2 ...request.Option) (*apigatewayv2.DeleteDomainNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainNameWithContext indicates an expected call of DeleteDomainNameWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainNameWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteDomainNameWithContext), varargs...)
}

// DeleteIntegration mocks base method
func (m *MockApiGatewayV2API) DeleteIntegration(arg0 *apigatewayv2.DeleteIntegrationInput) (*apigatewayv2.DeleteIntegrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegration", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegration indicates an expected call of DeleteIntegration
func (mr *MockApiGatewayV2APIMockRecorder) DeleteIntegration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegration", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteIntegration), arg0)
}

// DeleteIntegrationRequest mocks base method
func (m *MockApiGatewayV2API) DeleteIntegrationRequest(arg0 *apigatewayv2.DeleteIntegrationInput) (*request.Request, *apigatewayv2.DeleteIntegrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteIntegrationOutput)
	return ret0, ret1
}

// DeleteIntegrationRequest indicates an expected call of DeleteIntegrationRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteIntegrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteIntegrationRequest), arg0)
}

// DeleteIntegrationResponse mocks base method
func (m *MockApiGatewayV2API) DeleteIntegrationResponse(arg0 *apigatewayv2.DeleteIntegrationResponseInput) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationResponse indicates an expected call of DeleteIntegrationResponse
func (mr *MockApiGatewayV2APIMockRecorder) DeleteIntegrationResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteIntegrationResponse), arg0)
}

// DeleteIntegrationResponseRequest mocks base method
func (m *MockApiGatewayV2API) DeleteIntegrationResponseRequest(arg0 *apigatewayv2.DeleteIntegrationResponseInput) (*request.Request, *apigatewayv2.DeleteIntegrationResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteIntegrationResponseOutput)
	return ret0, ret1
}

// DeleteIntegrationResponseRequest indicates an expected call of DeleteIntegrationResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteIntegrationResponseRequest), arg0)
}

// DeleteIntegrationResponseWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteIntegrationResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteIntegrationResponseInput, arg2 ...request.Option) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationResponseWithContext indicates an expected call of DeleteIntegrationResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteIntegrationResponseWithContext), varargs...)
}

// DeleteIntegrationWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteIntegrationWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteIntegrationInput, arg2 ...request.Option) (*apigatewayv2.DeleteIntegrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationWithContext indicates an expected call of DeleteIntegrationWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteIntegrationWithContext), varargs...)
}

// DeleteModel mocks base method
func (m *MockApiGatewayV2API) DeleteModel(arg0 *apigatewayv2.DeleteModelInput) (*apigatewayv2.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel
func (mr *MockApiGatewayV2APIMockRecorder) DeleteModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteModel), arg0)
}

// DeleteModelRequest mocks base method
func (m *MockApiGatewayV2API) DeleteModelRequest(arg0 *apigatewayv2.DeleteModelInput) (*request.Request, *apigatewayv2.DeleteModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteModelOutput)
	return ret0, ret1
}

// DeleteModelRequest indicates an expected call of DeleteModelRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteModelRequest), arg0)
}

// DeleteModelWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteModelWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteModelInput, arg2 ...request.Option) (*apigatewayv2.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelWithContext indicates an expected call of DeleteModelWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteModelWithContext), varargs...)
}

// DeleteRoute mocks base method
func (m *MockApiGatewayV2API) DeleteRoute(arg0 *apigatewayv2.DeleteRouteInput) (*apigatewayv2.DeleteRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoute indicates an expected call of DeleteRoute
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRoute), arg0)
}

// DeleteRouteRequest mocks base method
func (m *MockApiGatewayV2API) DeleteRouteRequest(arg0 *apigatewayv2.DeleteRouteInput) (*request.Request, *apigatewayv2.DeleteRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteRouteOutput)
	return ret0, ret1
}

// DeleteRouteRequest indicates an expected call of DeleteRouteRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteRequest), arg0)
}

// DeleteRouteRequestParameter mocks base method
func (m *MockApiGatewayV2API) DeleteRouteRequestParameter(arg0 *apigatewayv2.DeleteRouteRequestParameterInput) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteRequestParameter", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteRequestParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteRequestParameter indicates an expected call of DeleteRouteRequestParameter
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteRequestParameter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteRequestParameter", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteRequestParameter), arg0)
}

// DeleteRouteRequestParameterRequest mocks base method
func (m *MockApiGatewayV2API) DeleteRouteRequestParameterRequest(arg0 *apigatewayv2.DeleteRouteRequestParameterInput) (*request.Request, *apigatewayv2.DeleteRouteRequestParameterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteRequestParameterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteRouteRequestParameterOutput)
	return ret0, ret1
}

// DeleteRouteRequestParameterRequest indicates an expected call of DeleteRouteRequestParameterRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteRequestParameterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteRequestParameterRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteRequestParameterRequest), arg0)
}

// DeleteRouteRequestParameterWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteRouteRequestParameterWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteRouteRequestParameterInput, arg2 ...request.Option) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteRequestParameterWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteRequestParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteRequestParameterWithContext indicates an expected call of DeleteRouteRequestParameterWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteRequestParameterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteRequestParameterWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteRequestParameterWithContext), varargs...)
}

// DeleteRouteResponse mocks base method
func (m *MockApiGatewayV2API) DeleteRouteResponse(arg0 *apigatewayv2.DeleteRouteResponseInput) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteResponse indicates an expected call of DeleteRouteResponse
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteResponse), arg0)
}

// DeleteRouteResponseRequest mocks base method
func (m *MockApiGatewayV2API) DeleteRouteResponseRequest(arg0 *apigatewayv2.DeleteRouteResponseInput) (*request.Request, *apigatewayv2.DeleteRouteResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteRouteResponseOutput)
	return ret0, ret1
}

// DeleteRouteResponseRequest indicates an expected call of DeleteRouteResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteResponseRequest), arg0)
}

// DeleteRouteResponseWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteRouteResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteRouteResponseInput, arg2 ...request.Option) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteResponseWithContext indicates an expected call of DeleteRouteResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteResponseWithContext), varargs...)
}

// DeleteRouteSettings mocks base method
func (m *MockApiGatewayV2API) DeleteRouteSettings(arg0 *apigatewayv2.DeleteRouteSettingsInput) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteSettings", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteSettings indicates an expected call of DeleteRouteSettings
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteSettings", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteSettings), arg0)
}

// DeleteRouteSettingsRequest mocks base method
func (m *MockApiGatewayV2API) DeleteRouteSettingsRequest(arg0 *apigatewayv2.DeleteRouteSettingsInput) (*request.Request, *apigatewayv2.DeleteRouteSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouteSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteRouteSettingsOutput)
	return ret0, ret1
}

// DeleteRouteSettingsRequest indicates an expected call of DeleteRouteSettingsRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteSettingsRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteSettingsRequest), arg0)
}

// DeleteRouteSettingsWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteRouteSettingsWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteRouteSettingsInput, arg2 ...request.Option) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteSettingsWithContext indicates an expected call of DeleteRouteSettingsWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteSettingsWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteSettingsWithContext), varargs...)
}

// DeleteRouteWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteRouteWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteRouteInput, arg2 ...request.Option) (*apigatewayv2.DeleteRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRouteWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRouteWithContext indicates an expected call of DeleteRouteWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouteWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteRouteWithContext), varargs...)
}

// DeleteStage mocks base method
func (m *MockApiGatewayV2API) DeleteStage(arg0 *apigatewayv2.DeleteStageInput) (*apigatewayv2.DeleteStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStage", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStage indicates an expected call of DeleteStage
func (mr *MockApiGatewayV2APIMockRecorder) DeleteStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStage", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteStage), arg0)
}

// DeleteStageRequest mocks base method
func (m *MockApiGatewayV2API) DeleteStageRequest(arg0 *apigatewayv2.DeleteStageInput) (*request.Request, *apigatewayv2.DeleteStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteStageOutput)
	return ret0, ret1
}

// DeleteStageRequest indicates an expected call of DeleteStageRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteStageRequest), arg0)
}

// DeleteStageWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteStageWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteStageInput, arg2 ...request.Option) (*apigatewayv2.DeleteStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStageWithContext indicates an expected call of DeleteStageWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteStageWithContext), varargs...)
}

// DeleteVpcLink mocks base method
func (m *MockApiGatewayV2API) DeleteVpcLink(arg0 *apigatewayv2.DeleteVpcLinkInput) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpcLink", arg0)
	ret0, _ := ret[0].(*apigatewayv2.DeleteVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpcLink indicates an expected call of DeleteVpcLink
func (mr *MockApiGatewayV2APIMockRecorder) DeleteVpcLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcLink", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteVpcLink), arg0)
}

// DeleteVpcLinkRequest mocks base method
func (m *MockApiGatewayV2API) DeleteVpcLinkRequest(arg0 *apigatewayv2.DeleteVpcLinkInput) (*request.Request, *apigatewayv2.DeleteVpcLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVpcLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.DeleteVpcLinkOutput)
	return ret0, ret1
}

// DeleteVpcLinkRequest indicates an expected call of DeleteVpcLinkRequest
func (mr *MockApiGatewayV2APIMockRecorder) DeleteVpcLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcLinkRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteVpcLinkRequest), arg0)
}

// DeleteVpcLinkWithContext mocks base method
func (m *MockApiGatewayV2API) DeleteVpcLinkWithContext(arg0 context.Context, arg1 *apigatewayv2.DeleteVpcLinkInput, arg2 ...request.Option) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVpcLinkWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.DeleteVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVpcLinkWithContext indicates an expected call of DeleteVpcLinkWithContext
func (mr *MockApiGatewayV2APIMockRecorder) DeleteVpcLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVpcLinkWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).DeleteVpcLinkWithContext), varargs...)
}

// ExportApi mocks base method
func (m *MockApiGatewayV2API) ExportApi(arg0 *apigatewayv2.ExportApiInput) (*apigatewayv2.ExportApiOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportApi", arg0)
	ret0, _ := ret[0].(*apigatewayv2.ExportApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportApi indicates an expected call of ExportApi
func (mr *MockApiGatewayV2APIMockRecorder) ExportApi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportApi", reflect.TypeOf((*MockApiGatewayV2API)(nil).ExportApi), arg0)
}

// ExportApiRequest mocks base method
func (m *MockApiGatewayV2API) ExportApiRequest(arg0 *apigatewayv2.ExportApiInput) (*request.Request, *apigatewayv2.ExportApiOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.ExportApiOutput)
	return ret0, ret1
}

// ExportApiRequest indicates an expected call of ExportApiRequest
func (mr *MockApiGatewayV2APIMockRecorder) ExportApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportApiRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).ExportApiRequest), arg0)
}

// ExportApiWithContext mocks base method
func (m *MockApiGatewayV2API) ExportApiWithContext(arg0 context.Context, arg1 *apigatewayv2.ExportApiInput, arg2 ...request.Option) (*apigatewayv2.ExportApiOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.ExportApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportApiWithContext indicates an expected call of ExportApiWithContext
func (mr *MockApiGatewayV2APIMockRecorder) ExportApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportApiWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).ExportApiWithContext), varargs...)
}

// GetApi mocks base method
func (m *MockApiGatewayV2API) GetApi(arg0 *apigatewayv2.GetApiInput) (*apigatewayv2.GetApiOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApi", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApi indicates an expected call of GetApi
func (mr *MockApiGatewayV2APIMockRecorder) GetApi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApi", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApi), arg0)
}

// GetApiMapping mocks base method
func (m *MockApiGatewayV2API) GetApiMapping(arg0 *apigatewayv2.GetApiMappingInput) (*apigatewayv2.GetApiMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiMapping", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiMapping indicates an expected call of GetApiMapping
func (mr *MockApiGatewayV2APIMockRecorder) GetApiMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMapping", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiMapping), arg0)
}

// GetApiMappingRequest mocks base method
func (m *MockApiGatewayV2API) GetApiMappingRequest(arg0 *apigatewayv2.GetApiMappingInput) (*request.Request, *apigatewayv2.GetApiMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetApiMappingOutput)
	return ret0, ret1
}

// GetApiMappingRequest indicates an expected call of GetApiMappingRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetApiMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMappingRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiMappingRequest), arg0)
}

// GetApiMappingWithContext mocks base method
func (m *MockApiGatewayV2API) GetApiMappingWithContext(arg0 context.Context, arg1 *apigatewayv2.GetApiMappingInput, arg2 ...request.Option) (*apigatewayv2.GetApiMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiMappingWithContext indicates an expected call of GetApiMappingWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetApiMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMappingWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiMappingWithContext), varargs...)
}

// GetApiMappings mocks base method
func (m *MockApiGatewayV2API) GetApiMappings(arg0 *apigatewayv2.GetApiMappingsInput) (*apigatewayv2.GetApiMappingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiMappings", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetApiMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiMappings indicates an expected call of GetApiMappings
func (mr *MockApiGatewayV2APIMockRecorder) GetApiMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMappings", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiMappings), arg0)
}

// GetApiMappingsRequest mocks base method
func (m *MockApiGatewayV2API) GetApiMappingsRequest(arg0 *apigatewayv2.GetApiMappingsInput) (*request.Request, *apigatewayv2.GetApiMappingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetApiMappingsOutput)
	return ret0, ret1
}

// GetApiMappingsRequest indicates an expected call of GetApiMappingsRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetApiMappingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMappingsRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiMappingsRequest), arg0)
}

// GetApiMappingsWithContext mocks base method
func (m *MockApiGatewayV2API) GetApiMappingsWithContext(arg0 context.Context, arg1 *apigatewayv2.GetApiMappingsInput, arg2 ...request.Option) (*apigatewayv2.GetApiMappingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApiMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiMappingsWithContext indicates an expected call of GetApiMappingsWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetApiMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiMappingsWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiMappingsWithContext), varargs...)
}

// GetApiRequest mocks base method
func (m *MockApiGatewayV2API) GetApiRequest(arg0 *apigatewayv2.GetApiInput) (*request.Request, *apigatewayv2.GetApiOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetApiOutput)
	return ret0, ret1
}

// GetApiRequest indicates an expected call of GetApiRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiRequest), arg0)
}

// GetApiWithContext mocks base method
func (m *MockApiGatewayV2API) GetApiWithContext(arg0 context.Context, arg1 *apigatewayv2.GetApiInput, arg2 ...request.Option) (*apigatewayv2.GetApiOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiWithContext indicates an expected call of GetApiWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApiWithContext), varargs...)
}

// GetApis mocks base method
func (m *MockApiGatewayV2API) GetApis(arg0 *apigatewayv2.GetApisInput) (*apigatewayv2.GetApisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApis", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetApisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApis indicates an expected call of GetApis
func (mr *MockApiGatewayV2APIMockRecorder) GetApis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApis", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApis), arg0)
}

// GetApisRequest mocks base method
func (m *MockApiGatewayV2API) GetApisRequest(arg0 *apigatewayv2.GetApisInput) (*request.Request, *apigatewayv2.GetApisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetApisOutput)
	return ret0, ret1
}

// GetApisRequest indicates an expected call of GetApisRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetApisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApisRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApisRequest), arg0)
}

// GetApisWithContext mocks base method
func (m *MockApiGatewayV2API) GetApisWithContext(arg0 context.Context, arg1 *apigatewayv2.GetApisInput, arg2 ...request.Option) (*apigatewayv2.GetApisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApisWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetApisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApisWithContext indicates an expected call of GetApisWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetApisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApisWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetApisWithContext), varargs...)
}

// GetAuthorizer mocks base method
func (m *MockApiGatewayV2API) GetAuthorizer(arg0 *apigatewayv2.GetAuthorizerInput) (*apigatewayv2.GetAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizer", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizer indicates an expected call of GetAuthorizer
func (mr *MockApiGatewayV2APIMockRecorder) GetAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizer", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetAuthorizer), arg0)
}

// GetAuthorizerRequest mocks base method
func (m *MockApiGatewayV2API) GetAuthorizerRequest(arg0 *apigatewayv2.GetAuthorizerInput) (*request.Request, *apigatewayv2.GetAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetAuthorizerOutput)
	return ret0, ret1
}

// GetAuthorizerRequest indicates an expected call of GetAuthorizerRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizerRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetAuthorizerRequest), arg0)
}

// GetAuthorizerWithContext mocks base method
func (m *MockApiGatewayV2API) GetAuthorizerWithContext(arg0 context.Context, arg1 *apigatewayv2.GetAuthorizerInput, arg2 ...request.Option) (*apigatewayv2.GetAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizerWithContext indicates an expected call of GetAuthorizerWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizerWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetAuthorizerWithContext), varargs...)
}

// GetAuthorizers mocks base method
func (m *MockApiGatewayV2API) GetAuthorizers(arg0 *apigatewayv2.GetAuthorizersInput) (*apigatewayv2.GetAuthorizersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizers", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizers indicates an expected call of GetAuthorizers
func (mr *MockApiGatewayV2APIMockRecorder) GetAuthorizers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizers", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetAuthorizers), arg0)
}

// GetAuthorizersRequest mocks base method
func (m *MockApiGatewayV2API) GetAuthorizersRequest(arg0 *apigatewayv2.GetAuthorizersInput) (*request.Request, *apigatewayv2.GetAuthorizersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetAuthorizersOutput)
	return ret0, ret1
}

// GetAuthorizersRequest indicates an expected call of GetAuthorizersRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetAuthorizersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizersRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetAuthorizersRequest), arg0)
}

// GetAuthorizersWithContext mocks base method
func (m *MockApiGatewayV2API) GetAuthorizersWithContext(arg0 context.Context, arg1 *apigatewayv2.GetAuthorizersInput, arg2 ...request.Option) (*apigatewayv2.GetAuthorizersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizersWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizersWithContext indicates an expected call of GetAuthorizersWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetAuthorizersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizersWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetAuthorizersWithContext), varargs...)
}

// GetDeployment mocks base method
func (m *MockApiGatewayV2API) GetDeployment(arg0 *apigatewayv2.GetDeploymentInput) (*apigatewayv2.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockApiGatewayV2APIMockRecorder) GetDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDeployment), arg0)
}

// GetDeploymentRequest mocks base method
func (m *MockApiGatewayV2API) GetDeploymentRequest(arg0 *apigatewayv2.GetDeploymentInput) (*request.Request, *apigatewayv2.GetDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetDeploymentOutput)
	return ret0, ret1
}

// GetDeploymentRequest indicates an expected call of GetDeploymentRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDeploymentRequest), arg0)
}

// GetDeploymentWithContext mocks base method
func (m *MockApiGatewayV2API) GetDeploymentWithContext(arg0 context.Context, arg1 *apigatewayv2.GetDeploymentInput, arg2 ...request.Option) (*apigatewayv2.GetDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentWithContext indicates an expected call of GetDeploymentWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDeploymentWithContext), varargs...)
}

// GetDeployments mocks base method
func (m *MockApiGatewayV2API) GetDeployments(arg0 *apigatewayv2.GetDeploymentsInput) (*apigatewayv2.GetDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployments", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployments indicates an expected call of GetDeployments
func (mr *MockApiGatewayV2APIMockRecorder) GetDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDeployments), arg0)
}

// GetDeploymentsRequest mocks base method
func (m *MockApiGatewayV2API) GetDeploymentsRequest(arg0 *apigatewayv2.GetDeploymentsInput) (*request.Request, *apigatewayv2.GetDeploymentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetDeploymentsOutput)
	return ret0, ret1
}

// GetDeploymentsRequest indicates an expected call of GetDeploymentsRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetDeploymentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDeploymentsRequest), arg0)
}

// GetDeploymentsWithContext mocks base method
func (m *MockApiGatewayV2API) GetDeploymentsWithContext(arg0 context.Context, arg1 *apigatewayv2.GetDeploymentsInput, arg2 ...request.Option) (*apigatewayv2.GetDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentsWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsWithContext indicates an expected call of GetDeploymentsWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetDeploymentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDeploymentsWithContext), varargs...)
}

// GetDomainName mocks base method
func (m *MockApiGatewayV2API) GetDomainName(arg0 *apigatewayv2.GetDomainNameInput) (*apigatewayv2.GetDomainNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainName", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainName indicates an expected call of GetDomainName
func (mr *MockApiGatewayV2APIMockRecorder) GetDomainName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainName", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDomainName), arg0)
}

// GetDomainNameRequest mocks base method
func (m *MockApiGatewayV2API) GetDomainNameRequest(arg0 *apigatewayv2.GetDomainNameInput) (*request.Request, *apigatewayv2.GetDomainNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetDomainNameOutput)
	return ret0, ret1
}

// GetDomainNameRequest indicates an expected call of GetDomainNameRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetDomainNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNameRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDomainNameRequest), arg0)
}

// GetDomainNameWithContext mocks base method
func (m *MockApiGatewayV2API) GetDomainNameWithContext(arg0 context.Context, arg1 *apigatewayv2.GetDomainNameInput, arg2 ...request.Option) (*apigatewayv2.GetDomainNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNameWithContext indicates an expected call of GetDomainNameWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNameWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDomainNameWithContext), varargs...)
}

// GetDomainNames mocks base method
func (m *MockApiGatewayV2API) GetDomainNames(arg0 *apigatewayv2.GetDomainNamesInput) (*apigatewayv2.GetDomainNamesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainNames", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNames indicates an expected call of GetDomainNames
func (mr *MockApiGatewayV2APIMockRecorder) GetDomainNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNames", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDomainNames), arg0)
}

// GetDomainNamesRequest mocks base method
func (m *MockApiGatewayV2API) GetDomainNamesRequest(arg0 *apigatewayv2.GetDomainNamesInput) (*request.Request, *apigatewayv2.GetDomainNamesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainNamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetDomainNamesOutput)
	return ret0, ret1
}

// GetDomainNamesRequest indicates an expected call of GetDomainNamesRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetDomainNamesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNamesRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDomainNamesRequest), arg0)
}

// GetDomainNamesWithContext mocks base method
func (m *MockApiGatewayV2API) GetDomainNamesWithContext(arg0 context.Context, arg1 *apigatewayv2.GetDomainNamesInput, arg2 ...request.Option) (*apigatewayv2.GetDomainNamesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainNamesWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNamesWithContext indicates an expected call of GetDomainNamesWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetDomainNamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNamesWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetDomainNamesWithContext), varargs...)
}

// GetIntegration mocks base method
func (m *MockApiGatewayV2API) GetIntegration(arg0 *apigatewayv2.GetIntegrationInput) (*apigatewayv2.GetIntegrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegration", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegration indicates an expected call of GetIntegration
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegration", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegration), arg0)
}

// GetIntegrationRequest mocks base method
func (m *MockApiGatewayV2API) GetIntegrationRequest(arg0 *apigatewayv2.GetIntegrationInput) (*request.Request, *apigatewayv2.GetIntegrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetIntegrationOutput)
	return ret0, ret1
}

// GetIntegrationRequest indicates an expected call of GetIntegrationRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationRequest), arg0)
}

// GetIntegrationResponse mocks base method
func (m *MockApiGatewayV2API) GetIntegrationResponse(arg0 *apigatewayv2.GetIntegrationResponseInput) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponse indicates an expected call of GetIntegrationResponse
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationResponse), arg0)
}

// GetIntegrationResponseRequest mocks base method
func (m *MockApiGatewayV2API) GetIntegrationResponseRequest(arg0 *apigatewayv2.GetIntegrationResponseInput) (*request.Request, *apigatewayv2.GetIntegrationResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetIntegrationResponseOutput)
	return ret0, ret1
}

// GetIntegrationResponseRequest indicates an expected call of GetIntegrationResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationResponseRequest), arg0)
}

// GetIntegrationResponseWithContext mocks base method
func (m *MockApiGatewayV2API) GetIntegrationResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationResponseInput, arg2 ...request.Option) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponseWithContext indicates an expected call of GetIntegrationResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationResponseWithContext), varargs...)
}

// GetIntegrationResponses mocks base method
func (m *MockApiGatewayV2API) GetIntegrationResponses(arg0 *apigatewayv2.GetIntegrationResponsesInput) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationResponses", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponses indicates an expected call of GetIntegrationResponses
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationResponses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponses", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationResponses), arg0)
}

// GetIntegrationResponsesRequest mocks base method
func (m *MockApiGatewayV2API) GetIntegrationResponsesRequest(arg0 *apigatewayv2.GetIntegrationResponsesInput) (*request.Request, *apigatewayv2.GetIntegrationResponsesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationResponsesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetIntegrationResponsesOutput)
	return ret0, ret1
}

// GetIntegrationResponsesRequest indicates an expected call of GetIntegrationResponsesRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationResponsesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponsesRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationResponsesRequest), arg0)
}

// GetIntegrationResponsesWithContext mocks base method
func (m *MockApiGatewayV2API) GetIntegrationResponsesWithContext(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationResponsesInput, arg2 ...request.Option) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationResponsesWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponsesWithContext indicates an expected call of GetIntegrationResponsesWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationResponsesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponsesWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationResponsesWithContext), varargs...)
}

// GetIntegrationWithContext mocks base method
func (m *MockApiGatewayV2API) GetIntegrationWithContext(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationInput, arg2 ...request.Option) (*apigatewayv2.GetIntegrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationWithContext indicates an expected call of GetIntegrationWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationWithContext), varargs...)
}

// GetIntegrations mocks base method
func (m *MockApiGatewayV2API) GetIntegrations(arg0 *apigatewayv2.GetIntegrationsInput) (*apigatewayv2.GetIntegrationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrations", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrations indicates an expected call of GetIntegrations
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrations", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrations), arg0)
}

// GetIntegrationsRequest mocks base method
func (m *MockApiGatewayV2API) GetIntegrationsRequest(arg0 *apigatewayv2.GetIntegrationsInput) (*request.Request, *apigatewayv2.GetIntegrationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetIntegrationsOutput)
	return ret0, ret1
}

// GetIntegrationsRequest indicates an expected call of GetIntegrationsRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationsRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationsRequest), arg0)
}

// GetIntegrationsWithContext mocks base method
func (m *MockApiGatewayV2API) GetIntegrationsWithContext(arg0 context.Context, arg1 *apigatewayv2.GetIntegrationsInput, arg2 ...request.Option) (*apigatewayv2.GetIntegrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationsWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetIntegrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationsWithContext indicates an expected call of GetIntegrationsWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetIntegrationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationsWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetIntegrationsWithContext), varargs...)
}

// GetModel mocks base method
func (m *MockApiGatewayV2API) GetModel(arg0 *apigatewayv2.GetModelInput) (*apigatewayv2.GetModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel
func (mr *MockApiGatewayV2APIMockRecorder) GetModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModel), arg0)
}

// GetModelRequest mocks base method
func (m *MockApiGatewayV2API) GetModelRequest(arg0 *apigatewayv2.GetModelInput) (*request.Request, *apigatewayv2.GetModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetModelOutput)
	return ret0, ret1
}

// GetModelRequest indicates an expected call of GetModelRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModelRequest), arg0)
}

// GetModelTemplate mocks base method
func (m *MockApiGatewayV2API) GetModelTemplate(arg0 *apigatewayv2.GetModelTemplateInput) (*apigatewayv2.GetModelTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTemplate", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetModelTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTemplate indicates an expected call of GetModelTemplate
func (mr *MockApiGatewayV2APIMockRecorder) GetModelTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplate", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModelTemplate), arg0)
}

// GetModelTemplateRequest mocks base method
func (m *MockApiGatewayV2API) GetModelTemplateRequest(arg0 *apigatewayv2.GetModelTemplateInput) (*request.Request, *apigatewayv2.GetModelTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetModelTemplateOutput)
	return ret0, ret1
}

// GetModelTemplateRequest indicates an expected call of GetModelTemplateRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetModelTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplateRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModelTemplateRequest), arg0)
}

// GetModelTemplateWithContext mocks base method
func (m *MockApiGatewayV2API) GetModelTemplateWithContext(arg0 context.Context, arg1 *apigatewayv2.GetModelTemplateInput, arg2 ...request.Option) (*apigatewayv2.GetModelTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetModelTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTemplateWithContext indicates an expected call of GetModelTemplateWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetModelTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplateWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModelTemplateWithContext), varargs...)
}

// GetModelWithContext mocks base method
func (m *MockApiGatewayV2API) GetModelWithContext(arg0 context.Context, arg1 *apigatewayv2.GetModelInput, arg2 ...request.Option) (*apigatewayv2.GetModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelWithContext indicates an expected call of GetModelWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModelWithContext), varargs...)
}

// GetModels mocks base method
func (m *MockApiGatewayV2API) GetModels(arg0 *apigatewayv2.GetModelsInput) (*apigatewayv2.GetModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModels", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels
func (mr *MockApiGatewayV2APIMockRecorder) GetModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModels), arg0)
}

// GetModelsRequest mocks base method
func (m *MockApiGatewayV2API) GetModelsRequest(arg0 *apigatewayv2.GetModelsInput) (*request.Request, *apigatewayv2.GetModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetModelsOutput)
	return ret0, ret1
}

// GetModelsRequest indicates an expected call of GetModelsRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModelsRequest), arg0)
}

// GetModelsWithContext mocks base method
func (m *MockApiGatewayV2API) GetModelsWithContext(arg0 context.Context, arg1 *apigatewayv2.GetModelsInput, arg2 ...request.Option) (*apigatewayv2.GetModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelsWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelsWithContext indicates an expected call of GetModelsWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetModelsWithContext), varargs...)
}

// GetRoute mocks base method
func (m *MockApiGatewayV2API) GetRoute(arg0 *apigatewayv2.GetRouteInput) (*apigatewayv2.GetRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute
func (mr *MockApiGatewayV2APIMockRecorder) GetRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRoute), arg0)
}

// GetRouteRequest mocks base method
func (m *MockApiGatewayV2API) GetRouteRequest(arg0 *apigatewayv2.GetRouteInput) (*request.Request, *apigatewayv2.GetRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetRouteOutput)
	return ret0, ret1
}

// GetRouteRequest indicates an expected call of GetRouteRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteRequest), arg0)
}

// GetRouteResponse mocks base method
func (m *MockApiGatewayV2API) GetRouteResponse(arg0 *apigatewayv2.GetRouteResponseInput) (*apigatewayv2.GetRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteResponse indicates an expected call of GetRouteResponse
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteResponse), arg0)
}

// GetRouteResponseRequest mocks base method
func (m *MockApiGatewayV2API) GetRouteResponseRequest(arg0 *apigatewayv2.GetRouteResponseInput) (*request.Request, *apigatewayv2.GetRouteResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetRouteResponseOutput)
	return ret0, ret1
}

// GetRouteResponseRequest indicates an expected call of GetRouteResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteResponseRequest), arg0)
}

// GetRouteResponseWithContext mocks base method
func (m *MockApiGatewayV2API) GetRouteResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.GetRouteResponseInput, arg2 ...request.Option) (*apigatewayv2.GetRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteResponseWithContext indicates an expected call of GetRouteResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteResponseWithContext), varargs...)
}

// GetRouteResponses mocks base method
func (m *MockApiGatewayV2API) GetRouteResponses(arg0 *apigatewayv2.GetRouteResponsesInput) (*apigatewayv2.GetRouteResponsesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteResponses", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteResponses indicates an expected call of GetRouteResponses
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteResponses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponses", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteResponses), arg0)
}

// GetRouteResponsesRequest mocks base method
func (m *MockApiGatewayV2API) GetRouteResponsesRequest(arg0 *apigatewayv2.GetRouteResponsesInput) (*request.Request, *apigatewayv2.GetRouteResponsesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteResponsesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetRouteResponsesOutput)
	return ret0, ret1
}

// GetRouteResponsesRequest indicates an expected call of GetRouteResponsesRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteResponsesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponsesRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteResponsesRequest), arg0)
}

// GetRouteResponsesWithContext mocks base method
func (m *MockApiGatewayV2API) GetRouteResponsesWithContext(arg0 context.Context, arg1 *apigatewayv2.GetRouteResponsesInput, arg2 ...request.Option) (*apigatewayv2.GetRouteResponsesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteResponsesWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteResponsesWithContext indicates an expected call of GetRouteResponsesWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteResponsesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteResponsesWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteResponsesWithContext), varargs...)
}

// GetRouteWithContext mocks base method
func (m *MockApiGatewayV2API) GetRouteWithContext(arg0 context.Context, arg1 *apigatewayv2.GetRouteInput, arg2 ...request.Option) (*apigatewayv2.GetRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRouteWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteWithContext indicates an expected call of GetRouteWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRouteWithContext), varargs...)
}

// GetRoutes mocks base method
func (m *MockApiGatewayV2API) GetRoutes(arg0 *apigatewayv2.GetRoutesInput) (*apigatewayv2.GetRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutes", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutes indicates an expected call of GetRoutes
func (mr *MockApiGatewayV2APIMockRecorder) GetRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutes", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRoutes), arg0)
}

// GetRoutesRequest mocks base method
func (m *MockApiGatewayV2API) GetRoutesRequest(arg0 *apigatewayv2.GetRoutesInput) (*request.Request, *apigatewayv2.GetRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetRoutesOutput)
	return ret0, ret1
}

// GetRoutesRequest indicates an expected call of GetRoutesRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRoutesRequest), arg0)
}

// GetRoutesWithContext mocks base method
func (m *MockApiGatewayV2API) GetRoutesWithContext(arg0 context.Context, arg1 *apigatewayv2.GetRoutesInput, arg2 ...request.Option) (*apigatewayv2.GetRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutesWithContext indicates an expected call of GetRoutesWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutesWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetRoutesWithContext), varargs...)
}

// GetStage mocks base method
func (m *MockApiGatewayV2API) GetStage(arg0 *apigatewayv2.GetStageInput) (*apigatewayv2.GetStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStage", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStage indicates an expected call of GetStage
func (mr *MockApiGatewayV2APIMockRecorder) GetStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStage", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetStage), arg0)
}

// GetStageRequest mocks base method
func (m *MockApiGatewayV2API) GetStageRequest(arg0 *apigatewayv2.GetStageInput) (*request.Request, *apigatewayv2.GetStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetStageOutput)
	return ret0, ret1
}

// GetStageRequest indicates an expected call of GetStageRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetStageRequest), arg0)
}

// GetStageWithContext mocks base method
func (m *MockApiGatewayV2API) GetStageWithContext(arg0 context.Context, arg1 *apigatewayv2.GetStageInput, arg2 ...request.Option) (*apigatewayv2.GetStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageWithContext indicates an expected call of GetStageWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetStageWithContext), varargs...)
}

// GetStages mocks base method
func (m *MockApiGatewayV2API) GetStages(arg0 *apigatewayv2.GetStagesInput) (*apigatewayv2.GetStagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStages", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStages indicates an expected call of GetStages
func (mr *MockApiGatewayV2APIMockRecorder) GetStages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStages", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetStages), arg0)
}

// GetStagesRequest mocks base method
func (m *MockApiGatewayV2API) GetStagesRequest(arg0 *apigatewayv2.GetStagesInput) (*request.Request, *apigatewayv2.GetStagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetStagesOutput)
	return ret0, ret1
}

// GetStagesRequest indicates an expected call of GetStagesRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetStagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetStagesRequest), arg0)
}

// GetStagesWithContext mocks base method
func (m *MockApiGatewayV2API) GetStagesWithContext(arg0 context.Context, arg1 *apigatewayv2.GetStagesInput, arg2 ...request.Option) (*apigatewayv2.GetStagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStagesWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagesWithContext indicates an expected call of GetStagesWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetStagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetStagesWithContext), varargs...)
}

// GetTags mocks base method
func (m *MockApiGatewayV2API) GetTags(arg0 *apigatewayv2.GetTagsInput) (*apigatewayv2.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags
func (mr *MockApiGatewayV2APIMockRecorder) GetTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetTags), arg0)
}

// GetTagsRequest mocks base method
func (m *MockApiGatewayV2API) GetTagsRequest(arg0 *apigatewayv2.GetTagsInput) (*request.Request, *apigatewayv2.GetTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetTagsOutput)
	return ret0, ret1
}

// GetTagsRequest indicates an expected call of GetTagsRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetTagsRequest), arg0)
}

// GetTagsWithContext mocks base method
func (m *MockApiGatewayV2API) GetTagsWithContext(arg0 context.Context, arg1 *apigatewayv2.GetTagsInput, arg2 ...request.Option) (*apigatewayv2.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagsWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsWithContext indicates an expected call of GetTagsWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetTagsWithContext), varargs...)
}

// GetVpcLink mocks base method
func (m *MockApiGatewayV2API) GetVpcLink(arg0 *apigatewayv2.GetVpcLinkInput) (*apigatewayv2.GetVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcLink", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLink indicates an expected call of GetVpcLink
func (mr *MockApiGatewayV2APIMockRecorder) GetVpcLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLink", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetVpcLink), arg0)
}

// GetVpcLinkRequest mocks base method
func (m *MockApiGatewayV2API) GetVpcLinkRequest(arg0 *apigatewayv2.GetVpcLinkInput) (*request.Request, *apigatewayv2.GetVpcLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetVpcLinkOutput)
	return ret0, ret1
}

// GetVpcLinkRequest indicates an expected call of GetVpcLinkRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetVpcLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLinkRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetVpcLinkRequest), arg0)
}

// GetVpcLinkWithContext mocks base method
func (m *MockApiGatewayV2API) GetVpcLinkWithContext(arg0 context.Context, arg1 *apigatewayv2.GetVpcLinkInput, arg2 ...request.Option) (*apigatewayv2.GetVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcLinkWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLinkWithContext indicates an expected call of GetVpcLinkWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetVpcLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLinkWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetVpcLinkWithContext), varargs...)
}

// GetVpcLinks mocks base method
func (m *MockApiGatewayV2API) GetVpcLinks(arg0 *apigatewayv2.GetVpcLinksInput) (*apigatewayv2.GetVpcLinksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcLinks", arg0)
	ret0, _ := ret[0].(*apigatewayv2.GetVpcLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLinks indicates an expected call of GetVpcLinks
func (mr *MockApiGatewayV2APIMockRecorder) GetVpcLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLinks", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetVpcLinks), arg0)
}

// GetVpcLinksRequest mocks base method
func (m *MockApiGatewayV2API) GetVpcLinksRequest(arg0 *apigatewayv2.GetVpcLinksInput) (*request.Request, *apigatewayv2.GetVpcLinksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcLinksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.GetVpcLinksOutput)
	return ret0, ret1
}

// GetVpcLinksRequest indicates an expected call of GetVpcLinksRequest
func (mr *MockApiGatewayV2APIMockRecorder) GetVpcLinksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLinksRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetVpcLinksRequest), arg0)
}

// GetVpcLinksWithContext mocks base method
func (m *MockApiGatewayV2API) GetVpcLinksWithContext(arg0 context.Context, arg1 *apigatewayv2.GetVpcLinksInput, arg2 ...request.Option) (*apigatewayv2.GetVpcLinksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVpcLinksWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.GetVpcLinksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVpcLinksWithContext indicates an expected call of GetVpcLinksWithContext
func (mr *MockApiGatewayV2APIMockRecorder) GetVpcLinksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcLinksWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).GetVpcLinksWithContext), varargs...)
}

// ImportApi mocks base method
func (m *MockApiGatewayV2API) ImportApi(arg0 *apigatewayv2.ImportApiInput) (*apigatewayv2.ImportApiOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportApi", arg0)
	ret0, _ := ret[0].(*apigatewayv2.ImportApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportApi indicates an expected call of ImportApi
func (mr *MockApiGatewayV2APIMockRecorder) ImportApi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportApi", reflect.TypeOf((*MockApiGatewayV2API)(nil).ImportApi), arg0)
}

// ImportApiRequest mocks base method
func (m *MockApiGatewayV2API) ImportApiRequest(arg0 *apigatewayv2.ImportApiInput) (*request.Request, *apigatewayv2.ImportApiOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.ImportApiOutput)
	return ret0, ret1
}

// ImportApiRequest indicates an expected call of ImportApiRequest
func (mr *MockApiGatewayV2APIMockRecorder) ImportApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportApiRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).ImportApiRequest), arg0)
}

// ImportApiWithContext mocks base method
func (m *MockApiGatewayV2API) ImportApiWithContext(arg0 context.Context, arg1 *apigatewayv2.ImportApiInput, arg2 ...request.Option) (*apigatewayv2.ImportApiOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.ImportApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportApiWithContext indicates an expected call of ImportApiWithContext
func (mr *MockApiGatewayV2APIMockRecorder) ImportApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportApiWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).ImportApiWithContext), varargs...)
}

// ReimportApi mocks base method
func (m *MockApiGatewayV2API) ReimportApi(arg0 *apigatewayv2.ReimportApiInput) (*apigatewayv2.ReimportApiOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReimportApi", arg0)
	ret0, _ := ret[0].(*apigatewayv2.ReimportApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReimportApi indicates an expected call of ReimportApi
func (mr *MockApiGatewayV2APIMockRecorder) ReimportApi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReimportApi", reflect.TypeOf((*MockApiGatewayV2API)(nil).ReimportApi), arg0)
}

// ReimportApiRequest mocks base method
func (m *MockApiGatewayV2API) ReimportApiRequest(arg0 *apigatewayv2.ReimportApiInput) (*request.Request, *apigatewayv2.ReimportApiOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReimportApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.ReimportApiOutput)
	return ret0, ret1
}

// ReimportApiRequest indicates an expected call of ReimportApiRequest
func (mr *MockApiGatewayV2APIMockRecorder) ReimportApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReimportApiRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).ReimportApiRequest), arg0)
}

// ReimportApiWithContext mocks base method
func (m *MockApiGatewayV2API) ReimportApiWithContext(arg0 context.Context, arg1 *apigatewayv2.ReimportApiInput, arg2 ...request.Option) (*apigatewayv2.ReimportApiOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReimportApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.ReimportApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReimportApiWithContext indicates an expected call of ReimportApiWithContext
func (mr *MockApiGatewayV2APIMockRecorder) ReimportApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReimportApiWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).ReimportApiWithContext), varargs...)
}

// ResetAuthorizersCache mocks base method
func (m *MockApiGatewayV2API) ResetAuthorizersCache(arg0 *apigatewayv2.ResetAuthorizersCacheInput) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAuthorizersCache", arg0)
	ret0, _ := ret[0].(*apigatewayv2.ResetAuthorizersCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetAuthorizersCache indicates an expected call of ResetAuthorizersCache
func (mr *MockApiGatewayV2APIMockRecorder) ResetAuthorizersCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAuthorizersCache", reflect.TypeOf((*MockApiGatewayV2API)(nil).ResetAuthorizersCache), arg0)
}

// ResetAuthorizersCacheRequest mocks base method
func (m *MockApiGatewayV2API) ResetAuthorizersCacheRequest(arg0 *apigatewayv2.ResetAuthorizersCacheInput) (*request.Request, *apigatewayv2.ResetAuthorizersCacheOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetAuthorizersCacheRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.ResetAuthorizersCacheOutput)
	return ret0, ret1
}

// ResetAuthorizersCacheRequest indicates an expected call of ResetAuthorizersCacheRequest
func (mr *MockApiGatewayV2APIMockRecorder) ResetAuthorizersCacheRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAuthorizersCacheRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).ResetAuthorizersCacheRequest), arg0)
}

// ResetAuthorizersCacheWithContext mocks base method
func (m *MockApiGatewayV2API) ResetAuthorizersCacheWithContext(arg0 context.Context, arg1 *apigatewayv2.ResetAuthorizersCacheInput, arg2 ...request.Option) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetAuthorizersCacheWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.ResetAuthorizersCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetAuthorizersCacheWithContext indicates an expected call of ResetAuthorizersCacheWithContext
func (mr *MockApiGatewayV2APIMockRecorder) ResetAuthorizersCacheWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAuthorizersCacheWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).ResetAuthorizersCacheWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockApiGatewayV2API) TagResource(arg0 *apigatewayv2.TagResourceInput) (*apigatewayv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*apigatewayv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockApiGatewayV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockApiGatewayV2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockApiGatewayV2API) TagResourceRequest(arg0 *apigatewayv2.TagResourceInput) (*request.Request, *apigatewayv2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockApiGatewayV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockApiGatewayV2API) TagResourceWithContext(arg0 context.Context, arg1 *apigatewayv2.TagResourceInput, arg2 ...request.Option) (*apigatewayv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockApiGatewayV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockApiGatewayV2API) UntagResource(arg0 *apigatewayv2.UntagResourceInput) (*apigatewayv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockApiGatewayV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockApiGatewayV2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockApiGatewayV2API) UntagResourceRequest(arg0 *apigatewayv2.UntagResourceInput) (*request.Request, *apigatewayv2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockApiGatewayV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockApiGatewayV2API) UntagResourceWithContext(arg0 context.Context, arg1 *apigatewayv2.UntagResourceInput, arg2 ...request.Option) (*apigatewayv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApi mocks base method
func (m *MockApiGatewayV2API) UpdateApi(arg0 *apigatewayv2.UpdateApiInput) (*apigatewayv2.UpdateApiOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApi", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApi indicates an expected call of UpdateApi
func (mr *MockApiGatewayV2APIMockRecorder) UpdateApi(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApi", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateApi), arg0)
}

// UpdateApiMapping mocks base method
func (m *MockApiGatewayV2API) UpdateApiMapping(arg0 *apigatewayv2.UpdateApiMappingInput) (*apigatewayv2.UpdateApiMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiMapping", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApiMapping indicates an expected call of UpdateApiMapping
func (mr *MockApiGatewayV2APIMockRecorder) UpdateApiMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiMapping", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateApiMapping), arg0)
}

// UpdateApiMappingRequest mocks base method
func (m *MockApiGatewayV2API) UpdateApiMappingRequest(arg0 *apigatewayv2.UpdateApiMappingInput) (*request.Request, *apigatewayv2.UpdateApiMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateApiMappingOutput)
	return ret0, ret1
}

// UpdateApiMappingRequest indicates an expected call of UpdateApiMappingRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateApiMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiMappingRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateApiMappingRequest), arg0)
}

// UpdateApiMappingWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateApiMappingWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateApiMappingInput, arg2 ...request.Option) (*apigatewayv2.UpdateApiMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateApiMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApiMappingWithContext indicates an expected call of UpdateApiMappingWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateApiMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiMappingWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateApiMappingWithContext), varargs...)
}

// UpdateApiRequest mocks base method
func (m *MockApiGatewayV2API) UpdateApiRequest(arg0 *apigatewayv2.UpdateApiInput) (*request.Request, *apigatewayv2.UpdateApiOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateApiOutput)
	return ret0, ret1
}

// UpdateApiRequest indicates an expected call of UpdateApiRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateApiRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateApiRequest), arg0)
}

// UpdateApiWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateApiWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateApiInput, arg2 ...request.Option) (*apigatewayv2.UpdateApiOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApiWithContext indicates an expected call of UpdateApiWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateApiWithContext), varargs...)
}

// UpdateAuthorizer mocks base method
func (m *MockApiGatewayV2API) UpdateAuthorizer(arg0 *apigatewayv2.UpdateAuthorizerInput) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorizer", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizer indicates an expected call of UpdateAuthorizer
func (mr *MockApiGatewayV2APIMockRecorder) UpdateAuthorizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizer", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateAuthorizer), arg0)
}

// UpdateAuthorizerRequest mocks base method
func (m *MockApiGatewayV2API) UpdateAuthorizerRequest(arg0 *apigatewayv2.UpdateAuthorizerInput) (*request.Request, *apigatewayv2.UpdateAuthorizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateAuthorizerOutput)
	return ret0, ret1
}

// UpdateAuthorizerRequest indicates an expected call of UpdateAuthorizerRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateAuthorizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizerRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateAuthorizerRequest), arg0)
}

// UpdateAuthorizerWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateAuthorizerWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateAuthorizerInput, arg2 ...request.Option) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizerWithContext indicates an expected call of UpdateAuthorizerWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizerWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateAuthorizerWithContext), varargs...)
}

// UpdateDeployment mocks base method
func (m *MockApiGatewayV2API) UpdateDeployment(arg0 *apigatewayv2.UpdateDeploymentInput) (*apigatewayv2.UpdateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployment", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment
func (mr *MockApiGatewayV2APIMockRecorder) UpdateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateDeployment), arg0)
}

// UpdateDeploymentRequest mocks base method
func (m *MockApiGatewayV2API) UpdateDeploymentRequest(arg0 *apigatewayv2.UpdateDeploymentInput) (*request.Request, *apigatewayv2.UpdateDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateDeploymentOutput)
	return ret0, ret1
}

// UpdateDeploymentRequest indicates an expected call of UpdateDeploymentRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateDeploymentRequest), arg0)
}

// UpdateDeploymentWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateDeploymentWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateDeploymentInput, arg2 ...request.Option) (*apigatewayv2.UpdateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentWithContext indicates an expected call of UpdateDeploymentWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateDeploymentWithContext), varargs...)
}

// UpdateDomainName mocks base method
func (m *MockApiGatewayV2API) UpdateDomainName(arg0 *apigatewayv2.UpdateDomainNameInput) (*apigatewayv2.UpdateDomainNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainName", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainName indicates an expected call of UpdateDomainName
func (mr *MockApiGatewayV2APIMockRecorder) UpdateDomainName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainName", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateDomainName), arg0)
}

// UpdateDomainNameRequest mocks base method
func (m *MockApiGatewayV2API) UpdateDomainNameRequest(arg0 *apigatewayv2.UpdateDomainNameInput) (*request.Request, *apigatewayv2.UpdateDomainNameOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateDomainNameOutput)
	return ret0, ret1
}

// UpdateDomainNameRequest indicates an expected call of UpdateDomainNameRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateDomainNameRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainNameRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateDomainNameRequest), arg0)
}

// UpdateDomainNameWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateDomainNameWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateDomainNameInput, arg2 ...request.Option) (*apigatewayv2.UpdateDomainNameOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainNameWithContext indicates an expected call of UpdateDomainNameWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainNameWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateDomainNameWithContext), varargs...)
}

// UpdateIntegration mocks base method
func (m *MockApiGatewayV2API) UpdateIntegration(arg0 *apigatewayv2.UpdateIntegrationInput) (*apigatewayv2.UpdateIntegrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIntegration", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegration indicates an expected call of UpdateIntegration
func (mr *MockApiGatewayV2APIMockRecorder) UpdateIntegration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegration", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateIntegration), arg0)
}

// UpdateIntegrationRequest mocks base method
func (m *MockApiGatewayV2API) UpdateIntegrationRequest(arg0 *apigatewayv2.UpdateIntegrationInput) (*request.Request, *apigatewayv2.UpdateIntegrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateIntegrationOutput)
	return ret0, ret1
}

// UpdateIntegrationRequest indicates an expected call of UpdateIntegrationRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateIntegrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateIntegrationRequest), arg0)
}

// UpdateIntegrationResponse mocks base method
func (m *MockApiGatewayV2API) UpdateIntegrationResponse(arg0 *apigatewayv2.UpdateIntegrationResponseInput) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegrationResponse indicates an expected call of UpdateIntegrationResponse
func (mr *MockApiGatewayV2APIMockRecorder) UpdateIntegrationResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateIntegrationResponse), arg0)
}

// UpdateIntegrationResponseRequest mocks base method
func (m *MockApiGatewayV2API) UpdateIntegrationResponseRequest(arg0 *apigatewayv2.UpdateIntegrationResponseInput) (*request.Request, *apigatewayv2.UpdateIntegrationResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateIntegrationResponseOutput)
	return ret0, ret1
}

// UpdateIntegrationResponseRequest indicates an expected call of UpdateIntegrationResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateIntegrationResponseRequest), arg0)
}

// UpdateIntegrationResponseWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateIntegrationResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateIntegrationResponseInput, arg2 ...request.Option) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegrationResponseWithContext indicates an expected call of UpdateIntegrationResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateIntegrationResponseWithContext), varargs...)
}

// UpdateIntegrationWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateIntegrationWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateIntegrationInput, arg2 ...request.Option) (*apigatewayv2.UpdateIntegrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegrationWithContext indicates an expected call of UpdateIntegrationWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateIntegrationWithContext), varargs...)
}

// UpdateModel mocks base method
func (m *MockApiGatewayV2API) UpdateModel(arg0 *apigatewayv2.UpdateModelInput) (*apigatewayv2.UpdateModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModel", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModel indicates an expected call of UpdateModel
func (mr *MockApiGatewayV2APIMockRecorder) UpdateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateModel), arg0)
}

// UpdateModelRequest mocks base method
func (m *MockApiGatewayV2API) UpdateModelRequest(arg0 *apigatewayv2.UpdateModelInput) (*request.Request, *apigatewayv2.UpdateModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateModelOutput)
	return ret0, ret1
}

// UpdateModelRequest indicates an expected call of UpdateModelRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateModelRequest), arg0)
}

// UpdateModelWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateModelWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateModelInput, arg2 ...request.Option) (*apigatewayv2.UpdateModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelWithContext indicates an expected call of UpdateModelWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateModelWithContext), varargs...)
}

// UpdateRoute mocks base method
func (m *MockApiGatewayV2API) UpdateRoute(arg0 *apigatewayv2.UpdateRouteInput) (*apigatewayv2.UpdateRouteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute
func (mr *MockApiGatewayV2APIMockRecorder) UpdateRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateRoute), arg0)
}

// UpdateRouteRequest mocks base method
func (m *MockApiGatewayV2API) UpdateRouteRequest(arg0 *apigatewayv2.UpdateRouteInput) (*request.Request, *apigatewayv2.UpdateRouteOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateRouteOutput)
	return ret0, ret1
}

// UpdateRouteRequest indicates an expected call of UpdateRouteRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateRouteRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateRouteRequest), arg0)
}

// UpdateRouteResponse mocks base method
func (m *MockApiGatewayV2API) UpdateRouteResponse(arg0 *apigatewayv2.UpdateRouteResponseInput) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteResponse", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteResponse indicates an expected call of UpdateRouteResponse
func (mr *MockApiGatewayV2APIMockRecorder) UpdateRouteResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteResponse", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateRouteResponse), arg0)
}

// UpdateRouteResponseRequest mocks base method
func (m *MockApiGatewayV2API) UpdateRouteResponseRequest(arg0 *apigatewayv2.UpdateRouteResponseInput) (*request.Request, *apigatewayv2.UpdateRouteResponseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouteResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateRouteResponseOutput)
	return ret0, ret1
}

// UpdateRouteResponseRequest indicates an expected call of UpdateRouteResponseRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateRouteResponseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteResponseRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateRouteResponseRequest), arg0)
}

// UpdateRouteResponseWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateRouteResponseWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateRouteResponseInput, arg2 ...request.Option) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateRouteResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteResponseWithContext indicates an expected call of UpdateRouteResponseWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateRouteResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteResponseWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateRouteResponseWithContext), varargs...)
}

// UpdateRouteWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateRouteWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateRouteInput, arg2 ...request.Option) (*apigatewayv2.UpdateRouteOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRouteWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateRouteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouteWithContext indicates an expected call of UpdateRouteWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateRouteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouteWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateRouteWithContext), varargs...)
}

// UpdateStage mocks base method
func (m *MockApiGatewayV2API) UpdateStage(arg0 *apigatewayv2.UpdateStageInput) (*apigatewayv2.UpdateStageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStage", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStage indicates an expected call of UpdateStage
func (mr *MockApiGatewayV2APIMockRecorder) UpdateStage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStage", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateStage), arg0)
}

// UpdateStageRequest mocks base method
func (m *MockApiGatewayV2API) UpdateStageRequest(arg0 *apigatewayv2.UpdateStageInput) (*request.Request, *apigatewayv2.UpdateStageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateStageOutput)
	return ret0, ret1
}

// UpdateStageRequest indicates an expected call of UpdateStageRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateStageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateStageRequest), arg0)
}

// UpdateStageWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateStageWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateStageInput, arg2 ...request.Option) (*apigatewayv2.UpdateStageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStageWithContext indicates an expected call of UpdateStageWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateStageWithContext), varargs...)
}

// UpdateVpcLink mocks base method
func (m *MockApiGatewayV2API) UpdateVpcLink(arg0 *apigatewayv2.UpdateVpcLinkInput) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpcLink", arg0)
	ret0, _ := ret[0].(*apigatewayv2.UpdateVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpcLink indicates an expected call of UpdateVpcLink
func (mr *MockApiGatewayV2APIMockRecorder) UpdateVpcLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcLink", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateVpcLink), arg0)
}

// UpdateVpcLinkRequest mocks base method
func (m *MockApiGatewayV2API) UpdateVpcLinkRequest(arg0 *apigatewayv2.UpdateVpcLinkInput) (*request.Request, *apigatewayv2.UpdateVpcLinkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVpcLinkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigatewayv2.UpdateVpcLinkOutput)
	return ret0, ret1
}

// UpdateVpcLinkRequest indicates an expected call of UpdateVpcLinkRequest
func (mr *MockApiGatewayV2APIMockRecorder) UpdateVpcLinkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcLinkRequest", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateVpcLinkRequest), arg0)
}

// UpdateVpcLinkWithContext mocks base method
func (m *MockApiGatewayV2API) UpdateVpcLinkWithContext(arg0 context.Context, arg1 *apigatewayv2.UpdateVpcLinkInput, arg2 ...request.Option) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVpcLinkWithContext", varargs...)
	ret0, _ := ret[0].(*apigatewayv2.UpdateVpcLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVpcLinkWithContext indicates an expected call of UpdateVpcLinkWithContext
func (mr *MockApiGatewayV2APIMockRecorder) UpdateVpcLinkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVpcLinkWithContext", reflect.TypeOf((*MockApiGatewayV2API)(nil).UpdateVpcLinkWithContext), varargs...)
}

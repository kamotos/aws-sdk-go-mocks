// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/directoryservice/directoryserviceiface (interfaces: DirectoryServiceAPI)

// Package directoryservicemock is a generated GoMock package.
package directoryservicemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	directoryservice "github.com/aws/aws-sdk-go/service/directoryservice"
	gomock "github.com/golang/mock/gomock"
)

// MockDirectoryServiceAPI is a mock of DirectoryServiceAPI interface.
type MockDirectoryServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryServiceAPIMockRecorder
}

// MockDirectoryServiceAPIMockRecorder is the mock recorder for MockDirectoryServiceAPI.
type MockDirectoryServiceAPIMockRecorder struct {
	mock *MockDirectoryServiceAPI
}

// NewMockDirectoryServiceAPI creates a new mock instance.
func NewMockDirectoryServiceAPI(ctrl *gomock.Controller) *MockDirectoryServiceAPI {
	mock := &MockDirectoryServiceAPI{ctrl: ctrl}
	mock.recorder = &MockDirectoryServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryServiceAPI) EXPECT() *MockDirectoryServiceAPIMockRecorder {
	return m.recorder
}

// AcceptSharedDirectory mocks base method.
func (m *MockDirectoryServiceAPI) AcceptSharedDirectory(arg0 *directoryservice.AcceptSharedDirectoryInput) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptSharedDirectory", arg0)
	ret0, _ := ret[0].(*directoryservice.AcceptSharedDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptSharedDirectory indicates an expected call of AcceptSharedDirectory.
func (mr *MockDirectoryServiceAPIMockRecorder) AcceptSharedDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSharedDirectory", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AcceptSharedDirectory), arg0)
}

// AcceptSharedDirectoryRequest mocks base method.
func (m *MockDirectoryServiceAPI) AcceptSharedDirectoryRequest(arg0 *directoryservice.AcceptSharedDirectoryInput) (*request.Request, *directoryservice.AcceptSharedDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptSharedDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.AcceptSharedDirectoryOutput)
	return ret0, ret1
}

// AcceptSharedDirectoryRequest indicates an expected call of AcceptSharedDirectoryRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) AcceptSharedDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSharedDirectoryRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AcceptSharedDirectoryRequest), arg0)
}

// AcceptSharedDirectoryWithContext mocks base method.
func (m *MockDirectoryServiceAPI) AcceptSharedDirectoryWithContext(arg0 context.Context, arg1 *directoryservice.AcceptSharedDirectoryInput, arg2 ...request.Option) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptSharedDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.AcceptSharedDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptSharedDirectoryWithContext indicates an expected call of AcceptSharedDirectoryWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) AcceptSharedDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSharedDirectoryWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AcceptSharedDirectoryWithContext), varargs...)
}

// AddIpRoutes mocks base method.
func (m *MockDirectoryServiceAPI) AddIpRoutes(arg0 *directoryservice.AddIpRoutesInput) (*directoryservice.AddIpRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIpRoutes", arg0)
	ret0, _ := ret[0].(*directoryservice.AddIpRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddIpRoutes indicates an expected call of AddIpRoutes.
func (mr *MockDirectoryServiceAPIMockRecorder) AddIpRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIpRoutes", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddIpRoutes), arg0)
}

// AddIpRoutesRequest mocks base method.
func (m *MockDirectoryServiceAPI) AddIpRoutesRequest(arg0 *directoryservice.AddIpRoutesInput) (*request.Request, *directoryservice.AddIpRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIpRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.AddIpRoutesOutput)
	return ret0, ret1
}

// AddIpRoutesRequest indicates an expected call of AddIpRoutesRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) AddIpRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIpRoutesRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddIpRoutesRequest), arg0)
}

// AddIpRoutesWithContext mocks base method.
func (m *MockDirectoryServiceAPI) AddIpRoutesWithContext(arg0 context.Context, arg1 *directoryservice.AddIpRoutesInput, arg2 ...request.Option) (*directoryservice.AddIpRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddIpRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.AddIpRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddIpRoutesWithContext indicates an expected call of AddIpRoutesWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) AddIpRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIpRoutesWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddIpRoutesWithContext), varargs...)
}

// AddRegion mocks base method.
func (m *MockDirectoryServiceAPI) AddRegion(arg0 *directoryservice.AddRegionInput) (*directoryservice.AddRegionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRegion", arg0)
	ret0, _ := ret[0].(*directoryservice.AddRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRegion indicates an expected call of AddRegion.
func (mr *MockDirectoryServiceAPIMockRecorder) AddRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRegion", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddRegion), arg0)
}

// AddRegionRequest mocks base method.
func (m *MockDirectoryServiceAPI) AddRegionRequest(arg0 *directoryservice.AddRegionInput) (*request.Request, *directoryservice.AddRegionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRegionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.AddRegionOutput)
	return ret0, ret1
}

// AddRegionRequest indicates an expected call of AddRegionRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) AddRegionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRegionRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddRegionRequest), arg0)
}

// AddRegionWithContext mocks base method.
func (m *MockDirectoryServiceAPI) AddRegionWithContext(arg0 context.Context, arg1 *directoryservice.AddRegionInput, arg2 ...request.Option) (*directoryservice.AddRegionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRegionWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.AddRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRegionWithContext indicates an expected call of AddRegionWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) AddRegionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRegionWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddRegionWithContext), varargs...)
}

// AddTagsToResource mocks base method.
func (m *MockDirectoryServiceAPI) AddTagsToResource(arg0 *directoryservice.AddTagsToResourceInput) (*directoryservice.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResource", arg0)
	ret0, _ := ret[0].(*directoryservice.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResource indicates an expected call of AddTagsToResource.
func (mr *MockDirectoryServiceAPIMockRecorder) AddTagsToResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResource", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddTagsToResource), arg0)
}

// AddTagsToResourceRequest mocks base method.
func (m *MockDirectoryServiceAPI) AddTagsToResourceRequest(arg0 *directoryservice.AddTagsToResourceInput) (*request.Request, *directoryservice.AddTagsToResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.AddTagsToResourceOutput)
	return ret0, ret1
}

// AddTagsToResourceRequest indicates an expected call of AddTagsToResourceRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) AddTagsToResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddTagsToResourceRequest), arg0)
}

// AddTagsToResourceWithContext mocks base method.
func (m *MockDirectoryServiceAPI) AddTagsToResourceWithContext(arg0 context.Context, arg1 *directoryservice.AddTagsToResourceInput, arg2 ...request.Option) (*directoryservice.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsToResourceWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResourceWithContext indicates an expected call of AddTagsToResourceWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) AddTagsToResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).AddTagsToResourceWithContext), varargs...)
}

// CancelSchemaExtension mocks base method.
func (m *MockDirectoryServiceAPI) CancelSchemaExtension(arg0 *directoryservice.CancelSchemaExtensionInput) (*directoryservice.CancelSchemaExtensionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSchemaExtension", arg0)
	ret0, _ := ret[0].(*directoryservice.CancelSchemaExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSchemaExtension indicates an expected call of CancelSchemaExtension.
func (mr *MockDirectoryServiceAPIMockRecorder) CancelSchemaExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSchemaExtension", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CancelSchemaExtension), arg0)
}

// CancelSchemaExtensionRequest mocks base method.
func (m *MockDirectoryServiceAPI) CancelSchemaExtensionRequest(arg0 *directoryservice.CancelSchemaExtensionInput) (*request.Request, *directoryservice.CancelSchemaExtensionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSchemaExtensionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CancelSchemaExtensionOutput)
	return ret0, ret1
}

// CancelSchemaExtensionRequest indicates an expected call of CancelSchemaExtensionRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CancelSchemaExtensionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSchemaExtensionRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CancelSchemaExtensionRequest), arg0)
}

// CancelSchemaExtensionWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CancelSchemaExtensionWithContext(arg0 context.Context, arg1 *directoryservice.CancelSchemaExtensionInput, arg2 ...request.Option) (*directoryservice.CancelSchemaExtensionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelSchemaExtensionWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CancelSchemaExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSchemaExtensionWithContext indicates an expected call of CancelSchemaExtensionWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CancelSchemaExtensionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSchemaExtensionWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CancelSchemaExtensionWithContext), varargs...)
}

// ConnectDirectory mocks base method.
func (m *MockDirectoryServiceAPI) ConnectDirectory(arg0 *directoryservice.ConnectDirectoryInput) (*directoryservice.ConnectDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDirectory", arg0)
	ret0, _ := ret[0].(*directoryservice.ConnectDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDirectory indicates an expected call of ConnectDirectory.
func (mr *MockDirectoryServiceAPIMockRecorder) ConnectDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDirectory", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ConnectDirectory), arg0)
}

// ConnectDirectoryRequest mocks base method.
func (m *MockDirectoryServiceAPI) ConnectDirectoryRequest(arg0 *directoryservice.ConnectDirectoryInput) (*request.Request, *directoryservice.ConnectDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ConnectDirectoryOutput)
	return ret0, ret1
}

// ConnectDirectoryRequest indicates an expected call of ConnectDirectoryRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ConnectDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDirectoryRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ConnectDirectoryRequest), arg0)
}

// ConnectDirectoryWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ConnectDirectoryWithContext(arg0 context.Context, arg1 *directoryservice.ConnectDirectoryInput, arg2 ...request.Option) (*directoryservice.ConnectDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ConnectDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDirectoryWithContext indicates an expected call of ConnectDirectoryWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ConnectDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDirectoryWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ConnectDirectoryWithContext), varargs...)
}

// CreateAlias mocks base method.
func (m *MockDirectoryServiceAPI) CreateAlias(arg0 *directoryservice.CreateAliasInput) (*directoryservice.CreateAliasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlias", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlias indicates an expected call of CreateAlias.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlias", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateAlias), arg0)
}

// CreateAliasRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateAliasRequest(arg0 *directoryservice.CreateAliasInput) (*request.Request, *directoryservice.CreateAliasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAliasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateAliasOutput)
	return ret0, ret1
}

// CreateAliasRequest indicates an expected call of CreateAliasRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateAliasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateAliasRequest), arg0)
}

// CreateAliasWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateAliasWithContext(arg0 context.Context, arg1 *directoryservice.CreateAliasInput, arg2 ...request.Option) (*directoryservice.CreateAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAliasWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAliasWithContext indicates an expected call of CreateAliasWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateAliasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAliasWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateAliasWithContext), varargs...)
}

// CreateComputer mocks base method.
func (m *MockDirectoryServiceAPI) CreateComputer(arg0 *directoryservice.CreateComputerInput) (*directoryservice.CreateComputerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComputer", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateComputerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComputer indicates an expected call of CreateComputer.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateComputer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputer", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateComputer), arg0)
}

// CreateComputerRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateComputerRequest(arg0 *directoryservice.CreateComputerInput) (*request.Request, *directoryservice.CreateComputerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComputerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateComputerOutput)
	return ret0, ret1
}

// CreateComputerRequest indicates an expected call of CreateComputerRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateComputerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputerRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateComputerRequest), arg0)
}

// CreateComputerWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateComputerWithContext(arg0 context.Context, arg1 *directoryservice.CreateComputerInput, arg2 ...request.Option) (*directoryservice.CreateComputerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComputerWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateComputerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComputerWithContext indicates an expected call of CreateComputerWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateComputerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputerWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateComputerWithContext), varargs...)
}

// CreateConditionalForwarder mocks base method.
func (m *MockDirectoryServiceAPI) CreateConditionalForwarder(arg0 *directoryservice.CreateConditionalForwarderInput) (*directoryservice.CreateConditionalForwarderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConditionalForwarder", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateConditionalForwarderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConditionalForwarder indicates an expected call of CreateConditionalForwarder.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateConditionalForwarder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConditionalForwarder", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateConditionalForwarder), arg0)
}

// CreateConditionalForwarderRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateConditionalForwarderRequest(arg0 *directoryservice.CreateConditionalForwarderInput) (*request.Request, *directoryservice.CreateConditionalForwarderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConditionalForwarderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateConditionalForwarderOutput)
	return ret0, ret1
}

// CreateConditionalForwarderRequest indicates an expected call of CreateConditionalForwarderRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateConditionalForwarderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConditionalForwarderRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateConditionalForwarderRequest), arg0)
}

// CreateConditionalForwarderWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateConditionalForwarderWithContext(arg0 context.Context, arg1 *directoryservice.CreateConditionalForwarderInput, arg2 ...request.Option) (*directoryservice.CreateConditionalForwarderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConditionalForwarderWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateConditionalForwarderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConditionalForwarderWithContext indicates an expected call of CreateConditionalForwarderWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateConditionalForwarderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConditionalForwarderWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateConditionalForwarderWithContext), varargs...)
}

// CreateDirectory mocks base method.
func (m *MockDirectoryServiceAPI) CreateDirectory(arg0 *directoryservice.CreateDirectoryInput) (*directoryservice.CreateDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateDirectory), arg0)
}

// CreateDirectoryRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateDirectoryRequest(arg0 *directoryservice.CreateDirectoryInput) (*request.Request, *directoryservice.CreateDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateDirectoryOutput)
	return ret0, ret1
}

// CreateDirectoryRequest indicates an expected call of CreateDirectoryRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateDirectoryRequest), arg0)
}

// CreateDirectoryWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateDirectoryWithContext(arg0 context.Context, arg1 *directoryservice.CreateDirectoryInput, arg2 ...request.Option) (*directoryservice.CreateDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectoryWithContext indicates an expected call of CreateDirectoryWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateDirectoryWithContext), varargs...)
}

// CreateLogSubscription mocks base method.
func (m *MockDirectoryServiceAPI) CreateLogSubscription(arg0 *directoryservice.CreateLogSubscriptionInput) (*directoryservice.CreateLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogSubscription", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogSubscription indicates an expected call of CreateLogSubscription.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogSubscription", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateLogSubscription), arg0)
}

// CreateLogSubscriptionRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateLogSubscriptionRequest(arg0 *directoryservice.CreateLogSubscriptionInput) (*request.Request, *directoryservice.CreateLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateLogSubscriptionOutput)
	return ret0, ret1
}

// CreateLogSubscriptionRequest indicates an expected call of CreateLogSubscriptionRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogSubscriptionRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateLogSubscriptionRequest), arg0)
}

// CreateLogSubscriptionWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateLogSubscriptionWithContext(arg0 context.Context, arg1 *directoryservice.CreateLogSubscriptionInput, arg2 ...request.Option) (*directoryservice.CreateLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogSubscriptionWithContext indicates an expected call of CreateLogSubscriptionWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogSubscriptionWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateLogSubscriptionWithContext), varargs...)
}

// CreateMicrosoftAD mocks base method.
func (m *MockDirectoryServiceAPI) CreateMicrosoftAD(arg0 *directoryservice.CreateMicrosoftADInput) (*directoryservice.CreateMicrosoftADOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMicrosoftAD", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateMicrosoftADOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMicrosoftAD indicates an expected call of CreateMicrosoftAD.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateMicrosoftAD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMicrosoftAD", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateMicrosoftAD), arg0)
}

// CreateMicrosoftADRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateMicrosoftADRequest(arg0 *directoryservice.CreateMicrosoftADInput) (*request.Request, *directoryservice.CreateMicrosoftADOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMicrosoftADRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateMicrosoftADOutput)
	return ret0, ret1
}

// CreateMicrosoftADRequest indicates an expected call of CreateMicrosoftADRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateMicrosoftADRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMicrosoftADRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateMicrosoftADRequest), arg0)
}

// CreateMicrosoftADWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateMicrosoftADWithContext(arg0 context.Context, arg1 *directoryservice.CreateMicrosoftADInput, arg2 ...request.Option) (*directoryservice.CreateMicrosoftADOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMicrosoftADWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateMicrosoftADOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMicrosoftADWithContext indicates an expected call of CreateMicrosoftADWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateMicrosoftADWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMicrosoftADWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateMicrosoftADWithContext), varargs...)
}

// CreateSnapshot mocks base method.
func (m *MockDirectoryServiceAPI) CreateSnapshot(arg0 *directoryservice.CreateSnapshotInput) (*directoryservice.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateSnapshot), arg0)
}

// CreateSnapshotRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateSnapshotRequest(arg0 *directoryservice.CreateSnapshotInput) (*request.Request, *directoryservice.CreateSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateSnapshotOutput)
	return ret0, ret1
}

// CreateSnapshotRequest indicates an expected call of CreateSnapshotRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateSnapshotRequest), arg0)
}

// CreateSnapshotWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateSnapshotWithContext(arg0 context.Context, arg1 *directoryservice.CreateSnapshotInput, arg2 ...request.Option) (*directoryservice.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotWithContext indicates an expected call of CreateSnapshotWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateSnapshotWithContext), varargs...)
}

// CreateTrust mocks base method.
func (m *MockDirectoryServiceAPI) CreateTrust(arg0 *directoryservice.CreateTrustInput) (*directoryservice.CreateTrustOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrust", arg0)
	ret0, _ := ret[0].(*directoryservice.CreateTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrust indicates an expected call of CreateTrust.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateTrust(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrust", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateTrust), arg0)
}

// CreateTrustRequest mocks base method.
func (m *MockDirectoryServiceAPI) CreateTrustRequest(arg0 *directoryservice.CreateTrustInput) (*request.Request, *directoryservice.CreateTrustOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrustRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.CreateTrustOutput)
	return ret0, ret1
}

// CreateTrustRequest indicates an expected call of CreateTrustRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateTrustRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateTrustRequest), arg0)
}

// CreateTrustWithContext mocks base method.
func (m *MockDirectoryServiceAPI) CreateTrustWithContext(arg0 context.Context, arg1 *directoryservice.CreateTrustInput, arg2 ...request.Option) (*directoryservice.CreateTrustOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrustWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.CreateTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrustWithContext indicates an expected call of CreateTrustWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) CreateTrustWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).CreateTrustWithContext), varargs...)
}

// DeleteConditionalForwarder mocks base method.
func (m *MockDirectoryServiceAPI) DeleteConditionalForwarder(arg0 *directoryservice.DeleteConditionalForwarderInput) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConditionalForwarder", arg0)
	ret0, _ := ret[0].(*directoryservice.DeleteConditionalForwarderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConditionalForwarder indicates an expected call of DeleteConditionalForwarder.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteConditionalForwarder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConditionalForwarder", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteConditionalForwarder), arg0)
}

// DeleteConditionalForwarderRequest mocks base method.
func (m *MockDirectoryServiceAPI) DeleteConditionalForwarderRequest(arg0 *directoryservice.DeleteConditionalForwarderInput) (*request.Request, *directoryservice.DeleteConditionalForwarderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConditionalForwarderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DeleteConditionalForwarderOutput)
	return ret0, ret1
}

// DeleteConditionalForwarderRequest indicates an expected call of DeleteConditionalForwarderRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteConditionalForwarderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConditionalForwarderRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteConditionalForwarderRequest), arg0)
}

// DeleteConditionalForwarderWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DeleteConditionalForwarderWithContext(arg0 context.Context, arg1 *directoryservice.DeleteConditionalForwarderInput, arg2 ...request.Option) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConditionalForwarderWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DeleteConditionalForwarderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConditionalForwarderWithContext indicates an expected call of DeleteConditionalForwarderWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteConditionalForwarderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConditionalForwarderWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteConditionalForwarderWithContext), varargs...)
}

// DeleteDirectory mocks base method.
func (m *MockDirectoryServiceAPI) DeleteDirectory(arg0 *directoryservice.DeleteDirectoryInput) (*directoryservice.DeleteDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectory", arg0)
	ret0, _ := ret[0].(*directoryservice.DeleteDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectory indicates an expected call of DeleteDirectory.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteDirectory), arg0)
}

// DeleteDirectoryRequest mocks base method.
func (m *MockDirectoryServiceAPI) DeleteDirectoryRequest(arg0 *directoryservice.DeleteDirectoryInput) (*request.Request, *directoryservice.DeleteDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DeleteDirectoryOutput)
	return ret0, ret1
}

// DeleteDirectoryRequest indicates an expected call of DeleteDirectoryRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteDirectoryRequest), arg0)
}

// DeleteDirectoryWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DeleteDirectoryWithContext(arg0 context.Context, arg1 *directoryservice.DeleteDirectoryInput, arg2 ...request.Option) (*directoryservice.DeleteDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DeleteDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectoryWithContext indicates an expected call of DeleteDirectoryWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteDirectoryWithContext), varargs...)
}

// DeleteLogSubscription mocks base method.
func (m *MockDirectoryServiceAPI) DeleteLogSubscription(arg0 *directoryservice.DeleteLogSubscriptionInput) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogSubscription", arg0)
	ret0, _ := ret[0].(*directoryservice.DeleteLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLogSubscription indicates an expected call of DeleteLogSubscription.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteLogSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogSubscription", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteLogSubscription), arg0)
}

// DeleteLogSubscriptionRequest mocks base method.
func (m *MockDirectoryServiceAPI) DeleteLogSubscriptionRequest(arg0 *directoryservice.DeleteLogSubscriptionInput) (*request.Request, *directoryservice.DeleteLogSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DeleteLogSubscriptionOutput)
	return ret0, ret1
}

// DeleteLogSubscriptionRequest indicates an expected call of DeleteLogSubscriptionRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteLogSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogSubscriptionRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteLogSubscriptionRequest), arg0)
}

// DeleteLogSubscriptionWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DeleteLogSubscriptionWithContext(arg0 context.Context, arg1 *directoryservice.DeleteLogSubscriptionInput, arg2 ...request.Option) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLogSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DeleteLogSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLogSubscriptionWithContext indicates an expected call of DeleteLogSubscriptionWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteLogSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogSubscriptionWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteLogSubscriptionWithContext), varargs...)
}

// DeleteSnapshot mocks base method.
func (m *MockDirectoryServiceAPI) DeleteSnapshot(arg0 *directoryservice.DeleteSnapshotInput) (*directoryservice.DeleteSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0)
	ret0, _ := ret[0].(*directoryservice.DeleteSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteSnapshot), arg0)
}

// DeleteSnapshotRequest mocks base method.
func (m *MockDirectoryServiceAPI) DeleteSnapshotRequest(arg0 *directoryservice.DeleteSnapshotInput) (*request.Request, *directoryservice.DeleteSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DeleteSnapshotOutput)
	return ret0, ret1
}

// DeleteSnapshotRequest indicates an expected call of DeleteSnapshotRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteSnapshotRequest), arg0)
}

// DeleteSnapshotWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DeleteSnapshotWithContext(arg0 context.Context, arg1 *directoryservice.DeleteSnapshotInput, arg2 ...request.Option) (*directoryservice.DeleteSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DeleteSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshotWithContext indicates an expected call of DeleteSnapshotWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteSnapshotWithContext), varargs...)
}

// DeleteTrust mocks base method.
func (m *MockDirectoryServiceAPI) DeleteTrust(arg0 *directoryservice.DeleteTrustInput) (*directoryservice.DeleteTrustOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrust", arg0)
	ret0, _ := ret[0].(*directoryservice.DeleteTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrust indicates an expected call of DeleteTrust.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteTrust(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrust", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteTrust), arg0)
}

// DeleteTrustRequest mocks base method.
func (m *MockDirectoryServiceAPI) DeleteTrustRequest(arg0 *directoryservice.DeleteTrustInput) (*request.Request, *directoryservice.DeleteTrustOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrustRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DeleteTrustOutput)
	return ret0, ret1
}

// DeleteTrustRequest indicates an expected call of DeleteTrustRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteTrustRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteTrustRequest), arg0)
}

// DeleteTrustWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DeleteTrustWithContext(arg0 context.Context, arg1 *directoryservice.DeleteTrustInput, arg2 ...request.Option) (*directoryservice.DeleteTrustOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrustWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DeleteTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrustWithContext indicates an expected call of DeleteTrustWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DeleteTrustWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeleteTrustWithContext), varargs...)
}

// DeregisterCertificate mocks base method.
func (m *MockDirectoryServiceAPI) DeregisterCertificate(arg0 *directoryservice.DeregisterCertificateInput) (*directoryservice.DeregisterCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterCertificate", arg0)
	ret0, _ := ret[0].(*directoryservice.DeregisterCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterCertificate indicates an expected call of DeregisterCertificate.
func (mr *MockDirectoryServiceAPIMockRecorder) DeregisterCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCertificate", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeregisterCertificate), arg0)
}

// DeregisterCertificateRequest mocks base method.
func (m *MockDirectoryServiceAPI) DeregisterCertificateRequest(arg0 *directoryservice.DeregisterCertificateInput) (*request.Request, *directoryservice.DeregisterCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DeregisterCertificateOutput)
	return ret0, ret1
}

// DeregisterCertificateRequest indicates an expected call of DeregisterCertificateRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DeregisterCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCertificateRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeregisterCertificateRequest), arg0)
}

// DeregisterCertificateWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DeregisterCertificateWithContext(arg0 context.Context, arg1 *directoryservice.DeregisterCertificateInput, arg2 ...request.Option) (*directoryservice.DeregisterCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DeregisterCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterCertificateWithContext indicates an expected call of DeregisterCertificateWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DeregisterCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCertificateWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeregisterCertificateWithContext), varargs...)
}

// DeregisterEventTopic mocks base method.
func (m *MockDirectoryServiceAPI) DeregisterEventTopic(arg0 *directoryservice.DeregisterEventTopicInput) (*directoryservice.DeregisterEventTopicOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEventTopic", arg0)
	ret0, _ := ret[0].(*directoryservice.DeregisterEventTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterEventTopic indicates an expected call of DeregisterEventTopic.
func (mr *MockDirectoryServiceAPIMockRecorder) DeregisterEventTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEventTopic", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeregisterEventTopic), arg0)
}

// DeregisterEventTopicRequest mocks base method.
func (m *MockDirectoryServiceAPI) DeregisterEventTopicRequest(arg0 *directoryservice.DeregisterEventTopicInput) (*request.Request, *directoryservice.DeregisterEventTopicOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEventTopicRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DeregisterEventTopicOutput)
	return ret0, ret1
}

// DeregisterEventTopicRequest indicates an expected call of DeregisterEventTopicRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DeregisterEventTopicRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEventTopicRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeregisterEventTopicRequest), arg0)
}

// DeregisterEventTopicWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DeregisterEventTopicWithContext(arg0 context.Context, arg1 *directoryservice.DeregisterEventTopicInput, arg2 ...request.Option) (*directoryservice.DeregisterEventTopicOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterEventTopicWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DeregisterEventTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterEventTopicWithContext indicates an expected call of DeregisterEventTopicWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DeregisterEventTopicWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEventTopicWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DeregisterEventTopicWithContext), varargs...)
}

// DescribeCertificate mocks base method.
func (m *MockDirectoryServiceAPI) DescribeCertificate(arg0 *directoryservice.DescribeCertificateInput) (*directoryservice.DescribeCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificate", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificate indicates an expected call of DescribeCertificate.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificate", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeCertificate), arg0)
}

// DescribeCertificateRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeCertificateRequest(arg0 *directoryservice.DescribeCertificateInput) (*request.Request, *directoryservice.DescribeCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeCertificateOutput)
	return ret0, ret1
}

// DescribeCertificateRequest indicates an expected call of DescribeCertificateRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeCertificateRequest), arg0)
}

// DescribeCertificateWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeCertificateWithContext(arg0 context.Context, arg1 *directoryservice.DescribeCertificateInput, arg2 ...request.Option) (*directoryservice.DescribeCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateWithContext indicates an expected call of DescribeCertificateWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeCertificateWithContext), varargs...)
}

// DescribeConditionalForwarders mocks base method.
func (m *MockDirectoryServiceAPI) DescribeConditionalForwarders(arg0 *directoryservice.DescribeConditionalForwardersInput) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConditionalForwarders", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeConditionalForwardersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConditionalForwarders indicates an expected call of DescribeConditionalForwarders.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeConditionalForwarders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConditionalForwarders", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeConditionalForwarders), arg0)
}

// DescribeConditionalForwardersRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeConditionalForwardersRequest(arg0 *directoryservice.DescribeConditionalForwardersInput) (*request.Request, *directoryservice.DescribeConditionalForwardersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConditionalForwardersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeConditionalForwardersOutput)
	return ret0, ret1
}

// DescribeConditionalForwardersRequest indicates an expected call of DescribeConditionalForwardersRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeConditionalForwardersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConditionalForwardersRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeConditionalForwardersRequest), arg0)
}

// DescribeConditionalForwardersWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeConditionalForwardersWithContext(arg0 context.Context, arg1 *directoryservice.DescribeConditionalForwardersInput, arg2 ...request.Option) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConditionalForwardersWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeConditionalForwardersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConditionalForwardersWithContext indicates an expected call of DescribeConditionalForwardersWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeConditionalForwardersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConditionalForwardersWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeConditionalForwardersWithContext), varargs...)
}

// DescribeDirectories mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDirectories(arg0 *directoryservice.DescribeDirectoriesInput) (*directoryservice.DescribeDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDirectories", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDirectories indicates an expected call of DescribeDirectories.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDirectories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDirectories", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDirectories), arg0)
}

// DescribeDirectoriesRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDirectoriesRequest(arg0 *directoryservice.DescribeDirectoriesInput) (*request.Request, *directoryservice.DescribeDirectoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDirectoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeDirectoriesOutput)
	return ret0, ret1
}

// DescribeDirectoriesRequest indicates an expected call of DescribeDirectoriesRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDirectoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDirectoriesRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDirectoriesRequest), arg0)
}

// DescribeDirectoriesWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDirectoriesWithContext(arg0 context.Context, arg1 *directoryservice.DescribeDirectoriesInput, arg2 ...request.Option) (*directoryservice.DescribeDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDirectoriesWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDirectoriesWithContext indicates an expected call of DescribeDirectoriesWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDirectoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDirectoriesWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDirectoriesWithContext), varargs...)
}

// DescribeDomainControllers mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDomainControllers(arg0 *directoryservice.DescribeDomainControllersInput) (*directoryservice.DescribeDomainControllersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainControllers", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeDomainControllersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainControllers indicates an expected call of DescribeDomainControllers.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDomainControllers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainControllers", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDomainControllers), arg0)
}

// DescribeDomainControllersPages mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDomainControllersPages(arg0 *directoryservice.DescribeDomainControllersInput, arg1 func(*directoryservice.DescribeDomainControllersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainControllersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDomainControllersPages indicates an expected call of DescribeDomainControllersPages.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDomainControllersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainControllersPages", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDomainControllersPages), arg0, arg1)
}

// DescribeDomainControllersPagesWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDomainControllersPagesWithContext(arg0 context.Context, arg1 *directoryservice.DescribeDomainControllersInput, arg2 func(*directoryservice.DescribeDomainControllersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainControllersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDomainControllersPagesWithContext indicates an expected call of DescribeDomainControllersPagesWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDomainControllersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainControllersPagesWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDomainControllersPagesWithContext), varargs...)
}

// DescribeDomainControllersRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDomainControllersRequest(arg0 *directoryservice.DescribeDomainControllersInput) (*request.Request, *directoryservice.DescribeDomainControllersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDomainControllersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeDomainControllersOutput)
	return ret0, ret1
}

// DescribeDomainControllersRequest indicates an expected call of DescribeDomainControllersRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDomainControllersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainControllersRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDomainControllersRequest), arg0)
}

// DescribeDomainControllersWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeDomainControllersWithContext(arg0 context.Context, arg1 *directoryservice.DescribeDomainControllersInput, arg2 ...request.Option) (*directoryservice.DescribeDomainControllersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDomainControllersWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeDomainControllersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDomainControllersWithContext indicates an expected call of DescribeDomainControllersWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeDomainControllersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDomainControllersWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeDomainControllersWithContext), varargs...)
}

// DescribeEventTopics mocks base method.
func (m *MockDirectoryServiceAPI) DescribeEventTopics(arg0 *directoryservice.DescribeEventTopicsInput) (*directoryservice.DescribeEventTopicsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventTopics", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeEventTopicsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventTopics indicates an expected call of DescribeEventTopics.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeEventTopics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTopics", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeEventTopics), arg0)
}

// DescribeEventTopicsRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeEventTopicsRequest(arg0 *directoryservice.DescribeEventTopicsInput) (*request.Request, *directoryservice.DescribeEventTopicsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventTopicsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeEventTopicsOutput)
	return ret0, ret1
}

// DescribeEventTopicsRequest indicates an expected call of DescribeEventTopicsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeEventTopicsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTopicsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeEventTopicsRequest), arg0)
}

// DescribeEventTopicsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeEventTopicsWithContext(arg0 context.Context, arg1 *directoryservice.DescribeEventTopicsInput, arg2 ...request.Option) (*directoryservice.DescribeEventTopicsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventTopicsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeEventTopicsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventTopicsWithContext indicates an expected call of DescribeEventTopicsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeEventTopicsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventTopicsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeEventTopicsWithContext), varargs...)
}

// DescribeLDAPSSettings mocks base method.
func (m *MockDirectoryServiceAPI) DescribeLDAPSSettings(arg0 *directoryservice.DescribeLDAPSSettingsInput) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLDAPSSettings", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeLDAPSSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLDAPSSettings indicates an expected call of DescribeLDAPSSettings.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeLDAPSSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLDAPSSettings", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeLDAPSSettings), arg0)
}

// DescribeLDAPSSettingsRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeLDAPSSettingsRequest(arg0 *directoryservice.DescribeLDAPSSettingsInput) (*request.Request, *directoryservice.DescribeLDAPSSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLDAPSSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeLDAPSSettingsOutput)
	return ret0, ret1
}

// DescribeLDAPSSettingsRequest indicates an expected call of DescribeLDAPSSettingsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeLDAPSSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLDAPSSettingsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeLDAPSSettingsRequest), arg0)
}

// DescribeLDAPSSettingsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeLDAPSSettingsWithContext(arg0 context.Context, arg1 *directoryservice.DescribeLDAPSSettingsInput, arg2 ...request.Option) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLDAPSSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeLDAPSSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLDAPSSettingsWithContext indicates an expected call of DescribeLDAPSSettingsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeLDAPSSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLDAPSSettingsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeLDAPSSettingsWithContext), varargs...)
}

// DescribeRegions mocks base method.
func (m *MockDirectoryServiceAPI) DescribeRegions(arg0 *directoryservice.DescribeRegionsInput) (*directoryservice.DescribeRegionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegions", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegions indicates an expected call of DescribeRegions.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeRegions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegions", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeRegions), arg0)
}

// DescribeRegionsRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeRegionsRequest(arg0 *directoryservice.DescribeRegionsInput) (*request.Request, *directoryservice.DescribeRegionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeRegionsOutput)
	return ret0, ret1
}

// DescribeRegionsRequest indicates an expected call of DescribeRegionsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeRegionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegionsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeRegionsRequest), arg0)
}

// DescribeRegionsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeRegionsWithContext(arg0 context.Context, arg1 *directoryservice.DescribeRegionsInput, arg2 ...request.Option) (*directoryservice.DescribeRegionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegionsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeRegionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegionsWithContext indicates an expected call of DescribeRegionsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeRegionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegionsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeRegionsWithContext), varargs...)
}

// DescribeSharedDirectories mocks base method.
func (m *MockDirectoryServiceAPI) DescribeSharedDirectories(arg0 *directoryservice.DescribeSharedDirectoriesInput) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSharedDirectories", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeSharedDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSharedDirectories indicates an expected call of DescribeSharedDirectories.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeSharedDirectories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSharedDirectories", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeSharedDirectories), arg0)
}

// DescribeSharedDirectoriesRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeSharedDirectoriesRequest(arg0 *directoryservice.DescribeSharedDirectoriesInput) (*request.Request, *directoryservice.DescribeSharedDirectoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSharedDirectoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeSharedDirectoriesOutput)
	return ret0, ret1
}

// DescribeSharedDirectoriesRequest indicates an expected call of DescribeSharedDirectoriesRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeSharedDirectoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSharedDirectoriesRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeSharedDirectoriesRequest), arg0)
}

// DescribeSharedDirectoriesWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeSharedDirectoriesWithContext(arg0 context.Context, arg1 *directoryservice.DescribeSharedDirectoriesInput, arg2 ...request.Option) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSharedDirectoriesWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeSharedDirectoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSharedDirectoriesWithContext indicates an expected call of DescribeSharedDirectoriesWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeSharedDirectoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSharedDirectoriesWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeSharedDirectoriesWithContext), varargs...)
}

// DescribeSnapshots mocks base method.
func (m *MockDirectoryServiceAPI) DescribeSnapshots(arg0 *directoryservice.DescribeSnapshotsInput) (*directoryservice.DescribeSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSnapshots", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshots indicates an expected call of DescribeSnapshots.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshots", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeSnapshots), arg0)
}

// DescribeSnapshotsRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeSnapshotsRequest(arg0 *directoryservice.DescribeSnapshotsInput) (*request.Request, *directoryservice.DescribeSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeSnapshotsOutput)
	return ret0, ret1
}

// DescribeSnapshotsRequest indicates an expected call of DescribeSnapshotsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeSnapshotsRequest), arg0)
}

// DescribeSnapshotsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeSnapshotsWithContext(arg0 context.Context, arg1 *directoryservice.DescribeSnapshotsInput, arg2 ...request.Option) (*directoryservice.DescribeSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshotsWithContext indicates an expected call of DescribeSnapshotsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeSnapshotsWithContext), varargs...)
}

// DescribeTrusts mocks base method.
func (m *MockDirectoryServiceAPI) DescribeTrusts(arg0 *directoryservice.DescribeTrustsInput) (*directoryservice.DescribeTrustsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTrusts", arg0)
	ret0, _ := ret[0].(*directoryservice.DescribeTrustsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrusts indicates an expected call of DescribeTrusts.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeTrusts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrusts", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeTrusts), arg0)
}

// DescribeTrustsRequest mocks base method.
func (m *MockDirectoryServiceAPI) DescribeTrustsRequest(arg0 *directoryservice.DescribeTrustsInput) (*request.Request, *directoryservice.DescribeTrustsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTrustsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DescribeTrustsOutput)
	return ret0, ret1
}

// DescribeTrustsRequest indicates an expected call of DescribeTrustsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeTrustsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeTrustsRequest), arg0)
}

// DescribeTrustsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DescribeTrustsWithContext(arg0 context.Context, arg1 *directoryservice.DescribeTrustsInput, arg2 ...request.Option) (*directoryservice.DescribeTrustsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTrustsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DescribeTrustsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTrustsWithContext indicates an expected call of DescribeTrustsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DescribeTrustsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTrustsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DescribeTrustsWithContext), varargs...)
}

// DisableClientAuthentication mocks base method.
func (m *MockDirectoryServiceAPI) DisableClientAuthentication(arg0 *directoryservice.DisableClientAuthenticationInput) (*directoryservice.DisableClientAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableClientAuthentication", arg0)
	ret0, _ := ret[0].(*directoryservice.DisableClientAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableClientAuthentication indicates an expected call of DisableClientAuthentication.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableClientAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableClientAuthentication", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableClientAuthentication), arg0)
}

// DisableClientAuthenticationRequest mocks base method.
func (m *MockDirectoryServiceAPI) DisableClientAuthenticationRequest(arg0 *directoryservice.DisableClientAuthenticationInput) (*request.Request, *directoryservice.DisableClientAuthenticationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableClientAuthenticationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DisableClientAuthenticationOutput)
	return ret0, ret1
}

// DisableClientAuthenticationRequest indicates an expected call of DisableClientAuthenticationRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableClientAuthenticationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableClientAuthenticationRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableClientAuthenticationRequest), arg0)
}

// DisableClientAuthenticationWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DisableClientAuthenticationWithContext(arg0 context.Context, arg1 *directoryservice.DisableClientAuthenticationInput, arg2 ...request.Option) (*directoryservice.DisableClientAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableClientAuthenticationWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DisableClientAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableClientAuthenticationWithContext indicates an expected call of DisableClientAuthenticationWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableClientAuthenticationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableClientAuthenticationWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableClientAuthenticationWithContext), varargs...)
}

// DisableLDAPS mocks base method.
func (m *MockDirectoryServiceAPI) DisableLDAPS(arg0 *directoryservice.DisableLDAPSInput) (*directoryservice.DisableLDAPSOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableLDAPS", arg0)
	ret0, _ := ret[0].(*directoryservice.DisableLDAPSOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableLDAPS indicates an expected call of DisableLDAPS.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableLDAPS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableLDAPS", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableLDAPS), arg0)
}

// DisableLDAPSRequest mocks base method.
func (m *MockDirectoryServiceAPI) DisableLDAPSRequest(arg0 *directoryservice.DisableLDAPSInput) (*request.Request, *directoryservice.DisableLDAPSOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableLDAPSRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DisableLDAPSOutput)
	return ret0, ret1
}

// DisableLDAPSRequest indicates an expected call of DisableLDAPSRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableLDAPSRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableLDAPSRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableLDAPSRequest), arg0)
}

// DisableLDAPSWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DisableLDAPSWithContext(arg0 context.Context, arg1 *directoryservice.DisableLDAPSInput, arg2 ...request.Option) (*directoryservice.DisableLDAPSOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableLDAPSWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DisableLDAPSOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableLDAPSWithContext indicates an expected call of DisableLDAPSWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableLDAPSWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableLDAPSWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableLDAPSWithContext), varargs...)
}

// DisableRadius mocks base method.
func (m *MockDirectoryServiceAPI) DisableRadius(arg0 *directoryservice.DisableRadiusInput) (*directoryservice.DisableRadiusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRadius", arg0)
	ret0, _ := ret[0].(*directoryservice.DisableRadiusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRadius indicates an expected call of DisableRadius.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableRadius(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRadius", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableRadius), arg0)
}

// DisableRadiusRequest mocks base method.
func (m *MockDirectoryServiceAPI) DisableRadiusRequest(arg0 *directoryservice.DisableRadiusInput) (*request.Request, *directoryservice.DisableRadiusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableRadiusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DisableRadiusOutput)
	return ret0, ret1
}

// DisableRadiusRequest indicates an expected call of DisableRadiusRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableRadiusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRadiusRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableRadiusRequest), arg0)
}

// DisableRadiusWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DisableRadiusWithContext(arg0 context.Context, arg1 *directoryservice.DisableRadiusInput, arg2 ...request.Option) (*directoryservice.DisableRadiusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableRadiusWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DisableRadiusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRadiusWithContext indicates an expected call of DisableRadiusWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableRadiusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRadiusWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableRadiusWithContext), varargs...)
}

// DisableSso mocks base method.
func (m *MockDirectoryServiceAPI) DisableSso(arg0 *directoryservice.DisableSsoInput) (*directoryservice.DisableSsoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSso", arg0)
	ret0, _ := ret[0].(*directoryservice.DisableSsoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSso indicates an expected call of DisableSso.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableSso(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSso", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableSso), arg0)
}

// DisableSsoRequest mocks base method.
func (m *MockDirectoryServiceAPI) DisableSsoRequest(arg0 *directoryservice.DisableSsoInput) (*request.Request, *directoryservice.DisableSsoOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSsoRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.DisableSsoOutput)
	return ret0, ret1
}

// DisableSsoRequest indicates an expected call of DisableSsoRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableSsoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSsoRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableSsoRequest), arg0)
}

// DisableSsoWithContext mocks base method.
func (m *MockDirectoryServiceAPI) DisableSsoWithContext(arg0 context.Context, arg1 *directoryservice.DisableSsoInput, arg2 ...request.Option) (*directoryservice.DisableSsoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableSsoWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.DisableSsoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSsoWithContext indicates an expected call of DisableSsoWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) DisableSsoWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSsoWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).DisableSsoWithContext), varargs...)
}

// EnableClientAuthentication mocks base method.
func (m *MockDirectoryServiceAPI) EnableClientAuthentication(arg0 *directoryservice.EnableClientAuthenticationInput) (*directoryservice.EnableClientAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableClientAuthentication", arg0)
	ret0, _ := ret[0].(*directoryservice.EnableClientAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableClientAuthentication indicates an expected call of EnableClientAuthentication.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableClientAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableClientAuthentication", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableClientAuthentication), arg0)
}

// EnableClientAuthenticationRequest mocks base method.
func (m *MockDirectoryServiceAPI) EnableClientAuthenticationRequest(arg0 *directoryservice.EnableClientAuthenticationInput) (*request.Request, *directoryservice.EnableClientAuthenticationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableClientAuthenticationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.EnableClientAuthenticationOutput)
	return ret0, ret1
}

// EnableClientAuthenticationRequest indicates an expected call of EnableClientAuthenticationRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableClientAuthenticationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableClientAuthenticationRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableClientAuthenticationRequest), arg0)
}

// EnableClientAuthenticationWithContext mocks base method.
func (m *MockDirectoryServiceAPI) EnableClientAuthenticationWithContext(arg0 context.Context, arg1 *directoryservice.EnableClientAuthenticationInput, arg2 ...request.Option) (*directoryservice.EnableClientAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableClientAuthenticationWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.EnableClientAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableClientAuthenticationWithContext indicates an expected call of EnableClientAuthenticationWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableClientAuthenticationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableClientAuthenticationWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableClientAuthenticationWithContext), varargs...)
}

// EnableLDAPS mocks base method.
func (m *MockDirectoryServiceAPI) EnableLDAPS(arg0 *directoryservice.EnableLDAPSInput) (*directoryservice.EnableLDAPSOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableLDAPS", arg0)
	ret0, _ := ret[0].(*directoryservice.EnableLDAPSOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableLDAPS indicates an expected call of EnableLDAPS.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableLDAPS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableLDAPS", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableLDAPS), arg0)
}

// EnableLDAPSRequest mocks base method.
func (m *MockDirectoryServiceAPI) EnableLDAPSRequest(arg0 *directoryservice.EnableLDAPSInput) (*request.Request, *directoryservice.EnableLDAPSOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableLDAPSRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.EnableLDAPSOutput)
	return ret0, ret1
}

// EnableLDAPSRequest indicates an expected call of EnableLDAPSRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableLDAPSRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableLDAPSRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableLDAPSRequest), arg0)
}

// EnableLDAPSWithContext mocks base method.
func (m *MockDirectoryServiceAPI) EnableLDAPSWithContext(arg0 context.Context, arg1 *directoryservice.EnableLDAPSInput, arg2 ...request.Option) (*directoryservice.EnableLDAPSOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableLDAPSWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.EnableLDAPSOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableLDAPSWithContext indicates an expected call of EnableLDAPSWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableLDAPSWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableLDAPSWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableLDAPSWithContext), varargs...)
}

// EnableRadius mocks base method.
func (m *MockDirectoryServiceAPI) EnableRadius(arg0 *directoryservice.EnableRadiusInput) (*directoryservice.EnableRadiusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRadius", arg0)
	ret0, _ := ret[0].(*directoryservice.EnableRadiusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRadius indicates an expected call of EnableRadius.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableRadius(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRadius", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableRadius), arg0)
}

// EnableRadiusRequest mocks base method.
func (m *MockDirectoryServiceAPI) EnableRadiusRequest(arg0 *directoryservice.EnableRadiusInput) (*request.Request, *directoryservice.EnableRadiusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRadiusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.EnableRadiusOutput)
	return ret0, ret1
}

// EnableRadiusRequest indicates an expected call of EnableRadiusRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableRadiusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRadiusRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableRadiusRequest), arg0)
}

// EnableRadiusWithContext mocks base method.
func (m *MockDirectoryServiceAPI) EnableRadiusWithContext(arg0 context.Context, arg1 *directoryservice.EnableRadiusInput, arg2 ...request.Option) (*directoryservice.EnableRadiusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableRadiusWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.EnableRadiusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRadiusWithContext indicates an expected call of EnableRadiusWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableRadiusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRadiusWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableRadiusWithContext), varargs...)
}

// EnableSso mocks base method.
func (m *MockDirectoryServiceAPI) EnableSso(arg0 *directoryservice.EnableSsoInput) (*directoryservice.EnableSsoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSso", arg0)
	ret0, _ := ret[0].(*directoryservice.EnableSsoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSso indicates an expected call of EnableSso.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableSso(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSso", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableSso), arg0)
}

// EnableSsoRequest mocks base method.
func (m *MockDirectoryServiceAPI) EnableSsoRequest(arg0 *directoryservice.EnableSsoInput) (*request.Request, *directoryservice.EnableSsoOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSsoRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.EnableSsoOutput)
	return ret0, ret1
}

// EnableSsoRequest indicates an expected call of EnableSsoRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableSsoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSsoRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableSsoRequest), arg0)
}

// EnableSsoWithContext mocks base method.
func (m *MockDirectoryServiceAPI) EnableSsoWithContext(arg0 context.Context, arg1 *directoryservice.EnableSsoInput, arg2 ...request.Option) (*directoryservice.EnableSsoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableSsoWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.EnableSsoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSsoWithContext indicates an expected call of EnableSsoWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) EnableSsoWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSsoWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).EnableSsoWithContext), varargs...)
}

// GetDirectoryLimits mocks base method.
func (m *MockDirectoryServiceAPI) GetDirectoryLimits(arg0 *directoryservice.GetDirectoryLimitsInput) (*directoryservice.GetDirectoryLimitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryLimits", arg0)
	ret0, _ := ret[0].(*directoryservice.GetDirectoryLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryLimits indicates an expected call of GetDirectoryLimits.
func (mr *MockDirectoryServiceAPIMockRecorder) GetDirectoryLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryLimits", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).GetDirectoryLimits), arg0)
}

// GetDirectoryLimitsRequest mocks base method.
func (m *MockDirectoryServiceAPI) GetDirectoryLimitsRequest(arg0 *directoryservice.GetDirectoryLimitsInput) (*request.Request, *directoryservice.GetDirectoryLimitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryLimitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.GetDirectoryLimitsOutput)
	return ret0, ret1
}

// GetDirectoryLimitsRequest indicates an expected call of GetDirectoryLimitsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) GetDirectoryLimitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryLimitsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).GetDirectoryLimitsRequest), arg0)
}

// GetDirectoryLimitsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) GetDirectoryLimitsWithContext(arg0 context.Context, arg1 *directoryservice.GetDirectoryLimitsInput, arg2 ...request.Option) (*directoryservice.GetDirectoryLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectoryLimitsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.GetDirectoryLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryLimitsWithContext indicates an expected call of GetDirectoryLimitsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) GetDirectoryLimitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryLimitsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).GetDirectoryLimitsWithContext), varargs...)
}

// GetSnapshotLimits mocks base method.
func (m *MockDirectoryServiceAPI) GetSnapshotLimits(arg0 *directoryservice.GetSnapshotLimitsInput) (*directoryservice.GetSnapshotLimitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotLimits", arg0)
	ret0, _ := ret[0].(*directoryservice.GetSnapshotLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotLimits indicates an expected call of GetSnapshotLimits.
func (mr *MockDirectoryServiceAPIMockRecorder) GetSnapshotLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotLimits", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).GetSnapshotLimits), arg0)
}

// GetSnapshotLimitsRequest mocks base method.
func (m *MockDirectoryServiceAPI) GetSnapshotLimitsRequest(arg0 *directoryservice.GetSnapshotLimitsInput) (*request.Request, *directoryservice.GetSnapshotLimitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotLimitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.GetSnapshotLimitsOutput)
	return ret0, ret1
}

// GetSnapshotLimitsRequest indicates an expected call of GetSnapshotLimitsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) GetSnapshotLimitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotLimitsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).GetSnapshotLimitsRequest), arg0)
}

// GetSnapshotLimitsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) GetSnapshotLimitsWithContext(arg0 context.Context, arg1 *directoryservice.GetSnapshotLimitsInput, arg2 ...request.Option) (*directoryservice.GetSnapshotLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnapshotLimitsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.GetSnapshotLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotLimitsWithContext indicates an expected call of GetSnapshotLimitsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) GetSnapshotLimitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotLimitsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).GetSnapshotLimitsWithContext), varargs...)
}

// ListCertificates mocks base method.
func (m *MockDirectoryServiceAPI) ListCertificates(arg0 *directoryservice.ListCertificatesInput) (*directoryservice.ListCertificatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificates", arg0)
	ret0, _ := ret[0].(*directoryservice.ListCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates.
func (mr *MockDirectoryServiceAPIMockRecorder) ListCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListCertificates), arg0)
}

// ListCertificatesRequest mocks base method.
func (m *MockDirectoryServiceAPI) ListCertificatesRequest(arg0 *directoryservice.ListCertificatesInput) (*request.Request, *directoryservice.ListCertificatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ListCertificatesOutput)
	return ret0, ret1
}

// ListCertificatesRequest indicates an expected call of ListCertificatesRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ListCertificatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListCertificatesRequest), arg0)
}

// ListCertificatesWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ListCertificatesWithContext(arg0 context.Context, arg1 *directoryservice.ListCertificatesInput, arg2 ...request.Option) (*directoryservice.ListCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ListCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificatesWithContext indicates an expected call of ListCertificatesWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ListCertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificatesWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListCertificatesWithContext), varargs...)
}

// ListIpRoutes mocks base method.
func (m *MockDirectoryServiceAPI) ListIpRoutes(arg0 *directoryservice.ListIpRoutesInput) (*directoryservice.ListIpRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIpRoutes", arg0)
	ret0, _ := ret[0].(*directoryservice.ListIpRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIpRoutes indicates an expected call of ListIpRoutes.
func (mr *MockDirectoryServiceAPIMockRecorder) ListIpRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIpRoutes", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListIpRoutes), arg0)
}

// ListIpRoutesRequest mocks base method.
func (m *MockDirectoryServiceAPI) ListIpRoutesRequest(arg0 *directoryservice.ListIpRoutesInput) (*request.Request, *directoryservice.ListIpRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIpRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ListIpRoutesOutput)
	return ret0, ret1
}

// ListIpRoutesRequest indicates an expected call of ListIpRoutesRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ListIpRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIpRoutesRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListIpRoutesRequest), arg0)
}

// ListIpRoutesWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ListIpRoutesWithContext(arg0 context.Context, arg1 *directoryservice.ListIpRoutesInput, arg2 ...request.Option) (*directoryservice.ListIpRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIpRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ListIpRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIpRoutesWithContext indicates an expected call of ListIpRoutesWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ListIpRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIpRoutesWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListIpRoutesWithContext), varargs...)
}

// ListLogSubscriptions mocks base method.
func (m *MockDirectoryServiceAPI) ListLogSubscriptions(arg0 *directoryservice.ListLogSubscriptionsInput) (*directoryservice.ListLogSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSubscriptions", arg0)
	ret0, _ := ret[0].(*directoryservice.ListLogSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogSubscriptions indicates an expected call of ListLogSubscriptions.
func (mr *MockDirectoryServiceAPIMockRecorder) ListLogSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSubscriptions", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListLogSubscriptions), arg0)
}

// ListLogSubscriptionsRequest mocks base method.
func (m *MockDirectoryServiceAPI) ListLogSubscriptionsRequest(arg0 *directoryservice.ListLogSubscriptionsInput) (*request.Request, *directoryservice.ListLogSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ListLogSubscriptionsOutput)
	return ret0, ret1
}

// ListLogSubscriptionsRequest indicates an expected call of ListLogSubscriptionsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ListLogSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSubscriptionsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListLogSubscriptionsRequest), arg0)
}

// ListLogSubscriptionsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ListLogSubscriptionsWithContext(arg0 context.Context, arg1 *directoryservice.ListLogSubscriptionsInput, arg2 ...request.Option) (*directoryservice.ListLogSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLogSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ListLogSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogSubscriptionsWithContext indicates an expected call of ListLogSubscriptionsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ListLogSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogSubscriptionsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListLogSubscriptionsWithContext), varargs...)
}

// ListSchemaExtensions mocks base method.
func (m *MockDirectoryServiceAPI) ListSchemaExtensions(arg0 *directoryservice.ListSchemaExtensionsInput) (*directoryservice.ListSchemaExtensionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaExtensions", arg0)
	ret0, _ := ret[0].(*directoryservice.ListSchemaExtensionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaExtensions indicates an expected call of ListSchemaExtensions.
func (mr *MockDirectoryServiceAPIMockRecorder) ListSchemaExtensions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaExtensions", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListSchemaExtensions), arg0)
}

// ListSchemaExtensionsRequest mocks base method.
func (m *MockDirectoryServiceAPI) ListSchemaExtensionsRequest(arg0 *directoryservice.ListSchemaExtensionsInput) (*request.Request, *directoryservice.ListSchemaExtensionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaExtensionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ListSchemaExtensionsOutput)
	return ret0, ret1
}

// ListSchemaExtensionsRequest indicates an expected call of ListSchemaExtensionsRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ListSchemaExtensionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaExtensionsRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListSchemaExtensionsRequest), arg0)
}

// ListSchemaExtensionsWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ListSchemaExtensionsWithContext(arg0 context.Context, arg1 *directoryservice.ListSchemaExtensionsInput, arg2 ...request.Option) (*directoryservice.ListSchemaExtensionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaExtensionsWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ListSchemaExtensionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaExtensionsWithContext indicates an expected call of ListSchemaExtensionsWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ListSchemaExtensionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaExtensionsWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListSchemaExtensionsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDirectoryServiceAPI) ListTagsForResource(arg0 *directoryservice.ListTagsForResourceInput) (*directoryservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*directoryservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDirectoryServiceAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockDirectoryServiceAPI) ListTagsForResourceRequest(arg0 *directoryservice.ListTagsForResourceInput) (*request.Request, *directoryservice.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *directoryservice.ListTagsForResourceInput, arg2 ...request.Option) (*directoryservice.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RegisterCertificate mocks base method.
func (m *MockDirectoryServiceAPI) RegisterCertificate(arg0 *directoryservice.RegisterCertificateInput) (*directoryservice.RegisterCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCertificate", arg0)
	ret0, _ := ret[0].(*directoryservice.RegisterCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCertificate indicates an expected call of RegisterCertificate.
func (mr *MockDirectoryServiceAPIMockRecorder) RegisterCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCertificate", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RegisterCertificate), arg0)
}

// RegisterCertificateRequest mocks base method.
func (m *MockDirectoryServiceAPI) RegisterCertificateRequest(arg0 *directoryservice.RegisterCertificateInput) (*request.Request, *directoryservice.RegisterCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.RegisterCertificateOutput)
	return ret0, ret1
}

// RegisterCertificateRequest indicates an expected call of RegisterCertificateRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) RegisterCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCertificateRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RegisterCertificateRequest), arg0)
}

// RegisterCertificateWithContext mocks base method.
func (m *MockDirectoryServiceAPI) RegisterCertificateWithContext(arg0 context.Context, arg1 *directoryservice.RegisterCertificateInput, arg2 ...request.Option) (*directoryservice.RegisterCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.RegisterCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCertificateWithContext indicates an expected call of RegisterCertificateWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) RegisterCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCertificateWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RegisterCertificateWithContext), varargs...)
}

// RegisterEventTopic mocks base method.
func (m *MockDirectoryServiceAPI) RegisterEventTopic(arg0 *directoryservice.RegisterEventTopicInput) (*directoryservice.RegisterEventTopicOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEventTopic", arg0)
	ret0, _ := ret[0].(*directoryservice.RegisterEventTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEventTopic indicates an expected call of RegisterEventTopic.
func (mr *MockDirectoryServiceAPIMockRecorder) RegisterEventTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEventTopic", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RegisterEventTopic), arg0)
}

// RegisterEventTopicRequest mocks base method.
func (m *MockDirectoryServiceAPI) RegisterEventTopicRequest(arg0 *directoryservice.RegisterEventTopicInput) (*request.Request, *directoryservice.RegisterEventTopicOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEventTopicRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.RegisterEventTopicOutput)
	return ret0, ret1
}

// RegisterEventTopicRequest indicates an expected call of RegisterEventTopicRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) RegisterEventTopicRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEventTopicRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RegisterEventTopicRequest), arg0)
}

// RegisterEventTopicWithContext mocks base method.
func (m *MockDirectoryServiceAPI) RegisterEventTopicWithContext(arg0 context.Context, arg1 *directoryservice.RegisterEventTopicInput, arg2 ...request.Option) (*directoryservice.RegisterEventTopicOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterEventTopicWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.RegisterEventTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEventTopicWithContext indicates an expected call of RegisterEventTopicWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) RegisterEventTopicWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEventTopicWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RegisterEventTopicWithContext), varargs...)
}

// RejectSharedDirectory mocks base method.
func (m *MockDirectoryServiceAPI) RejectSharedDirectory(arg0 *directoryservice.RejectSharedDirectoryInput) (*directoryservice.RejectSharedDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectSharedDirectory", arg0)
	ret0, _ := ret[0].(*directoryservice.RejectSharedDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectSharedDirectory indicates an expected call of RejectSharedDirectory.
func (mr *MockDirectoryServiceAPIMockRecorder) RejectSharedDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectSharedDirectory", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RejectSharedDirectory), arg0)
}

// RejectSharedDirectoryRequest mocks base method.
func (m *MockDirectoryServiceAPI) RejectSharedDirectoryRequest(arg0 *directoryservice.RejectSharedDirectoryInput) (*request.Request, *directoryservice.RejectSharedDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectSharedDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.RejectSharedDirectoryOutput)
	return ret0, ret1
}

// RejectSharedDirectoryRequest indicates an expected call of RejectSharedDirectoryRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) RejectSharedDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectSharedDirectoryRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RejectSharedDirectoryRequest), arg0)
}

// RejectSharedDirectoryWithContext mocks base method.
func (m *MockDirectoryServiceAPI) RejectSharedDirectoryWithContext(arg0 context.Context, arg1 *directoryservice.RejectSharedDirectoryInput, arg2 ...request.Option) (*directoryservice.RejectSharedDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectSharedDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.RejectSharedDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectSharedDirectoryWithContext indicates an expected call of RejectSharedDirectoryWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) RejectSharedDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectSharedDirectoryWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RejectSharedDirectoryWithContext), varargs...)
}

// RemoveIpRoutes mocks base method.
func (m *MockDirectoryServiceAPI) RemoveIpRoutes(arg0 *directoryservice.RemoveIpRoutesInput) (*directoryservice.RemoveIpRoutesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIpRoutes", arg0)
	ret0, _ := ret[0].(*directoryservice.RemoveIpRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIpRoutes indicates an expected call of RemoveIpRoutes.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveIpRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIpRoutes", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveIpRoutes), arg0)
}

// RemoveIpRoutesRequest mocks base method.
func (m *MockDirectoryServiceAPI) RemoveIpRoutesRequest(arg0 *directoryservice.RemoveIpRoutesInput) (*request.Request, *directoryservice.RemoveIpRoutesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIpRoutesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.RemoveIpRoutesOutput)
	return ret0, ret1
}

// RemoveIpRoutesRequest indicates an expected call of RemoveIpRoutesRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveIpRoutesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIpRoutesRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveIpRoutesRequest), arg0)
}

// RemoveIpRoutesWithContext mocks base method.
func (m *MockDirectoryServiceAPI) RemoveIpRoutesWithContext(arg0 context.Context, arg1 *directoryservice.RemoveIpRoutesInput, arg2 ...request.Option) (*directoryservice.RemoveIpRoutesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveIpRoutesWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.RemoveIpRoutesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveIpRoutesWithContext indicates an expected call of RemoveIpRoutesWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveIpRoutesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIpRoutesWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveIpRoutesWithContext), varargs...)
}

// RemoveRegion mocks base method.
func (m *MockDirectoryServiceAPI) RemoveRegion(arg0 *directoryservice.RemoveRegionInput) (*directoryservice.RemoveRegionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRegion", arg0)
	ret0, _ := ret[0].(*directoryservice.RemoveRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRegion indicates an expected call of RemoveRegion.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveRegion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRegion", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveRegion), arg0)
}

// RemoveRegionRequest mocks base method.
func (m *MockDirectoryServiceAPI) RemoveRegionRequest(arg0 *directoryservice.RemoveRegionInput) (*request.Request, *directoryservice.RemoveRegionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRegionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.RemoveRegionOutput)
	return ret0, ret1
}

// RemoveRegionRequest indicates an expected call of RemoveRegionRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveRegionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRegionRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveRegionRequest), arg0)
}

// RemoveRegionWithContext mocks base method.
func (m *MockDirectoryServiceAPI) RemoveRegionWithContext(arg0 context.Context, arg1 *directoryservice.RemoveRegionInput, arg2 ...request.Option) (*directoryservice.RemoveRegionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRegionWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.RemoveRegionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRegionWithContext indicates an expected call of RemoveRegionWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveRegionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRegionWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveRegionWithContext), varargs...)
}

// RemoveTagsFromResource mocks base method.
func (m *MockDirectoryServiceAPI) RemoveTagsFromResource(arg0 *directoryservice.RemoveTagsFromResourceInput) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResource", arg0)
	ret0, _ := ret[0].(*directoryservice.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResource indicates an expected call of RemoveTagsFromResource.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveTagsFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResource", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveTagsFromResource), arg0)
}

// RemoveTagsFromResourceRequest mocks base method.
func (m *MockDirectoryServiceAPI) RemoveTagsFromResourceRequest(arg0 *directoryservice.RemoveTagsFromResourceInput) (*request.Request, *directoryservice.RemoveTagsFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.RemoveTagsFromResourceOutput)
	return ret0, ret1
}

// RemoveTagsFromResourceRequest indicates an expected call of RemoveTagsFromResourceRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveTagsFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveTagsFromResourceRequest), arg0)
}

// RemoveTagsFromResourceWithContext mocks base method.
func (m *MockDirectoryServiceAPI) RemoveTagsFromResourceWithContext(arg0 context.Context, arg1 *directoryservice.RemoveTagsFromResourceInput, arg2 ...request.Option) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResourceWithContext indicates an expected call of RemoveTagsFromResourceWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) RemoveTagsFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RemoveTagsFromResourceWithContext), varargs...)
}

// ResetUserPassword mocks base method.
func (m *MockDirectoryServiceAPI) ResetUserPassword(arg0 *directoryservice.ResetUserPasswordInput) (*directoryservice.ResetUserPasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUserPassword", arg0)
	ret0, _ := ret[0].(*directoryservice.ResetUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetUserPassword indicates an expected call of ResetUserPassword.
func (mr *MockDirectoryServiceAPIMockRecorder) ResetUserPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPassword", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ResetUserPassword), arg0)
}

// ResetUserPasswordRequest mocks base method.
func (m *MockDirectoryServiceAPI) ResetUserPasswordRequest(arg0 *directoryservice.ResetUserPasswordInput) (*request.Request, *directoryservice.ResetUserPasswordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUserPasswordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ResetUserPasswordOutput)
	return ret0, ret1
}

// ResetUserPasswordRequest indicates an expected call of ResetUserPasswordRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ResetUserPasswordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPasswordRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ResetUserPasswordRequest), arg0)
}

// ResetUserPasswordWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ResetUserPasswordWithContext(arg0 context.Context, arg1 *directoryservice.ResetUserPasswordInput, arg2 ...request.Option) (*directoryservice.ResetUserPasswordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetUserPasswordWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ResetUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetUserPasswordWithContext indicates an expected call of ResetUserPasswordWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ResetUserPasswordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPasswordWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ResetUserPasswordWithContext), varargs...)
}

// RestoreFromSnapshot mocks base method.
func (m *MockDirectoryServiceAPI) RestoreFromSnapshot(arg0 *directoryservice.RestoreFromSnapshotInput) (*directoryservice.RestoreFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromSnapshot", arg0)
	ret0, _ := ret[0].(*directoryservice.RestoreFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreFromSnapshot indicates an expected call of RestoreFromSnapshot.
func (mr *MockDirectoryServiceAPIMockRecorder) RestoreFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromSnapshot", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RestoreFromSnapshot), arg0)
}

// RestoreFromSnapshotRequest mocks base method.
func (m *MockDirectoryServiceAPI) RestoreFromSnapshotRequest(arg0 *directoryservice.RestoreFromSnapshotInput) (*request.Request, *directoryservice.RestoreFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.RestoreFromSnapshotOutput)
	return ret0, ret1
}

// RestoreFromSnapshotRequest indicates an expected call of RestoreFromSnapshotRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) RestoreFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromSnapshotRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RestoreFromSnapshotRequest), arg0)
}

// RestoreFromSnapshotWithContext mocks base method.
func (m *MockDirectoryServiceAPI) RestoreFromSnapshotWithContext(arg0 context.Context, arg1 *directoryservice.RestoreFromSnapshotInput, arg2 ...request.Option) (*directoryservice.RestoreFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.RestoreFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreFromSnapshotWithContext indicates an expected call of RestoreFromSnapshotWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) RestoreFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFromSnapshotWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).RestoreFromSnapshotWithContext), varargs...)
}

// ShareDirectory mocks base method.
func (m *MockDirectoryServiceAPI) ShareDirectory(arg0 *directoryservice.ShareDirectoryInput) (*directoryservice.ShareDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareDirectory", arg0)
	ret0, _ := ret[0].(*directoryservice.ShareDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareDirectory indicates an expected call of ShareDirectory.
func (mr *MockDirectoryServiceAPIMockRecorder) ShareDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareDirectory", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ShareDirectory), arg0)
}

// ShareDirectoryRequest mocks base method.
func (m *MockDirectoryServiceAPI) ShareDirectoryRequest(arg0 *directoryservice.ShareDirectoryInput) (*request.Request, *directoryservice.ShareDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.ShareDirectoryOutput)
	return ret0, ret1
}

// ShareDirectoryRequest indicates an expected call of ShareDirectoryRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) ShareDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareDirectoryRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ShareDirectoryRequest), arg0)
}

// ShareDirectoryWithContext mocks base method.
func (m *MockDirectoryServiceAPI) ShareDirectoryWithContext(arg0 context.Context, arg1 *directoryservice.ShareDirectoryInput, arg2 ...request.Option) (*directoryservice.ShareDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShareDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.ShareDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareDirectoryWithContext indicates an expected call of ShareDirectoryWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) ShareDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareDirectoryWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).ShareDirectoryWithContext), varargs...)
}

// StartSchemaExtension mocks base method.
func (m *MockDirectoryServiceAPI) StartSchemaExtension(arg0 *directoryservice.StartSchemaExtensionInput) (*directoryservice.StartSchemaExtensionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSchemaExtension", arg0)
	ret0, _ := ret[0].(*directoryservice.StartSchemaExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSchemaExtension indicates an expected call of StartSchemaExtension.
func (mr *MockDirectoryServiceAPIMockRecorder) StartSchemaExtension(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSchemaExtension", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).StartSchemaExtension), arg0)
}

// StartSchemaExtensionRequest mocks base method.
func (m *MockDirectoryServiceAPI) StartSchemaExtensionRequest(arg0 *directoryservice.StartSchemaExtensionInput) (*request.Request, *directoryservice.StartSchemaExtensionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSchemaExtensionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.StartSchemaExtensionOutput)
	return ret0, ret1
}

// StartSchemaExtensionRequest indicates an expected call of StartSchemaExtensionRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) StartSchemaExtensionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSchemaExtensionRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).StartSchemaExtensionRequest), arg0)
}

// StartSchemaExtensionWithContext mocks base method.
func (m *MockDirectoryServiceAPI) StartSchemaExtensionWithContext(arg0 context.Context, arg1 *directoryservice.StartSchemaExtensionInput, arg2 ...request.Option) (*directoryservice.StartSchemaExtensionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSchemaExtensionWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.StartSchemaExtensionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSchemaExtensionWithContext indicates an expected call of StartSchemaExtensionWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) StartSchemaExtensionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSchemaExtensionWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).StartSchemaExtensionWithContext), varargs...)
}

// UnshareDirectory mocks base method.
func (m *MockDirectoryServiceAPI) UnshareDirectory(arg0 *directoryservice.UnshareDirectoryInput) (*directoryservice.UnshareDirectoryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareDirectory", arg0)
	ret0, _ := ret[0].(*directoryservice.UnshareDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnshareDirectory indicates an expected call of UnshareDirectory.
func (mr *MockDirectoryServiceAPIMockRecorder) UnshareDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareDirectory", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UnshareDirectory), arg0)
}

// UnshareDirectoryRequest mocks base method.
func (m *MockDirectoryServiceAPI) UnshareDirectoryRequest(arg0 *directoryservice.UnshareDirectoryInput) (*request.Request, *directoryservice.UnshareDirectoryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareDirectoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.UnshareDirectoryOutput)
	return ret0, ret1
}

// UnshareDirectoryRequest indicates an expected call of UnshareDirectoryRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) UnshareDirectoryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareDirectoryRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UnshareDirectoryRequest), arg0)
}

// UnshareDirectoryWithContext mocks base method.
func (m *MockDirectoryServiceAPI) UnshareDirectoryWithContext(arg0 context.Context, arg1 *directoryservice.UnshareDirectoryInput, arg2 ...request.Option) (*directoryservice.UnshareDirectoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnshareDirectoryWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.UnshareDirectoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnshareDirectoryWithContext indicates an expected call of UnshareDirectoryWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) UnshareDirectoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareDirectoryWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UnshareDirectoryWithContext), varargs...)
}

// UpdateConditionalForwarder mocks base method.
func (m *MockDirectoryServiceAPI) UpdateConditionalForwarder(arg0 *directoryservice.UpdateConditionalForwarderInput) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConditionalForwarder", arg0)
	ret0, _ := ret[0].(*directoryservice.UpdateConditionalForwarderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConditionalForwarder indicates an expected call of UpdateConditionalForwarder.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateConditionalForwarder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConditionalForwarder", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateConditionalForwarder), arg0)
}

// UpdateConditionalForwarderRequest mocks base method.
func (m *MockDirectoryServiceAPI) UpdateConditionalForwarderRequest(arg0 *directoryservice.UpdateConditionalForwarderInput) (*request.Request, *directoryservice.UpdateConditionalForwarderOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConditionalForwarderRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.UpdateConditionalForwarderOutput)
	return ret0, ret1
}

// UpdateConditionalForwarderRequest indicates an expected call of UpdateConditionalForwarderRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateConditionalForwarderRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConditionalForwarderRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateConditionalForwarderRequest), arg0)
}

// UpdateConditionalForwarderWithContext mocks base method.
func (m *MockDirectoryServiceAPI) UpdateConditionalForwarderWithContext(arg0 context.Context, arg1 *directoryservice.UpdateConditionalForwarderInput, arg2 ...request.Option) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConditionalForwarderWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.UpdateConditionalForwarderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConditionalForwarderWithContext indicates an expected call of UpdateConditionalForwarderWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateConditionalForwarderWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConditionalForwarderWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateConditionalForwarderWithContext), varargs...)
}

// UpdateNumberOfDomainControllers mocks base method.
func (m *MockDirectoryServiceAPI) UpdateNumberOfDomainControllers(arg0 *directoryservice.UpdateNumberOfDomainControllersInput) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumberOfDomainControllers", arg0)
	ret0, _ := ret[0].(*directoryservice.UpdateNumberOfDomainControllersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNumberOfDomainControllers indicates an expected call of UpdateNumberOfDomainControllers.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateNumberOfDomainControllers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumberOfDomainControllers", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateNumberOfDomainControllers), arg0)
}

// UpdateNumberOfDomainControllersRequest mocks base method.
func (m *MockDirectoryServiceAPI) UpdateNumberOfDomainControllersRequest(arg0 *directoryservice.UpdateNumberOfDomainControllersInput) (*request.Request, *directoryservice.UpdateNumberOfDomainControllersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumberOfDomainControllersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.UpdateNumberOfDomainControllersOutput)
	return ret0, ret1
}

// UpdateNumberOfDomainControllersRequest indicates an expected call of UpdateNumberOfDomainControllersRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateNumberOfDomainControllersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumberOfDomainControllersRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateNumberOfDomainControllersRequest), arg0)
}

// UpdateNumberOfDomainControllersWithContext mocks base method.
func (m *MockDirectoryServiceAPI) UpdateNumberOfDomainControllersWithContext(arg0 context.Context, arg1 *directoryservice.UpdateNumberOfDomainControllersInput, arg2 ...request.Option) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNumberOfDomainControllersWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.UpdateNumberOfDomainControllersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNumberOfDomainControllersWithContext indicates an expected call of UpdateNumberOfDomainControllersWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateNumberOfDomainControllersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumberOfDomainControllersWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateNumberOfDomainControllersWithContext), varargs...)
}

// UpdateRadius mocks base method.
func (m *MockDirectoryServiceAPI) UpdateRadius(arg0 *directoryservice.UpdateRadiusInput) (*directoryservice.UpdateRadiusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRadius", arg0)
	ret0, _ := ret[0].(*directoryservice.UpdateRadiusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRadius indicates an expected call of UpdateRadius.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateRadius(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRadius", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateRadius), arg0)
}

// UpdateRadiusRequest mocks base method.
func (m *MockDirectoryServiceAPI) UpdateRadiusRequest(arg0 *directoryservice.UpdateRadiusInput) (*request.Request, *directoryservice.UpdateRadiusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRadiusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.UpdateRadiusOutput)
	return ret0, ret1
}

// UpdateRadiusRequest indicates an expected call of UpdateRadiusRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateRadiusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRadiusRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateRadiusRequest), arg0)
}

// UpdateRadiusWithContext mocks base method.
func (m *MockDirectoryServiceAPI) UpdateRadiusWithContext(arg0 context.Context, arg1 *directoryservice.UpdateRadiusInput, arg2 ...request.Option) (*directoryservice.UpdateRadiusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRadiusWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.UpdateRadiusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRadiusWithContext indicates an expected call of UpdateRadiusWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateRadiusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRadiusWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateRadiusWithContext), varargs...)
}

// UpdateTrust mocks base method.
func (m *MockDirectoryServiceAPI) UpdateTrust(arg0 *directoryservice.UpdateTrustInput) (*directoryservice.UpdateTrustOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrust", arg0)
	ret0, _ := ret[0].(*directoryservice.UpdateTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrust indicates an expected call of UpdateTrust.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateTrust(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrust", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateTrust), arg0)
}

// UpdateTrustRequest mocks base method.
func (m *MockDirectoryServiceAPI) UpdateTrustRequest(arg0 *directoryservice.UpdateTrustInput) (*request.Request, *directoryservice.UpdateTrustOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrustRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.UpdateTrustOutput)
	return ret0, ret1
}

// UpdateTrustRequest indicates an expected call of UpdateTrustRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateTrustRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateTrustRequest), arg0)
}

// UpdateTrustWithContext mocks base method.
func (m *MockDirectoryServiceAPI) UpdateTrustWithContext(arg0 context.Context, arg1 *directoryservice.UpdateTrustInput, arg2 ...request.Option) (*directoryservice.UpdateTrustOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrustWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.UpdateTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrustWithContext indicates an expected call of UpdateTrustWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) UpdateTrustWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).UpdateTrustWithContext), varargs...)
}

// VerifyTrust mocks base method.
func (m *MockDirectoryServiceAPI) VerifyTrust(arg0 *directoryservice.VerifyTrustInput) (*directoryservice.VerifyTrustOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTrust", arg0)
	ret0, _ := ret[0].(*directoryservice.VerifyTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyTrust indicates an expected call of VerifyTrust.
func (mr *MockDirectoryServiceAPIMockRecorder) VerifyTrust(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTrust", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).VerifyTrust), arg0)
}

// VerifyTrustRequest mocks base method.
func (m *MockDirectoryServiceAPI) VerifyTrustRequest(arg0 *directoryservice.VerifyTrustInput) (*request.Request, *directoryservice.VerifyTrustOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTrustRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*directoryservice.VerifyTrustOutput)
	return ret0, ret1
}

// VerifyTrustRequest indicates an expected call of VerifyTrustRequest.
func (mr *MockDirectoryServiceAPIMockRecorder) VerifyTrustRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTrustRequest", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).VerifyTrustRequest), arg0)
}

// VerifyTrustWithContext mocks base method.
func (m *MockDirectoryServiceAPI) VerifyTrustWithContext(arg0 context.Context, arg1 *directoryservice.VerifyTrustInput, arg2 ...request.Option) (*directoryservice.VerifyTrustOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyTrustWithContext", varargs...)
	ret0, _ := ret[0].(*directoryservice.VerifyTrustOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyTrustWithContext indicates an expected call of VerifyTrustWithContext.
func (mr *MockDirectoryServiceAPIMockRecorder) VerifyTrustWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTrustWithContext", reflect.TypeOf((*MockDirectoryServiceAPI)(nil).VerifyTrustWithContext), varargs...)
}

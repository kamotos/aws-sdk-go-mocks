// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/qldb/qldbiface (interfaces: QLDBAPI)

// Package qldbmock is a generated GoMock package.
package qldbmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	qldb "github.com/aws/aws-sdk-go/service/qldb"
	gomock "github.com/golang/mock/gomock"
)

// MockQLDBAPI is a mock of QLDBAPI interface.
type MockQLDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockQLDBAPIMockRecorder
}

// MockQLDBAPIMockRecorder is the mock recorder for MockQLDBAPI.
type MockQLDBAPIMockRecorder struct {
	mock *MockQLDBAPI
}

// NewMockQLDBAPI creates a new mock instance.
func NewMockQLDBAPI(ctrl *gomock.Controller) *MockQLDBAPI {
	mock := &MockQLDBAPI{ctrl: ctrl}
	mock.recorder = &MockQLDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQLDBAPI) EXPECT() *MockQLDBAPIMockRecorder {
	return m.recorder
}

// CancelJournalKinesisStream mocks base method.
func (m *MockQLDBAPI) CancelJournalKinesisStream(arg0 *qldb.CancelJournalKinesisStreamInput) (*qldb.CancelJournalKinesisStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJournalKinesisStream", arg0)
	ret0, _ := ret[0].(*qldb.CancelJournalKinesisStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJournalKinesisStream indicates an expected call of CancelJournalKinesisStream.
func (mr *MockQLDBAPIMockRecorder) CancelJournalKinesisStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJournalKinesisStream", reflect.TypeOf((*MockQLDBAPI)(nil).CancelJournalKinesisStream), arg0)
}

// CancelJournalKinesisStreamRequest mocks base method.
func (m *MockQLDBAPI) CancelJournalKinesisStreamRequest(arg0 *qldb.CancelJournalKinesisStreamInput) (*request.Request, *qldb.CancelJournalKinesisStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJournalKinesisStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.CancelJournalKinesisStreamOutput)
	return ret0, ret1
}

// CancelJournalKinesisStreamRequest indicates an expected call of CancelJournalKinesisStreamRequest.
func (mr *MockQLDBAPIMockRecorder) CancelJournalKinesisStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJournalKinesisStreamRequest", reflect.TypeOf((*MockQLDBAPI)(nil).CancelJournalKinesisStreamRequest), arg0)
}

// CancelJournalKinesisStreamWithContext mocks base method.
func (m *MockQLDBAPI) CancelJournalKinesisStreamWithContext(arg0 context.Context, arg1 *qldb.CancelJournalKinesisStreamInput, arg2 ...request.Option) (*qldb.CancelJournalKinesisStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJournalKinesisStreamWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.CancelJournalKinesisStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJournalKinesisStreamWithContext indicates an expected call of CancelJournalKinesisStreamWithContext.
func (mr *MockQLDBAPIMockRecorder) CancelJournalKinesisStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJournalKinesisStreamWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).CancelJournalKinesisStreamWithContext), varargs...)
}

// CreateLedger mocks base method.
func (m *MockQLDBAPI) CreateLedger(arg0 *qldb.CreateLedgerInput) (*qldb.CreateLedgerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedger", arg0)
	ret0, _ := ret[0].(*qldb.CreateLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedger indicates an expected call of CreateLedger.
func (mr *MockQLDBAPIMockRecorder) CreateLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedger", reflect.TypeOf((*MockQLDBAPI)(nil).CreateLedger), arg0)
}

// CreateLedgerRequest mocks base method.
func (m *MockQLDBAPI) CreateLedgerRequest(arg0 *qldb.CreateLedgerInput) (*request.Request, *qldb.CreateLedgerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLedgerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.CreateLedgerOutput)
	return ret0, ret1
}

// CreateLedgerRequest indicates an expected call of CreateLedgerRequest.
func (mr *MockQLDBAPIMockRecorder) CreateLedgerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedgerRequest", reflect.TypeOf((*MockQLDBAPI)(nil).CreateLedgerRequest), arg0)
}

// CreateLedgerWithContext mocks base method.
func (m *MockQLDBAPI) CreateLedgerWithContext(arg0 context.Context, arg1 *qldb.CreateLedgerInput, arg2 ...request.Option) (*qldb.CreateLedgerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLedgerWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.CreateLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLedgerWithContext indicates an expected call of CreateLedgerWithContext.
func (mr *MockQLDBAPIMockRecorder) CreateLedgerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLedgerWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).CreateLedgerWithContext), varargs...)
}

// DeleteLedger mocks base method.
func (m *MockQLDBAPI) DeleteLedger(arg0 *qldb.DeleteLedgerInput) (*qldb.DeleteLedgerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLedger", arg0)
	ret0, _ := ret[0].(*qldb.DeleteLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLedger indicates an expected call of DeleteLedger.
func (mr *MockQLDBAPIMockRecorder) DeleteLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLedger", reflect.TypeOf((*MockQLDBAPI)(nil).DeleteLedger), arg0)
}

// DeleteLedgerRequest mocks base method.
func (m *MockQLDBAPI) DeleteLedgerRequest(arg0 *qldb.DeleteLedgerInput) (*request.Request, *qldb.DeleteLedgerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLedgerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.DeleteLedgerOutput)
	return ret0, ret1
}

// DeleteLedgerRequest indicates an expected call of DeleteLedgerRequest.
func (mr *MockQLDBAPIMockRecorder) DeleteLedgerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLedgerRequest", reflect.TypeOf((*MockQLDBAPI)(nil).DeleteLedgerRequest), arg0)
}

// DeleteLedgerWithContext mocks base method.
func (m *MockQLDBAPI) DeleteLedgerWithContext(arg0 context.Context, arg1 *qldb.DeleteLedgerInput, arg2 ...request.Option) (*qldb.DeleteLedgerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLedgerWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.DeleteLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLedgerWithContext indicates an expected call of DeleteLedgerWithContext.
func (mr *MockQLDBAPIMockRecorder) DeleteLedgerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLedgerWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).DeleteLedgerWithContext), varargs...)
}

// DescribeJournalKinesisStream mocks base method.
func (m *MockQLDBAPI) DescribeJournalKinesisStream(arg0 *qldb.DescribeJournalKinesisStreamInput) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJournalKinesisStream", arg0)
	ret0, _ := ret[0].(*qldb.DescribeJournalKinesisStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJournalKinesisStream indicates an expected call of DescribeJournalKinesisStream.
func (mr *MockQLDBAPIMockRecorder) DescribeJournalKinesisStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalKinesisStream", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeJournalKinesisStream), arg0)
}

// DescribeJournalKinesisStreamRequest mocks base method.
func (m *MockQLDBAPI) DescribeJournalKinesisStreamRequest(arg0 *qldb.DescribeJournalKinesisStreamInput) (*request.Request, *qldb.DescribeJournalKinesisStreamOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJournalKinesisStreamRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.DescribeJournalKinesisStreamOutput)
	return ret0, ret1
}

// DescribeJournalKinesisStreamRequest indicates an expected call of DescribeJournalKinesisStreamRequest.
func (mr *MockQLDBAPIMockRecorder) DescribeJournalKinesisStreamRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalKinesisStreamRequest", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeJournalKinesisStreamRequest), arg0)
}

// DescribeJournalKinesisStreamWithContext mocks base method.
func (m *MockQLDBAPI) DescribeJournalKinesisStreamWithContext(arg0 context.Context, arg1 *qldb.DescribeJournalKinesisStreamInput, arg2 ...request.Option) (*qldb.DescribeJournalKinesisStreamOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJournalKinesisStreamWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.DescribeJournalKinesisStreamOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJournalKinesisStreamWithContext indicates an expected call of DescribeJournalKinesisStreamWithContext.
func (mr *MockQLDBAPIMockRecorder) DescribeJournalKinesisStreamWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalKinesisStreamWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeJournalKinesisStreamWithContext), varargs...)
}

// DescribeJournalS3Export mocks base method.
func (m *MockQLDBAPI) DescribeJournalS3Export(arg0 *qldb.DescribeJournalS3ExportInput) (*qldb.DescribeJournalS3ExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJournalS3Export", arg0)
	ret0, _ := ret[0].(*qldb.DescribeJournalS3ExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJournalS3Export indicates an expected call of DescribeJournalS3Export.
func (mr *MockQLDBAPIMockRecorder) DescribeJournalS3Export(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalS3Export", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeJournalS3Export), arg0)
}

// DescribeJournalS3ExportRequest mocks base method.
func (m *MockQLDBAPI) DescribeJournalS3ExportRequest(arg0 *qldb.DescribeJournalS3ExportInput) (*request.Request, *qldb.DescribeJournalS3ExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJournalS3ExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.DescribeJournalS3ExportOutput)
	return ret0, ret1
}

// DescribeJournalS3ExportRequest indicates an expected call of DescribeJournalS3ExportRequest.
func (mr *MockQLDBAPIMockRecorder) DescribeJournalS3ExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalS3ExportRequest", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeJournalS3ExportRequest), arg0)
}

// DescribeJournalS3ExportWithContext mocks base method.
func (m *MockQLDBAPI) DescribeJournalS3ExportWithContext(arg0 context.Context, arg1 *qldb.DescribeJournalS3ExportInput, arg2 ...request.Option) (*qldb.DescribeJournalS3ExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJournalS3ExportWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.DescribeJournalS3ExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJournalS3ExportWithContext indicates an expected call of DescribeJournalS3ExportWithContext.
func (mr *MockQLDBAPIMockRecorder) DescribeJournalS3ExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJournalS3ExportWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeJournalS3ExportWithContext), varargs...)
}

// DescribeLedger mocks base method.
func (m *MockQLDBAPI) DescribeLedger(arg0 *qldb.DescribeLedgerInput) (*qldb.DescribeLedgerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLedger", arg0)
	ret0, _ := ret[0].(*qldb.DescribeLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLedger indicates an expected call of DescribeLedger.
func (mr *MockQLDBAPIMockRecorder) DescribeLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLedger", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeLedger), arg0)
}

// DescribeLedgerRequest mocks base method.
func (m *MockQLDBAPI) DescribeLedgerRequest(arg0 *qldb.DescribeLedgerInput) (*request.Request, *qldb.DescribeLedgerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLedgerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.DescribeLedgerOutput)
	return ret0, ret1
}

// DescribeLedgerRequest indicates an expected call of DescribeLedgerRequest.
func (mr *MockQLDBAPIMockRecorder) DescribeLedgerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLedgerRequest", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeLedgerRequest), arg0)
}

// DescribeLedgerWithContext mocks base method.
func (m *MockQLDBAPI) DescribeLedgerWithContext(arg0 context.Context, arg1 *qldb.DescribeLedgerInput, arg2 ...request.Option) (*qldb.DescribeLedgerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLedgerWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.DescribeLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLedgerWithContext indicates an expected call of DescribeLedgerWithContext.
func (mr *MockQLDBAPIMockRecorder) DescribeLedgerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLedgerWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).DescribeLedgerWithContext), varargs...)
}

// ExportJournalToS3 mocks base method.
func (m *MockQLDBAPI) ExportJournalToS3(arg0 *qldb.ExportJournalToS3Input) (*qldb.ExportJournalToS3Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportJournalToS3", arg0)
	ret0, _ := ret[0].(*qldb.ExportJournalToS3Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportJournalToS3 indicates an expected call of ExportJournalToS3.
func (mr *MockQLDBAPIMockRecorder) ExportJournalToS3(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportJournalToS3", reflect.TypeOf((*MockQLDBAPI)(nil).ExportJournalToS3), arg0)
}

// ExportJournalToS3Request mocks base method.
func (m *MockQLDBAPI) ExportJournalToS3Request(arg0 *qldb.ExportJournalToS3Input) (*request.Request, *qldb.ExportJournalToS3Output) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportJournalToS3Request", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.ExportJournalToS3Output)
	return ret0, ret1
}

// ExportJournalToS3Request indicates an expected call of ExportJournalToS3Request.
func (mr *MockQLDBAPIMockRecorder) ExportJournalToS3Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportJournalToS3Request", reflect.TypeOf((*MockQLDBAPI)(nil).ExportJournalToS3Request), arg0)
}

// ExportJournalToS3WithContext mocks base method.
func (m *MockQLDBAPI) ExportJournalToS3WithContext(arg0 context.Context, arg1 *qldb.ExportJournalToS3Input, arg2 ...request.Option) (*qldb.ExportJournalToS3Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportJournalToS3WithContext", varargs...)
	ret0, _ := ret[0].(*qldb.ExportJournalToS3Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportJournalToS3WithContext indicates an expected call of ExportJournalToS3WithContext.
func (mr *MockQLDBAPIMockRecorder) ExportJournalToS3WithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportJournalToS3WithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ExportJournalToS3WithContext), varargs...)
}

// GetBlock mocks base method.
func (m *MockQLDBAPI) GetBlock(arg0 *qldb.GetBlockInput) (*qldb.GetBlockOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0)
	ret0, _ := ret[0].(*qldb.GetBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockQLDBAPIMockRecorder) GetBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockQLDBAPI)(nil).GetBlock), arg0)
}

// GetBlockRequest mocks base method.
func (m *MockQLDBAPI) GetBlockRequest(arg0 *qldb.GetBlockInput) (*request.Request, *qldb.GetBlockOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.GetBlockOutput)
	return ret0, ret1
}

// GetBlockRequest indicates an expected call of GetBlockRequest.
func (mr *MockQLDBAPIMockRecorder) GetBlockRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockRequest", reflect.TypeOf((*MockQLDBAPI)(nil).GetBlockRequest), arg0)
}

// GetBlockWithContext mocks base method.
func (m *MockQLDBAPI) GetBlockWithContext(arg0 context.Context, arg1 *qldb.GetBlockInput, arg2 ...request.Option) (*qldb.GetBlockOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.GetBlockOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockWithContext indicates an expected call of GetBlockWithContext.
func (mr *MockQLDBAPIMockRecorder) GetBlockWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).GetBlockWithContext), varargs...)
}

// GetDigest mocks base method.
func (m *MockQLDBAPI) GetDigest(arg0 *qldb.GetDigestInput) (*qldb.GetDigestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigest", arg0)
	ret0, _ := ret[0].(*qldb.GetDigestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigest indicates an expected call of GetDigest.
func (mr *MockQLDBAPIMockRecorder) GetDigest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigest", reflect.TypeOf((*MockQLDBAPI)(nil).GetDigest), arg0)
}

// GetDigestRequest mocks base method.
func (m *MockQLDBAPI) GetDigestRequest(arg0 *qldb.GetDigestInput) (*request.Request, *qldb.GetDigestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.GetDigestOutput)
	return ret0, ret1
}

// GetDigestRequest indicates an expected call of GetDigestRequest.
func (mr *MockQLDBAPIMockRecorder) GetDigestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigestRequest", reflect.TypeOf((*MockQLDBAPI)(nil).GetDigestRequest), arg0)
}

// GetDigestWithContext mocks base method.
func (m *MockQLDBAPI) GetDigestWithContext(arg0 context.Context, arg1 *qldb.GetDigestInput, arg2 ...request.Option) (*qldb.GetDigestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDigestWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.GetDigestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigestWithContext indicates an expected call of GetDigestWithContext.
func (mr *MockQLDBAPIMockRecorder) GetDigestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigestWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).GetDigestWithContext), varargs...)
}

// GetRevision mocks base method.
func (m *MockQLDBAPI) GetRevision(arg0 *qldb.GetRevisionInput) (*qldb.GetRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", arg0)
	ret0, _ := ret[0].(*qldb.GetRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockQLDBAPIMockRecorder) GetRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockQLDBAPI)(nil).GetRevision), arg0)
}

// GetRevisionRequest mocks base method.
func (m *MockQLDBAPI) GetRevisionRequest(arg0 *qldb.GetRevisionInput) (*request.Request, *qldb.GetRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.GetRevisionOutput)
	return ret0, ret1
}

// GetRevisionRequest indicates an expected call of GetRevisionRequest.
func (mr *MockQLDBAPIMockRecorder) GetRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionRequest", reflect.TypeOf((*MockQLDBAPI)(nil).GetRevisionRequest), arg0)
}

// GetRevisionWithContext mocks base method.
func (m *MockQLDBAPI) GetRevisionWithContext(arg0 context.Context, arg1 *qldb.GetRevisionInput, arg2 ...request.Option) (*qldb.GetRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.GetRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisionWithContext indicates an expected call of GetRevisionWithContext.
func (mr *MockQLDBAPIMockRecorder) GetRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).GetRevisionWithContext), varargs...)
}

// ListJournalKinesisStreamsForLedger mocks base method.
func (m *MockQLDBAPI) ListJournalKinesisStreamsForLedger(arg0 *qldb.ListJournalKinesisStreamsForLedgerInput) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalKinesisStreamsForLedger", arg0)
	ret0, _ := ret[0].(*qldb.ListJournalKinesisStreamsForLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalKinesisStreamsForLedger indicates an expected call of ListJournalKinesisStreamsForLedger.
func (mr *MockQLDBAPIMockRecorder) ListJournalKinesisStreamsForLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalKinesisStreamsForLedger", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalKinesisStreamsForLedger), arg0)
}

// ListJournalKinesisStreamsForLedgerPages mocks base method.
func (m *MockQLDBAPI) ListJournalKinesisStreamsForLedgerPages(arg0 *qldb.ListJournalKinesisStreamsForLedgerInput, arg1 func(*qldb.ListJournalKinesisStreamsForLedgerOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalKinesisStreamsForLedgerPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJournalKinesisStreamsForLedgerPages indicates an expected call of ListJournalKinesisStreamsForLedgerPages.
func (mr *MockQLDBAPIMockRecorder) ListJournalKinesisStreamsForLedgerPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalKinesisStreamsForLedgerPages", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalKinesisStreamsForLedgerPages), arg0, arg1)
}

// ListJournalKinesisStreamsForLedgerPagesWithContext mocks base method.
func (m *MockQLDBAPI) ListJournalKinesisStreamsForLedgerPagesWithContext(arg0 context.Context, arg1 *qldb.ListJournalKinesisStreamsForLedgerInput, arg2 func(*qldb.ListJournalKinesisStreamsForLedgerOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalKinesisStreamsForLedgerPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJournalKinesisStreamsForLedgerPagesWithContext indicates an expected call of ListJournalKinesisStreamsForLedgerPagesWithContext.
func (mr *MockQLDBAPIMockRecorder) ListJournalKinesisStreamsForLedgerPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalKinesisStreamsForLedgerPagesWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalKinesisStreamsForLedgerPagesWithContext), varargs...)
}

// ListJournalKinesisStreamsForLedgerRequest mocks base method.
func (m *MockQLDBAPI) ListJournalKinesisStreamsForLedgerRequest(arg0 *qldb.ListJournalKinesisStreamsForLedgerInput) (*request.Request, *qldb.ListJournalKinesisStreamsForLedgerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalKinesisStreamsForLedgerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.ListJournalKinesisStreamsForLedgerOutput)
	return ret0, ret1
}

// ListJournalKinesisStreamsForLedgerRequest indicates an expected call of ListJournalKinesisStreamsForLedgerRequest.
func (mr *MockQLDBAPIMockRecorder) ListJournalKinesisStreamsForLedgerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalKinesisStreamsForLedgerRequest", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalKinesisStreamsForLedgerRequest), arg0)
}

// ListJournalKinesisStreamsForLedgerWithContext mocks base method.
func (m *MockQLDBAPI) ListJournalKinesisStreamsForLedgerWithContext(arg0 context.Context, arg1 *qldb.ListJournalKinesisStreamsForLedgerInput, arg2 ...request.Option) (*qldb.ListJournalKinesisStreamsForLedgerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalKinesisStreamsForLedgerWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.ListJournalKinesisStreamsForLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalKinesisStreamsForLedgerWithContext indicates an expected call of ListJournalKinesisStreamsForLedgerWithContext.
func (mr *MockQLDBAPIMockRecorder) ListJournalKinesisStreamsForLedgerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalKinesisStreamsForLedgerWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalKinesisStreamsForLedgerWithContext), varargs...)
}

// ListJournalS3Exports mocks base method.
func (m *MockQLDBAPI) ListJournalS3Exports(arg0 *qldb.ListJournalS3ExportsInput) (*qldb.ListJournalS3ExportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalS3Exports", arg0)
	ret0, _ := ret[0].(*qldb.ListJournalS3ExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalS3Exports indicates an expected call of ListJournalS3Exports.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3Exports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3Exports", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3Exports), arg0)
}

// ListJournalS3ExportsForLedger mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsForLedger(arg0 *qldb.ListJournalS3ExportsForLedgerInput) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalS3ExportsForLedger", arg0)
	ret0, _ := ret[0].(*qldb.ListJournalS3ExportsForLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalS3ExportsForLedger indicates an expected call of ListJournalS3ExportsForLedger.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsForLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsForLedger", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsForLedger), arg0)
}

// ListJournalS3ExportsForLedgerPages mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsForLedgerPages(arg0 *qldb.ListJournalS3ExportsForLedgerInput, arg1 func(*qldb.ListJournalS3ExportsForLedgerOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalS3ExportsForLedgerPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJournalS3ExportsForLedgerPages indicates an expected call of ListJournalS3ExportsForLedgerPages.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsForLedgerPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsForLedgerPages", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsForLedgerPages), arg0, arg1)
}

// ListJournalS3ExportsForLedgerPagesWithContext mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsForLedgerPagesWithContext(arg0 context.Context, arg1 *qldb.ListJournalS3ExportsForLedgerInput, arg2 func(*qldb.ListJournalS3ExportsForLedgerOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalS3ExportsForLedgerPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJournalS3ExportsForLedgerPagesWithContext indicates an expected call of ListJournalS3ExportsForLedgerPagesWithContext.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsForLedgerPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsForLedgerPagesWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsForLedgerPagesWithContext), varargs...)
}

// ListJournalS3ExportsForLedgerRequest mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsForLedgerRequest(arg0 *qldb.ListJournalS3ExportsForLedgerInput) (*request.Request, *qldb.ListJournalS3ExportsForLedgerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalS3ExportsForLedgerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.ListJournalS3ExportsForLedgerOutput)
	return ret0, ret1
}

// ListJournalS3ExportsForLedgerRequest indicates an expected call of ListJournalS3ExportsForLedgerRequest.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsForLedgerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsForLedgerRequest", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsForLedgerRequest), arg0)
}

// ListJournalS3ExportsForLedgerWithContext mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsForLedgerWithContext(arg0 context.Context, arg1 *qldb.ListJournalS3ExportsForLedgerInput, arg2 ...request.Option) (*qldb.ListJournalS3ExportsForLedgerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalS3ExportsForLedgerWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.ListJournalS3ExportsForLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalS3ExportsForLedgerWithContext indicates an expected call of ListJournalS3ExportsForLedgerWithContext.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsForLedgerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsForLedgerWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsForLedgerWithContext), varargs...)
}

// ListJournalS3ExportsPages mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsPages(arg0 *qldb.ListJournalS3ExportsInput, arg1 func(*qldb.ListJournalS3ExportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalS3ExportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJournalS3ExportsPages indicates an expected call of ListJournalS3ExportsPages.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsPages", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsPages), arg0, arg1)
}

// ListJournalS3ExportsPagesWithContext mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsPagesWithContext(arg0 context.Context, arg1 *qldb.ListJournalS3ExportsInput, arg2 func(*qldb.ListJournalS3ExportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalS3ExportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJournalS3ExportsPagesWithContext indicates an expected call of ListJournalS3ExportsPagesWithContext.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsPagesWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsPagesWithContext), varargs...)
}

// ListJournalS3ExportsRequest mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsRequest(arg0 *qldb.ListJournalS3ExportsInput) (*request.Request, *qldb.ListJournalS3ExportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalS3ExportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.ListJournalS3ExportsOutput)
	return ret0, ret1
}

// ListJournalS3ExportsRequest indicates an expected call of ListJournalS3ExportsRequest.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsRequest", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsRequest), arg0)
}

// ListJournalS3ExportsWithContext mocks base method.
func (m *MockQLDBAPI) ListJournalS3ExportsWithContext(arg0 context.Context, arg1 *qldb.ListJournalS3ExportsInput, arg2 ...request.Option) (*qldb.ListJournalS3ExportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJournalS3ExportsWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.ListJournalS3ExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalS3ExportsWithContext indicates an expected call of ListJournalS3ExportsWithContext.
func (mr *MockQLDBAPIMockRecorder) ListJournalS3ExportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalS3ExportsWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListJournalS3ExportsWithContext), varargs...)
}

// ListLedgers mocks base method.
func (m *MockQLDBAPI) ListLedgers(arg0 *qldb.ListLedgersInput) (*qldb.ListLedgersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLedgers", arg0)
	ret0, _ := ret[0].(*qldb.ListLedgersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLedgers indicates an expected call of ListLedgers.
func (mr *MockQLDBAPIMockRecorder) ListLedgers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgers", reflect.TypeOf((*MockQLDBAPI)(nil).ListLedgers), arg0)
}

// ListLedgersPages mocks base method.
func (m *MockQLDBAPI) ListLedgersPages(arg0 *qldb.ListLedgersInput, arg1 func(*qldb.ListLedgersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLedgersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLedgersPages indicates an expected call of ListLedgersPages.
func (mr *MockQLDBAPIMockRecorder) ListLedgersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgersPages", reflect.TypeOf((*MockQLDBAPI)(nil).ListLedgersPages), arg0, arg1)
}

// ListLedgersPagesWithContext mocks base method.
func (m *MockQLDBAPI) ListLedgersPagesWithContext(arg0 context.Context, arg1 *qldb.ListLedgersInput, arg2 func(*qldb.ListLedgersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLedgersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLedgersPagesWithContext indicates an expected call of ListLedgersPagesWithContext.
func (mr *MockQLDBAPIMockRecorder) ListLedgersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgersPagesWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListLedgersPagesWithContext), varargs...)
}

// ListLedgersRequest mocks base method.
func (m *MockQLDBAPI) ListLedgersRequest(arg0 *qldb.ListLedgersInput) (*request.Request, *qldb.ListLedgersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLedgersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.ListLedgersOutput)
	return ret0, ret1
}

// ListLedgersRequest indicates an expected call of ListLedgersRequest.
func (mr *MockQLDBAPIMockRecorder) ListLedgersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgersRequest", reflect.TypeOf((*MockQLDBAPI)(nil).ListLedgersRequest), arg0)
}

// ListLedgersWithContext mocks base method.
func (m *MockQLDBAPI) ListLedgersWithContext(arg0 context.Context, arg1 *qldb.ListLedgersInput, arg2 ...request.Option) (*qldb.ListLedgersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLedgersWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.ListLedgersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLedgersWithContext indicates an expected call of ListLedgersWithContext.
func (mr *MockQLDBAPIMockRecorder) ListLedgersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgersWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListLedgersWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockQLDBAPI) ListTagsForResource(arg0 *qldb.ListTagsForResourceInput) (*qldb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*qldb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockQLDBAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockQLDBAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockQLDBAPI) ListTagsForResourceRequest(arg0 *qldb.ListTagsForResourceInput) (*request.Request, *qldb.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockQLDBAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockQLDBAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockQLDBAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *qldb.ListTagsForResourceInput, arg2 ...request.Option) (*qldb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockQLDBAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StreamJournalToKinesis mocks base method.
func (m *MockQLDBAPI) StreamJournalToKinesis(arg0 *qldb.StreamJournalToKinesisInput) (*qldb.StreamJournalToKinesisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamJournalToKinesis", arg0)
	ret0, _ := ret[0].(*qldb.StreamJournalToKinesisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamJournalToKinesis indicates an expected call of StreamJournalToKinesis.
func (mr *MockQLDBAPIMockRecorder) StreamJournalToKinesis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamJournalToKinesis", reflect.TypeOf((*MockQLDBAPI)(nil).StreamJournalToKinesis), arg0)
}

// StreamJournalToKinesisRequest mocks base method.
func (m *MockQLDBAPI) StreamJournalToKinesisRequest(arg0 *qldb.StreamJournalToKinesisInput) (*request.Request, *qldb.StreamJournalToKinesisOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamJournalToKinesisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.StreamJournalToKinesisOutput)
	return ret0, ret1
}

// StreamJournalToKinesisRequest indicates an expected call of StreamJournalToKinesisRequest.
func (mr *MockQLDBAPIMockRecorder) StreamJournalToKinesisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamJournalToKinesisRequest", reflect.TypeOf((*MockQLDBAPI)(nil).StreamJournalToKinesisRequest), arg0)
}

// StreamJournalToKinesisWithContext mocks base method.
func (m *MockQLDBAPI) StreamJournalToKinesisWithContext(arg0 context.Context, arg1 *qldb.StreamJournalToKinesisInput, arg2 ...request.Option) (*qldb.StreamJournalToKinesisOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamJournalToKinesisWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.StreamJournalToKinesisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamJournalToKinesisWithContext indicates an expected call of StreamJournalToKinesisWithContext.
func (mr *MockQLDBAPIMockRecorder) StreamJournalToKinesisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamJournalToKinesisWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).StreamJournalToKinesisWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockQLDBAPI) TagResource(arg0 *qldb.TagResourceInput) (*qldb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*qldb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockQLDBAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockQLDBAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockQLDBAPI) TagResourceRequest(arg0 *qldb.TagResourceInput) (*request.Request, *qldb.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockQLDBAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockQLDBAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockQLDBAPI) TagResourceWithContext(arg0 context.Context, arg1 *qldb.TagResourceInput, arg2 ...request.Option) (*qldb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockQLDBAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockQLDBAPI) UntagResource(arg0 *qldb.UntagResourceInput) (*qldb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*qldb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockQLDBAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockQLDBAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockQLDBAPI) UntagResourceRequest(arg0 *qldb.UntagResourceInput) (*request.Request, *qldb.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockQLDBAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockQLDBAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockQLDBAPI) UntagResourceWithContext(arg0 context.Context, arg1 *qldb.UntagResourceInput, arg2 ...request.Option) (*qldb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockQLDBAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateLedger mocks base method.
func (m *MockQLDBAPI) UpdateLedger(arg0 *qldb.UpdateLedgerInput) (*qldb.UpdateLedgerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedger", arg0)
	ret0, _ := ret[0].(*qldb.UpdateLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedger indicates an expected call of UpdateLedger.
func (mr *MockQLDBAPIMockRecorder) UpdateLedger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedger", reflect.TypeOf((*MockQLDBAPI)(nil).UpdateLedger), arg0)
}

// UpdateLedgerPermissionsMode mocks base method.
func (m *MockQLDBAPI) UpdateLedgerPermissionsMode(arg0 *qldb.UpdateLedgerPermissionsModeInput) (*qldb.UpdateLedgerPermissionsModeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedgerPermissionsMode", arg0)
	ret0, _ := ret[0].(*qldb.UpdateLedgerPermissionsModeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedgerPermissionsMode indicates an expected call of UpdateLedgerPermissionsMode.
func (mr *MockQLDBAPIMockRecorder) UpdateLedgerPermissionsMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedgerPermissionsMode", reflect.TypeOf((*MockQLDBAPI)(nil).UpdateLedgerPermissionsMode), arg0)
}

// UpdateLedgerPermissionsModeRequest mocks base method.
func (m *MockQLDBAPI) UpdateLedgerPermissionsModeRequest(arg0 *qldb.UpdateLedgerPermissionsModeInput) (*request.Request, *qldb.UpdateLedgerPermissionsModeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedgerPermissionsModeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.UpdateLedgerPermissionsModeOutput)
	return ret0, ret1
}

// UpdateLedgerPermissionsModeRequest indicates an expected call of UpdateLedgerPermissionsModeRequest.
func (mr *MockQLDBAPIMockRecorder) UpdateLedgerPermissionsModeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedgerPermissionsModeRequest", reflect.TypeOf((*MockQLDBAPI)(nil).UpdateLedgerPermissionsModeRequest), arg0)
}

// UpdateLedgerPermissionsModeWithContext mocks base method.
func (m *MockQLDBAPI) UpdateLedgerPermissionsModeWithContext(arg0 context.Context, arg1 *qldb.UpdateLedgerPermissionsModeInput, arg2 ...request.Option) (*qldb.UpdateLedgerPermissionsModeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLedgerPermissionsModeWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.UpdateLedgerPermissionsModeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedgerPermissionsModeWithContext indicates an expected call of UpdateLedgerPermissionsModeWithContext.
func (mr *MockQLDBAPIMockRecorder) UpdateLedgerPermissionsModeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedgerPermissionsModeWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).UpdateLedgerPermissionsModeWithContext), varargs...)
}

// UpdateLedgerRequest mocks base method.
func (m *MockQLDBAPI) UpdateLedgerRequest(arg0 *qldb.UpdateLedgerInput) (*request.Request, *qldb.UpdateLedgerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLedgerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*qldb.UpdateLedgerOutput)
	return ret0, ret1
}

// UpdateLedgerRequest indicates an expected call of UpdateLedgerRequest.
func (mr *MockQLDBAPIMockRecorder) UpdateLedgerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedgerRequest", reflect.TypeOf((*MockQLDBAPI)(nil).UpdateLedgerRequest), arg0)
}

// UpdateLedgerWithContext mocks base method.
func (m *MockQLDBAPI) UpdateLedgerWithContext(arg0 context.Context, arg1 *qldb.UpdateLedgerInput, arg2 ...request.Option) (*qldb.UpdateLedgerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLedgerWithContext", varargs...)
	ret0, _ := ret[0].(*qldb.UpdateLedgerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLedgerWithContext indicates an expected call of UpdateLedgerWithContext.
func (mr *MockQLDBAPIMockRecorder) UpdateLedgerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLedgerWithContext", reflect.TypeOf((*MockQLDBAPI)(nil).UpdateLedgerWithContext), varargs...)
}

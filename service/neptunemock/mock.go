// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/neptune/neptuneiface (interfaces: NeptuneAPI)

// Package neptunemock is a generated GoMock package.
package neptunemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	neptune "github.com/aws/aws-sdk-go/service/neptune"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNeptuneAPI is a mock of NeptuneAPI interface
type MockNeptuneAPI struct {
	ctrl     *gomock.Controller
	recorder *MockNeptuneAPIMockRecorder
}

// MockNeptuneAPIMockRecorder is the mock recorder for MockNeptuneAPI
type MockNeptuneAPIMockRecorder struct {
	mock *MockNeptuneAPI
}

// NewMockNeptuneAPI creates a new mock instance
func NewMockNeptuneAPI(ctrl *gomock.Controller) *MockNeptuneAPI {
	mock := &MockNeptuneAPI{ctrl: ctrl}
	mock.recorder = &MockNeptuneAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNeptuneAPI) EXPECT() *MockNeptuneAPIMockRecorder {
	return m.recorder
}

// AddRoleToDBCluster mocks base method
func (m *MockNeptuneAPI) AddRoleToDBCluster(arg0 *neptune.AddRoleToDBClusterInput) (*neptune.AddRoleToDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleToDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.AddRoleToDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleToDBCluster indicates an expected call of AddRoleToDBCluster
func (mr *MockNeptuneAPIMockRecorder) AddRoleToDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).AddRoleToDBCluster), arg0)
}

// AddRoleToDBClusterRequest mocks base method
func (m *MockNeptuneAPI) AddRoleToDBClusterRequest(arg0 *neptune.AddRoleToDBClusterInput) (*request.Request, *neptune.AddRoleToDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleToDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.AddRoleToDBClusterOutput)
	return ret0, ret1
}

// AddRoleToDBClusterRequest indicates an expected call of AddRoleToDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) AddRoleToDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).AddRoleToDBClusterRequest), arg0)
}

// AddRoleToDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) AddRoleToDBClusterWithContext(arg0 context.Context, arg1 *neptune.AddRoleToDBClusterInput, arg2 ...request.Option) (*neptune.AddRoleToDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRoleToDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.AddRoleToDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleToDBClusterWithContext indicates an expected call of AddRoleToDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) AddRoleToDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleToDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).AddRoleToDBClusterWithContext), varargs...)
}

// AddSourceIdentifierToSubscription mocks base method
func (m *MockNeptuneAPI) AddSourceIdentifierToSubscription(arg0 *neptune.AddSourceIdentifierToSubscriptionInput) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSourceIdentifierToSubscription", arg0)
	ret0, _ := ret[0].(*neptune.AddSourceIdentifierToSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSourceIdentifierToSubscription indicates an expected call of AddSourceIdentifierToSubscription
func (mr *MockNeptuneAPIMockRecorder) AddSourceIdentifierToSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSourceIdentifierToSubscription", reflect.TypeOf((*MockNeptuneAPI)(nil).AddSourceIdentifierToSubscription), arg0)
}

// AddSourceIdentifierToSubscriptionRequest mocks base method
func (m *MockNeptuneAPI) AddSourceIdentifierToSubscriptionRequest(arg0 *neptune.AddSourceIdentifierToSubscriptionInput) (*request.Request, *neptune.AddSourceIdentifierToSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSourceIdentifierToSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.AddSourceIdentifierToSubscriptionOutput)
	return ret0, ret1
}

// AddSourceIdentifierToSubscriptionRequest indicates an expected call of AddSourceIdentifierToSubscriptionRequest
func (mr *MockNeptuneAPIMockRecorder) AddSourceIdentifierToSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSourceIdentifierToSubscriptionRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).AddSourceIdentifierToSubscriptionRequest), arg0)
}

// AddSourceIdentifierToSubscriptionWithContext mocks base method
func (m *MockNeptuneAPI) AddSourceIdentifierToSubscriptionWithContext(arg0 context.Context, arg1 *neptune.AddSourceIdentifierToSubscriptionInput, arg2 ...request.Option) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSourceIdentifierToSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.AddSourceIdentifierToSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSourceIdentifierToSubscriptionWithContext indicates an expected call of AddSourceIdentifierToSubscriptionWithContext
func (mr *MockNeptuneAPIMockRecorder) AddSourceIdentifierToSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSourceIdentifierToSubscriptionWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).AddSourceIdentifierToSubscriptionWithContext), varargs...)
}

// AddTagsToResource mocks base method
func (m *MockNeptuneAPI) AddTagsToResource(arg0 *neptune.AddTagsToResourceInput) (*neptune.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResource", arg0)
	ret0, _ := ret[0].(*neptune.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResource indicates an expected call of AddTagsToResource
func (mr *MockNeptuneAPIMockRecorder) AddTagsToResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResource", reflect.TypeOf((*MockNeptuneAPI)(nil).AddTagsToResource), arg0)
}

// AddTagsToResourceRequest mocks base method
func (m *MockNeptuneAPI) AddTagsToResourceRequest(arg0 *neptune.AddTagsToResourceInput) (*request.Request, *neptune.AddTagsToResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.AddTagsToResourceOutput)
	return ret0, ret1
}

// AddTagsToResourceRequest indicates an expected call of AddTagsToResourceRequest
func (mr *MockNeptuneAPIMockRecorder) AddTagsToResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).AddTagsToResourceRequest), arg0)
}

// AddTagsToResourceWithContext mocks base method
func (m *MockNeptuneAPI) AddTagsToResourceWithContext(arg0 context.Context, arg1 *neptune.AddTagsToResourceInput, arg2 ...request.Option) (*neptune.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsToResourceWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResourceWithContext indicates an expected call of AddTagsToResourceWithContext
func (mr *MockNeptuneAPIMockRecorder) AddTagsToResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).AddTagsToResourceWithContext), varargs...)
}

// ApplyPendingMaintenanceAction mocks base method
func (m *MockNeptuneAPI) ApplyPendingMaintenanceAction(arg0 *neptune.ApplyPendingMaintenanceActionInput) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPendingMaintenanceAction", arg0)
	ret0, _ := ret[0].(*neptune.ApplyPendingMaintenanceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyPendingMaintenanceAction indicates an expected call of ApplyPendingMaintenanceAction
func (mr *MockNeptuneAPIMockRecorder) ApplyPendingMaintenanceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPendingMaintenanceAction", reflect.TypeOf((*MockNeptuneAPI)(nil).ApplyPendingMaintenanceAction), arg0)
}

// ApplyPendingMaintenanceActionRequest mocks base method
func (m *MockNeptuneAPI) ApplyPendingMaintenanceActionRequest(arg0 *neptune.ApplyPendingMaintenanceActionInput) (*request.Request, *neptune.ApplyPendingMaintenanceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPendingMaintenanceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ApplyPendingMaintenanceActionOutput)
	return ret0, ret1
}

// ApplyPendingMaintenanceActionRequest indicates an expected call of ApplyPendingMaintenanceActionRequest
func (mr *MockNeptuneAPIMockRecorder) ApplyPendingMaintenanceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPendingMaintenanceActionRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ApplyPendingMaintenanceActionRequest), arg0)
}

// ApplyPendingMaintenanceActionWithContext mocks base method
func (m *MockNeptuneAPI) ApplyPendingMaintenanceActionWithContext(arg0 context.Context, arg1 *neptune.ApplyPendingMaintenanceActionInput, arg2 ...request.Option) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyPendingMaintenanceActionWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ApplyPendingMaintenanceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyPendingMaintenanceActionWithContext indicates an expected call of ApplyPendingMaintenanceActionWithContext
func (mr *MockNeptuneAPIMockRecorder) ApplyPendingMaintenanceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPendingMaintenanceActionWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ApplyPendingMaintenanceActionWithContext), varargs...)
}

// CopyDBClusterParameterGroup mocks base method
func (m *MockNeptuneAPI) CopyDBClusterParameterGroup(arg0 *neptune.CopyDBClusterParameterGroupInput) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.CopyDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterParameterGroup indicates an expected call of CopyDBClusterParameterGroup
func (mr *MockNeptuneAPIMockRecorder) CopyDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBClusterParameterGroup), arg0)
}

// CopyDBClusterParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) CopyDBClusterParameterGroupRequest(arg0 *neptune.CopyDBClusterParameterGroupInput) (*request.Request, *neptune.CopyDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CopyDBClusterParameterGroupOutput)
	return ret0, ret1
}

// CopyDBClusterParameterGroupRequest indicates an expected call of CopyDBClusterParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) CopyDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBClusterParameterGroupRequest), arg0)
}

// CopyDBClusterParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) CopyDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *neptune.CopyDBClusterParameterGroupInput, arg2 ...request.Option) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CopyDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterParameterGroupWithContext indicates an expected call of CopyDBClusterParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) CopyDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBClusterParameterGroupWithContext), varargs...)
}

// CopyDBClusterSnapshot mocks base method
func (m *MockNeptuneAPI) CopyDBClusterSnapshot(arg0 *neptune.CopyDBClusterSnapshotInput) (*neptune.CopyDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterSnapshot", arg0)
	ret0, _ := ret[0].(*neptune.CopyDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterSnapshot indicates an expected call of CopyDBClusterSnapshot
func (mr *MockNeptuneAPIMockRecorder) CopyDBClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterSnapshot", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBClusterSnapshot), arg0)
}

// CopyDBClusterSnapshotRequest mocks base method
func (m *MockNeptuneAPI) CopyDBClusterSnapshotRequest(arg0 *neptune.CopyDBClusterSnapshotInput) (*request.Request, *neptune.CopyDBClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CopyDBClusterSnapshotOutput)
	return ret0, ret1
}

// CopyDBClusterSnapshotRequest indicates an expected call of CopyDBClusterSnapshotRequest
func (mr *MockNeptuneAPIMockRecorder) CopyDBClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterSnapshotRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBClusterSnapshotRequest), arg0)
}

// CopyDBClusterSnapshotWithContext mocks base method
func (m *MockNeptuneAPI) CopyDBClusterSnapshotWithContext(arg0 context.Context, arg1 *neptune.CopyDBClusterSnapshotInput, arg2 ...request.Option) (*neptune.CopyDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyDBClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CopyDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterSnapshotWithContext indicates an expected call of CopyDBClusterSnapshotWithContext
func (mr *MockNeptuneAPIMockRecorder) CopyDBClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterSnapshotWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBClusterSnapshotWithContext), varargs...)
}

// CopyDBParameterGroup mocks base method
func (m *MockNeptuneAPI) CopyDBParameterGroup(arg0 *neptune.CopyDBParameterGroupInput) (*neptune.CopyDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.CopyDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBParameterGroup indicates an expected call of CopyDBParameterGroup
func (mr *MockNeptuneAPIMockRecorder) CopyDBParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBParameterGroup), arg0)
}

// CopyDBParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) CopyDBParameterGroupRequest(arg0 *neptune.CopyDBParameterGroupInput) (*request.Request, *neptune.CopyDBParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CopyDBParameterGroupOutput)
	return ret0, ret1
}

// CopyDBParameterGroupRequest indicates an expected call of CopyDBParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) CopyDBParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBParameterGroupRequest), arg0)
}

// CopyDBParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) CopyDBParameterGroupWithContext(arg0 context.Context, arg1 *neptune.CopyDBParameterGroupInput, arg2 ...request.Option) (*neptune.CopyDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyDBParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CopyDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBParameterGroupWithContext indicates an expected call of CopyDBParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) CopyDBParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CopyDBParameterGroupWithContext), varargs...)
}

// CreateDBCluster mocks base method
func (m *MockNeptuneAPI) CreateDBCluster(arg0 *neptune.CreateDBClusterInput) (*neptune.CreateDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.CreateDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBCluster indicates an expected call of CreateDBCluster
func (mr *MockNeptuneAPIMockRecorder) CreateDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBCluster), arg0)
}

// CreateDBClusterEndpoint mocks base method
func (m *MockNeptuneAPI) CreateDBClusterEndpoint(arg0 *neptune.CreateDBClusterEndpointInput) (*neptune.CreateDBClusterEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterEndpoint", arg0)
	ret0, _ := ret[0].(*neptune.CreateDBClusterEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterEndpoint indicates an expected call of CreateDBClusterEndpoint
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterEndpoint", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterEndpoint), arg0)
}

// CreateDBClusterEndpointRequest mocks base method
func (m *MockNeptuneAPI) CreateDBClusterEndpointRequest(arg0 *neptune.CreateDBClusterEndpointInput) (*request.Request, *neptune.CreateDBClusterEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateDBClusterEndpointOutput)
	return ret0, ret1
}

// CreateDBClusterEndpointRequest indicates an expected call of CreateDBClusterEndpointRequest
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterEndpointRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterEndpointRequest), arg0)
}

// CreateDBClusterEndpointWithContext mocks base method
func (m *MockNeptuneAPI) CreateDBClusterEndpointWithContext(arg0 context.Context, arg1 *neptune.CreateDBClusterEndpointInput, arg2 ...request.Option) (*neptune.CreateDBClusterEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBClusterEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateDBClusterEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterEndpointWithContext indicates an expected call of CreateDBClusterEndpointWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterEndpointWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterEndpointWithContext), varargs...)
}

// CreateDBClusterParameterGroup mocks base method
func (m *MockNeptuneAPI) CreateDBClusterParameterGroup(arg0 *neptune.CreateDBClusterParameterGroupInput) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.CreateDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterParameterGroup indicates an expected call of CreateDBClusterParameterGroup
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterParameterGroup), arg0)
}

// CreateDBClusterParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) CreateDBClusterParameterGroupRequest(arg0 *neptune.CreateDBClusterParameterGroupInput) (*request.Request, *neptune.CreateDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateDBClusterParameterGroupOutput)
	return ret0, ret1
}

// CreateDBClusterParameterGroupRequest indicates an expected call of CreateDBClusterParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterParameterGroupRequest), arg0)
}

// CreateDBClusterParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) CreateDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *neptune.CreateDBClusterParameterGroupInput, arg2 ...request.Option) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterParameterGroupWithContext indicates an expected call of CreateDBClusterParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterParameterGroupWithContext), varargs...)
}

// CreateDBClusterRequest mocks base method
func (m *MockNeptuneAPI) CreateDBClusterRequest(arg0 *neptune.CreateDBClusterInput) (*request.Request, *neptune.CreateDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateDBClusterOutput)
	return ret0, ret1
}

// CreateDBClusterRequest indicates an expected call of CreateDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterRequest), arg0)
}

// CreateDBClusterSnapshot mocks base method
func (m *MockNeptuneAPI) CreateDBClusterSnapshot(arg0 *neptune.CreateDBClusterSnapshotInput) (*neptune.CreateDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterSnapshot", arg0)
	ret0, _ := ret[0].(*neptune.CreateDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterSnapshot indicates an expected call of CreateDBClusterSnapshot
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterSnapshot", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterSnapshot), arg0)
}

// CreateDBClusterSnapshotRequest mocks base method
func (m *MockNeptuneAPI) CreateDBClusterSnapshotRequest(arg0 *neptune.CreateDBClusterSnapshotInput) (*request.Request, *neptune.CreateDBClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateDBClusterSnapshotOutput)
	return ret0, ret1
}

// CreateDBClusterSnapshotRequest indicates an expected call of CreateDBClusterSnapshotRequest
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterSnapshotRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterSnapshotRequest), arg0)
}

// CreateDBClusterSnapshotWithContext mocks base method
func (m *MockNeptuneAPI) CreateDBClusterSnapshotWithContext(arg0 context.Context, arg1 *neptune.CreateDBClusterSnapshotInput, arg2 ...request.Option) (*neptune.CreateDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterSnapshotWithContext indicates an expected call of CreateDBClusterSnapshotWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterSnapshotWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterSnapshotWithContext), varargs...)
}

// CreateDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) CreateDBClusterWithContext(arg0 context.Context, arg1 *neptune.CreateDBClusterInput, arg2 ...request.Option) (*neptune.CreateDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterWithContext indicates an expected call of CreateDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBClusterWithContext), varargs...)
}

// CreateDBInstance mocks base method
func (m *MockNeptuneAPI) CreateDBInstance(arg0 *neptune.CreateDBInstanceInput) (*neptune.CreateDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBInstance", arg0)
	ret0, _ := ret[0].(*neptune.CreateDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBInstance indicates an expected call of CreateDBInstance
func (mr *MockNeptuneAPIMockRecorder) CreateDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstance", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBInstance), arg0)
}

// CreateDBInstanceRequest mocks base method
func (m *MockNeptuneAPI) CreateDBInstanceRequest(arg0 *neptune.CreateDBInstanceInput) (*request.Request, *neptune.CreateDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateDBInstanceOutput)
	return ret0, ret1
}

// CreateDBInstanceRequest indicates an expected call of CreateDBInstanceRequest
func (mr *MockNeptuneAPIMockRecorder) CreateDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstanceRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBInstanceRequest), arg0)
}

// CreateDBInstanceWithContext mocks base method
func (m *MockNeptuneAPI) CreateDBInstanceWithContext(arg0 context.Context, arg1 *neptune.CreateDBInstanceInput, arg2 ...request.Option) (*neptune.CreateDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBInstanceWithContext indicates an expected call of CreateDBInstanceWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstanceWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBInstanceWithContext), varargs...)
}

// CreateDBParameterGroup mocks base method
func (m *MockNeptuneAPI) CreateDBParameterGroup(arg0 *neptune.CreateDBParameterGroupInput) (*neptune.CreateDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.CreateDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBParameterGroup indicates an expected call of CreateDBParameterGroup
func (mr *MockNeptuneAPIMockRecorder) CreateDBParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBParameterGroup), arg0)
}

// CreateDBParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) CreateDBParameterGroupRequest(arg0 *neptune.CreateDBParameterGroupInput) (*request.Request, *neptune.CreateDBParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateDBParameterGroupOutput)
	return ret0, ret1
}

// CreateDBParameterGroupRequest indicates an expected call of CreateDBParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) CreateDBParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBParameterGroupRequest), arg0)
}

// CreateDBParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) CreateDBParameterGroupWithContext(arg0 context.Context, arg1 *neptune.CreateDBParameterGroupInput, arg2 ...request.Option) (*neptune.CreateDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBParameterGroupWithContext indicates an expected call of CreateDBParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateDBParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBParameterGroupWithContext), varargs...)
}

// CreateDBSubnetGroup mocks base method
func (m *MockNeptuneAPI) CreateDBSubnetGroup(arg0 *neptune.CreateDBSubnetGroupInput) (*neptune.CreateDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBSubnetGroup", arg0)
	ret0, _ := ret[0].(*neptune.CreateDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBSubnetGroup indicates an expected call of CreateDBSubnetGroup
func (mr *MockNeptuneAPIMockRecorder) CreateDBSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBSubnetGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBSubnetGroup), arg0)
}

// CreateDBSubnetGroupRequest mocks base method
func (m *MockNeptuneAPI) CreateDBSubnetGroupRequest(arg0 *neptune.CreateDBSubnetGroupInput) (*request.Request, *neptune.CreateDBSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateDBSubnetGroupOutput)
	return ret0, ret1
}

// CreateDBSubnetGroupRequest indicates an expected call of CreateDBSubnetGroupRequest
func (mr *MockNeptuneAPIMockRecorder) CreateDBSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBSubnetGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBSubnetGroupRequest), arg0)
}

// CreateDBSubnetGroupWithContext mocks base method
func (m *MockNeptuneAPI) CreateDBSubnetGroupWithContext(arg0 context.Context, arg1 *neptune.CreateDBSubnetGroupInput, arg2 ...request.Option) (*neptune.CreateDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBSubnetGroupWithContext indicates an expected call of CreateDBSubnetGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateDBSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBSubnetGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateDBSubnetGroupWithContext), varargs...)
}

// CreateEventSubscription mocks base method
func (m *MockNeptuneAPI) CreateEventSubscription(arg0 *neptune.CreateEventSubscriptionInput) (*neptune.CreateEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventSubscription", arg0)
	ret0, _ := ret[0].(*neptune.CreateEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSubscription indicates an expected call of CreateEventSubscription
func (mr *MockNeptuneAPIMockRecorder) CreateEventSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSubscription", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateEventSubscription), arg0)
}

// CreateEventSubscriptionRequest mocks base method
func (m *MockNeptuneAPI) CreateEventSubscriptionRequest(arg0 *neptune.CreateEventSubscriptionInput) (*request.Request, *neptune.CreateEventSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.CreateEventSubscriptionOutput)
	return ret0, ret1
}

// CreateEventSubscriptionRequest indicates an expected call of CreateEventSubscriptionRequest
func (mr *MockNeptuneAPIMockRecorder) CreateEventSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSubscriptionRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateEventSubscriptionRequest), arg0)
}

// CreateEventSubscriptionWithContext mocks base method
func (m *MockNeptuneAPI) CreateEventSubscriptionWithContext(arg0 context.Context, arg1 *neptune.CreateEventSubscriptionInput, arg2 ...request.Option) (*neptune.CreateEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.CreateEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventSubscriptionWithContext indicates an expected call of CreateEventSubscriptionWithContext
func (mr *MockNeptuneAPIMockRecorder) CreateEventSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventSubscriptionWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).CreateEventSubscriptionWithContext), varargs...)
}

// DeleteDBCluster mocks base method
func (m *MockNeptuneAPI) DeleteDBCluster(arg0 *neptune.DeleteDBClusterInput) (*neptune.DeleteDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBCluster indicates an expected call of DeleteDBCluster
func (mr *MockNeptuneAPIMockRecorder) DeleteDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBCluster), arg0)
}

// DeleteDBClusterEndpoint mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterEndpoint(arg0 *neptune.DeleteDBClusterEndpointInput) (*neptune.DeleteDBClusterEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterEndpoint", arg0)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterEndpoint indicates an expected call of DeleteDBClusterEndpoint
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterEndpoint", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterEndpoint), arg0)
}

// DeleteDBClusterEndpointRequest mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterEndpointRequest(arg0 *neptune.DeleteDBClusterEndpointInput) (*request.Request, *neptune.DeleteDBClusterEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteDBClusterEndpointOutput)
	return ret0, ret1
}

// DeleteDBClusterEndpointRequest indicates an expected call of DeleteDBClusterEndpointRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterEndpointRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterEndpointRequest), arg0)
}

// DeleteDBClusterEndpointWithContext mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterEndpointWithContext(arg0 context.Context, arg1 *neptune.DeleteDBClusterEndpointInput, arg2 ...request.Option) (*neptune.DeleteDBClusterEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBClusterEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterEndpointWithContext indicates an expected call of DeleteDBClusterEndpointWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterEndpointWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterEndpointWithContext), varargs...)
}

// DeleteDBClusterParameterGroup mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterParameterGroup(arg0 *neptune.DeleteDBClusterParameterGroupInput) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterParameterGroup indicates an expected call of DeleteDBClusterParameterGroup
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterParameterGroup), arg0)
}

// DeleteDBClusterParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterParameterGroupRequest(arg0 *neptune.DeleteDBClusterParameterGroupInput) (*request.Request, *neptune.DeleteDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteDBClusterParameterGroupOutput)
	return ret0, ret1
}

// DeleteDBClusterParameterGroupRequest indicates an expected call of DeleteDBClusterParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterParameterGroupRequest), arg0)
}

// DeleteDBClusterParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *neptune.DeleteDBClusterParameterGroupInput, arg2 ...request.Option) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterParameterGroupWithContext indicates an expected call of DeleteDBClusterParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterParameterGroupWithContext), varargs...)
}

// DeleteDBClusterRequest mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterRequest(arg0 *neptune.DeleteDBClusterInput) (*request.Request, *neptune.DeleteDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteDBClusterOutput)
	return ret0, ret1
}

// DeleteDBClusterRequest indicates an expected call of DeleteDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterRequest), arg0)
}

// DeleteDBClusterSnapshot mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterSnapshot(arg0 *neptune.DeleteDBClusterSnapshotInput) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterSnapshot", arg0)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterSnapshot indicates an expected call of DeleteDBClusterSnapshot
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterSnapshot", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterSnapshot), arg0)
}

// DeleteDBClusterSnapshotRequest mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterSnapshotRequest(arg0 *neptune.DeleteDBClusterSnapshotInput) (*request.Request, *neptune.DeleteDBClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteDBClusterSnapshotOutput)
	return ret0, ret1
}

// DeleteDBClusterSnapshotRequest indicates an expected call of DeleteDBClusterSnapshotRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterSnapshotRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterSnapshotRequest), arg0)
}

// DeleteDBClusterSnapshotWithContext mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterSnapshotWithContext(arg0 context.Context, arg1 *neptune.DeleteDBClusterSnapshotInput, arg2 ...request.Option) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterSnapshotWithContext indicates an expected call of DeleteDBClusterSnapshotWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterSnapshotWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterSnapshotWithContext), varargs...)
}

// DeleteDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) DeleteDBClusterWithContext(arg0 context.Context, arg1 *neptune.DeleteDBClusterInput, arg2 ...request.Option) (*neptune.DeleteDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterWithContext indicates an expected call of DeleteDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBClusterWithContext), varargs...)
}

// DeleteDBInstance mocks base method
func (m *MockNeptuneAPI) DeleteDBInstance(arg0 *neptune.DeleteDBInstanceInput) (*neptune.DeleteDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBInstance", arg0)
	ret0, _ := ret[0].(*neptune.DeleteDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBInstance indicates an expected call of DeleteDBInstance
func (mr *MockNeptuneAPIMockRecorder) DeleteDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstance", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBInstance), arg0)
}

// DeleteDBInstanceRequest mocks base method
func (m *MockNeptuneAPI) DeleteDBInstanceRequest(arg0 *neptune.DeleteDBInstanceInput) (*request.Request, *neptune.DeleteDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteDBInstanceOutput)
	return ret0, ret1
}

// DeleteDBInstanceRequest indicates an expected call of DeleteDBInstanceRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstanceRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBInstanceRequest), arg0)
}

// DeleteDBInstanceWithContext mocks base method
func (m *MockNeptuneAPI) DeleteDBInstanceWithContext(arg0 context.Context, arg1 *neptune.DeleteDBInstanceInput, arg2 ...request.Option) (*neptune.DeleteDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBInstanceWithContext indicates an expected call of DeleteDBInstanceWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstanceWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBInstanceWithContext), varargs...)
}

// DeleteDBParameterGroup mocks base method
func (m *MockNeptuneAPI) DeleteDBParameterGroup(arg0 *neptune.DeleteDBParameterGroupInput) (*neptune.DeleteDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.DeleteDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBParameterGroup indicates an expected call of DeleteDBParameterGroup
func (mr *MockNeptuneAPIMockRecorder) DeleteDBParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBParameterGroup), arg0)
}

// DeleteDBParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) DeleteDBParameterGroupRequest(arg0 *neptune.DeleteDBParameterGroupInput) (*request.Request, *neptune.DeleteDBParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteDBParameterGroupOutput)
	return ret0, ret1
}

// DeleteDBParameterGroupRequest indicates an expected call of DeleteDBParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteDBParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBParameterGroupRequest), arg0)
}

// DeleteDBParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) DeleteDBParameterGroupWithContext(arg0 context.Context, arg1 *neptune.DeleteDBParameterGroupInput, arg2 ...request.Option) (*neptune.DeleteDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBParameterGroupWithContext indicates an expected call of DeleteDBParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteDBParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBParameterGroupWithContext), varargs...)
}

// DeleteDBSubnetGroup mocks base method
func (m *MockNeptuneAPI) DeleteDBSubnetGroup(arg0 *neptune.DeleteDBSubnetGroupInput) (*neptune.DeleteDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBSubnetGroup", arg0)
	ret0, _ := ret[0].(*neptune.DeleteDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBSubnetGroup indicates an expected call of DeleteDBSubnetGroup
func (mr *MockNeptuneAPIMockRecorder) DeleteDBSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBSubnetGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBSubnetGroup), arg0)
}

// DeleteDBSubnetGroupRequest mocks base method
func (m *MockNeptuneAPI) DeleteDBSubnetGroupRequest(arg0 *neptune.DeleteDBSubnetGroupInput) (*request.Request, *neptune.DeleteDBSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteDBSubnetGroupOutput)
	return ret0, ret1
}

// DeleteDBSubnetGroupRequest indicates an expected call of DeleteDBSubnetGroupRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteDBSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBSubnetGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBSubnetGroupRequest), arg0)
}

// DeleteDBSubnetGroupWithContext mocks base method
func (m *MockNeptuneAPI) DeleteDBSubnetGroupWithContext(arg0 context.Context, arg1 *neptune.DeleteDBSubnetGroupInput, arg2 ...request.Option) (*neptune.DeleteDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBSubnetGroupWithContext indicates an expected call of DeleteDBSubnetGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteDBSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBSubnetGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteDBSubnetGroupWithContext), varargs...)
}

// DeleteEventSubscription mocks base method
func (m *MockNeptuneAPI) DeleteEventSubscription(arg0 *neptune.DeleteEventSubscriptionInput) (*neptune.DeleteEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventSubscription", arg0)
	ret0, _ := ret[0].(*neptune.DeleteEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventSubscription indicates an expected call of DeleteEventSubscription
func (mr *MockNeptuneAPIMockRecorder) DeleteEventSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSubscription", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteEventSubscription), arg0)
}

// DeleteEventSubscriptionRequest mocks base method
func (m *MockNeptuneAPI) DeleteEventSubscriptionRequest(arg0 *neptune.DeleteEventSubscriptionInput) (*request.Request, *neptune.DeleteEventSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DeleteEventSubscriptionOutput)
	return ret0, ret1
}

// DeleteEventSubscriptionRequest indicates an expected call of DeleteEventSubscriptionRequest
func (mr *MockNeptuneAPIMockRecorder) DeleteEventSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSubscriptionRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteEventSubscriptionRequest), arg0)
}

// DeleteEventSubscriptionWithContext mocks base method
func (m *MockNeptuneAPI) DeleteEventSubscriptionWithContext(arg0 context.Context, arg1 *neptune.DeleteEventSubscriptionInput, arg2 ...request.Option) (*neptune.DeleteEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DeleteEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventSubscriptionWithContext indicates an expected call of DeleteEventSubscriptionWithContext
func (mr *MockNeptuneAPIMockRecorder) DeleteEventSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventSubscriptionWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DeleteEventSubscriptionWithContext), varargs...)
}

// DescribeDBClusterEndpoints mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterEndpoints(arg0 *neptune.DescribeDBClusterEndpointsInput) (*neptune.DescribeDBClusterEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterEndpoints", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterEndpoints indicates an expected call of DescribeDBClusterEndpoints
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterEndpoints", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterEndpoints), arg0)
}

// DescribeDBClusterEndpointsPages mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterEndpointsPages(arg0 *neptune.DescribeDBClusterEndpointsInput, arg1 func(*neptune.DescribeDBClusterEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterEndpointsPages indicates an expected call of DescribeDBClusterEndpointsPages
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterEndpointsPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterEndpointsPages), arg0, arg1)
}

// DescribeDBClusterEndpointsPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterEndpointsPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBClusterEndpointsInput, arg2 func(*neptune.DescribeDBClusterEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterEndpointsPagesWithContext indicates an expected call of DescribeDBClusterEndpointsPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterEndpointsPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterEndpointsPagesWithContext), varargs...)
}

// DescribeDBClusterEndpointsRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterEndpointsRequest(arg0 *neptune.DescribeDBClusterEndpointsInput) (*request.Request, *neptune.DescribeDBClusterEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBClusterEndpointsOutput)
	return ret0, ret1
}

// DescribeDBClusterEndpointsRequest indicates an expected call of DescribeDBClusterEndpointsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterEndpointsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterEndpointsRequest), arg0)
}

// DescribeDBClusterEndpointsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterEndpointsWithContext(arg0 context.Context, arg1 *neptune.DescribeDBClusterEndpointsInput, arg2 ...request.Option) (*neptune.DescribeDBClusterEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterEndpointsWithContext indicates an expected call of DescribeDBClusterEndpointsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterEndpointsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterEndpointsWithContext), varargs...)
}

// DescribeDBClusterParameterGroups mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterParameterGroups(arg0 *neptune.DescribeDBClusterParameterGroupsInput) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroups", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameterGroups indicates an expected call of DescribeDBClusterParameterGroups
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterParameterGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroups", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterParameterGroups), arg0)
}

// DescribeDBClusterParameterGroupsRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterParameterGroupsRequest(arg0 *neptune.DescribeDBClusterParameterGroupsInput) (*request.Request, *neptune.DescribeDBClusterParameterGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBClusterParameterGroupsOutput)
	return ret0, ret1
}

// DescribeDBClusterParameterGroupsRequest indicates an expected call of DescribeDBClusterParameterGroupsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterParameterGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroupsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterParameterGroupsRequest), arg0)
}

// DescribeDBClusterParameterGroupsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterParameterGroupsWithContext(arg0 context.Context, arg1 *neptune.DescribeDBClusterParameterGroupsInput, arg2 ...request.Option) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameterGroupsWithContext indicates an expected call of DescribeDBClusterParameterGroupsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterParameterGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroupsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterParameterGroupsWithContext), varargs...)
}

// DescribeDBClusterParameters mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterParameters(arg0 *neptune.DescribeDBClusterParametersInput) (*neptune.DescribeDBClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParameters", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameters indicates an expected call of DescribeDBClusterParameters
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameters", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterParameters), arg0)
}

// DescribeDBClusterParametersRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterParametersRequest(arg0 *neptune.DescribeDBClusterParametersInput) (*request.Request, *neptune.DescribeDBClusterParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBClusterParametersOutput)
	return ret0, ret1
}

// DescribeDBClusterParametersRequest indicates an expected call of DescribeDBClusterParametersRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParametersRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterParametersRequest), arg0)
}

// DescribeDBClusterParametersWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterParametersWithContext(arg0 context.Context, arg1 *neptune.DescribeDBClusterParametersInput, arg2 ...request.Option) (*neptune.DescribeDBClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParametersWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParametersWithContext indicates an expected call of DescribeDBClusterParametersWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParametersWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterParametersWithContext), varargs...)
}

// DescribeDBClusterSnapshotAttributes mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterSnapshotAttributes(arg0 *neptune.DescribeDBClusterSnapshotAttributesInput) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributes", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributes indicates an expected call of DescribeDBClusterSnapshotAttributes
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterSnapshotAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributes", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterSnapshotAttributes), arg0)
}

// DescribeDBClusterSnapshotAttributesRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterSnapshotAttributesRequest(arg0 *neptune.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *neptune.DescribeDBClusterSnapshotAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBClusterSnapshotAttributesOutput)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributesRequest indicates an expected call of DescribeDBClusterSnapshotAttributesRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterSnapshotAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributesRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterSnapshotAttributesRequest), arg0)
}

// DescribeDBClusterSnapshotAttributesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterSnapshotAttributesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBClusterSnapshotAttributesInput, arg2 ...request.Option) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributesWithContext indicates an expected call of DescribeDBClusterSnapshotAttributesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterSnapshotAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterSnapshotAttributesWithContext), varargs...)
}

// DescribeDBClusterSnapshots mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterSnapshots(arg0 *neptune.DescribeDBClusterSnapshotsInput) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshots", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshots indicates an expected call of DescribeDBClusterSnapshots
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshots", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterSnapshots), arg0)
}

// DescribeDBClusterSnapshotsRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterSnapshotsRequest(arg0 *neptune.DescribeDBClusterSnapshotsInput) (*request.Request, *neptune.DescribeDBClusterSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBClusterSnapshotsOutput)
	return ret0, ret1
}

// DescribeDBClusterSnapshotsRequest indicates an expected call of DescribeDBClusterSnapshotsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterSnapshotsRequest), arg0)
}

// DescribeDBClusterSnapshotsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBClusterSnapshotsWithContext(arg0 context.Context, arg1 *neptune.DescribeDBClusterSnapshotsInput, arg2 ...request.Option) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotsWithContext indicates an expected call of DescribeDBClusterSnapshotsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusterSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusterSnapshotsWithContext), varargs...)
}

// DescribeDBClusters mocks base method
func (m *MockNeptuneAPI) DescribeDBClusters(arg0 *neptune.DescribeDBClustersInput) (*neptune.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusters", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClusters), arg0)
}

// DescribeDBClustersRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBClustersRequest(arg0 *neptune.DescribeDBClustersInput) (*request.Request, *neptune.DescribeDBClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBClustersOutput)
	return ret0, ret1
}

// DescribeDBClustersRequest indicates an expected call of DescribeDBClustersRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClustersRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClustersRequest), arg0)
}

// DescribeDBClustersWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBClustersWithContext(arg0 context.Context, arg1 *neptune.DescribeDBClustersInput, arg2 ...request.Option) (*neptune.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClustersWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClustersWithContext indicates an expected call of DescribeDBClustersWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClustersWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBClustersWithContext), varargs...)
}

// DescribeDBEngineVersions mocks base method
func (m *MockNeptuneAPI) DescribeDBEngineVersions(arg0 *neptune.DescribeDBEngineVersionsInput) (*neptune.DescribeDBEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBEngineVersions", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBEngineVersions indicates an expected call of DescribeDBEngineVersions
func (mr *MockNeptuneAPIMockRecorder) DescribeDBEngineVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersions", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBEngineVersions), arg0)
}

// DescribeDBEngineVersionsPages mocks base method
func (m *MockNeptuneAPI) DescribeDBEngineVersionsPages(arg0 *neptune.DescribeDBEngineVersionsInput, arg1 func(*neptune.DescribeDBEngineVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBEngineVersionsPages indicates an expected call of DescribeDBEngineVersionsPages
func (mr *MockNeptuneAPIMockRecorder) DescribeDBEngineVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBEngineVersionsPages), arg0, arg1)
}

// DescribeDBEngineVersionsPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBEngineVersionsPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBEngineVersionsInput, arg2 func(*neptune.DescribeDBEngineVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBEngineVersionsPagesWithContext indicates an expected call of DescribeDBEngineVersionsPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBEngineVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBEngineVersionsPagesWithContext), varargs...)
}

// DescribeDBEngineVersionsRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBEngineVersionsRequest(arg0 *neptune.DescribeDBEngineVersionsInput) (*request.Request, *neptune.DescribeDBEngineVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBEngineVersionsOutput)
	return ret0, ret1
}

// DescribeDBEngineVersionsRequest indicates an expected call of DescribeDBEngineVersionsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBEngineVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBEngineVersionsRequest), arg0)
}

// DescribeDBEngineVersionsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBEngineVersionsWithContext(arg0 context.Context, arg1 *neptune.DescribeDBEngineVersionsInput, arg2 ...request.Option) (*neptune.DescribeDBEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBEngineVersionsWithContext indicates an expected call of DescribeDBEngineVersionsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBEngineVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBEngineVersionsWithContext), varargs...)
}

// DescribeDBInstances mocks base method
func (m *MockNeptuneAPI) DescribeDBInstances(arg0 *neptune.DescribeDBInstancesInput) (*neptune.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstances", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances
func (mr *MockNeptuneAPIMockRecorder) DescribeDBInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBInstances), arg0)
}

// DescribeDBInstancesPages mocks base method
func (m *MockNeptuneAPI) DescribeDBInstancesPages(arg0 *neptune.DescribeDBInstancesInput, arg1 func(*neptune.DescribeDBInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBInstancesPages indicates an expected call of DescribeDBInstancesPages
func (mr *MockNeptuneAPIMockRecorder) DescribeDBInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBInstancesPages), arg0, arg1)
}

// DescribeDBInstancesPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBInstancesPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBInstancesInput, arg2 func(*neptune.DescribeDBInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBInstancesPagesWithContext indicates an expected call of DescribeDBInstancesPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBInstancesPagesWithContext), varargs...)
}

// DescribeDBInstancesRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBInstancesRequest(arg0 *neptune.DescribeDBInstancesInput) (*request.Request, *neptune.DescribeDBInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBInstancesOutput)
	return ret0, ret1
}

// DescribeDBInstancesRequest indicates an expected call of DescribeDBInstancesRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBInstancesRequest), arg0)
}

// DescribeDBInstancesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBInstancesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBInstancesInput, arg2 ...request.Option) (*neptune.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstancesWithContext indicates an expected call of DescribeDBInstancesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBInstancesWithContext), varargs...)
}

// DescribeDBParameterGroups mocks base method
func (m *MockNeptuneAPI) DescribeDBParameterGroups(arg0 *neptune.DescribeDBParameterGroupsInput) (*neptune.DescribeDBParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBParameterGroups", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParameterGroups indicates an expected call of DescribeDBParameterGroups
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParameterGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameterGroups", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParameterGroups), arg0)
}

// DescribeDBParameterGroupsPages mocks base method
func (m *MockNeptuneAPI) DescribeDBParameterGroupsPages(arg0 *neptune.DescribeDBParameterGroupsInput, arg1 func(*neptune.DescribeDBParameterGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBParameterGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBParameterGroupsPages indicates an expected call of DescribeDBParameterGroupsPages
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParameterGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameterGroupsPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParameterGroupsPages), arg0, arg1)
}

// DescribeDBParameterGroupsPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBParameterGroupsPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBParameterGroupsInput, arg2 func(*neptune.DescribeDBParameterGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParameterGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBParameterGroupsPagesWithContext indicates an expected call of DescribeDBParameterGroupsPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParameterGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameterGroupsPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParameterGroupsPagesWithContext), varargs...)
}

// DescribeDBParameterGroupsRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBParameterGroupsRequest(arg0 *neptune.DescribeDBParameterGroupsInput) (*request.Request, *neptune.DescribeDBParameterGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBParameterGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBParameterGroupsOutput)
	return ret0, ret1
}

// DescribeDBParameterGroupsRequest indicates an expected call of DescribeDBParameterGroupsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParameterGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameterGroupsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParameterGroupsRequest), arg0)
}

// DescribeDBParameterGroupsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBParameterGroupsWithContext(arg0 context.Context, arg1 *neptune.DescribeDBParameterGroupsInput, arg2 ...request.Option) (*neptune.DescribeDBParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParameterGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParameterGroupsWithContext indicates an expected call of DescribeDBParameterGroupsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParameterGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameterGroupsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParameterGroupsWithContext), varargs...)
}

// DescribeDBParameters mocks base method
func (m *MockNeptuneAPI) DescribeDBParameters(arg0 *neptune.DescribeDBParametersInput) (*neptune.DescribeDBParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBParameters", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParameters indicates an expected call of DescribeDBParameters
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParameters", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParameters), arg0)
}

// DescribeDBParametersPages mocks base method
func (m *MockNeptuneAPI) DescribeDBParametersPages(arg0 *neptune.DescribeDBParametersInput, arg1 func(*neptune.DescribeDBParametersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBParametersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBParametersPages indicates an expected call of DescribeDBParametersPages
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParametersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParametersPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParametersPages), arg0, arg1)
}

// DescribeDBParametersPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBParametersPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBParametersInput, arg2 func(*neptune.DescribeDBParametersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParametersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBParametersPagesWithContext indicates an expected call of DescribeDBParametersPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParametersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParametersPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParametersPagesWithContext), varargs...)
}

// DescribeDBParametersRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBParametersRequest(arg0 *neptune.DescribeDBParametersInput) (*request.Request, *neptune.DescribeDBParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBParametersOutput)
	return ret0, ret1
}

// DescribeDBParametersRequest indicates an expected call of DescribeDBParametersRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParametersRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParametersRequest), arg0)
}

// DescribeDBParametersWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBParametersWithContext(arg0 context.Context, arg1 *neptune.DescribeDBParametersInput, arg2 ...request.Option) (*neptune.DescribeDBParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBParametersWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBParametersWithContext indicates an expected call of DescribeDBParametersWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBParametersWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBParametersWithContext), varargs...)
}

// DescribeDBSubnetGroups mocks base method
func (m *MockNeptuneAPI) DescribeDBSubnetGroups(arg0 *neptune.DescribeDBSubnetGroupsInput) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroups", arg0)
	ret0, _ := ret[0].(*neptune.DescribeDBSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSubnetGroups indicates an expected call of DescribeDBSubnetGroups
func (mr *MockNeptuneAPIMockRecorder) DescribeDBSubnetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroups", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBSubnetGroups), arg0)
}

// DescribeDBSubnetGroupsPages mocks base method
func (m *MockNeptuneAPI) DescribeDBSubnetGroupsPages(arg0 *neptune.DescribeDBSubnetGroupsInput, arg1 func(*neptune.DescribeDBSubnetGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBSubnetGroupsPages indicates an expected call of DescribeDBSubnetGroupsPages
func (mr *MockNeptuneAPIMockRecorder) DescribeDBSubnetGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBSubnetGroupsPages), arg0, arg1)
}

// DescribeDBSubnetGroupsPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBSubnetGroupsPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeDBSubnetGroupsInput, arg2 func(*neptune.DescribeDBSubnetGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBSubnetGroupsPagesWithContext indicates an expected call of DescribeDBSubnetGroupsPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBSubnetGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBSubnetGroupsPagesWithContext), varargs...)
}

// DescribeDBSubnetGroupsRequest mocks base method
func (m *MockNeptuneAPI) DescribeDBSubnetGroupsRequest(arg0 *neptune.DescribeDBSubnetGroupsInput) (*request.Request, *neptune.DescribeDBSubnetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeDBSubnetGroupsOutput)
	return ret0, ret1
}

// DescribeDBSubnetGroupsRequest indicates an expected call of DescribeDBSubnetGroupsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeDBSubnetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBSubnetGroupsRequest), arg0)
}

// DescribeDBSubnetGroupsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeDBSubnetGroupsWithContext(arg0 context.Context, arg1 *neptune.DescribeDBSubnetGroupsInput, arg2 ...request.Option) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeDBSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSubnetGroupsWithContext indicates an expected call of DescribeDBSubnetGroupsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeDBSubnetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeDBSubnetGroupsWithContext), varargs...)
}

// DescribeEngineDefaultClusterParameters mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultClusterParameters(arg0 *neptune.DescribeEngineDefaultClusterParametersInput) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParameters", arg0)
	ret0, _ := ret[0].(*neptune.DescribeEngineDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParameters indicates an expected call of DescribeEngineDefaultClusterParameters
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultClusterParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParameters", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultClusterParameters), arg0)
}

// DescribeEngineDefaultClusterParametersRequest mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultClusterParametersRequest(arg0 *neptune.DescribeEngineDefaultClusterParametersInput) (*request.Request, *neptune.DescribeEngineDefaultClusterParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeEngineDefaultClusterParametersOutput)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParametersRequest indicates an expected call of DescribeEngineDefaultClusterParametersRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultClusterParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParametersRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultClusterParametersRequest), arg0)
}

// DescribeEngineDefaultClusterParametersWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultClusterParametersWithContext(arg0 context.Context, arg1 *neptune.DescribeEngineDefaultClusterParametersInput, arg2 ...request.Option) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParametersWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEngineDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParametersWithContext indicates an expected call of DescribeEngineDefaultClusterParametersWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultClusterParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParametersWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultClusterParametersWithContext), varargs...)
}

// DescribeEngineDefaultParameters mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultParameters(arg0 *neptune.DescribeEngineDefaultParametersInput) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineDefaultParameters", arg0)
	ret0, _ := ret[0].(*neptune.DescribeEngineDefaultParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultParameters indicates an expected call of DescribeEngineDefaultParameters
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultParameters", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultParameters), arg0)
}

// DescribeEngineDefaultParametersPages mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultParametersPages(arg0 *neptune.DescribeEngineDefaultParametersInput, arg1 func(*neptune.DescribeEngineDefaultParametersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineDefaultParametersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEngineDefaultParametersPages indicates an expected call of DescribeEngineDefaultParametersPages
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultParametersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultParametersPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultParametersPages), arg0, arg1)
}

// DescribeEngineDefaultParametersPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultParametersPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeEngineDefaultParametersInput, arg2 func(*neptune.DescribeEngineDefaultParametersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultParametersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEngineDefaultParametersPagesWithContext indicates an expected call of DescribeEngineDefaultParametersPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultParametersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultParametersPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultParametersPagesWithContext), varargs...)
}

// DescribeEngineDefaultParametersRequest mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultParametersRequest(arg0 *neptune.DescribeEngineDefaultParametersInput) (*request.Request, *neptune.DescribeEngineDefaultParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineDefaultParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeEngineDefaultParametersOutput)
	return ret0, ret1
}

// DescribeEngineDefaultParametersRequest indicates an expected call of DescribeEngineDefaultParametersRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultParametersRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultParametersRequest), arg0)
}

// DescribeEngineDefaultParametersWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEngineDefaultParametersWithContext(arg0 context.Context, arg1 *neptune.DescribeEngineDefaultParametersInput, arg2 ...request.Option) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultParametersWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEngineDefaultParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultParametersWithContext indicates an expected call of DescribeEngineDefaultParametersWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEngineDefaultParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultParametersWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEngineDefaultParametersWithContext), varargs...)
}

// DescribeEventCategories mocks base method
func (m *MockNeptuneAPI) DescribeEventCategories(arg0 *neptune.DescribeEventCategoriesInput) (*neptune.DescribeEventCategoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventCategories", arg0)
	ret0, _ := ret[0].(*neptune.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories
func (mr *MockNeptuneAPIMockRecorder) DescribeEventCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventCategories), arg0)
}

// DescribeEventCategoriesRequest mocks base method
func (m *MockNeptuneAPI) DescribeEventCategoriesRequest(arg0 *neptune.DescribeEventCategoriesInput) (*request.Request, *neptune.DescribeEventCategoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventCategoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeEventCategoriesOutput)
	return ret0, ret1
}

// DescribeEventCategoriesRequest indicates an expected call of DescribeEventCategoriesRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeEventCategoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategoriesRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventCategoriesRequest), arg0)
}

// DescribeEventCategoriesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEventCategoriesWithContext(arg0 context.Context, arg1 *neptune.DescribeEventCategoriesInput, arg2 ...request.Option) (*neptune.DescribeEventCategoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategoriesWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategoriesWithContext indicates an expected call of DescribeEventCategoriesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEventCategoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategoriesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventCategoriesWithContext), varargs...)
}

// DescribeEventSubscriptions mocks base method
func (m *MockNeptuneAPI) DescribeEventSubscriptions(arg0 *neptune.DescribeEventSubscriptionsInput) (*neptune.DescribeEventSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSubscriptions", arg0)
	ret0, _ := ret[0].(*neptune.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptions indicates an expected call of DescribeEventSubscriptions
func (mr *MockNeptuneAPIMockRecorder) DescribeEventSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptions", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventSubscriptions), arg0)
}

// DescribeEventSubscriptionsPages mocks base method
func (m *MockNeptuneAPI) DescribeEventSubscriptionsPages(arg0 *neptune.DescribeEventSubscriptionsInput, arg1 func(*neptune.DescribeEventSubscriptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventSubscriptionsPages indicates an expected call of DescribeEventSubscriptionsPages
func (mr *MockNeptuneAPIMockRecorder) DescribeEventSubscriptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventSubscriptionsPages), arg0, arg1)
}

// DescribeEventSubscriptionsPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEventSubscriptionsPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeEventSubscriptionsInput, arg2 func(*neptune.DescribeEventSubscriptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventSubscriptionsPagesWithContext indicates an expected call of DescribeEventSubscriptionsPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEventSubscriptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventSubscriptionsPagesWithContext), varargs...)
}

// DescribeEventSubscriptionsRequest mocks base method
func (m *MockNeptuneAPI) DescribeEventSubscriptionsRequest(arg0 *neptune.DescribeEventSubscriptionsInput) (*request.Request, *neptune.DescribeEventSubscriptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeEventSubscriptionsOutput)
	return ret0, ret1
}

// DescribeEventSubscriptionsRequest indicates an expected call of DescribeEventSubscriptionsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeEventSubscriptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventSubscriptionsRequest), arg0)
}

// DescribeEventSubscriptionsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEventSubscriptionsWithContext(arg0 context.Context, arg1 *neptune.DescribeEventSubscriptionsInput, arg2 ...request.Option) (*neptune.DescribeEventSubscriptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventSubscriptionsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEventSubscriptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventSubscriptionsWithContext indicates an expected call of DescribeEventSubscriptionsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEventSubscriptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventSubscriptionsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventSubscriptionsWithContext), varargs...)
}

// DescribeEvents mocks base method
func (m *MockNeptuneAPI) DescribeEvents(arg0 *neptune.DescribeEventsInput) (*neptune.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEvents", arg0)
	ret0, _ := ret[0].(*neptune.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents
func (mr *MockNeptuneAPIMockRecorder) DescribeEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEvents), arg0)
}

// DescribeEventsPages mocks base method
func (m *MockNeptuneAPI) DescribeEventsPages(arg0 *neptune.DescribeEventsInput, arg1 func(*neptune.DescribeEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPages indicates an expected call of DescribeEventsPages
func (mr *MockNeptuneAPIMockRecorder) DescribeEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventsPages), arg0, arg1)
}

// DescribeEventsPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEventsPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeEventsInput, arg2 func(*neptune.DescribeEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPagesWithContext indicates an expected call of DescribeEventsPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventsPagesWithContext), varargs...)
}

// DescribeEventsRequest mocks base method
func (m *MockNeptuneAPI) DescribeEventsRequest(arg0 *neptune.DescribeEventsInput) (*request.Request, *neptune.DescribeEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeEventsOutput)
	return ret0, ret1
}

// DescribeEventsRequest indicates an expected call of DescribeEventsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventsRequest), arg0)
}

// DescribeEventsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeEventsWithContext(arg0 context.Context, arg1 *neptune.DescribeEventsInput, arg2 ...request.Option) (*neptune.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventsWithContext indicates an expected call of DescribeEventsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeEventsWithContext), varargs...)
}

// DescribeOrderableDBInstanceOptions mocks base method
func (m *MockNeptuneAPI) DescribeOrderableDBInstanceOptions(arg0 *neptune.DescribeOrderableDBInstanceOptionsInput) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptions", arg0)
	ret0, _ := ret[0].(*neptune.DescribeOrderableDBInstanceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptions indicates an expected call of DescribeOrderableDBInstanceOptions
func (mr *MockNeptuneAPIMockRecorder) DescribeOrderableDBInstanceOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptions", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeOrderableDBInstanceOptions), arg0)
}

// DescribeOrderableDBInstanceOptionsPages mocks base method
func (m *MockNeptuneAPI) DescribeOrderableDBInstanceOptionsPages(arg0 *neptune.DescribeOrderableDBInstanceOptionsInput, arg1 func(*neptune.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOrderableDBInstanceOptionsPages indicates an expected call of DescribeOrderableDBInstanceOptionsPages
func (mr *MockNeptuneAPIMockRecorder) DescribeOrderableDBInstanceOptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsPages", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeOrderableDBInstanceOptionsPages), arg0, arg1)
}

// DescribeOrderableDBInstanceOptionsPagesWithContext mocks base method
func (m *MockNeptuneAPI) DescribeOrderableDBInstanceOptionsPagesWithContext(arg0 context.Context, arg1 *neptune.DescribeOrderableDBInstanceOptionsInput, arg2 func(*neptune.DescribeOrderableDBInstanceOptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOrderableDBInstanceOptionsPagesWithContext indicates an expected call of DescribeOrderableDBInstanceOptionsPagesWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeOrderableDBInstanceOptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsPagesWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeOrderableDBInstanceOptionsPagesWithContext), varargs...)
}

// DescribeOrderableDBInstanceOptionsRequest mocks base method
func (m *MockNeptuneAPI) DescribeOrderableDBInstanceOptionsRequest(arg0 *neptune.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *neptune.DescribeOrderableDBInstanceOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeOrderableDBInstanceOptionsOutput)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptionsRequest indicates an expected call of DescribeOrderableDBInstanceOptionsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeOrderableDBInstanceOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeOrderableDBInstanceOptionsRequest), arg0)
}

// DescribeOrderableDBInstanceOptionsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeOrderableDBInstanceOptionsWithContext(arg0 context.Context, arg1 *neptune.DescribeOrderableDBInstanceOptionsInput, arg2 ...request.Option) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeOrderableDBInstanceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptionsWithContext indicates an expected call of DescribeOrderableDBInstanceOptionsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeOrderableDBInstanceOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeOrderableDBInstanceOptionsWithContext), varargs...)
}

// DescribePendingMaintenanceActions mocks base method
func (m *MockNeptuneAPI) DescribePendingMaintenanceActions(arg0 *neptune.DescribePendingMaintenanceActionsInput) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActions", arg0)
	ret0, _ := ret[0].(*neptune.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActions indicates an expected call of DescribePendingMaintenanceActions
func (mr *MockNeptuneAPIMockRecorder) DescribePendingMaintenanceActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActions", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribePendingMaintenanceActions), arg0)
}

// DescribePendingMaintenanceActionsRequest mocks base method
func (m *MockNeptuneAPI) DescribePendingMaintenanceActionsRequest(arg0 *neptune.DescribePendingMaintenanceActionsInput) (*request.Request, *neptune.DescribePendingMaintenanceActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribePendingMaintenanceActionsOutput)
	return ret0, ret1
}

// DescribePendingMaintenanceActionsRequest indicates an expected call of DescribePendingMaintenanceActionsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribePendingMaintenanceActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribePendingMaintenanceActionsRequest), arg0)
}

// DescribePendingMaintenanceActionsWithContext mocks base method
func (m *MockNeptuneAPI) DescribePendingMaintenanceActionsWithContext(arg0 context.Context, arg1 *neptune.DescribePendingMaintenanceActionsInput, arg2 ...request.Option) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActionsWithContext indicates an expected call of DescribePendingMaintenanceActionsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribePendingMaintenanceActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribePendingMaintenanceActionsWithContext), varargs...)
}

// DescribeValidDBInstanceModifications mocks base method
func (m *MockNeptuneAPI) DescribeValidDBInstanceModifications(arg0 *neptune.DescribeValidDBInstanceModificationsInput) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeValidDBInstanceModifications", arg0)
	ret0, _ := ret[0].(*neptune.DescribeValidDBInstanceModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeValidDBInstanceModifications indicates an expected call of DescribeValidDBInstanceModifications
func (mr *MockNeptuneAPIMockRecorder) DescribeValidDBInstanceModifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeValidDBInstanceModifications", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeValidDBInstanceModifications), arg0)
}

// DescribeValidDBInstanceModificationsRequest mocks base method
func (m *MockNeptuneAPI) DescribeValidDBInstanceModificationsRequest(arg0 *neptune.DescribeValidDBInstanceModificationsInput) (*request.Request, *neptune.DescribeValidDBInstanceModificationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeValidDBInstanceModificationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.DescribeValidDBInstanceModificationsOutput)
	return ret0, ret1
}

// DescribeValidDBInstanceModificationsRequest indicates an expected call of DescribeValidDBInstanceModificationsRequest
func (mr *MockNeptuneAPIMockRecorder) DescribeValidDBInstanceModificationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeValidDBInstanceModificationsRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeValidDBInstanceModificationsRequest), arg0)
}

// DescribeValidDBInstanceModificationsWithContext mocks base method
func (m *MockNeptuneAPI) DescribeValidDBInstanceModificationsWithContext(arg0 context.Context, arg1 *neptune.DescribeValidDBInstanceModificationsInput, arg2 ...request.Option) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeValidDBInstanceModificationsWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.DescribeValidDBInstanceModificationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeValidDBInstanceModificationsWithContext indicates an expected call of DescribeValidDBInstanceModificationsWithContext
func (mr *MockNeptuneAPIMockRecorder) DescribeValidDBInstanceModificationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeValidDBInstanceModificationsWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).DescribeValidDBInstanceModificationsWithContext), varargs...)
}

// FailoverDBCluster mocks base method
func (m *MockNeptuneAPI) FailoverDBCluster(arg0 *neptune.FailoverDBClusterInput) (*neptune.FailoverDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.FailoverDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverDBCluster indicates an expected call of FailoverDBCluster
func (mr *MockNeptuneAPIMockRecorder) FailoverDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).FailoverDBCluster), arg0)
}

// FailoverDBClusterRequest mocks base method
func (m *MockNeptuneAPI) FailoverDBClusterRequest(arg0 *neptune.FailoverDBClusterInput) (*request.Request, *neptune.FailoverDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.FailoverDBClusterOutput)
	return ret0, ret1
}

// FailoverDBClusterRequest indicates an expected call of FailoverDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) FailoverDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).FailoverDBClusterRequest), arg0)
}

// FailoverDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) FailoverDBClusterWithContext(arg0 context.Context, arg1 *neptune.FailoverDBClusterInput, arg2 ...request.Option) (*neptune.FailoverDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FailoverDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.FailoverDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverDBClusterWithContext indicates an expected call of FailoverDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) FailoverDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).FailoverDBClusterWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockNeptuneAPI) ListTagsForResource(arg0 *neptune.ListTagsForResourceInput) (*neptune.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*neptune.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockNeptuneAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockNeptuneAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockNeptuneAPI) ListTagsForResourceRequest(arg0 *neptune.ListTagsForResourceInput) (*request.Request, *neptune.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockNeptuneAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockNeptuneAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *neptune.ListTagsForResourceInput, arg2 ...request.Option) (*neptune.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockNeptuneAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ModifyDBCluster mocks base method
func (m *MockNeptuneAPI) ModifyDBCluster(arg0 *neptune.ModifyDBClusterInput) (*neptune.ModifyDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.ModifyDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBCluster indicates an expected call of ModifyDBCluster
func (mr *MockNeptuneAPIMockRecorder) ModifyDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBCluster), arg0)
}

// ModifyDBClusterEndpoint mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterEndpoint(arg0 *neptune.ModifyDBClusterEndpointInput) (*neptune.ModifyDBClusterEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterEndpoint", arg0)
	ret0, _ := ret[0].(*neptune.ModifyDBClusterEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterEndpoint indicates an expected call of ModifyDBClusterEndpoint
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterEndpoint", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterEndpoint), arg0)
}

// ModifyDBClusterEndpointRequest mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterEndpointRequest(arg0 *neptune.ModifyDBClusterEndpointInput) (*request.Request, *neptune.ModifyDBClusterEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ModifyDBClusterEndpointOutput)
	return ret0, ret1
}

// ModifyDBClusterEndpointRequest indicates an expected call of ModifyDBClusterEndpointRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterEndpointRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterEndpointRequest), arg0)
}

// ModifyDBClusterEndpointWithContext mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterEndpointWithContext(arg0 context.Context, arg1 *neptune.ModifyDBClusterEndpointInput, arg2 ...request.Option) (*neptune.ModifyDBClusterEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBClusterEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ModifyDBClusterEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterEndpointWithContext indicates an expected call of ModifyDBClusterEndpointWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterEndpointWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterEndpointWithContext), varargs...)
}

// ModifyDBClusterParameterGroup mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterParameterGroup(arg0 *neptune.ModifyDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.ResetDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterParameterGroup indicates an expected call of ModifyDBClusterParameterGroup
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterParameterGroup), arg0)
}

// ModifyDBClusterParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterParameterGroupRequest(arg0 *neptune.ModifyDBClusterParameterGroupInput) (*request.Request, *neptune.ResetDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ResetDBClusterParameterGroupOutput)
	return ret0, ret1
}

// ModifyDBClusterParameterGroupRequest indicates an expected call of ModifyDBClusterParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterParameterGroupRequest), arg0)
}

// ModifyDBClusterParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *neptune.ModifyDBClusterParameterGroupInput, arg2 ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ResetDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterParameterGroupWithContext indicates an expected call of ModifyDBClusterParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterParameterGroupWithContext), varargs...)
}

// ModifyDBClusterRequest mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterRequest(arg0 *neptune.ModifyDBClusterInput) (*request.Request, *neptune.ModifyDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ModifyDBClusterOutput)
	return ret0, ret1
}

// ModifyDBClusterRequest indicates an expected call of ModifyDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterRequest), arg0)
}

// ModifyDBClusterSnapshotAttribute mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterSnapshotAttribute(arg0 *neptune.ModifyDBClusterSnapshotAttributeInput) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterSnapshotAttribute", arg0)
	ret0, _ := ret[0].(*neptune.ModifyDBClusterSnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterSnapshotAttribute indicates an expected call of ModifyDBClusterSnapshotAttribute
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterSnapshotAttribute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterSnapshotAttribute", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterSnapshotAttribute), arg0)
}

// ModifyDBClusterSnapshotAttributeRequest mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterSnapshotAttributeRequest(arg0 *neptune.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *neptune.ModifyDBClusterSnapshotAttributeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterSnapshotAttributeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ModifyDBClusterSnapshotAttributeOutput)
	return ret0, ret1
}

// ModifyDBClusterSnapshotAttributeRequest indicates an expected call of ModifyDBClusterSnapshotAttributeRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterSnapshotAttributeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterSnapshotAttributeRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterSnapshotAttributeRequest), arg0)
}

// ModifyDBClusterSnapshotAttributeWithContext mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterSnapshotAttributeWithContext(arg0 context.Context, arg1 *neptune.ModifyDBClusterSnapshotAttributeInput, arg2 ...request.Option) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBClusterSnapshotAttributeWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ModifyDBClusterSnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterSnapshotAttributeWithContext indicates an expected call of ModifyDBClusterSnapshotAttributeWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterSnapshotAttributeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterSnapshotAttributeWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterSnapshotAttributeWithContext), varargs...)
}

// ModifyDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) ModifyDBClusterWithContext(arg0 context.Context, arg1 *neptune.ModifyDBClusterInput, arg2 ...request.Option) (*neptune.ModifyDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ModifyDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterWithContext indicates an expected call of ModifyDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBClusterWithContext), varargs...)
}

// ModifyDBInstance mocks base method
func (m *MockNeptuneAPI) ModifyDBInstance(arg0 *neptune.ModifyDBInstanceInput) (*neptune.ModifyDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBInstance", arg0)
	ret0, _ := ret[0].(*neptune.ModifyDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBInstance indicates an expected call of ModifyDBInstance
func (mr *MockNeptuneAPIMockRecorder) ModifyDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBInstance", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBInstance), arg0)
}

// ModifyDBInstanceRequest mocks base method
func (m *MockNeptuneAPI) ModifyDBInstanceRequest(arg0 *neptune.ModifyDBInstanceInput) (*request.Request, *neptune.ModifyDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ModifyDBInstanceOutput)
	return ret0, ret1
}

// ModifyDBInstanceRequest indicates an expected call of ModifyDBInstanceRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBInstanceRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBInstanceRequest), arg0)
}

// ModifyDBInstanceWithContext mocks base method
func (m *MockNeptuneAPI) ModifyDBInstanceWithContext(arg0 context.Context, arg1 *neptune.ModifyDBInstanceInput, arg2 ...request.Option) (*neptune.ModifyDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ModifyDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBInstanceWithContext indicates an expected call of ModifyDBInstanceWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBInstanceWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBInstanceWithContext), varargs...)
}

// ModifyDBParameterGroup mocks base method
func (m *MockNeptuneAPI) ModifyDBParameterGroup(arg0 *neptune.ModifyDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.ResetDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBParameterGroup indicates an expected call of ModifyDBParameterGroup
func (mr *MockNeptuneAPIMockRecorder) ModifyDBParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBParameterGroup), arg0)
}

// ModifyDBParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) ModifyDBParameterGroupRequest(arg0 *neptune.ModifyDBParameterGroupInput) (*request.Request, *neptune.ResetDBParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ResetDBParameterGroupOutput)
	return ret0, ret1
}

// ModifyDBParameterGroupRequest indicates an expected call of ModifyDBParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyDBParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBParameterGroupRequest), arg0)
}

// ModifyDBParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) ModifyDBParameterGroupWithContext(arg0 context.Context, arg1 *neptune.ModifyDBParameterGroupInput, arg2 ...request.Option) (*neptune.ResetDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ResetDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBParameterGroupWithContext indicates an expected call of ModifyDBParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyDBParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBParameterGroupWithContext), varargs...)
}

// ModifyDBSubnetGroup mocks base method
func (m *MockNeptuneAPI) ModifyDBSubnetGroup(arg0 *neptune.ModifyDBSubnetGroupInput) (*neptune.ModifyDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBSubnetGroup", arg0)
	ret0, _ := ret[0].(*neptune.ModifyDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBSubnetGroup indicates an expected call of ModifyDBSubnetGroup
func (mr *MockNeptuneAPIMockRecorder) ModifyDBSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBSubnetGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBSubnetGroup), arg0)
}

// ModifyDBSubnetGroupRequest mocks base method
func (m *MockNeptuneAPI) ModifyDBSubnetGroupRequest(arg0 *neptune.ModifyDBSubnetGroupInput) (*request.Request, *neptune.ModifyDBSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ModifyDBSubnetGroupOutput)
	return ret0, ret1
}

// ModifyDBSubnetGroupRequest indicates an expected call of ModifyDBSubnetGroupRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyDBSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBSubnetGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBSubnetGroupRequest), arg0)
}

// ModifyDBSubnetGroupWithContext mocks base method
func (m *MockNeptuneAPI) ModifyDBSubnetGroupWithContext(arg0 context.Context, arg1 *neptune.ModifyDBSubnetGroupInput, arg2 ...request.Option) (*neptune.ModifyDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ModifyDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBSubnetGroupWithContext indicates an expected call of ModifyDBSubnetGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyDBSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBSubnetGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyDBSubnetGroupWithContext), varargs...)
}

// ModifyEventSubscription mocks base method
func (m *MockNeptuneAPI) ModifyEventSubscription(arg0 *neptune.ModifyEventSubscriptionInput) (*neptune.ModifyEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEventSubscription", arg0)
	ret0, _ := ret[0].(*neptune.ModifyEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEventSubscription indicates an expected call of ModifyEventSubscription
func (mr *MockNeptuneAPIMockRecorder) ModifyEventSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEventSubscription", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyEventSubscription), arg0)
}

// ModifyEventSubscriptionRequest mocks base method
func (m *MockNeptuneAPI) ModifyEventSubscriptionRequest(arg0 *neptune.ModifyEventSubscriptionInput) (*request.Request, *neptune.ModifyEventSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyEventSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ModifyEventSubscriptionOutput)
	return ret0, ret1
}

// ModifyEventSubscriptionRequest indicates an expected call of ModifyEventSubscriptionRequest
func (mr *MockNeptuneAPIMockRecorder) ModifyEventSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEventSubscriptionRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyEventSubscriptionRequest), arg0)
}

// ModifyEventSubscriptionWithContext mocks base method
func (m *MockNeptuneAPI) ModifyEventSubscriptionWithContext(arg0 context.Context, arg1 *neptune.ModifyEventSubscriptionInput, arg2 ...request.Option) (*neptune.ModifyEventSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyEventSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ModifyEventSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyEventSubscriptionWithContext indicates an expected call of ModifyEventSubscriptionWithContext
func (mr *MockNeptuneAPIMockRecorder) ModifyEventSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyEventSubscriptionWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ModifyEventSubscriptionWithContext), varargs...)
}

// PromoteReadReplicaDBCluster mocks base method
func (m *MockNeptuneAPI) PromoteReadReplicaDBCluster(arg0 *neptune.PromoteReadReplicaDBClusterInput) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteReadReplicaDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.PromoteReadReplicaDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteReadReplicaDBCluster indicates an expected call of PromoteReadReplicaDBCluster
func (mr *MockNeptuneAPIMockRecorder) PromoteReadReplicaDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteReadReplicaDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).PromoteReadReplicaDBCluster), arg0)
}

// PromoteReadReplicaDBClusterRequest mocks base method
func (m *MockNeptuneAPI) PromoteReadReplicaDBClusterRequest(arg0 *neptune.PromoteReadReplicaDBClusterInput) (*request.Request, *neptune.PromoteReadReplicaDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteReadReplicaDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.PromoteReadReplicaDBClusterOutput)
	return ret0, ret1
}

// PromoteReadReplicaDBClusterRequest indicates an expected call of PromoteReadReplicaDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) PromoteReadReplicaDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteReadReplicaDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).PromoteReadReplicaDBClusterRequest), arg0)
}

// PromoteReadReplicaDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) PromoteReadReplicaDBClusterWithContext(arg0 context.Context, arg1 *neptune.PromoteReadReplicaDBClusterInput, arg2 ...request.Option) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromoteReadReplicaDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.PromoteReadReplicaDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteReadReplicaDBClusterWithContext indicates an expected call of PromoteReadReplicaDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) PromoteReadReplicaDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteReadReplicaDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).PromoteReadReplicaDBClusterWithContext), varargs...)
}

// RebootDBInstance mocks base method
func (m *MockNeptuneAPI) RebootDBInstance(arg0 *neptune.RebootDBInstanceInput) (*neptune.RebootDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootDBInstance", arg0)
	ret0, _ := ret[0].(*neptune.RebootDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootDBInstance indicates an expected call of RebootDBInstance
func (mr *MockNeptuneAPIMockRecorder) RebootDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootDBInstance", reflect.TypeOf((*MockNeptuneAPI)(nil).RebootDBInstance), arg0)
}

// RebootDBInstanceRequest mocks base method
func (m *MockNeptuneAPI) RebootDBInstanceRequest(arg0 *neptune.RebootDBInstanceInput) (*request.Request, *neptune.RebootDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.RebootDBInstanceOutput)
	return ret0, ret1
}

// RebootDBInstanceRequest indicates an expected call of RebootDBInstanceRequest
func (mr *MockNeptuneAPIMockRecorder) RebootDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootDBInstanceRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).RebootDBInstanceRequest), arg0)
}

// RebootDBInstanceWithContext mocks base method
func (m *MockNeptuneAPI) RebootDBInstanceWithContext(arg0 context.Context, arg1 *neptune.RebootDBInstanceInput, arg2 ...request.Option) (*neptune.RebootDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.RebootDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootDBInstanceWithContext indicates an expected call of RebootDBInstanceWithContext
func (mr *MockNeptuneAPIMockRecorder) RebootDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootDBInstanceWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).RebootDBInstanceWithContext), varargs...)
}

// RemoveRoleFromDBCluster mocks base method
func (m *MockNeptuneAPI) RemoveRoleFromDBCluster(arg0 *neptune.RemoveRoleFromDBClusterInput) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleFromDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.RemoveRoleFromDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoleFromDBCluster indicates an expected call of RemoveRoleFromDBCluster
func (mr *MockNeptuneAPIMockRecorder) RemoveRoleFromDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveRoleFromDBCluster), arg0)
}

// RemoveRoleFromDBClusterRequest mocks base method
func (m *MockNeptuneAPI) RemoveRoleFromDBClusterRequest(arg0 *neptune.RemoveRoleFromDBClusterInput) (*request.Request, *neptune.RemoveRoleFromDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRoleFromDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.RemoveRoleFromDBClusterOutput)
	return ret0, ret1
}

// RemoveRoleFromDBClusterRequest indicates an expected call of RemoveRoleFromDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) RemoveRoleFromDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveRoleFromDBClusterRequest), arg0)
}

// RemoveRoleFromDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) RemoveRoleFromDBClusterWithContext(arg0 context.Context, arg1 *neptune.RemoveRoleFromDBClusterInput, arg2 ...request.Option) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveRoleFromDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.RemoveRoleFromDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRoleFromDBClusterWithContext indicates an expected call of RemoveRoleFromDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) RemoveRoleFromDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRoleFromDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveRoleFromDBClusterWithContext), varargs...)
}

// RemoveSourceIdentifierFromSubscription mocks base method
func (m *MockNeptuneAPI) RemoveSourceIdentifierFromSubscription(arg0 *neptune.RemoveSourceIdentifierFromSubscriptionInput) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSourceIdentifierFromSubscription", arg0)
	ret0, _ := ret[0].(*neptune.RemoveSourceIdentifierFromSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSourceIdentifierFromSubscription indicates an expected call of RemoveSourceIdentifierFromSubscription
func (mr *MockNeptuneAPIMockRecorder) RemoveSourceIdentifierFromSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSourceIdentifierFromSubscription", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveSourceIdentifierFromSubscription), arg0)
}

// RemoveSourceIdentifierFromSubscriptionRequest mocks base method
func (m *MockNeptuneAPI) RemoveSourceIdentifierFromSubscriptionRequest(arg0 *neptune.RemoveSourceIdentifierFromSubscriptionInput) (*request.Request, *neptune.RemoveSourceIdentifierFromSubscriptionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSourceIdentifierFromSubscriptionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.RemoveSourceIdentifierFromSubscriptionOutput)
	return ret0, ret1
}

// RemoveSourceIdentifierFromSubscriptionRequest indicates an expected call of RemoveSourceIdentifierFromSubscriptionRequest
func (mr *MockNeptuneAPIMockRecorder) RemoveSourceIdentifierFromSubscriptionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSourceIdentifierFromSubscriptionRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveSourceIdentifierFromSubscriptionRequest), arg0)
}

// RemoveSourceIdentifierFromSubscriptionWithContext mocks base method
func (m *MockNeptuneAPI) RemoveSourceIdentifierFromSubscriptionWithContext(arg0 context.Context, arg1 *neptune.RemoveSourceIdentifierFromSubscriptionInput, arg2 ...request.Option) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSourceIdentifierFromSubscriptionWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.RemoveSourceIdentifierFromSubscriptionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSourceIdentifierFromSubscriptionWithContext indicates an expected call of RemoveSourceIdentifierFromSubscriptionWithContext
func (mr *MockNeptuneAPIMockRecorder) RemoveSourceIdentifierFromSubscriptionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSourceIdentifierFromSubscriptionWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveSourceIdentifierFromSubscriptionWithContext), varargs...)
}

// RemoveTagsFromResource mocks base method
func (m *MockNeptuneAPI) RemoveTagsFromResource(arg0 *neptune.RemoveTagsFromResourceInput) (*neptune.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResource", arg0)
	ret0, _ := ret[0].(*neptune.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResource indicates an expected call of RemoveTagsFromResource
func (mr *MockNeptuneAPIMockRecorder) RemoveTagsFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResource", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveTagsFromResource), arg0)
}

// RemoveTagsFromResourceRequest mocks base method
func (m *MockNeptuneAPI) RemoveTagsFromResourceRequest(arg0 *neptune.RemoveTagsFromResourceInput) (*request.Request, *neptune.RemoveTagsFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.RemoveTagsFromResourceOutput)
	return ret0, ret1
}

// RemoveTagsFromResourceRequest indicates an expected call of RemoveTagsFromResourceRequest
func (mr *MockNeptuneAPIMockRecorder) RemoveTagsFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveTagsFromResourceRequest), arg0)
}

// RemoveTagsFromResourceWithContext mocks base method
func (m *MockNeptuneAPI) RemoveTagsFromResourceWithContext(arg0 context.Context, arg1 *neptune.RemoveTagsFromResourceInput, arg2 ...request.Option) (*neptune.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResourceWithContext indicates an expected call of RemoveTagsFromResourceWithContext
func (mr *MockNeptuneAPIMockRecorder) RemoveTagsFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).RemoveTagsFromResourceWithContext), varargs...)
}

// ResetDBClusterParameterGroup mocks base method
func (m *MockNeptuneAPI) ResetDBClusterParameterGroup(arg0 *neptune.ResetDBClusterParameterGroupInput) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.ResetDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBClusterParameterGroup indicates an expected call of ResetDBClusterParameterGroup
func (mr *MockNeptuneAPIMockRecorder) ResetDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBClusterParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).ResetDBClusterParameterGroup), arg0)
}

// ResetDBClusterParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) ResetDBClusterParameterGroupRequest(arg0 *neptune.ResetDBClusterParameterGroupInput) (*request.Request, *neptune.ResetDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ResetDBClusterParameterGroupOutput)
	return ret0, ret1
}

// ResetDBClusterParameterGroupRequest indicates an expected call of ResetDBClusterParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) ResetDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBClusterParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ResetDBClusterParameterGroupRequest), arg0)
}

// ResetDBClusterParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) ResetDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *neptune.ResetDBClusterParameterGroupInput, arg2 ...request.Option) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ResetDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBClusterParameterGroupWithContext indicates an expected call of ResetDBClusterParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) ResetDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBClusterParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ResetDBClusterParameterGroupWithContext), varargs...)
}

// ResetDBParameterGroup mocks base method
func (m *MockNeptuneAPI) ResetDBParameterGroup(arg0 *neptune.ResetDBParameterGroupInput) (*neptune.ResetDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBParameterGroup", arg0)
	ret0, _ := ret[0].(*neptune.ResetDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBParameterGroup indicates an expected call of ResetDBParameterGroup
func (mr *MockNeptuneAPIMockRecorder) ResetDBParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBParameterGroup", reflect.TypeOf((*MockNeptuneAPI)(nil).ResetDBParameterGroup), arg0)
}

// ResetDBParameterGroupRequest mocks base method
func (m *MockNeptuneAPI) ResetDBParameterGroupRequest(arg0 *neptune.ResetDBParameterGroupInput) (*request.Request, *neptune.ResetDBParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.ResetDBParameterGroupOutput)
	return ret0, ret1
}

// ResetDBParameterGroupRequest indicates an expected call of ResetDBParameterGroupRequest
func (mr *MockNeptuneAPIMockRecorder) ResetDBParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBParameterGroupRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).ResetDBParameterGroupRequest), arg0)
}

// ResetDBParameterGroupWithContext mocks base method
func (m *MockNeptuneAPI) ResetDBParameterGroupWithContext(arg0 context.Context, arg1 *neptune.ResetDBParameterGroupInput, arg2 ...request.Option) (*neptune.ResetDBParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetDBParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.ResetDBParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBParameterGroupWithContext indicates an expected call of ResetDBParameterGroupWithContext
func (mr *MockNeptuneAPIMockRecorder) ResetDBParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBParameterGroupWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).ResetDBParameterGroupWithContext), varargs...)
}

// RestoreDBClusterFromSnapshot mocks base method
func (m *MockNeptuneAPI) RestoreDBClusterFromSnapshot(arg0 *neptune.RestoreDBClusterFromSnapshotInput) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterFromSnapshot", arg0)
	ret0, _ := ret[0].(*neptune.RestoreDBClusterFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterFromSnapshot indicates an expected call of RestoreDBClusterFromSnapshot
func (mr *MockNeptuneAPIMockRecorder) RestoreDBClusterFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterFromSnapshot", reflect.TypeOf((*MockNeptuneAPI)(nil).RestoreDBClusterFromSnapshot), arg0)
}

// RestoreDBClusterFromSnapshotRequest mocks base method
func (m *MockNeptuneAPI) RestoreDBClusterFromSnapshotRequest(arg0 *neptune.RestoreDBClusterFromSnapshotInput) (*request.Request, *neptune.RestoreDBClusterFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.RestoreDBClusterFromSnapshotOutput)
	return ret0, ret1
}

// RestoreDBClusterFromSnapshotRequest indicates an expected call of RestoreDBClusterFromSnapshotRequest
func (mr *MockNeptuneAPIMockRecorder) RestoreDBClusterFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterFromSnapshotRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).RestoreDBClusterFromSnapshotRequest), arg0)
}

// RestoreDBClusterFromSnapshotWithContext mocks base method
func (m *MockNeptuneAPI) RestoreDBClusterFromSnapshotWithContext(arg0 context.Context, arg1 *neptune.RestoreDBClusterFromSnapshotInput, arg2 ...request.Option) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreDBClusterFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.RestoreDBClusterFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterFromSnapshotWithContext indicates an expected call of RestoreDBClusterFromSnapshotWithContext
func (mr *MockNeptuneAPIMockRecorder) RestoreDBClusterFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterFromSnapshotWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).RestoreDBClusterFromSnapshotWithContext), varargs...)
}

// RestoreDBClusterToPointInTime mocks base method
func (m *MockNeptuneAPI) RestoreDBClusterToPointInTime(arg0 *neptune.RestoreDBClusterToPointInTimeInput) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterToPointInTime", arg0)
	ret0, _ := ret[0].(*neptune.RestoreDBClusterToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterToPointInTime indicates an expected call of RestoreDBClusterToPointInTime
func (mr *MockNeptuneAPIMockRecorder) RestoreDBClusterToPointInTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterToPointInTime", reflect.TypeOf((*MockNeptuneAPI)(nil).RestoreDBClusterToPointInTime), arg0)
}

// RestoreDBClusterToPointInTimeRequest mocks base method
func (m *MockNeptuneAPI) RestoreDBClusterToPointInTimeRequest(arg0 *neptune.RestoreDBClusterToPointInTimeInput) (*request.Request, *neptune.RestoreDBClusterToPointInTimeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterToPointInTimeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.RestoreDBClusterToPointInTimeOutput)
	return ret0, ret1
}

// RestoreDBClusterToPointInTimeRequest indicates an expected call of RestoreDBClusterToPointInTimeRequest
func (mr *MockNeptuneAPIMockRecorder) RestoreDBClusterToPointInTimeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterToPointInTimeRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).RestoreDBClusterToPointInTimeRequest), arg0)
}

// RestoreDBClusterToPointInTimeWithContext mocks base method
func (m *MockNeptuneAPI) RestoreDBClusterToPointInTimeWithContext(arg0 context.Context, arg1 *neptune.RestoreDBClusterToPointInTimeInput, arg2 ...request.Option) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreDBClusterToPointInTimeWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.RestoreDBClusterToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterToPointInTimeWithContext indicates an expected call of RestoreDBClusterToPointInTimeWithContext
func (mr *MockNeptuneAPIMockRecorder) RestoreDBClusterToPointInTimeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterToPointInTimeWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).RestoreDBClusterToPointInTimeWithContext), varargs...)
}

// StartDBCluster mocks base method
func (m *MockNeptuneAPI) StartDBCluster(arg0 *neptune.StartDBClusterInput) (*neptune.StartDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.StartDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBCluster indicates an expected call of StartDBCluster
func (mr *MockNeptuneAPIMockRecorder) StartDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).StartDBCluster), arg0)
}

// StartDBClusterRequest mocks base method
func (m *MockNeptuneAPI) StartDBClusterRequest(arg0 *neptune.StartDBClusterInput) (*request.Request, *neptune.StartDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.StartDBClusterOutput)
	return ret0, ret1
}

// StartDBClusterRequest indicates an expected call of StartDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) StartDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).StartDBClusterRequest), arg0)
}

// StartDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) StartDBClusterWithContext(arg0 context.Context, arg1 *neptune.StartDBClusterInput, arg2 ...request.Option) (*neptune.StartDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.StartDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBClusterWithContext indicates an expected call of StartDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) StartDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).StartDBClusterWithContext), varargs...)
}

// StopDBCluster mocks base method
func (m *MockNeptuneAPI) StopDBCluster(arg0 *neptune.StopDBClusterInput) (*neptune.StopDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDBCluster", arg0)
	ret0, _ := ret[0].(*neptune.StopDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBCluster indicates an expected call of StopDBCluster
func (mr *MockNeptuneAPIMockRecorder) StopDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBCluster", reflect.TypeOf((*MockNeptuneAPI)(nil).StopDBCluster), arg0)
}

// StopDBClusterRequest mocks base method
func (m *MockNeptuneAPI) StopDBClusterRequest(arg0 *neptune.StopDBClusterInput) (*request.Request, *neptune.StopDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*neptune.StopDBClusterOutput)
	return ret0, ret1
}

// StopDBClusterRequest indicates an expected call of StopDBClusterRequest
func (mr *MockNeptuneAPIMockRecorder) StopDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBClusterRequest", reflect.TypeOf((*MockNeptuneAPI)(nil).StopDBClusterRequest), arg0)
}

// StopDBClusterWithContext mocks base method
func (m *MockNeptuneAPI) StopDBClusterWithContext(arg0 context.Context, arg1 *neptune.StopDBClusterInput, arg2 ...request.Option) (*neptune.StopDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*neptune.StopDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBClusterWithContext indicates an expected call of StopDBClusterWithContext
func (mr *MockNeptuneAPIMockRecorder) StopDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBClusterWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).StopDBClusterWithContext), varargs...)
}

// WaitUntilDBInstanceAvailable mocks base method
func (m *MockNeptuneAPI) WaitUntilDBInstanceAvailable(arg0 *neptune.DescribeDBInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceAvailable indicates an expected call of WaitUntilDBInstanceAvailable
func (mr *MockNeptuneAPIMockRecorder) WaitUntilDBInstanceAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceAvailable", reflect.TypeOf((*MockNeptuneAPI)(nil).WaitUntilDBInstanceAvailable), arg0)
}

// WaitUntilDBInstanceAvailableWithContext mocks base method
func (m *MockNeptuneAPI) WaitUntilDBInstanceAvailableWithContext(arg0 context.Context, arg1 *neptune.DescribeDBInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceAvailableWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceAvailableWithContext indicates an expected call of WaitUntilDBInstanceAvailableWithContext
func (mr *MockNeptuneAPIMockRecorder) WaitUntilDBInstanceAvailableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceAvailableWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).WaitUntilDBInstanceAvailableWithContext), varargs...)
}

// WaitUntilDBInstanceDeleted mocks base method
func (m *MockNeptuneAPI) WaitUntilDBInstanceDeleted(arg0 *neptune.DescribeDBInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceDeleted indicates an expected call of WaitUntilDBInstanceDeleted
func (mr *MockNeptuneAPIMockRecorder) WaitUntilDBInstanceDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceDeleted", reflect.TypeOf((*MockNeptuneAPI)(nil).WaitUntilDBInstanceDeleted), arg0)
}

// WaitUntilDBInstanceDeletedWithContext mocks base method
func (m *MockNeptuneAPI) WaitUntilDBInstanceDeletedWithContext(arg0 context.Context, arg1 *neptune.DescribeDBInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceDeletedWithContext indicates an expected call of WaitUntilDBInstanceDeletedWithContext
func (mr *MockNeptuneAPIMockRecorder) WaitUntilDBInstanceDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceDeletedWithContext", reflect.TypeOf((*MockNeptuneAPI)(nil).WaitUntilDBInstanceDeletedWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/snowball/snowballiface (interfaces: SnowballAPI)

// Package snowballmock is a generated GoMock package.
package snowballmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	snowball "github.com/aws/aws-sdk-go/service/snowball"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSnowballAPI is a mock of SnowballAPI interface
type MockSnowballAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSnowballAPIMockRecorder
}

// MockSnowballAPIMockRecorder is the mock recorder for MockSnowballAPI
type MockSnowballAPIMockRecorder struct {
	mock *MockSnowballAPI
}

// NewMockSnowballAPI creates a new mock instance
func NewMockSnowballAPI(ctrl *gomock.Controller) *MockSnowballAPI {
	mock := &MockSnowballAPI{ctrl: ctrl}
	mock.recorder = &MockSnowballAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnowballAPI) EXPECT() *MockSnowballAPIMockRecorder {
	return m.recorder
}

// CancelCluster mocks base method
func (m *MockSnowballAPI) CancelCluster(arg0 *snowball.CancelClusterInput) (*snowball.CancelClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCluster", arg0)
	ret0, _ := ret[0].(*snowball.CancelClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelCluster indicates an expected call of CancelCluster
func (mr *MockSnowballAPIMockRecorder) CancelCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCluster", reflect.TypeOf((*MockSnowballAPI)(nil).CancelCluster), arg0)
}

// CancelClusterRequest mocks base method
func (m *MockSnowballAPI) CancelClusterRequest(arg0 *snowball.CancelClusterInput) (*request.Request, *snowball.CancelClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.CancelClusterOutput)
	return ret0, ret1
}

// CancelClusterRequest indicates an expected call of CancelClusterRequest
func (mr *MockSnowballAPIMockRecorder) CancelClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelClusterRequest", reflect.TypeOf((*MockSnowballAPI)(nil).CancelClusterRequest), arg0)
}

// CancelClusterWithContext mocks base method
func (m *MockSnowballAPI) CancelClusterWithContext(arg0 context.Context, arg1 *snowball.CancelClusterInput, arg2 ...request.Option) (*snowball.CancelClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelClusterWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.CancelClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelClusterWithContext indicates an expected call of CancelClusterWithContext
func (mr *MockSnowballAPIMockRecorder) CancelClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelClusterWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).CancelClusterWithContext), varargs...)
}

// CancelJob mocks base method
func (m *MockSnowballAPI) CancelJob(arg0 *snowball.CancelJobInput) (*snowball.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0)
	ret0, _ := ret[0].(*snowball.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob
func (mr *MockSnowballAPIMockRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockSnowballAPI)(nil).CancelJob), arg0)
}

// CancelJobRequest mocks base method
func (m *MockSnowballAPI) CancelJobRequest(arg0 *snowball.CancelJobInput) (*request.Request, *snowball.CancelJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.CancelJobOutput)
	return ret0, ret1
}

// CancelJobRequest indicates an expected call of CancelJobRequest
func (mr *MockSnowballAPIMockRecorder) CancelJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRequest", reflect.TypeOf((*MockSnowballAPI)(nil).CancelJobRequest), arg0)
}

// CancelJobWithContext mocks base method
func (m *MockSnowballAPI) CancelJobWithContext(arg0 context.Context, arg1 *snowball.CancelJobInput, arg2 ...request.Option) (*snowball.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobWithContext indicates an expected call of CancelJobWithContext
func (mr *MockSnowballAPIMockRecorder) CancelJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).CancelJobWithContext), varargs...)
}

// CreateAddress mocks base method
func (m *MockSnowballAPI) CreateAddress(arg0 *snowball.CreateAddressInput) (*snowball.CreateAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0)
	ret0, _ := ret[0].(*snowball.CreateAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress
func (mr *MockSnowballAPIMockRecorder) CreateAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockSnowballAPI)(nil).CreateAddress), arg0)
}

// CreateAddressRequest mocks base method
func (m *MockSnowballAPI) CreateAddressRequest(arg0 *snowball.CreateAddressInput) (*request.Request, *snowball.CreateAddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.CreateAddressOutput)
	return ret0, ret1
}

// CreateAddressRequest indicates an expected call of CreateAddressRequest
func (mr *MockSnowballAPIMockRecorder) CreateAddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddressRequest", reflect.TypeOf((*MockSnowballAPI)(nil).CreateAddressRequest), arg0)
}

// CreateAddressWithContext mocks base method
func (m *MockSnowballAPI) CreateAddressWithContext(arg0 context.Context, arg1 *snowball.CreateAddressInput, arg2 ...request.Option) (*snowball.CreateAddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAddressWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.CreateAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddressWithContext indicates an expected call of CreateAddressWithContext
func (mr *MockSnowballAPIMockRecorder) CreateAddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddressWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).CreateAddressWithContext), varargs...)
}

// CreateCluster mocks base method
func (m *MockSnowballAPI) CreateCluster(arg0 *snowball.CreateClusterInput) (*snowball.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0)
	ret0, _ := ret[0].(*snowball.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster
func (mr *MockSnowballAPIMockRecorder) CreateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockSnowballAPI)(nil).CreateCluster), arg0)
}

// CreateClusterRequest mocks base method
func (m *MockSnowballAPI) CreateClusterRequest(arg0 *snowball.CreateClusterInput) (*request.Request, *snowball.CreateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.CreateClusterOutput)
	return ret0, ret1
}

// CreateClusterRequest indicates an expected call of CreateClusterRequest
func (mr *MockSnowballAPIMockRecorder) CreateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRequest", reflect.TypeOf((*MockSnowballAPI)(nil).CreateClusterRequest), arg0)
}

// CreateClusterWithContext mocks base method
func (m *MockSnowballAPI) CreateClusterWithContext(arg0 context.Context, arg1 *snowball.CreateClusterInput, arg2 ...request.Option) (*snowball.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterWithContext indicates an expected call of CreateClusterWithContext
func (mr *MockSnowballAPIMockRecorder) CreateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).CreateClusterWithContext), varargs...)
}

// CreateJob mocks base method
func (m *MockSnowballAPI) CreateJob(arg0 *snowball.CreateJobInput) (*snowball.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*snowball.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob
func (mr *MockSnowballAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockSnowballAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method
func (m *MockSnowballAPI) CreateJobRequest(arg0 *snowball.CreateJobInput) (*request.Request, *snowball.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest
func (mr *MockSnowballAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockSnowballAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobWithContext mocks base method
func (m *MockSnowballAPI) CreateJobWithContext(arg0 context.Context, arg1 *snowball.CreateJobInput, arg2 ...request.Option) (*snowball.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext
func (mr *MockSnowballAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).CreateJobWithContext), varargs...)
}

// CreateReturnShippingLabel mocks base method
func (m *MockSnowballAPI) CreateReturnShippingLabel(arg0 *snowball.CreateReturnShippingLabelInput) (*snowball.CreateReturnShippingLabelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReturnShippingLabel", arg0)
	ret0, _ := ret[0].(*snowball.CreateReturnShippingLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReturnShippingLabel indicates an expected call of CreateReturnShippingLabel
func (mr *MockSnowballAPIMockRecorder) CreateReturnShippingLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReturnShippingLabel", reflect.TypeOf((*MockSnowballAPI)(nil).CreateReturnShippingLabel), arg0)
}

// CreateReturnShippingLabelRequest mocks base method
func (m *MockSnowballAPI) CreateReturnShippingLabelRequest(arg0 *snowball.CreateReturnShippingLabelInput) (*request.Request, *snowball.CreateReturnShippingLabelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReturnShippingLabelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.CreateReturnShippingLabelOutput)
	return ret0, ret1
}

// CreateReturnShippingLabelRequest indicates an expected call of CreateReturnShippingLabelRequest
func (mr *MockSnowballAPIMockRecorder) CreateReturnShippingLabelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReturnShippingLabelRequest", reflect.TypeOf((*MockSnowballAPI)(nil).CreateReturnShippingLabelRequest), arg0)
}

// CreateReturnShippingLabelWithContext mocks base method
func (m *MockSnowballAPI) CreateReturnShippingLabelWithContext(arg0 context.Context, arg1 *snowball.CreateReturnShippingLabelInput, arg2 ...request.Option) (*snowball.CreateReturnShippingLabelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReturnShippingLabelWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.CreateReturnShippingLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReturnShippingLabelWithContext indicates an expected call of CreateReturnShippingLabelWithContext
func (mr *MockSnowballAPIMockRecorder) CreateReturnShippingLabelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReturnShippingLabelWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).CreateReturnShippingLabelWithContext), varargs...)
}

// DescribeAddress mocks base method
func (m *MockSnowballAPI) DescribeAddress(arg0 *snowball.DescribeAddressInput) (*snowball.DescribeAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAddress", arg0)
	ret0, _ := ret[0].(*snowball.DescribeAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAddress indicates an expected call of DescribeAddress
func (mr *MockSnowballAPIMockRecorder) DescribeAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddress", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddress), arg0)
}

// DescribeAddressRequest mocks base method
func (m *MockSnowballAPI) DescribeAddressRequest(arg0 *snowball.DescribeAddressInput) (*request.Request, *snowball.DescribeAddressOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAddressRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.DescribeAddressOutput)
	return ret0, ret1
}

// DescribeAddressRequest indicates an expected call of DescribeAddressRequest
func (mr *MockSnowballAPIMockRecorder) DescribeAddressRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressRequest", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddressRequest), arg0)
}

// DescribeAddressWithContext mocks base method
func (m *MockSnowballAPI) DescribeAddressWithContext(arg0 context.Context, arg1 *snowball.DescribeAddressInput, arg2 ...request.Option) (*snowball.DescribeAddressOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAddressWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.DescribeAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAddressWithContext indicates an expected call of DescribeAddressWithContext
func (mr *MockSnowballAPIMockRecorder) DescribeAddressWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddressWithContext), varargs...)
}

// DescribeAddresses mocks base method
func (m *MockSnowballAPI) DescribeAddresses(arg0 *snowball.DescribeAddressesInput) (*snowball.DescribeAddressesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAddresses", arg0)
	ret0, _ := ret[0].(*snowball.DescribeAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAddresses indicates an expected call of DescribeAddresses
func (mr *MockSnowballAPIMockRecorder) DescribeAddresses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddresses", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddresses), arg0)
}

// DescribeAddressesPages mocks base method
func (m *MockSnowballAPI) DescribeAddressesPages(arg0 *snowball.DescribeAddressesInput, arg1 func(*snowball.DescribeAddressesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAddressesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAddressesPages indicates an expected call of DescribeAddressesPages
func (mr *MockSnowballAPIMockRecorder) DescribeAddressesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressesPages", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddressesPages), arg0, arg1)
}

// DescribeAddressesPagesWithContext mocks base method
func (m *MockSnowballAPI) DescribeAddressesPagesWithContext(arg0 context.Context, arg1 *snowball.DescribeAddressesInput, arg2 func(*snowball.DescribeAddressesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAddressesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAddressesPagesWithContext indicates an expected call of DescribeAddressesPagesWithContext
func (mr *MockSnowballAPIMockRecorder) DescribeAddressesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressesPagesWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddressesPagesWithContext), varargs...)
}

// DescribeAddressesRequest mocks base method
func (m *MockSnowballAPI) DescribeAddressesRequest(arg0 *snowball.DescribeAddressesInput) (*request.Request, *snowball.DescribeAddressesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAddressesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.DescribeAddressesOutput)
	return ret0, ret1
}

// DescribeAddressesRequest indicates an expected call of DescribeAddressesRequest
func (mr *MockSnowballAPIMockRecorder) DescribeAddressesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressesRequest", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddressesRequest), arg0)
}

// DescribeAddressesWithContext mocks base method
func (m *MockSnowballAPI) DescribeAddressesWithContext(arg0 context.Context, arg1 *snowball.DescribeAddressesInput, arg2 ...request.Option) (*snowball.DescribeAddressesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAddressesWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.DescribeAddressesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAddressesWithContext indicates an expected call of DescribeAddressesWithContext
func (mr *MockSnowballAPIMockRecorder) DescribeAddressesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAddressesWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeAddressesWithContext), varargs...)
}

// DescribeCluster mocks base method
func (m *MockSnowballAPI) DescribeCluster(arg0 *snowball.DescribeClusterInput) (*snowball.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCluster", arg0)
	ret0, _ := ret[0].(*snowball.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCluster indicates an expected call of DescribeCluster
func (mr *MockSnowballAPIMockRecorder) DescribeCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCluster", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeCluster), arg0)
}

// DescribeClusterRequest mocks base method
func (m *MockSnowballAPI) DescribeClusterRequest(arg0 *snowball.DescribeClusterInput) (*request.Request, *snowball.DescribeClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.DescribeClusterOutput)
	return ret0, ret1
}

// DescribeClusterRequest indicates an expected call of DescribeClusterRequest
func (mr *MockSnowballAPIMockRecorder) DescribeClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterRequest", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeClusterRequest), arg0)
}

// DescribeClusterWithContext mocks base method
func (m *MockSnowballAPI) DescribeClusterWithContext(arg0 context.Context, arg1 *snowball.DescribeClusterInput, arg2 ...request.Option) (*snowball.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClusterWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusterWithContext indicates an expected call of DescribeClusterWithContext
func (mr *MockSnowballAPIMockRecorder) DescribeClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusterWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeClusterWithContext), varargs...)
}

// DescribeJob mocks base method
func (m *MockSnowballAPI) DescribeJob(arg0 *snowball.DescribeJobInput) (*snowball.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJob", arg0)
	ret0, _ := ret[0].(*snowball.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJob indicates an expected call of DescribeJob
func (mr *MockSnowballAPIMockRecorder) DescribeJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJob", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeJob), arg0)
}

// DescribeJobRequest mocks base method
func (m *MockSnowballAPI) DescribeJobRequest(arg0 *snowball.DescribeJobInput) (*request.Request, *snowball.DescribeJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.DescribeJobOutput)
	return ret0, ret1
}

// DescribeJobRequest indicates an expected call of DescribeJobRequest
func (mr *MockSnowballAPIMockRecorder) DescribeJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobRequest", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeJobRequest), arg0)
}

// DescribeJobWithContext mocks base method
func (m *MockSnowballAPI) DescribeJobWithContext(arg0 context.Context, arg1 *snowball.DescribeJobInput, arg2 ...request.Option) (*snowball.DescribeJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.DescribeJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobWithContext indicates an expected call of DescribeJobWithContext
func (mr *MockSnowballAPIMockRecorder) DescribeJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeJobWithContext), varargs...)
}

// DescribeReturnShippingLabel mocks base method
func (m *MockSnowballAPI) DescribeReturnShippingLabel(arg0 *snowball.DescribeReturnShippingLabelInput) (*snowball.DescribeReturnShippingLabelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReturnShippingLabel", arg0)
	ret0, _ := ret[0].(*snowball.DescribeReturnShippingLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReturnShippingLabel indicates an expected call of DescribeReturnShippingLabel
func (mr *MockSnowballAPIMockRecorder) DescribeReturnShippingLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReturnShippingLabel", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeReturnShippingLabel), arg0)
}

// DescribeReturnShippingLabelRequest mocks base method
func (m *MockSnowballAPI) DescribeReturnShippingLabelRequest(arg0 *snowball.DescribeReturnShippingLabelInput) (*request.Request, *snowball.DescribeReturnShippingLabelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReturnShippingLabelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.DescribeReturnShippingLabelOutput)
	return ret0, ret1
}

// DescribeReturnShippingLabelRequest indicates an expected call of DescribeReturnShippingLabelRequest
func (mr *MockSnowballAPIMockRecorder) DescribeReturnShippingLabelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReturnShippingLabelRequest", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeReturnShippingLabelRequest), arg0)
}

// DescribeReturnShippingLabelWithContext mocks base method
func (m *MockSnowballAPI) DescribeReturnShippingLabelWithContext(arg0 context.Context, arg1 *snowball.DescribeReturnShippingLabelInput, arg2 ...request.Option) (*snowball.DescribeReturnShippingLabelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReturnShippingLabelWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.DescribeReturnShippingLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReturnShippingLabelWithContext indicates an expected call of DescribeReturnShippingLabelWithContext
func (mr *MockSnowballAPIMockRecorder) DescribeReturnShippingLabelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReturnShippingLabelWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).DescribeReturnShippingLabelWithContext), varargs...)
}

// GetJobManifest mocks base method
func (m *MockSnowballAPI) GetJobManifest(arg0 *snowball.GetJobManifestInput) (*snowball.GetJobManifestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobManifest", arg0)
	ret0, _ := ret[0].(*snowball.GetJobManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobManifest indicates an expected call of GetJobManifest
func (mr *MockSnowballAPIMockRecorder) GetJobManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobManifest", reflect.TypeOf((*MockSnowballAPI)(nil).GetJobManifest), arg0)
}

// GetJobManifestRequest mocks base method
func (m *MockSnowballAPI) GetJobManifestRequest(arg0 *snowball.GetJobManifestInput) (*request.Request, *snowball.GetJobManifestOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobManifestRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.GetJobManifestOutput)
	return ret0, ret1
}

// GetJobManifestRequest indicates an expected call of GetJobManifestRequest
func (mr *MockSnowballAPIMockRecorder) GetJobManifestRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobManifestRequest", reflect.TypeOf((*MockSnowballAPI)(nil).GetJobManifestRequest), arg0)
}

// GetJobManifestWithContext mocks base method
func (m *MockSnowballAPI) GetJobManifestWithContext(arg0 context.Context, arg1 *snowball.GetJobManifestInput, arg2 ...request.Option) (*snowball.GetJobManifestOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobManifestWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.GetJobManifestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobManifestWithContext indicates an expected call of GetJobManifestWithContext
func (mr *MockSnowballAPIMockRecorder) GetJobManifestWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobManifestWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).GetJobManifestWithContext), varargs...)
}

// GetJobUnlockCode mocks base method
func (m *MockSnowballAPI) GetJobUnlockCode(arg0 *snowball.GetJobUnlockCodeInput) (*snowball.GetJobUnlockCodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobUnlockCode", arg0)
	ret0, _ := ret[0].(*snowball.GetJobUnlockCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobUnlockCode indicates an expected call of GetJobUnlockCode
func (mr *MockSnowballAPIMockRecorder) GetJobUnlockCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobUnlockCode", reflect.TypeOf((*MockSnowballAPI)(nil).GetJobUnlockCode), arg0)
}

// GetJobUnlockCodeRequest mocks base method
func (m *MockSnowballAPI) GetJobUnlockCodeRequest(arg0 *snowball.GetJobUnlockCodeInput) (*request.Request, *snowball.GetJobUnlockCodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobUnlockCodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.GetJobUnlockCodeOutput)
	return ret0, ret1
}

// GetJobUnlockCodeRequest indicates an expected call of GetJobUnlockCodeRequest
func (mr *MockSnowballAPIMockRecorder) GetJobUnlockCodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobUnlockCodeRequest", reflect.TypeOf((*MockSnowballAPI)(nil).GetJobUnlockCodeRequest), arg0)
}

// GetJobUnlockCodeWithContext mocks base method
func (m *MockSnowballAPI) GetJobUnlockCodeWithContext(arg0 context.Context, arg1 *snowball.GetJobUnlockCodeInput, arg2 ...request.Option) (*snowball.GetJobUnlockCodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobUnlockCodeWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.GetJobUnlockCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobUnlockCodeWithContext indicates an expected call of GetJobUnlockCodeWithContext
func (mr *MockSnowballAPIMockRecorder) GetJobUnlockCodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobUnlockCodeWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).GetJobUnlockCodeWithContext), varargs...)
}

// GetSnowballUsage mocks base method
func (m *MockSnowballAPI) GetSnowballUsage(arg0 *snowball.GetSnowballUsageInput) (*snowball.GetSnowballUsageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnowballUsage", arg0)
	ret0, _ := ret[0].(*snowball.GetSnowballUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnowballUsage indicates an expected call of GetSnowballUsage
func (mr *MockSnowballAPIMockRecorder) GetSnowballUsage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnowballUsage", reflect.TypeOf((*MockSnowballAPI)(nil).GetSnowballUsage), arg0)
}

// GetSnowballUsageRequest mocks base method
func (m *MockSnowballAPI) GetSnowballUsageRequest(arg0 *snowball.GetSnowballUsageInput) (*request.Request, *snowball.GetSnowballUsageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnowballUsageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.GetSnowballUsageOutput)
	return ret0, ret1
}

// GetSnowballUsageRequest indicates an expected call of GetSnowballUsageRequest
func (mr *MockSnowballAPIMockRecorder) GetSnowballUsageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnowballUsageRequest", reflect.TypeOf((*MockSnowballAPI)(nil).GetSnowballUsageRequest), arg0)
}

// GetSnowballUsageWithContext mocks base method
func (m *MockSnowballAPI) GetSnowballUsageWithContext(arg0 context.Context, arg1 *snowball.GetSnowballUsageInput, arg2 ...request.Option) (*snowball.GetSnowballUsageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSnowballUsageWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.GetSnowballUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnowballUsageWithContext indicates an expected call of GetSnowballUsageWithContext
func (mr *MockSnowballAPIMockRecorder) GetSnowballUsageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnowballUsageWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).GetSnowballUsageWithContext), varargs...)
}

// GetSoftwareUpdates mocks base method
func (m *MockSnowballAPI) GetSoftwareUpdates(arg0 *snowball.GetSoftwareUpdatesInput) (*snowball.GetSoftwareUpdatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoftwareUpdates", arg0)
	ret0, _ := ret[0].(*snowball.GetSoftwareUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoftwareUpdates indicates an expected call of GetSoftwareUpdates
func (mr *MockSnowballAPIMockRecorder) GetSoftwareUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoftwareUpdates", reflect.TypeOf((*MockSnowballAPI)(nil).GetSoftwareUpdates), arg0)
}

// GetSoftwareUpdatesRequest mocks base method
func (m *MockSnowballAPI) GetSoftwareUpdatesRequest(arg0 *snowball.GetSoftwareUpdatesInput) (*request.Request, *snowball.GetSoftwareUpdatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoftwareUpdatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.GetSoftwareUpdatesOutput)
	return ret0, ret1
}

// GetSoftwareUpdatesRequest indicates an expected call of GetSoftwareUpdatesRequest
func (mr *MockSnowballAPIMockRecorder) GetSoftwareUpdatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoftwareUpdatesRequest", reflect.TypeOf((*MockSnowballAPI)(nil).GetSoftwareUpdatesRequest), arg0)
}

// GetSoftwareUpdatesWithContext mocks base method
func (m *MockSnowballAPI) GetSoftwareUpdatesWithContext(arg0 context.Context, arg1 *snowball.GetSoftwareUpdatesInput, arg2 ...request.Option) (*snowball.GetSoftwareUpdatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSoftwareUpdatesWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.GetSoftwareUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoftwareUpdatesWithContext indicates an expected call of GetSoftwareUpdatesWithContext
func (mr *MockSnowballAPIMockRecorder) GetSoftwareUpdatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoftwareUpdatesWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).GetSoftwareUpdatesWithContext), varargs...)
}

// ListClusterJobs mocks base method
func (m *MockSnowballAPI) ListClusterJobs(arg0 *snowball.ListClusterJobsInput) (*snowball.ListClusterJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterJobs", arg0)
	ret0, _ := ret[0].(*snowball.ListClusterJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterJobs indicates an expected call of ListClusterJobs
func (mr *MockSnowballAPIMockRecorder) ListClusterJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterJobs", reflect.TypeOf((*MockSnowballAPI)(nil).ListClusterJobs), arg0)
}

// ListClusterJobsRequest mocks base method
func (m *MockSnowballAPI) ListClusterJobsRequest(arg0 *snowball.ListClusterJobsInput) (*request.Request, *snowball.ListClusterJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.ListClusterJobsOutput)
	return ret0, ret1
}

// ListClusterJobsRequest indicates an expected call of ListClusterJobsRequest
func (mr *MockSnowballAPIMockRecorder) ListClusterJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterJobsRequest", reflect.TypeOf((*MockSnowballAPI)(nil).ListClusterJobsRequest), arg0)
}

// ListClusterJobsWithContext mocks base method
func (m *MockSnowballAPI) ListClusterJobsWithContext(arg0 context.Context, arg1 *snowball.ListClusterJobsInput, arg2 ...request.Option) (*snowball.ListClusterJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterJobsWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.ListClusterJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterJobsWithContext indicates an expected call of ListClusterJobsWithContext
func (mr *MockSnowballAPIMockRecorder) ListClusterJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterJobsWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).ListClusterJobsWithContext), varargs...)
}

// ListClusters mocks base method
func (m *MockSnowballAPI) ListClusters(arg0 *snowball.ListClustersInput) (*snowball.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", arg0)
	ret0, _ := ret[0].(*snowball.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *MockSnowballAPIMockRecorder) ListClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockSnowballAPI)(nil).ListClusters), arg0)
}

// ListClustersRequest mocks base method
func (m *MockSnowballAPI) ListClustersRequest(arg0 *snowball.ListClustersInput) (*request.Request, *snowball.ListClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.ListClustersOutput)
	return ret0, ret1
}

// ListClustersRequest indicates an expected call of ListClustersRequest
func (mr *MockSnowballAPIMockRecorder) ListClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersRequest", reflect.TypeOf((*MockSnowballAPI)(nil).ListClustersRequest), arg0)
}

// ListClustersWithContext mocks base method
func (m *MockSnowballAPI) ListClustersWithContext(arg0 context.Context, arg1 *snowball.ListClustersInput, arg2 ...request.Option) (*snowball.ListClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClustersWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersWithContext indicates an expected call of ListClustersWithContext
func (mr *MockSnowballAPIMockRecorder) ListClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).ListClustersWithContext), varargs...)
}

// ListCompatibleImages mocks base method
func (m *MockSnowballAPI) ListCompatibleImages(arg0 *snowball.ListCompatibleImagesInput) (*snowball.ListCompatibleImagesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompatibleImages", arg0)
	ret0, _ := ret[0].(*snowball.ListCompatibleImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompatibleImages indicates an expected call of ListCompatibleImages
func (mr *MockSnowballAPIMockRecorder) ListCompatibleImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompatibleImages", reflect.TypeOf((*MockSnowballAPI)(nil).ListCompatibleImages), arg0)
}

// ListCompatibleImagesRequest mocks base method
func (m *MockSnowballAPI) ListCompatibleImagesRequest(arg0 *snowball.ListCompatibleImagesInput) (*request.Request, *snowball.ListCompatibleImagesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompatibleImagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.ListCompatibleImagesOutput)
	return ret0, ret1
}

// ListCompatibleImagesRequest indicates an expected call of ListCompatibleImagesRequest
func (mr *MockSnowballAPIMockRecorder) ListCompatibleImagesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompatibleImagesRequest", reflect.TypeOf((*MockSnowballAPI)(nil).ListCompatibleImagesRequest), arg0)
}

// ListCompatibleImagesWithContext mocks base method
func (m *MockSnowballAPI) ListCompatibleImagesWithContext(arg0 context.Context, arg1 *snowball.ListCompatibleImagesInput, arg2 ...request.Option) (*snowball.ListCompatibleImagesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCompatibleImagesWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.ListCompatibleImagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompatibleImagesWithContext indicates an expected call of ListCompatibleImagesWithContext
func (mr *MockSnowballAPIMockRecorder) ListCompatibleImagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompatibleImagesWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).ListCompatibleImagesWithContext), varargs...)
}

// ListJobs mocks base method
func (m *MockSnowballAPI) ListJobs(arg0 *snowball.ListJobsInput) (*snowball.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*snowball.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockSnowballAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockSnowballAPI)(nil).ListJobs), arg0)
}

// ListJobsPages mocks base method
func (m *MockSnowballAPI) ListJobsPages(arg0 *snowball.ListJobsInput, arg1 func(*snowball.ListJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPages indicates an expected call of ListJobsPages
func (mr *MockSnowballAPIMockRecorder) ListJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPages", reflect.TypeOf((*MockSnowballAPI)(nil).ListJobsPages), arg0, arg1)
}

// ListJobsPagesWithContext mocks base method
func (m *MockSnowballAPI) ListJobsPagesWithContext(arg0 context.Context, arg1 *snowball.ListJobsInput, arg2 func(*snowball.ListJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPagesWithContext indicates an expected call of ListJobsPagesWithContext
func (mr *MockSnowballAPIMockRecorder) ListJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPagesWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).ListJobsPagesWithContext), varargs...)
}

// ListJobsRequest mocks base method
func (m *MockSnowballAPI) ListJobsRequest(arg0 *snowball.ListJobsInput) (*request.Request, *snowball.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest
func (mr *MockSnowballAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockSnowballAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method
func (m *MockSnowballAPI) ListJobsWithContext(arg0 context.Context, arg1 *snowball.ListJobsInput, arg2 ...request.Option) (*snowball.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext
func (mr *MockSnowballAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).ListJobsWithContext), varargs...)
}

// UpdateCluster mocks base method
func (m *MockSnowballAPI) UpdateCluster(arg0 *snowball.UpdateClusterInput) (*snowball.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0)
	ret0, _ := ret[0].(*snowball.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster
func (mr *MockSnowballAPIMockRecorder) UpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateCluster), arg0)
}

// UpdateClusterRequest mocks base method
func (m *MockSnowballAPI) UpdateClusterRequest(arg0 *snowball.UpdateClusterInput) (*request.Request, *snowball.UpdateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.UpdateClusterOutput)
	return ret0, ret1
}

// UpdateClusterRequest indicates an expected call of UpdateClusterRequest
func (mr *MockSnowballAPIMockRecorder) UpdateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRequest", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateClusterRequest), arg0)
}

// UpdateClusterWithContext mocks base method
func (m *MockSnowballAPI) UpdateClusterWithContext(arg0 context.Context, arg1 *snowball.UpdateClusterInput, arg2 ...request.Option) (*snowball.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterWithContext indicates an expected call of UpdateClusterWithContext
func (mr *MockSnowballAPIMockRecorder) UpdateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateClusterWithContext), varargs...)
}

// UpdateJob mocks base method
func (m *MockSnowballAPI) UpdateJob(arg0 *snowball.UpdateJobInput) (*snowball.UpdateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0)
	ret0, _ := ret[0].(*snowball.UpdateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJob indicates an expected call of UpdateJob
func (mr *MockSnowballAPIMockRecorder) UpdateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateJob), arg0)
}

// UpdateJobRequest mocks base method
func (m *MockSnowballAPI) UpdateJobRequest(arg0 *snowball.UpdateJobInput) (*request.Request, *snowball.UpdateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.UpdateJobOutput)
	return ret0, ret1
}

// UpdateJobRequest indicates an expected call of UpdateJobRequest
func (mr *MockSnowballAPIMockRecorder) UpdateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobRequest", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateJobRequest), arg0)
}

// UpdateJobShipmentState mocks base method
func (m *MockSnowballAPI) UpdateJobShipmentState(arg0 *snowball.UpdateJobShipmentStateInput) (*snowball.UpdateJobShipmentStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobShipmentState", arg0)
	ret0, _ := ret[0].(*snowball.UpdateJobShipmentStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobShipmentState indicates an expected call of UpdateJobShipmentState
func (mr *MockSnowballAPIMockRecorder) UpdateJobShipmentState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobShipmentState", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateJobShipmentState), arg0)
}

// UpdateJobShipmentStateRequest mocks base method
func (m *MockSnowballAPI) UpdateJobShipmentStateRequest(arg0 *snowball.UpdateJobShipmentStateInput) (*request.Request, *snowball.UpdateJobShipmentStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobShipmentStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowball.UpdateJobShipmentStateOutput)
	return ret0, ret1
}

// UpdateJobShipmentStateRequest indicates an expected call of UpdateJobShipmentStateRequest
func (mr *MockSnowballAPIMockRecorder) UpdateJobShipmentStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobShipmentStateRequest", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateJobShipmentStateRequest), arg0)
}

// UpdateJobShipmentStateWithContext mocks base method
func (m *MockSnowballAPI) UpdateJobShipmentStateWithContext(arg0 context.Context, arg1 *snowball.UpdateJobShipmentStateInput, arg2 ...request.Option) (*snowball.UpdateJobShipmentStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobShipmentStateWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.UpdateJobShipmentStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobShipmentStateWithContext indicates an expected call of UpdateJobShipmentStateWithContext
func (mr *MockSnowballAPIMockRecorder) UpdateJobShipmentStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobShipmentStateWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateJobShipmentStateWithContext), varargs...)
}

// UpdateJobWithContext mocks base method
func (m *MockSnowballAPI) UpdateJobWithContext(arg0 context.Context, arg1 *snowball.UpdateJobInput, arg2 ...request.Option) (*snowball.UpdateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobWithContext", varargs...)
	ret0, _ := ret[0].(*snowball.UpdateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobWithContext indicates an expected call of UpdateJobWithContext
func (mr *MockSnowballAPIMockRecorder) UpdateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobWithContext", reflect.TypeOf((*MockSnowballAPI)(nil).UpdateJobWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/frauddetector/frauddetectoriface (interfaces: FraudDetectorAPI)

// Package frauddetectormock is a generated GoMock package.
package frauddetectormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	frauddetector "github.com/aws/aws-sdk-go/service/frauddetector"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFraudDetectorAPI is a mock of FraudDetectorAPI interface
type MockFraudDetectorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFraudDetectorAPIMockRecorder
}

// MockFraudDetectorAPIMockRecorder is the mock recorder for MockFraudDetectorAPI
type MockFraudDetectorAPIMockRecorder struct {
	mock *MockFraudDetectorAPI
}

// NewMockFraudDetectorAPI creates a new mock instance
func NewMockFraudDetectorAPI(ctrl *gomock.Controller) *MockFraudDetectorAPI {
	mock := &MockFraudDetectorAPI{ctrl: ctrl}
	mock.recorder = &MockFraudDetectorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFraudDetectorAPI) EXPECT() *MockFraudDetectorAPIMockRecorder {
	return m.recorder
}

// BatchCreateVariable mocks base method
func (m *MockFraudDetectorAPI) BatchCreateVariable(arg0 *frauddetector.BatchCreateVariableInput) (*frauddetector.BatchCreateVariableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateVariable", arg0)
	ret0, _ := ret[0].(*frauddetector.BatchCreateVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateVariable indicates an expected call of BatchCreateVariable
func (mr *MockFraudDetectorAPIMockRecorder) BatchCreateVariable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateVariable", reflect.TypeOf((*MockFraudDetectorAPI)(nil).BatchCreateVariable), arg0)
}

// BatchCreateVariableRequest mocks base method
func (m *MockFraudDetectorAPI) BatchCreateVariableRequest(arg0 *frauddetector.BatchCreateVariableInput) (*request.Request, *frauddetector.BatchCreateVariableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateVariableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.BatchCreateVariableOutput)
	return ret0, ret1
}

// BatchCreateVariableRequest indicates an expected call of BatchCreateVariableRequest
func (mr *MockFraudDetectorAPIMockRecorder) BatchCreateVariableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateVariableRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).BatchCreateVariableRequest), arg0)
}

// BatchCreateVariableWithContext mocks base method
func (m *MockFraudDetectorAPI) BatchCreateVariableWithContext(arg0 context.Context, arg1 *frauddetector.BatchCreateVariableInput, arg2 ...request.Option) (*frauddetector.BatchCreateVariableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateVariableWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.BatchCreateVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateVariableWithContext indicates an expected call of BatchCreateVariableWithContext
func (mr *MockFraudDetectorAPIMockRecorder) BatchCreateVariableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateVariableWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).BatchCreateVariableWithContext), varargs...)
}

// BatchGetVariable mocks base method
func (m *MockFraudDetectorAPI) BatchGetVariable(arg0 *frauddetector.BatchGetVariableInput) (*frauddetector.BatchGetVariableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVariable", arg0)
	ret0, _ := ret[0].(*frauddetector.BatchGetVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVariable indicates an expected call of BatchGetVariable
func (mr *MockFraudDetectorAPIMockRecorder) BatchGetVariable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVariable", reflect.TypeOf((*MockFraudDetectorAPI)(nil).BatchGetVariable), arg0)
}

// BatchGetVariableRequest mocks base method
func (m *MockFraudDetectorAPI) BatchGetVariableRequest(arg0 *frauddetector.BatchGetVariableInput) (*request.Request, *frauddetector.BatchGetVariableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVariableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.BatchGetVariableOutput)
	return ret0, ret1
}

// BatchGetVariableRequest indicates an expected call of BatchGetVariableRequest
func (mr *MockFraudDetectorAPIMockRecorder) BatchGetVariableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVariableRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).BatchGetVariableRequest), arg0)
}

// BatchGetVariableWithContext mocks base method
func (m *MockFraudDetectorAPI) BatchGetVariableWithContext(arg0 context.Context, arg1 *frauddetector.BatchGetVariableInput, arg2 ...request.Option) (*frauddetector.BatchGetVariableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetVariableWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.BatchGetVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVariableWithContext indicates an expected call of BatchGetVariableWithContext
func (mr *MockFraudDetectorAPIMockRecorder) BatchGetVariableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVariableWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).BatchGetVariableWithContext), varargs...)
}

// CreateDetectorVersion mocks base method
func (m *MockFraudDetectorAPI) CreateDetectorVersion(arg0 *frauddetector.CreateDetectorVersionInput) (*frauddetector.CreateDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDetectorVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.CreateDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDetectorVersion indicates an expected call of CreateDetectorVersion
func (mr *MockFraudDetectorAPIMockRecorder) CreateDetectorVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDetectorVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateDetectorVersion), arg0)
}

// CreateDetectorVersionRequest mocks base method
func (m *MockFraudDetectorAPI) CreateDetectorVersionRequest(arg0 *frauddetector.CreateDetectorVersionInput) (*request.Request, *frauddetector.CreateDetectorVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDetectorVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.CreateDetectorVersionOutput)
	return ret0, ret1
}

// CreateDetectorVersionRequest indicates an expected call of CreateDetectorVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) CreateDetectorVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDetectorVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateDetectorVersionRequest), arg0)
}

// CreateDetectorVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) CreateDetectorVersionWithContext(arg0 context.Context, arg1 *frauddetector.CreateDetectorVersionInput, arg2 ...request.Option) (*frauddetector.CreateDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDetectorVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.CreateDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDetectorVersionWithContext indicates an expected call of CreateDetectorVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) CreateDetectorVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDetectorVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateDetectorVersionWithContext), varargs...)
}

// CreateModel mocks base method
func (m *MockFraudDetectorAPI) CreateModel(arg0 *frauddetector.CreateModelInput) (*frauddetector.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(*frauddetector.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel
func (mr *MockFraudDetectorAPIMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateModel), arg0)
}

// CreateModelRequest mocks base method
func (m *MockFraudDetectorAPI) CreateModelRequest(arg0 *frauddetector.CreateModelInput) (*request.Request, *frauddetector.CreateModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.CreateModelOutput)
	return ret0, ret1
}

// CreateModelRequest indicates an expected call of CreateModelRequest
func (mr *MockFraudDetectorAPIMockRecorder) CreateModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateModelRequest), arg0)
}

// CreateModelVersion mocks base method
func (m *MockFraudDetectorAPI) CreateModelVersion(arg0 *frauddetector.CreateModelVersionInput) (*frauddetector.CreateModelVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.CreateModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelVersion indicates an expected call of CreateModelVersion
func (mr *MockFraudDetectorAPIMockRecorder) CreateModelVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateModelVersion), arg0)
}

// CreateModelVersionRequest mocks base method
func (m *MockFraudDetectorAPI) CreateModelVersionRequest(arg0 *frauddetector.CreateModelVersionInput) (*request.Request, *frauddetector.CreateModelVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.CreateModelVersionOutput)
	return ret0, ret1
}

// CreateModelVersionRequest indicates an expected call of CreateModelVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) CreateModelVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateModelVersionRequest), arg0)
}

// CreateModelVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) CreateModelVersionWithContext(arg0 context.Context, arg1 *frauddetector.CreateModelVersionInput, arg2 ...request.Option) (*frauddetector.CreateModelVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.CreateModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelVersionWithContext indicates an expected call of CreateModelVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) CreateModelVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateModelVersionWithContext), varargs...)
}

// CreateModelWithContext mocks base method
func (m *MockFraudDetectorAPI) CreateModelWithContext(arg0 context.Context, arg1 *frauddetector.CreateModelInput, arg2 ...request.Option) (*frauddetector.CreateModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.CreateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelWithContext indicates an expected call of CreateModelWithContext
func (mr *MockFraudDetectorAPIMockRecorder) CreateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateModelWithContext), varargs...)
}

// CreateRule mocks base method
func (m *MockFraudDetectorAPI) CreateRule(arg0 *frauddetector.CreateRuleInput) (*frauddetector.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0)
	ret0, _ := ret[0].(*frauddetector.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule
func (mr *MockFraudDetectorAPIMockRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateRule), arg0)
}

// CreateRuleRequest mocks base method
func (m *MockFraudDetectorAPI) CreateRuleRequest(arg0 *frauddetector.CreateRuleInput) (*request.Request, *frauddetector.CreateRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.CreateRuleOutput)
	return ret0, ret1
}

// CreateRuleRequest indicates an expected call of CreateRuleRequest
func (mr *MockFraudDetectorAPIMockRecorder) CreateRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateRuleRequest), arg0)
}

// CreateRuleWithContext mocks base method
func (m *MockFraudDetectorAPI) CreateRuleWithContext(arg0 context.Context, arg1 *frauddetector.CreateRuleInput, arg2 ...request.Option) (*frauddetector.CreateRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.CreateRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleWithContext indicates an expected call of CreateRuleWithContext
func (mr *MockFraudDetectorAPIMockRecorder) CreateRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateRuleWithContext), varargs...)
}

// CreateVariable mocks base method
func (m *MockFraudDetectorAPI) CreateVariable(arg0 *frauddetector.CreateVariableInput) (*frauddetector.CreateVariableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVariable", arg0)
	ret0, _ := ret[0].(*frauddetector.CreateVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVariable indicates an expected call of CreateVariable
func (mr *MockFraudDetectorAPIMockRecorder) CreateVariable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariable", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateVariable), arg0)
}

// CreateVariableRequest mocks base method
func (m *MockFraudDetectorAPI) CreateVariableRequest(arg0 *frauddetector.CreateVariableInput) (*request.Request, *frauddetector.CreateVariableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVariableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.CreateVariableOutput)
	return ret0, ret1
}

// CreateVariableRequest indicates an expected call of CreateVariableRequest
func (mr *MockFraudDetectorAPIMockRecorder) CreateVariableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariableRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateVariableRequest), arg0)
}

// CreateVariableWithContext mocks base method
func (m *MockFraudDetectorAPI) CreateVariableWithContext(arg0 context.Context, arg1 *frauddetector.CreateVariableInput, arg2 ...request.Option) (*frauddetector.CreateVariableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVariableWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.CreateVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVariableWithContext indicates an expected call of CreateVariableWithContext
func (mr *MockFraudDetectorAPIMockRecorder) CreateVariableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariableWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).CreateVariableWithContext), varargs...)
}

// DeleteDetector mocks base method
func (m *MockFraudDetectorAPI) DeleteDetector(arg0 *frauddetector.DeleteDetectorInput) (*frauddetector.DeleteDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetector", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDetector indicates an expected call of DeleteDetector
func (mr *MockFraudDetectorAPIMockRecorder) DeleteDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetector", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteDetector), arg0)
}

// DeleteDetectorRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteDetectorRequest(arg0 *frauddetector.DeleteDetectorInput) (*request.Request, *frauddetector.DeleteDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteDetectorOutput)
	return ret0, ret1
}

// DeleteDetectorRequest indicates an expected call of DeleteDetectorRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteDetectorRequest), arg0)
}

// DeleteDetectorVersion mocks base method
func (m *MockFraudDetectorAPI) DeleteDetectorVersion(arg0 *frauddetector.DeleteDetectorVersionInput) (*frauddetector.DeleteDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetectorVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDetectorVersion indicates an expected call of DeleteDetectorVersion
func (mr *MockFraudDetectorAPIMockRecorder) DeleteDetectorVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteDetectorVersion), arg0)
}

// DeleteDetectorVersionRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteDetectorVersionRequest(arg0 *frauddetector.DeleteDetectorVersionInput) (*request.Request, *frauddetector.DeleteDetectorVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDetectorVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteDetectorVersionOutput)
	return ret0, ret1
}

// DeleteDetectorVersionRequest indicates an expected call of DeleteDetectorVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteDetectorVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteDetectorVersionRequest), arg0)
}

// DeleteDetectorVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteDetectorVersionWithContext(arg0 context.Context, arg1 *frauddetector.DeleteDetectorVersionInput, arg2 ...request.Option) (*frauddetector.DeleteDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDetectorVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDetectorVersionWithContext indicates an expected call of DeleteDetectorVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteDetectorVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteDetectorVersionWithContext), varargs...)
}

// DeleteDetectorWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteDetectorWithContext(arg0 context.Context, arg1 *frauddetector.DeleteDetectorInput, arg2 ...request.Option) (*frauddetector.DeleteDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDetectorWithContext indicates an expected call of DeleteDetectorWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDetectorWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteDetectorWithContext), varargs...)
}

// DeleteEntityType mocks base method
func (m *MockFraudDetectorAPI) DeleteEntityType(arg0 *frauddetector.DeleteEntityTypeInput) (*frauddetector.DeleteEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityType", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntityType indicates an expected call of DeleteEntityType
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEntityType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityType", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEntityType), arg0)
}

// DeleteEntityTypeRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteEntityTypeRequest(arg0 *frauddetector.DeleteEntityTypeInput) (*request.Request, *frauddetector.DeleteEntityTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteEntityTypeOutput)
	return ret0, ret1
}

// DeleteEntityTypeRequest indicates an expected call of DeleteEntityTypeRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEntityTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityTypeRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEntityTypeRequest), arg0)
}

// DeleteEntityTypeWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteEntityTypeWithContext(arg0 context.Context, arg1 *frauddetector.DeleteEntityTypeInput, arg2 ...request.Option) (*frauddetector.DeleteEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEntityTypeWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntityTypeWithContext indicates an expected call of DeleteEntityTypeWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEntityTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityTypeWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEntityTypeWithContext), varargs...)
}

// DeleteEvent mocks base method
func (m *MockFraudDetectorAPI) DeleteEvent(arg0 *frauddetector.DeleteEventInput) (*frauddetector.DeleteEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEvent), arg0)
}

// DeleteEventRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteEventRequest(arg0 *frauddetector.DeleteEventInput) (*request.Request, *frauddetector.DeleteEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteEventOutput)
	return ret0, ret1
}

// DeleteEventRequest indicates an expected call of DeleteEventRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEventRequest), arg0)
}

// DeleteEventType mocks base method
func (m *MockFraudDetectorAPI) DeleteEventType(arg0 *frauddetector.DeleteEventTypeInput) (*frauddetector.DeleteEventTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventType", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteEventTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventType indicates an expected call of DeleteEventType
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEventType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventType", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEventType), arg0)
}

// DeleteEventTypeRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteEventTypeRequest(arg0 *frauddetector.DeleteEventTypeInput) (*request.Request, *frauddetector.DeleteEventTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteEventTypeOutput)
	return ret0, ret1
}

// DeleteEventTypeRequest indicates an expected call of DeleteEventTypeRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEventTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventTypeRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEventTypeRequest), arg0)
}

// DeleteEventTypeWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteEventTypeWithContext(arg0 context.Context, arg1 *frauddetector.DeleteEventTypeInput, arg2 ...request.Option) (*frauddetector.DeleteEventTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventTypeWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteEventTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventTypeWithContext indicates an expected call of DeleteEventTypeWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEventTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventTypeWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEventTypeWithContext), varargs...)
}

// DeleteEventWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteEventWithContext(arg0 context.Context, arg1 *frauddetector.DeleteEventInput, arg2 ...request.Option) (*frauddetector.DeleteEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventWithContext indicates an expected call of DeleteEventWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteEventWithContext), varargs...)
}

// DeleteExternalModel mocks base method
func (m *MockFraudDetectorAPI) DeleteExternalModel(arg0 *frauddetector.DeleteExternalModelInput) (*frauddetector.DeleteExternalModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExternalModel", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteExternalModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExternalModel indicates an expected call of DeleteExternalModel
func (mr *MockFraudDetectorAPIMockRecorder) DeleteExternalModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalModel", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteExternalModel), arg0)
}

// DeleteExternalModelRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteExternalModelRequest(arg0 *frauddetector.DeleteExternalModelInput) (*request.Request, *frauddetector.DeleteExternalModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExternalModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteExternalModelOutput)
	return ret0, ret1
}

// DeleteExternalModelRequest indicates an expected call of DeleteExternalModelRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteExternalModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalModelRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteExternalModelRequest), arg0)
}

// DeleteExternalModelWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteExternalModelWithContext(arg0 context.Context, arg1 *frauddetector.DeleteExternalModelInput, arg2 ...request.Option) (*frauddetector.DeleteExternalModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExternalModelWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteExternalModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExternalModelWithContext indicates an expected call of DeleteExternalModelWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteExternalModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExternalModelWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteExternalModelWithContext), varargs...)
}

// DeleteLabel mocks base method
func (m *MockFraudDetectorAPI) DeleteLabel(arg0 *frauddetector.DeleteLabelInput) (*frauddetector.DeleteLabelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabel indicates an expected call of DeleteLabel
func (mr *MockFraudDetectorAPIMockRecorder) DeleteLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteLabel), arg0)
}

// DeleteLabelRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteLabelRequest(arg0 *frauddetector.DeleteLabelInput) (*request.Request, *frauddetector.DeleteLabelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteLabelOutput)
	return ret0, ret1
}

// DeleteLabelRequest indicates an expected call of DeleteLabelRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteLabelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteLabelRequest), arg0)
}

// DeleteLabelWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteLabelWithContext(arg0 context.Context, arg1 *frauddetector.DeleteLabelInput, arg2 ...request.Option) (*frauddetector.DeleteLabelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLabelWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLabelWithContext indicates an expected call of DeleteLabelWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteLabelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteLabelWithContext), varargs...)
}

// DeleteModel mocks base method
func (m *MockFraudDetectorAPI) DeleteModel(arg0 *frauddetector.DeleteModelInput) (*frauddetector.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel
func (mr *MockFraudDetectorAPIMockRecorder) DeleteModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteModel), arg0)
}

// DeleteModelRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteModelRequest(arg0 *frauddetector.DeleteModelInput) (*request.Request, *frauddetector.DeleteModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteModelOutput)
	return ret0, ret1
}

// DeleteModelRequest indicates an expected call of DeleteModelRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteModelRequest), arg0)
}

// DeleteModelVersion mocks base method
func (m *MockFraudDetectorAPI) DeleteModelVersion(arg0 *frauddetector.DeleteModelVersionInput) (*frauddetector.DeleteModelVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion
func (mr *MockFraudDetectorAPIMockRecorder) DeleteModelVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteModelVersion), arg0)
}

// DeleteModelVersionRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteModelVersionRequest(arg0 *frauddetector.DeleteModelVersionInput) (*request.Request, *frauddetector.DeleteModelVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModelVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteModelVersionOutput)
	return ret0, ret1
}

// DeleteModelVersionRequest indicates an expected call of DeleteModelVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteModelVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteModelVersionRequest), arg0)
}

// DeleteModelVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteModelVersionWithContext(arg0 context.Context, arg1 *frauddetector.DeleteModelVersionInput, arg2 ...request.Option) (*frauddetector.DeleteModelVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelVersionWithContext indicates an expected call of DeleteModelVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteModelVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteModelVersionWithContext), varargs...)
}

// DeleteModelWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteModelWithContext(arg0 context.Context, arg1 *frauddetector.DeleteModelInput, arg2 ...request.Option) (*frauddetector.DeleteModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelWithContext indicates an expected call of DeleteModelWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteModelWithContext), varargs...)
}

// DeleteOutcome mocks base method
func (m *MockFraudDetectorAPI) DeleteOutcome(arg0 *frauddetector.DeleteOutcomeInput) (*frauddetector.DeleteOutcomeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutcome", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteOutcomeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutcome indicates an expected call of DeleteOutcome
func (mr *MockFraudDetectorAPIMockRecorder) DeleteOutcome(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutcome", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteOutcome), arg0)
}

// DeleteOutcomeRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteOutcomeRequest(arg0 *frauddetector.DeleteOutcomeInput) (*request.Request, *frauddetector.DeleteOutcomeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutcomeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteOutcomeOutput)
	return ret0, ret1
}

// DeleteOutcomeRequest indicates an expected call of DeleteOutcomeRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteOutcomeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutcomeRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteOutcomeRequest), arg0)
}

// DeleteOutcomeWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteOutcomeWithContext(arg0 context.Context, arg1 *frauddetector.DeleteOutcomeInput, arg2 ...request.Option) (*frauddetector.DeleteOutcomeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOutcomeWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteOutcomeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOutcomeWithContext indicates an expected call of DeleteOutcomeWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteOutcomeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutcomeWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteOutcomeWithContext), varargs...)
}

// DeleteRule mocks base method
func (m *MockFraudDetectorAPI) DeleteRule(arg0 *frauddetector.DeleteRuleInput) (*frauddetector.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule
func (mr *MockFraudDetectorAPIMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteRule), arg0)
}

// DeleteRuleRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteRuleRequest(arg0 *frauddetector.DeleteRuleInput) (*request.Request, *frauddetector.DeleteRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteRuleOutput)
	return ret0, ret1
}

// DeleteRuleRequest indicates an expected call of DeleteRuleRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteRuleRequest), arg0)
}

// DeleteRuleWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteRuleWithContext(arg0 context.Context, arg1 *frauddetector.DeleteRuleInput, arg2 ...request.Option) (*frauddetector.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleWithContext indicates an expected call of DeleteRuleWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteRuleWithContext), varargs...)
}

// DeleteVariable mocks base method
func (m *MockFraudDetectorAPI) DeleteVariable(arg0 *frauddetector.DeleteVariableInput) (*frauddetector.DeleteVariableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVariable", arg0)
	ret0, _ := ret[0].(*frauddetector.DeleteVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVariable indicates an expected call of DeleteVariable
func (mr *MockFraudDetectorAPIMockRecorder) DeleteVariable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariable", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteVariable), arg0)
}

// DeleteVariableRequest mocks base method
func (m *MockFraudDetectorAPI) DeleteVariableRequest(arg0 *frauddetector.DeleteVariableInput) (*request.Request, *frauddetector.DeleteVariableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVariableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DeleteVariableOutput)
	return ret0, ret1
}

// DeleteVariableRequest indicates an expected call of DeleteVariableRequest
func (mr *MockFraudDetectorAPIMockRecorder) DeleteVariableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariableRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteVariableRequest), arg0)
}

// DeleteVariableWithContext mocks base method
func (m *MockFraudDetectorAPI) DeleteVariableWithContext(arg0 context.Context, arg1 *frauddetector.DeleteVariableInput, arg2 ...request.Option) (*frauddetector.DeleteVariableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVariableWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DeleteVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVariableWithContext indicates an expected call of DeleteVariableWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DeleteVariableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVariableWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DeleteVariableWithContext), varargs...)
}

// DescribeDetector mocks base method
func (m *MockFraudDetectorAPI) DescribeDetector(arg0 *frauddetector.DescribeDetectorInput) (*frauddetector.DescribeDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDetector", arg0)
	ret0, _ := ret[0].(*frauddetector.DescribeDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDetector indicates an expected call of DescribeDetector
func (mr *MockFraudDetectorAPIMockRecorder) DescribeDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetector", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeDetector), arg0)
}

// DescribeDetectorRequest mocks base method
func (m *MockFraudDetectorAPI) DescribeDetectorRequest(arg0 *frauddetector.DescribeDetectorInput) (*request.Request, *frauddetector.DescribeDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DescribeDetectorOutput)
	return ret0, ret1
}

// DescribeDetectorRequest indicates an expected call of DescribeDetectorRequest
func (mr *MockFraudDetectorAPIMockRecorder) DescribeDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetectorRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeDetectorRequest), arg0)
}

// DescribeDetectorWithContext mocks base method
func (m *MockFraudDetectorAPI) DescribeDetectorWithContext(arg0 context.Context, arg1 *frauddetector.DescribeDetectorInput, arg2 ...request.Option) (*frauddetector.DescribeDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DescribeDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDetectorWithContext indicates an expected call of DescribeDetectorWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DescribeDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDetectorWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeDetectorWithContext), varargs...)
}

// DescribeModelVersions mocks base method
func (m *MockFraudDetectorAPI) DescribeModelVersions(arg0 *frauddetector.DescribeModelVersionsInput) (*frauddetector.DescribeModelVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModelVersions", arg0)
	ret0, _ := ret[0].(*frauddetector.DescribeModelVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelVersions indicates an expected call of DescribeModelVersions
func (mr *MockFraudDetectorAPIMockRecorder) DescribeModelVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelVersions", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeModelVersions), arg0)
}

// DescribeModelVersionsPages mocks base method
func (m *MockFraudDetectorAPI) DescribeModelVersionsPages(arg0 *frauddetector.DescribeModelVersionsInput, arg1 func(*frauddetector.DescribeModelVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModelVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeModelVersionsPages indicates an expected call of DescribeModelVersionsPages
func (mr *MockFraudDetectorAPIMockRecorder) DescribeModelVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelVersionsPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeModelVersionsPages), arg0, arg1)
}

// DescribeModelVersionsPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) DescribeModelVersionsPagesWithContext(arg0 context.Context, arg1 *frauddetector.DescribeModelVersionsInput, arg2 func(*frauddetector.DescribeModelVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeModelVersionsPagesWithContext indicates an expected call of DescribeModelVersionsPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DescribeModelVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelVersionsPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeModelVersionsPagesWithContext), varargs...)
}

// DescribeModelVersionsRequest mocks base method
func (m *MockFraudDetectorAPI) DescribeModelVersionsRequest(arg0 *frauddetector.DescribeModelVersionsInput) (*request.Request, *frauddetector.DescribeModelVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeModelVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.DescribeModelVersionsOutput)
	return ret0, ret1
}

// DescribeModelVersionsRequest indicates an expected call of DescribeModelVersionsRequest
func (mr *MockFraudDetectorAPIMockRecorder) DescribeModelVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelVersionsRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeModelVersionsRequest), arg0)
}

// DescribeModelVersionsWithContext mocks base method
func (m *MockFraudDetectorAPI) DescribeModelVersionsWithContext(arg0 context.Context, arg1 *frauddetector.DescribeModelVersionsInput, arg2 ...request.Option) (*frauddetector.DescribeModelVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeModelVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.DescribeModelVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeModelVersionsWithContext indicates an expected call of DescribeModelVersionsWithContext
func (mr *MockFraudDetectorAPIMockRecorder) DescribeModelVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeModelVersionsWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).DescribeModelVersionsWithContext), varargs...)
}

// GetDetectorVersion mocks base method
func (m *MockFraudDetectorAPI) GetDetectorVersion(arg0 *frauddetector.GetDetectorVersionInput) (*frauddetector.GetDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetectorVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.GetDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetectorVersion indicates an expected call of GetDetectorVersion
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectorVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectorVersion), arg0)
}

// GetDetectorVersionRequest mocks base method
func (m *MockFraudDetectorAPI) GetDetectorVersionRequest(arg0 *frauddetector.GetDetectorVersionInput) (*request.Request, *frauddetector.GetDetectorVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetectorVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetDetectorVersionOutput)
	return ret0, ret1
}

// GetDetectorVersionRequest indicates an expected call of GetDetectorVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectorVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectorVersionRequest), arg0)
}

// GetDetectorVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) GetDetectorVersionWithContext(arg0 context.Context, arg1 *frauddetector.GetDetectorVersionInput, arg2 ...request.Option) (*frauddetector.GetDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetectorVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetectorVersionWithContext indicates an expected call of GetDetectorVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectorVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectorVersionWithContext), varargs...)
}

// GetDetectors mocks base method
func (m *MockFraudDetectorAPI) GetDetectors(arg0 *frauddetector.GetDetectorsInput) (*frauddetector.GetDetectorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetectors", arg0)
	ret0, _ := ret[0].(*frauddetector.GetDetectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetectors indicates an expected call of GetDetectors
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectors", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectors), arg0)
}

// GetDetectorsPages mocks base method
func (m *MockFraudDetectorAPI) GetDetectorsPages(arg0 *frauddetector.GetDetectorsInput, arg1 func(*frauddetector.GetDetectorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetectorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDetectorsPages indicates an expected call of GetDetectorsPages
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorsPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectorsPages), arg0, arg1)
}

// GetDetectorsPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetDetectorsPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetDetectorsInput, arg2 func(*frauddetector.GetDetectorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetectorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDetectorsPagesWithContext indicates an expected call of GetDetectorsPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorsPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectorsPagesWithContext), varargs...)
}

// GetDetectorsRequest mocks base method
func (m *MockFraudDetectorAPI) GetDetectorsRequest(arg0 *frauddetector.GetDetectorsInput) (*request.Request, *frauddetector.GetDetectorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetectorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetDetectorsOutput)
	return ret0, ret1
}

// GetDetectorsRequest indicates an expected call of GetDetectorsRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorsRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectorsRequest), arg0)
}

// GetDetectorsWithContext mocks base method
func (m *MockFraudDetectorAPI) GetDetectorsWithContext(arg0 context.Context, arg1 *frauddetector.GetDetectorsInput, arg2 ...request.Option) (*frauddetector.GetDetectorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetectorsWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetDetectorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetectorsWithContext indicates an expected call of GetDetectorsWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetDetectorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetectorsWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetDetectorsWithContext), varargs...)
}

// GetEntityTypes mocks base method
func (m *MockFraudDetectorAPI) GetEntityTypes(arg0 *frauddetector.GetEntityTypesInput) (*frauddetector.GetEntityTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityTypes", arg0)
	ret0, _ := ret[0].(*frauddetector.GetEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityTypes indicates an expected call of GetEntityTypes
func (mr *MockFraudDetectorAPIMockRecorder) GetEntityTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTypes", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEntityTypes), arg0)
}

// GetEntityTypesPages mocks base method
func (m *MockFraudDetectorAPI) GetEntityTypesPages(arg0 *frauddetector.GetEntityTypesInput, arg1 func(*frauddetector.GetEntityTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEntityTypesPages indicates an expected call of GetEntityTypesPages
func (mr *MockFraudDetectorAPIMockRecorder) GetEntityTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTypesPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEntityTypesPages), arg0, arg1)
}

// GetEntityTypesPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetEntityTypesPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetEntityTypesInput, arg2 func(*frauddetector.GetEntityTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEntityTypesPagesWithContext indicates an expected call of GetEntityTypesPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetEntityTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTypesPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEntityTypesPagesWithContext), varargs...)
}

// GetEntityTypesRequest mocks base method
func (m *MockFraudDetectorAPI) GetEntityTypesRequest(arg0 *frauddetector.GetEntityTypesInput) (*request.Request, *frauddetector.GetEntityTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetEntityTypesOutput)
	return ret0, ret1
}

// GetEntityTypesRequest indicates an expected call of GetEntityTypesRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetEntityTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTypesRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEntityTypesRequest), arg0)
}

// GetEntityTypesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetEntityTypesWithContext(arg0 context.Context, arg1 *frauddetector.GetEntityTypesInput, arg2 ...request.Option) (*frauddetector.GetEntityTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityTypesWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityTypesWithContext indicates an expected call of GetEntityTypesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetEntityTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTypesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEntityTypesWithContext), varargs...)
}

// GetEventPrediction mocks base method
func (m *MockFraudDetectorAPI) GetEventPrediction(arg0 *frauddetector.GetEventPredictionInput) (*frauddetector.GetEventPredictionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventPrediction", arg0)
	ret0, _ := ret[0].(*frauddetector.GetEventPredictionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventPrediction indicates an expected call of GetEventPrediction
func (mr *MockFraudDetectorAPIMockRecorder) GetEventPrediction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPrediction", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventPrediction), arg0)
}

// GetEventPredictionRequest mocks base method
func (m *MockFraudDetectorAPI) GetEventPredictionRequest(arg0 *frauddetector.GetEventPredictionInput) (*request.Request, *frauddetector.GetEventPredictionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventPredictionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetEventPredictionOutput)
	return ret0, ret1
}

// GetEventPredictionRequest indicates an expected call of GetEventPredictionRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetEventPredictionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPredictionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventPredictionRequest), arg0)
}

// GetEventPredictionWithContext mocks base method
func (m *MockFraudDetectorAPI) GetEventPredictionWithContext(arg0 context.Context, arg1 *frauddetector.GetEventPredictionInput, arg2 ...request.Option) (*frauddetector.GetEventPredictionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventPredictionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEventPredictionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventPredictionWithContext indicates an expected call of GetEventPredictionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetEventPredictionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPredictionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventPredictionWithContext), varargs...)
}

// GetEventTypes mocks base method
func (m *MockFraudDetectorAPI) GetEventTypes(arg0 *frauddetector.GetEventTypesInput) (*frauddetector.GetEventTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventTypes", arg0)
	ret0, _ := ret[0].(*frauddetector.GetEventTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypes indicates an expected call of GetEventTypes
func (mr *MockFraudDetectorAPIMockRecorder) GetEventTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypes", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventTypes), arg0)
}

// GetEventTypesPages mocks base method
func (m *MockFraudDetectorAPI) GetEventTypesPages(arg0 *frauddetector.GetEventTypesInput, arg1 func(*frauddetector.GetEventTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEventTypesPages indicates an expected call of GetEventTypesPages
func (mr *MockFraudDetectorAPIMockRecorder) GetEventTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypesPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventTypesPages), arg0, arg1)
}

// GetEventTypesPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetEventTypesPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetEventTypesInput, arg2 func(*frauddetector.GetEventTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEventTypesPagesWithContext indicates an expected call of GetEventTypesPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetEventTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypesPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventTypesPagesWithContext), varargs...)
}

// GetEventTypesRequest mocks base method
func (m *MockFraudDetectorAPI) GetEventTypesRequest(arg0 *frauddetector.GetEventTypesInput) (*request.Request, *frauddetector.GetEventTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetEventTypesOutput)
	return ret0, ret1
}

// GetEventTypesRequest indicates an expected call of GetEventTypesRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetEventTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypesRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventTypesRequest), arg0)
}

// GetEventTypesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetEventTypesWithContext(arg0 context.Context, arg1 *frauddetector.GetEventTypesInput, arg2 ...request.Option) (*frauddetector.GetEventTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventTypesWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetEventTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypesWithContext indicates an expected call of GetEventTypesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetEventTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetEventTypesWithContext), varargs...)
}

// GetExternalModels mocks base method
func (m *MockFraudDetectorAPI) GetExternalModels(arg0 *frauddetector.GetExternalModelsInput) (*frauddetector.GetExternalModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalModels", arg0)
	ret0, _ := ret[0].(*frauddetector.GetExternalModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalModels indicates an expected call of GetExternalModels
func (mr *MockFraudDetectorAPIMockRecorder) GetExternalModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalModels", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetExternalModels), arg0)
}

// GetExternalModelsPages mocks base method
func (m *MockFraudDetectorAPI) GetExternalModelsPages(arg0 *frauddetector.GetExternalModelsInput, arg1 func(*frauddetector.GetExternalModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExternalModelsPages indicates an expected call of GetExternalModelsPages
func (mr *MockFraudDetectorAPIMockRecorder) GetExternalModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalModelsPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetExternalModelsPages), arg0, arg1)
}

// GetExternalModelsPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetExternalModelsPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetExternalModelsInput, arg2 func(*frauddetector.GetExternalModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExternalModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetExternalModelsPagesWithContext indicates an expected call of GetExternalModelsPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetExternalModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalModelsPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetExternalModelsPagesWithContext), varargs...)
}

// GetExternalModelsRequest mocks base method
func (m *MockFraudDetectorAPI) GetExternalModelsRequest(arg0 *frauddetector.GetExternalModelsInput) (*request.Request, *frauddetector.GetExternalModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetExternalModelsOutput)
	return ret0, ret1
}

// GetExternalModelsRequest indicates an expected call of GetExternalModelsRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetExternalModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalModelsRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetExternalModelsRequest), arg0)
}

// GetExternalModelsWithContext mocks base method
func (m *MockFraudDetectorAPI) GetExternalModelsWithContext(arg0 context.Context, arg1 *frauddetector.GetExternalModelsInput, arg2 ...request.Option) (*frauddetector.GetExternalModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExternalModelsWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetExternalModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalModelsWithContext indicates an expected call of GetExternalModelsWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetExternalModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalModelsWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetExternalModelsWithContext), varargs...)
}

// GetKMSEncryptionKey mocks base method
func (m *MockFraudDetectorAPI) GetKMSEncryptionKey(arg0 *frauddetector.GetKMSEncryptionKeyInput) (*frauddetector.GetKMSEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKMSEncryptionKey", arg0)
	ret0, _ := ret[0].(*frauddetector.GetKMSEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKMSEncryptionKey indicates an expected call of GetKMSEncryptionKey
func (mr *MockFraudDetectorAPIMockRecorder) GetKMSEncryptionKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKMSEncryptionKey", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetKMSEncryptionKey), arg0)
}

// GetKMSEncryptionKeyRequest mocks base method
func (m *MockFraudDetectorAPI) GetKMSEncryptionKeyRequest(arg0 *frauddetector.GetKMSEncryptionKeyInput) (*request.Request, *frauddetector.GetKMSEncryptionKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKMSEncryptionKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetKMSEncryptionKeyOutput)
	return ret0, ret1
}

// GetKMSEncryptionKeyRequest indicates an expected call of GetKMSEncryptionKeyRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetKMSEncryptionKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKMSEncryptionKeyRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetKMSEncryptionKeyRequest), arg0)
}

// GetKMSEncryptionKeyWithContext mocks base method
func (m *MockFraudDetectorAPI) GetKMSEncryptionKeyWithContext(arg0 context.Context, arg1 *frauddetector.GetKMSEncryptionKeyInput, arg2 ...request.Option) (*frauddetector.GetKMSEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKMSEncryptionKeyWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetKMSEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKMSEncryptionKeyWithContext indicates an expected call of GetKMSEncryptionKeyWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetKMSEncryptionKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKMSEncryptionKeyWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetKMSEncryptionKeyWithContext), varargs...)
}

// GetLabels mocks base method
func (m *MockFraudDetectorAPI) GetLabels(arg0 *frauddetector.GetLabelsInput) (*frauddetector.GetLabelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", arg0)
	ret0, _ := ret[0].(*frauddetector.GetLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels
func (mr *MockFraudDetectorAPIMockRecorder) GetLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetLabels), arg0)
}

// GetLabelsPages mocks base method
func (m *MockFraudDetectorAPI) GetLabelsPages(arg0 *frauddetector.GetLabelsInput, arg1 func(*frauddetector.GetLabelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLabelsPages indicates an expected call of GetLabelsPages
func (mr *MockFraudDetectorAPIMockRecorder) GetLabelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetLabelsPages), arg0, arg1)
}

// GetLabelsPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetLabelsPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetLabelsInput, arg2 func(*frauddetector.GetLabelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLabelsPagesWithContext indicates an expected call of GetLabelsPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetLabelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetLabelsPagesWithContext), varargs...)
}

// GetLabelsRequest mocks base method
func (m *MockFraudDetectorAPI) GetLabelsRequest(arg0 *frauddetector.GetLabelsInput) (*request.Request, *frauddetector.GetLabelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetLabelsOutput)
	return ret0, ret1
}

// GetLabelsRequest indicates an expected call of GetLabelsRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetLabelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetLabelsRequest), arg0)
}

// GetLabelsWithContext mocks base method
func (m *MockFraudDetectorAPI) GetLabelsWithContext(arg0 context.Context, arg1 *frauddetector.GetLabelsInput, arg2 ...request.Option) (*frauddetector.GetLabelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabelsWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsWithContext indicates an expected call of GetLabelsWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetLabelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetLabelsWithContext), varargs...)
}

// GetModelVersion mocks base method
func (m *MockFraudDetectorAPI) GetModelVersion(arg0 *frauddetector.GetModelVersionInput) (*frauddetector.GetModelVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.GetModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersion indicates an expected call of GetModelVersion
func (mr *MockFraudDetectorAPIMockRecorder) GetModelVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModelVersion), arg0)
}

// GetModelVersionRequest mocks base method
func (m *MockFraudDetectorAPI) GetModelVersionRequest(arg0 *frauddetector.GetModelVersionInput) (*request.Request, *frauddetector.GetModelVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetModelVersionOutput)
	return ret0, ret1
}

// GetModelVersionRequest indicates an expected call of GetModelVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetModelVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModelVersionRequest), arg0)
}

// GetModelVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) GetModelVersionWithContext(arg0 context.Context, arg1 *frauddetector.GetModelVersionInput, arg2 ...request.Option) (*frauddetector.GetModelVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelVersionWithContext indicates an expected call of GetModelVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetModelVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModelVersionWithContext), varargs...)
}

// GetModels mocks base method
func (m *MockFraudDetectorAPI) GetModels(arg0 *frauddetector.GetModelsInput) (*frauddetector.GetModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModels", arg0)
	ret0, _ := ret[0].(*frauddetector.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels
func (mr *MockFraudDetectorAPIMockRecorder) GetModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModels), arg0)
}

// GetModelsPages mocks base method
func (m *MockFraudDetectorAPI) GetModelsPages(arg0 *frauddetector.GetModelsInput, arg1 func(*frauddetector.GetModelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetModelsPages indicates an expected call of GetModelsPages
func (mr *MockFraudDetectorAPIMockRecorder) GetModelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModelsPages), arg0, arg1)
}

// GetModelsPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetModelsPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetModelsInput, arg2 func(*frauddetector.GetModelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetModelsPagesWithContext indicates an expected call of GetModelsPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModelsPagesWithContext), varargs...)
}

// GetModelsRequest mocks base method
func (m *MockFraudDetectorAPI) GetModelsRequest(arg0 *frauddetector.GetModelsInput) (*request.Request, *frauddetector.GetModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetModelsOutput)
	return ret0, ret1
}

// GetModelsRequest indicates an expected call of GetModelsRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModelsRequest), arg0)
}

// GetModelsWithContext mocks base method
func (m *MockFraudDetectorAPI) GetModelsWithContext(arg0 context.Context, arg1 *frauddetector.GetModelsInput, arg2 ...request.Option) (*frauddetector.GetModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelsWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelsWithContext indicates an expected call of GetModelsWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetModelsWithContext), varargs...)
}

// GetOutcomes mocks base method
func (m *MockFraudDetectorAPI) GetOutcomes(arg0 *frauddetector.GetOutcomesInput) (*frauddetector.GetOutcomesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutcomes", arg0)
	ret0, _ := ret[0].(*frauddetector.GetOutcomesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomes indicates an expected call of GetOutcomes
func (mr *MockFraudDetectorAPIMockRecorder) GetOutcomes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomes", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetOutcomes), arg0)
}

// GetOutcomesPages mocks base method
func (m *MockFraudDetectorAPI) GetOutcomesPages(arg0 *frauddetector.GetOutcomesInput, arg1 func(*frauddetector.GetOutcomesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutcomesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOutcomesPages indicates an expected call of GetOutcomesPages
func (mr *MockFraudDetectorAPIMockRecorder) GetOutcomesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomesPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetOutcomesPages), arg0, arg1)
}

// GetOutcomesPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetOutcomesPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetOutcomesInput, arg2 func(*frauddetector.GetOutcomesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutcomesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOutcomesPagesWithContext indicates an expected call of GetOutcomesPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetOutcomesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomesPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetOutcomesPagesWithContext), varargs...)
}

// GetOutcomesRequest mocks base method
func (m *MockFraudDetectorAPI) GetOutcomesRequest(arg0 *frauddetector.GetOutcomesInput) (*request.Request, *frauddetector.GetOutcomesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutcomesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetOutcomesOutput)
	return ret0, ret1
}

// GetOutcomesRequest indicates an expected call of GetOutcomesRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetOutcomesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomesRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetOutcomesRequest), arg0)
}

// GetOutcomesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetOutcomesWithContext(arg0 context.Context, arg1 *frauddetector.GetOutcomesInput, arg2 ...request.Option) (*frauddetector.GetOutcomesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOutcomesWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetOutcomesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomesWithContext indicates an expected call of GetOutcomesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetOutcomesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetOutcomesWithContext), varargs...)
}

// GetRules mocks base method
func (m *MockFraudDetectorAPI) GetRules(arg0 *frauddetector.GetRulesInput) (*frauddetector.GetRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRules", arg0)
	ret0, _ := ret[0].(*frauddetector.GetRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRules indicates an expected call of GetRules
func (mr *MockFraudDetectorAPIMockRecorder) GetRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetRules), arg0)
}

// GetRulesPages mocks base method
func (m *MockFraudDetectorAPI) GetRulesPages(arg0 *frauddetector.GetRulesInput, arg1 func(*frauddetector.GetRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRulesPages indicates an expected call of GetRulesPages
func (mr *MockFraudDetectorAPIMockRecorder) GetRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRulesPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetRulesPages), arg0, arg1)
}

// GetRulesPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetRulesPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetRulesInput, arg2 func(*frauddetector.GetRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRulesPagesWithContext indicates an expected call of GetRulesPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRulesPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetRulesPagesWithContext), varargs...)
}

// GetRulesRequest mocks base method
func (m *MockFraudDetectorAPI) GetRulesRequest(arg0 *frauddetector.GetRulesInput) (*request.Request, *frauddetector.GetRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetRulesOutput)
	return ret0, ret1
}

// GetRulesRequest indicates an expected call of GetRulesRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRulesRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetRulesRequest), arg0)
}

// GetRulesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetRulesWithContext(arg0 context.Context, arg1 *frauddetector.GetRulesInput, arg2 ...request.Option) (*frauddetector.GetRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRulesWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRulesWithContext indicates an expected call of GetRulesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRulesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetRulesWithContext), varargs...)
}

// GetVariables mocks base method
func (m *MockFraudDetectorAPI) GetVariables(arg0 *frauddetector.GetVariablesInput) (*frauddetector.GetVariablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariables", arg0)
	ret0, _ := ret[0].(*frauddetector.GetVariablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariables indicates an expected call of GetVariables
func (mr *MockFraudDetectorAPIMockRecorder) GetVariables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariables", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetVariables), arg0)
}

// GetVariablesPages mocks base method
func (m *MockFraudDetectorAPI) GetVariablesPages(arg0 *frauddetector.GetVariablesInput, arg1 func(*frauddetector.GetVariablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetVariablesPages indicates an expected call of GetVariablesPages
func (mr *MockFraudDetectorAPIMockRecorder) GetVariablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariablesPages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetVariablesPages), arg0, arg1)
}

// GetVariablesPagesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetVariablesPagesWithContext(arg0 context.Context, arg1 *frauddetector.GetVariablesInput, arg2 func(*frauddetector.GetVariablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetVariablesPagesWithContext indicates an expected call of GetVariablesPagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetVariablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariablesPagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetVariablesPagesWithContext), varargs...)
}

// GetVariablesRequest mocks base method
func (m *MockFraudDetectorAPI) GetVariablesRequest(arg0 *frauddetector.GetVariablesInput) (*request.Request, *frauddetector.GetVariablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.GetVariablesOutput)
	return ret0, ret1
}

// GetVariablesRequest indicates an expected call of GetVariablesRequest
func (mr *MockFraudDetectorAPIMockRecorder) GetVariablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariablesRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetVariablesRequest), arg0)
}

// GetVariablesWithContext mocks base method
func (m *MockFraudDetectorAPI) GetVariablesWithContext(arg0 context.Context, arg1 *frauddetector.GetVariablesInput, arg2 ...request.Option) (*frauddetector.GetVariablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariablesWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.GetVariablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariablesWithContext indicates an expected call of GetVariablesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) GetVariablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariablesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).GetVariablesWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockFraudDetectorAPI) ListTagsForResource(arg0 *frauddetector.ListTagsForResourceInput) (*frauddetector.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*frauddetector.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockFraudDetectorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockFraudDetectorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourcePages mocks base method
func (m *MockFraudDetectorAPI) ListTagsForResourcePages(arg0 *frauddetector.ListTagsForResourceInput, arg1 func(*frauddetector.ListTagsForResourceOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourcePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePages indicates an expected call of ListTagsForResourcePages
func (mr *MockFraudDetectorAPIMockRecorder) ListTagsForResourcePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePages", reflect.TypeOf((*MockFraudDetectorAPI)(nil).ListTagsForResourcePages), arg0, arg1)
}

// ListTagsForResourcePagesWithContext mocks base method
func (m *MockFraudDetectorAPI) ListTagsForResourcePagesWithContext(arg0 context.Context, arg1 *frauddetector.ListTagsForResourceInput, arg2 func(*frauddetector.ListTagsForResourceOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourcePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTagsForResourcePagesWithContext indicates an expected call of ListTagsForResourcePagesWithContext
func (mr *MockFraudDetectorAPIMockRecorder) ListTagsForResourcePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourcePagesWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).ListTagsForResourcePagesWithContext), varargs...)
}

// ListTagsForResourceRequest mocks base method
func (m *MockFraudDetectorAPI) ListTagsForResourceRequest(arg0 *frauddetector.ListTagsForResourceInput) (*request.Request, *frauddetector.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockFraudDetectorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockFraudDetectorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *frauddetector.ListTagsForResourceInput, arg2 ...request.Option) (*frauddetector.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockFraudDetectorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutDetector mocks base method
func (m *MockFraudDetectorAPI) PutDetector(arg0 *frauddetector.PutDetectorInput) (*frauddetector.PutDetectorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDetector", arg0)
	ret0, _ := ret[0].(*frauddetector.PutDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDetector indicates an expected call of PutDetector
func (mr *MockFraudDetectorAPIMockRecorder) PutDetector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDetector", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutDetector), arg0)
}

// PutDetectorRequest mocks base method
func (m *MockFraudDetectorAPI) PutDetectorRequest(arg0 *frauddetector.PutDetectorInput) (*request.Request, *frauddetector.PutDetectorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDetectorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.PutDetectorOutput)
	return ret0, ret1
}

// PutDetectorRequest indicates an expected call of PutDetectorRequest
func (mr *MockFraudDetectorAPIMockRecorder) PutDetectorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDetectorRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutDetectorRequest), arg0)
}

// PutDetectorWithContext mocks base method
func (m *MockFraudDetectorAPI) PutDetectorWithContext(arg0 context.Context, arg1 *frauddetector.PutDetectorInput, arg2 ...request.Option) (*frauddetector.PutDetectorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDetectorWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.PutDetectorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDetectorWithContext indicates an expected call of PutDetectorWithContext
func (mr *MockFraudDetectorAPIMockRecorder) PutDetectorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDetectorWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutDetectorWithContext), varargs...)
}

// PutEntityType mocks base method
func (m *MockFraudDetectorAPI) PutEntityType(arg0 *frauddetector.PutEntityTypeInput) (*frauddetector.PutEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEntityType", arg0)
	ret0, _ := ret[0].(*frauddetector.PutEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEntityType indicates an expected call of PutEntityType
func (mr *MockFraudDetectorAPIMockRecorder) PutEntityType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEntityType", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutEntityType), arg0)
}

// PutEntityTypeRequest mocks base method
func (m *MockFraudDetectorAPI) PutEntityTypeRequest(arg0 *frauddetector.PutEntityTypeInput) (*request.Request, *frauddetector.PutEntityTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEntityTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.PutEntityTypeOutput)
	return ret0, ret1
}

// PutEntityTypeRequest indicates an expected call of PutEntityTypeRequest
func (mr *MockFraudDetectorAPIMockRecorder) PutEntityTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEntityTypeRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutEntityTypeRequest), arg0)
}

// PutEntityTypeWithContext mocks base method
func (m *MockFraudDetectorAPI) PutEntityTypeWithContext(arg0 context.Context, arg1 *frauddetector.PutEntityTypeInput, arg2 ...request.Option) (*frauddetector.PutEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEntityTypeWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.PutEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEntityTypeWithContext indicates an expected call of PutEntityTypeWithContext
func (mr *MockFraudDetectorAPIMockRecorder) PutEntityTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEntityTypeWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutEntityTypeWithContext), varargs...)
}

// PutEventType mocks base method
func (m *MockFraudDetectorAPI) PutEventType(arg0 *frauddetector.PutEventTypeInput) (*frauddetector.PutEventTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEventType", arg0)
	ret0, _ := ret[0].(*frauddetector.PutEventTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEventType indicates an expected call of PutEventType
func (mr *MockFraudDetectorAPIMockRecorder) PutEventType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventType", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutEventType), arg0)
}

// PutEventTypeRequest mocks base method
func (m *MockFraudDetectorAPI) PutEventTypeRequest(arg0 *frauddetector.PutEventTypeInput) (*request.Request, *frauddetector.PutEventTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEventTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.PutEventTypeOutput)
	return ret0, ret1
}

// PutEventTypeRequest indicates an expected call of PutEventTypeRequest
func (mr *MockFraudDetectorAPIMockRecorder) PutEventTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventTypeRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutEventTypeRequest), arg0)
}

// PutEventTypeWithContext mocks base method
func (m *MockFraudDetectorAPI) PutEventTypeWithContext(arg0 context.Context, arg1 *frauddetector.PutEventTypeInput, arg2 ...request.Option) (*frauddetector.PutEventTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutEventTypeWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.PutEventTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEventTypeWithContext indicates an expected call of PutEventTypeWithContext
func (mr *MockFraudDetectorAPIMockRecorder) PutEventTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEventTypeWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutEventTypeWithContext), varargs...)
}

// PutExternalModel mocks base method
func (m *MockFraudDetectorAPI) PutExternalModel(arg0 *frauddetector.PutExternalModelInput) (*frauddetector.PutExternalModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutExternalModel", arg0)
	ret0, _ := ret[0].(*frauddetector.PutExternalModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExternalModel indicates an expected call of PutExternalModel
func (mr *MockFraudDetectorAPIMockRecorder) PutExternalModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExternalModel", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutExternalModel), arg0)
}

// PutExternalModelRequest mocks base method
func (m *MockFraudDetectorAPI) PutExternalModelRequest(arg0 *frauddetector.PutExternalModelInput) (*request.Request, *frauddetector.PutExternalModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutExternalModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.PutExternalModelOutput)
	return ret0, ret1
}

// PutExternalModelRequest indicates an expected call of PutExternalModelRequest
func (mr *MockFraudDetectorAPIMockRecorder) PutExternalModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExternalModelRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutExternalModelRequest), arg0)
}

// PutExternalModelWithContext mocks base method
func (m *MockFraudDetectorAPI) PutExternalModelWithContext(arg0 context.Context, arg1 *frauddetector.PutExternalModelInput, arg2 ...request.Option) (*frauddetector.PutExternalModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutExternalModelWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.PutExternalModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutExternalModelWithContext indicates an expected call of PutExternalModelWithContext
func (mr *MockFraudDetectorAPIMockRecorder) PutExternalModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutExternalModelWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutExternalModelWithContext), varargs...)
}

// PutKMSEncryptionKey mocks base method
func (m *MockFraudDetectorAPI) PutKMSEncryptionKey(arg0 *frauddetector.PutKMSEncryptionKeyInput) (*frauddetector.PutKMSEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKMSEncryptionKey", arg0)
	ret0, _ := ret[0].(*frauddetector.PutKMSEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutKMSEncryptionKey indicates an expected call of PutKMSEncryptionKey
func (mr *MockFraudDetectorAPIMockRecorder) PutKMSEncryptionKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKMSEncryptionKey", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutKMSEncryptionKey), arg0)
}

// PutKMSEncryptionKeyRequest mocks base method
func (m *MockFraudDetectorAPI) PutKMSEncryptionKeyRequest(arg0 *frauddetector.PutKMSEncryptionKeyInput) (*request.Request, *frauddetector.PutKMSEncryptionKeyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKMSEncryptionKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.PutKMSEncryptionKeyOutput)
	return ret0, ret1
}

// PutKMSEncryptionKeyRequest indicates an expected call of PutKMSEncryptionKeyRequest
func (mr *MockFraudDetectorAPIMockRecorder) PutKMSEncryptionKeyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKMSEncryptionKeyRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutKMSEncryptionKeyRequest), arg0)
}

// PutKMSEncryptionKeyWithContext mocks base method
func (m *MockFraudDetectorAPI) PutKMSEncryptionKeyWithContext(arg0 context.Context, arg1 *frauddetector.PutKMSEncryptionKeyInput, arg2 ...request.Option) (*frauddetector.PutKMSEncryptionKeyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutKMSEncryptionKeyWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.PutKMSEncryptionKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutKMSEncryptionKeyWithContext indicates an expected call of PutKMSEncryptionKeyWithContext
func (mr *MockFraudDetectorAPIMockRecorder) PutKMSEncryptionKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKMSEncryptionKeyWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutKMSEncryptionKeyWithContext), varargs...)
}

// PutLabel mocks base method
func (m *MockFraudDetectorAPI) PutLabel(arg0 *frauddetector.PutLabelInput) (*frauddetector.PutLabelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLabel", arg0)
	ret0, _ := ret[0].(*frauddetector.PutLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLabel indicates an expected call of PutLabel
func (mr *MockFraudDetectorAPIMockRecorder) PutLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLabel", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutLabel), arg0)
}

// PutLabelRequest mocks base method
func (m *MockFraudDetectorAPI) PutLabelRequest(arg0 *frauddetector.PutLabelInput) (*request.Request, *frauddetector.PutLabelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLabelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.PutLabelOutput)
	return ret0, ret1
}

// PutLabelRequest indicates an expected call of PutLabelRequest
func (mr *MockFraudDetectorAPIMockRecorder) PutLabelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLabelRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutLabelRequest), arg0)
}

// PutLabelWithContext mocks base method
func (m *MockFraudDetectorAPI) PutLabelWithContext(arg0 context.Context, arg1 *frauddetector.PutLabelInput, arg2 ...request.Option) (*frauddetector.PutLabelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLabelWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.PutLabelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLabelWithContext indicates an expected call of PutLabelWithContext
func (mr *MockFraudDetectorAPIMockRecorder) PutLabelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLabelWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutLabelWithContext), varargs...)
}

// PutOutcome mocks base method
func (m *MockFraudDetectorAPI) PutOutcome(arg0 *frauddetector.PutOutcomeInput) (*frauddetector.PutOutcomeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOutcome", arg0)
	ret0, _ := ret[0].(*frauddetector.PutOutcomeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutOutcome indicates an expected call of PutOutcome
func (mr *MockFraudDetectorAPIMockRecorder) PutOutcome(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOutcome", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutOutcome), arg0)
}

// PutOutcomeRequest mocks base method
func (m *MockFraudDetectorAPI) PutOutcomeRequest(arg0 *frauddetector.PutOutcomeInput) (*request.Request, *frauddetector.PutOutcomeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOutcomeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.PutOutcomeOutput)
	return ret0, ret1
}

// PutOutcomeRequest indicates an expected call of PutOutcomeRequest
func (mr *MockFraudDetectorAPIMockRecorder) PutOutcomeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOutcomeRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutOutcomeRequest), arg0)
}

// PutOutcomeWithContext mocks base method
func (m *MockFraudDetectorAPI) PutOutcomeWithContext(arg0 context.Context, arg1 *frauddetector.PutOutcomeInput, arg2 ...request.Option) (*frauddetector.PutOutcomeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutOutcomeWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.PutOutcomeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutOutcomeWithContext indicates an expected call of PutOutcomeWithContext
func (mr *MockFraudDetectorAPIMockRecorder) PutOutcomeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOutcomeWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).PutOutcomeWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockFraudDetectorAPI) TagResource(arg0 *frauddetector.TagResourceInput) (*frauddetector.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*frauddetector.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockFraudDetectorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockFraudDetectorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockFraudDetectorAPI) TagResourceRequest(arg0 *frauddetector.TagResourceInput) (*request.Request, *frauddetector.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockFraudDetectorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockFraudDetectorAPI) TagResourceWithContext(arg0 context.Context, arg1 *frauddetector.TagResourceInput, arg2 ...request.Option) (*frauddetector.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockFraudDetectorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockFraudDetectorAPI) UntagResource(arg0 *frauddetector.UntagResourceInput) (*frauddetector.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*frauddetector.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockFraudDetectorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockFraudDetectorAPI) UntagResourceRequest(arg0 *frauddetector.UntagResourceInput) (*request.Request, *frauddetector.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockFraudDetectorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockFraudDetectorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *frauddetector.UntagResourceInput, arg2 ...request.Option) (*frauddetector.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDetectorVersion mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersion(arg0 *frauddetector.UpdateDetectorVersionInput) (*frauddetector.UpdateDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorVersion indicates an expected call of UpdateDetectorVersion
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersion), arg0)
}

// UpdateDetectorVersionMetadata mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionMetadata(arg0 *frauddetector.UpdateDetectorVersionMetadataInput) (*frauddetector.UpdateDetectorVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorVersionMetadata", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateDetectorVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorVersionMetadata indicates an expected call of UpdateDetectorVersionMetadata
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionMetadata", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionMetadata), arg0)
}

// UpdateDetectorVersionMetadataRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionMetadataRequest(arg0 *frauddetector.UpdateDetectorVersionMetadataInput) (*request.Request, *frauddetector.UpdateDetectorVersionMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorVersionMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateDetectorVersionMetadataOutput)
	return ret0, ret1
}

// UpdateDetectorVersionMetadataRequest indicates an expected call of UpdateDetectorVersionMetadataRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionMetadataRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionMetadataRequest), arg0)
}

// UpdateDetectorVersionMetadataWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionMetadataWithContext(arg0 context.Context, arg1 *frauddetector.UpdateDetectorVersionMetadataInput, arg2 ...request.Option) (*frauddetector.UpdateDetectorVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDetectorVersionMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateDetectorVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorVersionMetadataWithContext indicates an expected call of UpdateDetectorVersionMetadataWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionMetadataWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionMetadataWithContext), varargs...)
}

// UpdateDetectorVersionRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionRequest(arg0 *frauddetector.UpdateDetectorVersionInput) (*request.Request, *frauddetector.UpdateDetectorVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateDetectorVersionOutput)
	return ret0, ret1
}

// UpdateDetectorVersionRequest indicates an expected call of UpdateDetectorVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionRequest), arg0)
}

// UpdateDetectorVersionStatus mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionStatus(arg0 *frauddetector.UpdateDetectorVersionStatusInput) (*frauddetector.UpdateDetectorVersionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorVersionStatus", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateDetectorVersionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorVersionStatus indicates an expected call of UpdateDetectorVersionStatus
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionStatus", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionStatus), arg0)
}

// UpdateDetectorVersionStatusRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionStatusRequest(arg0 *frauddetector.UpdateDetectorVersionStatusInput) (*request.Request, *frauddetector.UpdateDetectorVersionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetectorVersionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateDetectorVersionStatusOutput)
	return ret0, ret1
}

// UpdateDetectorVersionStatusRequest indicates an expected call of UpdateDetectorVersionStatusRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionStatusRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionStatusRequest), arg0)
}

// UpdateDetectorVersionStatusWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionStatusWithContext(arg0 context.Context, arg1 *frauddetector.UpdateDetectorVersionStatusInput, arg2 ...request.Option) (*frauddetector.UpdateDetectorVersionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDetectorVersionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateDetectorVersionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorVersionStatusWithContext indicates an expected call of UpdateDetectorVersionStatusWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionStatusWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionStatusWithContext), varargs...)
}

// UpdateDetectorVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateDetectorVersionWithContext(arg0 context.Context, arg1 *frauddetector.UpdateDetectorVersionInput, arg2 ...request.Option) (*frauddetector.UpdateDetectorVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDetectorVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateDetectorVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDetectorVersionWithContext indicates an expected call of UpdateDetectorVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateDetectorVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetectorVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateDetectorVersionWithContext), varargs...)
}

// UpdateModel mocks base method
func (m *MockFraudDetectorAPI) UpdateModel(arg0 *frauddetector.UpdateModelInput) (*frauddetector.UpdateModelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModel", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModel indicates an expected call of UpdateModel
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModel), arg0)
}

// UpdateModelRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateModelRequest(arg0 *frauddetector.UpdateModelInput) (*request.Request, *frauddetector.UpdateModelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateModelOutput)
	return ret0, ret1
}

// UpdateModelRequest indicates an expected call of UpdateModelRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelRequest), arg0)
}

// UpdateModelVersion mocks base method
func (m *MockFraudDetectorAPI) UpdateModelVersion(arg0 *frauddetector.UpdateModelVersionInput) (*frauddetector.UpdateModelVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelVersion), arg0)
}

// UpdateModelVersionRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateModelVersionRequest(arg0 *frauddetector.UpdateModelVersionInput) (*request.Request, *frauddetector.UpdateModelVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateModelVersionOutput)
	return ret0, ret1
}

// UpdateModelVersionRequest indicates an expected call of UpdateModelVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelVersionRequest), arg0)
}

// UpdateModelVersionStatus mocks base method
func (m *MockFraudDetectorAPI) UpdateModelVersionStatus(arg0 *frauddetector.UpdateModelVersionStatusInput) (*frauddetector.UpdateModelVersionStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersionStatus", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateModelVersionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersionStatus indicates an expected call of UpdateModelVersionStatus
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelVersionStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersionStatus", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelVersionStatus), arg0)
}

// UpdateModelVersionStatusRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateModelVersionStatusRequest(arg0 *frauddetector.UpdateModelVersionStatusInput) (*request.Request, *frauddetector.UpdateModelVersionStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelVersionStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateModelVersionStatusOutput)
	return ret0, ret1
}

// UpdateModelVersionStatusRequest indicates an expected call of UpdateModelVersionStatusRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelVersionStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersionStatusRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelVersionStatusRequest), arg0)
}

// UpdateModelVersionStatusWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateModelVersionStatusWithContext(arg0 context.Context, arg1 *frauddetector.UpdateModelVersionStatusInput, arg2 ...request.Option) (*frauddetector.UpdateModelVersionStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelVersionStatusWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateModelVersionStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersionStatusWithContext indicates an expected call of UpdateModelVersionStatusWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelVersionStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersionStatusWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelVersionStatusWithContext), varargs...)
}

// UpdateModelVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateModelVersionWithContext(arg0 context.Context, arg1 *frauddetector.UpdateModelVersionInput, arg2 ...request.Option) (*frauddetector.UpdateModelVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateModelVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersionWithContext indicates an expected call of UpdateModelVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelVersionWithContext), varargs...)
}

// UpdateModelWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateModelWithContext(arg0 context.Context, arg1 *frauddetector.UpdateModelInput, arg2 ...request.Option) (*frauddetector.UpdateModelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelWithContext indicates an expected call of UpdateModelWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateModelWithContext), varargs...)
}

// UpdateRuleMetadata mocks base method
func (m *MockFraudDetectorAPI) UpdateRuleMetadata(arg0 *frauddetector.UpdateRuleMetadataInput) (*frauddetector.UpdateRuleMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleMetadata", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateRuleMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleMetadata indicates an expected call of UpdateRuleMetadata
func (mr *MockFraudDetectorAPIMockRecorder) UpdateRuleMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleMetadata", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateRuleMetadata), arg0)
}

// UpdateRuleMetadataRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateRuleMetadataRequest(arg0 *frauddetector.UpdateRuleMetadataInput) (*request.Request, *frauddetector.UpdateRuleMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateRuleMetadataOutput)
	return ret0, ret1
}

// UpdateRuleMetadataRequest indicates an expected call of UpdateRuleMetadataRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateRuleMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleMetadataRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateRuleMetadataRequest), arg0)
}

// UpdateRuleMetadataWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateRuleMetadataWithContext(arg0 context.Context, arg1 *frauddetector.UpdateRuleMetadataInput, arg2 ...request.Option) (*frauddetector.UpdateRuleMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateRuleMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleMetadataWithContext indicates an expected call of UpdateRuleMetadataWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateRuleMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleMetadataWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateRuleMetadataWithContext), varargs...)
}

// UpdateRuleVersion mocks base method
func (m *MockFraudDetectorAPI) UpdateRuleVersion(arg0 *frauddetector.UpdateRuleVersionInput) (*frauddetector.UpdateRuleVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleVersion", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateRuleVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleVersion indicates an expected call of UpdateRuleVersion
func (mr *MockFraudDetectorAPIMockRecorder) UpdateRuleVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleVersion", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateRuleVersion), arg0)
}

// UpdateRuleVersionRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateRuleVersionRequest(arg0 *frauddetector.UpdateRuleVersionInput) (*request.Request, *frauddetector.UpdateRuleVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateRuleVersionOutput)
	return ret0, ret1
}

// UpdateRuleVersionRequest indicates an expected call of UpdateRuleVersionRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateRuleVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleVersionRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateRuleVersionRequest), arg0)
}

// UpdateRuleVersionWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateRuleVersionWithContext(arg0 context.Context, arg1 *frauddetector.UpdateRuleVersionInput, arg2 ...request.Option) (*frauddetector.UpdateRuleVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleVersionWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateRuleVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleVersionWithContext indicates an expected call of UpdateRuleVersionWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateRuleVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleVersionWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateRuleVersionWithContext), varargs...)
}

// UpdateVariable mocks base method
func (m *MockFraudDetectorAPI) UpdateVariable(arg0 *frauddetector.UpdateVariableInput) (*frauddetector.UpdateVariableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariable", arg0)
	ret0, _ := ret[0].(*frauddetector.UpdateVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVariable indicates an expected call of UpdateVariable
func (mr *MockFraudDetectorAPIMockRecorder) UpdateVariable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariable", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateVariable), arg0)
}

// UpdateVariableRequest mocks base method
func (m *MockFraudDetectorAPI) UpdateVariableRequest(arg0 *frauddetector.UpdateVariableInput) (*request.Request, *frauddetector.UpdateVariableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVariableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*frauddetector.UpdateVariableOutput)
	return ret0, ret1
}

// UpdateVariableRequest indicates an expected call of UpdateVariableRequest
func (mr *MockFraudDetectorAPIMockRecorder) UpdateVariableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariableRequest", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateVariableRequest), arg0)
}

// UpdateVariableWithContext mocks base method
func (m *MockFraudDetectorAPI) UpdateVariableWithContext(arg0 context.Context, arg1 *frauddetector.UpdateVariableInput, arg2 ...request.Option) (*frauddetector.UpdateVariableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVariableWithContext", varargs...)
	ret0, _ := ret[0].(*frauddetector.UpdateVariableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVariableWithContext indicates an expected call of UpdateVariableWithContext
func (mr *MockFraudDetectorAPIMockRecorder) UpdateVariableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariableWithContext", reflect.TypeOf((*MockFraudDetectorAPI)(nil).UpdateVariableWithContext), varargs...)
}

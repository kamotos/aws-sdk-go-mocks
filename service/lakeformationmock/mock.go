// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/lakeformation/lakeformationiface (interfaces: LakeFormationAPI)

// Package lakeformationmock is a generated GoMock package.
package lakeformationmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	lakeformation "github.com/aws/aws-sdk-go/service/lakeformation"
	gomock "github.com/golang/mock/gomock"
)

// MockLakeFormationAPI is a mock of LakeFormationAPI interface.
type MockLakeFormationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLakeFormationAPIMockRecorder
}

// MockLakeFormationAPIMockRecorder is the mock recorder for MockLakeFormationAPI.
type MockLakeFormationAPIMockRecorder struct {
	mock *MockLakeFormationAPI
}

// NewMockLakeFormationAPI creates a new mock instance.
func NewMockLakeFormationAPI(ctrl *gomock.Controller) *MockLakeFormationAPI {
	mock := &MockLakeFormationAPI{ctrl: ctrl}
	mock.recorder = &MockLakeFormationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLakeFormationAPI) EXPECT() *MockLakeFormationAPIMockRecorder {
	return m.recorder
}

// AddLFTagsToResource mocks base method.
func (m *MockLakeFormationAPI) AddLFTagsToResource(arg0 *lakeformation.AddLFTagsToResourceInput) (*lakeformation.AddLFTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLFTagsToResource", arg0)
	ret0, _ := ret[0].(*lakeformation.AddLFTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLFTagsToResource indicates an expected call of AddLFTagsToResource.
func (mr *MockLakeFormationAPIMockRecorder) AddLFTagsToResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLFTagsToResource", reflect.TypeOf((*MockLakeFormationAPI)(nil).AddLFTagsToResource), arg0)
}

// AddLFTagsToResourceRequest mocks base method.
func (m *MockLakeFormationAPI) AddLFTagsToResourceRequest(arg0 *lakeformation.AddLFTagsToResourceInput) (*request.Request, *lakeformation.AddLFTagsToResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLFTagsToResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.AddLFTagsToResourceOutput)
	return ret0, ret1
}

// AddLFTagsToResourceRequest indicates an expected call of AddLFTagsToResourceRequest.
func (mr *MockLakeFormationAPIMockRecorder) AddLFTagsToResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLFTagsToResourceRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).AddLFTagsToResourceRequest), arg0)
}

// AddLFTagsToResourceWithContext mocks base method.
func (m *MockLakeFormationAPI) AddLFTagsToResourceWithContext(arg0 context.Context, arg1 *lakeformation.AddLFTagsToResourceInput, arg2 ...request.Option) (*lakeformation.AddLFTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddLFTagsToResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.AddLFTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLFTagsToResourceWithContext indicates an expected call of AddLFTagsToResourceWithContext.
func (mr *MockLakeFormationAPIMockRecorder) AddLFTagsToResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLFTagsToResourceWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).AddLFTagsToResourceWithContext), varargs...)
}

// BatchGrantPermissions mocks base method.
func (m *MockLakeFormationAPI) BatchGrantPermissions(arg0 *lakeformation.BatchGrantPermissionsInput) (*lakeformation.BatchGrantPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGrantPermissions", arg0)
	ret0, _ := ret[0].(*lakeformation.BatchGrantPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGrantPermissions indicates an expected call of BatchGrantPermissions.
func (mr *MockLakeFormationAPIMockRecorder) BatchGrantPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGrantPermissions", reflect.TypeOf((*MockLakeFormationAPI)(nil).BatchGrantPermissions), arg0)
}

// BatchGrantPermissionsRequest mocks base method.
func (m *MockLakeFormationAPI) BatchGrantPermissionsRequest(arg0 *lakeformation.BatchGrantPermissionsInput) (*request.Request, *lakeformation.BatchGrantPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGrantPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.BatchGrantPermissionsOutput)
	return ret0, ret1
}

// BatchGrantPermissionsRequest indicates an expected call of BatchGrantPermissionsRequest.
func (mr *MockLakeFormationAPIMockRecorder) BatchGrantPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGrantPermissionsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).BatchGrantPermissionsRequest), arg0)
}

// BatchGrantPermissionsWithContext mocks base method.
func (m *MockLakeFormationAPI) BatchGrantPermissionsWithContext(arg0 context.Context, arg1 *lakeformation.BatchGrantPermissionsInput, arg2 ...request.Option) (*lakeformation.BatchGrantPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGrantPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.BatchGrantPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGrantPermissionsWithContext indicates an expected call of BatchGrantPermissionsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) BatchGrantPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGrantPermissionsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).BatchGrantPermissionsWithContext), varargs...)
}

// BatchRevokePermissions mocks base method.
func (m *MockLakeFormationAPI) BatchRevokePermissions(arg0 *lakeformation.BatchRevokePermissionsInput) (*lakeformation.BatchRevokePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRevokePermissions", arg0)
	ret0, _ := ret[0].(*lakeformation.BatchRevokePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRevokePermissions indicates an expected call of BatchRevokePermissions.
func (mr *MockLakeFormationAPIMockRecorder) BatchRevokePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRevokePermissions", reflect.TypeOf((*MockLakeFormationAPI)(nil).BatchRevokePermissions), arg0)
}

// BatchRevokePermissionsRequest mocks base method.
func (m *MockLakeFormationAPI) BatchRevokePermissionsRequest(arg0 *lakeformation.BatchRevokePermissionsInput) (*request.Request, *lakeformation.BatchRevokePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRevokePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.BatchRevokePermissionsOutput)
	return ret0, ret1
}

// BatchRevokePermissionsRequest indicates an expected call of BatchRevokePermissionsRequest.
func (mr *MockLakeFormationAPIMockRecorder) BatchRevokePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRevokePermissionsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).BatchRevokePermissionsRequest), arg0)
}

// BatchRevokePermissionsWithContext mocks base method.
func (m *MockLakeFormationAPI) BatchRevokePermissionsWithContext(arg0 context.Context, arg1 *lakeformation.BatchRevokePermissionsInput, arg2 ...request.Option) (*lakeformation.BatchRevokePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchRevokePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.BatchRevokePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRevokePermissionsWithContext indicates an expected call of BatchRevokePermissionsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) BatchRevokePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRevokePermissionsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).BatchRevokePermissionsWithContext), varargs...)
}

// CancelTransaction mocks base method.
func (m *MockLakeFormationAPI) CancelTransaction(arg0 *lakeformation.CancelTransactionInput) (*lakeformation.CancelTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTransaction", arg0)
	ret0, _ := ret[0].(*lakeformation.CancelTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTransaction indicates an expected call of CancelTransaction.
func (mr *MockLakeFormationAPIMockRecorder) CancelTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTransaction", reflect.TypeOf((*MockLakeFormationAPI)(nil).CancelTransaction), arg0)
}

// CancelTransactionRequest mocks base method.
func (m *MockLakeFormationAPI) CancelTransactionRequest(arg0 *lakeformation.CancelTransactionInput) (*request.Request, *lakeformation.CancelTransactionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTransactionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.CancelTransactionOutput)
	return ret0, ret1
}

// CancelTransactionRequest indicates an expected call of CancelTransactionRequest.
func (mr *MockLakeFormationAPIMockRecorder) CancelTransactionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTransactionRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).CancelTransactionRequest), arg0)
}

// CancelTransactionWithContext mocks base method.
func (m *MockLakeFormationAPI) CancelTransactionWithContext(arg0 context.Context, arg1 *lakeformation.CancelTransactionInput, arg2 ...request.Option) (*lakeformation.CancelTransactionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelTransactionWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.CancelTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTransactionWithContext indicates an expected call of CancelTransactionWithContext.
func (mr *MockLakeFormationAPIMockRecorder) CancelTransactionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTransactionWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).CancelTransactionWithContext), varargs...)
}

// CommitTransaction mocks base method.
func (m *MockLakeFormationAPI) CommitTransaction(arg0 *lakeformation.CommitTransactionInput) (*lakeformation.CommitTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", arg0)
	ret0, _ := ret[0].(*lakeformation.CommitTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockLakeFormationAPIMockRecorder) CommitTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockLakeFormationAPI)(nil).CommitTransaction), arg0)
}

// CommitTransactionRequest mocks base method.
func (m *MockLakeFormationAPI) CommitTransactionRequest(arg0 *lakeformation.CommitTransactionInput) (*request.Request, *lakeformation.CommitTransactionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransactionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.CommitTransactionOutput)
	return ret0, ret1
}

// CommitTransactionRequest indicates an expected call of CommitTransactionRequest.
func (mr *MockLakeFormationAPIMockRecorder) CommitTransactionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransactionRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).CommitTransactionRequest), arg0)
}

// CommitTransactionWithContext mocks base method.
func (m *MockLakeFormationAPI) CommitTransactionWithContext(arg0 context.Context, arg1 *lakeformation.CommitTransactionInput, arg2 ...request.Option) (*lakeformation.CommitTransactionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitTransactionWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.CommitTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitTransactionWithContext indicates an expected call of CommitTransactionWithContext.
func (mr *MockLakeFormationAPIMockRecorder) CommitTransactionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransactionWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).CommitTransactionWithContext), varargs...)
}

// CreateDataCellsFilter mocks base method.
func (m *MockLakeFormationAPI) CreateDataCellsFilter(arg0 *lakeformation.CreateDataCellsFilterInput) (*lakeformation.CreateDataCellsFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataCellsFilter", arg0)
	ret0, _ := ret[0].(*lakeformation.CreateDataCellsFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataCellsFilter indicates an expected call of CreateDataCellsFilter.
func (mr *MockLakeFormationAPIMockRecorder) CreateDataCellsFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataCellsFilter", reflect.TypeOf((*MockLakeFormationAPI)(nil).CreateDataCellsFilter), arg0)
}

// CreateDataCellsFilterRequest mocks base method.
func (m *MockLakeFormationAPI) CreateDataCellsFilterRequest(arg0 *lakeformation.CreateDataCellsFilterInput) (*request.Request, *lakeformation.CreateDataCellsFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataCellsFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.CreateDataCellsFilterOutput)
	return ret0, ret1
}

// CreateDataCellsFilterRequest indicates an expected call of CreateDataCellsFilterRequest.
func (mr *MockLakeFormationAPIMockRecorder) CreateDataCellsFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataCellsFilterRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).CreateDataCellsFilterRequest), arg0)
}

// CreateDataCellsFilterWithContext mocks base method.
func (m *MockLakeFormationAPI) CreateDataCellsFilterWithContext(arg0 context.Context, arg1 *lakeformation.CreateDataCellsFilterInput, arg2 ...request.Option) (*lakeformation.CreateDataCellsFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataCellsFilterWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.CreateDataCellsFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataCellsFilterWithContext indicates an expected call of CreateDataCellsFilterWithContext.
func (mr *MockLakeFormationAPIMockRecorder) CreateDataCellsFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataCellsFilterWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).CreateDataCellsFilterWithContext), varargs...)
}

// CreateLFTag mocks base method.
func (m *MockLakeFormationAPI) CreateLFTag(arg0 *lakeformation.CreateLFTagInput) (*lakeformation.CreateLFTagOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLFTag", arg0)
	ret0, _ := ret[0].(*lakeformation.CreateLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLFTag indicates an expected call of CreateLFTag.
func (mr *MockLakeFormationAPIMockRecorder) CreateLFTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLFTag", reflect.TypeOf((*MockLakeFormationAPI)(nil).CreateLFTag), arg0)
}

// CreateLFTagRequest mocks base method.
func (m *MockLakeFormationAPI) CreateLFTagRequest(arg0 *lakeformation.CreateLFTagInput) (*request.Request, *lakeformation.CreateLFTagOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLFTagRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.CreateLFTagOutput)
	return ret0, ret1
}

// CreateLFTagRequest indicates an expected call of CreateLFTagRequest.
func (mr *MockLakeFormationAPIMockRecorder) CreateLFTagRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLFTagRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).CreateLFTagRequest), arg0)
}

// CreateLFTagWithContext mocks base method.
func (m *MockLakeFormationAPI) CreateLFTagWithContext(arg0 context.Context, arg1 *lakeformation.CreateLFTagInput, arg2 ...request.Option) (*lakeformation.CreateLFTagOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLFTagWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.CreateLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLFTagWithContext indicates an expected call of CreateLFTagWithContext.
func (mr *MockLakeFormationAPIMockRecorder) CreateLFTagWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLFTagWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).CreateLFTagWithContext), varargs...)
}

// DeleteDataCellsFilter mocks base method.
func (m *MockLakeFormationAPI) DeleteDataCellsFilter(arg0 *lakeformation.DeleteDataCellsFilterInput) (*lakeformation.DeleteDataCellsFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataCellsFilter", arg0)
	ret0, _ := ret[0].(*lakeformation.DeleteDataCellsFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataCellsFilter indicates an expected call of DeleteDataCellsFilter.
func (mr *MockLakeFormationAPIMockRecorder) DeleteDataCellsFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataCellsFilter", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteDataCellsFilter), arg0)
}

// DeleteDataCellsFilterRequest mocks base method.
func (m *MockLakeFormationAPI) DeleteDataCellsFilterRequest(arg0 *lakeformation.DeleteDataCellsFilterInput) (*request.Request, *lakeformation.DeleteDataCellsFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataCellsFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.DeleteDataCellsFilterOutput)
	return ret0, ret1
}

// DeleteDataCellsFilterRequest indicates an expected call of DeleteDataCellsFilterRequest.
func (mr *MockLakeFormationAPIMockRecorder) DeleteDataCellsFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataCellsFilterRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteDataCellsFilterRequest), arg0)
}

// DeleteDataCellsFilterWithContext mocks base method.
func (m *MockLakeFormationAPI) DeleteDataCellsFilterWithContext(arg0 context.Context, arg1 *lakeformation.DeleteDataCellsFilterInput, arg2 ...request.Option) (*lakeformation.DeleteDataCellsFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataCellsFilterWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.DeleteDataCellsFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataCellsFilterWithContext indicates an expected call of DeleteDataCellsFilterWithContext.
func (mr *MockLakeFormationAPIMockRecorder) DeleteDataCellsFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataCellsFilterWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteDataCellsFilterWithContext), varargs...)
}

// DeleteLFTag mocks base method.
func (m *MockLakeFormationAPI) DeleteLFTag(arg0 *lakeformation.DeleteLFTagInput) (*lakeformation.DeleteLFTagOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLFTag", arg0)
	ret0, _ := ret[0].(*lakeformation.DeleteLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLFTag indicates an expected call of DeleteLFTag.
func (mr *MockLakeFormationAPIMockRecorder) DeleteLFTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLFTag", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteLFTag), arg0)
}

// DeleteLFTagRequest mocks base method.
func (m *MockLakeFormationAPI) DeleteLFTagRequest(arg0 *lakeformation.DeleteLFTagInput) (*request.Request, *lakeformation.DeleteLFTagOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLFTagRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.DeleteLFTagOutput)
	return ret0, ret1
}

// DeleteLFTagRequest indicates an expected call of DeleteLFTagRequest.
func (mr *MockLakeFormationAPIMockRecorder) DeleteLFTagRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLFTagRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteLFTagRequest), arg0)
}

// DeleteLFTagWithContext mocks base method.
func (m *MockLakeFormationAPI) DeleteLFTagWithContext(arg0 context.Context, arg1 *lakeformation.DeleteLFTagInput, arg2 ...request.Option) (*lakeformation.DeleteLFTagOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLFTagWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.DeleteLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLFTagWithContext indicates an expected call of DeleteLFTagWithContext.
func (mr *MockLakeFormationAPIMockRecorder) DeleteLFTagWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLFTagWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteLFTagWithContext), varargs...)
}

// DeleteObjectsOnCancel mocks base method.
func (m *MockLakeFormationAPI) DeleteObjectsOnCancel(arg0 *lakeformation.DeleteObjectsOnCancelInput) (*lakeformation.DeleteObjectsOnCancelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectsOnCancel", arg0)
	ret0, _ := ret[0].(*lakeformation.DeleteObjectsOnCancelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectsOnCancel indicates an expected call of DeleteObjectsOnCancel.
func (mr *MockLakeFormationAPIMockRecorder) DeleteObjectsOnCancel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectsOnCancel", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteObjectsOnCancel), arg0)
}

// DeleteObjectsOnCancelRequest mocks base method.
func (m *MockLakeFormationAPI) DeleteObjectsOnCancelRequest(arg0 *lakeformation.DeleteObjectsOnCancelInput) (*request.Request, *lakeformation.DeleteObjectsOnCancelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectsOnCancelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.DeleteObjectsOnCancelOutput)
	return ret0, ret1
}

// DeleteObjectsOnCancelRequest indicates an expected call of DeleteObjectsOnCancelRequest.
func (mr *MockLakeFormationAPIMockRecorder) DeleteObjectsOnCancelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectsOnCancelRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteObjectsOnCancelRequest), arg0)
}

// DeleteObjectsOnCancelWithContext mocks base method.
func (m *MockLakeFormationAPI) DeleteObjectsOnCancelWithContext(arg0 context.Context, arg1 *lakeformation.DeleteObjectsOnCancelInput, arg2 ...request.Option) (*lakeformation.DeleteObjectsOnCancelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjectsOnCancelWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.DeleteObjectsOnCancelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectsOnCancelWithContext indicates an expected call of DeleteObjectsOnCancelWithContext.
func (mr *MockLakeFormationAPIMockRecorder) DeleteObjectsOnCancelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectsOnCancelWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeleteObjectsOnCancelWithContext), varargs...)
}

// DeregisterResource mocks base method.
func (m *MockLakeFormationAPI) DeregisterResource(arg0 *lakeformation.DeregisterResourceInput) (*lakeformation.DeregisterResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterResource", arg0)
	ret0, _ := ret[0].(*lakeformation.DeregisterResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterResource indicates an expected call of DeregisterResource.
func (mr *MockLakeFormationAPIMockRecorder) DeregisterResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterResource", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeregisterResource), arg0)
}

// DeregisterResourceRequest mocks base method.
func (m *MockLakeFormationAPI) DeregisterResourceRequest(arg0 *lakeformation.DeregisterResourceInput) (*request.Request, *lakeformation.DeregisterResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.DeregisterResourceOutput)
	return ret0, ret1
}

// DeregisterResourceRequest indicates an expected call of DeregisterResourceRequest.
func (mr *MockLakeFormationAPIMockRecorder) DeregisterResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterResourceRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeregisterResourceRequest), arg0)
}

// DeregisterResourceWithContext mocks base method.
func (m *MockLakeFormationAPI) DeregisterResourceWithContext(arg0 context.Context, arg1 *lakeformation.DeregisterResourceInput, arg2 ...request.Option) (*lakeformation.DeregisterResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.DeregisterResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterResourceWithContext indicates an expected call of DeregisterResourceWithContext.
func (mr *MockLakeFormationAPIMockRecorder) DeregisterResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterResourceWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).DeregisterResourceWithContext), varargs...)
}

// DescribeResource mocks base method.
func (m *MockLakeFormationAPI) DescribeResource(arg0 *lakeformation.DescribeResourceInput) (*lakeformation.DescribeResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResource", arg0)
	ret0, _ := ret[0].(*lakeformation.DescribeResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResource indicates an expected call of DescribeResource.
func (mr *MockLakeFormationAPIMockRecorder) DescribeResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResource", reflect.TypeOf((*MockLakeFormationAPI)(nil).DescribeResource), arg0)
}

// DescribeResourceRequest mocks base method.
func (m *MockLakeFormationAPI) DescribeResourceRequest(arg0 *lakeformation.DescribeResourceInput) (*request.Request, *lakeformation.DescribeResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.DescribeResourceOutput)
	return ret0, ret1
}

// DescribeResourceRequest indicates an expected call of DescribeResourceRequest.
func (mr *MockLakeFormationAPIMockRecorder) DescribeResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).DescribeResourceRequest), arg0)
}

// DescribeResourceWithContext mocks base method.
func (m *MockLakeFormationAPI) DescribeResourceWithContext(arg0 context.Context, arg1 *lakeformation.DescribeResourceInput, arg2 ...request.Option) (*lakeformation.DescribeResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.DescribeResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeResourceWithContext indicates an expected call of DescribeResourceWithContext.
func (mr *MockLakeFormationAPIMockRecorder) DescribeResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeResourceWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).DescribeResourceWithContext), varargs...)
}

// DescribeTransaction mocks base method.
func (m *MockLakeFormationAPI) DescribeTransaction(arg0 *lakeformation.DescribeTransactionInput) (*lakeformation.DescribeTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTransaction", arg0)
	ret0, _ := ret[0].(*lakeformation.DescribeTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransaction indicates an expected call of DescribeTransaction.
func (mr *MockLakeFormationAPIMockRecorder) DescribeTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransaction", reflect.TypeOf((*MockLakeFormationAPI)(nil).DescribeTransaction), arg0)
}

// DescribeTransactionRequest mocks base method.
func (m *MockLakeFormationAPI) DescribeTransactionRequest(arg0 *lakeformation.DescribeTransactionInput) (*request.Request, *lakeformation.DescribeTransactionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTransactionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.DescribeTransactionOutput)
	return ret0, ret1
}

// DescribeTransactionRequest indicates an expected call of DescribeTransactionRequest.
func (mr *MockLakeFormationAPIMockRecorder) DescribeTransactionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransactionRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).DescribeTransactionRequest), arg0)
}

// DescribeTransactionWithContext mocks base method.
func (m *MockLakeFormationAPI) DescribeTransactionWithContext(arg0 context.Context, arg1 *lakeformation.DescribeTransactionInput, arg2 ...request.Option) (*lakeformation.DescribeTransactionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTransactionWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.DescribeTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTransactionWithContext indicates an expected call of DescribeTransactionWithContext.
func (mr *MockLakeFormationAPIMockRecorder) DescribeTransactionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTransactionWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).DescribeTransactionWithContext), varargs...)
}

// ExtendTransaction mocks base method.
func (m *MockLakeFormationAPI) ExtendTransaction(arg0 *lakeformation.ExtendTransactionInput) (*lakeformation.ExtendTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendTransaction", arg0)
	ret0, _ := ret[0].(*lakeformation.ExtendTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendTransaction indicates an expected call of ExtendTransaction.
func (mr *MockLakeFormationAPIMockRecorder) ExtendTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendTransaction", reflect.TypeOf((*MockLakeFormationAPI)(nil).ExtendTransaction), arg0)
}

// ExtendTransactionRequest mocks base method.
func (m *MockLakeFormationAPI) ExtendTransactionRequest(arg0 *lakeformation.ExtendTransactionInput) (*request.Request, *lakeformation.ExtendTransactionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendTransactionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.ExtendTransactionOutput)
	return ret0, ret1
}

// ExtendTransactionRequest indicates an expected call of ExtendTransactionRequest.
func (mr *MockLakeFormationAPIMockRecorder) ExtendTransactionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendTransactionRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).ExtendTransactionRequest), arg0)
}

// ExtendTransactionWithContext mocks base method.
func (m *MockLakeFormationAPI) ExtendTransactionWithContext(arg0 context.Context, arg1 *lakeformation.ExtendTransactionInput, arg2 ...request.Option) (*lakeformation.ExtendTransactionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExtendTransactionWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.ExtendTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendTransactionWithContext indicates an expected call of ExtendTransactionWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ExtendTransactionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendTransactionWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ExtendTransactionWithContext), varargs...)
}

// GetDataLakeSettings mocks base method.
func (m *MockLakeFormationAPI) GetDataLakeSettings(arg0 *lakeformation.GetDataLakeSettingsInput) (*lakeformation.GetDataLakeSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeSettings", arg0)
	ret0, _ := ret[0].(*lakeformation.GetDataLakeSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeSettings indicates an expected call of GetDataLakeSettings.
func (mr *MockLakeFormationAPIMockRecorder) GetDataLakeSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSettings", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetDataLakeSettings), arg0)
}

// GetDataLakeSettingsRequest mocks base method.
func (m *MockLakeFormationAPI) GetDataLakeSettingsRequest(arg0 *lakeformation.GetDataLakeSettingsInput) (*request.Request, *lakeformation.GetDataLakeSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataLakeSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetDataLakeSettingsOutput)
	return ret0, ret1
}

// GetDataLakeSettingsRequest indicates an expected call of GetDataLakeSettingsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetDataLakeSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSettingsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetDataLakeSettingsRequest), arg0)
}

// GetDataLakeSettingsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetDataLakeSettingsWithContext(arg0 context.Context, arg1 *lakeformation.GetDataLakeSettingsInput, arg2 ...request.Option) (*lakeformation.GetDataLakeSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataLakeSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetDataLakeSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataLakeSettingsWithContext indicates an expected call of GetDataLakeSettingsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetDataLakeSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataLakeSettingsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetDataLakeSettingsWithContext), varargs...)
}

// GetEffectivePermissionsForPath mocks base method.
func (m *MockLakeFormationAPI) GetEffectivePermissionsForPath(arg0 *lakeformation.GetEffectivePermissionsForPathInput) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectivePermissionsForPath", arg0)
	ret0, _ := ret[0].(*lakeformation.GetEffectivePermissionsForPathOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectivePermissionsForPath indicates an expected call of GetEffectivePermissionsForPath.
func (mr *MockLakeFormationAPIMockRecorder) GetEffectivePermissionsForPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePermissionsForPath", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetEffectivePermissionsForPath), arg0)
}

// GetEffectivePermissionsForPathPages mocks base method.
func (m *MockLakeFormationAPI) GetEffectivePermissionsForPathPages(arg0 *lakeformation.GetEffectivePermissionsForPathInput, arg1 func(*lakeformation.GetEffectivePermissionsForPathOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectivePermissionsForPathPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEffectivePermissionsForPathPages indicates an expected call of GetEffectivePermissionsForPathPages.
func (mr *MockLakeFormationAPIMockRecorder) GetEffectivePermissionsForPathPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePermissionsForPathPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetEffectivePermissionsForPathPages), arg0, arg1)
}

// GetEffectivePermissionsForPathPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) GetEffectivePermissionsForPathPagesWithContext(arg0 context.Context, arg1 *lakeformation.GetEffectivePermissionsForPathInput, arg2 func(*lakeformation.GetEffectivePermissionsForPathOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEffectivePermissionsForPathPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEffectivePermissionsForPathPagesWithContext indicates an expected call of GetEffectivePermissionsForPathPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetEffectivePermissionsForPathPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePermissionsForPathPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetEffectivePermissionsForPathPagesWithContext), varargs...)
}

// GetEffectivePermissionsForPathRequest mocks base method.
func (m *MockLakeFormationAPI) GetEffectivePermissionsForPathRequest(arg0 *lakeformation.GetEffectivePermissionsForPathInput) (*request.Request, *lakeformation.GetEffectivePermissionsForPathOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectivePermissionsForPathRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetEffectivePermissionsForPathOutput)
	return ret0, ret1
}

// GetEffectivePermissionsForPathRequest indicates an expected call of GetEffectivePermissionsForPathRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetEffectivePermissionsForPathRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePermissionsForPathRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetEffectivePermissionsForPathRequest), arg0)
}

// GetEffectivePermissionsForPathWithContext mocks base method.
func (m *MockLakeFormationAPI) GetEffectivePermissionsForPathWithContext(arg0 context.Context, arg1 *lakeformation.GetEffectivePermissionsForPathInput, arg2 ...request.Option) (*lakeformation.GetEffectivePermissionsForPathOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEffectivePermissionsForPathWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetEffectivePermissionsForPathOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectivePermissionsForPathWithContext indicates an expected call of GetEffectivePermissionsForPathWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetEffectivePermissionsForPathWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectivePermissionsForPathWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetEffectivePermissionsForPathWithContext), varargs...)
}

// GetLFTag mocks base method.
func (m *MockLakeFormationAPI) GetLFTag(arg0 *lakeformation.GetLFTagInput) (*lakeformation.GetLFTagOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLFTag", arg0)
	ret0, _ := ret[0].(*lakeformation.GetLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLFTag indicates an expected call of GetLFTag.
func (mr *MockLakeFormationAPIMockRecorder) GetLFTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLFTag", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetLFTag), arg0)
}

// GetLFTagRequest mocks base method.
func (m *MockLakeFormationAPI) GetLFTagRequest(arg0 *lakeformation.GetLFTagInput) (*request.Request, *lakeformation.GetLFTagOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLFTagRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetLFTagOutput)
	return ret0, ret1
}

// GetLFTagRequest indicates an expected call of GetLFTagRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetLFTagRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLFTagRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetLFTagRequest), arg0)
}

// GetLFTagWithContext mocks base method.
func (m *MockLakeFormationAPI) GetLFTagWithContext(arg0 context.Context, arg1 *lakeformation.GetLFTagInput, arg2 ...request.Option) (*lakeformation.GetLFTagOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLFTagWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLFTagWithContext indicates an expected call of GetLFTagWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetLFTagWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLFTagWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetLFTagWithContext), varargs...)
}

// GetQueryState mocks base method.
func (m *MockLakeFormationAPI) GetQueryState(arg0 *lakeformation.GetQueryStateInput) (*lakeformation.GetQueryStateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryState", arg0)
	ret0, _ := ret[0].(*lakeformation.GetQueryStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryState indicates an expected call of GetQueryState.
func (mr *MockLakeFormationAPIMockRecorder) GetQueryState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryState", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetQueryState), arg0)
}

// GetQueryStateRequest mocks base method.
func (m *MockLakeFormationAPI) GetQueryStateRequest(arg0 *lakeformation.GetQueryStateInput) (*request.Request, *lakeformation.GetQueryStateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetQueryStateOutput)
	return ret0, ret1
}

// GetQueryStateRequest indicates an expected call of GetQueryStateRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetQueryStateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryStateRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetQueryStateRequest), arg0)
}

// GetQueryStateWithContext mocks base method.
func (m *MockLakeFormationAPI) GetQueryStateWithContext(arg0 context.Context, arg1 *lakeformation.GetQueryStateInput, arg2 ...request.Option) (*lakeformation.GetQueryStateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryStateWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetQueryStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryStateWithContext indicates an expected call of GetQueryStateWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetQueryStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryStateWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetQueryStateWithContext), varargs...)
}

// GetQueryStatistics mocks base method.
func (m *MockLakeFormationAPI) GetQueryStatistics(arg0 *lakeformation.GetQueryStatisticsInput) (*lakeformation.GetQueryStatisticsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryStatistics", arg0)
	ret0, _ := ret[0].(*lakeformation.GetQueryStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryStatistics indicates an expected call of GetQueryStatistics.
func (mr *MockLakeFormationAPIMockRecorder) GetQueryStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryStatistics", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetQueryStatistics), arg0)
}

// GetQueryStatisticsRequest mocks base method.
func (m *MockLakeFormationAPI) GetQueryStatisticsRequest(arg0 *lakeformation.GetQueryStatisticsInput) (*request.Request, *lakeformation.GetQueryStatisticsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetQueryStatisticsOutput)
	return ret0, ret1
}

// GetQueryStatisticsRequest indicates an expected call of GetQueryStatisticsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetQueryStatisticsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryStatisticsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetQueryStatisticsRequest), arg0)
}

// GetQueryStatisticsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetQueryStatisticsWithContext(arg0 context.Context, arg1 *lakeformation.GetQueryStatisticsInput, arg2 ...request.Option) (*lakeformation.GetQueryStatisticsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetQueryStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryStatisticsWithContext indicates an expected call of GetQueryStatisticsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetQueryStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryStatisticsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetQueryStatisticsWithContext), varargs...)
}

// GetResourceLFTags mocks base method.
func (m *MockLakeFormationAPI) GetResourceLFTags(arg0 *lakeformation.GetResourceLFTagsInput) (*lakeformation.GetResourceLFTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceLFTags", arg0)
	ret0, _ := ret[0].(*lakeformation.GetResourceLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceLFTags indicates an expected call of GetResourceLFTags.
func (mr *MockLakeFormationAPIMockRecorder) GetResourceLFTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceLFTags", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetResourceLFTags), arg0)
}

// GetResourceLFTagsRequest mocks base method.
func (m *MockLakeFormationAPI) GetResourceLFTagsRequest(arg0 *lakeformation.GetResourceLFTagsInput) (*request.Request, *lakeformation.GetResourceLFTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceLFTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetResourceLFTagsOutput)
	return ret0, ret1
}

// GetResourceLFTagsRequest indicates an expected call of GetResourceLFTagsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetResourceLFTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceLFTagsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetResourceLFTagsRequest), arg0)
}

// GetResourceLFTagsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetResourceLFTagsWithContext(arg0 context.Context, arg1 *lakeformation.GetResourceLFTagsInput, arg2 ...request.Option) (*lakeformation.GetResourceLFTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceLFTagsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetResourceLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceLFTagsWithContext indicates an expected call of GetResourceLFTagsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetResourceLFTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceLFTagsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetResourceLFTagsWithContext), varargs...)
}

// GetTableObjects mocks base method.
func (m *MockLakeFormationAPI) GetTableObjects(arg0 *lakeformation.GetTableObjectsInput) (*lakeformation.GetTableObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableObjects", arg0)
	ret0, _ := ret[0].(*lakeformation.GetTableObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableObjects indicates an expected call of GetTableObjects.
func (mr *MockLakeFormationAPIMockRecorder) GetTableObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableObjects", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTableObjects), arg0)
}

// GetTableObjectsPages mocks base method.
func (m *MockLakeFormationAPI) GetTableObjectsPages(arg0 *lakeformation.GetTableObjectsInput, arg1 func(*lakeformation.GetTableObjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableObjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTableObjectsPages indicates an expected call of GetTableObjectsPages.
func (mr *MockLakeFormationAPIMockRecorder) GetTableObjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableObjectsPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTableObjectsPages), arg0, arg1)
}

// GetTableObjectsPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) GetTableObjectsPagesWithContext(arg0 context.Context, arg1 *lakeformation.GetTableObjectsInput, arg2 func(*lakeformation.GetTableObjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableObjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTableObjectsPagesWithContext indicates an expected call of GetTableObjectsPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetTableObjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableObjectsPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTableObjectsPagesWithContext), varargs...)
}

// GetTableObjectsRequest mocks base method.
func (m *MockLakeFormationAPI) GetTableObjectsRequest(arg0 *lakeformation.GetTableObjectsInput) (*request.Request, *lakeformation.GetTableObjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableObjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetTableObjectsOutput)
	return ret0, ret1
}

// GetTableObjectsRequest indicates an expected call of GetTableObjectsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetTableObjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableObjectsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTableObjectsRequest), arg0)
}

// GetTableObjectsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetTableObjectsWithContext(arg0 context.Context, arg1 *lakeformation.GetTableObjectsInput, arg2 ...request.Option) (*lakeformation.GetTableObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableObjectsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetTableObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableObjectsWithContext indicates an expected call of GetTableObjectsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetTableObjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableObjectsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTableObjectsWithContext), varargs...)
}

// GetTemporaryGluePartitionCredentials mocks base method.
func (m *MockLakeFormationAPI) GetTemporaryGluePartitionCredentials(arg0 *lakeformation.GetTemporaryGluePartitionCredentialsInput) (*lakeformation.GetTemporaryGluePartitionCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryGluePartitionCredentials", arg0)
	ret0, _ := ret[0].(*lakeformation.GetTemporaryGluePartitionCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryGluePartitionCredentials indicates an expected call of GetTemporaryGluePartitionCredentials.
func (mr *MockLakeFormationAPIMockRecorder) GetTemporaryGluePartitionCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryGluePartitionCredentials", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTemporaryGluePartitionCredentials), arg0)
}

// GetTemporaryGluePartitionCredentialsRequest mocks base method.
func (m *MockLakeFormationAPI) GetTemporaryGluePartitionCredentialsRequest(arg0 *lakeformation.GetTemporaryGluePartitionCredentialsInput) (*request.Request, *lakeformation.GetTemporaryGluePartitionCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryGluePartitionCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetTemporaryGluePartitionCredentialsOutput)
	return ret0, ret1
}

// GetTemporaryGluePartitionCredentialsRequest indicates an expected call of GetTemporaryGluePartitionCredentialsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetTemporaryGluePartitionCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryGluePartitionCredentialsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTemporaryGluePartitionCredentialsRequest), arg0)
}

// GetTemporaryGluePartitionCredentialsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetTemporaryGluePartitionCredentialsWithContext(arg0 context.Context, arg1 *lakeformation.GetTemporaryGluePartitionCredentialsInput, arg2 ...request.Option) (*lakeformation.GetTemporaryGluePartitionCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemporaryGluePartitionCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetTemporaryGluePartitionCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryGluePartitionCredentialsWithContext indicates an expected call of GetTemporaryGluePartitionCredentialsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetTemporaryGluePartitionCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryGluePartitionCredentialsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTemporaryGluePartitionCredentialsWithContext), varargs...)
}

// GetTemporaryGlueTableCredentials mocks base method.
func (m *MockLakeFormationAPI) GetTemporaryGlueTableCredentials(arg0 *lakeformation.GetTemporaryGlueTableCredentialsInput) (*lakeformation.GetTemporaryGlueTableCredentialsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryGlueTableCredentials", arg0)
	ret0, _ := ret[0].(*lakeformation.GetTemporaryGlueTableCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryGlueTableCredentials indicates an expected call of GetTemporaryGlueTableCredentials.
func (mr *MockLakeFormationAPIMockRecorder) GetTemporaryGlueTableCredentials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryGlueTableCredentials", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTemporaryGlueTableCredentials), arg0)
}

// GetTemporaryGlueTableCredentialsRequest mocks base method.
func (m *MockLakeFormationAPI) GetTemporaryGlueTableCredentialsRequest(arg0 *lakeformation.GetTemporaryGlueTableCredentialsInput) (*request.Request, *lakeformation.GetTemporaryGlueTableCredentialsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryGlueTableCredentialsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetTemporaryGlueTableCredentialsOutput)
	return ret0, ret1
}

// GetTemporaryGlueTableCredentialsRequest indicates an expected call of GetTemporaryGlueTableCredentialsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetTemporaryGlueTableCredentialsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryGlueTableCredentialsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTemporaryGlueTableCredentialsRequest), arg0)
}

// GetTemporaryGlueTableCredentialsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetTemporaryGlueTableCredentialsWithContext(arg0 context.Context, arg1 *lakeformation.GetTemporaryGlueTableCredentialsInput, arg2 ...request.Option) (*lakeformation.GetTemporaryGlueTableCredentialsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemporaryGlueTableCredentialsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetTemporaryGlueTableCredentialsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryGlueTableCredentialsWithContext indicates an expected call of GetTemporaryGlueTableCredentialsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetTemporaryGlueTableCredentialsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryGlueTableCredentialsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetTemporaryGlueTableCredentialsWithContext), varargs...)
}

// GetWorkUnitResults mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnitResults(arg0 *lakeformation.GetWorkUnitResultsInput) (*lakeformation.GetWorkUnitResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkUnitResults", arg0)
	ret0, _ := ret[0].(*lakeformation.GetWorkUnitResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkUnitResults indicates an expected call of GetWorkUnitResults.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnitResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnitResults", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnitResults), arg0)
}

// GetWorkUnitResultsRequest mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnitResultsRequest(arg0 *lakeformation.GetWorkUnitResultsInput) (*request.Request, *lakeformation.GetWorkUnitResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkUnitResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetWorkUnitResultsOutput)
	return ret0, ret1
}

// GetWorkUnitResultsRequest indicates an expected call of GetWorkUnitResultsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnitResultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnitResultsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnitResultsRequest), arg0)
}

// GetWorkUnitResultsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnitResultsWithContext(arg0 context.Context, arg1 *lakeformation.GetWorkUnitResultsInput, arg2 ...request.Option) (*lakeformation.GetWorkUnitResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkUnitResultsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetWorkUnitResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkUnitResultsWithContext indicates an expected call of GetWorkUnitResultsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnitResultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnitResultsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnitResultsWithContext), varargs...)
}

// GetWorkUnits mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnits(arg0 *lakeformation.GetWorkUnitsInput) (*lakeformation.GetWorkUnitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkUnits", arg0)
	ret0, _ := ret[0].(*lakeformation.GetWorkUnitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkUnits indicates an expected call of GetWorkUnits.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnits", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnits), arg0)
}

// GetWorkUnitsPages mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnitsPages(arg0 *lakeformation.GetWorkUnitsInput, arg1 func(*lakeformation.GetWorkUnitsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkUnitsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWorkUnitsPages indicates an expected call of GetWorkUnitsPages.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnitsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnitsPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnitsPages), arg0, arg1)
}

// GetWorkUnitsPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnitsPagesWithContext(arg0 context.Context, arg1 *lakeformation.GetWorkUnitsInput, arg2 func(*lakeformation.GetWorkUnitsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkUnitsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWorkUnitsPagesWithContext indicates an expected call of GetWorkUnitsPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnitsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnitsPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnitsPagesWithContext), varargs...)
}

// GetWorkUnitsRequest mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnitsRequest(arg0 *lakeformation.GetWorkUnitsInput) (*request.Request, *lakeformation.GetWorkUnitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkUnitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GetWorkUnitsOutput)
	return ret0, ret1
}

// GetWorkUnitsRequest indicates an expected call of GetWorkUnitsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnitsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnitsRequest), arg0)
}

// GetWorkUnitsWithContext mocks base method.
func (m *MockLakeFormationAPI) GetWorkUnitsWithContext(arg0 context.Context, arg1 *lakeformation.GetWorkUnitsInput, arg2 ...request.Option) (*lakeformation.GetWorkUnitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkUnitsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GetWorkUnitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkUnitsWithContext indicates an expected call of GetWorkUnitsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GetWorkUnitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnitsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GetWorkUnitsWithContext), varargs...)
}

// GrantPermissions mocks base method.
func (m *MockLakeFormationAPI) GrantPermissions(arg0 *lakeformation.GrantPermissionsInput) (*lakeformation.GrantPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantPermissions", arg0)
	ret0, _ := ret[0].(*lakeformation.GrantPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantPermissions indicates an expected call of GrantPermissions.
func (mr *MockLakeFormationAPIMockRecorder) GrantPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantPermissions", reflect.TypeOf((*MockLakeFormationAPI)(nil).GrantPermissions), arg0)
}

// GrantPermissionsRequest mocks base method.
func (m *MockLakeFormationAPI) GrantPermissionsRequest(arg0 *lakeformation.GrantPermissionsInput) (*request.Request, *lakeformation.GrantPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.GrantPermissionsOutput)
	return ret0, ret1
}

// GrantPermissionsRequest indicates an expected call of GrantPermissionsRequest.
func (mr *MockLakeFormationAPIMockRecorder) GrantPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantPermissionsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).GrantPermissionsRequest), arg0)
}

// GrantPermissionsWithContext mocks base method.
func (m *MockLakeFormationAPI) GrantPermissionsWithContext(arg0 context.Context, arg1 *lakeformation.GrantPermissionsInput, arg2 ...request.Option) (*lakeformation.GrantPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.GrantPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantPermissionsWithContext indicates an expected call of GrantPermissionsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) GrantPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantPermissionsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).GrantPermissionsWithContext), varargs...)
}

// ListDataCellsFilter mocks base method.
func (m *MockLakeFormationAPI) ListDataCellsFilter(arg0 *lakeformation.ListDataCellsFilterInput) (*lakeformation.ListDataCellsFilterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataCellsFilter", arg0)
	ret0, _ := ret[0].(*lakeformation.ListDataCellsFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataCellsFilter indicates an expected call of ListDataCellsFilter.
func (mr *MockLakeFormationAPIMockRecorder) ListDataCellsFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataCellsFilter", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListDataCellsFilter), arg0)
}

// ListDataCellsFilterPages mocks base method.
func (m *MockLakeFormationAPI) ListDataCellsFilterPages(arg0 *lakeformation.ListDataCellsFilterInput, arg1 func(*lakeformation.ListDataCellsFilterOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataCellsFilterPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataCellsFilterPages indicates an expected call of ListDataCellsFilterPages.
func (mr *MockLakeFormationAPIMockRecorder) ListDataCellsFilterPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataCellsFilterPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListDataCellsFilterPages), arg0, arg1)
}

// ListDataCellsFilterPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) ListDataCellsFilterPagesWithContext(arg0 context.Context, arg1 *lakeformation.ListDataCellsFilterInput, arg2 func(*lakeformation.ListDataCellsFilterOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataCellsFilterPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataCellsFilterPagesWithContext indicates an expected call of ListDataCellsFilterPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListDataCellsFilterPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataCellsFilterPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListDataCellsFilterPagesWithContext), varargs...)
}

// ListDataCellsFilterRequest mocks base method.
func (m *MockLakeFormationAPI) ListDataCellsFilterRequest(arg0 *lakeformation.ListDataCellsFilterInput) (*request.Request, *lakeformation.ListDataCellsFilterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataCellsFilterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.ListDataCellsFilterOutput)
	return ret0, ret1
}

// ListDataCellsFilterRequest indicates an expected call of ListDataCellsFilterRequest.
func (mr *MockLakeFormationAPIMockRecorder) ListDataCellsFilterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataCellsFilterRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListDataCellsFilterRequest), arg0)
}

// ListDataCellsFilterWithContext mocks base method.
func (m *MockLakeFormationAPI) ListDataCellsFilterWithContext(arg0 context.Context, arg1 *lakeformation.ListDataCellsFilterInput, arg2 ...request.Option) (*lakeformation.ListDataCellsFilterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataCellsFilterWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.ListDataCellsFilterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataCellsFilterWithContext indicates an expected call of ListDataCellsFilterWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListDataCellsFilterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataCellsFilterWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListDataCellsFilterWithContext), varargs...)
}

// ListLFTags mocks base method.
func (m *MockLakeFormationAPI) ListLFTags(arg0 *lakeformation.ListLFTagsInput) (*lakeformation.ListLFTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLFTags", arg0)
	ret0, _ := ret[0].(*lakeformation.ListLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLFTags indicates an expected call of ListLFTags.
func (mr *MockLakeFormationAPIMockRecorder) ListLFTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLFTags", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListLFTags), arg0)
}

// ListLFTagsPages mocks base method.
func (m *MockLakeFormationAPI) ListLFTagsPages(arg0 *lakeformation.ListLFTagsInput, arg1 func(*lakeformation.ListLFTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLFTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLFTagsPages indicates an expected call of ListLFTagsPages.
func (mr *MockLakeFormationAPIMockRecorder) ListLFTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLFTagsPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListLFTagsPages), arg0, arg1)
}

// ListLFTagsPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) ListLFTagsPagesWithContext(arg0 context.Context, arg1 *lakeformation.ListLFTagsInput, arg2 func(*lakeformation.ListLFTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLFTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListLFTagsPagesWithContext indicates an expected call of ListLFTagsPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListLFTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLFTagsPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListLFTagsPagesWithContext), varargs...)
}

// ListLFTagsRequest mocks base method.
func (m *MockLakeFormationAPI) ListLFTagsRequest(arg0 *lakeformation.ListLFTagsInput) (*request.Request, *lakeformation.ListLFTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLFTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.ListLFTagsOutput)
	return ret0, ret1
}

// ListLFTagsRequest indicates an expected call of ListLFTagsRequest.
func (mr *MockLakeFormationAPIMockRecorder) ListLFTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLFTagsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListLFTagsRequest), arg0)
}

// ListLFTagsWithContext mocks base method.
func (m *MockLakeFormationAPI) ListLFTagsWithContext(arg0 context.Context, arg1 *lakeformation.ListLFTagsInput, arg2 ...request.Option) (*lakeformation.ListLFTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLFTagsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.ListLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLFTagsWithContext indicates an expected call of ListLFTagsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListLFTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLFTagsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListLFTagsWithContext), varargs...)
}

// ListPermissions mocks base method.
func (m *MockLakeFormationAPI) ListPermissions(arg0 *lakeformation.ListPermissionsInput) (*lakeformation.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0)
	ret0, _ := ret[0].(*lakeformation.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockLakeFormationAPIMockRecorder) ListPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListPermissions), arg0)
}

// ListPermissionsPages mocks base method.
func (m *MockLakeFormationAPI) ListPermissionsPages(arg0 *lakeformation.ListPermissionsInput, arg1 func(*lakeformation.ListPermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPages indicates an expected call of ListPermissionsPages.
func (mr *MockLakeFormationAPIMockRecorder) ListPermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListPermissionsPages), arg0, arg1)
}

// ListPermissionsPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) ListPermissionsPagesWithContext(arg0 context.Context, arg1 *lakeformation.ListPermissionsInput, arg2 func(*lakeformation.ListPermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPagesWithContext indicates an expected call of ListPermissionsPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListPermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListPermissionsPagesWithContext), varargs...)
}

// ListPermissionsRequest mocks base method.
func (m *MockLakeFormationAPI) ListPermissionsRequest(arg0 *lakeformation.ListPermissionsInput) (*request.Request, *lakeformation.ListPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.ListPermissionsOutput)
	return ret0, ret1
}

// ListPermissionsRequest indicates an expected call of ListPermissionsRequest.
func (mr *MockLakeFormationAPIMockRecorder) ListPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListPermissionsRequest), arg0)
}

// ListPermissionsWithContext mocks base method.
func (m *MockLakeFormationAPI) ListPermissionsWithContext(arg0 context.Context, arg1 *lakeformation.ListPermissionsInput, arg2 ...request.Option) (*lakeformation.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsWithContext indicates an expected call of ListPermissionsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListPermissionsWithContext), varargs...)
}

// ListResources mocks base method.
func (m *MockLakeFormationAPI) ListResources(arg0 *lakeformation.ListResourcesInput) (*lakeformation.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0)
	ret0, _ := ret[0].(*lakeformation.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockLakeFormationAPIMockRecorder) ListResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListResources), arg0)
}

// ListResourcesPages mocks base method.
func (m *MockLakeFormationAPI) ListResourcesPages(arg0 *lakeformation.ListResourcesInput, arg1 func(*lakeformation.ListResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesPages indicates an expected call of ListResourcesPages.
func (mr *MockLakeFormationAPIMockRecorder) ListResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListResourcesPages), arg0, arg1)
}

// ListResourcesPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) ListResourcesPagesWithContext(arg0 context.Context, arg1 *lakeformation.ListResourcesInput, arg2 func(*lakeformation.ListResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResourcesPagesWithContext indicates an expected call of ListResourcesPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListResourcesPagesWithContext), varargs...)
}

// ListResourcesRequest mocks base method.
func (m *MockLakeFormationAPI) ListResourcesRequest(arg0 *lakeformation.ListResourcesInput) (*request.Request, *lakeformation.ListResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.ListResourcesOutput)
	return ret0, ret1
}

// ListResourcesRequest indicates an expected call of ListResourcesRequest.
func (mr *MockLakeFormationAPIMockRecorder) ListResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListResourcesRequest), arg0)
}

// ListResourcesWithContext mocks base method.
func (m *MockLakeFormationAPI) ListResourcesWithContext(arg0 context.Context, arg1 *lakeformation.ListResourcesInput, arg2 ...request.Option) (*lakeformation.ListResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.ListResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesWithContext indicates an expected call of ListResourcesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListResourcesWithContext), varargs...)
}

// ListTableStorageOptimizers mocks base method.
func (m *MockLakeFormationAPI) ListTableStorageOptimizers(arg0 *lakeformation.ListTableStorageOptimizersInput) (*lakeformation.ListTableStorageOptimizersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableStorageOptimizers", arg0)
	ret0, _ := ret[0].(*lakeformation.ListTableStorageOptimizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableStorageOptimizers indicates an expected call of ListTableStorageOptimizers.
func (mr *MockLakeFormationAPIMockRecorder) ListTableStorageOptimizers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableStorageOptimizers", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTableStorageOptimizers), arg0)
}

// ListTableStorageOptimizersPages mocks base method.
func (m *MockLakeFormationAPI) ListTableStorageOptimizersPages(arg0 *lakeformation.ListTableStorageOptimizersInput, arg1 func(*lakeformation.ListTableStorageOptimizersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableStorageOptimizersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTableStorageOptimizersPages indicates an expected call of ListTableStorageOptimizersPages.
func (mr *MockLakeFormationAPIMockRecorder) ListTableStorageOptimizersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableStorageOptimizersPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTableStorageOptimizersPages), arg0, arg1)
}

// ListTableStorageOptimizersPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) ListTableStorageOptimizersPagesWithContext(arg0 context.Context, arg1 *lakeformation.ListTableStorageOptimizersInput, arg2 func(*lakeformation.ListTableStorageOptimizersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTableStorageOptimizersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTableStorageOptimizersPagesWithContext indicates an expected call of ListTableStorageOptimizersPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListTableStorageOptimizersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableStorageOptimizersPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTableStorageOptimizersPagesWithContext), varargs...)
}

// ListTableStorageOptimizersRequest mocks base method.
func (m *MockLakeFormationAPI) ListTableStorageOptimizersRequest(arg0 *lakeformation.ListTableStorageOptimizersInput) (*request.Request, *lakeformation.ListTableStorageOptimizersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableStorageOptimizersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.ListTableStorageOptimizersOutput)
	return ret0, ret1
}

// ListTableStorageOptimizersRequest indicates an expected call of ListTableStorageOptimizersRequest.
func (mr *MockLakeFormationAPIMockRecorder) ListTableStorageOptimizersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableStorageOptimizersRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTableStorageOptimizersRequest), arg0)
}

// ListTableStorageOptimizersWithContext mocks base method.
func (m *MockLakeFormationAPI) ListTableStorageOptimizersWithContext(arg0 context.Context, arg1 *lakeformation.ListTableStorageOptimizersInput, arg2 ...request.Option) (*lakeformation.ListTableStorageOptimizersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTableStorageOptimizersWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.ListTableStorageOptimizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableStorageOptimizersWithContext indicates an expected call of ListTableStorageOptimizersWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListTableStorageOptimizersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableStorageOptimizersWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTableStorageOptimizersWithContext), varargs...)
}

// ListTransactions mocks base method.
func (m *MockLakeFormationAPI) ListTransactions(arg0 *lakeformation.ListTransactionsInput) (*lakeformation.ListTransactionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0)
	ret0, _ := ret[0].(*lakeformation.ListTransactionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockLakeFormationAPIMockRecorder) ListTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTransactions), arg0)
}

// ListTransactionsPages mocks base method.
func (m *MockLakeFormationAPI) ListTransactionsPages(arg0 *lakeformation.ListTransactionsInput, arg1 func(*lakeformation.ListTransactionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransactionsPages indicates an expected call of ListTransactionsPages.
func (mr *MockLakeFormationAPIMockRecorder) ListTransactionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTransactionsPages), arg0, arg1)
}

// ListTransactionsPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) ListTransactionsPagesWithContext(arg0 context.Context, arg1 *lakeformation.ListTransactionsInput, arg2 func(*lakeformation.ListTransactionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTransactionsPagesWithContext indicates an expected call of ListTransactionsPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListTransactionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTransactionsPagesWithContext), varargs...)
}

// ListTransactionsRequest mocks base method.
func (m *MockLakeFormationAPI) ListTransactionsRequest(arg0 *lakeformation.ListTransactionsInput) (*request.Request, *lakeformation.ListTransactionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.ListTransactionsOutput)
	return ret0, ret1
}

// ListTransactionsRequest indicates an expected call of ListTransactionsRequest.
func (mr *MockLakeFormationAPIMockRecorder) ListTransactionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTransactionsRequest), arg0)
}

// ListTransactionsWithContext mocks base method.
func (m *MockLakeFormationAPI) ListTransactionsWithContext(arg0 context.Context, arg1 *lakeformation.ListTransactionsInput, arg2 ...request.Option) (*lakeformation.ListTransactionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.ListTransactionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsWithContext indicates an expected call of ListTransactionsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) ListTransactionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).ListTransactionsWithContext), varargs...)
}

// PutDataLakeSettings mocks base method.
func (m *MockLakeFormationAPI) PutDataLakeSettings(arg0 *lakeformation.PutDataLakeSettingsInput) (*lakeformation.PutDataLakeSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDataLakeSettings", arg0)
	ret0, _ := ret[0].(*lakeformation.PutDataLakeSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDataLakeSettings indicates an expected call of PutDataLakeSettings.
func (mr *MockLakeFormationAPIMockRecorder) PutDataLakeSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataLakeSettings", reflect.TypeOf((*MockLakeFormationAPI)(nil).PutDataLakeSettings), arg0)
}

// PutDataLakeSettingsRequest mocks base method.
func (m *MockLakeFormationAPI) PutDataLakeSettingsRequest(arg0 *lakeformation.PutDataLakeSettingsInput) (*request.Request, *lakeformation.PutDataLakeSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDataLakeSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.PutDataLakeSettingsOutput)
	return ret0, ret1
}

// PutDataLakeSettingsRequest indicates an expected call of PutDataLakeSettingsRequest.
func (mr *MockLakeFormationAPIMockRecorder) PutDataLakeSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataLakeSettingsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).PutDataLakeSettingsRequest), arg0)
}

// PutDataLakeSettingsWithContext mocks base method.
func (m *MockLakeFormationAPI) PutDataLakeSettingsWithContext(arg0 context.Context, arg1 *lakeformation.PutDataLakeSettingsInput, arg2 ...request.Option) (*lakeformation.PutDataLakeSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDataLakeSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.PutDataLakeSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDataLakeSettingsWithContext indicates an expected call of PutDataLakeSettingsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) PutDataLakeSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataLakeSettingsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).PutDataLakeSettingsWithContext), varargs...)
}

// RegisterResource mocks base method.
func (m *MockLakeFormationAPI) RegisterResource(arg0 *lakeformation.RegisterResourceInput) (*lakeformation.RegisterResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterResource", arg0)
	ret0, _ := ret[0].(*lakeformation.RegisterResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterResource indicates an expected call of RegisterResource.
func (mr *MockLakeFormationAPIMockRecorder) RegisterResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterResource", reflect.TypeOf((*MockLakeFormationAPI)(nil).RegisterResource), arg0)
}

// RegisterResourceRequest mocks base method.
func (m *MockLakeFormationAPI) RegisterResourceRequest(arg0 *lakeformation.RegisterResourceInput) (*request.Request, *lakeformation.RegisterResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.RegisterResourceOutput)
	return ret0, ret1
}

// RegisterResourceRequest indicates an expected call of RegisterResourceRequest.
func (mr *MockLakeFormationAPIMockRecorder) RegisterResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterResourceRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).RegisterResourceRequest), arg0)
}

// RegisterResourceWithContext mocks base method.
func (m *MockLakeFormationAPI) RegisterResourceWithContext(arg0 context.Context, arg1 *lakeformation.RegisterResourceInput, arg2 ...request.Option) (*lakeformation.RegisterResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.RegisterResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterResourceWithContext indicates an expected call of RegisterResourceWithContext.
func (mr *MockLakeFormationAPIMockRecorder) RegisterResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterResourceWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).RegisterResourceWithContext), varargs...)
}

// RemoveLFTagsFromResource mocks base method.
func (m *MockLakeFormationAPI) RemoveLFTagsFromResource(arg0 *lakeformation.RemoveLFTagsFromResourceInput) (*lakeformation.RemoveLFTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLFTagsFromResource", arg0)
	ret0, _ := ret[0].(*lakeformation.RemoveLFTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLFTagsFromResource indicates an expected call of RemoveLFTagsFromResource.
func (mr *MockLakeFormationAPIMockRecorder) RemoveLFTagsFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLFTagsFromResource", reflect.TypeOf((*MockLakeFormationAPI)(nil).RemoveLFTagsFromResource), arg0)
}

// RemoveLFTagsFromResourceRequest mocks base method.
func (m *MockLakeFormationAPI) RemoveLFTagsFromResourceRequest(arg0 *lakeformation.RemoveLFTagsFromResourceInput) (*request.Request, *lakeformation.RemoveLFTagsFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLFTagsFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.RemoveLFTagsFromResourceOutput)
	return ret0, ret1
}

// RemoveLFTagsFromResourceRequest indicates an expected call of RemoveLFTagsFromResourceRequest.
func (mr *MockLakeFormationAPIMockRecorder) RemoveLFTagsFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLFTagsFromResourceRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).RemoveLFTagsFromResourceRequest), arg0)
}

// RemoveLFTagsFromResourceWithContext mocks base method.
func (m *MockLakeFormationAPI) RemoveLFTagsFromResourceWithContext(arg0 context.Context, arg1 *lakeformation.RemoveLFTagsFromResourceInput, arg2 ...request.Option) (*lakeformation.RemoveLFTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveLFTagsFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.RemoveLFTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLFTagsFromResourceWithContext indicates an expected call of RemoveLFTagsFromResourceWithContext.
func (mr *MockLakeFormationAPIMockRecorder) RemoveLFTagsFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLFTagsFromResourceWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).RemoveLFTagsFromResourceWithContext), varargs...)
}

// RevokePermissions mocks base method.
func (m *MockLakeFormationAPI) RevokePermissions(arg0 *lakeformation.RevokePermissionsInput) (*lakeformation.RevokePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePermissions", arg0)
	ret0, _ := ret[0].(*lakeformation.RevokePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePermissions indicates an expected call of RevokePermissions.
func (mr *MockLakeFormationAPIMockRecorder) RevokePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePermissions", reflect.TypeOf((*MockLakeFormationAPI)(nil).RevokePermissions), arg0)
}

// RevokePermissionsRequest mocks base method.
func (m *MockLakeFormationAPI) RevokePermissionsRequest(arg0 *lakeformation.RevokePermissionsInput) (*request.Request, *lakeformation.RevokePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.RevokePermissionsOutput)
	return ret0, ret1
}

// RevokePermissionsRequest indicates an expected call of RevokePermissionsRequest.
func (mr *MockLakeFormationAPIMockRecorder) RevokePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePermissionsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).RevokePermissionsRequest), arg0)
}

// RevokePermissionsWithContext mocks base method.
func (m *MockLakeFormationAPI) RevokePermissionsWithContext(arg0 context.Context, arg1 *lakeformation.RevokePermissionsInput, arg2 ...request.Option) (*lakeformation.RevokePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.RevokePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePermissionsWithContext indicates an expected call of RevokePermissionsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) RevokePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePermissionsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).RevokePermissionsWithContext), varargs...)
}

// SearchDatabasesByLFTags mocks base method.
func (m *MockLakeFormationAPI) SearchDatabasesByLFTags(arg0 *lakeformation.SearchDatabasesByLFTagsInput) (*lakeformation.SearchDatabasesByLFTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDatabasesByLFTags", arg0)
	ret0, _ := ret[0].(*lakeformation.SearchDatabasesByLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDatabasesByLFTags indicates an expected call of SearchDatabasesByLFTags.
func (mr *MockLakeFormationAPIMockRecorder) SearchDatabasesByLFTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatabasesByLFTags", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchDatabasesByLFTags), arg0)
}

// SearchDatabasesByLFTagsPages mocks base method.
func (m *MockLakeFormationAPI) SearchDatabasesByLFTagsPages(arg0 *lakeformation.SearchDatabasesByLFTagsInput, arg1 func(*lakeformation.SearchDatabasesByLFTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDatabasesByLFTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchDatabasesByLFTagsPages indicates an expected call of SearchDatabasesByLFTagsPages.
func (mr *MockLakeFormationAPIMockRecorder) SearchDatabasesByLFTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatabasesByLFTagsPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchDatabasesByLFTagsPages), arg0, arg1)
}

// SearchDatabasesByLFTagsPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) SearchDatabasesByLFTagsPagesWithContext(arg0 context.Context, arg1 *lakeformation.SearchDatabasesByLFTagsInput, arg2 func(*lakeformation.SearchDatabasesByLFTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchDatabasesByLFTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchDatabasesByLFTagsPagesWithContext indicates an expected call of SearchDatabasesByLFTagsPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) SearchDatabasesByLFTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatabasesByLFTagsPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchDatabasesByLFTagsPagesWithContext), varargs...)
}

// SearchDatabasesByLFTagsRequest mocks base method.
func (m *MockLakeFormationAPI) SearchDatabasesByLFTagsRequest(arg0 *lakeformation.SearchDatabasesByLFTagsInput) (*request.Request, *lakeformation.SearchDatabasesByLFTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDatabasesByLFTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.SearchDatabasesByLFTagsOutput)
	return ret0, ret1
}

// SearchDatabasesByLFTagsRequest indicates an expected call of SearchDatabasesByLFTagsRequest.
func (mr *MockLakeFormationAPIMockRecorder) SearchDatabasesByLFTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatabasesByLFTagsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchDatabasesByLFTagsRequest), arg0)
}

// SearchDatabasesByLFTagsWithContext mocks base method.
func (m *MockLakeFormationAPI) SearchDatabasesByLFTagsWithContext(arg0 context.Context, arg1 *lakeformation.SearchDatabasesByLFTagsInput, arg2 ...request.Option) (*lakeformation.SearchDatabasesByLFTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchDatabasesByLFTagsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.SearchDatabasesByLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDatabasesByLFTagsWithContext indicates an expected call of SearchDatabasesByLFTagsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) SearchDatabasesByLFTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatabasesByLFTagsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchDatabasesByLFTagsWithContext), varargs...)
}

// SearchTablesByLFTags mocks base method.
func (m *MockLakeFormationAPI) SearchTablesByLFTags(arg0 *lakeformation.SearchTablesByLFTagsInput) (*lakeformation.SearchTablesByLFTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTablesByLFTags", arg0)
	ret0, _ := ret[0].(*lakeformation.SearchTablesByLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTablesByLFTags indicates an expected call of SearchTablesByLFTags.
func (mr *MockLakeFormationAPIMockRecorder) SearchTablesByLFTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesByLFTags", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchTablesByLFTags), arg0)
}

// SearchTablesByLFTagsPages mocks base method.
func (m *MockLakeFormationAPI) SearchTablesByLFTagsPages(arg0 *lakeformation.SearchTablesByLFTagsInput, arg1 func(*lakeformation.SearchTablesByLFTagsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTablesByLFTagsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTablesByLFTagsPages indicates an expected call of SearchTablesByLFTagsPages.
func (mr *MockLakeFormationAPIMockRecorder) SearchTablesByLFTagsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesByLFTagsPages", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchTablesByLFTagsPages), arg0, arg1)
}

// SearchTablesByLFTagsPagesWithContext mocks base method.
func (m *MockLakeFormationAPI) SearchTablesByLFTagsPagesWithContext(arg0 context.Context, arg1 *lakeformation.SearchTablesByLFTagsInput, arg2 func(*lakeformation.SearchTablesByLFTagsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTablesByLFTagsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTablesByLFTagsPagesWithContext indicates an expected call of SearchTablesByLFTagsPagesWithContext.
func (mr *MockLakeFormationAPIMockRecorder) SearchTablesByLFTagsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesByLFTagsPagesWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchTablesByLFTagsPagesWithContext), varargs...)
}

// SearchTablesByLFTagsRequest mocks base method.
func (m *MockLakeFormationAPI) SearchTablesByLFTagsRequest(arg0 *lakeformation.SearchTablesByLFTagsInput) (*request.Request, *lakeformation.SearchTablesByLFTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTablesByLFTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.SearchTablesByLFTagsOutput)
	return ret0, ret1
}

// SearchTablesByLFTagsRequest indicates an expected call of SearchTablesByLFTagsRequest.
func (mr *MockLakeFormationAPIMockRecorder) SearchTablesByLFTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesByLFTagsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchTablesByLFTagsRequest), arg0)
}

// SearchTablesByLFTagsWithContext mocks base method.
func (m *MockLakeFormationAPI) SearchTablesByLFTagsWithContext(arg0 context.Context, arg1 *lakeformation.SearchTablesByLFTagsInput, arg2 ...request.Option) (*lakeformation.SearchTablesByLFTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTablesByLFTagsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.SearchTablesByLFTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTablesByLFTagsWithContext indicates an expected call of SearchTablesByLFTagsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) SearchTablesByLFTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesByLFTagsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).SearchTablesByLFTagsWithContext), varargs...)
}

// StartQueryPlanning mocks base method.
func (m *MockLakeFormationAPI) StartQueryPlanning(arg0 *lakeformation.StartQueryPlanningInput) (*lakeformation.StartQueryPlanningOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQueryPlanning", arg0)
	ret0, _ := ret[0].(*lakeformation.StartQueryPlanningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQueryPlanning indicates an expected call of StartQueryPlanning.
func (mr *MockLakeFormationAPIMockRecorder) StartQueryPlanning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQueryPlanning", reflect.TypeOf((*MockLakeFormationAPI)(nil).StartQueryPlanning), arg0)
}

// StartQueryPlanningRequest mocks base method.
func (m *MockLakeFormationAPI) StartQueryPlanningRequest(arg0 *lakeformation.StartQueryPlanningInput) (*request.Request, *lakeformation.StartQueryPlanningOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQueryPlanningRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.StartQueryPlanningOutput)
	return ret0, ret1
}

// StartQueryPlanningRequest indicates an expected call of StartQueryPlanningRequest.
func (mr *MockLakeFormationAPIMockRecorder) StartQueryPlanningRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQueryPlanningRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).StartQueryPlanningRequest), arg0)
}

// StartQueryPlanningWithContext mocks base method.
func (m *MockLakeFormationAPI) StartQueryPlanningWithContext(arg0 context.Context, arg1 *lakeformation.StartQueryPlanningInput, arg2 ...request.Option) (*lakeformation.StartQueryPlanningOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartQueryPlanningWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.StartQueryPlanningOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQueryPlanningWithContext indicates an expected call of StartQueryPlanningWithContext.
func (mr *MockLakeFormationAPIMockRecorder) StartQueryPlanningWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQueryPlanningWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).StartQueryPlanningWithContext), varargs...)
}

// StartTransaction mocks base method.
func (m *MockLakeFormationAPI) StartTransaction(arg0 *lakeformation.StartTransactionInput) (*lakeformation.StartTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", arg0)
	ret0, _ := ret[0].(*lakeformation.StartTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockLakeFormationAPIMockRecorder) StartTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockLakeFormationAPI)(nil).StartTransaction), arg0)
}

// StartTransactionRequest mocks base method.
func (m *MockLakeFormationAPI) StartTransactionRequest(arg0 *lakeformation.StartTransactionInput) (*request.Request, *lakeformation.StartTransactionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransactionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.StartTransactionOutput)
	return ret0, ret1
}

// StartTransactionRequest indicates an expected call of StartTransactionRequest.
func (mr *MockLakeFormationAPIMockRecorder) StartTransactionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransactionRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).StartTransactionRequest), arg0)
}

// StartTransactionWithContext mocks base method.
func (m *MockLakeFormationAPI) StartTransactionWithContext(arg0 context.Context, arg1 *lakeformation.StartTransactionInput, arg2 ...request.Option) (*lakeformation.StartTransactionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTransactionWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.StartTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransactionWithContext indicates an expected call of StartTransactionWithContext.
func (mr *MockLakeFormationAPIMockRecorder) StartTransactionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransactionWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).StartTransactionWithContext), varargs...)
}

// UpdateLFTag mocks base method.
func (m *MockLakeFormationAPI) UpdateLFTag(arg0 *lakeformation.UpdateLFTagInput) (*lakeformation.UpdateLFTagOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLFTag", arg0)
	ret0, _ := ret[0].(*lakeformation.UpdateLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLFTag indicates an expected call of UpdateLFTag.
func (mr *MockLakeFormationAPIMockRecorder) UpdateLFTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLFTag", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateLFTag), arg0)
}

// UpdateLFTagRequest mocks base method.
func (m *MockLakeFormationAPI) UpdateLFTagRequest(arg0 *lakeformation.UpdateLFTagInput) (*request.Request, *lakeformation.UpdateLFTagOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLFTagRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.UpdateLFTagOutput)
	return ret0, ret1
}

// UpdateLFTagRequest indicates an expected call of UpdateLFTagRequest.
func (mr *MockLakeFormationAPIMockRecorder) UpdateLFTagRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLFTagRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateLFTagRequest), arg0)
}

// UpdateLFTagWithContext mocks base method.
func (m *MockLakeFormationAPI) UpdateLFTagWithContext(arg0 context.Context, arg1 *lakeformation.UpdateLFTagInput, arg2 ...request.Option) (*lakeformation.UpdateLFTagOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLFTagWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.UpdateLFTagOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLFTagWithContext indicates an expected call of UpdateLFTagWithContext.
func (mr *MockLakeFormationAPIMockRecorder) UpdateLFTagWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLFTagWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateLFTagWithContext), varargs...)
}

// UpdateResource mocks base method.
func (m *MockLakeFormationAPI) UpdateResource(arg0 *lakeformation.UpdateResourceInput) (*lakeformation.UpdateResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", arg0)
	ret0, _ := ret[0].(*lakeformation.UpdateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockLakeFormationAPIMockRecorder) UpdateResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateResource), arg0)
}

// UpdateResourceRequest mocks base method.
func (m *MockLakeFormationAPI) UpdateResourceRequest(arg0 *lakeformation.UpdateResourceInput) (*request.Request, *lakeformation.UpdateResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.UpdateResourceOutput)
	return ret0, ret1
}

// UpdateResourceRequest indicates an expected call of UpdateResourceRequest.
func (mr *MockLakeFormationAPIMockRecorder) UpdateResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateResourceRequest), arg0)
}

// UpdateResourceWithContext mocks base method.
func (m *MockLakeFormationAPI) UpdateResourceWithContext(arg0 context.Context, arg1 *lakeformation.UpdateResourceInput, arg2 ...request.Option) (*lakeformation.UpdateResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.UpdateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceWithContext indicates an expected call of UpdateResourceWithContext.
func (mr *MockLakeFormationAPIMockRecorder) UpdateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateResourceWithContext), varargs...)
}

// UpdateTableObjects mocks base method.
func (m *MockLakeFormationAPI) UpdateTableObjects(arg0 *lakeformation.UpdateTableObjectsInput) (*lakeformation.UpdateTableObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableObjects", arg0)
	ret0, _ := ret[0].(*lakeformation.UpdateTableObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableObjects indicates an expected call of UpdateTableObjects.
func (mr *MockLakeFormationAPIMockRecorder) UpdateTableObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableObjects", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateTableObjects), arg0)
}

// UpdateTableObjectsRequest mocks base method.
func (m *MockLakeFormationAPI) UpdateTableObjectsRequest(arg0 *lakeformation.UpdateTableObjectsInput) (*request.Request, *lakeformation.UpdateTableObjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableObjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.UpdateTableObjectsOutput)
	return ret0, ret1
}

// UpdateTableObjectsRequest indicates an expected call of UpdateTableObjectsRequest.
func (mr *MockLakeFormationAPIMockRecorder) UpdateTableObjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableObjectsRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateTableObjectsRequest), arg0)
}

// UpdateTableObjectsWithContext mocks base method.
func (m *MockLakeFormationAPI) UpdateTableObjectsWithContext(arg0 context.Context, arg1 *lakeformation.UpdateTableObjectsInput, arg2 ...request.Option) (*lakeformation.UpdateTableObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTableObjectsWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.UpdateTableObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableObjectsWithContext indicates an expected call of UpdateTableObjectsWithContext.
func (mr *MockLakeFormationAPIMockRecorder) UpdateTableObjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableObjectsWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateTableObjectsWithContext), varargs...)
}

// UpdateTableStorageOptimizer mocks base method.
func (m *MockLakeFormationAPI) UpdateTableStorageOptimizer(arg0 *lakeformation.UpdateTableStorageOptimizerInput) (*lakeformation.UpdateTableStorageOptimizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableStorageOptimizer", arg0)
	ret0, _ := ret[0].(*lakeformation.UpdateTableStorageOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableStorageOptimizer indicates an expected call of UpdateTableStorageOptimizer.
func (mr *MockLakeFormationAPIMockRecorder) UpdateTableStorageOptimizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableStorageOptimizer", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateTableStorageOptimizer), arg0)
}

// UpdateTableStorageOptimizerRequest mocks base method.
func (m *MockLakeFormationAPI) UpdateTableStorageOptimizerRequest(arg0 *lakeformation.UpdateTableStorageOptimizerInput) (*request.Request, *lakeformation.UpdateTableStorageOptimizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableStorageOptimizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*lakeformation.UpdateTableStorageOptimizerOutput)
	return ret0, ret1
}

// UpdateTableStorageOptimizerRequest indicates an expected call of UpdateTableStorageOptimizerRequest.
func (mr *MockLakeFormationAPIMockRecorder) UpdateTableStorageOptimizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableStorageOptimizerRequest", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateTableStorageOptimizerRequest), arg0)
}

// UpdateTableStorageOptimizerWithContext mocks base method.
func (m *MockLakeFormationAPI) UpdateTableStorageOptimizerWithContext(arg0 context.Context, arg1 *lakeformation.UpdateTableStorageOptimizerInput, arg2 ...request.Option) (*lakeformation.UpdateTableStorageOptimizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTableStorageOptimizerWithContext", varargs...)
	ret0, _ := ret[0].(*lakeformation.UpdateTableStorageOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableStorageOptimizerWithContext indicates an expected call of UpdateTableStorageOptimizerWithContext.
func (mr *MockLakeFormationAPIMockRecorder) UpdateTableStorageOptimizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableStorageOptimizerWithContext", reflect.TypeOf((*MockLakeFormationAPI)(nil).UpdateTableStorageOptimizerWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/mediaconvert/mediaconvertiface (interfaces: MediaConvertAPI)

// Package mediaconvertmock is a generated GoMock package.
package mediaconvertmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	mediaconvert "github.com/aws/aws-sdk-go/service/mediaconvert"
	gomock "github.com/golang/mock/gomock"
)

// MockMediaConvertAPI is a mock of MediaConvertAPI interface.
type MockMediaConvertAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMediaConvertAPIMockRecorder
}

// MockMediaConvertAPIMockRecorder is the mock recorder for MockMediaConvertAPI.
type MockMediaConvertAPIMockRecorder struct {
	mock *MockMediaConvertAPI
}

// NewMockMediaConvertAPI creates a new mock instance.
func NewMockMediaConvertAPI(ctrl *gomock.Controller) *MockMediaConvertAPI {
	mock := &MockMediaConvertAPI{ctrl: ctrl}
	mock.recorder = &MockMediaConvertAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaConvertAPI) EXPECT() *MockMediaConvertAPIMockRecorder {
	return m.recorder
}

// AssociateCertificate mocks base method.
func (m *MockMediaConvertAPI) AssociateCertificate(arg0 *mediaconvert.AssociateCertificateInput) (*mediaconvert.AssociateCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateCertificate", arg0)
	ret0, _ := ret[0].(*mediaconvert.AssociateCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateCertificate indicates an expected call of AssociateCertificate.
func (mr *MockMediaConvertAPIMockRecorder) AssociateCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCertificate", reflect.TypeOf((*MockMediaConvertAPI)(nil).AssociateCertificate), arg0)
}

// AssociateCertificateRequest mocks base method.
func (m *MockMediaConvertAPI) AssociateCertificateRequest(arg0 *mediaconvert.AssociateCertificateInput) (*request.Request, *mediaconvert.AssociateCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.AssociateCertificateOutput)
	return ret0, ret1
}

// AssociateCertificateRequest indicates an expected call of AssociateCertificateRequest.
func (mr *MockMediaConvertAPIMockRecorder) AssociateCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCertificateRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).AssociateCertificateRequest), arg0)
}

// AssociateCertificateWithContext mocks base method.
func (m *MockMediaConvertAPI) AssociateCertificateWithContext(arg0 context.Context, arg1 *mediaconvert.AssociateCertificateInput, arg2 ...request.Option) (*mediaconvert.AssociateCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.AssociateCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateCertificateWithContext indicates an expected call of AssociateCertificateWithContext.
func (mr *MockMediaConvertAPIMockRecorder) AssociateCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateCertificateWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).AssociateCertificateWithContext), varargs...)
}

// CancelJob mocks base method.
func (m *MockMediaConvertAPI) CancelJob(arg0 *mediaconvert.CancelJobInput) (*mediaconvert.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0)
	ret0, _ := ret[0].(*mediaconvert.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockMediaConvertAPIMockRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockMediaConvertAPI)(nil).CancelJob), arg0)
}

// CancelJobRequest mocks base method.
func (m *MockMediaConvertAPI) CancelJobRequest(arg0 *mediaconvert.CancelJobInput) (*request.Request, *mediaconvert.CancelJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.CancelJobOutput)
	return ret0, ret1
}

// CancelJobRequest indicates an expected call of CancelJobRequest.
func (mr *MockMediaConvertAPIMockRecorder) CancelJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).CancelJobRequest), arg0)
}

// CancelJobWithContext mocks base method.
func (m *MockMediaConvertAPI) CancelJobWithContext(arg0 context.Context, arg1 *mediaconvert.CancelJobInput, arg2 ...request.Option) (*mediaconvert.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobWithContext indicates an expected call of CancelJobWithContext.
func (mr *MockMediaConvertAPIMockRecorder) CancelJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).CancelJobWithContext), varargs...)
}

// CreateJob mocks base method.
func (m *MockMediaConvertAPI) CreateJob(arg0 *mediaconvert.CreateJobInput) (*mediaconvert.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*mediaconvert.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockMediaConvertAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method.
func (m *MockMediaConvertAPI) CreateJobRequest(arg0 *mediaconvert.CreateJobInput) (*request.Request, *mediaconvert.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest.
func (mr *MockMediaConvertAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobTemplate mocks base method.
func (m *MockMediaConvertAPI) CreateJobTemplate(arg0 *mediaconvert.CreateJobTemplateInput) (*mediaconvert.CreateJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobTemplate", arg0)
	ret0, _ := ret[0].(*mediaconvert.CreateJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobTemplate indicates an expected call of CreateJobTemplate.
func (mr *MockMediaConvertAPIMockRecorder) CreateJobTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobTemplate", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateJobTemplate), arg0)
}

// CreateJobTemplateRequest mocks base method.
func (m *MockMediaConvertAPI) CreateJobTemplateRequest(arg0 *mediaconvert.CreateJobTemplateInput) (*request.Request, *mediaconvert.CreateJobTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.CreateJobTemplateOutput)
	return ret0, ret1
}

// CreateJobTemplateRequest indicates an expected call of CreateJobTemplateRequest.
func (mr *MockMediaConvertAPIMockRecorder) CreateJobTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobTemplateRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateJobTemplateRequest), arg0)
}

// CreateJobTemplateWithContext mocks base method.
func (m *MockMediaConvertAPI) CreateJobTemplateWithContext(arg0 context.Context, arg1 *mediaconvert.CreateJobTemplateInput, arg2 ...request.Option) (*mediaconvert.CreateJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.CreateJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobTemplateWithContext indicates an expected call of CreateJobTemplateWithContext.
func (mr *MockMediaConvertAPIMockRecorder) CreateJobTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobTemplateWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateJobTemplateWithContext), varargs...)
}

// CreateJobWithContext mocks base method.
func (m *MockMediaConvertAPI) CreateJobWithContext(arg0 context.Context, arg1 *mediaconvert.CreateJobInput, arg2 ...request.Option) (*mediaconvert.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext.
func (mr *MockMediaConvertAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateJobWithContext), varargs...)
}

// CreatePreset mocks base method.
func (m *MockMediaConvertAPI) CreatePreset(arg0 *mediaconvert.CreatePresetInput) (*mediaconvert.CreatePresetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreset", arg0)
	ret0, _ := ret[0].(*mediaconvert.CreatePresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreset indicates an expected call of CreatePreset.
func (mr *MockMediaConvertAPIMockRecorder) CreatePreset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreset", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreatePreset), arg0)
}

// CreatePresetRequest mocks base method.
func (m *MockMediaConvertAPI) CreatePresetRequest(arg0 *mediaconvert.CreatePresetInput) (*request.Request, *mediaconvert.CreatePresetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePresetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.CreatePresetOutput)
	return ret0, ret1
}

// CreatePresetRequest indicates an expected call of CreatePresetRequest.
func (mr *MockMediaConvertAPIMockRecorder) CreatePresetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePresetRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreatePresetRequest), arg0)
}

// CreatePresetWithContext mocks base method.
func (m *MockMediaConvertAPI) CreatePresetWithContext(arg0 context.Context, arg1 *mediaconvert.CreatePresetInput, arg2 ...request.Option) (*mediaconvert.CreatePresetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePresetWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.CreatePresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePresetWithContext indicates an expected call of CreatePresetWithContext.
func (mr *MockMediaConvertAPIMockRecorder) CreatePresetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePresetWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreatePresetWithContext), varargs...)
}

// CreateQueue mocks base method.
func (m *MockMediaConvertAPI) CreateQueue(arg0 *mediaconvert.CreateQueueInput) (*mediaconvert.CreateQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", arg0)
	ret0, _ := ret[0].(*mediaconvert.CreateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockMediaConvertAPIMockRecorder) CreateQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateQueue), arg0)
}

// CreateQueueRequest mocks base method.
func (m *MockMediaConvertAPI) CreateQueueRequest(arg0 *mediaconvert.CreateQueueInput) (*request.Request, *mediaconvert.CreateQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.CreateQueueOutput)
	return ret0, ret1
}

// CreateQueueRequest indicates an expected call of CreateQueueRequest.
func (mr *MockMediaConvertAPIMockRecorder) CreateQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateQueueRequest), arg0)
}

// CreateQueueWithContext mocks base method.
func (m *MockMediaConvertAPI) CreateQueueWithContext(arg0 context.Context, arg1 *mediaconvert.CreateQueueInput, arg2 ...request.Option) (*mediaconvert.CreateQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateQueueWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.CreateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQueueWithContext indicates an expected call of CreateQueueWithContext.
func (mr *MockMediaConvertAPIMockRecorder) CreateQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueueWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).CreateQueueWithContext), varargs...)
}

// DeleteJobTemplate mocks base method.
func (m *MockMediaConvertAPI) DeleteJobTemplate(arg0 *mediaconvert.DeleteJobTemplateInput) (*mediaconvert.DeleteJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobTemplate", arg0)
	ret0, _ := ret[0].(*mediaconvert.DeleteJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobTemplate indicates an expected call of DeleteJobTemplate.
func (mr *MockMediaConvertAPIMockRecorder) DeleteJobTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobTemplate", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeleteJobTemplate), arg0)
}

// DeleteJobTemplateRequest mocks base method.
func (m *MockMediaConvertAPI) DeleteJobTemplateRequest(arg0 *mediaconvert.DeleteJobTemplateInput) (*request.Request, *mediaconvert.DeleteJobTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.DeleteJobTemplateOutput)
	return ret0, ret1
}

// DeleteJobTemplateRequest indicates an expected call of DeleteJobTemplateRequest.
func (mr *MockMediaConvertAPIMockRecorder) DeleteJobTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobTemplateRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeleteJobTemplateRequest), arg0)
}

// DeleteJobTemplateWithContext mocks base method.
func (m *MockMediaConvertAPI) DeleteJobTemplateWithContext(arg0 context.Context, arg1 *mediaconvert.DeleteJobTemplateInput, arg2 ...request.Option) (*mediaconvert.DeleteJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.DeleteJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobTemplateWithContext indicates an expected call of DeleteJobTemplateWithContext.
func (mr *MockMediaConvertAPIMockRecorder) DeleteJobTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobTemplateWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeleteJobTemplateWithContext), varargs...)
}

// DeletePreset mocks base method.
func (m *MockMediaConvertAPI) DeletePreset(arg0 *mediaconvert.DeletePresetInput) (*mediaconvert.DeletePresetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePreset", arg0)
	ret0, _ := ret[0].(*mediaconvert.DeletePresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePreset indicates an expected call of DeletePreset.
func (mr *MockMediaConvertAPIMockRecorder) DeletePreset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePreset", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeletePreset), arg0)
}

// DeletePresetRequest mocks base method.
func (m *MockMediaConvertAPI) DeletePresetRequest(arg0 *mediaconvert.DeletePresetInput) (*request.Request, *mediaconvert.DeletePresetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePresetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.DeletePresetOutput)
	return ret0, ret1
}

// DeletePresetRequest indicates an expected call of DeletePresetRequest.
func (mr *MockMediaConvertAPIMockRecorder) DeletePresetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePresetRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeletePresetRequest), arg0)
}

// DeletePresetWithContext mocks base method.
func (m *MockMediaConvertAPI) DeletePresetWithContext(arg0 context.Context, arg1 *mediaconvert.DeletePresetInput, arg2 ...request.Option) (*mediaconvert.DeletePresetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePresetWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.DeletePresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePresetWithContext indicates an expected call of DeletePresetWithContext.
func (mr *MockMediaConvertAPIMockRecorder) DeletePresetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePresetWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeletePresetWithContext), varargs...)
}

// DeleteQueue mocks base method.
func (m *MockMediaConvertAPI) DeleteQueue(arg0 *mediaconvert.DeleteQueueInput) (*mediaconvert.DeleteQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueue", arg0)
	ret0, _ := ret[0].(*mediaconvert.DeleteQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueue indicates an expected call of DeleteQueue.
func (mr *MockMediaConvertAPIMockRecorder) DeleteQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeleteQueue), arg0)
}

// DeleteQueueRequest mocks base method.
func (m *MockMediaConvertAPI) DeleteQueueRequest(arg0 *mediaconvert.DeleteQueueInput) (*request.Request, *mediaconvert.DeleteQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.DeleteQueueOutput)
	return ret0, ret1
}

// DeleteQueueRequest indicates an expected call of DeleteQueueRequest.
func (mr *MockMediaConvertAPIMockRecorder) DeleteQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeleteQueueRequest), arg0)
}

// DeleteQueueWithContext mocks base method.
func (m *MockMediaConvertAPI) DeleteQueueWithContext(arg0 context.Context, arg1 *mediaconvert.DeleteQueueInput, arg2 ...request.Option) (*mediaconvert.DeleteQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteQueueWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.DeleteQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueueWithContext indicates an expected call of DeleteQueueWithContext.
func (mr *MockMediaConvertAPIMockRecorder) DeleteQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).DeleteQueueWithContext), varargs...)
}

// DescribeEndpoints mocks base method.
func (m *MockMediaConvertAPI) DescribeEndpoints(arg0 *mediaconvert.DescribeEndpointsInput) (*mediaconvert.DescribeEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpoints", arg0)
	ret0, _ := ret[0].(*mediaconvert.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoints indicates an expected call of DescribeEndpoints.
func (mr *MockMediaConvertAPIMockRecorder) DescribeEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoints", reflect.TypeOf((*MockMediaConvertAPI)(nil).DescribeEndpoints), arg0)
}

// DescribeEndpointsPages mocks base method.
func (m *MockMediaConvertAPI) DescribeEndpointsPages(arg0 *mediaconvert.DescribeEndpointsInput, arg1 func(*mediaconvert.DescribeEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEndpointsPages indicates an expected call of DescribeEndpointsPages.
func (mr *MockMediaConvertAPIMockRecorder) DescribeEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsPages", reflect.TypeOf((*MockMediaConvertAPI)(nil).DescribeEndpointsPages), arg0, arg1)
}

// DescribeEndpointsPagesWithContext mocks base method.
func (m *MockMediaConvertAPI) DescribeEndpointsPagesWithContext(arg0 context.Context, arg1 *mediaconvert.DescribeEndpointsInput, arg2 func(*mediaconvert.DescribeEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEndpointsPagesWithContext indicates an expected call of DescribeEndpointsPagesWithContext.
func (mr *MockMediaConvertAPIMockRecorder) DescribeEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsPagesWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).DescribeEndpointsPagesWithContext), varargs...)
}

// DescribeEndpointsRequest mocks base method.
func (m *MockMediaConvertAPI) DescribeEndpointsRequest(arg0 *mediaconvert.DescribeEndpointsInput) (*request.Request, *mediaconvert.DescribeEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.DescribeEndpointsOutput)
	return ret0, ret1
}

// DescribeEndpointsRequest indicates an expected call of DescribeEndpointsRequest.
func (mr *MockMediaConvertAPIMockRecorder) DescribeEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).DescribeEndpointsRequest), arg0)
}

// DescribeEndpointsWithContext mocks base method.
func (m *MockMediaConvertAPI) DescribeEndpointsWithContext(arg0 context.Context, arg1 *mediaconvert.DescribeEndpointsInput, arg2 ...request.Option) (*mediaconvert.DescribeEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointsWithContext indicates an expected call of DescribeEndpointsWithContext.
func (mr *MockMediaConvertAPIMockRecorder) DescribeEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).DescribeEndpointsWithContext), varargs...)
}

// DisassociateCertificate mocks base method.
func (m *MockMediaConvertAPI) DisassociateCertificate(arg0 *mediaconvert.DisassociateCertificateInput) (*mediaconvert.DisassociateCertificateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateCertificate", arg0)
	ret0, _ := ret[0].(*mediaconvert.DisassociateCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateCertificate indicates an expected call of DisassociateCertificate.
func (mr *MockMediaConvertAPIMockRecorder) DisassociateCertificate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCertificate", reflect.TypeOf((*MockMediaConvertAPI)(nil).DisassociateCertificate), arg0)
}

// DisassociateCertificateRequest mocks base method.
func (m *MockMediaConvertAPI) DisassociateCertificateRequest(arg0 *mediaconvert.DisassociateCertificateInput) (*request.Request, *mediaconvert.DisassociateCertificateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.DisassociateCertificateOutput)
	return ret0, ret1
}

// DisassociateCertificateRequest indicates an expected call of DisassociateCertificateRequest.
func (mr *MockMediaConvertAPIMockRecorder) DisassociateCertificateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCertificateRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).DisassociateCertificateRequest), arg0)
}

// DisassociateCertificateWithContext mocks base method.
func (m *MockMediaConvertAPI) DisassociateCertificateWithContext(arg0 context.Context, arg1 *mediaconvert.DisassociateCertificateInput, arg2 ...request.Option) (*mediaconvert.DisassociateCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.DisassociateCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateCertificateWithContext indicates an expected call of DisassociateCertificateWithContext.
func (mr *MockMediaConvertAPIMockRecorder) DisassociateCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateCertificateWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).DisassociateCertificateWithContext), varargs...)
}

// GetJob mocks base method.
func (m *MockMediaConvertAPI) GetJob(arg0 *mediaconvert.GetJobInput) (*mediaconvert.GetJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*mediaconvert.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockMediaConvertAPIMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetJob), arg0)
}

// GetJobRequest mocks base method.
func (m *MockMediaConvertAPI) GetJobRequest(arg0 *mediaconvert.GetJobInput) (*request.Request, *mediaconvert.GetJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.GetJobOutput)
	return ret0, ret1
}

// GetJobRequest indicates an expected call of GetJobRequest.
func (mr *MockMediaConvertAPIMockRecorder) GetJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetJobRequest), arg0)
}

// GetJobTemplate mocks base method.
func (m *MockMediaConvertAPI) GetJobTemplate(arg0 *mediaconvert.GetJobTemplateInput) (*mediaconvert.GetJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobTemplate", arg0)
	ret0, _ := ret[0].(*mediaconvert.GetJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobTemplate indicates an expected call of GetJobTemplate.
func (mr *MockMediaConvertAPIMockRecorder) GetJobTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTemplate", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetJobTemplate), arg0)
}

// GetJobTemplateRequest mocks base method.
func (m *MockMediaConvertAPI) GetJobTemplateRequest(arg0 *mediaconvert.GetJobTemplateInput) (*request.Request, *mediaconvert.GetJobTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.GetJobTemplateOutput)
	return ret0, ret1
}

// GetJobTemplateRequest indicates an expected call of GetJobTemplateRequest.
func (mr *MockMediaConvertAPIMockRecorder) GetJobTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTemplateRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetJobTemplateRequest), arg0)
}

// GetJobTemplateWithContext mocks base method.
func (m *MockMediaConvertAPI) GetJobTemplateWithContext(arg0 context.Context, arg1 *mediaconvert.GetJobTemplateInput, arg2 ...request.Option) (*mediaconvert.GetJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.GetJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobTemplateWithContext indicates an expected call of GetJobTemplateWithContext.
func (mr *MockMediaConvertAPIMockRecorder) GetJobTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobTemplateWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetJobTemplateWithContext), varargs...)
}

// GetJobWithContext mocks base method.
func (m *MockMediaConvertAPI) GetJobWithContext(arg0 context.Context, arg1 *mediaconvert.GetJobInput, arg2 ...request.Option) (*mediaconvert.GetJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobWithContext indicates an expected call of GetJobWithContext.
func (mr *MockMediaConvertAPIMockRecorder) GetJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetJobWithContext), varargs...)
}

// GetPreset mocks base method.
func (m *MockMediaConvertAPI) GetPreset(arg0 *mediaconvert.GetPresetInput) (*mediaconvert.GetPresetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreset", arg0)
	ret0, _ := ret[0].(*mediaconvert.GetPresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreset indicates an expected call of GetPreset.
func (mr *MockMediaConvertAPIMockRecorder) GetPreset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreset", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetPreset), arg0)
}

// GetPresetRequest mocks base method.
func (m *MockMediaConvertAPI) GetPresetRequest(arg0 *mediaconvert.GetPresetInput) (*request.Request, *mediaconvert.GetPresetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.GetPresetOutput)
	return ret0, ret1
}

// GetPresetRequest indicates an expected call of GetPresetRequest.
func (mr *MockMediaConvertAPIMockRecorder) GetPresetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresetRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetPresetRequest), arg0)
}

// GetPresetWithContext mocks base method.
func (m *MockMediaConvertAPI) GetPresetWithContext(arg0 context.Context, arg1 *mediaconvert.GetPresetInput, arg2 ...request.Option) (*mediaconvert.GetPresetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPresetWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.GetPresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresetWithContext indicates an expected call of GetPresetWithContext.
func (mr *MockMediaConvertAPIMockRecorder) GetPresetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresetWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetPresetWithContext), varargs...)
}

// GetQueue mocks base method.
func (m *MockMediaConvertAPI) GetQueue(arg0 *mediaconvert.GetQueueInput) (*mediaconvert.GetQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", arg0)
	ret0, _ := ret[0].(*mediaconvert.GetQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockMediaConvertAPIMockRecorder) GetQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetQueue), arg0)
}

// GetQueueRequest mocks base method.
func (m *MockMediaConvertAPI) GetQueueRequest(arg0 *mediaconvert.GetQueueInput) (*request.Request, *mediaconvert.GetQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.GetQueueOutput)
	return ret0, ret1
}

// GetQueueRequest indicates an expected call of GetQueueRequest.
func (mr *MockMediaConvertAPIMockRecorder) GetQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetQueueRequest), arg0)
}

// GetQueueWithContext mocks base method.
func (m *MockMediaConvertAPI) GetQueueWithContext(arg0 context.Context, arg1 *mediaconvert.GetQueueInput, arg2 ...request.Option) (*mediaconvert.GetQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueueWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.GetQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueWithContext indicates an expected call of GetQueueWithContext.
func (mr *MockMediaConvertAPIMockRecorder) GetQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).GetQueueWithContext), varargs...)
}

// ListJobTemplates mocks base method.
func (m *MockMediaConvertAPI) ListJobTemplates(arg0 *mediaconvert.ListJobTemplatesInput) (*mediaconvert.ListJobTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobTemplates", arg0)
	ret0, _ := ret[0].(*mediaconvert.ListJobTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobTemplates indicates an expected call of ListJobTemplates.
func (mr *MockMediaConvertAPIMockRecorder) ListJobTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobTemplates", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobTemplates), arg0)
}

// ListJobTemplatesPages mocks base method.
func (m *MockMediaConvertAPI) ListJobTemplatesPages(arg0 *mediaconvert.ListJobTemplatesInput, arg1 func(*mediaconvert.ListJobTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobTemplatesPages indicates an expected call of ListJobTemplatesPages.
func (mr *MockMediaConvertAPIMockRecorder) ListJobTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobTemplatesPages", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobTemplatesPages), arg0, arg1)
}

// ListJobTemplatesPagesWithContext mocks base method.
func (m *MockMediaConvertAPI) ListJobTemplatesPagesWithContext(arg0 context.Context, arg1 *mediaconvert.ListJobTemplatesInput, arg2 func(*mediaconvert.ListJobTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobTemplatesPagesWithContext indicates an expected call of ListJobTemplatesPagesWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListJobTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobTemplatesPagesWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobTemplatesPagesWithContext), varargs...)
}

// ListJobTemplatesRequest mocks base method.
func (m *MockMediaConvertAPI) ListJobTemplatesRequest(arg0 *mediaconvert.ListJobTemplatesInput) (*request.Request, *mediaconvert.ListJobTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.ListJobTemplatesOutput)
	return ret0, ret1
}

// ListJobTemplatesRequest indicates an expected call of ListJobTemplatesRequest.
func (mr *MockMediaConvertAPIMockRecorder) ListJobTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobTemplatesRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobTemplatesRequest), arg0)
}

// ListJobTemplatesWithContext mocks base method.
func (m *MockMediaConvertAPI) ListJobTemplatesWithContext(arg0 context.Context, arg1 *mediaconvert.ListJobTemplatesInput, arg2 ...request.Option) (*mediaconvert.ListJobTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.ListJobTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobTemplatesWithContext indicates an expected call of ListJobTemplatesWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListJobTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobTemplatesWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobTemplatesWithContext), varargs...)
}

// ListJobs mocks base method.
func (m *MockMediaConvertAPI) ListJobs(arg0 *mediaconvert.ListJobsInput) (*mediaconvert.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*mediaconvert.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockMediaConvertAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobs), arg0)
}

// ListJobsPages mocks base method.
func (m *MockMediaConvertAPI) ListJobsPages(arg0 *mediaconvert.ListJobsInput, arg1 func(*mediaconvert.ListJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPages indicates an expected call of ListJobsPages.
func (mr *MockMediaConvertAPIMockRecorder) ListJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPages", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobsPages), arg0, arg1)
}

// ListJobsPagesWithContext mocks base method.
func (m *MockMediaConvertAPI) ListJobsPagesWithContext(arg0 context.Context, arg1 *mediaconvert.ListJobsInput, arg2 func(*mediaconvert.ListJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPagesWithContext indicates an expected call of ListJobsPagesWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPagesWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobsPagesWithContext), varargs...)
}

// ListJobsRequest mocks base method.
func (m *MockMediaConvertAPI) ListJobsRequest(arg0 *mediaconvert.ListJobsInput) (*request.Request, *mediaconvert.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest.
func (mr *MockMediaConvertAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method.
func (m *MockMediaConvertAPI) ListJobsWithContext(arg0 context.Context, arg1 *mediaconvert.ListJobsInput, arg2 ...request.Option) (*mediaconvert.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListJobsWithContext), varargs...)
}

// ListPresets mocks base method.
func (m *MockMediaConvertAPI) ListPresets(arg0 *mediaconvert.ListPresetsInput) (*mediaconvert.ListPresetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPresets", arg0)
	ret0, _ := ret[0].(*mediaconvert.ListPresetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPresets indicates an expected call of ListPresets.
func (mr *MockMediaConvertAPIMockRecorder) ListPresets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPresets", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListPresets), arg0)
}

// ListPresetsPages mocks base method.
func (m *MockMediaConvertAPI) ListPresetsPages(arg0 *mediaconvert.ListPresetsInput, arg1 func(*mediaconvert.ListPresetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPresetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPresetsPages indicates an expected call of ListPresetsPages.
func (mr *MockMediaConvertAPIMockRecorder) ListPresetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPresetsPages", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListPresetsPages), arg0, arg1)
}

// ListPresetsPagesWithContext mocks base method.
func (m *MockMediaConvertAPI) ListPresetsPagesWithContext(arg0 context.Context, arg1 *mediaconvert.ListPresetsInput, arg2 func(*mediaconvert.ListPresetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPresetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPresetsPagesWithContext indicates an expected call of ListPresetsPagesWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListPresetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPresetsPagesWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListPresetsPagesWithContext), varargs...)
}

// ListPresetsRequest mocks base method.
func (m *MockMediaConvertAPI) ListPresetsRequest(arg0 *mediaconvert.ListPresetsInput) (*request.Request, *mediaconvert.ListPresetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPresetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.ListPresetsOutput)
	return ret0, ret1
}

// ListPresetsRequest indicates an expected call of ListPresetsRequest.
func (mr *MockMediaConvertAPIMockRecorder) ListPresetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPresetsRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListPresetsRequest), arg0)
}

// ListPresetsWithContext mocks base method.
func (m *MockMediaConvertAPI) ListPresetsWithContext(arg0 context.Context, arg1 *mediaconvert.ListPresetsInput, arg2 ...request.Option) (*mediaconvert.ListPresetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPresetsWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.ListPresetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPresetsWithContext indicates an expected call of ListPresetsWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListPresetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPresetsWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListPresetsWithContext), varargs...)
}

// ListQueues mocks base method.
func (m *MockMediaConvertAPI) ListQueues(arg0 *mediaconvert.ListQueuesInput) (*mediaconvert.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueues", arg0)
	ret0, _ := ret[0].(*mediaconvert.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueues indicates an expected call of ListQueues.
func (mr *MockMediaConvertAPIMockRecorder) ListQueues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueues", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListQueues), arg0)
}

// ListQueuesPages mocks base method.
func (m *MockMediaConvertAPI) ListQueuesPages(arg0 *mediaconvert.ListQueuesInput, arg1 func(*mediaconvert.ListQueuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPages indicates an expected call of ListQueuesPages.
func (mr *MockMediaConvertAPIMockRecorder) ListQueuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPages", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListQueuesPages), arg0, arg1)
}

// ListQueuesPagesWithContext mocks base method.
func (m *MockMediaConvertAPI) ListQueuesPagesWithContext(arg0 context.Context, arg1 *mediaconvert.ListQueuesInput, arg2 func(*mediaconvert.ListQueuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueuesPagesWithContext indicates an expected call of ListQueuesPagesWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListQueuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesPagesWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListQueuesPagesWithContext), varargs...)
}

// ListQueuesRequest mocks base method.
func (m *MockMediaConvertAPI) ListQueuesRequest(arg0 *mediaconvert.ListQueuesInput) (*request.Request, *mediaconvert.ListQueuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.ListQueuesOutput)
	return ret0, ret1
}

// ListQueuesRequest indicates an expected call of ListQueuesRequest.
func (mr *MockMediaConvertAPIMockRecorder) ListQueuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListQueuesRequest), arg0)
}

// ListQueuesWithContext mocks base method.
func (m *MockMediaConvertAPI) ListQueuesWithContext(arg0 context.Context, arg1 *mediaconvert.ListQueuesInput, arg2 ...request.Option) (*mediaconvert.ListQueuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueuesWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.ListQueuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueuesWithContext indicates an expected call of ListQueuesWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListQueuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuesWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListQueuesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockMediaConvertAPI) ListTagsForResource(arg0 *mediaconvert.ListTagsForResourceInput) (*mediaconvert.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*mediaconvert.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockMediaConvertAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockMediaConvertAPI) ListTagsForResourceRequest(arg0 *mediaconvert.ListTagsForResourceInput) (*request.Request, *mediaconvert.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockMediaConvertAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockMediaConvertAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *mediaconvert.ListTagsForResourceInput, arg2 ...request.Option) (*mediaconvert.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockMediaConvertAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockMediaConvertAPI) TagResource(arg0 *mediaconvert.TagResourceInput) (*mediaconvert.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*mediaconvert.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockMediaConvertAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMediaConvertAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockMediaConvertAPI) TagResourceRequest(arg0 *mediaconvert.TagResourceInput) (*request.Request, *mediaconvert.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockMediaConvertAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockMediaConvertAPI) TagResourceWithContext(arg0 context.Context, arg1 *mediaconvert.TagResourceInput, arg2 ...request.Option) (*mediaconvert.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockMediaConvertAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockMediaConvertAPI) UntagResource(arg0 *mediaconvert.UntagResourceInput) (*mediaconvert.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*mediaconvert.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockMediaConvertAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMediaConvertAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockMediaConvertAPI) UntagResourceRequest(arg0 *mediaconvert.UntagResourceInput) (*request.Request, *mediaconvert.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockMediaConvertAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockMediaConvertAPI) UntagResourceWithContext(arg0 context.Context, arg1 *mediaconvert.UntagResourceInput, arg2 ...request.Option) (*mediaconvert.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockMediaConvertAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateJobTemplate mocks base method.
func (m *MockMediaConvertAPI) UpdateJobTemplate(arg0 *mediaconvert.UpdateJobTemplateInput) (*mediaconvert.UpdateJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobTemplate", arg0)
	ret0, _ := ret[0].(*mediaconvert.UpdateJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobTemplate indicates an expected call of UpdateJobTemplate.
func (mr *MockMediaConvertAPIMockRecorder) UpdateJobTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobTemplate", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdateJobTemplate), arg0)
}

// UpdateJobTemplateRequest mocks base method.
func (m *MockMediaConvertAPI) UpdateJobTemplateRequest(arg0 *mediaconvert.UpdateJobTemplateInput) (*request.Request, *mediaconvert.UpdateJobTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.UpdateJobTemplateOutput)
	return ret0, ret1
}

// UpdateJobTemplateRequest indicates an expected call of UpdateJobTemplateRequest.
func (mr *MockMediaConvertAPIMockRecorder) UpdateJobTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobTemplateRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdateJobTemplateRequest), arg0)
}

// UpdateJobTemplateWithContext mocks base method.
func (m *MockMediaConvertAPI) UpdateJobTemplateWithContext(arg0 context.Context, arg1 *mediaconvert.UpdateJobTemplateInput, arg2 ...request.Option) (*mediaconvert.UpdateJobTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.UpdateJobTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobTemplateWithContext indicates an expected call of UpdateJobTemplateWithContext.
func (mr *MockMediaConvertAPIMockRecorder) UpdateJobTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobTemplateWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdateJobTemplateWithContext), varargs...)
}

// UpdatePreset mocks base method.
func (m *MockMediaConvertAPI) UpdatePreset(arg0 *mediaconvert.UpdatePresetInput) (*mediaconvert.UpdatePresetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreset", arg0)
	ret0, _ := ret[0].(*mediaconvert.UpdatePresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePreset indicates an expected call of UpdatePreset.
func (mr *MockMediaConvertAPIMockRecorder) UpdatePreset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreset", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdatePreset), arg0)
}

// UpdatePresetRequest mocks base method.
func (m *MockMediaConvertAPI) UpdatePresetRequest(arg0 *mediaconvert.UpdatePresetInput) (*request.Request, *mediaconvert.UpdatePresetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePresetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.UpdatePresetOutput)
	return ret0, ret1
}

// UpdatePresetRequest indicates an expected call of UpdatePresetRequest.
func (mr *MockMediaConvertAPIMockRecorder) UpdatePresetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePresetRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdatePresetRequest), arg0)
}

// UpdatePresetWithContext mocks base method.
func (m *MockMediaConvertAPI) UpdatePresetWithContext(arg0 context.Context, arg1 *mediaconvert.UpdatePresetInput, arg2 ...request.Option) (*mediaconvert.UpdatePresetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePresetWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.UpdatePresetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePresetWithContext indicates an expected call of UpdatePresetWithContext.
func (mr *MockMediaConvertAPIMockRecorder) UpdatePresetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePresetWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdatePresetWithContext), varargs...)
}

// UpdateQueue mocks base method.
func (m *MockMediaConvertAPI) UpdateQueue(arg0 *mediaconvert.UpdateQueueInput) (*mediaconvert.UpdateQueueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueue", arg0)
	ret0, _ := ret[0].(*mediaconvert.UpdateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueue indicates an expected call of UpdateQueue.
func (mr *MockMediaConvertAPIMockRecorder) UpdateQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueue", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdateQueue), arg0)
}

// UpdateQueueRequest mocks base method.
func (m *MockMediaConvertAPI) UpdateQueueRequest(arg0 *mediaconvert.UpdateQueueInput) (*request.Request, *mediaconvert.UpdateQueueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQueueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*mediaconvert.UpdateQueueOutput)
	return ret0, ret1
}

// UpdateQueueRequest indicates an expected call of UpdateQueueRequest.
func (mr *MockMediaConvertAPIMockRecorder) UpdateQueueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueRequest", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdateQueueRequest), arg0)
}

// UpdateQueueWithContext mocks base method.
func (m *MockMediaConvertAPI) UpdateQueueWithContext(arg0 context.Context, arg1 *mediaconvert.UpdateQueueInput, arg2 ...request.Option) (*mediaconvert.UpdateQueueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateQueueWithContext", varargs...)
	ret0, _ := ret[0].(*mediaconvert.UpdateQueueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQueueWithContext indicates an expected call of UpdateQueueWithContext.
func (mr *MockMediaConvertAPIMockRecorder) UpdateQueueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQueueWithContext", reflect.TypeOf((*MockMediaConvertAPI)(nil).UpdateQueueWithContext), varargs...)
}

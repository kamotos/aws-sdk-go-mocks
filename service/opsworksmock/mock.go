// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/opsworks/opsworksiface (interfaces: OpsWorksAPI)

// Package opsworksmock is a generated GoMock package.
package opsworksmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	opsworks "github.com/aws/aws-sdk-go/service/opsworks"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOpsWorksAPI is a mock of OpsWorksAPI interface
type MockOpsWorksAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOpsWorksAPIMockRecorder
}

// MockOpsWorksAPIMockRecorder is the mock recorder for MockOpsWorksAPI
type MockOpsWorksAPIMockRecorder struct {
	mock *MockOpsWorksAPI
}

// NewMockOpsWorksAPI creates a new mock instance
func NewMockOpsWorksAPI(ctrl *gomock.Controller) *MockOpsWorksAPI {
	mock := &MockOpsWorksAPI{ctrl: ctrl}
	mock.recorder = &MockOpsWorksAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpsWorksAPI) EXPECT() *MockOpsWorksAPIMockRecorder {
	return m.recorder
}

// AssignInstance mocks base method
func (m *MockOpsWorksAPI) AssignInstance(arg0 *opsworks.AssignInstanceInput) (*opsworks.AssignInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInstance", arg0)
	ret0, _ := ret[0].(*opsworks.AssignInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignInstance indicates an expected call of AssignInstance
func (mr *MockOpsWorksAPIMockRecorder) AssignInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssignInstance), arg0)
}

// AssignInstanceRequest mocks base method
func (m *MockOpsWorksAPI) AssignInstanceRequest(arg0 *opsworks.AssignInstanceInput) (*request.Request, *opsworks.AssignInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.AssignInstanceOutput)
	return ret0, ret1
}

// AssignInstanceRequest indicates an expected call of AssignInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) AssignInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssignInstanceRequest), arg0)
}

// AssignInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) AssignInstanceWithContext(arg0 context.Context, arg1 *opsworks.AssignInstanceInput, arg2 ...request.Option) (*opsworks.AssignInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.AssignInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignInstanceWithContext indicates an expected call of AssignInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) AssignInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssignInstanceWithContext), varargs...)
}

// AssignVolume mocks base method
func (m *MockOpsWorksAPI) AssignVolume(arg0 *opsworks.AssignVolumeInput) (*opsworks.AssignVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignVolume", arg0)
	ret0, _ := ret[0].(*opsworks.AssignVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignVolume indicates an expected call of AssignVolume
func (mr *MockOpsWorksAPIMockRecorder) AssignVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignVolume", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssignVolume), arg0)
}

// AssignVolumeRequest mocks base method
func (m *MockOpsWorksAPI) AssignVolumeRequest(arg0 *opsworks.AssignVolumeInput) (*request.Request, *opsworks.AssignVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.AssignVolumeOutput)
	return ret0, ret1
}

// AssignVolumeRequest indicates an expected call of AssignVolumeRequest
func (mr *MockOpsWorksAPIMockRecorder) AssignVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignVolumeRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssignVolumeRequest), arg0)
}

// AssignVolumeWithContext mocks base method
func (m *MockOpsWorksAPI) AssignVolumeWithContext(arg0 context.Context, arg1 *opsworks.AssignVolumeInput, arg2 ...request.Option) (*opsworks.AssignVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.AssignVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignVolumeWithContext indicates an expected call of AssignVolumeWithContext
func (mr *MockOpsWorksAPIMockRecorder) AssignVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignVolumeWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssignVolumeWithContext), varargs...)
}

// AssociateElasticIp mocks base method
func (m *MockOpsWorksAPI) AssociateElasticIp(arg0 *opsworks.AssociateElasticIpInput) (*opsworks.AssociateElasticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateElasticIp", arg0)
	ret0, _ := ret[0].(*opsworks.AssociateElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateElasticIp indicates an expected call of AssociateElasticIp
func (mr *MockOpsWorksAPIMockRecorder) AssociateElasticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateElasticIp", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssociateElasticIp), arg0)
}

// AssociateElasticIpRequest mocks base method
func (m *MockOpsWorksAPI) AssociateElasticIpRequest(arg0 *opsworks.AssociateElasticIpInput) (*request.Request, *opsworks.AssociateElasticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateElasticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.AssociateElasticIpOutput)
	return ret0, ret1
}

// AssociateElasticIpRequest indicates an expected call of AssociateElasticIpRequest
func (mr *MockOpsWorksAPIMockRecorder) AssociateElasticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateElasticIpRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssociateElasticIpRequest), arg0)
}

// AssociateElasticIpWithContext mocks base method
func (m *MockOpsWorksAPI) AssociateElasticIpWithContext(arg0 context.Context, arg1 *opsworks.AssociateElasticIpInput, arg2 ...request.Option) (*opsworks.AssociateElasticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateElasticIpWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.AssociateElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateElasticIpWithContext indicates an expected call of AssociateElasticIpWithContext
func (mr *MockOpsWorksAPIMockRecorder) AssociateElasticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateElasticIpWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).AssociateElasticIpWithContext), varargs...)
}

// AttachElasticLoadBalancer mocks base method
func (m *MockOpsWorksAPI) AttachElasticLoadBalancer(arg0 *opsworks.AttachElasticLoadBalancerInput) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachElasticLoadBalancer", arg0)
	ret0, _ := ret[0].(*opsworks.AttachElasticLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachElasticLoadBalancer indicates an expected call of AttachElasticLoadBalancer
func (mr *MockOpsWorksAPIMockRecorder) AttachElasticLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachElasticLoadBalancer", reflect.TypeOf((*MockOpsWorksAPI)(nil).AttachElasticLoadBalancer), arg0)
}

// AttachElasticLoadBalancerRequest mocks base method
func (m *MockOpsWorksAPI) AttachElasticLoadBalancerRequest(arg0 *opsworks.AttachElasticLoadBalancerInput) (*request.Request, *opsworks.AttachElasticLoadBalancerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachElasticLoadBalancerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.AttachElasticLoadBalancerOutput)
	return ret0, ret1
}

// AttachElasticLoadBalancerRequest indicates an expected call of AttachElasticLoadBalancerRequest
func (mr *MockOpsWorksAPIMockRecorder) AttachElasticLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachElasticLoadBalancerRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).AttachElasticLoadBalancerRequest), arg0)
}

// AttachElasticLoadBalancerWithContext mocks base method
func (m *MockOpsWorksAPI) AttachElasticLoadBalancerWithContext(arg0 context.Context, arg1 *opsworks.AttachElasticLoadBalancerInput, arg2 ...request.Option) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachElasticLoadBalancerWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.AttachElasticLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachElasticLoadBalancerWithContext indicates an expected call of AttachElasticLoadBalancerWithContext
func (mr *MockOpsWorksAPIMockRecorder) AttachElasticLoadBalancerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachElasticLoadBalancerWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).AttachElasticLoadBalancerWithContext), varargs...)
}

// CloneStack mocks base method
func (m *MockOpsWorksAPI) CloneStack(arg0 *opsworks.CloneStackInput) (*opsworks.CloneStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneStack", arg0)
	ret0, _ := ret[0].(*opsworks.CloneStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneStack indicates an expected call of CloneStack
func (mr *MockOpsWorksAPIMockRecorder) CloneStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneStack", reflect.TypeOf((*MockOpsWorksAPI)(nil).CloneStack), arg0)
}

// CloneStackRequest mocks base method
func (m *MockOpsWorksAPI) CloneStackRequest(arg0 *opsworks.CloneStackInput) (*request.Request, *opsworks.CloneStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.CloneStackOutput)
	return ret0, ret1
}

// CloneStackRequest indicates an expected call of CloneStackRequest
func (mr *MockOpsWorksAPIMockRecorder) CloneStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneStackRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).CloneStackRequest), arg0)
}

// CloneStackWithContext mocks base method
func (m *MockOpsWorksAPI) CloneStackWithContext(arg0 context.Context, arg1 *opsworks.CloneStackInput, arg2 ...request.Option) (*opsworks.CloneStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloneStackWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.CloneStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneStackWithContext indicates an expected call of CloneStackWithContext
func (mr *MockOpsWorksAPIMockRecorder) CloneStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneStackWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).CloneStackWithContext), varargs...)
}

// CreateApp mocks base method
func (m *MockOpsWorksAPI) CreateApp(arg0 *opsworks.CreateAppInput) (*opsworks.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", arg0)
	ret0, _ := ret[0].(*opsworks.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp
func (mr *MockOpsWorksAPIMockRecorder) CreateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateApp), arg0)
}

// CreateAppRequest mocks base method
func (m *MockOpsWorksAPI) CreateAppRequest(arg0 *opsworks.CreateAppInput) (*request.Request, *opsworks.CreateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.CreateAppOutput)
	return ret0, ret1
}

// CreateAppRequest indicates an expected call of CreateAppRequest
func (mr *MockOpsWorksAPIMockRecorder) CreateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateAppRequest), arg0)
}

// CreateAppWithContext mocks base method
func (m *MockOpsWorksAPI) CreateAppWithContext(arg0 context.Context, arg1 *opsworks.CreateAppInput, arg2 ...request.Option) (*opsworks.CreateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.CreateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppWithContext indicates an expected call of CreateAppWithContext
func (mr *MockOpsWorksAPIMockRecorder) CreateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateAppWithContext), varargs...)
}

// CreateDeployment mocks base method
func (m *MockOpsWorksAPI) CreateDeployment(arg0 *opsworks.CreateDeploymentInput) (*opsworks.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*opsworks.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockOpsWorksAPIMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateDeployment), arg0)
}

// CreateDeploymentRequest mocks base method
func (m *MockOpsWorksAPI) CreateDeploymentRequest(arg0 *opsworks.CreateDeploymentInput) (*request.Request, *opsworks.CreateDeploymentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.CreateDeploymentOutput)
	return ret0, ret1
}

// CreateDeploymentRequest indicates an expected call of CreateDeploymentRequest
func (mr *MockOpsWorksAPIMockRecorder) CreateDeploymentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateDeploymentRequest), arg0)
}

// CreateDeploymentWithContext mocks base method
func (m *MockOpsWorksAPI) CreateDeploymentWithContext(arg0 context.Context, arg1 *opsworks.CreateDeploymentInput, arg2 ...request.Option) (*opsworks.CreateDeploymentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.CreateDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentWithContext indicates an expected call of CreateDeploymentWithContext
func (mr *MockOpsWorksAPIMockRecorder) CreateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateDeploymentWithContext), varargs...)
}

// CreateInstance mocks base method
func (m *MockOpsWorksAPI) CreateInstance(arg0 *opsworks.CreateInstanceInput) (*opsworks.CreateInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(*opsworks.CreateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockOpsWorksAPIMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateInstance), arg0)
}

// CreateInstanceRequest mocks base method
func (m *MockOpsWorksAPI) CreateInstanceRequest(arg0 *opsworks.CreateInstanceInput) (*request.Request, *opsworks.CreateInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.CreateInstanceOutput)
	return ret0, ret1
}

// CreateInstanceRequest indicates an expected call of CreateInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) CreateInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateInstanceRequest), arg0)
}

// CreateInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) CreateInstanceWithContext(arg0 context.Context, arg1 *opsworks.CreateInstanceInput, arg2 ...request.Option) (*opsworks.CreateInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.CreateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceWithContext indicates an expected call of CreateInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) CreateInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateInstanceWithContext), varargs...)
}

// CreateLayer mocks base method
func (m *MockOpsWorksAPI) CreateLayer(arg0 *opsworks.CreateLayerInput) (*opsworks.CreateLayerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLayer", arg0)
	ret0, _ := ret[0].(*opsworks.CreateLayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLayer indicates an expected call of CreateLayer
func (mr *MockOpsWorksAPIMockRecorder) CreateLayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLayer", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateLayer), arg0)
}

// CreateLayerRequest mocks base method
func (m *MockOpsWorksAPI) CreateLayerRequest(arg0 *opsworks.CreateLayerInput) (*request.Request, *opsworks.CreateLayerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLayerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.CreateLayerOutput)
	return ret0, ret1
}

// CreateLayerRequest indicates an expected call of CreateLayerRequest
func (mr *MockOpsWorksAPIMockRecorder) CreateLayerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLayerRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateLayerRequest), arg0)
}

// CreateLayerWithContext mocks base method
func (m *MockOpsWorksAPI) CreateLayerWithContext(arg0 context.Context, arg1 *opsworks.CreateLayerInput, arg2 ...request.Option) (*opsworks.CreateLayerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLayerWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.CreateLayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLayerWithContext indicates an expected call of CreateLayerWithContext
func (mr *MockOpsWorksAPIMockRecorder) CreateLayerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLayerWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateLayerWithContext), varargs...)
}

// CreateStack mocks base method
func (m *MockOpsWorksAPI) CreateStack(arg0 *opsworks.CreateStackInput) (*opsworks.CreateStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStack", arg0)
	ret0, _ := ret[0].(*opsworks.CreateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStack indicates an expected call of CreateStack
func (mr *MockOpsWorksAPIMockRecorder) CreateStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStack", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateStack), arg0)
}

// CreateStackRequest mocks base method
func (m *MockOpsWorksAPI) CreateStackRequest(arg0 *opsworks.CreateStackInput) (*request.Request, *opsworks.CreateStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.CreateStackOutput)
	return ret0, ret1
}

// CreateStackRequest indicates an expected call of CreateStackRequest
func (mr *MockOpsWorksAPIMockRecorder) CreateStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateStackRequest), arg0)
}

// CreateStackWithContext mocks base method
func (m *MockOpsWorksAPI) CreateStackWithContext(arg0 context.Context, arg1 *opsworks.CreateStackInput, arg2 ...request.Option) (*opsworks.CreateStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStackWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.CreateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStackWithContext indicates an expected call of CreateStackWithContext
func (mr *MockOpsWorksAPIMockRecorder) CreateStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStackWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateStackWithContext), varargs...)
}

// CreateUserProfile mocks base method
func (m *MockOpsWorksAPI) CreateUserProfile(arg0 *opsworks.CreateUserProfileInput) (*opsworks.CreateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProfile", arg0)
	ret0, _ := ret[0].(*opsworks.CreateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProfile indicates an expected call of CreateUserProfile
func (mr *MockOpsWorksAPIMockRecorder) CreateUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfile", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateUserProfile), arg0)
}

// CreateUserProfileRequest mocks base method
func (m *MockOpsWorksAPI) CreateUserProfileRequest(arg0 *opsworks.CreateUserProfileInput) (*request.Request, *opsworks.CreateUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.CreateUserProfileOutput)
	return ret0, ret1
}

// CreateUserProfileRequest indicates an expected call of CreateUserProfileRequest
func (mr *MockOpsWorksAPIMockRecorder) CreateUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfileRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateUserProfileRequest), arg0)
}

// CreateUserProfileWithContext mocks base method
func (m *MockOpsWorksAPI) CreateUserProfileWithContext(arg0 context.Context, arg1 *opsworks.CreateUserProfileInput, arg2 ...request.Option) (*opsworks.CreateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.CreateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProfileWithContext indicates an expected call of CreateUserProfileWithContext
func (mr *MockOpsWorksAPIMockRecorder) CreateUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProfileWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).CreateUserProfileWithContext), varargs...)
}

// DeleteApp mocks base method
func (m *MockOpsWorksAPI) DeleteApp(arg0 *opsworks.DeleteAppInput) (*opsworks.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0)
	ret0, _ := ret[0].(*opsworks.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockOpsWorksAPIMockRecorder) DeleteApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteApp), arg0)
}

// DeleteAppRequest mocks base method
func (m *MockOpsWorksAPI) DeleteAppRequest(arg0 *opsworks.DeleteAppInput) (*request.Request, *opsworks.DeleteAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeleteAppOutput)
	return ret0, ret1
}

// DeleteAppRequest indicates an expected call of DeleteAppRequest
func (mr *MockOpsWorksAPIMockRecorder) DeleteAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteAppRequest), arg0)
}

// DeleteAppWithContext mocks base method
func (m *MockOpsWorksAPI) DeleteAppWithContext(arg0 context.Context, arg1 *opsworks.DeleteAppInput, arg2 ...request.Option) (*opsworks.DeleteAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeleteAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppWithContext indicates an expected call of DeleteAppWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeleteAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteAppWithContext), varargs...)
}

// DeleteInstance mocks base method
func (m *MockOpsWorksAPI) DeleteInstance(arg0 *opsworks.DeleteInstanceInput) (*opsworks.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(*opsworks.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockOpsWorksAPIMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteInstance), arg0)
}

// DeleteInstanceRequest mocks base method
func (m *MockOpsWorksAPI) DeleteInstanceRequest(arg0 *opsworks.DeleteInstanceInput) (*request.Request, *opsworks.DeleteInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeleteInstanceOutput)
	return ret0, ret1
}

// DeleteInstanceRequest indicates an expected call of DeleteInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) DeleteInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteInstanceRequest), arg0)
}

// DeleteInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) DeleteInstanceWithContext(arg0 context.Context, arg1 *opsworks.DeleteInstanceInput, arg2 ...request.Option) (*opsworks.DeleteInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeleteInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceWithContext indicates an expected call of DeleteInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeleteInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteInstanceWithContext), varargs...)
}

// DeleteLayer mocks base method
func (m *MockOpsWorksAPI) DeleteLayer(arg0 *opsworks.DeleteLayerInput) (*opsworks.DeleteLayerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLayer", arg0)
	ret0, _ := ret[0].(*opsworks.DeleteLayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLayer indicates an expected call of DeleteLayer
func (mr *MockOpsWorksAPIMockRecorder) DeleteLayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLayer", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteLayer), arg0)
}

// DeleteLayerRequest mocks base method
func (m *MockOpsWorksAPI) DeleteLayerRequest(arg0 *opsworks.DeleteLayerInput) (*request.Request, *opsworks.DeleteLayerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLayerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeleteLayerOutput)
	return ret0, ret1
}

// DeleteLayerRequest indicates an expected call of DeleteLayerRequest
func (mr *MockOpsWorksAPIMockRecorder) DeleteLayerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLayerRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteLayerRequest), arg0)
}

// DeleteLayerWithContext mocks base method
func (m *MockOpsWorksAPI) DeleteLayerWithContext(arg0 context.Context, arg1 *opsworks.DeleteLayerInput, arg2 ...request.Option) (*opsworks.DeleteLayerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLayerWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeleteLayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLayerWithContext indicates an expected call of DeleteLayerWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeleteLayerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLayerWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteLayerWithContext), varargs...)
}

// DeleteStack mocks base method
func (m *MockOpsWorksAPI) DeleteStack(arg0 *opsworks.DeleteStackInput) (*opsworks.DeleteStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStack", arg0)
	ret0, _ := ret[0].(*opsworks.DeleteStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStack indicates an expected call of DeleteStack
func (mr *MockOpsWorksAPIMockRecorder) DeleteStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStack", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteStack), arg0)
}

// DeleteStackRequest mocks base method
func (m *MockOpsWorksAPI) DeleteStackRequest(arg0 *opsworks.DeleteStackInput) (*request.Request, *opsworks.DeleteStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeleteStackOutput)
	return ret0, ret1
}

// DeleteStackRequest indicates an expected call of DeleteStackRequest
func (mr *MockOpsWorksAPIMockRecorder) DeleteStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteStackRequest), arg0)
}

// DeleteStackWithContext mocks base method
func (m *MockOpsWorksAPI) DeleteStackWithContext(arg0 context.Context, arg1 *opsworks.DeleteStackInput, arg2 ...request.Option) (*opsworks.DeleteStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStackWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeleteStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStackWithContext indicates an expected call of DeleteStackWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeleteStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStackWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteStackWithContext), varargs...)
}

// DeleteUserProfile mocks base method
func (m *MockOpsWorksAPI) DeleteUserProfile(arg0 *opsworks.DeleteUserProfileInput) (*opsworks.DeleteUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfile", arg0)
	ret0, _ := ret[0].(*opsworks.DeleteUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserProfile indicates an expected call of DeleteUserProfile
func (mr *MockOpsWorksAPIMockRecorder) DeleteUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfile", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteUserProfile), arg0)
}

// DeleteUserProfileRequest mocks base method
func (m *MockOpsWorksAPI) DeleteUserProfileRequest(arg0 *opsworks.DeleteUserProfileInput) (*request.Request, *opsworks.DeleteUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeleteUserProfileOutput)
	return ret0, ret1
}

// DeleteUserProfileRequest indicates an expected call of DeleteUserProfileRequest
func (mr *MockOpsWorksAPIMockRecorder) DeleteUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfileRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteUserProfileRequest), arg0)
}

// DeleteUserProfileWithContext mocks base method
func (m *MockOpsWorksAPI) DeleteUserProfileWithContext(arg0 context.Context, arg1 *opsworks.DeleteUserProfileInput, arg2 ...request.Option) (*opsworks.DeleteUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeleteUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserProfileWithContext indicates an expected call of DeleteUserProfileWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeleteUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProfileWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeleteUserProfileWithContext), varargs...)
}

// DeregisterEcsCluster mocks base method
func (m *MockOpsWorksAPI) DeregisterEcsCluster(arg0 *opsworks.DeregisterEcsClusterInput) (*opsworks.DeregisterEcsClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEcsCluster", arg0)
	ret0, _ := ret[0].(*opsworks.DeregisterEcsClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterEcsCluster indicates an expected call of DeregisterEcsCluster
func (mr *MockOpsWorksAPIMockRecorder) DeregisterEcsCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEcsCluster", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterEcsCluster), arg0)
}

// DeregisterEcsClusterRequest mocks base method
func (m *MockOpsWorksAPI) DeregisterEcsClusterRequest(arg0 *opsworks.DeregisterEcsClusterInput) (*request.Request, *opsworks.DeregisterEcsClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterEcsClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeregisterEcsClusterOutput)
	return ret0, ret1
}

// DeregisterEcsClusterRequest indicates an expected call of DeregisterEcsClusterRequest
func (mr *MockOpsWorksAPIMockRecorder) DeregisterEcsClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEcsClusterRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterEcsClusterRequest), arg0)
}

// DeregisterEcsClusterWithContext mocks base method
func (m *MockOpsWorksAPI) DeregisterEcsClusterWithContext(arg0 context.Context, arg1 *opsworks.DeregisterEcsClusterInput, arg2 ...request.Option) (*opsworks.DeregisterEcsClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterEcsClusterWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeregisterEcsClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterEcsClusterWithContext indicates an expected call of DeregisterEcsClusterWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeregisterEcsClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterEcsClusterWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterEcsClusterWithContext), varargs...)
}

// DeregisterElasticIp mocks base method
func (m *MockOpsWorksAPI) DeregisterElasticIp(arg0 *opsworks.DeregisterElasticIpInput) (*opsworks.DeregisterElasticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterElasticIp", arg0)
	ret0, _ := ret[0].(*opsworks.DeregisterElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterElasticIp indicates an expected call of DeregisterElasticIp
func (mr *MockOpsWorksAPIMockRecorder) DeregisterElasticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterElasticIp", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterElasticIp), arg0)
}

// DeregisterElasticIpRequest mocks base method
func (m *MockOpsWorksAPI) DeregisterElasticIpRequest(arg0 *opsworks.DeregisterElasticIpInput) (*request.Request, *opsworks.DeregisterElasticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterElasticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeregisterElasticIpOutput)
	return ret0, ret1
}

// DeregisterElasticIpRequest indicates an expected call of DeregisterElasticIpRequest
func (mr *MockOpsWorksAPIMockRecorder) DeregisterElasticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterElasticIpRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterElasticIpRequest), arg0)
}

// DeregisterElasticIpWithContext mocks base method
func (m *MockOpsWorksAPI) DeregisterElasticIpWithContext(arg0 context.Context, arg1 *opsworks.DeregisterElasticIpInput, arg2 ...request.Option) (*opsworks.DeregisterElasticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterElasticIpWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeregisterElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterElasticIpWithContext indicates an expected call of DeregisterElasticIpWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeregisterElasticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterElasticIpWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterElasticIpWithContext), varargs...)
}

// DeregisterInstance mocks base method
func (m *MockOpsWorksAPI) DeregisterInstance(arg0 *opsworks.DeregisterInstanceInput) (*opsworks.DeregisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstance", arg0)
	ret0, _ := ret[0].(*opsworks.DeregisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterInstance indicates an expected call of DeregisterInstance
func (mr *MockOpsWorksAPIMockRecorder) DeregisterInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterInstance), arg0)
}

// DeregisterInstanceRequest mocks base method
func (m *MockOpsWorksAPI) DeregisterInstanceRequest(arg0 *opsworks.DeregisterInstanceInput) (*request.Request, *opsworks.DeregisterInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeregisterInstanceOutput)
	return ret0, ret1
}

// DeregisterInstanceRequest indicates an expected call of DeregisterInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) DeregisterInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterInstanceRequest), arg0)
}

// DeregisterInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) DeregisterInstanceWithContext(arg0 context.Context, arg1 *opsworks.DeregisterInstanceInput, arg2 ...request.Option) (*opsworks.DeregisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeregisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterInstanceWithContext indicates an expected call of DeregisterInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeregisterInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterInstanceWithContext), varargs...)
}

// DeregisterRdsDbInstance mocks base method
func (m *MockOpsWorksAPI) DeregisterRdsDbInstance(arg0 *opsworks.DeregisterRdsDbInstanceInput) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterRdsDbInstance", arg0)
	ret0, _ := ret[0].(*opsworks.DeregisterRdsDbInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterRdsDbInstance indicates an expected call of DeregisterRdsDbInstance
func (mr *MockOpsWorksAPIMockRecorder) DeregisterRdsDbInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRdsDbInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterRdsDbInstance), arg0)
}

// DeregisterRdsDbInstanceRequest mocks base method
func (m *MockOpsWorksAPI) DeregisterRdsDbInstanceRequest(arg0 *opsworks.DeregisterRdsDbInstanceInput) (*request.Request, *opsworks.DeregisterRdsDbInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterRdsDbInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeregisterRdsDbInstanceOutput)
	return ret0, ret1
}

// DeregisterRdsDbInstanceRequest indicates an expected call of DeregisterRdsDbInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) DeregisterRdsDbInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRdsDbInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterRdsDbInstanceRequest), arg0)
}

// DeregisterRdsDbInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) DeregisterRdsDbInstanceWithContext(arg0 context.Context, arg1 *opsworks.DeregisterRdsDbInstanceInput, arg2 ...request.Option) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterRdsDbInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeregisterRdsDbInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterRdsDbInstanceWithContext indicates an expected call of DeregisterRdsDbInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeregisterRdsDbInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterRdsDbInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterRdsDbInstanceWithContext), varargs...)
}

// DeregisterVolume mocks base method
func (m *MockOpsWorksAPI) DeregisterVolume(arg0 *opsworks.DeregisterVolumeInput) (*opsworks.DeregisterVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterVolume", arg0)
	ret0, _ := ret[0].(*opsworks.DeregisterVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterVolume indicates an expected call of DeregisterVolume
func (mr *MockOpsWorksAPIMockRecorder) DeregisterVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterVolume", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterVolume), arg0)
}

// DeregisterVolumeRequest mocks base method
func (m *MockOpsWorksAPI) DeregisterVolumeRequest(arg0 *opsworks.DeregisterVolumeInput) (*request.Request, *opsworks.DeregisterVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DeregisterVolumeOutput)
	return ret0, ret1
}

// DeregisterVolumeRequest indicates an expected call of DeregisterVolumeRequest
func (mr *MockOpsWorksAPIMockRecorder) DeregisterVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterVolumeRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterVolumeRequest), arg0)
}

// DeregisterVolumeWithContext mocks base method
func (m *MockOpsWorksAPI) DeregisterVolumeWithContext(arg0 context.Context, arg1 *opsworks.DeregisterVolumeInput, arg2 ...request.Option) (*opsworks.DeregisterVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DeregisterVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterVolumeWithContext indicates an expected call of DeregisterVolumeWithContext
func (mr *MockOpsWorksAPIMockRecorder) DeregisterVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterVolumeWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DeregisterVolumeWithContext), varargs...)
}

// DescribeAgentVersions mocks base method
func (m *MockOpsWorksAPI) DescribeAgentVersions(arg0 *opsworks.DescribeAgentVersionsInput) (*opsworks.DescribeAgentVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAgentVersions", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeAgentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAgentVersions indicates an expected call of DescribeAgentVersions
func (mr *MockOpsWorksAPIMockRecorder) DescribeAgentVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAgentVersions", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeAgentVersions), arg0)
}

// DescribeAgentVersionsRequest mocks base method
func (m *MockOpsWorksAPI) DescribeAgentVersionsRequest(arg0 *opsworks.DescribeAgentVersionsInput) (*request.Request, *opsworks.DescribeAgentVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAgentVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeAgentVersionsOutput)
	return ret0, ret1
}

// DescribeAgentVersionsRequest indicates an expected call of DescribeAgentVersionsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeAgentVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAgentVersionsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeAgentVersionsRequest), arg0)
}

// DescribeAgentVersionsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeAgentVersionsWithContext(arg0 context.Context, arg1 *opsworks.DescribeAgentVersionsInput, arg2 ...request.Option) (*opsworks.DescribeAgentVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAgentVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeAgentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAgentVersionsWithContext indicates an expected call of DescribeAgentVersionsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeAgentVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAgentVersionsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeAgentVersionsWithContext), varargs...)
}

// DescribeApps mocks base method
func (m *MockOpsWorksAPI) DescribeApps(arg0 *opsworks.DescribeAppsInput) (*opsworks.DescribeAppsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeApps", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeApps indicates an expected call of DescribeApps
func (mr *MockOpsWorksAPIMockRecorder) DescribeApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeApps", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeApps), arg0)
}

// DescribeAppsRequest mocks base method
func (m *MockOpsWorksAPI) DescribeAppsRequest(arg0 *opsworks.DescribeAppsInput) (*request.Request, *opsworks.DescribeAppsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeAppsOutput)
	return ret0, ret1
}

// DescribeAppsRequest indicates an expected call of DescribeAppsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeAppsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeAppsRequest), arg0)
}

// DescribeAppsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeAppsWithContext(arg0 context.Context, arg1 *opsworks.DescribeAppsInput, arg2 ...request.Option) (*opsworks.DescribeAppsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeAppsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppsWithContext indicates an expected call of DescribeAppsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeAppsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeAppsWithContext), varargs...)
}

// DescribeCommands mocks base method
func (m *MockOpsWorksAPI) DescribeCommands(arg0 *opsworks.DescribeCommandsInput) (*opsworks.DescribeCommandsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCommands", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeCommandsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCommands indicates an expected call of DescribeCommands
func (mr *MockOpsWorksAPIMockRecorder) DescribeCommands(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCommands", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeCommands), arg0)
}

// DescribeCommandsRequest mocks base method
func (m *MockOpsWorksAPI) DescribeCommandsRequest(arg0 *opsworks.DescribeCommandsInput) (*request.Request, *opsworks.DescribeCommandsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCommandsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeCommandsOutput)
	return ret0, ret1
}

// DescribeCommandsRequest indicates an expected call of DescribeCommandsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeCommandsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCommandsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeCommandsRequest), arg0)
}

// DescribeCommandsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeCommandsWithContext(arg0 context.Context, arg1 *opsworks.DescribeCommandsInput, arg2 ...request.Option) (*opsworks.DescribeCommandsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCommandsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeCommandsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCommandsWithContext indicates an expected call of DescribeCommandsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeCommandsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCommandsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeCommandsWithContext), varargs...)
}

// DescribeDeployments mocks base method
func (m *MockOpsWorksAPI) DescribeDeployments(arg0 *opsworks.DescribeDeploymentsInput) (*opsworks.DescribeDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeployments", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeployments indicates an expected call of DescribeDeployments
func (mr *MockOpsWorksAPIMockRecorder) DescribeDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeployments", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeDeployments), arg0)
}

// DescribeDeploymentsRequest mocks base method
func (m *MockOpsWorksAPI) DescribeDeploymentsRequest(arg0 *opsworks.DescribeDeploymentsInput) (*request.Request, *opsworks.DescribeDeploymentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeploymentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeDeploymentsOutput)
	return ret0, ret1
}

// DescribeDeploymentsRequest indicates an expected call of DescribeDeploymentsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeDeploymentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeDeploymentsRequest), arg0)
}

// DescribeDeploymentsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeDeploymentsWithContext(arg0 context.Context, arg1 *opsworks.DescribeDeploymentsInput, arg2 ...request.Option) (*opsworks.DescribeDeploymentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeploymentsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeploymentsWithContext indicates an expected call of DescribeDeploymentsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeDeploymentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeploymentsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeDeploymentsWithContext), varargs...)
}

// DescribeEcsClusters mocks base method
func (m *MockOpsWorksAPI) DescribeEcsClusters(arg0 *opsworks.DescribeEcsClustersInput) (*opsworks.DescribeEcsClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEcsClusters", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeEcsClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEcsClusters indicates an expected call of DescribeEcsClusters
func (mr *MockOpsWorksAPIMockRecorder) DescribeEcsClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEcsClusters", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeEcsClusters), arg0)
}

// DescribeEcsClustersPages mocks base method
func (m *MockOpsWorksAPI) DescribeEcsClustersPages(arg0 *opsworks.DescribeEcsClustersInput, arg1 func(*opsworks.DescribeEcsClustersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEcsClustersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEcsClustersPages indicates an expected call of DescribeEcsClustersPages
func (mr *MockOpsWorksAPIMockRecorder) DescribeEcsClustersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEcsClustersPages", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeEcsClustersPages), arg0, arg1)
}

// DescribeEcsClustersPagesWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeEcsClustersPagesWithContext(arg0 context.Context, arg1 *opsworks.DescribeEcsClustersInput, arg2 func(*opsworks.DescribeEcsClustersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEcsClustersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEcsClustersPagesWithContext indicates an expected call of DescribeEcsClustersPagesWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeEcsClustersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEcsClustersPagesWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeEcsClustersPagesWithContext), varargs...)
}

// DescribeEcsClustersRequest mocks base method
func (m *MockOpsWorksAPI) DescribeEcsClustersRequest(arg0 *opsworks.DescribeEcsClustersInput) (*request.Request, *opsworks.DescribeEcsClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEcsClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeEcsClustersOutput)
	return ret0, ret1
}

// DescribeEcsClustersRequest indicates an expected call of DescribeEcsClustersRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeEcsClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEcsClustersRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeEcsClustersRequest), arg0)
}

// DescribeEcsClustersWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeEcsClustersWithContext(arg0 context.Context, arg1 *opsworks.DescribeEcsClustersInput, arg2 ...request.Option) (*opsworks.DescribeEcsClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEcsClustersWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeEcsClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEcsClustersWithContext indicates an expected call of DescribeEcsClustersWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeEcsClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEcsClustersWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeEcsClustersWithContext), varargs...)
}

// DescribeElasticIps mocks base method
func (m *MockOpsWorksAPI) DescribeElasticIps(arg0 *opsworks.DescribeElasticIpsInput) (*opsworks.DescribeElasticIpsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeElasticIps", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeElasticIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticIps indicates an expected call of DescribeElasticIps
func (mr *MockOpsWorksAPIMockRecorder) DescribeElasticIps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticIps", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeElasticIps), arg0)
}

// DescribeElasticIpsRequest mocks base method
func (m *MockOpsWorksAPI) DescribeElasticIpsRequest(arg0 *opsworks.DescribeElasticIpsInput) (*request.Request, *opsworks.DescribeElasticIpsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeElasticIpsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeElasticIpsOutput)
	return ret0, ret1
}

// DescribeElasticIpsRequest indicates an expected call of DescribeElasticIpsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeElasticIpsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticIpsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeElasticIpsRequest), arg0)
}

// DescribeElasticIpsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeElasticIpsWithContext(arg0 context.Context, arg1 *opsworks.DescribeElasticIpsInput, arg2 ...request.Option) (*opsworks.DescribeElasticIpsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeElasticIpsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeElasticIpsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticIpsWithContext indicates an expected call of DescribeElasticIpsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeElasticIpsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticIpsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeElasticIpsWithContext), varargs...)
}

// DescribeElasticLoadBalancers mocks base method
func (m *MockOpsWorksAPI) DescribeElasticLoadBalancers(arg0 *opsworks.DescribeElasticLoadBalancersInput) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeElasticLoadBalancers", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeElasticLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticLoadBalancers indicates an expected call of DescribeElasticLoadBalancers
func (mr *MockOpsWorksAPIMockRecorder) DescribeElasticLoadBalancers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticLoadBalancers", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeElasticLoadBalancers), arg0)
}

// DescribeElasticLoadBalancersRequest mocks base method
func (m *MockOpsWorksAPI) DescribeElasticLoadBalancersRequest(arg0 *opsworks.DescribeElasticLoadBalancersInput) (*request.Request, *opsworks.DescribeElasticLoadBalancersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeElasticLoadBalancersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeElasticLoadBalancersOutput)
	return ret0, ret1
}

// DescribeElasticLoadBalancersRequest indicates an expected call of DescribeElasticLoadBalancersRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeElasticLoadBalancersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticLoadBalancersRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeElasticLoadBalancersRequest), arg0)
}

// DescribeElasticLoadBalancersWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeElasticLoadBalancersWithContext(arg0 context.Context, arg1 *opsworks.DescribeElasticLoadBalancersInput, arg2 ...request.Option) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeElasticLoadBalancersWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeElasticLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticLoadBalancersWithContext indicates an expected call of DescribeElasticLoadBalancersWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeElasticLoadBalancersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticLoadBalancersWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeElasticLoadBalancersWithContext), varargs...)
}

// DescribeInstances mocks base method
func (m *MockOpsWorksAPI) DescribeInstances(arg0 *opsworks.DescribeInstancesInput) (*opsworks.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstances", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances
func (mr *MockOpsWorksAPIMockRecorder) DescribeInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeInstances), arg0)
}

// DescribeInstancesRequest mocks base method
func (m *MockOpsWorksAPI) DescribeInstancesRequest(arg0 *opsworks.DescribeInstancesInput) (*request.Request, *opsworks.DescribeInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeInstancesOutput)
	return ret0, ret1
}

// DescribeInstancesRequest indicates an expected call of DescribeInstancesRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancesRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeInstancesRequest), arg0)
}

// DescribeInstancesWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeInstancesWithContext(arg0 context.Context, arg1 *opsworks.DescribeInstancesInput, arg2 ...request.Option) (*opsworks.DescribeInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstancesWithContext indicates an expected call of DescribeInstancesWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancesWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeInstancesWithContext), varargs...)
}

// DescribeLayers mocks base method
func (m *MockOpsWorksAPI) DescribeLayers(arg0 *opsworks.DescribeLayersInput) (*opsworks.DescribeLayersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLayers", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeLayersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLayers indicates an expected call of DescribeLayers
func (mr *MockOpsWorksAPIMockRecorder) DescribeLayers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLayers", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeLayers), arg0)
}

// DescribeLayersRequest mocks base method
func (m *MockOpsWorksAPI) DescribeLayersRequest(arg0 *opsworks.DescribeLayersInput) (*request.Request, *opsworks.DescribeLayersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLayersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeLayersOutput)
	return ret0, ret1
}

// DescribeLayersRequest indicates an expected call of DescribeLayersRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeLayersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLayersRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeLayersRequest), arg0)
}

// DescribeLayersWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeLayersWithContext(arg0 context.Context, arg1 *opsworks.DescribeLayersInput, arg2 ...request.Option) (*opsworks.DescribeLayersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLayersWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeLayersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLayersWithContext indicates an expected call of DescribeLayersWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeLayersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLayersWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeLayersWithContext), varargs...)
}

// DescribeLoadBasedAutoScaling mocks base method
func (m *MockOpsWorksAPI) DescribeLoadBasedAutoScaling(arg0 *opsworks.DescribeLoadBasedAutoScalingInput) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoadBasedAutoScaling", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeLoadBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBasedAutoScaling indicates an expected call of DescribeLoadBasedAutoScaling
func (mr *MockOpsWorksAPIMockRecorder) DescribeLoadBasedAutoScaling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBasedAutoScaling", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeLoadBasedAutoScaling), arg0)
}

// DescribeLoadBasedAutoScalingRequest mocks base method
func (m *MockOpsWorksAPI) DescribeLoadBasedAutoScalingRequest(arg0 *opsworks.DescribeLoadBasedAutoScalingInput) (*request.Request, *opsworks.DescribeLoadBasedAutoScalingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoadBasedAutoScalingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeLoadBasedAutoScalingOutput)
	return ret0, ret1
}

// DescribeLoadBasedAutoScalingRequest indicates an expected call of DescribeLoadBasedAutoScalingRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeLoadBasedAutoScalingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBasedAutoScalingRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeLoadBasedAutoScalingRequest), arg0)
}

// DescribeLoadBasedAutoScalingWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeLoadBasedAutoScalingWithContext(arg0 context.Context, arg1 *opsworks.DescribeLoadBasedAutoScalingInput, arg2 ...request.Option) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBasedAutoScalingWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeLoadBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBasedAutoScalingWithContext indicates an expected call of DescribeLoadBasedAutoScalingWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeLoadBasedAutoScalingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBasedAutoScalingWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeLoadBasedAutoScalingWithContext), varargs...)
}

// DescribeMyUserProfile mocks base method
func (m *MockOpsWorksAPI) DescribeMyUserProfile(arg0 *opsworks.DescribeMyUserProfileInput) (*opsworks.DescribeMyUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMyUserProfile", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeMyUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMyUserProfile indicates an expected call of DescribeMyUserProfile
func (mr *MockOpsWorksAPIMockRecorder) DescribeMyUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMyUserProfile", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeMyUserProfile), arg0)
}

// DescribeMyUserProfileRequest mocks base method
func (m *MockOpsWorksAPI) DescribeMyUserProfileRequest(arg0 *opsworks.DescribeMyUserProfileInput) (*request.Request, *opsworks.DescribeMyUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeMyUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeMyUserProfileOutput)
	return ret0, ret1
}

// DescribeMyUserProfileRequest indicates an expected call of DescribeMyUserProfileRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeMyUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMyUserProfileRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeMyUserProfileRequest), arg0)
}

// DescribeMyUserProfileWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeMyUserProfileWithContext(arg0 context.Context, arg1 *opsworks.DescribeMyUserProfileInput, arg2 ...request.Option) (*opsworks.DescribeMyUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeMyUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeMyUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeMyUserProfileWithContext indicates an expected call of DescribeMyUserProfileWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeMyUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeMyUserProfileWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeMyUserProfileWithContext), varargs...)
}

// DescribeOperatingSystems mocks base method
func (m *MockOpsWorksAPI) DescribeOperatingSystems(arg0 *opsworks.DescribeOperatingSystemsInput) (*opsworks.DescribeOperatingSystemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOperatingSystems", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeOperatingSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOperatingSystems indicates an expected call of DescribeOperatingSystems
func (mr *MockOpsWorksAPIMockRecorder) DescribeOperatingSystems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOperatingSystems", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeOperatingSystems), arg0)
}

// DescribeOperatingSystemsRequest mocks base method
func (m *MockOpsWorksAPI) DescribeOperatingSystemsRequest(arg0 *opsworks.DescribeOperatingSystemsInput) (*request.Request, *opsworks.DescribeOperatingSystemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOperatingSystemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeOperatingSystemsOutput)
	return ret0, ret1
}

// DescribeOperatingSystemsRequest indicates an expected call of DescribeOperatingSystemsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeOperatingSystemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOperatingSystemsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeOperatingSystemsRequest), arg0)
}

// DescribeOperatingSystemsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeOperatingSystemsWithContext(arg0 context.Context, arg1 *opsworks.DescribeOperatingSystemsInput, arg2 ...request.Option) (*opsworks.DescribeOperatingSystemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOperatingSystemsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeOperatingSystemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOperatingSystemsWithContext indicates an expected call of DescribeOperatingSystemsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeOperatingSystemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOperatingSystemsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeOperatingSystemsWithContext), varargs...)
}

// DescribePermissions mocks base method
func (m *MockOpsWorksAPI) DescribePermissions(arg0 *opsworks.DescribePermissionsInput) (*opsworks.DescribePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePermissions", arg0)
	ret0, _ := ret[0].(*opsworks.DescribePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissions indicates an expected call of DescribePermissions
func (mr *MockOpsWorksAPIMockRecorder) DescribePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissions", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribePermissions), arg0)
}

// DescribePermissionsRequest mocks base method
func (m *MockOpsWorksAPI) DescribePermissionsRequest(arg0 *opsworks.DescribePermissionsInput) (*request.Request, *opsworks.DescribePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribePermissionsOutput)
	return ret0, ret1
}

// DescribePermissionsRequest indicates an expected call of DescribePermissionsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribePermissionsRequest), arg0)
}

// DescribePermissionsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribePermissionsWithContext(arg0 context.Context, arg1 *opsworks.DescribePermissionsInput, arg2 ...request.Option) (*opsworks.DescribePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePermissionsWithContext indicates an expected call of DescribePermissionsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePermissionsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribePermissionsWithContext), varargs...)
}

// DescribeRaidArrays mocks base method
func (m *MockOpsWorksAPI) DescribeRaidArrays(arg0 *opsworks.DescribeRaidArraysInput) (*opsworks.DescribeRaidArraysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRaidArrays", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeRaidArraysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRaidArrays indicates an expected call of DescribeRaidArrays
func (mr *MockOpsWorksAPIMockRecorder) DescribeRaidArrays(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRaidArrays", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeRaidArrays), arg0)
}

// DescribeRaidArraysRequest mocks base method
func (m *MockOpsWorksAPI) DescribeRaidArraysRequest(arg0 *opsworks.DescribeRaidArraysInput) (*request.Request, *opsworks.DescribeRaidArraysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRaidArraysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeRaidArraysOutput)
	return ret0, ret1
}

// DescribeRaidArraysRequest indicates an expected call of DescribeRaidArraysRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeRaidArraysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRaidArraysRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeRaidArraysRequest), arg0)
}

// DescribeRaidArraysWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeRaidArraysWithContext(arg0 context.Context, arg1 *opsworks.DescribeRaidArraysInput, arg2 ...request.Option) (*opsworks.DescribeRaidArraysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRaidArraysWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeRaidArraysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRaidArraysWithContext indicates an expected call of DescribeRaidArraysWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeRaidArraysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRaidArraysWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeRaidArraysWithContext), varargs...)
}

// DescribeRdsDbInstances mocks base method
func (m *MockOpsWorksAPI) DescribeRdsDbInstances(arg0 *opsworks.DescribeRdsDbInstancesInput) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRdsDbInstances", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeRdsDbInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRdsDbInstances indicates an expected call of DescribeRdsDbInstances
func (mr *MockOpsWorksAPIMockRecorder) DescribeRdsDbInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRdsDbInstances", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeRdsDbInstances), arg0)
}

// DescribeRdsDbInstancesRequest mocks base method
func (m *MockOpsWorksAPI) DescribeRdsDbInstancesRequest(arg0 *opsworks.DescribeRdsDbInstancesInput) (*request.Request, *opsworks.DescribeRdsDbInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRdsDbInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeRdsDbInstancesOutput)
	return ret0, ret1
}

// DescribeRdsDbInstancesRequest indicates an expected call of DescribeRdsDbInstancesRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeRdsDbInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRdsDbInstancesRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeRdsDbInstancesRequest), arg0)
}

// DescribeRdsDbInstancesWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeRdsDbInstancesWithContext(arg0 context.Context, arg1 *opsworks.DescribeRdsDbInstancesInput, arg2 ...request.Option) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRdsDbInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeRdsDbInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRdsDbInstancesWithContext indicates an expected call of DescribeRdsDbInstancesWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeRdsDbInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRdsDbInstancesWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeRdsDbInstancesWithContext), varargs...)
}

// DescribeServiceErrors mocks base method
func (m *MockOpsWorksAPI) DescribeServiceErrors(arg0 *opsworks.DescribeServiceErrorsInput) (*opsworks.DescribeServiceErrorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceErrors", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeServiceErrorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceErrors indicates an expected call of DescribeServiceErrors
func (mr *MockOpsWorksAPIMockRecorder) DescribeServiceErrors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceErrors", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeServiceErrors), arg0)
}

// DescribeServiceErrorsRequest mocks base method
func (m *MockOpsWorksAPI) DescribeServiceErrorsRequest(arg0 *opsworks.DescribeServiceErrorsInput) (*request.Request, *opsworks.DescribeServiceErrorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceErrorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeServiceErrorsOutput)
	return ret0, ret1
}

// DescribeServiceErrorsRequest indicates an expected call of DescribeServiceErrorsRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeServiceErrorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceErrorsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeServiceErrorsRequest), arg0)
}

// DescribeServiceErrorsWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeServiceErrorsWithContext(arg0 context.Context, arg1 *opsworks.DescribeServiceErrorsInput, arg2 ...request.Option) (*opsworks.DescribeServiceErrorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServiceErrorsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeServiceErrorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceErrorsWithContext indicates an expected call of DescribeServiceErrorsWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeServiceErrorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceErrorsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeServiceErrorsWithContext), varargs...)
}

// DescribeStackProvisioningParameters mocks base method
func (m *MockOpsWorksAPI) DescribeStackProvisioningParameters(arg0 *opsworks.DescribeStackProvisioningParametersInput) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStackProvisioningParameters", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeStackProvisioningParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackProvisioningParameters indicates an expected call of DescribeStackProvisioningParameters
func (mr *MockOpsWorksAPIMockRecorder) DescribeStackProvisioningParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackProvisioningParameters", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStackProvisioningParameters), arg0)
}

// DescribeStackProvisioningParametersRequest mocks base method
func (m *MockOpsWorksAPI) DescribeStackProvisioningParametersRequest(arg0 *opsworks.DescribeStackProvisioningParametersInput) (*request.Request, *opsworks.DescribeStackProvisioningParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStackProvisioningParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeStackProvisioningParametersOutput)
	return ret0, ret1
}

// DescribeStackProvisioningParametersRequest indicates an expected call of DescribeStackProvisioningParametersRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeStackProvisioningParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackProvisioningParametersRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStackProvisioningParametersRequest), arg0)
}

// DescribeStackProvisioningParametersWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeStackProvisioningParametersWithContext(arg0 context.Context, arg1 *opsworks.DescribeStackProvisioningParametersInput, arg2 ...request.Option) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackProvisioningParametersWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeStackProvisioningParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackProvisioningParametersWithContext indicates an expected call of DescribeStackProvisioningParametersWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeStackProvisioningParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackProvisioningParametersWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStackProvisioningParametersWithContext), varargs...)
}

// DescribeStackSummary mocks base method
func (m *MockOpsWorksAPI) DescribeStackSummary(arg0 *opsworks.DescribeStackSummaryInput) (*opsworks.DescribeStackSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStackSummary", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeStackSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackSummary indicates an expected call of DescribeStackSummary
func (mr *MockOpsWorksAPIMockRecorder) DescribeStackSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackSummary", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStackSummary), arg0)
}

// DescribeStackSummaryRequest mocks base method
func (m *MockOpsWorksAPI) DescribeStackSummaryRequest(arg0 *opsworks.DescribeStackSummaryInput) (*request.Request, *opsworks.DescribeStackSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStackSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeStackSummaryOutput)
	return ret0, ret1
}

// DescribeStackSummaryRequest indicates an expected call of DescribeStackSummaryRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeStackSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackSummaryRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStackSummaryRequest), arg0)
}

// DescribeStackSummaryWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeStackSummaryWithContext(arg0 context.Context, arg1 *opsworks.DescribeStackSummaryInput, arg2 ...request.Option) (*opsworks.DescribeStackSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStackSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeStackSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStackSummaryWithContext indicates an expected call of DescribeStackSummaryWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeStackSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStackSummaryWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStackSummaryWithContext), varargs...)
}

// DescribeStacks mocks base method
func (m *MockOpsWorksAPI) DescribeStacks(arg0 *opsworks.DescribeStacksInput) (*opsworks.DescribeStacksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStacks", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStacks indicates an expected call of DescribeStacks
func (mr *MockOpsWorksAPIMockRecorder) DescribeStacks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacks", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStacks), arg0)
}

// DescribeStacksRequest mocks base method
func (m *MockOpsWorksAPI) DescribeStacksRequest(arg0 *opsworks.DescribeStacksInput) (*request.Request, *opsworks.DescribeStacksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStacksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeStacksOutput)
	return ret0, ret1
}

// DescribeStacksRequest indicates an expected call of DescribeStacksRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeStacksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacksRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStacksRequest), arg0)
}

// DescribeStacksWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeStacksWithContext(arg0 context.Context, arg1 *opsworks.DescribeStacksInput, arg2 ...request.Option) (*opsworks.DescribeStacksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStacksWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeStacksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStacksWithContext indicates an expected call of DescribeStacksWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeStacksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStacksWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeStacksWithContext), varargs...)
}

// DescribeTimeBasedAutoScaling mocks base method
func (m *MockOpsWorksAPI) DescribeTimeBasedAutoScaling(arg0 *opsworks.DescribeTimeBasedAutoScalingInput) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTimeBasedAutoScaling", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeTimeBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTimeBasedAutoScaling indicates an expected call of DescribeTimeBasedAutoScaling
func (mr *MockOpsWorksAPIMockRecorder) DescribeTimeBasedAutoScaling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTimeBasedAutoScaling", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeTimeBasedAutoScaling), arg0)
}

// DescribeTimeBasedAutoScalingRequest mocks base method
func (m *MockOpsWorksAPI) DescribeTimeBasedAutoScalingRequest(arg0 *opsworks.DescribeTimeBasedAutoScalingInput) (*request.Request, *opsworks.DescribeTimeBasedAutoScalingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTimeBasedAutoScalingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeTimeBasedAutoScalingOutput)
	return ret0, ret1
}

// DescribeTimeBasedAutoScalingRequest indicates an expected call of DescribeTimeBasedAutoScalingRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeTimeBasedAutoScalingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTimeBasedAutoScalingRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeTimeBasedAutoScalingRequest), arg0)
}

// DescribeTimeBasedAutoScalingWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeTimeBasedAutoScalingWithContext(arg0 context.Context, arg1 *opsworks.DescribeTimeBasedAutoScalingInput, arg2 ...request.Option) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTimeBasedAutoScalingWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeTimeBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTimeBasedAutoScalingWithContext indicates an expected call of DescribeTimeBasedAutoScalingWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeTimeBasedAutoScalingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTimeBasedAutoScalingWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeTimeBasedAutoScalingWithContext), varargs...)
}

// DescribeUserProfiles mocks base method
func (m *MockOpsWorksAPI) DescribeUserProfiles(arg0 *opsworks.DescribeUserProfilesInput) (*opsworks.DescribeUserProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserProfiles", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeUserProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserProfiles indicates an expected call of DescribeUserProfiles
func (mr *MockOpsWorksAPIMockRecorder) DescribeUserProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserProfiles", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeUserProfiles), arg0)
}

// DescribeUserProfilesRequest mocks base method
func (m *MockOpsWorksAPI) DescribeUserProfilesRequest(arg0 *opsworks.DescribeUserProfilesInput) (*request.Request, *opsworks.DescribeUserProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUserProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeUserProfilesOutput)
	return ret0, ret1
}

// DescribeUserProfilesRequest indicates an expected call of DescribeUserProfilesRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeUserProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserProfilesRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeUserProfilesRequest), arg0)
}

// DescribeUserProfilesWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeUserProfilesWithContext(arg0 context.Context, arg1 *opsworks.DescribeUserProfilesInput, arg2 ...request.Option) (*opsworks.DescribeUserProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUserProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeUserProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUserProfilesWithContext indicates an expected call of DescribeUserProfilesWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeUserProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUserProfilesWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeUserProfilesWithContext), varargs...)
}

// DescribeVolumes mocks base method
func (m *MockOpsWorksAPI) DescribeVolumes(arg0 *opsworks.DescribeVolumesInput) (*opsworks.DescribeVolumesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVolumes", arg0)
	ret0, _ := ret[0].(*opsworks.DescribeVolumesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumes indicates an expected call of DescribeVolumes
func (mr *MockOpsWorksAPIMockRecorder) DescribeVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumes", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeVolumes), arg0)
}

// DescribeVolumesRequest mocks base method
func (m *MockOpsWorksAPI) DescribeVolumesRequest(arg0 *opsworks.DescribeVolumesInput) (*request.Request, *opsworks.DescribeVolumesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVolumesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DescribeVolumesOutput)
	return ret0, ret1
}

// DescribeVolumesRequest indicates an expected call of DescribeVolumesRequest
func (mr *MockOpsWorksAPIMockRecorder) DescribeVolumesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeVolumesRequest), arg0)
}

// DescribeVolumesWithContext mocks base method
func (m *MockOpsWorksAPI) DescribeVolumesWithContext(arg0 context.Context, arg1 *opsworks.DescribeVolumesInput, arg2 ...request.Option) (*opsworks.DescribeVolumesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVolumesWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DescribeVolumesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVolumesWithContext indicates an expected call of DescribeVolumesWithContext
func (mr *MockOpsWorksAPIMockRecorder) DescribeVolumesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVolumesWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DescribeVolumesWithContext), varargs...)
}

// DetachElasticLoadBalancer mocks base method
func (m *MockOpsWorksAPI) DetachElasticLoadBalancer(arg0 *opsworks.DetachElasticLoadBalancerInput) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachElasticLoadBalancer", arg0)
	ret0, _ := ret[0].(*opsworks.DetachElasticLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachElasticLoadBalancer indicates an expected call of DetachElasticLoadBalancer
func (mr *MockOpsWorksAPIMockRecorder) DetachElasticLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachElasticLoadBalancer", reflect.TypeOf((*MockOpsWorksAPI)(nil).DetachElasticLoadBalancer), arg0)
}

// DetachElasticLoadBalancerRequest mocks base method
func (m *MockOpsWorksAPI) DetachElasticLoadBalancerRequest(arg0 *opsworks.DetachElasticLoadBalancerInput) (*request.Request, *opsworks.DetachElasticLoadBalancerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachElasticLoadBalancerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DetachElasticLoadBalancerOutput)
	return ret0, ret1
}

// DetachElasticLoadBalancerRequest indicates an expected call of DetachElasticLoadBalancerRequest
func (mr *MockOpsWorksAPIMockRecorder) DetachElasticLoadBalancerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachElasticLoadBalancerRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DetachElasticLoadBalancerRequest), arg0)
}

// DetachElasticLoadBalancerWithContext mocks base method
func (m *MockOpsWorksAPI) DetachElasticLoadBalancerWithContext(arg0 context.Context, arg1 *opsworks.DetachElasticLoadBalancerInput, arg2 ...request.Option) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachElasticLoadBalancerWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DetachElasticLoadBalancerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachElasticLoadBalancerWithContext indicates an expected call of DetachElasticLoadBalancerWithContext
func (mr *MockOpsWorksAPIMockRecorder) DetachElasticLoadBalancerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachElasticLoadBalancerWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DetachElasticLoadBalancerWithContext), varargs...)
}

// DisassociateElasticIp mocks base method
func (m *MockOpsWorksAPI) DisassociateElasticIp(arg0 *opsworks.DisassociateElasticIpInput) (*opsworks.DisassociateElasticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateElasticIp", arg0)
	ret0, _ := ret[0].(*opsworks.DisassociateElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateElasticIp indicates an expected call of DisassociateElasticIp
func (mr *MockOpsWorksAPIMockRecorder) DisassociateElasticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateElasticIp", reflect.TypeOf((*MockOpsWorksAPI)(nil).DisassociateElasticIp), arg0)
}

// DisassociateElasticIpRequest mocks base method
func (m *MockOpsWorksAPI) DisassociateElasticIpRequest(arg0 *opsworks.DisassociateElasticIpInput) (*request.Request, *opsworks.DisassociateElasticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateElasticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.DisassociateElasticIpOutput)
	return ret0, ret1
}

// DisassociateElasticIpRequest indicates an expected call of DisassociateElasticIpRequest
func (mr *MockOpsWorksAPIMockRecorder) DisassociateElasticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateElasticIpRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).DisassociateElasticIpRequest), arg0)
}

// DisassociateElasticIpWithContext mocks base method
func (m *MockOpsWorksAPI) DisassociateElasticIpWithContext(arg0 context.Context, arg1 *opsworks.DisassociateElasticIpInput, arg2 ...request.Option) (*opsworks.DisassociateElasticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateElasticIpWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.DisassociateElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateElasticIpWithContext indicates an expected call of DisassociateElasticIpWithContext
func (mr *MockOpsWorksAPIMockRecorder) DisassociateElasticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateElasticIpWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).DisassociateElasticIpWithContext), varargs...)
}

// GetHostnameSuggestion mocks base method
func (m *MockOpsWorksAPI) GetHostnameSuggestion(arg0 *opsworks.GetHostnameSuggestionInput) (*opsworks.GetHostnameSuggestionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostnameSuggestion", arg0)
	ret0, _ := ret[0].(*opsworks.GetHostnameSuggestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostnameSuggestion indicates an expected call of GetHostnameSuggestion
func (mr *MockOpsWorksAPIMockRecorder) GetHostnameSuggestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostnameSuggestion", reflect.TypeOf((*MockOpsWorksAPI)(nil).GetHostnameSuggestion), arg0)
}

// GetHostnameSuggestionRequest mocks base method
func (m *MockOpsWorksAPI) GetHostnameSuggestionRequest(arg0 *opsworks.GetHostnameSuggestionInput) (*request.Request, *opsworks.GetHostnameSuggestionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostnameSuggestionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.GetHostnameSuggestionOutput)
	return ret0, ret1
}

// GetHostnameSuggestionRequest indicates an expected call of GetHostnameSuggestionRequest
func (mr *MockOpsWorksAPIMockRecorder) GetHostnameSuggestionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostnameSuggestionRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).GetHostnameSuggestionRequest), arg0)
}

// GetHostnameSuggestionWithContext mocks base method
func (m *MockOpsWorksAPI) GetHostnameSuggestionWithContext(arg0 context.Context, arg1 *opsworks.GetHostnameSuggestionInput, arg2 ...request.Option) (*opsworks.GetHostnameSuggestionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHostnameSuggestionWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.GetHostnameSuggestionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostnameSuggestionWithContext indicates an expected call of GetHostnameSuggestionWithContext
func (mr *MockOpsWorksAPIMockRecorder) GetHostnameSuggestionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostnameSuggestionWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).GetHostnameSuggestionWithContext), varargs...)
}

// GrantAccess mocks base method
func (m *MockOpsWorksAPI) GrantAccess(arg0 *opsworks.GrantAccessInput) (*opsworks.GrantAccessOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccess", arg0)
	ret0, _ := ret[0].(*opsworks.GrantAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAccess indicates an expected call of GrantAccess
func (mr *MockOpsWorksAPIMockRecorder) GrantAccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccess", reflect.TypeOf((*MockOpsWorksAPI)(nil).GrantAccess), arg0)
}

// GrantAccessRequest mocks base method
func (m *MockOpsWorksAPI) GrantAccessRequest(arg0 *opsworks.GrantAccessInput) (*request.Request, *opsworks.GrantAccessOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccessRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.GrantAccessOutput)
	return ret0, ret1
}

// GrantAccessRequest indicates an expected call of GrantAccessRequest
func (mr *MockOpsWorksAPIMockRecorder) GrantAccessRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccessRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).GrantAccessRequest), arg0)
}

// GrantAccessWithContext mocks base method
func (m *MockOpsWorksAPI) GrantAccessWithContext(arg0 context.Context, arg1 *opsworks.GrantAccessInput, arg2 ...request.Option) (*opsworks.GrantAccessOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantAccessWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.GrantAccessOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAccessWithContext indicates an expected call of GrantAccessWithContext
func (mr *MockOpsWorksAPIMockRecorder) GrantAccessWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccessWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).GrantAccessWithContext), varargs...)
}

// ListTags mocks base method
func (m *MockOpsWorksAPI) ListTags(arg0 *opsworks.ListTagsInput) (*opsworks.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*opsworks.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockOpsWorksAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockOpsWorksAPI)(nil).ListTags), arg0)
}

// ListTagsRequest mocks base method
func (m *MockOpsWorksAPI) ListTagsRequest(arg0 *opsworks.ListTagsInput) (*request.Request, *opsworks.ListTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest
func (mr *MockOpsWorksAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method
func (m *MockOpsWorksAPI) ListTagsWithContext(arg0 context.Context, arg1 *opsworks.ListTagsInput, arg2 ...request.Option) (*opsworks.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext
func (mr *MockOpsWorksAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).ListTagsWithContext), varargs...)
}

// RebootInstance mocks base method
func (m *MockOpsWorksAPI) RebootInstance(arg0 *opsworks.RebootInstanceInput) (*opsworks.RebootInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootInstance", arg0)
	ret0, _ := ret[0].(*opsworks.RebootInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootInstance indicates an expected call of RebootInstance
func (mr *MockOpsWorksAPIMockRecorder) RebootInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).RebootInstance), arg0)
}

// RebootInstanceRequest mocks base method
func (m *MockOpsWorksAPI) RebootInstanceRequest(arg0 *opsworks.RebootInstanceInput) (*request.Request, *opsworks.RebootInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.RebootInstanceOutput)
	return ret0, ret1
}

// RebootInstanceRequest indicates an expected call of RebootInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) RebootInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).RebootInstanceRequest), arg0)
}

// RebootInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) RebootInstanceWithContext(arg0 context.Context, arg1 *opsworks.RebootInstanceInput, arg2 ...request.Option) (*opsworks.RebootInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.RebootInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootInstanceWithContext indicates an expected call of RebootInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) RebootInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).RebootInstanceWithContext), varargs...)
}

// RegisterEcsCluster mocks base method
func (m *MockOpsWorksAPI) RegisterEcsCluster(arg0 *opsworks.RegisterEcsClusterInput) (*opsworks.RegisterEcsClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEcsCluster", arg0)
	ret0, _ := ret[0].(*opsworks.RegisterEcsClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEcsCluster indicates an expected call of RegisterEcsCluster
func (mr *MockOpsWorksAPIMockRecorder) RegisterEcsCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEcsCluster", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterEcsCluster), arg0)
}

// RegisterEcsClusterRequest mocks base method
func (m *MockOpsWorksAPI) RegisterEcsClusterRequest(arg0 *opsworks.RegisterEcsClusterInput) (*request.Request, *opsworks.RegisterEcsClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEcsClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.RegisterEcsClusterOutput)
	return ret0, ret1
}

// RegisterEcsClusterRequest indicates an expected call of RegisterEcsClusterRequest
func (mr *MockOpsWorksAPIMockRecorder) RegisterEcsClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEcsClusterRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterEcsClusterRequest), arg0)
}

// RegisterEcsClusterWithContext mocks base method
func (m *MockOpsWorksAPI) RegisterEcsClusterWithContext(arg0 context.Context, arg1 *opsworks.RegisterEcsClusterInput, arg2 ...request.Option) (*opsworks.RegisterEcsClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterEcsClusterWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.RegisterEcsClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEcsClusterWithContext indicates an expected call of RegisterEcsClusterWithContext
func (mr *MockOpsWorksAPIMockRecorder) RegisterEcsClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEcsClusterWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterEcsClusterWithContext), varargs...)
}

// RegisterElasticIp mocks base method
func (m *MockOpsWorksAPI) RegisterElasticIp(arg0 *opsworks.RegisterElasticIpInput) (*opsworks.RegisterElasticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterElasticIp", arg0)
	ret0, _ := ret[0].(*opsworks.RegisterElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterElasticIp indicates an expected call of RegisterElasticIp
func (mr *MockOpsWorksAPIMockRecorder) RegisterElasticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterElasticIp", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterElasticIp), arg0)
}

// RegisterElasticIpRequest mocks base method
func (m *MockOpsWorksAPI) RegisterElasticIpRequest(arg0 *opsworks.RegisterElasticIpInput) (*request.Request, *opsworks.RegisterElasticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterElasticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.RegisterElasticIpOutput)
	return ret0, ret1
}

// RegisterElasticIpRequest indicates an expected call of RegisterElasticIpRequest
func (mr *MockOpsWorksAPIMockRecorder) RegisterElasticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterElasticIpRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterElasticIpRequest), arg0)
}

// RegisterElasticIpWithContext mocks base method
func (m *MockOpsWorksAPI) RegisterElasticIpWithContext(arg0 context.Context, arg1 *opsworks.RegisterElasticIpInput, arg2 ...request.Option) (*opsworks.RegisterElasticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterElasticIpWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.RegisterElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterElasticIpWithContext indicates an expected call of RegisterElasticIpWithContext
func (mr *MockOpsWorksAPIMockRecorder) RegisterElasticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterElasticIpWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterElasticIpWithContext), varargs...)
}

// RegisterInstance mocks base method
func (m *MockOpsWorksAPI) RegisterInstance(arg0 *opsworks.RegisterInstanceInput) (*opsworks.RegisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstance", arg0)
	ret0, _ := ret[0].(*opsworks.RegisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInstance indicates an expected call of RegisterInstance
func (mr *MockOpsWorksAPIMockRecorder) RegisterInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterInstance), arg0)
}

// RegisterInstanceRequest mocks base method
func (m *MockOpsWorksAPI) RegisterInstanceRequest(arg0 *opsworks.RegisterInstanceInput) (*request.Request, *opsworks.RegisterInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.RegisterInstanceOutput)
	return ret0, ret1
}

// RegisterInstanceRequest indicates an expected call of RegisterInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) RegisterInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterInstanceRequest), arg0)
}

// RegisterInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) RegisterInstanceWithContext(arg0 context.Context, arg1 *opsworks.RegisterInstanceInput, arg2 ...request.Option) (*opsworks.RegisterInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.RegisterInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInstanceWithContext indicates an expected call of RegisterInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) RegisterInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterInstanceWithContext), varargs...)
}

// RegisterRdsDbInstance mocks base method
func (m *MockOpsWorksAPI) RegisterRdsDbInstance(arg0 *opsworks.RegisterRdsDbInstanceInput) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRdsDbInstance", arg0)
	ret0, _ := ret[0].(*opsworks.RegisterRdsDbInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRdsDbInstance indicates an expected call of RegisterRdsDbInstance
func (mr *MockOpsWorksAPIMockRecorder) RegisterRdsDbInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRdsDbInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterRdsDbInstance), arg0)
}

// RegisterRdsDbInstanceRequest mocks base method
func (m *MockOpsWorksAPI) RegisterRdsDbInstanceRequest(arg0 *opsworks.RegisterRdsDbInstanceInput) (*request.Request, *opsworks.RegisterRdsDbInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRdsDbInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.RegisterRdsDbInstanceOutput)
	return ret0, ret1
}

// RegisterRdsDbInstanceRequest indicates an expected call of RegisterRdsDbInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) RegisterRdsDbInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRdsDbInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterRdsDbInstanceRequest), arg0)
}

// RegisterRdsDbInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) RegisterRdsDbInstanceWithContext(arg0 context.Context, arg1 *opsworks.RegisterRdsDbInstanceInput, arg2 ...request.Option) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterRdsDbInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.RegisterRdsDbInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRdsDbInstanceWithContext indicates an expected call of RegisterRdsDbInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) RegisterRdsDbInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRdsDbInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterRdsDbInstanceWithContext), varargs...)
}

// RegisterVolume mocks base method
func (m *MockOpsWorksAPI) RegisterVolume(arg0 *opsworks.RegisterVolumeInput) (*opsworks.RegisterVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterVolume", arg0)
	ret0, _ := ret[0].(*opsworks.RegisterVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterVolume indicates an expected call of RegisterVolume
func (mr *MockOpsWorksAPIMockRecorder) RegisterVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVolume", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterVolume), arg0)
}

// RegisterVolumeRequest mocks base method
func (m *MockOpsWorksAPI) RegisterVolumeRequest(arg0 *opsworks.RegisterVolumeInput) (*request.Request, *opsworks.RegisterVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.RegisterVolumeOutput)
	return ret0, ret1
}

// RegisterVolumeRequest indicates an expected call of RegisterVolumeRequest
func (mr *MockOpsWorksAPIMockRecorder) RegisterVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVolumeRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterVolumeRequest), arg0)
}

// RegisterVolumeWithContext mocks base method
func (m *MockOpsWorksAPI) RegisterVolumeWithContext(arg0 context.Context, arg1 *opsworks.RegisterVolumeInput, arg2 ...request.Option) (*opsworks.RegisterVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.RegisterVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterVolumeWithContext indicates an expected call of RegisterVolumeWithContext
func (mr *MockOpsWorksAPIMockRecorder) RegisterVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVolumeWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).RegisterVolumeWithContext), varargs...)
}

// SetLoadBasedAutoScaling mocks base method
func (m *MockOpsWorksAPI) SetLoadBasedAutoScaling(arg0 *opsworks.SetLoadBasedAutoScalingInput) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoadBasedAutoScaling", arg0)
	ret0, _ := ret[0].(*opsworks.SetLoadBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLoadBasedAutoScaling indicates an expected call of SetLoadBasedAutoScaling
func (mr *MockOpsWorksAPIMockRecorder) SetLoadBasedAutoScaling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoadBasedAutoScaling", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetLoadBasedAutoScaling), arg0)
}

// SetLoadBasedAutoScalingRequest mocks base method
func (m *MockOpsWorksAPI) SetLoadBasedAutoScalingRequest(arg0 *opsworks.SetLoadBasedAutoScalingInput) (*request.Request, *opsworks.SetLoadBasedAutoScalingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLoadBasedAutoScalingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.SetLoadBasedAutoScalingOutput)
	return ret0, ret1
}

// SetLoadBasedAutoScalingRequest indicates an expected call of SetLoadBasedAutoScalingRequest
func (mr *MockOpsWorksAPIMockRecorder) SetLoadBasedAutoScalingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoadBasedAutoScalingRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetLoadBasedAutoScalingRequest), arg0)
}

// SetLoadBasedAutoScalingWithContext mocks base method
func (m *MockOpsWorksAPI) SetLoadBasedAutoScalingWithContext(arg0 context.Context, arg1 *opsworks.SetLoadBasedAutoScalingInput, arg2 ...request.Option) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLoadBasedAutoScalingWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.SetLoadBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLoadBasedAutoScalingWithContext indicates an expected call of SetLoadBasedAutoScalingWithContext
func (mr *MockOpsWorksAPIMockRecorder) SetLoadBasedAutoScalingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoadBasedAutoScalingWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetLoadBasedAutoScalingWithContext), varargs...)
}

// SetPermission mocks base method
func (m *MockOpsWorksAPI) SetPermission(arg0 *opsworks.SetPermissionInput) (*opsworks.SetPermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPermission", arg0)
	ret0, _ := ret[0].(*opsworks.SetPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPermission indicates an expected call of SetPermission
func (mr *MockOpsWorksAPIMockRecorder) SetPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermission", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetPermission), arg0)
}

// SetPermissionRequest mocks base method
func (m *MockOpsWorksAPI) SetPermissionRequest(arg0 *opsworks.SetPermissionInput) (*request.Request, *opsworks.SetPermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.SetPermissionOutput)
	return ret0, ret1
}

// SetPermissionRequest indicates an expected call of SetPermissionRequest
func (mr *MockOpsWorksAPIMockRecorder) SetPermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermissionRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetPermissionRequest), arg0)
}

// SetPermissionWithContext mocks base method
func (m *MockOpsWorksAPI) SetPermissionWithContext(arg0 context.Context, arg1 *opsworks.SetPermissionInput, arg2 ...request.Option) (*opsworks.SetPermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPermissionWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.SetPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPermissionWithContext indicates an expected call of SetPermissionWithContext
func (mr *MockOpsWorksAPIMockRecorder) SetPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermissionWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetPermissionWithContext), varargs...)
}

// SetTimeBasedAutoScaling mocks base method
func (m *MockOpsWorksAPI) SetTimeBasedAutoScaling(arg0 *opsworks.SetTimeBasedAutoScalingInput) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeBasedAutoScaling", arg0)
	ret0, _ := ret[0].(*opsworks.SetTimeBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTimeBasedAutoScaling indicates an expected call of SetTimeBasedAutoScaling
func (mr *MockOpsWorksAPIMockRecorder) SetTimeBasedAutoScaling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeBasedAutoScaling", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetTimeBasedAutoScaling), arg0)
}

// SetTimeBasedAutoScalingRequest mocks base method
func (m *MockOpsWorksAPI) SetTimeBasedAutoScalingRequest(arg0 *opsworks.SetTimeBasedAutoScalingInput) (*request.Request, *opsworks.SetTimeBasedAutoScalingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimeBasedAutoScalingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.SetTimeBasedAutoScalingOutput)
	return ret0, ret1
}

// SetTimeBasedAutoScalingRequest indicates an expected call of SetTimeBasedAutoScalingRequest
func (mr *MockOpsWorksAPIMockRecorder) SetTimeBasedAutoScalingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeBasedAutoScalingRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetTimeBasedAutoScalingRequest), arg0)
}

// SetTimeBasedAutoScalingWithContext mocks base method
func (m *MockOpsWorksAPI) SetTimeBasedAutoScalingWithContext(arg0 context.Context, arg1 *opsworks.SetTimeBasedAutoScalingInput, arg2 ...request.Option) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTimeBasedAutoScalingWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.SetTimeBasedAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTimeBasedAutoScalingWithContext indicates an expected call of SetTimeBasedAutoScalingWithContext
func (mr *MockOpsWorksAPIMockRecorder) SetTimeBasedAutoScalingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeBasedAutoScalingWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).SetTimeBasedAutoScalingWithContext), varargs...)
}

// StartInstance mocks base method
func (m *MockOpsWorksAPI) StartInstance(arg0 *opsworks.StartInstanceInput) (*opsworks.StartInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0)
	ret0, _ := ret[0].(*opsworks.StartInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance
func (mr *MockOpsWorksAPIMockRecorder) StartInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).StartInstance), arg0)
}

// StartInstanceRequest mocks base method
func (m *MockOpsWorksAPI) StartInstanceRequest(arg0 *opsworks.StartInstanceInput) (*request.Request, *opsworks.StartInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.StartInstanceOutput)
	return ret0, ret1
}

// StartInstanceRequest indicates an expected call of StartInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) StartInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).StartInstanceRequest), arg0)
}

// StartInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) StartInstanceWithContext(arg0 context.Context, arg1 *opsworks.StartInstanceInput, arg2 ...request.Option) (*opsworks.StartInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.StartInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstanceWithContext indicates an expected call of StartInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) StartInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).StartInstanceWithContext), varargs...)
}

// StartStack mocks base method
func (m *MockOpsWorksAPI) StartStack(arg0 *opsworks.StartStackInput) (*opsworks.StartStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStack", arg0)
	ret0, _ := ret[0].(*opsworks.StartStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStack indicates an expected call of StartStack
func (mr *MockOpsWorksAPIMockRecorder) StartStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStack", reflect.TypeOf((*MockOpsWorksAPI)(nil).StartStack), arg0)
}

// StartStackRequest mocks base method
func (m *MockOpsWorksAPI) StartStackRequest(arg0 *opsworks.StartStackInput) (*request.Request, *opsworks.StartStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.StartStackOutput)
	return ret0, ret1
}

// StartStackRequest indicates an expected call of StartStackRequest
func (mr *MockOpsWorksAPIMockRecorder) StartStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStackRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).StartStackRequest), arg0)
}

// StartStackWithContext mocks base method
func (m *MockOpsWorksAPI) StartStackWithContext(arg0 context.Context, arg1 *opsworks.StartStackInput, arg2 ...request.Option) (*opsworks.StartStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartStackWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.StartStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStackWithContext indicates an expected call of StartStackWithContext
func (mr *MockOpsWorksAPIMockRecorder) StartStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStackWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).StartStackWithContext), varargs...)
}

// StopInstance mocks base method
func (m *MockOpsWorksAPI) StopInstance(arg0 *opsworks.StopInstanceInput) (*opsworks.StopInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstance", arg0)
	ret0, _ := ret[0].(*opsworks.StopInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstance indicates an expected call of StopInstance
func (mr *MockOpsWorksAPIMockRecorder) StopInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).StopInstance), arg0)
}

// StopInstanceRequest mocks base method
func (m *MockOpsWorksAPI) StopInstanceRequest(arg0 *opsworks.StopInstanceInput) (*request.Request, *opsworks.StopInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.StopInstanceOutput)
	return ret0, ret1
}

// StopInstanceRequest indicates an expected call of StopInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) StopInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).StopInstanceRequest), arg0)
}

// StopInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) StopInstanceWithContext(arg0 context.Context, arg1 *opsworks.StopInstanceInput, arg2 ...request.Option) (*opsworks.StopInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.StopInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstanceWithContext indicates an expected call of StopInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) StopInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).StopInstanceWithContext), varargs...)
}

// StopStack mocks base method
func (m *MockOpsWorksAPI) StopStack(arg0 *opsworks.StopStackInput) (*opsworks.StopStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStack", arg0)
	ret0, _ := ret[0].(*opsworks.StopStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStack indicates an expected call of StopStack
func (mr *MockOpsWorksAPIMockRecorder) StopStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStack", reflect.TypeOf((*MockOpsWorksAPI)(nil).StopStack), arg0)
}

// StopStackRequest mocks base method
func (m *MockOpsWorksAPI) StopStackRequest(arg0 *opsworks.StopStackInput) (*request.Request, *opsworks.StopStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.StopStackOutput)
	return ret0, ret1
}

// StopStackRequest indicates an expected call of StopStackRequest
func (mr *MockOpsWorksAPIMockRecorder) StopStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStackRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).StopStackRequest), arg0)
}

// StopStackWithContext mocks base method
func (m *MockOpsWorksAPI) StopStackWithContext(arg0 context.Context, arg1 *opsworks.StopStackInput, arg2 ...request.Option) (*opsworks.StopStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopStackWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.StopStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStackWithContext indicates an expected call of StopStackWithContext
func (mr *MockOpsWorksAPIMockRecorder) StopStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStackWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).StopStackWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockOpsWorksAPI) TagResource(arg0 *opsworks.TagResourceInput) (*opsworks.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*opsworks.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockOpsWorksAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockOpsWorksAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockOpsWorksAPI) TagResourceRequest(arg0 *opsworks.TagResourceInput) (*request.Request, *opsworks.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockOpsWorksAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockOpsWorksAPI) TagResourceWithContext(arg0 context.Context, arg1 *opsworks.TagResourceInput, arg2 ...request.Option) (*opsworks.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockOpsWorksAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).TagResourceWithContext), varargs...)
}

// UnassignInstance mocks base method
func (m *MockOpsWorksAPI) UnassignInstance(arg0 *opsworks.UnassignInstanceInput) (*opsworks.UnassignInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignInstance", arg0)
	ret0, _ := ret[0].(*opsworks.UnassignInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignInstance indicates an expected call of UnassignInstance
func (mr *MockOpsWorksAPIMockRecorder) UnassignInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).UnassignInstance), arg0)
}

// UnassignInstanceRequest mocks base method
func (m *MockOpsWorksAPI) UnassignInstanceRequest(arg0 *opsworks.UnassignInstanceInput) (*request.Request, *opsworks.UnassignInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UnassignInstanceOutput)
	return ret0, ret1
}

// UnassignInstanceRequest indicates an expected call of UnassignInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) UnassignInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UnassignInstanceRequest), arg0)
}

// UnassignInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) UnassignInstanceWithContext(arg0 context.Context, arg1 *opsworks.UnassignInstanceInput, arg2 ...request.Option) (*opsworks.UnassignInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnassignInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UnassignInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignInstanceWithContext indicates an expected call of UnassignInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) UnassignInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UnassignInstanceWithContext), varargs...)
}

// UnassignVolume mocks base method
func (m *MockOpsWorksAPI) UnassignVolume(arg0 *opsworks.UnassignVolumeInput) (*opsworks.UnassignVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignVolume", arg0)
	ret0, _ := ret[0].(*opsworks.UnassignVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignVolume indicates an expected call of UnassignVolume
func (mr *MockOpsWorksAPIMockRecorder) UnassignVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignVolume", reflect.TypeOf((*MockOpsWorksAPI)(nil).UnassignVolume), arg0)
}

// UnassignVolumeRequest mocks base method
func (m *MockOpsWorksAPI) UnassignVolumeRequest(arg0 *opsworks.UnassignVolumeInput) (*request.Request, *opsworks.UnassignVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UnassignVolumeOutput)
	return ret0, ret1
}

// UnassignVolumeRequest indicates an expected call of UnassignVolumeRequest
func (mr *MockOpsWorksAPIMockRecorder) UnassignVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignVolumeRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UnassignVolumeRequest), arg0)
}

// UnassignVolumeWithContext mocks base method
func (m *MockOpsWorksAPI) UnassignVolumeWithContext(arg0 context.Context, arg1 *opsworks.UnassignVolumeInput, arg2 ...request.Option) (*opsworks.UnassignVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnassignVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UnassignVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignVolumeWithContext indicates an expected call of UnassignVolumeWithContext
func (mr *MockOpsWorksAPIMockRecorder) UnassignVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignVolumeWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UnassignVolumeWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockOpsWorksAPI) UntagResource(arg0 *opsworks.UntagResourceInput) (*opsworks.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*opsworks.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockOpsWorksAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockOpsWorksAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockOpsWorksAPI) UntagResourceRequest(arg0 *opsworks.UntagResourceInput) (*request.Request, *opsworks.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockOpsWorksAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockOpsWorksAPI) UntagResourceWithContext(arg0 context.Context, arg1 *opsworks.UntagResourceInput, arg2 ...request.Option) (*opsworks.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockOpsWorksAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApp mocks base method
func (m *MockOpsWorksAPI) UpdateApp(arg0 *opsworks.UpdateAppInput) (*opsworks.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp
func (mr *MockOpsWorksAPIMockRecorder) UpdateApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateApp), arg0)
}

// UpdateAppRequest mocks base method
func (m *MockOpsWorksAPI) UpdateAppRequest(arg0 *opsworks.UpdateAppInput) (*request.Request, *opsworks.UpdateAppOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateAppOutput)
	return ret0, ret1
}

// UpdateAppRequest indicates an expected call of UpdateAppRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateAppRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateAppRequest), arg0)
}

// UpdateAppWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateAppWithContext(arg0 context.Context, arg1 *opsworks.UpdateAppInput, arg2 ...request.Option) (*opsworks.UpdateAppOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateAppOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppWithContext indicates an expected call of UpdateAppWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateAppWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateAppWithContext), varargs...)
}

// UpdateElasticIp mocks base method
func (m *MockOpsWorksAPI) UpdateElasticIp(arg0 *opsworks.UpdateElasticIpInput) (*opsworks.UpdateElasticIpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateElasticIp", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateElasticIp indicates an expected call of UpdateElasticIp
func (mr *MockOpsWorksAPIMockRecorder) UpdateElasticIp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElasticIp", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateElasticIp), arg0)
}

// UpdateElasticIpRequest mocks base method
func (m *MockOpsWorksAPI) UpdateElasticIpRequest(arg0 *opsworks.UpdateElasticIpInput) (*request.Request, *opsworks.UpdateElasticIpOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateElasticIpRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateElasticIpOutput)
	return ret0, ret1
}

// UpdateElasticIpRequest indicates an expected call of UpdateElasticIpRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateElasticIpRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElasticIpRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateElasticIpRequest), arg0)
}

// UpdateElasticIpWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateElasticIpWithContext(arg0 context.Context, arg1 *opsworks.UpdateElasticIpInput, arg2 ...request.Option) (*opsworks.UpdateElasticIpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateElasticIpWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateElasticIpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateElasticIpWithContext indicates an expected call of UpdateElasticIpWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateElasticIpWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElasticIpWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateElasticIpWithContext), varargs...)
}

// UpdateInstance mocks base method
func (m *MockOpsWorksAPI) UpdateInstance(arg0 *opsworks.UpdateInstanceInput) (*opsworks.UpdateInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance
func (mr *MockOpsWorksAPIMockRecorder) UpdateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateInstance), arg0)
}

// UpdateInstanceRequest mocks base method
func (m *MockOpsWorksAPI) UpdateInstanceRequest(arg0 *opsworks.UpdateInstanceInput) (*request.Request, *opsworks.UpdateInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateInstanceOutput)
	return ret0, ret1
}

// UpdateInstanceRequest indicates an expected call of UpdateInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateInstanceRequest), arg0)
}

// UpdateInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateInstanceWithContext(arg0 context.Context, arg1 *opsworks.UpdateInstanceInput, arg2 ...request.Option) (*opsworks.UpdateInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceWithContext indicates an expected call of UpdateInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateInstanceWithContext), varargs...)
}

// UpdateLayer mocks base method
func (m *MockOpsWorksAPI) UpdateLayer(arg0 *opsworks.UpdateLayerInput) (*opsworks.UpdateLayerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLayer", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateLayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLayer indicates an expected call of UpdateLayer
func (mr *MockOpsWorksAPIMockRecorder) UpdateLayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLayer", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateLayer), arg0)
}

// UpdateLayerRequest mocks base method
func (m *MockOpsWorksAPI) UpdateLayerRequest(arg0 *opsworks.UpdateLayerInput) (*request.Request, *opsworks.UpdateLayerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLayerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateLayerOutput)
	return ret0, ret1
}

// UpdateLayerRequest indicates an expected call of UpdateLayerRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateLayerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLayerRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateLayerRequest), arg0)
}

// UpdateLayerWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateLayerWithContext(arg0 context.Context, arg1 *opsworks.UpdateLayerInput, arg2 ...request.Option) (*opsworks.UpdateLayerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLayerWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateLayerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLayerWithContext indicates an expected call of UpdateLayerWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateLayerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLayerWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateLayerWithContext), varargs...)
}

// UpdateMyUserProfile mocks base method
func (m *MockOpsWorksAPI) UpdateMyUserProfile(arg0 *opsworks.UpdateMyUserProfileInput) (*opsworks.UpdateMyUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMyUserProfile", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateMyUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMyUserProfile indicates an expected call of UpdateMyUserProfile
func (mr *MockOpsWorksAPIMockRecorder) UpdateMyUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyUserProfile", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateMyUserProfile), arg0)
}

// UpdateMyUserProfileRequest mocks base method
func (m *MockOpsWorksAPI) UpdateMyUserProfileRequest(arg0 *opsworks.UpdateMyUserProfileInput) (*request.Request, *opsworks.UpdateMyUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMyUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateMyUserProfileOutput)
	return ret0, ret1
}

// UpdateMyUserProfileRequest indicates an expected call of UpdateMyUserProfileRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateMyUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyUserProfileRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateMyUserProfileRequest), arg0)
}

// UpdateMyUserProfileWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateMyUserProfileWithContext(arg0 context.Context, arg1 *opsworks.UpdateMyUserProfileInput, arg2 ...request.Option) (*opsworks.UpdateMyUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMyUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateMyUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMyUserProfileWithContext indicates an expected call of UpdateMyUserProfileWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateMyUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyUserProfileWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateMyUserProfileWithContext), varargs...)
}

// UpdateRdsDbInstance mocks base method
func (m *MockOpsWorksAPI) UpdateRdsDbInstance(arg0 *opsworks.UpdateRdsDbInstanceInput) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRdsDbInstance", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateRdsDbInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRdsDbInstance indicates an expected call of UpdateRdsDbInstance
func (mr *MockOpsWorksAPIMockRecorder) UpdateRdsDbInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRdsDbInstance", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateRdsDbInstance), arg0)
}

// UpdateRdsDbInstanceRequest mocks base method
func (m *MockOpsWorksAPI) UpdateRdsDbInstanceRequest(arg0 *opsworks.UpdateRdsDbInstanceInput) (*request.Request, *opsworks.UpdateRdsDbInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRdsDbInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateRdsDbInstanceOutput)
	return ret0, ret1
}

// UpdateRdsDbInstanceRequest indicates an expected call of UpdateRdsDbInstanceRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateRdsDbInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRdsDbInstanceRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateRdsDbInstanceRequest), arg0)
}

// UpdateRdsDbInstanceWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateRdsDbInstanceWithContext(arg0 context.Context, arg1 *opsworks.UpdateRdsDbInstanceInput, arg2 ...request.Option) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRdsDbInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateRdsDbInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRdsDbInstanceWithContext indicates an expected call of UpdateRdsDbInstanceWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateRdsDbInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRdsDbInstanceWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateRdsDbInstanceWithContext), varargs...)
}

// UpdateStack mocks base method
func (m *MockOpsWorksAPI) UpdateStack(arg0 *opsworks.UpdateStackInput) (*opsworks.UpdateStackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStack", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStack indicates an expected call of UpdateStack
func (mr *MockOpsWorksAPIMockRecorder) UpdateStack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStack", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateStack), arg0)
}

// UpdateStackRequest mocks base method
func (m *MockOpsWorksAPI) UpdateStackRequest(arg0 *opsworks.UpdateStackInput) (*request.Request, *opsworks.UpdateStackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateStackOutput)
	return ret0, ret1
}

// UpdateStackRequest indicates an expected call of UpdateStackRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateStackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateStackRequest), arg0)
}

// UpdateStackWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateStackWithContext(arg0 context.Context, arg1 *opsworks.UpdateStackInput, arg2 ...request.Option) (*opsworks.UpdateStackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStackWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateStackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStackWithContext indicates an expected call of UpdateStackWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateStackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStackWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateStackWithContext), varargs...)
}

// UpdateUserProfile mocks base method
func (m *MockOpsWorksAPI) UpdateUserProfile(arg0 *opsworks.UpdateUserProfileInput) (*opsworks.UpdateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile
func (mr *MockOpsWorksAPIMockRecorder) UpdateUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateUserProfile), arg0)
}

// UpdateUserProfileRequest mocks base method
func (m *MockOpsWorksAPI) UpdateUserProfileRequest(arg0 *opsworks.UpdateUserProfileInput) (*request.Request, *opsworks.UpdateUserProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateUserProfileOutput)
	return ret0, ret1
}

// UpdateUserProfileRequest indicates an expected call of UpdateUserProfileRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateUserProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfileRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateUserProfileRequest), arg0)
}

// UpdateUserProfileWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateUserProfileWithContext(arg0 context.Context, arg1 *opsworks.UpdateUserProfileInput, arg2 ...request.Option) (*opsworks.UpdateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserProfileWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfileWithContext indicates an expected call of UpdateUserProfileWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateUserProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfileWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateUserProfileWithContext), varargs...)
}

// UpdateVolume mocks base method
func (m *MockOpsWorksAPI) UpdateVolume(arg0 *opsworks.UpdateVolumeInput) (*opsworks.UpdateVolumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", arg0)
	ret0, _ := ret[0].(*opsworks.UpdateVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume
func (mr *MockOpsWorksAPIMockRecorder) UpdateVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateVolume), arg0)
}

// UpdateVolumeRequest mocks base method
func (m *MockOpsWorksAPI) UpdateVolumeRequest(arg0 *opsworks.UpdateVolumeInput) (*request.Request, *opsworks.UpdateVolumeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*opsworks.UpdateVolumeOutput)
	return ret0, ret1
}

// UpdateVolumeRequest indicates an expected call of UpdateVolumeRequest
func (mr *MockOpsWorksAPIMockRecorder) UpdateVolumeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeRequest", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateVolumeRequest), arg0)
}

// UpdateVolumeWithContext mocks base method
func (m *MockOpsWorksAPI) UpdateVolumeWithContext(arg0 context.Context, arg1 *opsworks.UpdateVolumeInput, arg2 ...request.Option) (*opsworks.UpdateVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVolumeWithContext", varargs...)
	ret0, _ := ret[0].(*opsworks.UpdateVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolumeWithContext indicates an expected call of UpdateVolumeWithContext
func (mr *MockOpsWorksAPIMockRecorder) UpdateVolumeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).UpdateVolumeWithContext), varargs...)
}

// WaitUntilAppExists mocks base method
func (m *MockOpsWorksAPI) WaitUntilAppExists(arg0 *opsworks.DescribeAppsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilAppExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAppExists indicates an expected call of WaitUntilAppExists
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilAppExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAppExists", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilAppExists), arg0)
}

// WaitUntilAppExistsWithContext mocks base method
func (m *MockOpsWorksAPI) WaitUntilAppExistsWithContext(arg0 context.Context, arg1 *opsworks.DescribeAppsInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAppExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAppExistsWithContext indicates an expected call of WaitUntilAppExistsWithContext
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilAppExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAppExistsWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilAppExistsWithContext), varargs...)
}

// WaitUntilDeploymentSuccessful mocks base method
func (m *MockOpsWorksAPI) WaitUntilDeploymentSuccessful(arg0 *opsworks.DescribeDeploymentsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDeploymentSuccessful", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDeploymentSuccessful indicates an expected call of WaitUntilDeploymentSuccessful
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilDeploymentSuccessful(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDeploymentSuccessful", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilDeploymentSuccessful), arg0)
}

// WaitUntilDeploymentSuccessfulWithContext mocks base method
func (m *MockOpsWorksAPI) WaitUntilDeploymentSuccessfulWithContext(arg0 context.Context, arg1 *opsworks.DescribeDeploymentsInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilDeploymentSuccessfulWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDeploymentSuccessfulWithContext indicates an expected call of WaitUntilDeploymentSuccessfulWithContext
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilDeploymentSuccessfulWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDeploymentSuccessfulWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilDeploymentSuccessfulWithContext), varargs...)
}

// WaitUntilInstanceOnline mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceOnline(arg0 *opsworks.DescribeInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilInstanceOnline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceOnline indicates an expected call of WaitUntilInstanceOnline
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceOnline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceOnline", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceOnline), arg0)
}

// WaitUntilInstanceOnlineWithContext mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceOnlineWithContext(arg0 context.Context, arg1 *opsworks.DescribeInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilInstanceOnlineWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceOnlineWithContext indicates an expected call of WaitUntilInstanceOnlineWithContext
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceOnlineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceOnlineWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceOnlineWithContext), varargs...)
}

// WaitUntilInstanceRegistered mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceRegistered(arg0 *opsworks.DescribeInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilInstanceRegistered", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceRegistered indicates an expected call of WaitUntilInstanceRegistered
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceRegistered(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceRegistered", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceRegistered), arg0)
}

// WaitUntilInstanceRegisteredWithContext mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceRegisteredWithContext(arg0 context.Context, arg1 *opsworks.DescribeInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilInstanceRegisteredWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceRegisteredWithContext indicates an expected call of WaitUntilInstanceRegisteredWithContext
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceRegisteredWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceRegisteredWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceRegisteredWithContext), varargs...)
}

// WaitUntilInstanceStopped mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceStopped(arg0 *opsworks.DescribeInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilInstanceStopped", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceStopped indicates an expected call of WaitUntilInstanceStopped
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceStopped", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceStopped), arg0)
}

// WaitUntilInstanceStoppedWithContext mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceStoppedWithContext(arg0 context.Context, arg1 *opsworks.DescribeInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilInstanceStoppedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceStoppedWithContext indicates an expected call of WaitUntilInstanceStoppedWithContext
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceStoppedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceStoppedWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceStoppedWithContext), varargs...)
}

// WaitUntilInstanceTerminated mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceTerminated(arg0 *opsworks.DescribeInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilInstanceTerminated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceTerminated indicates an expected call of WaitUntilInstanceTerminated
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceTerminated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceTerminated", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceTerminated), arg0)
}

// WaitUntilInstanceTerminatedWithContext mocks base method
func (m *MockOpsWorksAPI) WaitUntilInstanceTerminatedWithContext(arg0 context.Context, arg1 *opsworks.DescribeInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilInstanceTerminatedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilInstanceTerminatedWithContext indicates an expected call of WaitUntilInstanceTerminatedWithContext
func (mr *MockOpsWorksAPIMockRecorder) WaitUntilInstanceTerminatedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilInstanceTerminatedWithContext", reflect.TypeOf((*MockOpsWorksAPI)(nil).WaitUntilInstanceTerminatedWithContext), varargs...)
}

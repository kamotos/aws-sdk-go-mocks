// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/memorydb/memorydbiface (interfaces: MemoryDBAPI)

// Package memorydbmock is a generated GoMock package.
package memorydbmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	memorydb "github.com/aws/aws-sdk-go/service/memorydb"
	gomock "github.com/golang/mock/gomock"
)

// MockMemoryDBAPI is a mock of MemoryDBAPI interface.
type MockMemoryDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryDBAPIMockRecorder
}

// MockMemoryDBAPIMockRecorder is the mock recorder for MockMemoryDBAPI.
type MockMemoryDBAPIMockRecorder struct {
	mock *MockMemoryDBAPI
}

// NewMockMemoryDBAPI creates a new mock instance.
func NewMockMemoryDBAPI(ctrl *gomock.Controller) *MockMemoryDBAPI {
	mock := &MockMemoryDBAPI{ctrl: ctrl}
	mock.recorder = &MockMemoryDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryDBAPI) EXPECT() *MockMemoryDBAPIMockRecorder {
	return m.recorder
}

// BatchUpdateCluster mocks base method.
func (m *MockMemoryDBAPI) BatchUpdateCluster(arg0 *memorydb.BatchUpdateClusterInput) (*memorydb.BatchUpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateCluster", arg0)
	ret0, _ := ret[0].(*memorydb.BatchUpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateCluster indicates an expected call of BatchUpdateCluster.
func (mr *MockMemoryDBAPIMockRecorder) BatchUpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateCluster", reflect.TypeOf((*MockMemoryDBAPI)(nil).BatchUpdateCluster), arg0)
}

// BatchUpdateClusterRequest mocks base method.
func (m *MockMemoryDBAPI) BatchUpdateClusterRequest(arg0 *memorydb.BatchUpdateClusterInput) (*request.Request, *memorydb.BatchUpdateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.BatchUpdateClusterOutput)
	return ret0, ret1
}

// BatchUpdateClusterRequest indicates an expected call of BatchUpdateClusterRequest.
func (mr *MockMemoryDBAPIMockRecorder) BatchUpdateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateClusterRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).BatchUpdateClusterRequest), arg0)
}

// BatchUpdateClusterWithContext mocks base method.
func (m *MockMemoryDBAPI) BatchUpdateClusterWithContext(arg0 context.Context, arg1 *memorydb.BatchUpdateClusterInput, arg2 ...request.Option) (*memorydb.BatchUpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.BatchUpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateClusterWithContext indicates an expected call of BatchUpdateClusterWithContext.
func (mr *MockMemoryDBAPIMockRecorder) BatchUpdateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateClusterWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).BatchUpdateClusterWithContext), varargs...)
}

// CopySnapshot mocks base method.
func (m *MockMemoryDBAPI) CopySnapshot(arg0 *memorydb.CopySnapshotInput) (*memorydb.CopySnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopySnapshot", arg0)
	ret0, _ := ret[0].(*memorydb.CopySnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopySnapshot indicates an expected call of CopySnapshot.
func (mr *MockMemoryDBAPIMockRecorder) CopySnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySnapshot", reflect.TypeOf((*MockMemoryDBAPI)(nil).CopySnapshot), arg0)
}

// CopySnapshotRequest mocks base method.
func (m *MockMemoryDBAPI) CopySnapshotRequest(arg0 *memorydb.CopySnapshotInput) (*request.Request, *memorydb.CopySnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopySnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.CopySnapshotOutput)
	return ret0, ret1
}

// CopySnapshotRequest indicates an expected call of CopySnapshotRequest.
func (mr *MockMemoryDBAPIMockRecorder) CopySnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySnapshotRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).CopySnapshotRequest), arg0)
}

// CopySnapshotWithContext mocks base method.
func (m *MockMemoryDBAPI) CopySnapshotWithContext(arg0 context.Context, arg1 *memorydb.CopySnapshotInput, arg2 ...request.Option) (*memorydb.CopySnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopySnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.CopySnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopySnapshotWithContext indicates an expected call of CopySnapshotWithContext.
func (mr *MockMemoryDBAPIMockRecorder) CopySnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySnapshotWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).CopySnapshotWithContext), varargs...)
}

// CreateACL mocks base method.
func (m *MockMemoryDBAPI) CreateACL(arg0 *memorydb.CreateACLInput) (*memorydb.CreateACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateACL", arg0)
	ret0, _ := ret[0].(*memorydb.CreateACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateACL indicates an expected call of CreateACL.
func (mr *MockMemoryDBAPIMockRecorder) CreateACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACL", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateACL), arg0)
}

// CreateACLRequest mocks base method.
func (m *MockMemoryDBAPI) CreateACLRequest(arg0 *memorydb.CreateACLInput) (*request.Request, *memorydb.CreateACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.CreateACLOutput)
	return ret0, ret1
}

// CreateACLRequest indicates an expected call of CreateACLRequest.
func (mr *MockMemoryDBAPIMockRecorder) CreateACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACLRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateACLRequest), arg0)
}

// CreateACLWithContext mocks base method.
func (m *MockMemoryDBAPI) CreateACLWithContext(arg0 context.Context, arg1 *memorydb.CreateACLInput, arg2 ...request.Option) (*memorydb.CreateACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateACLWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.CreateACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateACLWithContext indicates an expected call of CreateACLWithContext.
func (mr *MockMemoryDBAPIMockRecorder) CreateACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACLWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateACLWithContext), varargs...)
}

// CreateCluster mocks base method.
func (m *MockMemoryDBAPI) CreateCluster(arg0 *memorydb.CreateClusterInput) (*memorydb.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0)
	ret0, _ := ret[0].(*memorydb.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockMemoryDBAPIMockRecorder) CreateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateCluster), arg0)
}

// CreateClusterRequest mocks base method.
func (m *MockMemoryDBAPI) CreateClusterRequest(arg0 *memorydb.CreateClusterInput) (*request.Request, *memorydb.CreateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.CreateClusterOutput)
	return ret0, ret1
}

// CreateClusterRequest indicates an expected call of CreateClusterRequest.
func (mr *MockMemoryDBAPIMockRecorder) CreateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateClusterRequest), arg0)
}

// CreateClusterWithContext mocks base method.
func (m *MockMemoryDBAPI) CreateClusterWithContext(arg0 context.Context, arg1 *memorydb.CreateClusterInput, arg2 ...request.Option) (*memorydb.CreateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.CreateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterWithContext indicates an expected call of CreateClusterWithContext.
func (mr *MockMemoryDBAPIMockRecorder) CreateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateClusterWithContext), varargs...)
}

// CreateParameterGroup mocks base method.
func (m *MockMemoryDBAPI) CreateParameterGroup(arg0 *memorydb.CreateParameterGroupInput) (*memorydb.CreateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParameterGroup", arg0)
	ret0, _ := ret[0].(*memorydb.CreateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParameterGroup indicates an expected call of CreateParameterGroup.
func (mr *MockMemoryDBAPIMockRecorder) CreateParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParameterGroup", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateParameterGroup), arg0)
}

// CreateParameterGroupRequest mocks base method.
func (m *MockMemoryDBAPI) CreateParameterGroupRequest(arg0 *memorydb.CreateParameterGroupInput) (*request.Request, *memorydb.CreateParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.CreateParameterGroupOutput)
	return ret0, ret1
}

// CreateParameterGroupRequest indicates an expected call of CreateParameterGroupRequest.
func (mr *MockMemoryDBAPIMockRecorder) CreateParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParameterGroupRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateParameterGroupRequest), arg0)
}

// CreateParameterGroupWithContext mocks base method.
func (m *MockMemoryDBAPI) CreateParameterGroupWithContext(arg0 context.Context, arg1 *memorydb.CreateParameterGroupInput, arg2 ...request.Option) (*memorydb.CreateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.CreateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParameterGroupWithContext indicates an expected call of CreateParameterGroupWithContext.
func (mr *MockMemoryDBAPIMockRecorder) CreateParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParameterGroupWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateParameterGroupWithContext), varargs...)
}

// CreateSnapshot mocks base method.
func (m *MockMemoryDBAPI) CreateSnapshot(arg0 *memorydb.CreateSnapshotInput) (*memorydb.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(*memorydb.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockMemoryDBAPIMockRecorder) CreateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateSnapshot), arg0)
}

// CreateSnapshotRequest mocks base method.
func (m *MockMemoryDBAPI) CreateSnapshotRequest(arg0 *memorydb.CreateSnapshotInput) (*request.Request, *memorydb.CreateSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.CreateSnapshotOutput)
	return ret0, ret1
}

// CreateSnapshotRequest indicates an expected call of CreateSnapshotRequest.
func (mr *MockMemoryDBAPIMockRecorder) CreateSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateSnapshotRequest), arg0)
}

// CreateSnapshotWithContext mocks base method.
func (m *MockMemoryDBAPI) CreateSnapshotWithContext(arg0 context.Context, arg1 *memorydb.CreateSnapshotInput, arg2 ...request.Option) (*memorydb.CreateSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.CreateSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotWithContext indicates an expected call of CreateSnapshotWithContext.
func (mr *MockMemoryDBAPIMockRecorder) CreateSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateSnapshotWithContext), varargs...)
}

// CreateSubnetGroup mocks base method.
func (m *MockMemoryDBAPI) CreateSubnetGroup(arg0 *memorydb.CreateSubnetGroupInput) (*memorydb.CreateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetGroup", arg0)
	ret0, _ := ret[0].(*memorydb.CreateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnetGroup indicates an expected call of CreateSubnetGroup.
func (mr *MockMemoryDBAPIMockRecorder) CreateSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetGroup", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateSubnetGroup), arg0)
}

// CreateSubnetGroupRequest mocks base method.
func (m *MockMemoryDBAPI) CreateSubnetGroupRequest(arg0 *memorydb.CreateSubnetGroupInput) (*request.Request, *memorydb.CreateSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.CreateSubnetGroupOutput)
	return ret0, ret1
}

// CreateSubnetGroupRequest indicates an expected call of CreateSubnetGroupRequest.
func (mr *MockMemoryDBAPIMockRecorder) CreateSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetGroupRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateSubnetGroupRequest), arg0)
}

// CreateSubnetGroupWithContext mocks base method.
func (m *MockMemoryDBAPI) CreateSubnetGroupWithContext(arg0 context.Context, arg1 *memorydb.CreateSubnetGroupInput, arg2 ...request.Option) (*memorydb.CreateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.CreateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnetGroupWithContext indicates an expected call of CreateSubnetGroupWithContext.
func (mr *MockMemoryDBAPIMockRecorder) CreateSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetGroupWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateSubnetGroupWithContext), varargs...)
}

// CreateUser mocks base method.
func (m *MockMemoryDBAPI) CreateUser(arg0 *memorydb.CreateUserInput) (*memorydb.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*memorydb.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMemoryDBAPIMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateUser), arg0)
}

// CreateUserRequest mocks base method.
func (m *MockMemoryDBAPI) CreateUserRequest(arg0 *memorydb.CreateUserInput) (*request.Request, *memorydb.CreateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.CreateUserOutput)
	return ret0, ret1
}

// CreateUserRequest indicates an expected call of CreateUserRequest.
func (mr *MockMemoryDBAPIMockRecorder) CreateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateUserRequest), arg0)
}

// CreateUserWithContext mocks base method.
func (m *MockMemoryDBAPI) CreateUserWithContext(arg0 context.Context, arg1 *memorydb.CreateUserInput, arg2 ...request.Option) (*memorydb.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserWithContext indicates an expected call of CreateUserWithContext.
func (mr *MockMemoryDBAPIMockRecorder) CreateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).CreateUserWithContext), varargs...)
}

// DeleteACL mocks base method.
func (m *MockMemoryDBAPI) DeleteACL(arg0 *memorydb.DeleteACLInput) (*memorydb.DeleteACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteACL", arg0)
	ret0, _ := ret[0].(*memorydb.DeleteACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteACL indicates an expected call of DeleteACL.
func (mr *MockMemoryDBAPIMockRecorder) DeleteACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteACL", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteACL), arg0)
}

// DeleteACLRequest mocks base method.
func (m *MockMemoryDBAPI) DeleteACLRequest(arg0 *memorydb.DeleteACLInput) (*request.Request, *memorydb.DeleteACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DeleteACLOutput)
	return ret0, ret1
}

// DeleteACLRequest indicates an expected call of DeleteACLRequest.
func (mr *MockMemoryDBAPIMockRecorder) DeleteACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteACLRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteACLRequest), arg0)
}

// DeleteACLWithContext mocks base method.
func (m *MockMemoryDBAPI) DeleteACLWithContext(arg0 context.Context, arg1 *memorydb.DeleteACLInput, arg2 ...request.Option) (*memorydb.DeleteACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteACLWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DeleteACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteACLWithContext indicates an expected call of DeleteACLWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DeleteACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteACLWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteACLWithContext), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockMemoryDBAPI) DeleteCluster(arg0 *memorydb.DeleteClusterInput) (*memorydb.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(*memorydb.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockMemoryDBAPIMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteCluster), arg0)
}

// DeleteClusterRequest mocks base method.
func (m *MockMemoryDBAPI) DeleteClusterRequest(arg0 *memorydb.DeleteClusterInput) (*request.Request, *memorydb.DeleteClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DeleteClusterOutput)
	return ret0, ret1
}

// DeleteClusterRequest indicates an expected call of DeleteClusterRequest.
func (mr *MockMemoryDBAPIMockRecorder) DeleteClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteClusterRequest), arg0)
}

// DeleteClusterWithContext mocks base method.
func (m *MockMemoryDBAPI) DeleteClusterWithContext(arg0 context.Context, arg1 *memorydb.DeleteClusterInput, arg2 ...request.Option) (*memorydb.DeleteClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClusterWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DeleteClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClusterWithContext indicates an expected call of DeleteClusterWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DeleteClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteClusterWithContext), varargs...)
}

// DeleteParameterGroup mocks base method.
func (m *MockMemoryDBAPI) DeleteParameterGroup(arg0 *memorydb.DeleteParameterGroupInput) (*memorydb.DeleteParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParameterGroup", arg0)
	ret0, _ := ret[0].(*memorydb.DeleteParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteParameterGroup indicates an expected call of DeleteParameterGroup.
func (mr *MockMemoryDBAPIMockRecorder) DeleteParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParameterGroup", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteParameterGroup), arg0)
}

// DeleteParameterGroupRequest mocks base method.
func (m *MockMemoryDBAPI) DeleteParameterGroupRequest(arg0 *memorydb.DeleteParameterGroupInput) (*request.Request, *memorydb.DeleteParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DeleteParameterGroupOutput)
	return ret0, ret1
}

// DeleteParameterGroupRequest indicates an expected call of DeleteParameterGroupRequest.
func (mr *MockMemoryDBAPIMockRecorder) DeleteParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParameterGroupRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteParameterGroupRequest), arg0)
}

// DeleteParameterGroupWithContext mocks base method.
func (m *MockMemoryDBAPI) DeleteParameterGroupWithContext(arg0 context.Context, arg1 *memorydb.DeleteParameterGroupInput, arg2 ...request.Option) (*memorydb.DeleteParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DeleteParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteParameterGroupWithContext indicates an expected call of DeleteParameterGroupWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DeleteParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParameterGroupWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteParameterGroupWithContext), varargs...)
}

// DeleteSnapshot mocks base method.
func (m *MockMemoryDBAPI) DeleteSnapshot(arg0 *memorydb.DeleteSnapshotInput) (*memorydb.DeleteSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", arg0)
	ret0, _ := ret[0].(*memorydb.DeleteSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockMemoryDBAPIMockRecorder) DeleteSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteSnapshot), arg0)
}

// DeleteSnapshotRequest mocks base method.
func (m *MockMemoryDBAPI) DeleteSnapshotRequest(arg0 *memorydb.DeleteSnapshotInput) (*request.Request, *memorydb.DeleteSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DeleteSnapshotOutput)
	return ret0, ret1
}

// DeleteSnapshotRequest indicates an expected call of DeleteSnapshotRequest.
func (mr *MockMemoryDBAPIMockRecorder) DeleteSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteSnapshotRequest), arg0)
}

// DeleteSnapshotWithContext mocks base method.
func (m *MockMemoryDBAPI) DeleteSnapshotWithContext(arg0 context.Context, arg1 *memorydb.DeleteSnapshotInput, arg2 ...request.Option) (*memorydb.DeleteSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DeleteSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshotWithContext indicates an expected call of DeleteSnapshotWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DeleteSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteSnapshotWithContext), varargs...)
}

// DeleteSubnetGroup mocks base method.
func (m *MockMemoryDBAPI) DeleteSubnetGroup(arg0 *memorydb.DeleteSubnetGroupInput) (*memorydb.DeleteSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetGroup", arg0)
	ret0, _ := ret[0].(*memorydb.DeleteSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnetGroup indicates an expected call of DeleteSubnetGroup.
func (mr *MockMemoryDBAPIMockRecorder) DeleteSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetGroup", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteSubnetGroup), arg0)
}

// DeleteSubnetGroupRequest mocks base method.
func (m *MockMemoryDBAPI) DeleteSubnetGroupRequest(arg0 *memorydb.DeleteSubnetGroupInput) (*request.Request, *memorydb.DeleteSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DeleteSubnetGroupOutput)
	return ret0, ret1
}

// DeleteSubnetGroupRequest indicates an expected call of DeleteSubnetGroupRequest.
func (mr *MockMemoryDBAPIMockRecorder) DeleteSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetGroupRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteSubnetGroupRequest), arg0)
}

// DeleteSubnetGroupWithContext mocks base method.
func (m *MockMemoryDBAPI) DeleteSubnetGroupWithContext(arg0 context.Context, arg1 *memorydb.DeleteSubnetGroupInput, arg2 ...request.Option) (*memorydb.DeleteSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DeleteSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubnetGroupWithContext indicates an expected call of DeleteSubnetGroupWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DeleteSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetGroupWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteSubnetGroupWithContext), varargs...)
}

// DeleteUser mocks base method.
func (m *MockMemoryDBAPI) DeleteUser(arg0 *memorydb.DeleteUserInput) (*memorydb.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(*memorydb.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMemoryDBAPIMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteUser), arg0)
}

// DeleteUserRequest mocks base method.
func (m *MockMemoryDBAPI) DeleteUserRequest(arg0 *memorydb.DeleteUserInput) (*request.Request, *memorydb.DeleteUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DeleteUserOutput)
	return ret0, ret1
}

// DeleteUserRequest indicates an expected call of DeleteUserRequest.
func (mr *MockMemoryDBAPIMockRecorder) DeleteUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteUserRequest), arg0)
}

// DeleteUserWithContext mocks base method.
func (m *MockMemoryDBAPI) DeleteUserWithContext(arg0 context.Context, arg1 *memorydb.DeleteUserInput, arg2 ...request.Option) (*memorydb.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserWithContext indicates an expected call of DeleteUserWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DeleteUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DeleteUserWithContext), varargs...)
}

// DescribeACLs mocks base method.
func (m *MockMemoryDBAPI) DescribeACLs(arg0 *memorydb.DescribeACLsInput) (*memorydb.DescribeACLsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeACLs", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeACLs indicates an expected call of DescribeACLs.
func (mr *MockMemoryDBAPIMockRecorder) DescribeACLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeACLs", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeACLs), arg0)
}

// DescribeACLsRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeACLsRequest(arg0 *memorydb.DescribeACLsInput) (*request.Request, *memorydb.DescribeACLsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeACLsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeACLsOutput)
	return ret0, ret1
}

// DescribeACLsRequest indicates an expected call of DescribeACLsRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeACLsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeACLsRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeACLsRequest), arg0)
}

// DescribeACLsWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeACLsWithContext(arg0 context.Context, arg1 *memorydb.DescribeACLsInput, arg2 ...request.Option) (*memorydb.DescribeACLsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeACLsWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeACLsWithContext indicates an expected call of DescribeACLsWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeACLsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeACLsWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeACLsWithContext), varargs...)
}

// DescribeClusters mocks base method.
func (m *MockMemoryDBAPI) DescribeClusters(arg0 *memorydb.DescribeClustersInput) (*memorydb.DescribeClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClusters", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClusters indicates an expected call of DescribeClusters.
func (mr *MockMemoryDBAPIMockRecorder) DescribeClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClusters", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeClusters), arg0)
}

// DescribeClustersRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeClustersRequest(arg0 *memorydb.DescribeClustersInput) (*request.Request, *memorydb.DescribeClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeClustersOutput)
	return ret0, ret1
}

// DescribeClustersRequest indicates an expected call of DescribeClustersRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClustersRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeClustersRequest), arg0)
}

// DescribeClustersWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeClustersWithContext(arg0 context.Context, arg1 *memorydb.DescribeClustersInput, arg2 ...request.Option) (*memorydb.DescribeClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeClustersWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeClustersWithContext indicates an expected call of DescribeClustersWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeClustersWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeClustersWithContext), varargs...)
}

// DescribeEngineVersions mocks base method.
func (m *MockMemoryDBAPI) DescribeEngineVersions(arg0 *memorydb.DescribeEngineVersionsInput) (*memorydb.DescribeEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineVersions", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineVersions indicates an expected call of DescribeEngineVersions.
func (mr *MockMemoryDBAPIMockRecorder) DescribeEngineVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineVersions", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeEngineVersions), arg0)
}

// DescribeEngineVersionsRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeEngineVersionsRequest(arg0 *memorydb.DescribeEngineVersionsInput) (*request.Request, *memorydb.DescribeEngineVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeEngineVersionsOutput)
	return ret0, ret1
}

// DescribeEngineVersionsRequest indicates an expected call of DescribeEngineVersionsRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeEngineVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineVersionsRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeEngineVersionsRequest), arg0)
}

// DescribeEngineVersionsWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeEngineVersionsWithContext(arg0 context.Context, arg1 *memorydb.DescribeEngineVersionsInput, arg2 ...request.Option) (*memorydb.DescribeEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineVersionsWithContext indicates an expected call of DescribeEngineVersionsWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeEngineVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineVersionsWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeEngineVersionsWithContext), varargs...)
}

// DescribeEvents mocks base method.
func (m *MockMemoryDBAPI) DescribeEvents(arg0 *memorydb.DescribeEventsInput) (*memorydb.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEvents", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents.
func (mr *MockMemoryDBAPIMockRecorder) DescribeEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeEvents), arg0)
}

// DescribeEventsRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeEventsRequest(arg0 *memorydb.DescribeEventsInput) (*request.Request, *memorydb.DescribeEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeEventsOutput)
	return ret0, ret1
}

// DescribeEventsRequest indicates an expected call of DescribeEventsRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeEventsRequest), arg0)
}

// DescribeEventsWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeEventsWithContext(arg0 context.Context, arg1 *memorydb.DescribeEventsInput, arg2 ...request.Option) (*memorydb.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventsWithContext indicates an expected call of DescribeEventsWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeEventsWithContext), varargs...)
}

// DescribeParameterGroups mocks base method.
func (m *MockMemoryDBAPI) DescribeParameterGroups(arg0 *memorydb.DescribeParameterGroupsInput) (*memorydb.DescribeParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParameterGroups", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameterGroups indicates an expected call of DescribeParameterGroups.
func (mr *MockMemoryDBAPIMockRecorder) DescribeParameterGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameterGroups", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeParameterGroups), arg0)
}

// DescribeParameterGroupsRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeParameterGroupsRequest(arg0 *memorydb.DescribeParameterGroupsInput) (*request.Request, *memorydb.DescribeParameterGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParameterGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeParameterGroupsOutput)
	return ret0, ret1
}

// DescribeParameterGroupsRequest indicates an expected call of DescribeParameterGroupsRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeParameterGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameterGroupsRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeParameterGroupsRequest), arg0)
}

// DescribeParameterGroupsWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeParameterGroupsWithContext(arg0 context.Context, arg1 *memorydb.DescribeParameterGroupsInput, arg2 ...request.Option) (*memorydb.DescribeParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeParameterGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameterGroupsWithContext indicates an expected call of DescribeParameterGroupsWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeParameterGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameterGroupsWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeParameterGroupsWithContext), varargs...)
}

// DescribeParameters mocks base method.
func (m *MockMemoryDBAPI) DescribeParameters(arg0 *memorydb.DescribeParametersInput) (*memorydb.DescribeParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParameters", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParameters indicates an expected call of DescribeParameters.
func (mr *MockMemoryDBAPIMockRecorder) DescribeParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParameters", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeParameters), arg0)
}

// DescribeParametersRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeParametersRequest(arg0 *memorydb.DescribeParametersInput) (*request.Request, *memorydb.DescribeParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeParametersOutput)
	return ret0, ret1
}

// DescribeParametersRequest indicates an expected call of DescribeParametersRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParametersRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeParametersRequest), arg0)
}

// DescribeParametersWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeParametersWithContext(arg0 context.Context, arg1 *memorydb.DescribeParametersInput, arg2 ...request.Option) (*memorydb.DescribeParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeParametersWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeParametersWithContext indicates an expected call of DescribeParametersWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeParametersWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeParametersWithContext), varargs...)
}

// DescribeServiceUpdates mocks base method.
func (m *MockMemoryDBAPI) DescribeServiceUpdates(arg0 *memorydb.DescribeServiceUpdatesInput) (*memorydb.DescribeServiceUpdatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceUpdates", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeServiceUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceUpdates indicates an expected call of DescribeServiceUpdates.
func (mr *MockMemoryDBAPIMockRecorder) DescribeServiceUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceUpdates", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeServiceUpdates), arg0)
}

// DescribeServiceUpdatesRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeServiceUpdatesRequest(arg0 *memorydb.DescribeServiceUpdatesInput) (*request.Request, *memorydb.DescribeServiceUpdatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeServiceUpdatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeServiceUpdatesOutput)
	return ret0, ret1
}

// DescribeServiceUpdatesRequest indicates an expected call of DescribeServiceUpdatesRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeServiceUpdatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceUpdatesRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeServiceUpdatesRequest), arg0)
}

// DescribeServiceUpdatesWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeServiceUpdatesWithContext(arg0 context.Context, arg1 *memorydb.DescribeServiceUpdatesInput, arg2 ...request.Option) (*memorydb.DescribeServiceUpdatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeServiceUpdatesWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeServiceUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServiceUpdatesWithContext indicates an expected call of DescribeServiceUpdatesWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeServiceUpdatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServiceUpdatesWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeServiceUpdatesWithContext), varargs...)
}

// DescribeSnapshots mocks base method.
func (m *MockMemoryDBAPI) DescribeSnapshots(arg0 *memorydb.DescribeSnapshotsInput) (*memorydb.DescribeSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSnapshots", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshots indicates an expected call of DescribeSnapshots.
func (mr *MockMemoryDBAPIMockRecorder) DescribeSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshots", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeSnapshots), arg0)
}

// DescribeSnapshotsRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeSnapshotsRequest(arg0 *memorydb.DescribeSnapshotsInput) (*request.Request, *memorydb.DescribeSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeSnapshotsOutput)
	return ret0, ret1
}

// DescribeSnapshotsRequest indicates an expected call of DescribeSnapshotsRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotsRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeSnapshotsRequest), arg0)
}

// DescribeSnapshotsWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeSnapshotsWithContext(arg0 context.Context, arg1 *memorydb.DescribeSnapshotsInput, arg2 ...request.Option) (*memorydb.DescribeSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSnapshotsWithContext indicates an expected call of DescribeSnapshotsWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSnapshotsWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeSnapshotsWithContext), varargs...)
}

// DescribeSubnetGroups mocks base method.
func (m *MockMemoryDBAPI) DescribeSubnetGroups(arg0 *memorydb.DescribeSubnetGroupsInput) (*memorydb.DescribeSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSubnetGroups", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnetGroups indicates an expected call of DescribeSubnetGroups.
func (mr *MockMemoryDBAPIMockRecorder) DescribeSubnetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnetGroups", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeSubnetGroups), arg0)
}

// DescribeSubnetGroupsRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeSubnetGroupsRequest(arg0 *memorydb.DescribeSubnetGroupsInput) (*request.Request, *memorydb.DescribeSubnetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSubnetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeSubnetGroupsOutput)
	return ret0, ret1
}

// DescribeSubnetGroupsRequest indicates an expected call of DescribeSubnetGroupsRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeSubnetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnetGroupsRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeSubnetGroupsRequest), arg0)
}

// DescribeSubnetGroupsWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeSubnetGroupsWithContext(arg0 context.Context, arg1 *memorydb.DescribeSubnetGroupsInput, arg2 ...request.Option) (*memorydb.DescribeSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSubnetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSubnetGroupsWithContext indicates an expected call of DescribeSubnetGroupsWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeSubnetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSubnetGroupsWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeSubnetGroupsWithContext), varargs...)
}

// DescribeUsers mocks base method.
func (m *MockMemoryDBAPI) DescribeUsers(arg0 *memorydb.DescribeUsersInput) (*memorydb.DescribeUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUsers", arg0)
	ret0, _ := ret[0].(*memorydb.DescribeUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUsers indicates an expected call of DescribeUsers.
func (mr *MockMemoryDBAPIMockRecorder) DescribeUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsers", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeUsers), arg0)
}

// DescribeUsersRequest mocks base method.
func (m *MockMemoryDBAPI) DescribeUsersRequest(arg0 *memorydb.DescribeUsersInput) (*request.Request, *memorydb.DescribeUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.DescribeUsersOutput)
	return ret0, ret1
}

// DescribeUsersRequest indicates an expected call of DescribeUsersRequest.
func (mr *MockMemoryDBAPIMockRecorder) DescribeUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsersRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeUsersRequest), arg0)
}

// DescribeUsersWithContext mocks base method.
func (m *MockMemoryDBAPI) DescribeUsersWithContext(arg0 context.Context, arg1 *memorydb.DescribeUsersInput, arg2 ...request.Option) (*memorydb.DescribeUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeUsersWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.DescribeUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeUsersWithContext indicates an expected call of DescribeUsersWithContext.
func (mr *MockMemoryDBAPIMockRecorder) DescribeUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeUsersWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).DescribeUsersWithContext), varargs...)
}

// FailoverShard mocks base method.
func (m *MockMemoryDBAPI) FailoverShard(arg0 *memorydb.FailoverShardInput) (*memorydb.FailoverShardOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverShard", arg0)
	ret0, _ := ret[0].(*memorydb.FailoverShardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverShard indicates an expected call of FailoverShard.
func (mr *MockMemoryDBAPIMockRecorder) FailoverShard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverShard", reflect.TypeOf((*MockMemoryDBAPI)(nil).FailoverShard), arg0)
}

// FailoverShardRequest mocks base method.
func (m *MockMemoryDBAPI) FailoverShardRequest(arg0 *memorydb.FailoverShardInput) (*request.Request, *memorydb.FailoverShardOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverShardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.FailoverShardOutput)
	return ret0, ret1
}

// FailoverShardRequest indicates an expected call of FailoverShardRequest.
func (mr *MockMemoryDBAPIMockRecorder) FailoverShardRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverShardRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).FailoverShardRequest), arg0)
}

// FailoverShardWithContext mocks base method.
func (m *MockMemoryDBAPI) FailoverShardWithContext(arg0 context.Context, arg1 *memorydb.FailoverShardInput, arg2 ...request.Option) (*memorydb.FailoverShardOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FailoverShardWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.FailoverShardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverShardWithContext indicates an expected call of FailoverShardWithContext.
func (mr *MockMemoryDBAPIMockRecorder) FailoverShardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverShardWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).FailoverShardWithContext), varargs...)
}

// ListAllowedNodeTypeUpdates mocks base method.
func (m *MockMemoryDBAPI) ListAllowedNodeTypeUpdates(arg0 *memorydb.ListAllowedNodeTypeUpdatesInput) (*memorydb.ListAllowedNodeTypeUpdatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllowedNodeTypeUpdates", arg0)
	ret0, _ := ret[0].(*memorydb.ListAllowedNodeTypeUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllowedNodeTypeUpdates indicates an expected call of ListAllowedNodeTypeUpdates.
func (mr *MockMemoryDBAPIMockRecorder) ListAllowedNodeTypeUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllowedNodeTypeUpdates", reflect.TypeOf((*MockMemoryDBAPI)(nil).ListAllowedNodeTypeUpdates), arg0)
}

// ListAllowedNodeTypeUpdatesRequest mocks base method.
func (m *MockMemoryDBAPI) ListAllowedNodeTypeUpdatesRequest(arg0 *memorydb.ListAllowedNodeTypeUpdatesInput) (*request.Request, *memorydb.ListAllowedNodeTypeUpdatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllowedNodeTypeUpdatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.ListAllowedNodeTypeUpdatesOutput)
	return ret0, ret1
}

// ListAllowedNodeTypeUpdatesRequest indicates an expected call of ListAllowedNodeTypeUpdatesRequest.
func (mr *MockMemoryDBAPIMockRecorder) ListAllowedNodeTypeUpdatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllowedNodeTypeUpdatesRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).ListAllowedNodeTypeUpdatesRequest), arg0)
}

// ListAllowedNodeTypeUpdatesWithContext mocks base method.
func (m *MockMemoryDBAPI) ListAllowedNodeTypeUpdatesWithContext(arg0 context.Context, arg1 *memorydb.ListAllowedNodeTypeUpdatesInput, arg2 ...request.Option) (*memorydb.ListAllowedNodeTypeUpdatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllowedNodeTypeUpdatesWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.ListAllowedNodeTypeUpdatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllowedNodeTypeUpdatesWithContext indicates an expected call of ListAllowedNodeTypeUpdatesWithContext.
func (mr *MockMemoryDBAPIMockRecorder) ListAllowedNodeTypeUpdatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllowedNodeTypeUpdatesWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).ListAllowedNodeTypeUpdatesWithContext), varargs...)
}

// ListTags mocks base method.
func (m *MockMemoryDBAPI) ListTags(arg0 *memorydb.ListTagsInput) (*memorydb.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(*memorydb.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockMemoryDBAPIMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockMemoryDBAPI)(nil).ListTags), arg0)
}

// ListTagsRequest mocks base method.
func (m *MockMemoryDBAPI) ListTagsRequest(arg0 *memorydb.ListTagsInput) (*request.Request, *memorydb.ListTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.ListTagsOutput)
	return ret0, ret1
}

// ListTagsRequest indicates an expected call of ListTagsRequest.
func (mr *MockMemoryDBAPIMockRecorder) ListTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).ListTagsRequest), arg0)
}

// ListTagsWithContext mocks base method.
func (m *MockMemoryDBAPI) ListTagsWithContext(arg0 context.Context, arg1 *memorydb.ListTagsInput, arg2 ...request.Option) (*memorydb.ListTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.ListTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsWithContext indicates an expected call of ListTagsWithContext.
func (mr *MockMemoryDBAPIMockRecorder) ListTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).ListTagsWithContext), varargs...)
}

// ResetParameterGroup mocks base method.
func (m *MockMemoryDBAPI) ResetParameterGroup(arg0 *memorydb.ResetParameterGroupInput) (*memorydb.ResetParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetParameterGroup", arg0)
	ret0, _ := ret[0].(*memorydb.ResetParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetParameterGroup indicates an expected call of ResetParameterGroup.
func (mr *MockMemoryDBAPIMockRecorder) ResetParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetParameterGroup", reflect.TypeOf((*MockMemoryDBAPI)(nil).ResetParameterGroup), arg0)
}

// ResetParameterGroupRequest mocks base method.
func (m *MockMemoryDBAPI) ResetParameterGroupRequest(arg0 *memorydb.ResetParameterGroupInput) (*request.Request, *memorydb.ResetParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.ResetParameterGroupOutput)
	return ret0, ret1
}

// ResetParameterGroupRequest indicates an expected call of ResetParameterGroupRequest.
func (mr *MockMemoryDBAPIMockRecorder) ResetParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetParameterGroupRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).ResetParameterGroupRequest), arg0)
}

// ResetParameterGroupWithContext mocks base method.
func (m *MockMemoryDBAPI) ResetParameterGroupWithContext(arg0 context.Context, arg1 *memorydb.ResetParameterGroupInput, arg2 ...request.Option) (*memorydb.ResetParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.ResetParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetParameterGroupWithContext indicates an expected call of ResetParameterGroupWithContext.
func (mr *MockMemoryDBAPIMockRecorder) ResetParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetParameterGroupWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).ResetParameterGroupWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockMemoryDBAPI) TagResource(arg0 *memorydb.TagResourceInput) (*memorydb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*memorydb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockMemoryDBAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockMemoryDBAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockMemoryDBAPI) TagResourceRequest(arg0 *memorydb.TagResourceInput) (*request.Request, *memorydb.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockMemoryDBAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockMemoryDBAPI) TagResourceWithContext(arg0 context.Context, arg1 *memorydb.TagResourceInput, arg2 ...request.Option) (*memorydb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockMemoryDBAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockMemoryDBAPI) UntagResource(arg0 *memorydb.UntagResourceInput) (*memorydb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*memorydb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockMemoryDBAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockMemoryDBAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockMemoryDBAPI) UntagResourceRequest(arg0 *memorydb.UntagResourceInput) (*request.Request, *memorydb.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockMemoryDBAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockMemoryDBAPI) UntagResourceWithContext(arg0 context.Context, arg1 *memorydb.UntagResourceInput, arg2 ...request.Option) (*memorydb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockMemoryDBAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateACL mocks base method.
func (m *MockMemoryDBAPI) UpdateACL(arg0 *memorydb.UpdateACLInput) (*memorydb.UpdateACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateACL", arg0)
	ret0, _ := ret[0].(*memorydb.UpdateACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateACL indicates an expected call of UpdateACL.
func (mr *MockMemoryDBAPIMockRecorder) UpdateACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateACL", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateACL), arg0)
}

// UpdateACLRequest mocks base method.
func (m *MockMemoryDBAPI) UpdateACLRequest(arg0 *memorydb.UpdateACLInput) (*request.Request, *memorydb.UpdateACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.UpdateACLOutput)
	return ret0, ret1
}

// UpdateACLRequest indicates an expected call of UpdateACLRequest.
func (mr *MockMemoryDBAPIMockRecorder) UpdateACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateACLRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateACLRequest), arg0)
}

// UpdateACLWithContext mocks base method.
func (m *MockMemoryDBAPI) UpdateACLWithContext(arg0 context.Context, arg1 *memorydb.UpdateACLInput, arg2 ...request.Option) (*memorydb.UpdateACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateACLWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.UpdateACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateACLWithContext indicates an expected call of UpdateACLWithContext.
func (mr *MockMemoryDBAPIMockRecorder) UpdateACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateACLWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateACLWithContext), varargs...)
}

// UpdateCluster mocks base method.
func (m *MockMemoryDBAPI) UpdateCluster(arg0 *memorydb.UpdateClusterInput) (*memorydb.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0)
	ret0, _ := ret[0].(*memorydb.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockMemoryDBAPIMockRecorder) UpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateCluster), arg0)
}

// UpdateClusterRequest mocks base method.
func (m *MockMemoryDBAPI) UpdateClusterRequest(arg0 *memorydb.UpdateClusterInput) (*request.Request, *memorydb.UpdateClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.UpdateClusterOutput)
	return ret0, ret1
}

// UpdateClusterRequest indicates an expected call of UpdateClusterRequest.
func (mr *MockMemoryDBAPIMockRecorder) UpdateClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateClusterRequest), arg0)
}

// UpdateClusterWithContext mocks base method.
func (m *MockMemoryDBAPI) UpdateClusterWithContext(arg0 context.Context, arg1 *memorydb.UpdateClusterInput, arg2 ...request.Option) (*memorydb.UpdateClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.UpdateClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterWithContext indicates an expected call of UpdateClusterWithContext.
func (mr *MockMemoryDBAPIMockRecorder) UpdateClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateClusterWithContext), varargs...)
}

// UpdateParameterGroup mocks base method.
func (m *MockMemoryDBAPI) UpdateParameterGroup(arg0 *memorydb.UpdateParameterGroupInput) (*memorydb.UpdateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParameterGroup", arg0)
	ret0, _ := ret[0].(*memorydb.UpdateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParameterGroup indicates an expected call of UpdateParameterGroup.
func (mr *MockMemoryDBAPIMockRecorder) UpdateParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParameterGroup", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateParameterGroup), arg0)
}

// UpdateParameterGroupRequest mocks base method.
func (m *MockMemoryDBAPI) UpdateParameterGroupRequest(arg0 *memorydb.UpdateParameterGroupInput) (*request.Request, *memorydb.UpdateParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.UpdateParameterGroupOutput)
	return ret0, ret1
}

// UpdateParameterGroupRequest indicates an expected call of UpdateParameterGroupRequest.
func (mr *MockMemoryDBAPIMockRecorder) UpdateParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParameterGroupRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateParameterGroupRequest), arg0)
}

// UpdateParameterGroupWithContext mocks base method.
func (m *MockMemoryDBAPI) UpdateParameterGroupWithContext(arg0 context.Context, arg1 *memorydb.UpdateParameterGroupInput, arg2 ...request.Option) (*memorydb.UpdateParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.UpdateParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParameterGroupWithContext indicates an expected call of UpdateParameterGroupWithContext.
func (mr *MockMemoryDBAPIMockRecorder) UpdateParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParameterGroupWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateParameterGroupWithContext), varargs...)
}

// UpdateSubnetGroup mocks base method.
func (m *MockMemoryDBAPI) UpdateSubnetGroup(arg0 *memorydb.UpdateSubnetGroupInput) (*memorydb.UpdateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnetGroup", arg0)
	ret0, _ := ret[0].(*memorydb.UpdateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubnetGroup indicates an expected call of UpdateSubnetGroup.
func (mr *MockMemoryDBAPIMockRecorder) UpdateSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnetGroup", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateSubnetGroup), arg0)
}

// UpdateSubnetGroupRequest mocks base method.
func (m *MockMemoryDBAPI) UpdateSubnetGroupRequest(arg0 *memorydb.UpdateSubnetGroupInput) (*request.Request, *memorydb.UpdateSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.UpdateSubnetGroupOutput)
	return ret0, ret1
}

// UpdateSubnetGroupRequest indicates an expected call of UpdateSubnetGroupRequest.
func (mr *MockMemoryDBAPIMockRecorder) UpdateSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnetGroupRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateSubnetGroupRequest), arg0)
}

// UpdateSubnetGroupWithContext mocks base method.
func (m *MockMemoryDBAPI) UpdateSubnetGroupWithContext(arg0 context.Context, arg1 *memorydb.UpdateSubnetGroupInput, arg2 ...request.Option) (*memorydb.UpdateSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.UpdateSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubnetGroupWithContext indicates an expected call of UpdateSubnetGroupWithContext.
func (mr *MockMemoryDBAPIMockRecorder) UpdateSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnetGroupWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateSubnetGroupWithContext), varargs...)
}

// UpdateUser mocks base method.
func (m *MockMemoryDBAPI) UpdateUser(arg0 *memorydb.UpdateUserInput) (*memorydb.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*memorydb.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockMemoryDBAPIMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateUser), arg0)
}

// UpdateUserRequest mocks base method.
func (m *MockMemoryDBAPI) UpdateUserRequest(arg0 *memorydb.UpdateUserInput) (*request.Request, *memorydb.UpdateUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*memorydb.UpdateUserOutput)
	return ret0, ret1
}

// UpdateUserRequest indicates an expected call of UpdateUserRequest.
func (mr *MockMemoryDBAPIMockRecorder) UpdateUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRequest", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateUserRequest), arg0)
}

// UpdateUserWithContext mocks base method.
func (m *MockMemoryDBAPI) UpdateUserWithContext(arg0 context.Context, arg1 *memorydb.UpdateUserInput, arg2 ...request.Option) (*memorydb.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserWithContext", varargs...)
	ret0, _ := ret[0].(*memorydb.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWithContext indicates an expected call of UpdateUserWithContext.
func (mr *MockMemoryDBAPIMockRecorder) UpdateUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWithContext", reflect.TypeOf((*MockMemoryDBAPI)(nil).UpdateUserWithContext), varargs...)
}

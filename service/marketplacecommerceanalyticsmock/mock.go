// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/marketplacecommerceanalytics/marketplacecommerceanalyticsiface (interfaces: MarketplaceCommerceAnalyticsAPI)

// Package marketplacecommerceanalyticsmock is a generated GoMock package.
package marketplacecommerceanalyticsmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	marketplacecommerceanalytics "github.com/aws/aws-sdk-go/service/marketplacecommerceanalytics"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarketplaceCommerceAnalyticsAPI is a mock of MarketplaceCommerceAnalyticsAPI interface
type MockMarketplaceCommerceAnalyticsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceCommerceAnalyticsAPIMockRecorder
}

// MockMarketplaceCommerceAnalyticsAPIMockRecorder is the mock recorder for MockMarketplaceCommerceAnalyticsAPI
type MockMarketplaceCommerceAnalyticsAPIMockRecorder struct {
	mock *MockMarketplaceCommerceAnalyticsAPI
}

// NewMockMarketplaceCommerceAnalyticsAPI creates a new mock instance
func NewMockMarketplaceCommerceAnalyticsAPI(ctrl *gomock.Controller) *MockMarketplaceCommerceAnalyticsAPI {
	mock := &MockMarketplaceCommerceAnalyticsAPI{ctrl: ctrl}
	mock.recorder = &MockMarketplaceCommerceAnalyticsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketplaceCommerceAnalyticsAPI) EXPECT() *MockMarketplaceCommerceAnalyticsAPIMockRecorder {
	return m.recorder
}

// GenerateDataSet mocks base method
func (m *MockMarketplaceCommerceAnalyticsAPI) GenerateDataSet(arg0 *marketplacecommerceanalytics.GenerateDataSetInput) (*marketplacecommerceanalytics.GenerateDataSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDataSet", arg0)
	ret0, _ := ret[0].(*marketplacecommerceanalytics.GenerateDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDataSet indicates an expected call of GenerateDataSet
func (mr *MockMarketplaceCommerceAnalyticsAPIMockRecorder) GenerateDataSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDataSet", reflect.TypeOf((*MockMarketplaceCommerceAnalyticsAPI)(nil).GenerateDataSet), arg0)
}

// GenerateDataSetRequest mocks base method
func (m *MockMarketplaceCommerceAnalyticsAPI) GenerateDataSetRequest(arg0 *marketplacecommerceanalytics.GenerateDataSetInput) (*request.Request, *marketplacecommerceanalytics.GenerateDataSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDataSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplacecommerceanalytics.GenerateDataSetOutput)
	return ret0, ret1
}

// GenerateDataSetRequest indicates an expected call of GenerateDataSetRequest
func (mr *MockMarketplaceCommerceAnalyticsAPIMockRecorder) GenerateDataSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDataSetRequest", reflect.TypeOf((*MockMarketplaceCommerceAnalyticsAPI)(nil).GenerateDataSetRequest), arg0)
}

// GenerateDataSetWithContext mocks base method
func (m *MockMarketplaceCommerceAnalyticsAPI) GenerateDataSetWithContext(arg0 context.Context, arg1 *marketplacecommerceanalytics.GenerateDataSetInput, arg2 ...request.Option) (*marketplacecommerceanalytics.GenerateDataSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateDataSetWithContext", varargs...)
	ret0, _ := ret[0].(*marketplacecommerceanalytics.GenerateDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateDataSetWithContext indicates an expected call of GenerateDataSetWithContext
func (mr *MockMarketplaceCommerceAnalyticsAPIMockRecorder) GenerateDataSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDataSetWithContext", reflect.TypeOf((*MockMarketplaceCommerceAnalyticsAPI)(nil).GenerateDataSetWithContext), varargs...)
}

// StartSupportDataExport mocks base method
func (m *MockMarketplaceCommerceAnalyticsAPI) StartSupportDataExport(arg0 *marketplacecommerceanalytics.StartSupportDataExportInput) (*marketplacecommerceanalytics.StartSupportDataExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSupportDataExport", arg0)
	ret0, _ := ret[0].(*marketplacecommerceanalytics.StartSupportDataExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSupportDataExport indicates an expected call of StartSupportDataExport
func (mr *MockMarketplaceCommerceAnalyticsAPIMockRecorder) StartSupportDataExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSupportDataExport", reflect.TypeOf((*MockMarketplaceCommerceAnalyticsAPI)(nil).StartSupportDataExport), arg0)
}

// StartSupportDataExportRequest mocks base method
func (m *MockMarketplaceCommerceAnalyticsAPI) StartSupportDataExportRequest(arg0 *marketplacecommerceanalytics.StartSupportDataExportInput) (*request.Request, *marketplacecommerceanalytics.StartSupportDataExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSupportDataExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*marketplacecommerceanalytics.StartSupportDataExportOutput)
	return ret0, ret1
}

// StartSupportDataExportRequest indicates an expected call of StartSupportDataExportRequest
func (mr *MockMarketplaceCommerceAnalyticsAPIMockRecorder) StartSupportDataExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSupportDataExportRequest", reflect.TypeOf((*MockMarketplaceCommerceAnalyticsAPI)(nil).StartSupportDataExportRequest), arg0)
}

// StartSupportDataExportWithContext mocks base method
func (m *MockMarketplaceCommerceAnalyticsAPI) StartSupportDataExportWithContext(arg0 context.Context, arg1 *marketplacecommerceanalytics.StartSupportDataExportInput, arg2 ...request.Option) (*marketplacecommerceanalytics.StartSupportDataExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSupportDataExportWithContext", varargs...)
	ret0, _ := ret[0].(*marketplacecommerceanalytics.StartSupportDataExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSupportDataExportWithContext indicates an expected call of StartSupportDataExportWithContext
func (mr *MockMarketplaceCommerceAnalyticsAPIMockRecorder) StartSupportDataExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSupportDataExportWithContext", reflect.TypeOf((*MockMarketplaceCommerceAnalyticsAPI)(nil).StartSupportDataExportWithContext), varargs...)
}

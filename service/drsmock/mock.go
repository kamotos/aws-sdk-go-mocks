// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/drs/drsiface (interfaces: DrsAPI)

// Package drsmock is a generated GoMock package.
package drsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	drs "github.com/aws/aws-sdk-go/service/drs"
	gomock "github.com/golang/mock/gomock"
)

// MockDrsAPI is a mock of DrsAPI interface.
type MockDrsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDrsAPIMockRecorder
}

// MockDrsAPIMockRecorder is the mock recorder for MockDrsAPI.
type MockDrsAPIMockRecorder struct {
	mock *MockDrsAPI
}

// NewMockDrsAPI creates a new mock instance.
func NewMockDrsAPI(ctrl *gomock.Controller) *MockDrsAPI {
	mock := &MockDrsAPI{ctrl: ctrl}
	mock.recorder = &MockDrsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrsAPI) EXPECT() *MockDrsAPIMockRecorder {
	return m.recorder
}

// CreateReplicationConfigurationTemplate mocks base method.
func (m *MockDrsAPI) CreateReplicationConfigurationTemplate(arg0 *drs.CreateReplicationConfigurationTemplateInput) (*drs.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplate indicates an expected call of CreateReplicationConfigurationTemplate.
func (mr *MockDrsAPIMockRecorder) CreateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).CreateReplicationConfigurationTemplate), arg0)
}

// CreateReplicationConfigurationTemplateRequest mocks base method.
func (m *MockDrsAPI) CreateReplicationConfigurationTemplateRequest(arg0 *drs.CreateReplicationConfigurationTemplateInput) (*request.Request, *drs.CreateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.CreateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateRequest indicates an expected call of CreateReplicationConfigurationTemplateRequest.
func (mr *MockDrsAPIMockRecorder) CreateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).CreateReplicationConfigurationTemplateRequest), arg0)
}

// CreateReplicationConfigurationTemplateWithContext mocks base method.
func (m *MockDrsAPI) CreateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.CreateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*drs.CreateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.CreateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplicationConfigurationTemplateWithContext indicates an expected call of CreateReplicationConfigurationTemplateWithContext.
func (mr *MockDrsAPIMockRecorder) CreateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).CreateReplicationConfigurationTemplateWithContext), varargs...)
}

// DeleteJob mocks base method.
func (m *MockDrsAPI) DeleteJob(arg0 *drs.DeleteJobInput) (*drs.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*drs.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockDrsAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockDrsAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method.
func (m *MockDrsAPI) DeleteJobRequest(arg0 *drs.DeleteJobInput) (*request.Request, *drs.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest.
func (mr *MockDrsAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method.
func (m *MockDrsAPI) DeleteJobWithContext(arg0 context.Context, arg1 *drs.DeleteJobInput, arg2 ...request.Option) (*drs.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext.
func (mr *MockDrsAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteRecoveryInstance mocks base method.
func (m *MockDrsAPI) DeleteRecoveryInstance(arg0 *drs.DeleteRecoveryInstanceInput) (*drs.DeleteRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryInstance", arg0)
	ret0, _ := ret[0].(*drs.DeleteRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryInstance indicates an expected call of DeleteRecoveryInstance.
func (mr *MockDrsAPIMockRecorder) DeleteRecoveryInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryInstance", reflect.TypeOf((*MockDrsAPI)(nil).DeleteRecoveryInstance), arg0)
}

// DeleteRecoveryInstanceRequest mocks base method.
func (m *MockDrsAPI) DeleteRecoveryInstanceRequest(arg0 *drs.DeleteRecoveryInstanceInput) (*request.Request, *drs.DeleteRecoveryInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecoveryInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteRecoveryInstanceOutput)
	return ret0, ret1
}

// DeleteRecoveryInstanceRequest indicates an expected call of DeleteRecoveryInstanceRequest.
func (mr *MockDrsAPIMockRecorder) DeleteRecoveryInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryInstanceRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteRecoveryInstanceRequest), arg0)
}

// DeleteRecoveryInstanceWithContext mocks base method.
func (m *MockDrsAPI) DeleteRecoveryInstanceWithContext(arg0 context.Context, arg1 *drs.DeleteRecoveryInstanceInput, arg2 ...request.Option) (*drs.DeleteRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecoveryInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecoveryInstanceWithContext indicates an expected call of DeleteRecoveryInstanceWithContext.
func (mr *MockDrsAPIMockRecorder) DeleteRecoveryInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecoveryInstanceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteRecoveryInstanceWithContext), varargs...)
}

// DeleteReplicationConfigurationTemplate mocks base method.
func (m *MockDrsAPI) DeleteReplicationConfigurationTemplate(arg0 *drs.DeleteReplicationConfigurationTemplateInput) (*drs.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplate indicates an expected call of DeleteReplicationConfigurationTemplate.
func (mr *MockDrsAPIMockRecorder) DeleteReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).DeleteReplicationConfigurationTemplate), arg0)
}

// DeleteReplicationConfigurationTemplateRequest mocks base method.
func (m *MockDrsAPI) DeleteReplicationConfigurationTemplateRequest(arg0 *drs.DeleteReplicationConfigurationTemplateInput) (*request.Request, *drs.DeleteReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateRequest indicates an expected call of DeleteReplicationConfigurationTemplateRequest.
func (mr *MockDrsAPIMockRecorder) DeleteReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteReplicationConfigurationTemplateRequest), arg0)
}

// DeleteReplicationConfigurationTemplateWithContext mocks base method.
func (m *MockDrsAPI) DeleteReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.DeleteReplicationConfigurationTemplateInput, arg2 ...request.Option) (*drs.DeleteReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReplicationConfigurationTemplateWithContext indicates an expected call of DeleteReplicationConfigurationTemplateWithContext.
func (mr *MockDrsAPIMockRecorder) DeleteReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteReplicationConfigurationTemplateWithContext), varargs...)
}

// DeleteSourceServer mocks base method.
func (m *MockDrsAPI) DeleteSourceServer(arg0 *drs.DeleteSourceServerInput) (*drs.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServer", arg0)
	ret0, _ := ret[0].(*drs.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServer indicates an expected call of DeleteSourceServer.
func (mr *MockDrsAPIMockRecorder) DeleteSourceServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServer", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceServer), arg0)
}

// DeleteSourceServerRequest mocks base method.
func (m *MockDrsAPI) DeleteSourceServerRequest(arg0 *drs.DeleteSourceServerInput) (*request.Request, *drs.DeleteSourceServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DeleteSourceServerOutput)
	return ret0, ret1
}

// DeleteSourceServerRequest indicates an expected call of DeleteSourceServerRequest.
func (mr *MockDrsAPIMockRecorder) DeleteSourceServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerRequest", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceServerRequest), arg0)
}

// DeleteSourceServerWithContext mocks base method.
func (m *MockDrsAPI) DeleteSourceServerWithContext(arg0 context.Context, arg1 *drs.DeleteSourceServerInput, arg2 ...request.Option) (*drs.DeleteSourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSourceServerWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DeleteSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceServerWithContext indicates an expected call of DeleteSourceServerWithContext.
func (mr *MockDrsAPIMockRecorder) DeleteSourceServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceServerWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DeleteSourceServerWithContext), varargs...)
}

// DescribeJobLogItems mocks base method.
func (m *MockDrsAPI) DescribeJobLogItems(arg0 *drs.DescribeJobLogItemsInput) (*drs.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItems", arg0)
	ret0, _ := ret[0].(*drs.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItems indicates an expected call of DescribeJobLogItems.
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItems", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItems), arg0)
}

// DescribeJobLogItemsPages mocks base method.
func (m *MockDrsAPI) DescribeJobLogItemsPages(arg0 *drs.DescribeJobLogItemsInput, arg1 func(*drs.DescribeJobLogItemsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPages indicates an expected call of DescribeJobLogItemsPages.
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsPages), arg0, arg1)
}

// DescribeJobLogItemsPagesWithContext mocks base method.
func (m *MockDrsAPI) DescribeJobLogItemsPagesWithContext(arg0 context.Context, arg1 *drs.DescribeJobLogItemsInput, arg2 func(*drs.DescribeJobLogItemsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobLogItemsPagesWithContext indicates an expected call of DescribeJobLogItemsPagesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsPagesWithContext), varargs...)
}

// DescribeJobLogItemsRequest mocks base method.
func (m *MockDrsAPI) DescribeJobLogItemsRequest(arg0 *drs.DescribeJobLogItemsInput) (*request.Request, *drs.DescribeJobLogItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobLogItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeJobLogItemsOutput)
	return ret0, ret1
}

// DescribeJobLogItemsRequest indicates an expected call of DescribeJobLogItemsRequest.
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsRequest), arg0)
}

// DescribeJobLogItemsWithContext mocks base method.
func (m *MockDrsAPI) DescribeJobLogItemsWithContext(arg0 context.Context, arg1 *drs.DescribeJobLogItemsInput, arg2 ...request.Option) (*drs.DescribeJobLogItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobLogItemsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeJobLogItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobLogItemsWithContext indicates an expected call of DescribeJobLogItemsWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeJobLogItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobLogItemsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobLogItemsWithContext), varargs...)
}

// DescribeJobs mocks base method.
func (m *MockDrsAPI) DescribeJobs(arg0 *drs.DescribeJobsInput) (*drs.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobs", arg0)
	ret0, _ := ret[0].(*drs.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobs indicates an expected call of DescribeJobs.
func (mr *MockDrsAPIMockRecorder) DescribeJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobs", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobs), arg0)
}

// DescribeJobsPages mocks base method.
func (m *MockDrsAPI) DescribeJobsPages(arg0 *drs.DescribeJobsInput, arg1 func(*drs.DescribeJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPages indicates an expected call of DescribeJobsPages.
func (mr *MockDrsAPIMockRecorder) DescribeJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsPages), arg0, arg1)
}

// DescribeJobsPagesWithContext mocks base method.
func (m *MockDrsAPI) DescribeJobsPagesWithContext(arg0 context.Context, arg1 *drs.DescribeJobsInput, arg2 func(*drs.DescribeJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeJobsPagesWithContext indicates an expected call of DescribeJobsPagesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsPagesWithContext), varargs...)
}

// DescribeJobsRequest mocks base method.
func (m *MockDrsAPI) DescribeJobsRequest(arg0 *drs.DescribeJobsInput) (*request.Request, *drs.DescribeJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeJobsOutput)
	return ret0, ret1
}

// DescribeJobsRequest indicates an expected call of DescribeJobsRequest.
func (mr *MockDrsAPIMockRecorder) DescribeJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsRequest), arg0)
}

// DescribeJobsWithContext mocks base method.
func (m *MockDrsAPI) DescribeJobsWithContext(arg0 context.Context, arg1 *drs.DescribeJobsInput, arg2 ...request.Option) (*drs.DescribeJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeJobsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJobsWithContext indicates an expected call of DescribeJobsWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJobsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeJobsWithContext), varargs...)
}

// DescribeRecoveryInstances mocks base method.
func (m *MockDrsAPI) DescribeRecoveryInstances(arg0 *drs.DescribeRecoveryInstancesInput) (*drs.DescribeRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryInstances", arg0)
	ret0, _ := ret[0].(*drs.DescribeRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoveryInstances indicates an expected call of DescribeRecoveryInstances.
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstances", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstances), arg0)
}

// DescribeRecoveryInstancesPages mocks base method.
func (m *MockDrsAPI) DescribeRecoveryInstancesPages(arg0 *drs.DescribeRecoveryInstancesInput, arg1 func(*drs.DescribeRecoveryInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoveryInstancesPages indicates an expected call of DescribeRecoveryInstancesPages.
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesPages), arg0, arg1)
}

// DescribeRecoveryInstancesPagesWithContext mocks base method.
func (m *MockDrsAPI) DescribeRecoveryInstancesPagesWithContext(arg0 context.Context, arg1 *drs.DescribeRecoveryInstancesInput, arg2 func(*drs.DescribeRecoveryInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoveryInstancesPagesWithContext indicates an expected call of DescribeRecoveryInstancesPagesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesPagesWithContext), varargs...)
}

// DescribeRecoveryInstancesRequest mocks base method.
func (m *MockDrsAPI) DescribeRecoveryInstancesRequest(arg0 *drs.DescribeRecoveryInstancesInput) (*request.Request, *drs.DescribeRecoveryInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeRecoveryInstancesOutput)
	return ret0, ret1
}

// DescribeRecoveryInstancesRequest indicates an expected call of DescribeRecoveryInstancesRequest.
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesRequest), arg0)
}

// DescribeRecoveryInstancesWithContext mocks base method.
func (m *MockDrsAPI) DescribeRecoveryInstancesWithContext(arg0 context.Context, arg1 *drs.DescribeRecoveryInstancesInput, arg2 ...request.Option) (*drs.DescribeRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoveryInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoveryInstancesWithContext indicates an expected call of DescribeRecoveryInstancesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeRecoveryInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoveryInstancesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoveryInstancesWithContext), varargs...)
}

// DescribeRecoverySnapshots mocks base method.
func (m *MockDrsAPI) DescribeRecoverySnapshots(arg0 *drs.DescribeRecoverySnapshotsInput) (*drs.DescribeRecoverySnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshots", arg0)
	ret0, _ := ret[0].(*drs.DescribeRecoverySnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoverySnapshots indicates an expected call of DescribeRecoverySnapshots.
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshots", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshots), arg0)
}

// DescribeRecoverySnapshotsPages mocks base method.
func (m *MockDrsAPI) DescribeRecoverySnapshotsPages(arg0 *drs.DescribeRecoverySnapshotsInput, arg1 func(*drs.DescribeRecoverySnapshotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoverySnapshotsPages indicates an expected call of DescribeRecoverySnapshotsPages.
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsPages), arg0, arg1)
}

// DescribeRecoverySnapshotsPagesWithContext mocks base method.
func (m *MockDrsAPI) DescribeRecoverySnapshotsPagesWithContext(arg0 context.Context, arg1 *drs.DescribeRecoverySnapshotsInput, arg2 func(*drs.DescribeRecoverySnapshotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRecoverySnapshotsPagesWithContext indicates an expected call of DescribeRecoverySnapshotsPagesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsPagesWithContext), varargs...)
}

// DescribeRecoverySnapshotsRequest mocks base method.
func (m *MockDrsAPI) DescribeRecoverySnapshotsRequest(arg0 *drs.DescribeRecoverySnapshotsInput) (*request.Request, *drs.DescribeRecoverySnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeRecoverySnapshotsOutput)
	return ret0, ret1
}

// DescribeRecoverySnapshotsRequest indicates an expected call of DescribeRecoverySnapshotsRequest.
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsRequest), arg0)
}

// DescribeRecoverySnapshotsWithContext mocks base method.
func (m *MockDrsAPI) DescribeRecoverySnapshotsWithContext(arg0 context.Context, arg1 *drs.DescribeRecoverySnapshotsInput, arg2 ...request.Option) (*drs.DescribeRecoverySnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRecoverySnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeRecoverySnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRecoverySnapshotsWithContext indicates an expected call of DescribeRecoverySnapshotsWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeRecoverySnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRecoverySnapshotsWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeRecoverySnapshotsWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplates mocks base method.
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplates(arg0 *drs.DescribeReplicationConfigurationTemplatesInput) (*drs.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplates", arg0)
	ret0, _ := ret[0].(*drs.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplates indicates an expected call of DescribeReplicationConfigurationTemplates.
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplates", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplates), arg0)
}

// DescribeReplicationConfigurationTemplatesPages mocks base method.
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesPages(arg0 *drs.DescribeReplicationConfigurationTemplatesInput, arg1 func(*drs.DescribeReplicationConfigurationTemplatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPages indicates an expected call of DescribeReplicationConfigurationTemplatesPages.
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesPages), arg0, arg1)
}

// DescribeReplicationConfigurationTemplatesPagesWithContext mocks base method.
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0 context.Context, arg1 *drs.DescribeReplicationConfigurationTemplatesInput, arg2 func(*drs.DescribeReplicationConfigurationTemplatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeReplicationConfigurationTemplatesPagesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesPagesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesPagesWithContext), varargs...)
}

// DescribeReplicationConfigurationTemplatesRequest mocks base method.
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesRequest(arg0 *drs.DescribeReplicationConfigurationTemplatesInput) (*request.Request, *drs.DescribeReplicationConfigurationTemplatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeReplicationConfigurationTemplatesOutput)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesRequest indicates an expected call of DescribeReplicationConfigurationTemplatesRequest.
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesRequest), arg0)
}

// DescribeReplicationConfigurationTemplatesWithContext mocks base method.
func (m *MockDrsAPI) DescribeReplicationConfigurationTemplatesWithContext(arg0 context.Context, arg1 *drs.DescribeReplicationConfigurationTemplatesInput, arg2 ...request.Option) (*drs.DescribeReplicationConfigurationTemplatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeReplicationConfigurationTemplatesWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeReplicationConfigurationTemplatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeReplicationConfigurationTemplatesWithContext indicates an expected call of DescribeReplicationConfigurationTemplatesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeReplicationConfigurationTemplatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeReplicationConfigurationTemplatesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeReplicationConfigurationTemplatesWithContext), varargs...)
}

// DescribeSourceServers mocks base method.
func (m *MockDrsAPI) DescribeSourceServers(arg0 *drs.DescribeSourceServersInput) (*drs.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServers", arg0)
	ret0, _ := ret[0].(*drs.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServers indicates an expected call of DescribeSourceServers.
func (mr *MockDrsAPIMockRecorder) DescribeSourceServers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServers", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServers), arg0)
}

// DescribeSourceServersPages mocks base method.
func (m *MockDrsAPI) DescribeSourceServersPages(arg0 *drs.DescribeSourceServersInput, arg1 func(*drs.DescribeSourceServersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPages indicates an expected call of DescribeSourceServersPages.
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPages", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersPages), arg0, arg1)
}

// DescribeSourceServersPagesWithContext mocks base method.
func (m *MockDrsAPI) DescribeSourceServersPagesWithContext(arg0 context.Context, arg1 *drs.DescribeSourceServersInput, arg2 func(*drs.DescribeSourceServersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSourceServersPagesWithContext indicates an expected call of DescribeSourceServersPagesWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersPagesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersPagesWithContext), varargs...)
}

// DescribeSourceServersRequest mocks base method.
func (m *MockDrsAPI) DescribeSourceServersRequest(arg0 *drs.DescribeSourceServersInput) (*request.Request, *drs.DescribeSourceServersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSourceServersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DescribeSourceServersOutput)
	return ret0, ret1
}

// DescribeSourceServersRequest indicates an expected call of DescribeSourceServersRequest.
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersRequest", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersRequest), arg0)
}

// DescribeSourceServersWithContext mocks base method.
func (m *MockDrsAPI) DescribeSourceServersWithContext(arg0 context.Context, arg1 *drs.DescribeSourceServersInput, arg2 ...request.Option) (*drs.DescribeSourceServersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSourceServersWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DescribeSourceServersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSourceServersWithContext indicates an expected call of DescribeSourceServersWithContext.
func (mr *MockDrsAPIMockRecorder) DescribeSourceServersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSourceServersWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DescribeSourceServersWithContext), varargs...)
}

// DisconnectRecoveryInstance mocks base method.
func (m *MockDrsAPI) DisconnectRecoveryInstance(arg0 *drs.DisconnectRecoveryInstanceInput) (*drs.DisconnectRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectRecoveryInstance", arg0)
	ret0, _ := ret[0].(*drs.DisconnectRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectRecoveryInstance indicates an expected call of DisconnectRecoveryInstance.
func (mr *MockDrsAPIMockRecorder) DisconnectRecoveryInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectRecoveryInstance", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectRecoveryInstance), arg0)
}

// DisconnectRecoveryInstanceRequest mocks base method.
func (m *MockDrsAPI) DisconnectRecoveryInstanceRequest(arg0 *drs.DisconnectRecoveryInstanceInput) (*request.Request, *drs.DisconnectRecoveryInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectRecoveryInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DisconnectRecoveryInstanceOutput)
	return ret0, ret1
}

// DisconnectRecoveryInstanceRequest indicates an expected call of DisconnectRecoveryInstanceRequest.
func (mr *MockDrsAPIMockRecorder) DisconnectRecoveryInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectRecoveryInstanceRequest", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectRecoveryInstanceRequest), arg0)
}

// DisconnectRecoveryInstanceWithContext mocks base method.
func (m *MockDrsAPI) DisconnectRecoveryInstanceWithContext(arg0 context.Context, arg1 *drs.DisconnectRecoveryInstanceInput, arg2 ...request.Option) (*drs.DisconnectRecoveryInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectRecoveryInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DisconnectRecoveryInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectRecoveryInstanceWithContext indicates an expected call of DisconnectRecoveryInstanceWithContext.
func (mr *MockDrsAPIMockRecorder) DisconnectRecoveryInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectRecoveryInstanceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectRecoveryInstanceWithContext), varargs...)
}

// DisconnectSourceServer mocks base method.
func (m *MockDrsAPI) DisconnectSourceServer(arg0 *drs.DisconnectSourceServerInput) (*drs.DisconnectSourceServerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectSourceServer", arg0)
	ret0, _ := ret[0].(*drs.DisconnectSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectSourceServer indicates an expected call of DisconnectSourceServer.
func (mr *MockDrsAPIMockRecorder) DisconnectSourceServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectSourceServer", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectSourceServer), arg0)
}

// DisconnectSourceServerRequest mocks base method.
func (m *MockDrsAPI) DisconnectSourceServerRequest(arg0 *drs.DisconnectSourceServerInput) (*request.Request, *drs.DisconnectSourceServerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectSourceServerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.DisconnectSourceServerOutput)
	return ret0, ret1
}

// DisconnectSourceServerRequest indicates an expected call of DisconnectSourceServerRequest.
func (mr *MockDrsAPIMockRecorder) DisconnectSourceServerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectSourceServerRequest", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectSourceServerRequest), arg0)
}

// DisconnectSourceServerWithContext mocks base method.
func (m *MockDrsAPI) DisconnectSourceServerWithContext(arg0 context.Context, arg1 *drs.DisconnectSourceServerInput, arg2 ...request.Option) (*drs.DisconnectSourceServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectSourceServerWithContext", varargs...)
	ret0, _ := ret[0].(*drs.DisconnectSourceServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectSourceServerWithContext indicates an expected call of DisconnectSourceServerWithContext.
func (mr *MockDrsAPIMockRecorder) DisconnectSourceServerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectSourceServerWithContext", reflect.TypeOf((*MockDrsAPI)(nil).DisconnectSourceServerWithContext), varargs...)
}

// GetFailbackReplicationConfiguration mocks base method.
func (m *MockDrsAPI) GetFailbackReplicationConfiguration(arg0 *drs.GetFailbackReplicationConfigurationInput) (*drs.GetFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailbackReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.GetFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailbackReplicationConfiguration indicates an expected call of GetFailbackReplicationConfiguration.
func (mr *MockDrsAPIMockRecorder) GetFailbackReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailbackReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).GetFailbackReplicationConfiguration), arg0)
}

// GetFailbackReplicationConfigurationRequest mocks base method.
func (m *MockDrsAPI) GetFailbackReplicationConfigurationRequest(arg0 *drs.GetFailbackReplicationConfigurationInput) (*request.Request, *drs.GetFailbackReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailbackReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.GetFailbackReplicationConfigurationOutput)
	return ret0, ret1
}

// GetFailbackReplicationConfigurationRequest indicates an expected call of GetFailbackReplicationConfigurationRequest.
func (mr *MockDrsAPIMockRecorder) GetFailbackReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailbackReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).GetFailbackReplicationConfigurationRequest), arg0)
}

// GetFailbackReplicationConfigurationWithContext mocks base method.
func (m *MockDrsAPI) GetFailbackReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.GetFailbackReplicationConfigurationInput, arg2 ...request.Option) (*drs.GetFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFailbackReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.GetFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailbackReplicationConfigurationWithContext indicates an expected call of GetFailbackReplicationConfigurationWithContext.
func (mr *MockDrsAPIMockRecorder) GetFailbackReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailbackReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).GetFailbackReplicationConfigurationWithContext), varargs...)
}

// GetLaunchConfiguration mocks base method.
func (m *MockDrsAPI) GetLaunchConfiguration(arg0 *drs.GetLaunchConfigurationInput) (*drs.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*drs.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfiguration indicates an expected call of GetLaunchConfiguration.
func (mr *MockDrsAPIMockRecorder) GetLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).GetLaunchConfiguration), arg0)
}

// GetLaunchConfigurationRequest mocks base method.
func (m *MockDrsAPI) GetLaunchConfigurationRequest(arg0 *drs.GetLaunchConfigurationInput) (*request.Request, *drs.GetLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.GetLaunchConfigurationOutput)
	return ret0, ret1
}

// GetLaunchConfigurationRequest indicates an expected call of GetLaunchConfigurationRequest.
func (mr *MockDrsAPIMockRecorder) GetLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).GetLaunchConfigurationRequest), arg0)
}

// GetLaunchConfigurationWithContext mocks base method.
func (m *MockDrsAPI) GetLaunchConfigurationWithContext(arg0 context.Context, arg1 *drs.GetLaunchConfigurationInput, arg2 ...request.Option) (*drs.GetLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.GetLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchConfigurationWithContext indicates an expected call of GetLaunchConfigurationWithContext.
func (mr *MockDrsAPIMockRecorder) GetLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).GetLaunchConfigurationWithContext), varargs...)
}

// GetReplicationConfiguration mocks base method.
func (m *MockDrsAPI) GetReplicationConfiguration(arg0 *drs.GetReplicationConfigurationInput) (*drs.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfiguration indicates an expected call of GetReplicationConfiguration.
func (mr *MockDrsAPIMockRecorder) GetReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).GetReplicationConfiguration), arg0)
}

// GetReplicationConfigurationRequest mocks base method.
func (m *MockDrsAPI) GetReplicationConfigurationRequest(arg0 *drs.GetReplicationConfigurationInput) (*request.Request, *drs.GetReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.GetReplicationConfigurationOutput)
	return ret0, ret1
}

// GetReplicationConfigurationRequest indicates an expected call of GetReplicationConfigurationRequest.
func (mr *MockDrsAPIMockRecorder) GetReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).GetReplicationConfigurationRequest), arg0)
}

// GetReplicationConfigurationWithContext mocks base method.
func (m *MockDrsAPI) GetReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.GetReplicationConfigurationInput, arg2 ...request.Option) (*drs.GetReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.GetReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicationConfigurationWithContext indicates an expected call of GetReplicationConfigurationWithContext.
func (mr *MockDrsAPIMockRecorder) GetReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).GetReplicationConfigurationWithContext), varargs...)
}

// InitializeService mocks base method.
func (m *MockDrsAPI) InitializeService(arg0 *drs.InitializeServiceInput) (*drs.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeService", arg0)
	ret0, _ := ret[0].(*drs.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeService indicates an expected call of InitializeService.
func (mr *MockDrsAPIMockRecorder) InitializeService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeService", reflect.TypeOf((*MockDrsAPI)(nil).InitializeService), arg0)
}

// InitializeServiceRequest mocks base method.
func (m *MockDrsAPI) InitializeServiceRequest(arg0 *drs.InitializeServiceInput) (*request.Request, *drs.InitializeServiceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeServiceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.InitializeServiceOutput)
	return ret0, ret1
}

// InitializeServiceRequest indicates an expected call of InitializeServiceRequest.
func (mr *MockDrsAPIMockRecorder) InitializeServiceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceRequest", reflect.TypeOf((*MockDrsAPI)(nil).InitializeServiceRequest), arg0)
}

// InitializeServiceWithContext mocks base method.
func (m *MockDrsAPI) InitializeServiceWithContext(arg0 context.Context, arg1 *drs.InitializeServiceInput, arg2 ...request.Option) (*drs.InitializeServiceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeServiceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.InitializeServiceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeServiceWithContext indicates an expected call of InitializeServiceWithContext.
func (mr *MockDrsAPIMockRecorder) InitializeServiceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeServiceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).InitializeServiceWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDrsAPI) ListTagsForResource(arg0 *drs.ListTagsForResourceInput) (*drs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*drs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDrsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDrsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockDrsAPI) ListTagsForResourceRequest(arg0 *drs.ListTagsForResourceInput) (*request.Request, *drs.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockDrsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDrsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockDrsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *drs.ListTagsForResourceInput, arg2 ...request.Option) (*drs.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockDrsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RetryDataReplication mocks base method.
func (m *MockDrsAPI) RetryDataReplication(arg0 *drs.RetryDataReplicationInput) (*drs.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplication", arg0)
	ret0, _ := ret[0].(*drs.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplication indicates an expected call of RetryDataReplication.
func (mr *MockDrsAPIMockRecorder) RetryDataReplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplication", reflect.TypeOf((*MockDrsAPI)(nil).RetryDataReplication), arg0)
}

// RetryDataReplicationRequest mocks base method.
func (m *MockDrsAPI) RetryDataReplicationRequest(arg0 *drs.RetryDataReplicationInput) (*request.Request, *drs.RetryDataReplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDataReplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.RetryDataReplicationOutput)
	return ret0, ret1
}

// RetryDataReplicationRequest indicates an expected call of RetryDataReplicationRequest.
func (mr *MockDrsAPIMockRecorder) RetryDataReplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationRequest", reflect.TypeOf((*MockDrsAPI)(nil).RetryDataReplicationRequest), arg0)
}

// RetryDataReplicationWithContext mocks base method.
func (m *MockDrsAPI) RetryDataReplicationWithContext(arg0 context.Context, arg1 *drs.RetryDataReplicationInput, arg2 ...request.Option) (*drs.RetryDataReplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetryDataReplicationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.RetryDataReplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryDataReplicationWithContext indicates an expected call of RetryDataReplicationWithContext.
func (mr *MockDrsAPIMockRecorder) RetryDataReplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDataReplicationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).RetryDataReplicationWithContext), varargs...)
}

// StartFailbackLaunch mocks base method.
func (m *MockDrsAPI) StartFailbackLaunch(arg0 *drs.StartFailbackLaunchInput) (*drs.StartFailbackLaunchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFailbackLaunch", arg0)
	ret0, _ := ret[0].(*drs.StartFailbackLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFailbackLaunch indicates an expected call of StartFailbackLaunch.
func (mr *MockDrsAPIMockRecorder) StartFailbackLaunch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailbackLaunch", reflect.TypeOf((*MockDrsAPI)(nil).StartFailbackLaunch), arg0)
}

// StartFailbackLaunchRequest mocks base method.
func (m *MockDrsAPI) StartFailbackLaunchRequest(arg0 *drs.StartFailbackLaunchInput) (*request.Request, *drs.StartFailbackLaunchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFailbackLaunchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StartFailbackLaunchOutput)
	return ret0, ret1
}

// StartFailbackLaunchRequest indicates an expected call of StartFailbackLaunchRequest.
func (mr *MockDrsAPIMockRecorder) StartFailbackLaunchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailbackLaunchRequest", reflect.TypeOf((*MockDrsAPI)(nil).StartFailbackLaunchRequest), arg0)
}

// StartFailbackLaunchWithContext mocks base method.
func (m *MockDrsAPI) StartFailbackLaunchWithContext(arg0 context.Context, arg1 *drs.StartFailbackLaunchInput, arg2 ...request.Option) (*drs.StartFailbackLaunchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFailbackLaunchWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StartFailbackLaunchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFailbackLaunchWithContext indicates an expected call of StartFailbackLaunchWithContext.
func (mr *MockDrsAPIMockRecorder) StartFailbackLaunchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFailbackLaunchWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StartFailbackLaunchWithContext), varargs...)
}

// StartRecovery mocks base method.
func (m *MockDrsAPI) StartRecovery(arg0 *drs.StartRecoveryInput) (*drs.StartRecoveryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecovery", arg0)
	ret0, _ := ret[0].(*drs.StartRecoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRecovery indicates an expected call of StartRecovery.
func (mr *MockDrsAPIMockRecorder) StartRecovery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecovery", reflect.TypeOf((*MockDrsAPI)(nil).StartRecovery), arg0)
}

// StartRecoveryRequest mocks base method.
func (m *MockDrsAPI) StartRecoveryRequest(arg0 *drs.StartRecoveryInput) (*request.Request, *drs.StartRecoveryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecoveryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StartRecoveryOutput)
	return ret0, ret1
}

// StartRecoveryRequest indicates an expected call of StartRecoveryRequest.
func (mr *MockDrsAPIMockRecorder) StartRecoveryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecoveryRequest", reflect.TypeOf((*MockDrsAPI)(nil).StartRecoveryRequest), arg0)
}

// StartRecoveryWithContext mocks base method.
func (m *MockDrsAPI) StartRecoveryWithContext(arg0 context.Context, arg1 *drs.StartRecoveryInput, arg2 ...request.Option) (*drs.StartRecoveryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartRecoveryWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StartRecoveryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRecoveryWithContext indicates an expected call of StartRecoveryWithContext.
func (mr *MockDrsAPIMockRecorder) StartRecoveryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecoveryWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StartRecoveryWithContext), varargs...)
}

// StopFailback mocks base method.
func (m *MockDrsAPI) StopFailback(arg0 *drs.StopFailbackInput) (*drs.StopFailbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFailback", arg0)
	ret0, _ := ret[0].(*drs.StopFailbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFailback indicates an expected call of StopFailback.
func (mr *MockDrsAPIMockRecorder) StopFailback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFailback", reflect.TypeOf((*MockDrsAPI)(nil).StopFailback), arg0)
}

// StopFailbackRequest mocks base method.
func (m *MockDrsAPI) StopFailbackRequest(arg0 *drs.StopFailbackInput) (*request.Request, *drs.StopFailbackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFailbackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.StopFailbackOutput)
	return ret0, ret1
}

// StopFailbackRequest indicates an expected call of StopFailbackRequest.
func (mr *MockDrsAPIMockRecorder) StopFailbackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFailbackRequest", reflect.TypeOf((*MockDrsAPI)(nil).StopFailbackRequest), arg0)
}

// StopFailbackWithContext mocks base method.
func (m *MockDrsAPI) StopFailbackWithContext(arg0 context.Context, arg1 *drs.StopFailbackInput, arg2 ...request.Option) (*drs.StopFailbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopFailbackWithContext", varargs...)
	ret0, _ := ret[0].(*drs.StopFailbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopFailbackWithContext indicates an expected call of StopFailbackWithContext.
func (mr *MockDrsAPIMockRecorder) StopFailbackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFailbackWithContext", reflect.TypeOf((*MockDrsAPI)(nil).StopFailbackWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockDrsAPI) TagResource(arg0 *drs.TagResourceInput) (*drs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*drs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockDrsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDrsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockDrsAPI) TagResourceRequest(arg0 *drs.TagResourceInput) (*request.Request, *drs.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockDrsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDrsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockDrsAPI) TagResourceWithContext(arg0 context.Context, arg1 *drs.TagResourceInput, arg2 ...request.Option) (*drs.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockDrsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).TagResourceWithContext), varargs...)
}

// TerminateRecoveryInstances mocks base method.
func (m *MockDrsAPI) TerminateRecoveryInstances(arg0 *drs.TerminateRecoveryInstancesInput) (*drs.TerminateRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateRecoveryInstances", arg0)
	ret0, _ := ret[0].(*drs.TerminateRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateRecoveryInstances indicates an expected call of TerminateRecoveryInstances.
func (mr *MockDrsAPIMockRecorder) TerminateRecoveryInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateRecoveryInstances", reflect.TypeOf((*MockDrsAPI)(nil).TerminateRecoveryInstances), arg0)
}

// TerminateRecoveryInstancesRequest mocks base method.
func (m *MockDrsAPI) TerminateRecoveryInstancesRequest(arg0 *drs.TerminateRecoveryInstancesInput) (*request.Request, *drs.TerminateRecoveryInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateRecoveryInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.TerminateRecoveryInstancesOutput)
	return ret0, ret1
}

// TerminateRecoveryInstancesRequest indicates an expected call of TerminateRecoveryInstancesRequest.
func (mr *MockDrsAPIMockRecorder) TerminateRecoveryInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateRecoveryInstancesRequest", reflect.TypeOf((*MockDrsAPI)(nil).TerminateRecoveryInstancesRequest), arg0)
}

// TerminateRecoveryInstancesWithContext mocks base method.
func (m *MockDrsAPI) TerminateRecoveryInstancesWithContext(arg0 context.Context, arg1 *drs.TerminateRecoveryInstancesInput, arg2 ...request.Option) (*drs.TerminateRecoveryInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateRecoveryInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*drs.TerminateRecoveryInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateRecoveryInstancesWithContext indicates an expected call of TerminateRecoveryInstancesWithContext.
func (mr *MockDrsAPIMockRecorder) TerminateRecoveryInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateRecoveryInstancesWithContext", reflect.TypeOf((*MockDrsAPI)(nil).TerminateRecoveryInstancesWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockDrsAPI) UntagResource(arg0 *drs.UntagResourceInput) (*drs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*drs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockDrsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDrsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockDrsAPI) UntagResourceRequest(arg0 *drs.UntagResourceInput) (*request.Request, *drs.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockDrsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDrsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockDrsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *drs.UntagResourceInput, arg2 ...request.Option) (*drs.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockDrsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateFailbackReplicationConfiguration mocks base method.
func (m *MockDrsAPI) UpdateFailbackReplicationConfiguration(arg0 *drs.UpdateFailbackReplicationConfigurationInput) (*drs.UpdateFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFailbackReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.UpdateFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFailbackReplicationConfiguration indicates an expected call of UpdateFailbackReplicationConfiguration.
func (mr *MockDrsAPIMockRecorder) UpdateFailbackReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailbackReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).UpdateFailbackReplicationConfiguration), arg0)
}

// UpdateFailbackReplicationConfigurationRequest mocks base method.
func (m *MockDrsAPI) UpdateFailbackReplicationConfigurationRequest(arg0 *drs.UpdateFailbackReplicationConfigurationInput) (*request.Request, *drs.UpdateFailbackReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFailbackReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateFailbackReplicationConfigurationOutput)
	return ret0, ret1
}

// UpdateFailbackReplicationConfigurationRequest indicates an expected call of UpdateFailbackReplicationConfigurationRequest.
func (mr *MockDrsAPIMockRecorder) UpdateFailbackReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailbackReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateFailbackReplicationConfigurationRequest), arg0)
}

// UpdateFailbackReplicationConfigurationWithContext mocks base method.
func (m *MockDrsAPI) UpdateFailbackReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.UpdateFailbackReplicationConfigurationInput, arg2 ...request.Option) (*drs.UpdateFailbackReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFailbackReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateFailbackReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFailbackReplicationConfigurationWithContext indicates an expected call of UpdateFailbackReplicationConfigurationWithContext.
func (mr *MockDrsAPIMockRecorder) UpdateFailbackReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailbackReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateFailbackReplicationConfigurationWithContext), varargs...)
}

// UpdateLaunchConfiguration mocks base method.
func (m *MockDrsAPI) UpdateLaunchConfiguration(arg0 *drs.UpdateLaunchConfigurationInput) (*drs.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfiguration", arg0)
	ret0, _ := ret[0].(*drs.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfiguration indicates an expected call of UpdateLaunchConfiguration.
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfiguration), arg0)
}

// UpdateLaunchConfigurationRequest mocks base method.
func (m *MockDrsAPI) UpdateLaunchConfigurationRequest(arg0 *drs.UpdateLaunchConfigurationInput) (*request.Request, *drs.UpdateLaunchConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateLaunchConfigurationOutput)
	return ret0, ret1
}

// UpdateLaunchConfigurationRequest indicates an expected call of UpdateLaunchConfigurationRequest.
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfigurationRequest), arg0)
}

// UpdateLaunchConfigurationWithContext mocks base method.
func (m *MockDrsAPI) UpdateLaunchConfigurationWithContext(arg0 context.Context, arg1 *drs.UpdateLaunchConfigurationInput, arg2 ...request.Option) (*drs.UpdateLaunchConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateLaunchConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateLaunchConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLaunchConfigurationWithContext indicates an expected call of UpdateLaunchConfigurationWithContext.
func (mr *MockDrsAPIMockRecorder) UpdateLaunchConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLaunchConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateLaunchConfigurationWithContext), varargs...)
}

// UpdateReplicationConfiguration mocks base method.
func (m *MockDrsAPI) UpdateReplicationConfiguration(arg0 *drs.UpdateReplicationConfigurationInput) (*drs.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfiguration", arg0)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfiguration indicates an expected call of UpdateReplicationConfiguration.
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfiguration", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfiguration), arg0)
}

// UpdateReplicationConfigurationRequest mocks base method.
func (m *MockDrsAPI) UpdateReplicationConfigurationRequest(arg0 *drs.UpdateReplicationConfigurationInput) (*request.Request, *drs.UpdateReplicationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateReplicationConfigurationOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationRequest indicates an expected call of UpdateReplicationConfigurationRequest.
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationRequest), arg0)
}

// UpdateReplicationConfigurationTemplate mocks base method.
func (m *MockDrsAPI) UpdateReplicationConfigurationTemplate(arg0 *drs.UpdateReplicationConfigurationTemplateInput) (*drs.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplate", arg0)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplate indicates an expected call of UpdateReplicationConfigurationTemplate.
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplate", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationTemplate), arg0)
}

// UpdateReplicationConfigurationTemplateRequest mocks base method.
func (m *MockDrsAPI) UpdateReplicationConfigurationTemplateRequest(arg0 *drs.UpdateReplicationConfigurationTemplateInput) (*request.Request, *drs.UpdateReplicationConfigurationTemplateOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*drs.UpdateReplicationConfigurationTemplateOutput)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateRequest indicates an expected call of UpdateReplicationConfigurationTemplateRequest.
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationTemplateRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateRequest", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationTemplateRequest), arg0)
}

// UpdateReplicationConfigurationTemplateWithContext mocks base method.
func (m *MockDrsAPI) UpdateReplicationConfigurationTemplateWithContext(arg0 context.Context, arg1 *drs.UpdateReplicationConfigurationTemplateInput, arg2 ...request.Option) (*drs.UpdateReplicationConfigurationTemplateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationTemplateWithContext indicates an expected call of UpdateReplicationConfigurationTemplateWithContext.
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationTemplateWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationTemplateWithContext), varargs...)
}

// UpdateReplicationConfigurationWithContext mocks base method.
func (m *MockDrsAPI) UpdateReplicationConfigurationWithContext(arg0 context.Context, arg1 *drs.UpdateReplicationConfigurationInput, arg2 ...request.Option) (*drs.UpdateReplicationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*drs.UpdateReplicationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicationConfigurationWithContext indicates an expected call of UpdateReplicationConfigurationWithContext.
func (mr *MockDrsAPIMockRecorder) UpdateReplicationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationConfigurationWithContext", reflect.TypeOf((*MockDrsAPI)(nil).UpdateReplicationConfigurationWithContext), varargs...)
}

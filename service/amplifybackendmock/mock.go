// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/amplifybackend/amplifybackendiface (interfaces: AmplifyBackendAPI)

// Package amplifybackendmock is a generated GoMock package.
package amplifybackendmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	amplifybackend "github.com/aws/aws-sdk-go/service/amplifybackend"
	gomock "github.com/golang/mock/gomock"
)

// MockAmplifyBackendAPI is a mock of AmplifyBackendAPI interface.
type MockAmplifyBackendAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAmplifyBackendAPIMockRecorder
}

// MockAmplifyBackendAPIMockRecorder is the mock recorder for MockAmplifyBackendAPI.
type MockAmplifyBackendAPIMockRecorder struct {
	mock *MockAmplifyBackendAPI
}

// NewMockAmplifyBackendAPI creates a new mock instance.
func NewMockAmplifyBackendAPI(ctrl *gomock.Controller) *MockAmplifyBackendAPI {
	mock := &MockAmplifyBackendAPI{ctrl: ctrl}
	mock.recorder = &MockAmplifyBackendAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmplifyBackendAPI) EXPECT() *MockAmplifyBackendAPIMockRecorder {
	return m.recorder
}

// CloneBackend mocks base method.
func (m *MockAmplifyBackendAPI) CloneBackend(arg0 *amplifybackend.CloneBackendInput) (*amplifybackend.CloneBackendOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneBackend", arg0)
	ret0, _ := ret[0].(*amplifybackend.CloneBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneBackend indicates an expected call of CloneBackend.
func (mr *MockAmplifyBackendAPIMockRecorder) CloneBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneBackend", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CloneBackend), arg0)
}

// CloneBackendRequest mocks base method.
func (m *MockAmplifyBackendAPI) CloneBackendRequest(arg0 *amplifybackend.CloneBackendInput) (*request.Request, *amplifybackend.CloneBackendOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneBackendRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.CloneBackendOutput)
	return ret0, ret1
}

// CloneBackendRequest indicates an expected call of CloneBackendRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) CloneBackendRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneBackendRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CloneBackendRequest), arg0)
}

// CloneBackendWithContext mocks base method.
func (m *MockAmplifyBackendAPI) CloneBackendWithContext(arg0 context.Context, arg1 *amplifybackend.CloneBackendInput, arg2 ...request.Option) (*amplifybackend.CloneBackendOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloneBackendWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.CloneBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneBackendWithContext indicates an expected call of CloneBackendWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) CloneBackendWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneBackendWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CloneBackendWithContext), varargs...)
}

// CreateBackend mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackend(arg0 *amplifybackend.CreateBackendInput) (*amplifybackend.CreateBackendOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackend", arg0)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackend indicates an expected call of CreateBackend.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackend", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackend), arg0)
}

// CreateBackendAPI mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendAPI(arg0 *amplifybackend.CreateBackendAPIInput) (*amplifybackend.CreateBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendAPI", arg0)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendAPI indicates an expected call of CreateBackendAPI.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendAPI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendAPI", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendAPI), arg0)
}

// CreateBackendAPIRequest mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendAPIRequest(arg0 *amplifybackend.CreateBackendAPIInput) (*request.Request, *amplifybackend.CreateBackendAPIOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendAPIRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.CreateBackendAPIOutput)
	return ret0, ret1
}

// CreateBackendAPIRequest indicates an expected call of CreateBackendAPIRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendAPIRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendAPIRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendAPIRequest), arg0)
}

// CreateBackendAPIWithContext mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendAPIWithContext(arg0 context.Context, arg1 *amplifybackend.CreateBackendAPIInput, arg2 ...request.Option) (*amplifybackend.CreateBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackendAPIWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendAPIWithContext indicates an expected call of CreateBackendAPIWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendAPIWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendAPIWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendAPIWithContext), varargs...)
}

// CreateBackendAuth mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendAuth(arg0 *amplifybackend.CreateBackendAuthInput) (*amplifybackend.CreateBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendAuth", arg0)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendAuth indicates an expected call of CreateBackendAuth.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendAuth", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendAuth), arg0)
}

// CreateBackendAuthRequest mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendAuthRequest(arg0 *amplifybackend.CreateBackendAuthInput) (*request.Request, *amplifybackend.CreateBackendAuthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendAuthRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.CreateBackendAuthOutput)
	return ret0, ret1
}

// CreateBackendAuthRequest indicates an expected call of CreateBackendAuthRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendAuthRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendAuthRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendAuthRequest), arg0)
}

// CreateBackendAuthWithContext mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendAuthWithContext(arg0 context.Context, arg1 *amplifybackend.CreateBackendAuthInput, arg2 ...request.Option) (*amplifybackend.CreateBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackendAuthWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendAuthWithContext indicates an expected call of CreateBackendAuthWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendAuthWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendAuthWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendAuthWithContext), varargs...)
}

// CreateBackendConfig mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendConfig(arg0 *amplifybackend.CreateBackendConfigInput) (*amplifybackend.CreateBackendConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendConfig", arg0)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendConfig indicates an expected call of CreateBackendConfig.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendConfig", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendConfig), arg0)
}

// CreateBackendConfigRequest mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendConfigRequest(arg0 *amplifybackend.CreateBackendConfigInput) (*request.Request, *amplifybackend.CreateBackendConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.CreateBackendConfigOutput)
	return ret0, ret1
}

// CreateBackendConfigRequest indicates an expected call of CreateBackendConfigRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendConfigRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendConfigRequest), arg0)
}

// CreateBackendConfigWithContext mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendConfigWithContext(arg0 context.Context, arg1 *amplifybackend.CreateBackendConfigInput, arg2 ...request.Option) (*amplifybackend.CreateBackendConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackendConfigWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendConfigWithContext indicates an expected call of CreateBackendConfigWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendConfigWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendConfigWithContext), varargs...)
}

// CreateBackendRequest mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendRequest(arg0 *amplifybackend.CreateBackendInput) (*request.Request, *amplifybackend.CreateBackendOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.CreateBackendOutput)
	return ret0, ret1
}

// CreateBackendRequest indicates an expected call of CreateBackendRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendRequest), arg0)
}

// CreateBackendStorage mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendStorage(arg0 *amplifybackend.CreateBackendStorageInput) (*amplifybackend.CreateBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendStorage", arg0)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendStorage indicates an expected call of CreateBackendStorage.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendStorage", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendStorage), arg0)
}

// CreateBackendStorageRequest mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendStorageRequest(arg0 *amplifybackend.CreateBackendStorageInput) (*request.Request, *amplifybackend.CreateBackendStorageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackendStorageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.CreateBackendStorageOutput)
	return ret0, ret1
}

// CreateBackendStorageRequest indicates an expected call of CreateBackendStorageRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendStorageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendStorageRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendStorageRequest), arg0)
}

// CreateBackendStorageWithContext mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendStorageWithContext(arg0 context.Context, arg1 *amplifybackend.CreateBackendStorageInput, arg2 ...request.Option) (*amplifybackend.CreateBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackendStorageWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendStorageWithContext indicates an expected call of CreateBackendStorageWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendStorageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendStorageWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendStorageWithContext), varargs...)
}

// CreateBackendWithContext mocks base method.
func (m *MockAmplifyBackendAPI) CreateBackendWithContext(arg0 context.Context, arg1 *amplifybackend.CreateBackendInput, arg2 ...request.Option) (*amplifybackend.CreateBackendOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackendWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.CreateBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackendWithContext indicates an expected call of CreateBackendWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateBackendWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackendWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateBackendWithContext), varargs...)
}

// CreateToken mocks base method.
func (m *MockAmplifyBackendAPI) CreateToken(arg0 *amplifybackend.CreateTokenInput) (*amplifybackend.CreateTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0)
	ret0, _ := ret[0].(*amplifybackend.CreateTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateToken), arg0)
}

// CreateTokenRequest mocks base method.
func (m *MockAmplifyBackendAPI) CreateTokenRequest(arg0 *amplifybackend.CreateTokenInput) (*request.Request, *amplifybackend.CreateTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.CreateTokenOutput)
	return ret0, ret1
}

// CreateTokenRequest indicates an expected call of CreateTokenRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateTokenRequest), arg0)
}

// CreateTokenWithContext mocks base method.
func (m *MockAmplifyBackendAPI) CreateTokenWithContext(arg0 context.Context, arg1 *amplifybackend.CreateTokenInput, arg2 ...request.Option) (*amplifybackend.CreateTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTokenWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.CreateTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTokenWithContext indicates an expected call of CreateTokenWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) CreateTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).CreateTokenWithContext), varargs...)
}

// DeleteBackend mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackend(arg0 *amplifybackend.DeleteBackendInput) (*amplifybackend.DeleteBackendOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackend", arg0)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackend indicates an expected call of DeleteBackend.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackend", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackend), arg0)
}

// DeleteBackendAPI mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendAPI(arg0 *amplifybackend.DeleteBackendAPIInput) (*amplifybackend.DeleteBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendAPI", arg0)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendAPI indicates an expected call of DeleteBackendAPI.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendAPI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendAPI", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendAPI), arg0)
}

// DeleteBackendAPIRequest mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendAPIRequest(arg0 *amplifybackend.DeleteBackendAPIInput) (*request.Request, *amplifybackend.DeleteBackendAPIOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendAPIRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.DeleteBackendAPIOutput)
	return ret0, ret1
}

// DeleteBackendAPIRequest indicates an expected call of DeleteBackendAPIRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendAPIRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendAPIRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendAPIRequest), arg0)
}

// DeleteBackendAPIWithContext mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendAPIWithContext(arg0 context.Context, arg1 *amplifybackend.DeleteBackendAPIInput, arg2 ...request.Option) (*amplifybackend.DeleteBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackendAPIWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendAPIWithContext indicates an expected call of DeleteBackendAPIWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendAPIWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendAPIWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendAPIWithContext), varargs...)
}

// DeleteBackendAuth mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendAuth(arg0 *amplifybackend.DeleteBackendAuthInput) (*amplifybackend.DeleteBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendAuth", arg0)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendAuth indicates an expected call of DeleteBackendAuth.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendAuth", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendAuth), arg0)
}

// DeleteBackendAuthRequest mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendAuthRequest(arg0 *amplifybackend.DeleteBackendAuthInput) (*request.Request, *amplifybackend.DeleteBackendAuthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendAuthRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.DeleteBackendAuthOutput)
	return ret0, ret1
}

// DeleteBackendAuthRequest indicates an expected call of DeleteBackendAuthRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendAuthRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendAuthRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendAuthRequest), arg0)
}

// DeleteBackendAuthWithContext mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendAuthWithContext(arg0 context.Context, arg1 *amplifybackend.DeleteBackendAuthInput, arg2 ...request.Option) (*amplifybackend.DeleteBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackendAuthWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendAuthWithContext indicates an expected call of DeleteBackendAuthWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendAuthWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendAuthWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendAuthWithContext), varargs...)
}

// DeleteBackendRequest mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendRequest(arg0 *amplifybackend.DeleteBackendInput) (*request.Request, *amplifybackend.DeleteBackendOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.DeleteBackendOutput)
	return ret0, ret1
}

// DeleteBackendRequest indicates an expected call of DeleteBackendRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendRequest), arg0)
}

// DeleteBackendStorage mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendStorage(arg0 *amplifybackend.DeleteBackendStorageInput) (*amplifybackend.DeleteBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendStorage", arg0)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendStorage indicates an expected call of DeleteBackendStorage.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendStorage", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendStorage), arg0)
}

// DeleteBackendStorageRequest mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendStorageRequest(arg0 *amplifybackend.DeleteBackendStorageInput) (*request.Request, *amplifybackend.DeleteBackendStorageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackendStorageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.DeleteBackendStorageOutput)
	return ret0, ret1
}

// DeleteBackendStorageRequest indicates an expected call of DeleteBackendStorageRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendStorageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendStorageRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendStorageRequest), arg0)
}

// DeleteBackendStorageWithContext mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendStorageWithContext(arg0 context.Context, arg1 *amplifybackend.DeleteBackendStorageInput, arg2 ...request.Option) (*amplifybackend.DeleteBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackendStorageWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendStorageWithContext indicates an expected call of DeleteBackendStorageWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendStorageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendStorageWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendStorageWithContext), varargs...)
}

// DeleteBackendWithContext mocks base method.
func (m *MockAmplifyBackendAPI) DeleteBackendWithContext(arg0 context.Context, arg1 *amplifybackend.DeleteBackendInput, arg2 ...request.Option) (*amplifybackend.DeleteBackendOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackendWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.DeleteBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackendWithContext indicates an expected call of DeleteBackendWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteBackendWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackendWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteBackendWithContext), varargs...)
}

// DeleteToken mocks base method.
func (m *MockAmplifyBackendAPI) DeleteToken(arg0 *amplifybackend.DeleteTokenInput) (*amplifybackend.DeleteTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0)
	ret0, _ := ret[0].(*amplifybackend.DeleteTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteToken), arg0)
}

// DeleteTokenRequest mocks base method.
func (m *MockAmplifyBackendAPI) DeleteTokenRequest(arg0 *amplifybackend.DeleteTokenInput) (*request.Request, *amplifybackend.DeleteTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.DeleteTokenOutput)
	return ret0, ret1
}

// DeleteTokenRequest indicates an expected call of DeleteTokenRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTokenRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteTokenRequest), arg0)
}

// DeleteTokenWithContext mocks base method.
func (m *MockAmplifyBackendAPI) DeleteTokenWithContext(arg0 context.Context, arg1 *amplifybackend.DeleteTokenInput, arg2 ...request.Option) (*amplifybackend.DeleteTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTokenWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.DeleteTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTokenWithContext indicates an expected call of DeleteTokenWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) DeleteTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTokenWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).DeleteTokenWithContext), varargs...)
}

// GenerateBackendAPIModels mocks base method.
func (m *MockAmplifyBackendAPI) GenerateBackendAPIModels(arg0 *amplifybackend.GenerateBackendAPIModelsInput) (*amplifybackend.GenerateBackendAPIModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBackendAPIModels", arg0)
	ret0, _ := ret[0].(*amplifybackend.GenerateBackendAPIModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBackendAPIModels indicates an expected call of GenerateBackendAPIModels.
func (mr *MockAmplifyBackendAPIMockRecorder) GenerateBackendAPIModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBackendAPIModels", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GenerateBackendAPIModels), arg0)
}

// GenerateBackendAPIModelsRequest mocks base method.
func (m *MockAmplifyBackendAPI) GenerateBackendAPIModelsRequest(arg0 *amplifybackend.GenerateBackendAPIModelsInput) (*request.Request, *amplifybackend.GenerateBackendAPIModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBackendAPIModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GenerateBackendAPIModelsOutput)
	return ret0, ret1
}

// GenerateBackendAPIModelsRequest indicates an expected call of GenerateBackendAPIModelsRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GenerateBackendAPIModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBackendAPIModelsRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GenerateBackendAPIModelsRequest), arg0)
}

// GenerateBackendAPIModelsWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GenerateBackendAPIModelsWithContext(arg0 context.Context, arg1 *amplifybackend.GenerateBackendAPIModelsInput, arg2 ...request.Option) (*amplifybackend.GenerateBackendAPIModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateBackendAPIModelsWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GenerateBackendAPIModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBackendAPIModelsWithContext indicates an expected call of GenerateBackendAPIModelsWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GenerateBackendAPIModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBackendAPIModelsWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GenerateBackendAPIModelsWithContext), varargs...)
}

// GetBackend mocks base method.
func (m *MockAmplifyBackendAPI) GetBackend(arg0 *amplifybackend.GetBackendInput) (*amplifybackend.GetBackendOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackend", arg0)
	ret0, _ := ret[0].(*amplifybackend.GetBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackend indicates an expected call of GetBackend.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackend", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackend), arg0)
}

// GetBackendAPI mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAPI(arg0 *amplifybackend.GetBackendAPIInput) (*amplifybackend.GetBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendAPI", arg0)
	ret0, _ := ret[0].(*amplifybackend.GetBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendAPI indicates an expected call of GetBackendAPI.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAPI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAPI", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAPI), arg0)
}

// GetBackendAPIModels mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAPIModels(arg0 *amplifybackend.GetBackendAPIModelsInput) (*amplifybackend.GetBackendAPIModelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendAPIModels", arg0)
	ret0, _ := ret[0].(*amplifybackend.GetBackendAPIModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendAPIModels indicates an expected call of GetBackendAPIModels.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAPIModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAPIModels", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAPIModels), arg0)
}

// GetBackendAPIModelsRequest mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAPIModelsRequest(arg0 *amplifybackend.GetBackendAPIModelsInput) (*request.Request, *amplifybackend.GetBackendAPIModelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendAPIModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GetBackendAPIModelsOutput)
	return ret0, ret1
}

// GetBackendAPIModelsRequest indicates an expected call of GetBackendAPIModelsRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAPIModelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAPIModelsRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAPIModelsRequest), arg0)
}

// GetBackendAPIModelsWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAPIModelsWithContext(arg0 context.Context, arg1 *amplifybackend.GetBackendAPIModelsInput, arg2 ...request.Option) (*amplifybackend.GetBackendAPIModelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackendAPIModelsWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GetBackendAPIModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendAPIModelsWithContext indicates an expected call of GetBackendAPIModelsWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAPIModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAPIModelsWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAPIModelsWithContext), varargs...)
}

// GetBackendAPIRequest mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAPIRequest(arg0 *amplifybackend.GetBackendAPIInput) (*request.Request, *amplifybackend.GetBackendAPIOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendAPIRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GetBackendAPIOutput)
	return ret0, ret1
}

// GetBackendAPIRequest indicates an expected call of GetBackendAPIRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAPIRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAPIRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAPIRequest), arg0)
}

// GetBackendAPIWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAPIWithContext(arg0 context.Context, arg1 *amplifybackend.GetBackendAPIInput, arg2 ...request.Option) (*amplifybackend.GetBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackendAPIWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GetBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendAPIWithContext indicates an expected call of GetBackendAPIWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAPIWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAPIWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAPIWithContext), varargs...)
}

// GetBackendAuth mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAuth(arg0 *amplifybackend.GetBackendAuthInput) (*amplifybackend.GetBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendAuth", arg0)
	ret0, _ := ret[0].(*amplifybackend.GetBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendAuth indicates an expected call of GetBackendAuth.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAuth", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAuth), arg0)
}

// GetBackendAuthRequest mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAuthRequest(arg0 *amplifybackend.GetBackendAuthInput) (*request.Request, *amplifybackend.GetBackendAuthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendAuthRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GetBackendAuthOutput)
	return ret0, ret1
}

// GetBackendAuthRequest indicates an expected call of GetBackendAuthRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAuthRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAuthRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAuthRequest), arg0)
}

// GetBackendAuthWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendAuthWithContext(arg0 context.Context, arg1 *amplifybackend.GetBackendAuthInput, arg2 ...request.Option) (*amplifybackend.GetBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackendAuthWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GetBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendAuthWithContext indicates an expected call of GetBackendAuthWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendAuthWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendAuthWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendAuthWithContext), varargs...)
}

// GetBackendJob mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendJob(arg0 *amplifybackend.GetBackendJobInput) (*amplifybackend.GetBackendJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendJob", arg0)
	ret0, _ := ret[0].(*amplifybackend.GetBackendJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendJob indicates an expected call of GetBackendJob.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendJob", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendJob), arg0)
}

// GetBackendJobRequest mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendJobRequest(arg0 *amplifybackend.GetBackendJobInput) (*request.Request, *amplifybackend.GetBackendJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GetBackendJobOutput)
	return ret0, ret1
}

// GetBackendJobRequest indicates an expected call of GetBackendJobRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendJobRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendJobRequest), arg0)
}

// GetBackendJobWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendJobWithContext(arg0 context.Context, arg1 *amplifybackend.GetBackendJobInput, arg2 ...request.Option) (*amplifybackend.GetBackendJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackendJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GetBackendJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendJobWithContext indicates an expected call of GetBackendJobWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendJobWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendJobWithContext), varargs...)
}

// GetBackendRequest mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendRequest(arg0 *amplifybackend.GetBackendInput) (*request.Request, *amplifybackend.GetBackendOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GetBackendOutput)
	return ret0, ret1
}

// GetBackendRequest indicates an expected call of GetBackendRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendRequest), arg0)
}

// GetBackendStorage mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendStorage(arg0 *amplifybackend.GetBackendStorageInput) (*amplifybackend.GetBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendStorage", arg0)
	ret0, _ := ret[0].(*amplifybackend.GetBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendStorage indicates an expected call of GetBackendStorage.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendStorage", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendStorage), arg0)
}

// GetBackendStorageRequest mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendStorageRequest(arg0 *amplifybackend.GetBackendStorageInput) (*request.Request, *amplifybackend.GetBackendStorageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendStorageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GetBackendStorageOutput)
	return ret0, ret1
}

// GetBackendStorageRequest indicates an expected call of GetBackendStorageRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendStorageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendStorageRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendStorageRequest), arg0)
}

// GetBackendStorageWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendStorageWithContext(arg0 context.Context, arg1 *amplifybackend.GetBackendStorageInput, arg2 ...request.Option) (*amplifybackend.GetBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackendStorageWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GetBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendStorageWithContext indicates an expected call of GetBackendStorageWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendStorageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendStorageWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendStorageWithContext), varargs...)
}

// GetBackendWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GetBackendWithContext(arg0 context.Context, arg1 *amplifybackend.GetBackendInput, arg2 ...request.Option) (*amplifybackend.GetBackendOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackendWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GetBackendOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendWithContext indicates an expected call of GetBackendWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GetBackendWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetBackendWithContext), varargs...)
}

// GetToken mocks base method.
func (m *MockAmplifyBackendAPI) GetToken(arg0 *amplifybackend.GetTokenInput) (*amplifybackend.GetTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0)
	ret0, _ := ret[0].(*amplifybackend.GetTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockAmplifyBackendAPIMockRecorder) GetToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetToken), arg0)
}

// GetTokenRequest mocks base method.
func (m *MockAmplifyBackendAPI) GetTokenRequest(arg0 *amplifybackend.GetTokenInput) (*request.Request, *amplifybackend.GetTokenOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.GetTokenOutput)
	return ret0, ret1
}

// GetTokenRequest indicates an expected call of GetTokenRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) GetTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetTokenRequest), arg0)
}

// GetTokenWithContext mocks base method.
func (m *MockAmplifyBackendAPI) GetTokenWithContext(arg0 context.Context, arg1 *amplifybackend.GetTokenInput, arg2 ...request.Option) (*amplifybackend.GetTokenOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTokenWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.GetTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenWithContext indicates an expected call of GetTokenWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) GetTokenWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).GetTokenWithContext), varargs...)
}

// ImportBackendAuth mocks base method.
func (m *MockAmplifyBackendAPI) ImportBackendAuth(arg0 *amplifybackend.ImportBackendAuthInput) (*amplifybackend.ImportBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportBackendAuth", arg0)
	ret0, _ := ret[0].(*amplifybackend.ImportBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportBackendAuth indicates an expected call of ImportBackendAuth.
func (mr *MockAmplifyBackendAPIMockRecorder) ImportBackendAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBackendAuth", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ImportBackendAuth), arg0)
}

// ImportBackendAuthRequest mocks base method.
func (m *MockAmplifyBackendAPI) ImportBackendAuthRequest(arg0 *amplifybackend.ImportBackendAuthInput) (*request.Request, *amplifybackend.ImportBackendAuthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportBackendAuthRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.ImportBackendAuthOutput)
	return ret0, ret1
}

// ImportBackendAuthRequest indicates an expected call of ImportBackendAuthRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) ImportBackendAuthRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBackendAuthRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ImportBackendAuthRequest), arg0)
}

// ImportBackendAuthWithContext mocks base method.
func (m *MockAmplifyBackendAPI) ImportBackendAuthWithContext(arg0 context.Context, arg1 *amplifybackend.ImportBackendAuthInput, arg2 ...request.Option) (*amplifybackend.ImportBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportBackendAuthWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.ImportBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportBackendAuthWithContext indicates an expected call of ImportBackendAuthWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) ImportBackendAuthWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBackendAuthWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ImportBackendAuthWithContext), varargs...)
}

// ImportBackendStorage mocks base method.
func (m *MockAmplifyBackendAPI) ImportBackendStorage(arg0 *amplifybackend.ImportBackendStorageInput) (*amplifybackend.ImportBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportBackendStorage", arg0)
	ret0, _ := ret[0].(*amplifybackend.ImportBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportBackendStorage indicates an expected call of ImportBackendStorage.
func (mr *MockAmplifyBackendAPIMockRecorder) ImportBackendStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBackendStorage", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ImportBackendStorage), arg0)
}

// ImportBackendStorageRequest mocks base method.
func (m *MockAmplifyBackendAPI) ImportBackendStorageRequest(arg0 *amplifybackend.ImportBackendStorageInput) (*request.Request, *amplifybackend.ImportBackendStorageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportBackendStorageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.ImportBackendStorageOutput)
	return ret0, ret1
}

// ImportBackendStorageRequest indicates an expected call of ImportBackendStorageRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) ImportBackendStorageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBackendStorageRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ImportBackendStorageRequest), arg0)
}

// ImportBackendStorageWithContext mocks base method.
func (m *MockAmplifyBackendAPI) ImportBackendStorageWithContext(arg0 context.Context, arg1 *amplifybackend.ImportBackendStorageInput, arg2 ...request.Option) (*amplifybackend.ImportBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportBackendStorageWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.ImportBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportBackendStorageWithContext indicates an expected call of ImportBackendStorageWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) ImportBackendStorageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBackendStorageWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ImportBackendStorageWithContext), varargs...)
}

// ListBackendJobs mocks base method.
func (m *MockAmplifyBackendAPI) ListBackendJobs(arg0 *amplifybackend.ListBackendJobsInput) (*amplifybackend.ListBackendJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackendJobs", arg0)
	ret0, _ := ret[0].(*amplifybackend.ListBackendJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackendJobs indicates an expected call of ListBackendJobs.
func (mr *MockAmplifyBackendAPIMockRecorder) ListBackendJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendJobs", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListBackendJobs), arg0)
}

// ListBackendJobsPages mocks base method.
func (m *MockAmplifyBackendAPI) ListBackendJobsPages(arg0 *amplifybackend.ListBackendJobsInput, arg1 func(*amplifybackend.ListBackendJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackendJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackendJobsPages indicates an expected call of ListBackendJobsPages.
func (mr *MockAmplifyBackendAPIMockRecorder) ListBackendJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendJobsPages", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListBackendJobsPages), arg0, arg1)
}

// ListBackendJobsPagesWithContext mocks base method.
func (m *MockAmplifyBackendAPI) ListBackendJobsPagesWithContext(arg0 context.Context, arg1 *amplifybackend.ListBackendJobsInput, arg2 func(*amplifybackend.ListBackendJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackendJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBackendJobsPagesWithContext indicates an expected call of ListBackendJobsPagesWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) ListBackendJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendJobsPagesWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListBackendJobsPagesWithContext), varargs...)
}

// ListBackendJobsRequest mocks base method.
func (m *MockAmplifyBackendAPI) ListBackendJobsRequest(arg0 *amplifybackend.ListBackendJobsInput) (*request.Request, *amplifybackend.ListBackendJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackendJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.ListBackendJobsOutput)
	return ret0, ret1
}

// ListBackendJobsRequest indicates an expected call of ListBackendJobsRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) ListBackendJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendJobsRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListBackendJobsRequest), arg0)
}

// ListBackendJobsWithContext mocks base method.
func (m *MockAmplifyBackendAPI) ListBackendJobsWithContext(arg0 context.Context, arg1 *amplifybackend.ListBackendJobsInput, arg2 ...request.Option) (*amplifybackend.ListBackendJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackendJobsWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.ListBackendJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackendJobsWithContext indicates an expected call of ListBackendJobsWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) ListBackendJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackendJobsWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListBackendJobsWithContext), varargs...)
}

// ListS3Buckets mocks base method.
func (m *MockAmplifyBackendAPI) ListS3Buckets(arg0 *amplifybackend.ListS3BucketsInput) (*amplifybackend.ListS3BucketsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListS3Buckets", arg0)
	ret0, _ := ret[0].(*amplifybackend.ListS3BucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListS3Buckets indicates an expected call of ListS3Buckets.
func (mr *MockAmplifyBackendAPIMockRecorder) ListS3Buckets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListS3Buckets", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListS3Buckets), arg0)
}

// ListS3BucketsRequest mocks base method.
func (m *MockAmplifyBackendAPI) ListS3BucketsRequest(arg0 *amplifybackend.ListS3BucketsInput) (*request.Request, *amplifybackend.ListS3BucketsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListS3BucketsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.ListS3BucketsOutput)
	return ret0, ret1
}

// ListS3BucketsRequest indicates an expected call of ListS3BucketsRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) ListS3BucketsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListS3BucketsRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListS3BucketsRequest), arg0)
}

// ListS3BucketsWithContext mocks base method.
func (m *MockAmplifyBackendAPI) ListS3BucketsWithContext(arg0 context.Context, arg1 *amplifybackend.ListS3BucketsInput, arg2 ...request.Option) (*amplifybackend.ListS3BucketsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListS3BucketsWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.ListS3BucketsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListS3BucketsWithContext indicates an expected call of ListS3BucketsWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) ListS3BucketsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListS3BucketsWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).ListS3BucketsWithContext), varargs...)
}

// RemoveAllBackends mocks base method.
func (m *MockAmplifyBackendAPI) RemoveAllBackends(arg0 *amplifybackend.RemoveAllBackendsInput) (*amplifybackend.RemoveAllBackendsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllBackends", arg0)
	ret0, _ := ret[0].(*amplifybackend.RemoveAllBackendsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAllBackends indicates an expected call of RemoveAllBackends.
func (mr *MockAmplifyBackendAPIMockRecorder) RemoveAllBackends(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllBackends", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).RemoveAllBackends), arg0)
}

// RemoveAllBackendsRequest mocks base method.
func (m *MockAmplifyBackendAPI) RemoveAllBackendsRequest(arg0 *amplifybackend.RemoveAllBackendsInput) (*request.Request, *amplifybackend.RemoveAllBackendsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllBackendsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.RemoveAllBackendsOutput)
	return ret0, ret1
}

// RemoveAllBackendsRequest indicates an expected call of RemoveAllBackendsRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) RemoveAllBackendsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllBackendsRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).RemoveAllBackendsRequest), arg0)
}

// RemoveAllBackendsWithContext mocks base method.
func (m *MockAmplifyBackendAPI) RemoveAllBackendsWithContext(arg0 context.Context, arg1 *amplifybackend.RemoveAllBackendsInput, arg2 ...request.Option) (*amplifybackend.RemoveAllBackendsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAllBackendsWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.RemoveAllBackendsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAllBackendsWithContext indicates an expected call of RemoveAllBackendsWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) RemoveAllBackendsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllBackendsWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).RemoveAllBackendsWithContext), varargs...)
}

// RemoveBackendConfig mocks base method.
func (m *MockAmplifyBackendAPI) RemoveBackendConfig(arg0 *amplifybackend.RemoveBackendConfigInput) (*amplifybackend.RemoveBackendConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBackendConfig", arg0)
	ret0, _ := ret[0].(*amplifybackend.RemoveBackendConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBackendConfig indicates an expected call of RemoveBackendConfig.
func (mr *MockAmplifyBackendAPIMockRecorder) RemoveBackendConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackendConfig", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).RemoveBackendConfig), arg0)
}

// RemoveBackendConfigRequest mocks base method.
func (m *MockAmplifyBackendAPI) RemoveBackendConfigRequest(arg0 *amplifybackend.RemoveBackendConfigInput) (*request.Request, *amplifybackend.RemoveBackendConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBackendConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.RemoveBackendConfigOutput)
	return ret0, ret1
}

// RemoveBackendConfigRequest indicates an expected call of RemoveBackendConfigRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) RemoveBackendConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackendConfigRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).RemoveBackendConfigRequest), arg0)
}

// RemoveBackendConfigWithContext mocks base method.
func (m *MockAmplifyBackendAPI) RemoveBackendConfigWithContext(arg0 context.Context, arg1 *amplifybackend.RemoveBackendConfigInput, arg2 ...request.Option) (*amplifybackend.RemoveBackendConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBackendConfigWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.RemoveBackendConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBackendConfigWithContext indicates an expected call of RemoveBackendConfigWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) RemoveBackendConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackendConfigWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).RemoveBackendConfigWithContext), varargs...)
}

// UpdateBackendAPI mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendAPI(arg0 *amplifybackend.UpdateBackendAPIInput) (*amplifybackend.UpdateBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendAPI", arg0)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendAPI indicates an expected call of UpdateBackendAPI.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendAPI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendAPI", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendAPI), arg0)
}

// UpdateBackendAPIRequest mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendAPIRequest(arg0 *amplifybackend.UpdateBackendAPIInput) (*request.Request, *amplifybackend.UpdateBackendAPIOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendAPIRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.UpdateBackendAPIOutput)
	return ret0, ret1
}

// UpdateBackendAPIRequest indicates an expected call of UpdateBackendAPIRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendAPIRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendAPIRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendAPIRequest), arg0)
}

// UpdateBackendAPIWithContext mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendAPIWithContext(arg0 context.Context, arg1 *amplifybackend.UpdateBackendAPIInput, arg2 ...request.Option) (*amplifybackend.UpdateBackendAPIOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackendAPIWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendAPIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendAPIWithContext indicates an expected call of UpdateBackendAPIWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendAPIWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendAPIWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendAPIWithContext), varargs...)
}

// UpdateBackendAuth mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendAuth(arg0 *amplifybackend.UpdateBackendAuthInput) (*amplifybackend.UpdateBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendAuth", arg0)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendAuth indicates an expected call of UpdateBackendAuth.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendAuth", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendAuth), arg0)
}

// UpdateBackendAuthRequest mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendAuthRequest(arg0 *amplifybackend.UpdateBackendAuthInput) (*request.Request, *amplifybackend.UpdateBackendAuthOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendAuthRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.UpdateBackendAuthOutput)
	return ret0, ret1
}

// UpdateBackendAuthRequest indicates an expected call of UpdateBackendAuthRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendAuthRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendAuthRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendAuthRequest), arg0)
}

// UpdateBackendAuthWithContext mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendAuthWithContext(arg0 context.Context, arg1 *amplifybackend.UpdateBackendAuthInput, arg2 ...request.Option) (*amplifybackend.UpdateBackendAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackendAuthWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendAuthWithContext indicates an expected call of UpdateBackendAuthWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendAuthWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendAuthWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendAuthWithContext), varargs...)
}

// UpdateBackendConfig mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendConfig(arg0 *amplifybackend.UpdateBackendConfigInput) (*amplifybackend.UpdateBackendConfigOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendConfig", arg0)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendConfig indicates an expected call of UpdateBackendConfig.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendConfig", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendConfig), arg0)
}

// UpdateBackendConfigRequest mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendConfigRequest(arg0 *amplifybackend.UpdateBackendConfigInput) (*request.Request, *amplifybackend.UpdateBackendConfigOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendConfigRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.UpdateBackendConfigOutput)
	return ret0, ret1
}

// UpdateBackendConfigRequest indicates an expected call of UpdateBackendConfigRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendConfigRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendConfigRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendConfigRequest), arg0)
}

// UpdateBackendConfigWithContext mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendConfigWithContext(arg0 context.Context, arg1 *amplifybackend.UpdateBackendConfigInput, arg2 ...request.Option) (*amplifybackend.UpdateBackendConfigOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackendConfigWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendConfigOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendConfigWithContext indicates an expected call of UpdateBackendConfigWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendConfigWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendConfigWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendConfigWithContext), varargs...)
}

// UpdateBackendJob mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendJob(arg0 *amplifybackend.UpdateBackendJobInput) (*amplifybackend.UpdateBackendJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendJob", arg0)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendJob indicates an expected call of UpdateBackendJob.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendJob", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendJob), arg0)
}

// UpdateBackendJobRequest mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendJobRequest(arg0 *amplifybackend.UpdateBackendJobInput) (*request.Request, *amplifybackend.UpdateBackendJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.UpdateBackendJobOutput)
	return ret0, ret1
}

// UpdateBackendJobRequest indicates an expected call of UpdateBackendJobRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendJobRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendJobRequest), arg0)
}

// UpdateBackendJobWithContext mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendJobWithContext(arg0 context.Context, arg1 *amplifybackend.UpdateBackendJobInput, arg2 ...request.Option) (*amplifybackend.UpdateBackendJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackendJobWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendJobWithContext indicates an expected call of UpdateBackendJobWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendJobWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendJobWithContext), varargs...)
}

// UpdateBackendStorage mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendStorage(arg0 *amplifybackend.UpdateBackendStorageInput) (*amplifybackend.UpdateBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendStorage", arg0)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendStorage indicates an expected call of UpdateBackendStorage.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendStorage", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendStorage), arg0)
}

// UpdateBackendStorageRequest mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendStorageRequest(arg0 *amplifybackend.UpdateBackendStorageInput) (*request.Request, *amplifybackend.UpdateBackendStorageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackendStorageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*amplifybackend.UpdateBackendStorageOutput)
	return ret0, ret1
}

// UpdateBackendStorageRequest indicates an expected call of UpdateBackendStorageRequest.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendStorageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendStorageRequest", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendStorageRequest), arg0)
}

// UpdateBackendStorageWithContext mocks base method.
func (m *MockAmplifyBackendAPI) UpdateBackendStorageWithContext(arg0 context.Context, arg1 *amplifybackend.UpdateBackendStorageInput, arg2 ...request.Option) (*amplifybackend.UpdateBackendStorageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBackendStorageWithContext", varargs...)
	ret0, _ := ret[0].(*amplifybackend.UpdateBackendStorageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackendStorageWithContext indicates an expected call of UpdateBackendStorageWithContext.
func (mr *MockAmplifyBackendAPIMockRecorder) UpdateBackendStorageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackendStorageWithContext", reflect.TypeOf((*MockAmplifyBackendAPI)(nil).UpdateBackendStorageWithContext), varargs...)
}

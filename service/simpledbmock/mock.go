// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/simpledb/simpledbiface (interfaces: SimpleDBAPI)

// Package simpledbmock is a generated GoMock package.
package simpledbmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	simpledb "github.com/aws/aws-sdk-go/service/simpledb"
	gomock "github.com/golang/mock/gomock"
)

// MockSimpleDBAPI is a mock of SimpleDBAPI interface.
type MockSimpleDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleDBAPIMockRecorder
}

// MockSimpleDBAPIMockRecorder is the mock recorder for MockSimpleDBAPI.
type MockSimpleDBAPIMockRecorder struct {
	mock *MockSimpleDBAPI
}

// NewMockSimpleDBAPI creates a new mock instance.
func NewMockSimpleDBAPI(ctrl *gomock.Controller) *MockSimpleDBAPI {
	mock := &MockSimpleDBAPI{ctrl: ctrl}
	mock.recorder = &MockSimpleDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleDBAPI) EXPECT() *MockSimpleDBAPIMockRecorder {
	return m.recorder
}

// BatchDeleteAttributes mocks base method.
func (m *MockSimpleDBAPI) BatchDeleteAttributes(arg0 *simpledb.BatchDeleteAttributesInput) (*simpledb.BatchDeleteAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteAttributes", arg0)
	ret0, _ := ret[0].(*simpledb.BatchDeleteAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteAttributes indicates an expected call of BatchDeleteAttributes.
func (mr *MockSimpleDBAPIMockRecorder) BatchDeleteAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteAttributes", reflect.TypeOf((*MockSimpleDBAPI)(nil).BatchDeleteAttributes), arg0)
}

// BatchDeleteAttributesRequest mocks base method.
func (m *MockSimpleDBAPI) BatchDeleteAttributesRequest(arg0 *simpledb.BatchDeleteAttributesInput) (*request.Request, *simpledb.BatchDeleteAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.BatchDeleteAttributesOutput)
	return ret0, ret1
}

// BatchDeleteAttributesRequest indicates an expected call of BatchDeleteAttributesRequest.
func (mr *MockSimpleDBAPIMockRecorder) BatchDeleteAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteAttributesRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).BatchDeleteAttributesRequest), arg0)
}

// BatchDeleteAttributesWithContext mocks base method.
func (m *MockSimpleDBAPI) BatchDeleteAttributesWithContext(arg0 context.Context, arg1 *simpledb.BatchDeleteAttributesInput, arg2 ...request.Option) (*simpledb.BatchDeleteAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.BatchDeleteAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteAttributesWithContext indicates an expected call of BatchDeleteAttributesWithContext.
func (mr *MockSimpleDBAPIMockRecorder) BatchDeleteAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteAttributesWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).BatchDeleteAttributesWithContext), varargs...)
}

// BatchPutAttributes mocks base method.
func (m *MockSimpleDBAPI) BatchPutAttributes(arg0 *simpledb.BatchPutAttributesInput) (*simpledb.BatchPutAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutAttributes", arg0)
	ret0, _ := ret[0].(*simpledb.BatchPutAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutAttributes indicates an expected call of BatchPutAttributes.
func (mr *MockSimpleDBAPIMockRecorder) BatchPutAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutAttributes", reflect.TypeOf((*MockSimpleDBAPI)(nil).BatchPutAttributes), arg0)
}

// BatchPutAttributesRequest mocks base method.
func (m *MockSimpleDBAPI) BatchPutAttributesRequest(arg0 *simpledb.BatchPutAttributesInput) (*request.Request, *simpledb.BatchPutAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.BatchPutAttributesOutput)
	return ret0, ret1
}

// BatchPutAttributesRequest indicates an expected call of BatchPutAttributesRequest.
func (mr *MockSimpleDBAPIMockRecorder) BatchPutAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutAttributesRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).BatchPutAttributesRequest), arg0)
}

// BatchPutAttributesWithContext mocks base method.
func (m *MockSimpleDBAPI) BatchPutAttributesWithContext(arg0 context.Context, arg1 *simpledb.BatchPutAttributesInput, arg2 ...request.Option) (*simpledb.BatchPutAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchPutAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.BatchPutAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutAttributesWithContext indicates an expected call of BatchPutAttributesWithContext.
func (mr *MockSimpleDBAPIMockRecorder) BatchPutAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutAttributesWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).BatchPutAttributesWithContext), varargs...)
}

// CreateDomain mocks base method.
func (m *MockSimpleDBAPI) CreateDomain(arg0 *simpledb.CreateDomainInput) (*simpledb.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0)
	ret0, _ := ret[0].(*simpledb.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain.
func (mr *MockSimpleDBAPIMockRecorder) CreateDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockSimpleDBAPI)(nil).CreateDomain), arg0)
}

// CreateDomainRequest mocks base method.
func (m *MockSimpleDBAPI) CreateDomainRequest(arg0 *simpledb.CreateDomainInput) (*request.Request, *simpledb.CreateDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.CreateDomainOutput)
	return ret0, ret1
}

// CreateDomainRequest indicates an expected call of CreateDomainRequest.
func (mr *MockSimpleDBAPIMockRecorder) CreateDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).CreateDomainRequest), arg0)
}

// CreateDomainWithContext mocks base method.
func (m *MockSimpleDBAPI) CreateDomainWithContext(arg0 context.Context, arg1 *simpledb.CreateDomainInput, arg2 ...request.Option) (*simpledb.CreateDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.CreateDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainWithContext indicates an expected call of CreateDomainWithContext.
func (mr *MockSimpleDBAPIMockRecorder) CreateDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).CreateDomainWithContext), varargs...)
}

// DeleteAttributes mocks base method.
func (m *MockSimpleDBAPI) DeleteAttributes(arg0 *simpledb.DeleteAttributesInput) (*simpledb.DeleteAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttributes", arg0)
	ret0, _ := ret[0].(*simpledb.DeleteAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttributes indicates an expected call of DeleteAttributes.
func (mr *MockSimpleDBAPIMockRecorder) DeleteAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributes", reflect.TypeOf((*MockSimpleDBAPI)(nil).DeleteAttributes), arg0)
}

// DeleteAttributesRequest mocks base method.
func (m *MockSimpleDBAPI) DeleteAttributesRequest(arg0 *simpledb.DeleteAttributesInput) (*request.Request, *simpledb.DeleteAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.DeleteAttributesOutput)
	return ret0, ret1
}

// DeleteAttributesRequest indicates an expected call of DeleteAttributesRequest.
func (mr *MockSimpleDBAPIMockRecorder) DeleteAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributesRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).DeleteAttributesRequest), arg0)
}

// DeleteAttributesWithContext mocks base method.
func (m *MockSimpleDBAPI) DeleteAttributesWithContext(arg0 context.Context, arg1 *simpledb.DeleteAttributesInput, arg2 ...request.Option) (*simpledb.DeleteAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.DeleteAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttributesWithContext indicates an expected call of DeleteAttributesWithContext.
func (mr *MockSimpleDBAPIMockRecorder) DeleteAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributesWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).DeleteAttributesWithContext), varargs...)
}

// DeleteDomain mocks base method.
func (m *MockSimpleDBAPI) DeleteDomain(arg0 *simpledb.DeleteDomainInput) (*simpledb.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", arg0)
	ret0, _ := ret[0].(*simpledb.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomain indicates an expected call of DeleteDomain.
func (mr *MockSimpleDBAPIMockRecorder) DeleteDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockSimpleDBAPI)(nil).DeleteDomain), arg0)
}

// DeleteDomainRequest mocks base method.
func (m *MockSimpleDBAPI) DeleteDomainRequest(arg0 *simpledb.DeleteDomainInput) (*request.Request, *simpledb.DeleteDomainOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomainRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.DeleteDomainOutput)
	return ret0, ret1
}

// DeleteDomainRequest indicates an expected call of DeleteDomainRequest.
func (mr *MockSimpleDBAPIMockRecorder) DeleteDomainRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).DeleteDomainRequest), arg0)
}

// DeleteDomainWithContext mocks base method.
func (m *MockSimpleDBAPI) DeleteDomainWithContext(arg0 context.Context, arg1 *simpledb.DeleteDomainInput, arg2 ...request.Option) (*simpledb.DeleteDomainOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.DeleteDomainOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainWithContext indicates an expected call of DeleteDomainWithContext.
func (mr *MockSimpleDBAPIMockRecorder) DeleteDomainWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).DeleteDomainWithContext), varargs...)
}

// DomainMetadata mocks base method.
func (m *MockSimpleDBAPI) DomainMetadata(arg0 *simpledb.DomainMetadataInput) (*simpledb.DomainMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainMetadata", arg0)
	ret0, _ := ret[0].(*simpledb.DomainMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainMetadata indicates an expected call of DomainMetadata.
func (mr *MockSimpleDBAPIMockRecorder) DomainMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainMetadata", reflect.TypeOf((*MockSimpleDBAPI)(nil).DomainMetadata), arg0)
}

// DomainMetadataRequest mocks base method.
func (m *MockSimpleDBAPI) DomainMetadataRequest(arg0 *simpledb.DomainMetadataInput) (*request.Request, *simpledb.DomainMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.DomainMetadataOutput)
	return ret0, ret1
}

// DomainMetadataRequest indicates an expected call of DomainMetadataRequest.
func (mr *MockSimpleDBAPIMockRecorder) DomainMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainMetadataRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).DomainMetadataRequest), arg0)
}

// DomainMetadataWithContext mocks base method.
func (m *MockSimpleDBAPI) DomainMetadataWithContext(arg0 context.Context, arg1 *simpledb.DomainMetadataInput, arg2 ...request.Option) (*simpledb.DomainMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DomainMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.DomainMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainMetadataWithContext indicates an expected call of DomainMetadataWithContext.
func (mr *MockSimpleDBAPIMockRecorder) DomainMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainMetadataWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).DomainMetadataWithContext), varargs...)
}

// GetAttributes mocks base method.
func (m *MockSimpleDBAPI) GetAttributes(arg0 *simpledb.GetAttributesInput) (*simpledb.GetAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributes", arg0)
	ret0, _ := ret[0].(*simpledb.GetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributes indicates an expected call of GetAttributes.
func (mr *MockSimpleDBAPIMockRecorder) GetAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockSimpleDBAPI)(nil).GetAttributes), arg0)
}

// GetAttributesRequest mocks base method.
func (m *MockSimpleDBAPI) GetAttributesRequest(arg0 *simpledb.GetAttributesInput) (*request.Request, *simpledb.GetAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.GetAttributesOutput)
	return ret0, ret1
}

// GetAttributesRequest indicates an expected call of GetAttributesRequest.
func (mr *MockSimpleDBAPIMockRecorder) GetAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).GetAttributesRequest), arg0)
}

// GetAttributesWithContext mocks base method.
func (m *MockSimpleDBAPI) GetAttributesWithContext(arg0 context.Context, arg1 *simpledb.GetAttributesInput, arg2 ...request.Option) (*simpledb.GetAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.GetAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesWithContext indicates an expected call of GetAttributesWithContext.
func (mr *MockSimpleDBAPIMockRecorder) GetAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).GetAttributesWithContext), varargs...)
}

// ListDomains mocks base method.
func (m *MockSimpleDBAPI) ListDomains(arg0 *simpledb.ListDomainsInput) (*simpledb.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].(*simpledb.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains.
func (mr *MockSimpleDBAPIMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockSimpleDBAPI)(nil).ListDomains), arg0)
}

// ListDomainsPages mocks base method.
func (m *MockSimpleDBAPI) ListDomainsPages(arg0 *simpledb.ListDomainsInput, arg1 func(*simpledb.ListDomainsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPages indicates an expected call of ListDomainsPages.
func (mr *MockSimpleDBAPIMockRecorder) ListDomainsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPages", reflect.TypeOf((*MockSimpleDBAPI)(nil).ListDomainsPages), arg0, arg1)
}

// ListDomainsPagesWithContext mocks base method.
func (m *MockSimpleDBAPI) ListDomainsPagesWithContext(arg0 context.Context, arg1 *simpledb.ListDomainsInput, arg2 func(*simpledb.ListDomainsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDomainsPagesWithContext indicates an expected call of ListDomainsPagesWithContext.
func (mr *MockSimpleDBAPIMockRecorder) ListDomainsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsPagesWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).ListDomainsPagesWithContext), varargs...)
}

// ListDomainsRequest mocks base method.
func (m *MockSimpleDBAPI) ListDomainsRequest(arg0 *simpledb.ListDomainsInput) (*request.Request, *simpledb.ListDomainsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomainsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.ListDomainsOutput)
	return ret0, ret1
}

// ListDomainsRequest indicates an expected call of ListDomainsRequest.
func (mr *MockSimpleDBAPIMockRecorder) ListDomainsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).ListDomainsRequest), arg0)
}

// ListDomainsWithContext mocks base method.
func (m *MockSimpleDBAPI) ListDomainsWithContext(arg0 context.Context, arg1 *simpledb.ListDomainsInput, arg2 ...request.Option) (*simpledb.ListDomainsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDomainsWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.ListDomainsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomainsWithContext indicates an expected call of ListDomainsWithContext.
func (mr *MockSimpleDBAPIMockRecorder) ListDomainsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomainsWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).ListDomainsWithContext), varargs...)
}

// PutAttributes mocks base method.
func (m *MockSimpleDBAPI) PutAttributes(arg0 *simpledb.PutAttributesInput) (*simpledb.PutAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAttributes", arg0)
	ret0, _ := ret[0].(*simpledb.PutAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAttributes indicates an expected call of PutAttributes.
func (mr *MockSimpleDBAPIMockRecorder) PutAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributes", reflect.TypeOf((*MockSimpleDBAPI)(nil).PutAttributes), arg0)
}

// PutAttributesRequest mocks base method.
func (m *MockSimpleDBAPI) PutAttributesRequest(arg0 *simpledb.PutAttributesInput) (*request.Request, *simpledb.PutAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.PutAttributesOutput)
	return ret0, ret1
}

// PutAttributesRequest indicates an expected call of PutAttributesRequest.
func (mr *MockSimpleDBAPIMockRecorder) PutAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributesRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).PutAttributesRequest), arg0)
}

// PutAttributesWithContext mocks base method.
func (m *MockSimpleDBAPI) PutAttributesWithContext(arg0 context.Context, arg1 *simpledb.PutAttributesInput, arg2 ...request.Option) (*simpledb.PutAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.PutAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAttributesWithContext indicates an expected call of PutAttributesWithContext.
func (mr *MockSimpleDBAPIMockRecorder) PutAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAttributesWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).PutAttributesWithContext), varargs...)
}

// Select mocks base method.
func (m *MockSimpleDBAPI) Select(arg0 *simpledb.SelectInput) (*simpledb.SelectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", arg0)
	ret0, _ := ret[0].(*simpledb.SelectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockSimpleDBAPIMockRecorder) Select(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSimpleDBAPI)(nil).Select), arg0)
}

// SelectPages mocks base method.
func (m *MockSimpleDBAPI) SelectPages(arg0 *simpledb.SelectInput, arg1 func(*simpledb.SelectOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectPages indicates an expected call of SelectPages.
func (mr *MockSimpleDBAPIMockRecorder) SelectPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPages", reflect.TypeOf((*MockSimpleDBAPI)(nil).SelectPages), arg0, arg1)
}

// SelectPagesWithContext mocks base method.
func (m *MockSimpleDBAPI) SelectPagesWithContext(arg0 context.Context, arg1 *simpledb.SelectInput, arg2 func(*simpledb.SelectOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectPagesWithContext indicates an expected call of SelectPagesWithContext.
func (mr *MockSimpleDBAPIMockRecorder) SelectPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPagesWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).SelectPagesWithContext), varargs...)
}

// SelectRequest mocks base method.
func (m *MockSimpleDBAPI) SelectRequest(arg0 *simpledb.SelectInput) (*request.Request, *simpledb.SelectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*simpledb.SelectOutput)
	return ret0, ret1
}

// SelectRequest indicates an expected call of SelectRequest.
func (mr *MockSimpleDBAPIMockRecorder) SelectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRequest", reflect.TypeOf((*MockSimpleDBAPI)(nil).SelectRequest), arg0)
}

// SelectWithContext mocks base method.
func (m *MockSimpleDBAPI) SelectWithContext(arg0 context.Context, arg1 *simpledb.SelectInput, arg2 ...request.Option) (*simpledb.SelectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectWithContext", varargs...)
	ret0, _ := ret[0].(*simpledb.SelectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithContext indicates an expected call of SelectWithContext.
func (mr *MockSimpleDBAPIMockRecorder) SelectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithContext", reflect.TypeOf((*MockSimpleDBAPI)(nil).SelectWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/docdb/docdbiface (interfaces: DocDBAPI)

// Package docdbmock is a generated GoMock package.
package docdbmock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	docdb "github.com/aws/aws-sdk-go/service/docdb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDocDBAPI is a mock of DocDBAPI interface
type MockDocDBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDocDBAPIMockRecorder
}

// MockDocDBAPIMockRecorder is the mock recorder for MockDocDBAPI
type MockDocDBAPIMockRecorder struct {
	mock *MockDocDBAPI
}

// NewMockDocDBAPI creates a new mock instance
func NewMockDocDBAPI(ctrl *gomock.Controller) *MockDocDBAPI {
	mock := &MockDocDBAPI{ctrl: ctrl}
	mock.recorder = &MockDocDBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDocDBAPI) EXPECT() *MockDocDBAPIMockRecorder {
	return m.recorder
}

// AddTagsToResource mocks base method
func (m *MockDocDBAPI) AddTagsToResource(arg0 *docdb.AddTagsToResourceInput) (*docdb.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResource", arg0)
	ret0, _ := ret[0].(*docdb.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResource indicates an expected call of AddTagsToResource
func (mr *MockDocDBAPIMockRecorder) AddTagsToResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResource", reflect.TypeOf((*MockDocDBAPI)(nil).AddTagsToResource), arg0)
}

// AddTagsToResourceRequest mocks base method
func (m *MockDocDBAPI) AddTagsToResourceRequest(arg0 *docdb.AddTagsToResourceInput) (*request.Request, *docdb.AddTagsToResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.AddTagsToResourceOutput)
	return ret0, ret1
}

// AddTagsToResourceRequest indicates an expected call of AddTagsToResourceRequest
func (mr *MockDocDBAPIMockRecorder) AddTagsToResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceRequest", reflect.TypeOf((*MockDocDBAPI)(nil).AddTagsToResourceRequest), arg0)
}

// AddTagsToResourceWithContext mocks base method
func (m *MockDocDBAPI) AddTagsToResourceWithContext(arg0 context.Context, arg1 *docdb.AddTagsToResourceInput, arg2 ...request.Option) (*docdb.AddTagsToResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTagsToResourceWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagsToResourceWithContext indicates an expected call of AddTagsToResourceWithContext
func (mr *MockDocDBAPIMockRecorder) AddTagsToResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToResourceWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).AddTagsToResourceWithContext), varargs...)
}

// ApplyPendingMaintenanceAction mocks base method
func (m *MockDocDBAPI) ApplyPendingMaintenanceAction(arg0 *docdb.ApplyPendingMaintenanceActionInput) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPendingMaintenanceAction", arg0)
	ret0, _ := ret[0].(*docdb.ApplyPendingMaintenanceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyPendingMaintenanceAction indicates an expected call of ApplyPendingMaintenanceAction
func (mr *MockDocDBAPIMockRecorder) ApplyPendingMaintenanceAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPendingMaintenanceAction", reflect.TypeOf((*MockDocDBAPI)(nil).ApplyPendingMaintenanceAction), arg0)
}

// ApplyPendingMaintenanceActionRequest mocks base method
func (m *MockDocDBAPI) ApplyPendingMaintenanceActionRequest(arg0 *docdb.ApplyPendingMaintenanceActionInput) (*request.Request, *docdb.ApplyPendingMaintenanceActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPendingMaintenanceActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ApplyPendingMaintenanceActionOutput)
	return ret0, ret1
}

// ApplyPendingMaintenanceActionRequest indicates an expected call of ApplyPendingMaintenanceActionRequest
func (mr *MockDocDBAPIMockRecorder) ApplyPendingMaintenanceActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPendingMaintenanceActionRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ApplyPendingMaintenanceActionRequest), arg0)
}

// ApplyPendingMaintenanceActionWithContext mocks base method
func (m *MockDocDBAPI) ApplyPendingMaintenanceActionWithContext(arg0 context.Context, arg1 *docdb.ApplyPendingMaintenanceActionInput, arg2 ...request.Option) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyPendingMaintenanceActionWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ApplyPendingMaintenanceActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyPendingMaintenanceActionWithContext indicates an expected call of ApplyPendingMaintenanceActionWithContext
func (mr *MockDocDBAPIMockRecorder) ApplyPendingMaintenanceActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPendingMaintenanceActionWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ApplyPendingMaintenanceActionWithContext), varargs...)
}

// CopyDBClusterParameterGroup mocks base method
func (m *MockDocDBAPI) CopyDBClusterParameterGroup(arg0 *docdb.CopyDBClusterParameterGroupInput) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*docdb.CopyDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterParameterGroup indicates an expected call of CopyDBClusterParameterGroup
func (mr *MockDocDBAPIMockRecorder) CopyDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterParameterGroup", reflect.TypeOf((*MockDocDBAPI)(nil).CopyDBClusterParameterGroup), arg0)
}

// CopyDBClusterParameterGroupRequest mocks base method
func (m *MockDocDBAPI) CopyDBClusterParameterGroupRequest(arg0 *docdb.CopyDBClusterParameterGroupInput) (*request.Request, *docdb.CopyDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.CopyDBClusterParameterGroupOutput)
	return ret0, ret1
}

// CopyDBClusterParameterGroupRequest indicates an expected call of CopyDBClusterParameterGroupRequest
func (mr *MockDocDBAPIMockRecorder) CopyDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterParameterGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).CopyDBClusterParameterGroupRequest), arg0)
}

// CopyDBClusterParameterGroupWithContext mocks base method
func (m *MockDocDBAPI) CopyDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *docdb.CopyDBClusterParameterGroupInput, arg2 ...request.Option) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.CopyDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterParameterGroupWithContext indicates an expected call of CopyDBClusterParameterGroupWithContext
func (mr *MockDocDBAPIMockRecorder) CopyDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterParameterGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).CopyDBClusterParameterGroupWithContext), varargs...)
}

// CopyDBClusterSnapshot mocks base method
func (m *MockDocDBAPI) CopyDBClusterSnapshot(arg0 *docdb.CopyDBClusterSnapshotInput) (*docdb.CopyDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterSnapshot", arg0)
	ret0, _ := ret[0].(*docdb.CopyDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterSnapshot indicates an expected call of CopyDBClusterSnapshot
func (mr *MockDocDBAPIMockRecorder) CopyDBClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterSnapshot", reflect.TypeOf((*MockDocDBAPI)(nil).CopyDBClusterSnapshot), arg0)
}

// CopyDBClusterSnapshotRequest mocks base method
func (m *MockDocDBAPI) CopyDBClusterSnapshotRequest(arg0 *docdb.CopyDBClusterSnapshotInput) (*request.Request, *docdb.CopyDBClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDBClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.CopyDBClusterSnapshotOutput)
	return ret0, ret1
}

// CopyDBClusterSnapshotRequest indicates an expected call of CopyDBClusterSnapshotRequest
func (mr *MockDocDBAPIMockRecorder) CopyDBClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterSnapshotRequest", reflect.TypeOf((*MockDocDBAPI)(nil).CopyDBClusterSnapshotRequest), arg0)
}

// CopyDBClusterSnapshotWithContext mocks base method
func (m *MockDocDBAPI) CopyDBClusterSnapshotWithContext(arg0 context.Context, arg1 *docdb.CopyDBClusterSnapshotInput, arg2 ...request.Option) (*docdb.CopyDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyDBClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.CopyDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDBClusterSnapshotWithContext indicates an expected call of CopyDBClusterSnapshotWithContext
func (mr *MockDocDBAPIMockRecorder) CopyDBClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDBClusterSnapshotWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).CopyDBClusterSnapshotWithContext), varargs...)
}

// CreateDBCluster mocks base method
func (m *MockDocDBAPI) CreateDBCluster(arg0 *docdb.CreateDBClusterInput) (*docdb.CreateDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBCluster", arg0)
	ret0, _ := ret[0].(*docdb.CreateDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBCluster indicates an expected call of CreateDBCluster
func (mr *MockDocDBAPIMockRecorder) CreateDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBCluster", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBCluster), arg0)
}

// CreateDBClusterParameterGroup mocks base method
func (m *MockDocDBAPI) CreateDBClusterParameterGroup(arg0 *docdb.CreateDBClusterParameterGroupInput) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*docdb.CreateDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterParameterGroup indicates an expected call of CreateDBClusterParameterGroup
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterParameterGroup", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterParameterGroup), arg0)
}

// CreateDBClusterParameterGroupRequest mocks base method
func (m *MockDocDBAPI) CreateDBClusterParameterGroupRequest(arg0 *docdb.CreateDBClusterParameterGroupInput) (*request.Request, *docdb.CreateDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.CreateDBClusterParameterGroupOutput)
	return ret0, ret1
}

// CreateDBClusterParameterGroupRequest indicates an expected call of CreateDBClusterParameterGroupRequest
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterParameterGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterParameterGroupRequest), arg0)
}

// CreateDBClusterParameterGroupWithContext mocks base method
func (m *MockDocDBAPI) CreateDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *docdb.CreateDBClusterParameterGroupInput, arg2 ...request.Option) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.CreateDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterParameterGroupWithContext indicates an expected call of CreateDBClusterParameterGroupWithContext
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterParameterGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterParameterGroupWithContext), varargs...)
}

// CreateDBClusterRequest mocks base method
func (m *MockDocDBAPI) CreateDBClusterRequest(arg0 *docdb.CreateDBClusterInput) (*request.Request, *docdb.CreateDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.CreateDBClusterOutput)
	return ret0, ret1
}

// CreateDBClusterRequest indicates an expected call of CreateDBClusterRequest
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterRequest", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterRequest), arg0)
}

// CreateDBClusterSnapshot mocks base method
func (m *MockDocDBAPI) CreateDBClusterSnapshot(arg0 *docdb.CreateDBClusterSnapshotInput) (*docdb.CreateDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterSnapshot", arg0)
	ret0, _ := ret[0].(*docdb.CreateDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterSnapshot indicates an expected call of CreateDBClusterSnapshot
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterSnapshot", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterSnapshot), arg0)
}

// CreateDBClusterSnapshotRequest mocks base method
func (m *MockDocDBAPI) CreateDBClusterSnapshotRequest(arg0 *docdb.CreateDBClusterSnapshotInput) (*request.Request, *docdb.CreateDBClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.CreateDBClusterSnapshotOutput)
	return ret0, ret1
}

// CreateDBClusterSnapshotRequest indicates an expected call of CreateDBClusterSnapshotRequest
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterSnapshotRequest", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterSnapshotRequest), arg0)
}

// CreateDBClusterSnapshotWithContext mocks base method
func (m *MockDocDBAPI) CreateDBClusterSnapshotWithContext(arg0 context.Context, arg1 *docdb.CreateDBClusterSnapshotInput, arg2 ...request.Option) (*docdb.CreateDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.CreateDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterSnapshotWithContext indicates an expected call of CreateDBClusterSnapshotWithContext
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterSnapshotWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterSnapshotWithContext), varargs...)
}

// CreateDBClusterWithContext mocks base method
func (m *MockDocDBAPI) CreateDBClusterWithContext(arg0 context.Context, arg1 *docdb.CreateDBClusterInput, arg2 ...request.Option) (*docdb.CreateDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.CreateDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBClusterWithContext indicates an expected call of CreateDBClusterWithContext
func (mr *MockDocDBAPIMockRecorder) CreateDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBClusterWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBClusterWithContext), varargs...)
}

// CreateDBInstance mocks base method
func (m *MockDocDBAPI) CreateDBInstance(arg0 *docdb.CreateDBInstanceInput) (*docdb.CreateDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBInstance", arg0)
	ret0, _ := ret[0].(*docdb.CreateDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBInstance indicates an expected call of CreateDBInstance
func (mr *MockDocDBAPIMockRecorder) CreateDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBInstance), arg0)
}

// CreateDBInstanceRequest mocks base method
func (m *MockDocDBAPI) CreateDBInstanceRequest(arg0 *docdb.CreateDBInstanceInput) (*request.Request, *docdb.CreateDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.CreateDBInstanceOutput)
	return ret0, ret1
}

// CreateDBInstanceRequest indicates an expected call of CreateDBInstanceRequest
func (mr *MockDocDBAPIMockRecorder) CreateDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstanceRequest", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBInstanceRequest), arg0)
}

// CreateDBInstanceWithContext mocks base method
func (m *MockDocDBAPI) CreateDBInstanceWithContext(arg0 context.Context, arg1 *docdb.CreateDBInstanceInput, arg2 ...request.Option) (*docdb.CreateDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.CreateDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBInstanceWithContext indicates an expected call of CreateDBInstanceWithContext
func (mr *MockDocDBAPIMockRecorder) CreateDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBInstanceWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBInstanceWithContext), varargs...)
}

// CreateDBSubnetGroup mocks base method
func (m *MockDocDBAPI) CreateDBSubnetGroup(arg0 *docdb.CreateDBSubnetGroupInput) (*docdb.CreateDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBSubnetGroup", arg0)
	ret0, _ := ret[0].(*docdb.CreateDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBSubnetGroup indicates an expected call of CreateDBSubnetGroup
func (mr *MockDocDBAPIMockRecorder) CreateDBSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBSubnetGroup", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBSubnetGroup), arg0)
}

// CreateDBSubnetGroupRequest mocks base method
func (m *MockDocDBAPI) CreateDBSubnetGroupRequest(arg0 *docdb.CreateDBSubnetGroupInput) (*request.Request, *docdb.CreateDBSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.CreateDBSubnetGroupOutput)
	return ret0, ret1
}

// CreateDBSubnetGroupRequest indicates an expected call of CreateDBSubnetGroupRequest
func (mr *MockDocDBAPIMockRecorder) CreateDBSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBSubnetGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBSubnetGroupRequest), arg0)
}

// CreateDBSubnetGroupWithContext mocks base method
func (m *MockDocDBAPI) CreateDBSubnetGroupWithContext(arg0 context.Context, arg1 *docdb.CreateDBSubnetGroupInput, arg2 ...request.Option) (*docdb.CreateDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDBSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.CreateDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBSubnetGroupWithContext indicates an expected call of CreateDBSubnetGroupWithContext
func (mr *MockDocDBAPIMockRecorder) CreateDBSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBSubnetGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).CreateDBSubnetGroupWithContext), varargs...)
}

// DeleteDBCluster mocks base method
func (m *MockDocDBAPI) DeleteDBCluster(arg0 *docdb.DeleteDBClusterInput) (*docdb.DeleteDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBCluster", arg0)
	ret0, _ := ret[0].(*docdb.DeleteDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBCluster indicates an expected call of DeleteDBCluster
func (mr *MockDocDBAPIMockRecorder) DeleteDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBCluster", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBCluster), arg0)
}

// DeleteDBClusterParameterGroup mocks base method
func (m *MockDocDBAPI) DeleteDBClusterParameterGroup(arg0 *docdb.DeleteDBClusterParameterGroupInput) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*docdb.DeleteDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterParameterGroup indicates an expected call of DeleteDBClusterParameterGroup
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterParameterGroup", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterParameterGroup), arg0)
}

// DeleteDBClusterParameterGroupRequest mocks base method
func (m *MockDocDBAPI) DeleteDBClusterParameterGroupRequest(arg0 *docdb.DeleteDBClusterParameterGroupInput) (*request.Request, *docdb.DeleteDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DeleteDBClusterParameterGroupOutput)
	return ret0, ret1
}

// DeleteDBClusterParameterGroupRequest indicates an expected call of DeleteDBClusterParameterGroupRequest
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterParameterGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterParameterGroupRequest), arg0)
}

// DeleteDBClusterParameterGroupWithContext mocks base method
func (m *MockDocDBAPI) DeleteDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *docdb.DeleteDBClusterParameterGroupInput, arg2 ...request.Option) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DeleteDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterParameterGroupWithContext indicates an expected call of DeleteDBClusterParameterGroupWithContext
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterParameterGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterParameterGroupWithContext), varargs...)
}

// DeleteDBClusterRequest mocks base method
func (m *MockDocDBAPI) DeleteDBClusterRequest(arg0 *docdb.DeleteDBClusterInput) (*request.Request, *docdb.DeleteDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DeleteDBClusterOutput)
	return ret0, ret1
}

// DeleteDBClusterRequest indicates an expected call of DeleteDBClusterRequest
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterRequest), arg0)
}

// DeleteDBClusterSnapshot mocks base method
func (m *MockDocDBAPI) DeleteDBClusterSnapshot(arg0 *docdb.DeleteDBClusterSnapshotInput) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterSnapshot", arg0)
	ret0, _ := ret[0].(*docdb.DeleteDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterSnapshot indicates an expected call of DeleteDBClusterSnapshot
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterSnapshot", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterSnapshot), arg0)
}

// DeleteDBClusterSnapshotRequest mocks base method
func (m *MockDocDBAPI) DeleteDBClusterSnapshotRequest(arg0 *docdb.DeleteDBClusterSnapshotInput) (*request.Request, *docdb.DeleteDBClusterSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBClusterSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DeleteDBClusterSnapshotOutput)
	return ret0, ret1
}

// DeleteDBClusterSnapshotRequest indicates an expected call of DeleteDBClusterSnapshotRequest
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterSnapshotRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterSnapshotRequest), arg0)
}

// DeleteDBClusterSnapshotWithContext mocks base method
func (m *MockDocDBAPI) DeleteDBClusterSnapshotWithContext(arg0 context.Context, arg1 *docdb.DeleteDBClusterSnapshotInput, arg2 ...request.Option) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBClusterSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DeleteDBClusterSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterSnapshotWithContext indicates an expected call of DeleteDBClusterSnapshotWithContext
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterSnapshotWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterSnapshotWithContext), varargs...)
}

// DeleteDBClusterWithContext mocks base method
func (m *MockDocDBAPI) DeleteDBClusterWithContext(arg0 context.Context, arg1 *docdb.DeleteDBClusterInput, arg2 ...request.Option) (*docdb.DeleteDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DeleteDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBClusterWithContext indicates an expected call of DeleteDBClusterWithContext
func (mr *MockDocDBAPIMockRecorder) DeleteDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBClusterWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBClusterWithContext), varargs...)
}

// DeleteDBInstance mocks base method
func (m *MockDocDBAPI) DeleteDBInstance(arg0 *docdb.DeleteDBInstanceInput) (*docdb.DeleteDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBInstance", arg0)
	ret0, _ := ret[0].(*docdb.DeleteDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBInstance indicates an expected call of DeleteDBInstance
func (mr *MockDocDBAPIMockRecorder) DeleteDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBInstance), arg0)
}

// DeleteDBInstanceRequest mocks base method
func (m *MockDocDBAPI) DeleteDBInstanceRequest(arg0 *docdb.DeleteDBInstanceInput) (*request.Request, *docdb.DeleteDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DeleteDBInstanceOutput)
	return ret0, ret1
}

// DeleteDBInstanceRequest indicates an expected call of DeleteDBInstanceRequest
func (mr *MockDocDBAPIMockRecorder) DeleteDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstanceRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBInstanceRequest), arg0)
}

// DeleteDBInstanceWithContext mocks base method
func (m *MockDocDBAPI) DeleteDBInstanceWithContext(arg0 context.Context, arg1 *docdb.DeleteDBInstanceInput, arg2 ...request.Option) (*docdb.DeleteDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DeleteDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBInstanceWithContext indicates an expected call of DeleteDBInstanceWithContext
func (mr *MockDocDBAPIMockRecorder) DeleteDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBInstanceWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBInstanceWithContext), varargs...)
}

// DeleteDBSubnetGroup mocks base method
func (m *MockDocDBAPI) DeleteDBSubnetGroup(arg0 *docdb.DeleteDBSubnetGroupInput) (*docdb.DeleteDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBSubnetGroup", arg0)
	ret0, _ := ret[0].(*docdb.DeleteDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBSubnetGroup indicates an expected call of DeleteDBSubnetGroup
func (mr *MockDocDBAPIMockRecorder) DeleteDBSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBSubnetGroup", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBSubnetGroup), arg0)
}

// DeleteDBSubnetGroupRequest mocks base method
func (m *MockDocDBAPI) DeleteDBSubnetGroupRequest(arg0 *docdb.DeleteDBSubnetGroupInput) (*request.Request, *docdb.DeleteDBSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DeleteDBSubnetGroupOutput)
	return ret0, ret1
}

// DeleteDBSubnetGroupRequest indicates an expected call of DeleteDBSubnetGroupRequest
func (mr *MockDocDBAPIMockRecorder) DeleteDBSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBSubnetGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBSubnetGroupRequest), arg0)
}

// DeleteDBSubnetGroupWithContext mocks base method
func (m *MockDocDBAPI) DeleteDBSubnetGroupWithContext(arg0 context.Context, arg1 *docdb.DeleteDBSubnetGroupInput, arg2 ...request.Option) (*docdb.DeleteDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDBSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DeleteDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBSubnetGroupWithContext indicates an expected call of DeleteDBSubnetGroupWithContext
func (mr *MockDocDBAPIMockRecorder) DeleteDBSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBSubnetGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DeleteDBSubnetGroupWithContext), varargs...)
}

// DescribeCertificates mocks base method
func (m *MockDocDBAPI) DescribeCertificates(arg0 *docdb.DescribeCertificatesInput) (*docdb.DescribeCertificatesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificates", arg0)
	ret0, _ := ret[0].(*docdb.DescribeCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificates indicates an expected call of DescribeCertificates
func (mr *MockDocDBAPIMockRecorder) DescribeCertificates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificates", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeCertificates), arg0)
}

// DescribeCertificatesPages mocks base method
func (m *MockDocDBAPI) DescribeCertificatesPages(arg0 *docdb.DescribeCertificatesInput, arg1 func(*docdb.DescribeCertificatesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCertificatesPages indicates an expected call of DescribeCertificatesPages
func (mr *MockDocDBAPIMockRecorder) DescribeCertificatesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeCertificatesPages), arg0, arg1)
}

// DescribeCertificatesPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeCertificatesPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeCertificatesInput, arg2 func(*docdb.DescribeCertificatesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeCertificatesPagesWithContext indicates an expected call of DescribeCertificatesPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeCertificatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeCertificatesPagesWithContext), varargs...)
}

// DescribeCertificatesRequest mocks base method
func (m *MockDocDBAPI) DescribeCertificatesRequest(arg0 *docdb.DescribeCertificatesInput) (*request.Request, *docdb.DescribeCertificatesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeCertificatesOutput)
	return ret0, ret1
}

// DescribeCertificatesRequest indicates an expected call of DescribeCertificatesRequest
func (mr *MockDocDBAPIMockRecorder) DescribeCertificatesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeCertificatesRequest), arg0)
}

// DescribeCertificatesWithContext mocks base method
func (m *MockDocDBAPI) DescribeCertificatesWithContext(arg0 context.Context, arg1 *docdb.DescribeCertificatesInput, arg2 ...request.Option) (*docdb.DescribeCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificatesWithContext indicates an expected call of DescribeCertificatesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeCertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificatesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeCertificatesWithContext), varargs...)
}

// DescribeDBClusterParameterGroups mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParameterGroups(arg0 *docdb.DescribeDBClusterParameterGroupsInput) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroups", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameterGroups indicates an expected call of DescribeDBClusterParameterGroups
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParameterGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroups", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParameterGroups), arg0)
}

// DescribeDBClusterParameterGroupsPages mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParameterGroupsPages(arg0 *docdb.DescribeDBClusterParameterGroupsInput, arg1 func(*docdb.DescribeDBClusterParameterGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterParameterGroupsPages indicates an expected call of DescribeDBClusterParameterGroupsPages
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParameterGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroupsPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParameterGroupsPages), arg0, arg1)
}

// DescribeDBClusterParameterGroupsPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParameterGroupsPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClusterParameterGroupsInput, arg2 func(*docdb.DescribeDBClusterParameterGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterParameterGroupsPagesWithContext indicates an expected call of DescribeDBClusterParameterGroupsPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParameterGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroupsPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParameterGroupsPagesWithContext), varargs...)
}

// DescribeDBClusterParameterGroupsRequest mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParameterGroupsRequest(arg0 *docdb.DescribeDBClusterParameterGroupsInput) (*request.Request, *docdb.DescribeDBClusterParameterGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBClusterParameterGroupsOutput)
	return ret0, ret1
}

// DescribeDBClusterParameterGroupsRequest indicates an expected call of DescribeDBClusterParameterGroupsRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParameterGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroupsRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParameterGroupsRequest), arg0)
}

// DescribeDBClusterParameterGroupsWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParameterGroupsWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClusterParameterGroupsInput, arg2 ...request.Option) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParameterGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterParameterGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameterGroupsWithContext indicates an expected call of DescribeDBClusterParameterGroupsWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParameterGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameterGroupsWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParameterGroupsWithContext), varargs...)
}

// DescribeDBClusterParameters mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParameters(arg0 *docdb.DescribeDBClusterParametersInput) (*docdb.DescribeDBClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParameters", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParameters indicates an expected call of DescribeDBClusterParameters
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParameters", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParameters), arg0)
}

// DescribeDBClusterParametersPages mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParametersPages(arg0 *docdb.DescribeDBClusterParametersInput, arg1 func(*docdb.DescribeDBClusterParametersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParametersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterParametersPages indicates an expected call of DescribeDBClusterParametersPages
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParametersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParametersPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParametersPages), arg0, arg1)
}

// DescribeDBClusterParametersPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParametersPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClusterParametersInput, arg2 func(*docdb.DescribeDBClusterParametersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParametersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterParametersPagesWithContext indicates an expected call of DescribeDBClusterParametersPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParametersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParametersPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParametersPagesWithContext), varargs...)
}

// DescribeDBClusterParametersRequest mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParametersRequest(arg0 *docdb.DescribeDBClusterParametersInput) (*request.Request, *docdb.DescribeDBClusterParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBClusterParametersOutput)
	return ret0, ret1
}

// DescribeDBClusterParametersRequest indicates an expected call of DescribeDBClusterParametersRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParametersRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParametersRequest), arg0)
}

// DescribeDBClusterParametersWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClusterParametersWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClusterParametersInput, arg2 ...request.Option) (*docdb.DescribeDBClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterParametersWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterParametersWithContext indicates an expected call of DescribeDBClusterParametersWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterParametersWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterParametersWithContext), varargs...)
}

// DescribeDBClusterSnapshotAttributes mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshotAttributes(arg0 *docdb.DescribeDBClusterSnapshotAttributesInput) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributes", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributes indicates an expected call of DescribeDBClusterSnapshotAttributes
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshotAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributes", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshotAttributes), arg0)
}

// DescribeDBClusterSnapshotAttributesRequest mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshotAttributesRequest(arg0 *docdb.DescribeDBClusterSnapshotAttributesInput) (*request.Request, *docdb.DescribeDBClusterSnapshotAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBClusterSnapshotAttributesOutput)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributesRequest indicates an expected call of DescribeDBClusterSnapshotAttributesRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshotAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributesRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshotAttributesRequest), arg0)
}

// DescribeDBClusterSnapshotAttributesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshotAttributesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClusterSnapshotAttributesInput, arg2 ...request.Option) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterSnapshotAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotAttributesWithContext indicates an expected call of DescribeDBClusterSnapshotAttributesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshotAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotAttributesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshotAttributesWithContext), varargs...)
}

// DescribeDBClusterSnapshots mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshots(arg0 *docdb.DescribeDBClusterSnapshotsInput) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshots", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshots indicates an expected call of DescribeDBClusterSnapshots
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshots", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshots), arg0)
}

// DescribeDBClusterSnapshotsPages mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshotsPages(arg0 *docdb.DescribeDBClusterSnapshotsInput, arg1 func(*docdb.DescribeDBClusterSnapshotsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterSnapshotsPages indicates an expected call of DescribeDBClusterSnapshotsPages
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshotsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotsPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshotsPages), arg0, arg1)
}

// DescribeDBClusterSnapshotsPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshotsPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClusterSnapshotsInput, arg2 func(*docdb.DescribeDBClusterSnapshotsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClusterSnapshotsPagesWithContext indicates an expected call of DescribeDBClusterSnapshotsPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshotsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotsPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshotsPagesWithContext), varargs...)
}

// DescribeDBClusterSnapshotsRequest mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshotsRequest(arg0 *docdb.DescribeDBClusterSnapshotsInput) (*request.Request, *docdb.DescribeDBClusterSnapshotsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBClusterSnapshotsOutput)
	return ret0, ret1
}

// DescribeDBClusterSnapshotsRequest indicates an expected call of DescribeDBClusterSnapshotsRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshotsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotsRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshotsRequest), arg0)
}

// DescribeDBClusterSnapshotsWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClusterSnapshotsWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClusterSnapshotsInput, arg2 ...request.Option) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClusterSnapshotsWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClusterSnapshotsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusterSnapshotsWithContext indicates an expected call of DescribeDBClusterSnapshotsWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusterSnapshotsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusterSnapshotsWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusterSnapshotsWithContext), varargs...)
}

// DescribeDBClusters mocks base method
func (m *MockDocDBAPI) DescribeDBClusters(arg0 *docdb.DescribeDBClustersInput) (*docdb.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClusters", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClusters indicates an expected call of DescribeDBClusters
func (mr *MockDocDBAPIMockRecorder) DescribeDBClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClusters", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClusters), arg0)
}

// DescribeDBClustersPages mocks base method
func (m *MockDocDBAPI) DescribeDBClustersPages(arg0 *docdb.DescribeDBClustersInput, arg1 func(*docdb.DescribeDBClustersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClustersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClustersPages indicates an expected call of DescribeDBClustersPages
func (mr *MockDocDBAPIMockRecorder) DescribeDBClustersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClustersPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClustersPages), arg0, arg1)
}

// DescribeDBClustersPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClustersPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClustersInput, arg2 func(*docdb.DescribeDBClustersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClustersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBClustersPagesWithContext indicates an expected call of DescribeDBClustersPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClustersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClustersPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClustersPagesWithContext), varargs...)
}

// DescribeDBClustersRequest mocks base method
func (m *MockDocDBAPI) DescribeDBClustersRequest(arg0 *docdb.DescribeDBClustersInput) (*request.Request, *docdb.DescribeDBClustersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBClustersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBClustersOutput)
	return ret0, ret1
}

// DescribeDBClustersRequest indicates an expected call of DescribeDBClustersRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBClustersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClustersRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClustersRequest), arg0)
}

// DescribeDBClustersWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBClustersWithContext(arg0 context.Context, arg1 *docdb.DescribeDBClustersInput, arg2 ...request.Option) (*docdb.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBClustersWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBClustersWithContext indicates an expected call of DescribeDBClustersWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBClustersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBClustersWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBClustersWithContext), varargs...)
}

// DescribeDBEngineVersions mocks base method
func (m *MockDocDBAPI) DescribeDBEngineVersions(arg0 *docdb.DescribeDBEngineVersionsInput) (*docdb.DescribeDBEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBEngineVersions", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBEngineVersions indicates an expected call of DescribeDBEngineVersions
func (mr *MockDocDBAPIMockRecorder) DescribeDBEngineVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersions", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBEngineVersions), arg0)
}

// DescribeDBEngineVersionsPages mocks base method
func (m *MockDocDBAPI) DescribeDBEngineVersionsPages(arg0 *docdb.DescribeDBEngineVersionsInput, arg1 func(*docdb.DescribeDBEngineVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBEngineVersionsPages indicates an expected call of DescribeDBEngineVersionsPages
func (mr *MockDocDBAPIMockRecorder) DescribeDBEngineVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBEngineVersionsPages), arg0, arg1)
}

// DescribeDBEngineVersionsPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBEngineVersionsPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBEngineVersionsInput, arg2 func(*docdb.DescribeDBEngineVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBEngineVersionsPagesWithContext indicates an expected call of DescribeDBEngineVersionsPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBEngineVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBEngineVersionsPagesWithContext), varargs...)
}

// DescribeDBEngineVersionsRequest mocks base method
func (m *MockDocDBAPI) DescribeDBEngineVersionsRequest(arg0 *docdb.DescribeDBEngineVersionsInput) (*request.Request, *docdb.DescribeDBEngineVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBEngineVersionsOutput)
	return ret0, ret1
}

// DescribeDBEngineVersionsRequest indicates an expected call of DescribeDBEngineVersionsRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBEngineVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBEngineVersionsRequest), arg0)
}

// DescribeDBEngineVersionsWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBEngineVersionsWithContext(arg0 context.Context, arg1 *docdb.DescribeDBEngineVersionsInput, arg2 ...request.Option) (*docdb.DescribeDBEngineVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBEngineVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBEngineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBEngineVersionsWithContext indicates an expected call of DescribeDBEngineVersionsWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBEngineVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBEngineVersionsWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBEngineVersionsWithContext), varargs...)
}

// DescribeDBInstances mocks base method
func (m *MockDocDBAPI) DescribeDBInstances(arg0 *docdb.DescribeDBInstancesInput) (*docdb.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstances", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstances indicates an expected call of DescribeDBInstances
func (mr *MockDocDBAPIMockRecorder) DescribeDBInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstances", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBInstances), arg0)
}

// DescribeDBInstancesPages mocks base method
func (m *MockDocDBAPI) DescribeDBInstancesPages(arg0 *docdb.DescribeDBInstancesInput, arg1 func(*docdb.DescribeDBInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBInstancesPages indicates an expected call of DescribeDBInstancesPages
func (mr *MockDocDBAPIMockRecorder) DescribeDBInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBInstancesPages), arg0, arg1)
}

// DescribeDBInstancesPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBInstancesPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBInstancesInput, arg2 func(*docdb.DescribeDBInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBInstancesPagesWithContext indicates an expected call of DescribeDBInstancesPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBInstancesPagesWithContext), varargs...)
}

// DescribeDBInstancesRequest mocks base method
func (m *MockDocDBAPI) DescribeDBInstancesRequest(arg0 *docdb.DescribeDBInstancesInput) (*request.Request, *docdb.DescribeDBInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBInstancesOutput)
	return ret0, ret1
}

// DescribeDBInstancesRequest indicates an expected call of DescribeDBInstancesRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBInstancesRequest), arg0)
}

// DescribeDBInstancesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBInstancesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBInstancesInput, arg2 ...request.Option) (*docdb.DescribeDBInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBInstancesWithContext indicates an expected call of DescribeDBInstancesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBInstancesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBInstancesWithContext), varargs...)
}

// DescribeDBSubnetGroups mocks base method
func (m *MockDocDBAPI) DescribeDBSubnetGroups(arg0 *docdb.DescribeDBSubnetGroupsInput) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroups", arg0)
	ret0, _ := ret[0].(*docdb.DescribeDBSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSubnetGroups indicates an expected call of DescribeDBSubnetGroups
func (mr *MockDocDBAPIMockRecorder) DescribeDBSubnetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroups", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBSubnetGroups), arg0)
}

// DescribeDBSubnetGroupsPages mocks base method
func (m *MockDocDBAPI) DescribeDBSubnetGroupsPages(arg0 *docdb.DescribeDBSubnetGroupsInput, arg1 func(*docdb.DescribeDBSubnetGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBSubnetGroupsPages indicates an expected call of DescribeDBSubnetGroupsPages
func (mr *MockDocDBAPIMockRecorder) DescribeDBSubnetGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBSubnetGroupsPages), arg0, arg1)
}

// DescribeDBSubnetGroupsPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBSubnetGroupsPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeDBSubnetGroupsInput, arg2 func(*docdb.DescribeDBSubnetGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeDBSubnetGroupsPagesWithContext indicates an expected call of DescribeDBSubnetGroupsPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBSubnetGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBSubnetGroupsPagesWithContext), varargs...)
}

// DescribeDBSubnetGroupsRequest mocks base method
func (m *MockDocDBAPI) DescribeDBSubnetGroupsRequest(arg0 *docdb.DescribeDBSubnetGroupsInput) (*request.Request, *docdb.DescribeDBSubnetGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeDBSubnetGroupsOutput)
	return ret0, ret1
}

// DescribeDBSubnetGroupsRequest indicates an expected call of DescribeDBSubnetGroupsRequest
func (mr *MockDocDBAPIMockRecorder) DescribeDBSubnetGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBSubnetGroupsRequest), arg0)
}

// DescribeDBSubnetGroupsWithContext mocks base method
func (m *MockDocDBAPI) DescribeDBSubnetGroupsWithContext(arg0 context.Context, arg1 *docdb.DescribeDBSubnetGroupsInput, arg2 ...request.Option) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDBSubnetGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeDBSubnetGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDBSubnetGroupsWithContext indicates an expected call of DescribeDBSubnetGroupsWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeDBSubnetGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDBSubnetGroupsWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeDBSubnetGroupsWithContext), varargs...)
}

// DescribeEngineDefaultClusterParameters mocks base method
func (m *MockDocDBAPI) DescribeEngineDefaultClusterParameters(arg0 *docdb.DescribeEngineDefaultClusterParametersInput) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParameters", arg0)
	ret0, _ := ret[0].(*docdb.DescribeEngineDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParameters indicates an expected call of DescribeEngineDefaultClusterParameters
func (mr *MockDocDBAPIMockRecorder) DescribeEngineDefaultClusterParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParameters", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEngineDefaultClusterParameters), arg0)
}

// DescribeEngineDefaultClusterParametersRequest mocks base method
func (m *MockDocDBAPI) DescribeEngineDefaultClusterParametersRequest(arg0 *docdb.DescribeEngineDefaultClusterParametersInput) (*request.Request, *docdb.DescribeEngineDefaultClusterParametersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParametersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeEngineDefaultClusterParametersOutput)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParametersRequest indicates an expected call of DescribeEngineDefaultClusterParametersRequest
func (mr *MockDocDBAPIMockRecorder) DescribeEngineDefaultClusterParametersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParametersRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEngineDefaultClusterParametersRequest), arg0)
}

// DescribeEngineDefaultClusterParametersWithContext mocks base method
func (m *MockDocDBAPI) DescribeEngineDefaultClusterParametersWithContext(arg0 context.Context, arg1 *docdb.DescribeEngineDefaultClusterParametersInput, arg2 ...request.Option) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngineDefaultClusterParametersWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeEngineDefaultClusterParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngineDefaultClusterParametersWithContext indicates an expected call of DescribeEngineDefaultClusterParametersWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeEngineDefaultClusterParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngineDefaultClusterParametersWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEngineDefaultClusterParametersWithContext), varargs...)
}

// DescribeEventCategories mocks base method
func (m *MockDocDBAPI) DescribeEventCategories(arg0 *docdb.DescribeEventCategoriesInput) (*docdb.DescribeEventCategoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventCategories", arg0)
	ret0, _ := ret[0].(*docdb.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategories indicates an expected call of DescribeEventCategories
func (mr *MockDocDBAPIMockRecorder) DescribeEventCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategories", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEventCategories), arg0)
}

// DescribeEventCategoriesRequest mocks base method
func (m *MockDocDBAPI) DescribeEventCategoriesRequest(arg0 *docdb.DescribeEventCategoriesInput) (*request.Request, *docdb.DescribeEventCategoriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventCategoriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeEventCategoriesOutput)
	return ret0, ret1
}

// DescribeEventCategoriesRequest indicates an expected call of DescribeEventCategoriesRequest
func (mr *MockDocDBAPIMockRecorder) DescribeEventCategoriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategoriesRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEventCategoriesRequest), arg0)
}

// DescribeEventCategoriesWithContext mocks base method
func (m *MockDocDBAPI) DescribeEventCategoriesWithContext(arg0 context.Context, arg1 *docdb.DescribeEventCategoriesInput, arg2 ...request.Option) (*docdb.DescribeEventCategoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventCategoriesWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeEventCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventCategoriesWithContext indicates an expected call of DescribeEventCategoriesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeEventCategoriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventCategoriesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEventCategoriesWithContext), varargs...)
}

// DescribeEvents mocks base method
func (m *MockDocDBAPI) DescribeEvents(arg0 *docdb.DescribeEventsInput) (*docdb.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEvents", arg0)
	ret0, _ := ret[0].(*docdb.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEvents indicates an expected call of DescribeEvents
func (mr *MockDocDBAPIMockRecorder) DescribeEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEvents", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEvents), arg0)
}

// DescribeEventsPages mocks base method
func (m *MockDocDBAPI) DescribeEventsPages(arg0 *docdb.DescribeEventsInput, arg1 func(*docdb.DescribeEventsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPages indicates an expected call of DescribeEventsPages
func (mr *MockDocDBAPIMockRecorder) DescribeEventsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEventsPages), arg0, arg1)
}

// DescribeEventsPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeEventsPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeEventsInput, arg2 func(*docdb.DescribeEventsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeEventsPagesWithContext indicates an expected call of DescribeEventsPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeEventsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEventsPagesWithContext), varargs...)
}

// DescribeEventsRequest mocks base method
func (m *MockDocDBAPI) DescribeEventsRequest(arg0 *docdb.DescribeEventsInput) (*request.Request, *docdb.DescribeEventsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEventsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeEventsOutput)
	return ret0, ret1
}

// DescribeEventsRequest indicates an expected call of DescribeEventsRequest
func (mr *MockDocDBAPIMockRecorder) DescribeEventsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEventsRequest), arg0)
}

// DescribeEventsWithContext mocks base method
func (m *MockDocDBAPI) DescribeEventsWithContext(arg0 context.Context, arg1 *docdb.DescribeEventsInput, arg2 ...request.Option) (*docdb.DescribeEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEventsWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEventsWithContext indicates an expected call of DescribeEventsWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEventsWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeEventsWithContext), varargs...)
}

// DescribeOrderableDBInstanceOptions mocks base method
func (m *MockDocDBAPI) DescribeOrderableDBInstanceOptions(arg0 *docdb.DescribeOrderableDBInstanceOptionsInput) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptions", arg0)
	ret0, _ := ret[0].(*docdb.DescribeOrderableDBInstanceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptions indicates an expected call of DescribeOrderableDBInstanceOptions
func (mr *MockDocDBAPIMockRecorder) DescribeOrderableDBInstanceOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptions", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeOrderableDBInstanceOptions), arg0)
}

// DescribeOrderableDBInstanceOptionsPages mocks base method
func (m *MockDocDBAPI) DescribeOrderableDBInstanceOptionsPages(arg0 *docdb.DescribeOrderableDBInstanceOptionsInput, arg1 func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOrderableDBInstanceOptionsPages indicates an expected call of DescribeOrderableDBInstanceOptionsPages
func (mr *MockDocDBAPIMockRecorder) DescribeOrderableDBInstanceOptionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeOrderableDBInstanceOptionsPages), arg0, arg1)
}

// DescribeOrderableDBInstanceOptionsPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribeOrderableDBInstanceOptionsPagesWithContext(arg0 context.Context, arg1 *docdb.DescribeOrderableDBInstanceOptionsInput, arg2 func(*docdb.DescribeOrderableDBInstanceOptionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOrderableDBInstanceOptionsPagesWithContext indicates an expected call of DescribeOrderableDBInstanceOptionsPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeOrderableDBInstanceOptionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeOrderableDBInstanceOptionsPagesWithContext), varargs...)
}

// DescribeOrderableDBInstanceOptionsRequest mocks base method
func (m *MockDocDBAPI) DescribeOrderableDBInstanceOptionsRequest(arg0 *docdb.DescribeOrderableDBInstanceOptionsInput) (*request.Request, *docdb.DescribeOrderableDBInstanceOptionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribeOrderableDBInstanceOptionsOutput)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptionsRequest indicates an expected call of DescribeOrderableDBInstanceOptionsRequest
func (mr *MockDocDBAPIMockRecorder) DescribeOrderableDBInstanceOptionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeOrderableDBInstanceOptionsRequest), arg0)
}

// DescribeOrderableDBInstanceOptionsWithContext mocks base method
func (m *MockDocDBAPI) DescribeOrderableDBInstanceOptionsWithContext(arg0 context.Context, arg1 *docdb.DescribeOrderableDBInstanceOptionsInput, arg2 ...request.Option) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrderableDBInstanceOptionsWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribeOrderableDBInstanceOptionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrderableDBInstanceOptionsWithContext indicates an expected call of DescribeOrderableDBInstanceOptionsWithContext
func (mr *MockDocDBAPIMockRecorder) DescribeOrderableDBInstanceOptionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrderableDBInstanceOptionsWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribeOrderableDBInstanceOptionsWithContext), varargs...)
}

// DescribePendingMaintenanceActions mocks base method
func (m *MockDocDBAPI) DescribePendingMaintenanceActions(arg0 *docdb.DescribePendingMaintenanceActionsInput) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActions", arg0)
	ret0, _ := ret[0].(*docdb.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActions indicates an expected call of DescribePendingMaintenanceActions
func (mr *MockDocDBAPIMockRecorder) DescribePendingMaintenanceActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActions", reflect.TypeOf((*MockDocDBAPI)(nil).DescribePendingMaintenanceActions), arg0)
}

// DescribePendingMaintenanceActionsPages mocks base method
func (m *MockDocDBAPI) DescribePendingMaintenanceActionsPages(arg0 *docdb.DescribePendingMaintenanceActionsInput, arg1 func(*docdb.DescribePendingMaintenanceActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePendingMaintenanceActionsPages indicates an expected call of DescribePendingMaintenanceActionsPages
func (mr *MockDocDBAPIMockRecorder) DescribePendingMaintenanceActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsPages", reflect.TypeOf((*MockDocDBAPI)(nil).DescribePendingMaintenanceActionsPages), arg0, arg1)
}

// DescribePendingMaintenanceActionsPagesWithContext mocks base method
func (m *MockDocDBAPI) DescribePendingMaintenanceActionsPagesWithContext(arg0 context.Context, arg1 *docdb.DescribePendingMaintenanceActionsInput, arg2 func(*docdb.DescribePendingMaintenanceActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePendingMaintenanceActionsPagesWithContext indicates an expected call of DescribePendingMaintenanceActionsPagesWithContext
func (mr *MockDocDBAPIMockRecorder) DescribePendingMaintenanceActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsPagesWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribePendingMaintenanceActionsPagesWithContext), varargs...)
}

// DescribePendingMaintenanceActionsRequest mocks base method
func (m *MockDocDBAPI) DescribePendingMaintenanceActionsRequest(arg0 *docdb.DescribePendingMaintenanceActionsInput) (*request.Request, *docdb.DescribePendingMaintenanceActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.DescribePendingMaintenanceActionsOutput)
	return ret0, ret1
}

// DescribePendingMaintenanceActionsRequest indicates an expected call of DescribePendingMaintenanceActionsRequest
func (mr *MockDocDBAPIMockRecorder) DescribePendingMaintenanceActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsRequest", reflect.TypeOf((*MockDocDBAPI)(nil).DescribePendingMaintenanceActionsRequest), arg0)
}

// DescribePendingMaintenanceActionsWithContext mocks base method
func (m *MockDocDBAPI) DescribePendingMaintenanceActionsWithContext(arg0 context.Context, arg1 *docdb.DescribePendingMaintenanceActionsInput, arg2 ...request.Option) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePendingMaintenanceActionsWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.DescribePendingMaintenanceActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePendingMaintenanceActionsWithContext indicates an expected call of DescribePendingMaintenanceActionsWithContext
func (mr *MockDocDBAPIMockRecorder) DescribePendingMaintenanceActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePendingMaintenanceActionsWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).DescribePendingMaintenanceActionsWithContext), varargs...)
}

// FailoverDBCluster mocks base method
func (m *MockDocDBAPI) FailoverDBCluster(arg0 *docdb.FailoverDBClusterInput) (*docdb.FailoverDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverDBCluster", arg0)
	ret0, _ := ret[0].(*docdb.FailoverDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverDBCluster indicates an expected call of FailoverDBCluster
func (mr *MockDocDBAPIMockRecorder) FailoverDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverDBCluster", reflect.TypeOf((*MockDocDBAPI)(nil).FailoverDBCluster), arg0)
}

// FailoverDBClusterRequest mocks base method
func (m *MockDocDBAPI) FailoverDBClusterRequest(arg0 *docdb.FailoverDBClusterInput) (*request.Request, *docdb.FailoverDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.FailoverDBClusterOutput)
	return ret0, ret1
}

// FailoverDBClusterRequest indicates an expected call of FailoverDBClusterRequest
func (mr *MockDocDBAPIMockRecorder) FailoverDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverDBClusterRequest", reflect.TypeOf((*MockDocDBAPI)(nil).FailoverDBClusterRequest), arg0)
}

// FailoverDBClusterWithContext mocks base method
func (m *MockDocDBAPI) FailoverDBClusterWithContext(arg0 context.Context, arg1 *docdb.FailoverDBClusterInput, arg2 ...request.Option) (*docdb.FailoverDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FailoverDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.FailoverDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverDBClusterWithContext indicates an expected call of FailoverDBClusterWithContext
func (mr *MockDocDBAPIMockRecorder) FailoverDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverDBClusterWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).FailoverDBClusterWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockDocDBAPI) ListTagsForResource(arg0 *docdb.ListTagsForResourceInput) (*docdb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*docdb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockDocDBAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDocDBAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockDocDBAPI) ListTagsForResourceRequest(arg0 *docdb.ListTagsForResourceInput) (*request.Request, *docdb.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockDocDBAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockDocDBAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *docdb.ListTagsForResourceInput, arg2 ...request.Option) (*docdb.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockDocDBAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ModifyDBCluster mocks base method
func (m *MockDocDBAPI) ModifyDBCluster(arg0 *docdb.ModifyDBClusterInput) (*docdb.ModifyDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBCluster", arg0)
	ret0, _ := ret[0].(*docdb.ModifyDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBCluster indicates an expected call of ModifyDBCluster
func (mr *MockDocDBAPIMockRecorder) ModifyDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBCluster", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBCluster), arg0)
}

// ModifyDBClusterParameterGroup mocks base method
func (m *MockDocDBAPI) ModifyDBClusterParameterGroup(arg0 *docdb.ModifyDBClusterParameterGroupInput) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*docdb.ModifyDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterParameterGroup indicates an expected call of ModifyDBClusterParameterGroup
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterParameterGroup", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterParameterGroup), arg0)
}

// ModifyDBClusterParameterGroupRequest mocks base method
func (m *MockDocDBAPI) ModifyDBClusterParameterGroupRequest(arg0 *docdb.ModifyDBClusterParameterGroupInput) (*request.Request, *docdb.ModifyDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ModifyDBClusterParameterGroupOutput)
	return ret0, ret1
}

// ModifyDBClusterParameterGroupRequest indicates an expected call of ModifyDBClusterParameterGroupRequest
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterParameterGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterParameterGroupRequest), arg0)
}

// ModifyDBClusterParameterGroupWithContext mocks base method
func (m *MockDocDBAPI) ModifyDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *docdb.ModifyDBClusterParameterGroupInput, arg2 ...request.Option) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ModifyDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterParameterGroupWithContext indicates an expected call of ModifyDBClusterParameterGroupWithContext
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterParameterGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterParameterGroupWithContext), varargs...)
}

// ModifyDBClusterRequest mocks base method
func (m *MockDocDBAPI) ModifyDBClusterRequest(arg0 *docdb.ModifyDBClusterInput) (*request.Request, *docdb.ModifyDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ModifyDBClusterOutput)
	return ret0, ret1
}

// ModifyDBClusterRequest indicates an expected call of ModifyDBClusterRequest
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterRequest), arg0)
}

// ModifyDBClusterSnapshotAttribute mocks base method
func (m *MockDocDBAPI) ModifyDBClusterSnapshotAttribute(arg0 *docdb.ModifyDBClusterSnapshotAttributeInput) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterSnapshotAttribute", arg0)
	ret0, _ := ret[0].(*docdb.ModifyDBClusterSnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterSnapshotAttribute indicates an expected call of ModifyDBClusterSnapshotAttribute
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterSnapshotAttribute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterSnapshotAttribute", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterSnapshotAttribute), arg0)
}

// ModifyDBClusterSnapshotAttributeRequest mocks base method
func (m *MockDocDBAPI) ModifyDBClusterSnapshotAttributeRequest(arg0 *docdb.ModifyDBClusterSnapshotAttributeInput) (*request.Request, *docdb.ModifyDBClusterSnapshotAttributeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBClusterSnapshotAttributeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ModifyDBClusterSnapshotAttributeOutput)
	return ret0, ret1
}

// ModifyDBClusterSnapshotAttributeRequest indicates an expected call of ModifyDBClusterSnapshotAttributeRequest
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterSnapshotAttributeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterSnapshotAttributeRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterSnapshotAttributeRequest), arg0)
}

// ModifyDBClusterSnapshotAttributeWithContext mocks base method
func (m *MockDocDBAPI) ModifyDBClusterSnapshotAttributeWithContext(arg0 context.Context, arg1 *docdb.ModifyDBClusterSnapshotAttributeInput, arg2 ...request.Option) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBClusterSnapshotAttributeWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ModifyDBClusterSnapshotAttributeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterSnapshotAttributeWithContext indicates an expected call of ModifyDBClusterSnapshotAttributeWithContext
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterSnapshotAttributeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterSnapshotAttributeWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterSnapshotAttributeWithContext), varargs...)
}

// ModifyDBClusterWithContext mocks base method
func (m *MockDocDBAPI) ModifyDBClusterWithContext(arg0 context.Context, arg1 *docdb.ModifyDBClusterInput, arg2 ...request.Option) (*docdb.ModifyDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ModifyDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBClusterWithContext indicates an expected call of ModifyDBClusterWithContext
func (mr *MockDocDBAPIMockRecorder) ModifyDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBClusterWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBClusterWithContext), varargs...)
}

// ModifyDBInstance mocks base method
func (m *MockDocDBAPI) ModifyDBInstance(arg0 *docdb.ModifyDBInstanceInput) (*docdb.ModifyDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBInstance", arg0)
	ret0, _ := ret[0].(*docdb.ModifyDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBInstance indicates an expected call of ModifyDBInstance
func (mr *MockDocDBAPIMockRecorder) ModifyDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBInstance), arg0)
}

// ModifyDBInstanceRequest mocks base method
func (m *MockDocDBAPI) ModifyDBInstanceRequest(arg0 *docdb.ModifyDBInstanceInput) (*request.Request, *docdb.ModifyDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ModifyDBInstanceOutput)
	return ret0, ret1
}

// ModifyDBInstanceRequest indicates an expected call of ModifyDBInstanceRequest
func (mr *MockDocDBAPIMockRecorder) ModifyDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBInstanceRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBInstanceRequest), arg0)
}

// ModifyDBInstanceWithContext mocks base method
func (m *MockDocDBAPI) ModifyDBInstanceWithContext(arg0 context.Context, arg1 *docdb.ModifyDBInstanceInput, arg2 ...request.Option) (*docdb.ModifyDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ModifyDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBInstanceWithContext indicates an expected call of ModifyDBInstanceWithContext
func (mr *MockDocDBAPIMockRecorder) ModifyDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBInstanceWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBInstanceWithContext), varargs...)
}

// ModifyDBSubnetGroup mocks base method
func (m *MockDocDBAPI) ModifyDBSubnetGroup(arg0 *docdb.ModifyDBSubnetGroupInput) (*docdb.ModifyDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBSubnetGroup", arg0)
	ret0, _ := ret[0].(*docdb.ModifyDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBSubnetGroup indicates an expected call of ModifyDBSubnetGroup
func (mr *MockDocDBAPIMockRecorder) ModifyDBSubnetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBSubnetGroup", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBSubnetGroup), arg0)
}

// ModifyDBSubnetGroupRequest mocks base method
func (m *MockDocDBAPI) ModifyDBSubnetGroupRequest(arg0 *docdb.ModifyDBSubnetGroupInput) (*request.Request, *docdb.ModifyDBSubnetGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDBSubnetGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ModifyDBSubnetGroupOutput)
	return ret0, ret1
}

// ModifyDBSubnetGroupRequest indicates an expected call of ModifyDBSubnetGroupRequest
func (mr *MockDocDBAPIMockRecorder) ModifyDBSubnetGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBSubnetGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBSubnetGroupRequest), arg0)
}

// ModifyDBSubnetGroupWithContext mocks base method
func (m *MockDocDBAPI) ModifyDBSubnetGroupWithContext(arg0 context.Context, arg1 *docdb.ModifyDBSubnetGroupInput, arg2 ...request.Option) (*docdb.ModifyDBSubnetGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyDBSubnetGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ModifyDBSubnetGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDBSubnetGroupWithContext indicates an expected call of ModifyDBSubnetGroupWithContext
func (mr *MockDocDBAPIMockRecorder) ModifyDBSubnetGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDBSubnetGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ModifyDBSubnetGroupWithContext), varargs...)
}

// RebootDBInstance mocks base method
func (m *MockDocDBAPI) RebootDBInstance(arg0 *docdb.RebootDBInstanceInput) (*docdb.RebootDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootDBInstance", arg0)
	ret0, _ := ret[0].(*docdb.RebootDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootDBInstance indicates an expected call of RebootDBInstance
func (mr *MockDocDBAPIMockRecorder) RebootDBInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootDBInstance", reflect.TypeOf((*MockDocDBAPI)(nil).RebootDBInstance), arg0)
}

// RebootDBInstanceRequest mocks base method
func (m *MockDocDBAPI) RebootDBInstanceRequest(arg0 *docdb.RebootDBInstanceInput) (*request.Request, *docdb.RebootDBInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootDBInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.RebootDBInstanceOutput)
	return ret0, ret1
}

// RebootDBInstanceRequest indicates an expected call of RebootDBInstanceRequest
func (mr *MockDocDBAPIMockRecorder) RebootDBInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootDBInstanceRequest", reflect.TypeOf((*MockDocDBAPI)(nil).RebootDBInstanceRequest), arg0)
}

// RebootDBInstanceWithContext mocks base method
func (m *MockDocDBAPI) RebootDBInstanceWithContext(arg0 context.Context, arg1 *docdb.RebootDBInstanceInput, arg2 ...request.Option) (*docdb.RebootDBInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootDBInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.RebootDBInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootDBInstanceWithContext indicates an expected call of RebootDBInstanceWithContext
func (mr *MockDocDBAPIMockRecorder) RebootDBInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootDBInstanceWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).RebootDBInstanceWithContext), varargs...)
}

// RemoveTagsFromResource mocks base method
func (m *MockDocDBAPI) RemoveTagsFromResource(arg0 *docdb.RemoveTagsFromResourceInput) (*docdb.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResource", arg0)
	ret0, _ := ret[0].(*docdb.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResource indicates an expected call of RemoveTagsFromResource
func (mr *MockDocDBAPIMockRecorder) RemoveTagsFromResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResource", reflect.TypeOf((*MockDocDBAPI)(nil).RemoveTagsFromResource), arg0)
}

// RemoveTagsFromResourceRequest mocks base method
func (m *MockDocDBAPI) RemoveTagsFromResourceRequest(arg0 *docdb.RemoveTagsFromResourceInput) (*request.Request, *docdb.RemoveTagsFromResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.RemoveTagsFromResourceOutput)
	return ret0, ret1
}

// RemoveTagsFromResourceRequest indicates an expected call of RemoveTagsFromResourceRequest
func (mr *MockDocDBAPIMockRecorder) RemoveTagsFromResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceRequest", reflect.TypeOf((*MockDocDBAPI)(nil).RemoveTagsFromResourceRequest), arg0)
}

// RemoveTagsFromResourceWithContext mocks base method
func (m *MockDocDBAPI) RemoveTagsFromResourceWithContext(arg0 context.Context, arg1 *docdb.RemoveTagsFromResourceInput, arg2 ...request.Option) (*docdb.RemoveTagsFromResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTagsFromResourceWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTagsFromResourceWithContext indicates an expected call of RemoveTagsFromResourceWithContext
func (mr *MockDocDBAPIMockRecorder) RemoveTagsFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromResourceWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).RemoveTagsFromResourceWithContext), varargs...)
}

// ResetDBClusterParameterGroup mocks base method
func (m *MockDocDBAPI) ResetDBClusterParameterGroup(arg0 *docdb.ResetDBClusterParameterGroupInput) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBClusterParameterGroup", arg0)
	ret0, _ := ret[0].(*docdb.ResetDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBClusterParameterGroup indicates an expected call of ResetDBClusterParameterGroup
func (mr *MockDocDBAPIMockRecorder) ResetDBClusterParameterGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBClusterParameterGroup", reflect.TypeOf((*MockDocDBAPI)(nil).ResetDBClusterParameterGroup), arg0)
}

// ResetDBClusterParameterGroupRequest mocks base method
func (m *MockDocDBAPI) ResetDBClusterParameterGroupRequest(arg0 *docdb.ResetDBClusterParameterGroupInput) (*request.Request, *docdb.ResetDBClusterParameterGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBClusterParameterGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.ResetDBClusterParameterGroupOutput)
	return ret0, ret1
}

// ResetDBClusterParameterGroupRequest indicates an expected call of ResetDBClusterParameterGroupRequest
func (mr *MockDocDBAPIMockRecorder) ResetDBClusterParameterGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBClusterParameterGroupRequest", reflect.TypeOf((*MockDocDBAPI)(nil).ResetDBClusterParameterGroupRequest), arg0)
}

// ResetDBClusterParameterGroupWithContext mocks base method
func (m *MockDocDBAPI) ResetDBClusterParameterGroupWithContext(arg0 context.Context, arg1 *docdb.ResetDBClusterParameterGroupInput, arg2 ...request.Option) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetDBClusterParameterGroupWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.ResetDBClusterParameterGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBClusterParameterGroupWithContext indicates an expected call of ResetDBClusterParameterGroupWithContext
func (mr *MockDocDBAPIMockRecorder) ResetDBClusterParameterGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBClusterParameterGroupWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).ResetDBClusterParameterGroupWithContext), varargs...)
}

// RestoreDBClusterFromSnapshot mocks base method
func (m *MockDocDBAPI) RestoreDBClusterFromSnapshot(arg0 *docdb.RestoreDBClusterFromSnapshotInput) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterFromSnapshot", arg0)
	ret0, _ := ret[0].(*docdb.RestoreDBClusterFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterFromSnapshot indicates an expected call of RestoreDBClusterFromSnapshot
func (mr *MockDocDBAPIMockRecorder) RestoreDBClusterFromSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterFromSnapshot", reflect.TypeOf((*MockDocDBAPI)(nil).RestoreDBClusterFromSnapshot), arg0)
}

// RestoreDBClusterFromSnapshotRequest mocks base method
func (m *MockDocDBAPI) RestoreDBClusterFromSnapshotRequest(arg0 *docdb.RestoreDBClusterFromSnapshotInput) (*request.Request, *docdb.RestoreDBClusterFromSnapshotOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterFromSnapshotRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.RestoreDBClusterFromSnapshotOutput)
	return ret0, ret1
}

// RestoreDBClusterFromSnapshotRequest indicates an expected call of RestoreDBClusterFromSnapshotRequest
func (mr *MockDocDBAPIMockRecorder) RestoreDBClusterFromSnapshotRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterFromSnapshotRequest", reflect.TypeOf((*MockDocDBAPI)(nil).RestoreDBClusterFromSnapshotRequest), arg0)
}

// RestoreDBClusterFromSnapshotWithContext mocks base method
func (m *MockDocDBAPI) RestoreDBClusterFromSnapshotWithContext(arg0 context.Context, arg1 *docdb.RestoreDBClusterFromSnapshotInput, arg2 ...request.Option) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreDBClusterFromSnapshotWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.RestoreDBClusterFromSnapshotOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterFromSnapshotWithContext indicates an expected call of RestoreDBClusterFromSnapshotWithContext
func (mr *MockDocDBAPIMockRecorder) RestoreDBClusterFromSnapshotWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterFromSnapshotWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).RestoreDBClusterFromSnapshotWithContext), varargs...)
}

// RestoreDBClusterToPointInTime mocks base method
func (m *MockDocDBAPI) RestoreDBClusterToPointInTime(arg0 *docdb.RestoreDBClusterToPointInTimeInput) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterToPointInTime", arg0)
	ret0, _ := ret[0].(*docdb.RestoreDBClusterToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterToPointInTime indicates an expected call of RestoreDBClusterToPointInTime
func (mr *MockDocDBAPIMockRecorder) RestoreDBClusterToPointInTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterToPointInTime", reflect.TypeOf((*MockDocDBAPI)(nil).RestoreDBClusterToPointInTime), arg0)
}

// RestoreDBClusterToPointInTimeRequest mocks base method
func (m *MockDocDBAPI) RestoreDBClusterToPointInTimeRequest(arg0 *docdb.RestoreDBClusterToPointInTimeInput) (*request.Request, *docdb.RestoreDBClusterToPointInTimeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDBClusterToPointInTimeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.RestoreDBClusterToPointInTimeOutput)
	return ret0, ret1
}

// RestoreDBClusterToPointInTimeRequest indicates an expected call of RestoreDBClusterToPointInTimeRequest
func (mr *MockDocDBAPIMockRecorder) RestoreDBClusterToPointInTimeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterToPointInTimeRequest", reflect.TypeOf((*MockDocDBAPI)(nil).RestoreDBClusterToPointInTimeRequest), arg0)
}

// RestoreDBClusterToPointInTimeWithContext mocks base method
func (m *MockDocDBAPI) RestoreDBClusterToPointInTimeWithContext(arg0 context.Context, arg1 *docdb.RestoreDBClusterToPointInTimeInput, arg2 ...request.Option) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreDBClusterToPointInTimeWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.RestoreDBClusterToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreDBClusterToPointInTimeWithContext indicates an expected call of RestoreDBClusterToPointInTimeWithContext
func (mr *MockDocDBAPIMockRecorder) RestoreDBClusterToPointInTimeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDBClusterToPointInTimeWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).RestoreDBClusterToPointInTimeWithContext), varargs...)
}

// StartDBCluster mocks base method
func (m *MockDocDBAPI) StartDBCluster(arg0 *docdb.StartDBClusterInput) (*docdb.StartDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBCluster", arg0)
	ret0, _ := ret[0].(*docdb.StartDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBCluster indicates an expected call of StartDBCluster
func (mr *MockDocDBAPIMockRecorder) StartDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBCluster", reflect.TypeOf((*MockDocDBAPI)(nil).StartDBCluster), arg0)
}

// StartDBClusterRequest mocks base method
func (m *MockDocDBAPI) StartDBClusterRequest(arg0 *docdb.StartDBClusterInput) (*request.Request, *docdb.StartDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.StartDBClusterOutput)
	return ret0, ret1
}

// StartDBClusterRequest indicates an expected call of StartDBClusterRequest
func (mr *MockDocDBAPIMockRecorder) StartDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBClusterRequest", reflect.TypeOf((*MockDocDBAPI)(nil).StartDBClusterRequest), arg0)
}

// StartDBClusterWithContext mocks base method
func (m *MockDocDBAPI) StartDBClusterWithContext(arg0 context.Context, arg1 *docdb.StartDBClusterInput, arg2 ...request.Option) (*docdb.StartDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.StartDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBClusterWithContext indicates an expected call of StartDBClusterWithContext
func (mr *MockDocDBAPIMockRecorder) StartDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBClusterWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).StartDBClusterWithContext), varargs...)
}

// StopDBCluster mocks base method
func (m *MockDocDBAPI) StopDBCluster(arg0 *docdb.StopDBClusterInput) (*docdb.StopDBClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDBCluster", arg0)
	ret0, _ := ret[0].(*docdb.StopDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBCluster indicates an expected call of StopDBCluster
func (mr *MockDocDBAPIMockRecorder) StopDBCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBCluster", reflect.TypeOf((*MockDocDBAPI)(nil).StopDBCluster), arg0)
}

// StopDBClusterRequest mocks base method
func (m *MockDocDBAPI) StopDBClusterRequest(arg0 *docdb.StopDBClusterInput) (*request.Request, *docdb.StopDBClusterOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDBClusterRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*docdb.StopDBClusterOutput)
	return ret0, ret1
}

// StopDBClusterRequest indicates an expected call of StopDBClusterRequest
func (mr *MockDocDBAPIMockRecorder) StopDBClusterRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBClusterRequest", reflect.TypeOf((*MockDocDBAPI)(nil).StopDBClusterRequest), arg0)
}

// StopDBClusterWithContext mocks base method
func (m *MockDocDBAPI) StopDBClusterWithContext(arg0 context.Context, arg1 *docdb.StopDBClusterInput, arg2 ...request.Option) (*docdb.StopDBClusterOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopDBClusterWithContext", varargs...)
	ret0, _ := ret[0].(*docdb.StopDBClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBClusterWithContext indicates an expected call of StopDBClusterWithContext
func (mr *MockDocDBAPIMockRecorder) StopDBClusterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBClusterWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).StopDBClusterWithContext), varargs...)
}

// WaitUntilDBInstanceAvailable mocks base method
func (m *MockDocDBAPI) WaitUntilDBInstanceAvailable(arg0 *docdb.DescribeDBInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceAvailable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceAvailable indicates an expected call of WaitUntilDBInstanceAvailable
func (mr *MockDocDBAPIMockRecorder) WaitUntilDBInstanceAvailable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceAvailable", reflect.TypeOf((*MockDocDBAPI)(nil).WaitUntilDBInstanceAvailable), arg0)
}

// WaitUntilDBInstanceAvailableWithContext mocks base method
func (m *MockDocDBAPI) WaitUntilDBInstanceAvailableWithContext(arg0 context.Context, arg1 *docdb.DescribeDBInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceAvailableWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceAvailableWithContext indicates an expected call of WaitUntilDBInstanceAvailableWithContext
func (mr *MockDocDBAPIMockRecorder) WaitUntilDBInstanceAvailableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceAvailableWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).WaitUntilDBInstanceAvailableWithContext), varargs...)
}

// WaitUntilDBInstanceDeleted mocks base method
func (m *MockDocDBAPI) WaitUntilDBInstanceDeleted(arg0 *docdb.DescribeDBInstancesInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceDeleted indicates an expected call of WaitUntilDBInstanceDeleted
func (mr *MockDocDBAPIMockRecorder) WaitUntilDBInstanceDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceDeleted", reflect.TypeOf((*MockDocDBAPI)(nil).WaitUntilDBInstanceDeleted), arg0)
}

// WaitUntilDBInstanceDeletedWithContext mocks base method
func (m *MockDocDBAPI) WaitUntilDBInstanceDeletedWithContext(arg0 context.Context, arg1 *docdb.DescribeDBInstancesInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilDBInstanceDeletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDBInstanceDeletedWithContext indicates an expected call of WaitUntilDBInstanceDeletedWithContext
func (mr *MockDocDBAPIMockRecorder) WaitUntilDBInstanceDeletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDBInstanceDeletedWithContext", reflect.TypeOf((*MockDocDBAPI)(nil).WaitUntilDBInstanceDeletedWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/chimesdkidentity/chimesdkidentityiface (interfaces: ChimeSDKIdentityAPI)

// Package chimesdkidentitymock is a generated GoMock package.
package chimesdkidentitymock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	chimesdkidentity "github.com/aws/aws-sdk-go/service/chimesdkidentity"
	gomock "github.com/golang/mock/gomock"
)

// MockChimeSDKIdentityAPI is a mock of ChimeSDKIdentityAPI interface.
type MockChimeSDKIdentityAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChimeSDKIdentityAPIMockRecorder
}

// MockChimeSDKIdentityAPIMockRecorder is the mock recorder for MockChimeSDKIdentityAPI.
type MockChimeSDKIdentityAPIMockRecorder struct {
	mock *MockChimeSDKIdentityAPI
}

// NewMockChimeSDKIdentityAPI creates a new mock instance.
func NewMockChimeSDKIdentityAPI(ctrl *gomock.Controller) *MockChimeSDKIdentityAPI {
	mock := &MockChimeSDKIdentityAPI{ctrl: ctrl}
	mock.recorder = &MockChimeSDKIdentityAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChimeSDKIdentityAPI) EXPECT() *MockChimeSDKIdentityAPIMockRecorder {
	return m.recorder
}

// CreateAppInstance mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstance(arg0 *chimesdkidentity.CreateAppInstanceInput) (*chimesdkidentity.CreateAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInstance", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.CreateAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppInstance indicates an expected call of CreateAppInstance.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstance", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstance), arg0)
}

// CreateAppInstanceAdmin mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceAdmin(arg0 *chimesdkidentity.CreateAppInstanceAdminInput) (*chimesdkidentity.CreateAppInstanceAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInstanceAdmin", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.CreateAppInstanceAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppInstanceAdmin indicates an expected call of CreateAppInstanceAdmin.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceAdmin", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceAdmin), arg0)
}

// CreateAppInstanceAdminRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceAdminRequest(arg0 *chimesdkidentity.CreateAppInstanceAdminInput) (*request.Request, *chimesdkidentity.CreateAppInstanceAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInstanceAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.CreateAppInstanceAdminOutput)
	return ret0, ret1
}

// CreateAppInstanceAdminRequest indicates an expected call of CreateAppInstanceAdminRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceAdminRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceAdminRequest), arg0)
}

// CreateAppInstanceAdminWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceAdminWithContext(arg0 context.Context, arg1 *chimesdkidentity.CreateAppInstanceAdminInput, arg2 ...request.Option) (*chimesdkidentity.CreateAppInstanceAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppInstanceAdminWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.CreateAppInstanceAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppInstanceAdminWithContext indicates an expected call of CreateAppInstanceAdminWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceAdminWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceAdminWithContext), varargs...)
}

// CreateAppInstanceRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceRequest(arg0 *chimesdkidentity.CreateAppInstanceInput) (*request.Request, *chimesdkidentity.CreateAppInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.CreateAppInstanceOutput)
	return ret0, ret1
}

// CreateAppInstanceRequest indicates an expected call of CreateAppInstanceRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceRequest), arg0)
}

// CreateAppInstanceUser mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceUser(arg0 *chimesdkidentity.CreateAppInstanceUserInput) (*chimesdkidentity.CreateAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.CreateAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppInstanceUser indicates an expected call of CreateAppInstanceUser.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceUser", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceUser), arg0)
}

// CreateAppInstanceUserRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceUserRequest(arg0 *chimesdkidentity.CreateAppInstanceUserInput) (*request.Request, *chimesdkidentity.CreateAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.CreateAppInstanceUserOutput)
	return ret0, ret1
}

// CreateAppInstanceUserRequest indicates an expected call of CreateAppInstanceUserRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceUserRequest), arg0)
}

// CreateAppInstanceUserWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkidentity.CreateAppInstanceUserInput, arg2 ...request.Option) (*chimesdkidentity.CreateAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.CreateAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppInstanceUserWithContext indicates an expected call of CreateAppInstanceUserWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceUserWithContext), varargs...)
}

// CreateAppInstanceWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) CreateAppInstanceWithContext(arg0 context.Context, arg1 *chimesdkidentity.CreateAppInstanceInput, arg2 ...request.Option) (*chimesdkidentity.CreateAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAppInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.CreateAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppInstanceWithContext indicates an expected call of CreateAppInstanceWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) CreateAppInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInstanceWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).CreateAppInstanceWithContext), varargs...)
}

// DeleteAppInstance mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstance(arg0 *chimesdkidentity.DeleteAppInstanceInput) (*chimesdkidentity.DeleteAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppInstance", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DeleteAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppInstance indicates an expected call of DeleteAppInstance.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstance", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstance), arg0)
}

// DeleteAppInstanceAdmin mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceAdmin(arg0 *chimesdkidentity.DeleteAppInstanceAdminInput) (*chimesdkidentity.DeleteAppInstanceAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppInstanceAdmin", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DeleteAppInstanceAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppInstanceAdmin indicates an expected call of DeleteAppInstanceAdmin.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceAdmin", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceAdmin), arg0)
}

// DeleteAppInstanceAdminRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceAdminRequest(arg0 *chimesdkidentity.DeleteAppInstanceAdminInput) (*request.Request, *chimesdkidentity.DeleteAppInstanceAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppInstanceAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DeleteAppInstanceAdminOutput)
	return ret0, ret1
}

// DeleteAppInstanceAdminRequest indicates an expected call of DeleteAppInstanceAdminRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceAdminRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceAdminRequest), arg0)
}

// DeleteAppInstanceAdminWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceAdminWithContext(arg0 context.Context, arg1 *chimesdkidentity.DeleteAppInstanceAdminInput, arg2 ...request.Option) (*chimesdkidentity.DeleteAppInstanceAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppInstanceAdminWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DeleteAppInstanceAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppInstanceAdminWithContext indicates an expected call of DeleteAppInstanceAdminWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceAdminWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceAdminWithContext), varargs...)
}

// DeleteAppInstanceRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceRequest(arg0 *chimesdkidentity.DeleteAppInstanceInput) (*request.Request, *chimesdkidentity.DeleteAppInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DeleteAppInstanceOutput)
	return ret0, ret1
}

// DeleteAppInstanceRequest indicates an expected call of DeleteAppInstanceRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceRequest), arg0)
}

// DeleteAppInstanceUser mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceUser(arg0 *chimesdkidentity.DeleteAppInstanceUserInput) (*chimesdkidentity.DeleteAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DeleteAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppInstanceUser indicates an expected call of DeleteAppInstanceUser.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceUser", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceUser), arg0)
}

// DeleteAppInstanceUserRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceUserRequest(arg0 *chimesdkidentity.DeleteAppInstanceUserInput) (*request.Request, *chimesdkidentity.DeleteAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DeleteAppInstanceUserOutput)
	return ret0, ret1
}

// DeleteAppInstanceUserRequest indicates an expected call of DeleteAppInstanceUserRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceUserRequest), arg0)
}

// DeleteAppInstanceUserWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkidentity.DeleteAppInstanceUserInput, arg2 ...request.Option) (*chimesdkidentity.DeleteAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DeleteAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppInstanceUserWithContext indicates an expected call of DeleteAppInstanceUserWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceUserWithContext), varargs...)
}

// DeleteAppInstanceWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DeleteAppInstanceWithContext(arg0 context.Context, arg1 *chimesdkidentity.DeleteAppInstanceInput, arg2 ...request.Option) (*chimesdkidentity.DeleteAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAppInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DeleteAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppInstanceWithContext indicates an expected call of DeleteAppInstanceWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeleteAppInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppInstanceWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeleteAppInstanceWithContext), varargs...)
}

// DeregisterAppInstanceUserEndpoint mocks base method.
func (m *MockChimeSDKIdentityAPI) DeregisterAppInstanceUserEndpoint(arg0 *chimesdkidentity.DeregisterAppInstanceUserEndpointInput) (*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAppInstanceUserEndpoint", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterAppInstanceUserEndpoint indicates an expected call of DeregisterAppInstanceUserEndpoint.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeregisterAppInstanceUserEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAppInstanceUserEndpoint", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeregisterAppInstanceUserEndpoint), arg0)
}

// DeregisterAppInstanceUserEndpointRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DeregisterAppInstanceUserEndpointRequest(arg0 *chimesdkidentity.DeregisterAppInstanceUserEndpointInput) (*request.Request, *chimesdkidentity.DeregisterAppInstanceUserEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterAppInstanceUserEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput)
	return ret0, ret1
}

// DeregisterAppInstanceUserEndpointRequest indicates an expected call of DeregisterAppInstanceUserEndpointRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeregisterAppInstanceUserEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAppInstanceUserEndpointRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeregisterAppInstanceUserEndpointRequest), arg0)
}

// DeregisterAppInstanceUserEndpointWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DeregisterAppInstanceUserEndpointWithContext(arg0 context.Context, arg1 *chimesdkidentity.DeregisterAppInstanceUserEndpointInput, arg2 ...request.Option) (*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterAppInstanceUserEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DeregisterAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterAppInstanceUserEndpointWithContext indicates an expected call of DeregisterAppInstanceUserEndpointWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DeregisterAppInstanceUserEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterAppInstanceUserEndpointWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DeregisterAppInstanceUserEndpointWithContext), varargs...)
}

// DescribeAppInstance mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstance(arg0 *chimesdkidentity.DescribeAppInstanceInput) (*chimesdkidentity.DescribeAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstance", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstance indicates an expected call of DescribeAppInstance.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstance", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstance), arg0)
}

// DescribeAppInstanceAdmin mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceAdmin(arg0 *chimesdkidentity.DescribeAppInstanceAdminInput) (*chimesdkidentity.DescribeAppInstanceAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstanceAdmin", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstanceAdmin indicates an expected call of DescribeAppInstanceAdmin.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceAdmin", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceAdmin), arg0)
}

// DescribeAppInstanceAdminRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceAdminRequest(arg0 *chimesdkidentity.DescribeAppInstanceAdminInput) (*request.Request, *chimesdkidentity.DescribeAppInstanceAdminOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstanceAdminRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DescribeAppInstanceAdminOutput)
	return ret0, ret1
}

// DescribeAppInstanceAdminRequest indicates an expected call of DescribeAppInstanceAdminRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceAdminRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceAdminRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceAdminRequest), arg0)
}

// DescribeAppInstanceAdminWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceAdminWithContext(arg0 context.Context, arg1 *chimesdkidentity.DescribeAppInstanceAdminInput, arg2 ...request.Option) (*chimesdkidentity.DescribeAppInstanceAdminOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppInstanceAdminWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstanceAdminWithContext indicates an expected call of DescribeAppInstanceAdminWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceAdminWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceAdminWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceAdminWithContext), varargs...)
}

// DescribeAppInstanceRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceRequest(arg0 *chimesdkidentity.DescribeAppInstanceInput) (*request.Request, *chimesdkidentity.DescribeAppInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DescribeAppInstanceOutput)
	return ret0, ret1
}

// DescribeAppInstanceRequest indicates an expected call of DescribeAppInstanceRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceRequest), arg0)
}

// DescribeAppInstanceUser mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceUser(arg0 *chimesdkidentity.DescribeAppInstanceUserInput) (*chimesdkidentity.DescribeAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstanceUser indicates an expected call of DescribeAppInstanceUser.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceUser", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceUser), arg0)
}

// DescribeAppInstanceUserEndpoint mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceUserEndpoint(arg0 *chimesdkidentity.DescribeAppInstanceUserEndpointInput) (*chimesdkidentity.DescribeAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstanceUserEndpoint", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstanceUserEndpoint indicates an expected call of DescribeAppInstanceUserEndpoint.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceUserEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceUserEndpoint", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceUserEndpoint), arg0)
}

// DescribeAppInstanceUserEndpointRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceUserEndpointRequest(arg0 *chimesdkidentity.DescribeAppInstanceUserEndpointInput) (*request.Request, *chimesdkidentity.DescribeAppInstanceUserEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstanceUserEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DescribeAppInstanceUserEndpointOutput)
	return ret0, ret1
}

// DescribeAppInstanceUserEndpointRequest indicates an expected call of DescribeAppInstanceUserEndpointRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceUserEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceUserEndpointRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceUserEndpointRequest), arg0)
}

// DescribeAppInstanceUserEndpointWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceUserEndpointWithContext(arg0 context.Context, arg1 *chimesdkidentity.DescribeAppInstanceUserEndpointInput, arg2 ...request.Option) (*chimesdkidentity.DescribeAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppInstanceUserEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstanceUserEndpointWithContext indicates an expected call of DescribeAppInstanceUserEndpointWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceUserEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceUserEndpointWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceUserEndpointWithContext), varargs...)
}

// DescribeAppInstanceUserRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceUserRequest(arg0 *chimesdkidentity.DescribeAppInstanceUserInput) (*request.Request, *chimesdkidentity.DescribeAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.DescribeAppInstanceUserOutput)
	return ret0, ret1
}

// DescribeAppInstanceUserRequest indicates an expected call of DescribeAppInstanceUserRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceUserRequest), arg0)
}

// DescribeAppInstanceUserWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkidentity.DescribeAppInstanceUserInput, arg2 ...request.Option) (*chimesdkidentity.DescribeAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstanceUserWithContext indicates an expected call of DescribeAppInstanceUserWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceUserWithContext), varargs...)
}

// DescribeAppInstanceWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) DescribeAppInstanceWithContext(arg0 context.Context, arg1 *chimesdkidentity.DescribeAppInstanceInput, arg2 ...request.Option) (*chimesdkidentity.DescribeAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAppInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.DescribeAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAppInstanceWithContext indicates an expected call of DescribeAppInstanceWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) DescribeAppInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAppInstanceWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).DescribeAppInstanceWithContext), varargs...)
}

// GetAppInstanceRetentionSettings mocks base method.
func (m *MockChimeSDKIdentityAPI) GetAppInstanceRetentionSettings(arg0 *chimesdkidentity.GetAppInstanceRetentionSettingsInput) (*chimesdkidentity.GetAppInstanceRetentionSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInstanceRetentionSettings", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.GetAppInstanceRetentionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppInstanceRetentionSettings indicates an expected call of GetAppInstanceRetentionSettings.
func (mr *MockChimeSDKIdentityAPIMockRecorder) GetAppInstanceRetentionSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInstanceRetentionSettings", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).GetAppInstanceRetentionSettings), arg0)
}

// GetAppInstanceRetentionSettingsRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) GetAppInstanceRetentionSettingsRequest(arg0 *chimesdkidentity.GetAppInstanceRetentionSettingsInput) (*request.Request, *chimesdkidentity.GetAppInstanceRetentionSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInstanceRetentionSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.GetAppInstanceRetentionSettingsOutput)
	return ret0, ret1
}

// GetAppInstanceRetentionSettingsRequest indicates an expected call of GetAppInstanceRetentionSettingsRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) GetAppInstanceRetentionSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInstanceRetentionSettingsRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).GetAppInstanceRetentionSettingsRequest), arg0)
}

// GetAppInstanceRetentionSettingsWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) GetAppInstanceRetentionSettingsWithContext(arg0 context.Context, arg1 *chimesdkidentity.GetAppInstanceRetentionSettingsInput, arg2 ...request.Option) (*chimesdkidentity.GetAppInstanceRetentionSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppInstanceRetentionSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.GetAppInstanceRetentionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppInstanceRetentionSettingsWithContext indicates an expected call of GetAppInstanceRetentionSettingsWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) GetAppInstanceRetentionSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInstanceRetentionSettingsWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).GetAppInstanceRetentionSettingsWithContext), varargs...)
}

// ListAppInstanceAdmins mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceAdmins(arg0 *chimesdkidentity.ListAppInstanceAdminsInput) (*chimesdkidentity.ListAppInstanceAdminsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceAdmins", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstanceAdminsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstanceAdmins indicates an expected call of ListAppInstanceAdmins.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceAdmins(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceAdmins", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceAdmins), arg0)
}

// ListAppInstanceAdminsPages mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceAdminsPages(arg0 *chimesdkidentity.ListAppInstanceAdminsInput, arg1 func(*chimesdkidentity.ListAppInstanceAdminsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceAdminsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstanceAdminsPages indicates an expected call of ListAppInstanceAdminsPages.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceAdminsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceAdminsPages", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceAdminsPages), arg0, arg1)
}

// ListAppInstanceAdminsPagesWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceAdminsPagesWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstanceAdminsInput, arg2 func(*chimesdkidentity.ListAppInstanceAdminsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstanceAdminsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstanceAdminsPagesWithContext indicates an expected call of ListAppInstanceAdminsPagesWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceAdminsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceAdminsPagesWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceAdminsPagesWithContext), varargs...)
}

// ListAppInstanceAdminsRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceAdminsRequest(arg0 *chimesdkidentity.ListAppInstanceAdminsInput) (*request.Request, *chimesdkidentity.ListAppInstanceAdminsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceAdminsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.ListAppInstanceAdminsOutput)
	return ret0, ret1
}

// ListAppInstanceAdminsRequest indicates an expected call of ListAppInstanceAdminsRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceAdminsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceAdminsRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceAdminsRequest), arg0)
}

// ListAppInstanceAdminsWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceAdminsWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstanceAdminsInput, arg2 ...request.Option) (*chimesdkidentity.ListAppInstanceAdminsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstanceAdminsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstanceAdminsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstanceAdminsWithContext indicates an expected call of ListAppInstanceAdminsWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceAdminsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceAdminsWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceAdminsWithContext), varargs...)
}

// ListAppInstanceUserEndpoints mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUserEndpoints(arg0 *chimesdkidentity.ListAppInstanceUserEndpointsInput) (*chimesdkidentity.ListAppInstanceUserEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceUserEndpoints", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstanceUserEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstanceUserEndpoints indicates an expected call of ListAppInstanceUserEndpoints.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUserEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUserEndpoints", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUserEndpoints), arg0)
}

// ListAppInstanceUserEndpointsPages mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUserEndpointsPages(arg0 *chimesdkidentity.ListAppInstanceUserEndpointsInput, arg1 func(*chimesdkidentity.ListAppInstanceUserEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceUserEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstanceUserEndpointsPages indicates an expected call of ListAppInstanceUserEndpointsPages.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUserEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUserEndpointsPages", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUserEndpointsPages), arg0, arg1)
}

// ListAppInstanceUserEndpointsPagesWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUserEndpointsPagesWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstanceUserEndpointsInput, arg2 func(*chimesdkidentity.ListAppInstanceUserEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstanceUserEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstanceUserEndpointsPagesWithContext indicates an expected call of ListAppInstanceUserEndpointsPagesWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUserEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUserEndpointsPagesWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUserEndpointsPagesWithContext), varargs...)
}

// ListAppInstanceUserEndpointsRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUserEndpointsRequest(arg0 *chimesdkidentity.ListAppInstanceUserEndpointsInput) (*request.Request, *chimesdkidentity.ListAppInstanceUserEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceUserEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.ListAppInstanceUserEndpointsOutput)
	return ret0, ret1
}

// ListAppInstanceUserEndpointsRequest indicates an expected call of ListAppInstanceUserEndpointsRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUserEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUserEndpointsRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUserEndpointsRequest), arg0)
}

// ListAppInstanceUserEndpointsWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUserEndpointsWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstanceUserEndpointsInput, arg2 ...request.Option) (*chimesdkidentity.ListAppInstanceUserEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstanceUserEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstanceUserEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstanceUserEndpointsWithContext indicates an expected call of ListAppInstanceUserEndpointsWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUserEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUserEndpointsWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUserEndpointsWithContext), varargs...)
}

// ListAppInstanceUsers mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUsers(arg0 *chimesdkidentity.ListAppInstanceUsersInput) (*chimesdkidentity.ListAppInstanceUsersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceUsers", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstanceUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstanceUsers indicates an expected call of ListAppInstanceUsers.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUsers", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUsers), arg0)
}

// ListAppInstanceUsersPages mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUsersPages(arg0 *chimesdkidentity.ListAppInstanceUsersInput, arg1 func(*chimesdkidentity.ListAppInstanceUsersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceUsersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstanceUsersPages indicates an expected call of ListAppInstanceUsersPages.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUsersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUsersPages", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUsersPages), arg0, arg1)
}

// ListAppInstanceUsersPagesWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUsersPagesWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstanceUsersInput, arg2 func(*chimesdkidentity.ListAppInstanceUsersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstanceUsersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstanceUsersPagesWithContext indicates an expected call of ListAppInstanceUsersPagesWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUsersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUsersPagesWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUsersPagesWithContext), varargs...)
}

// ListAppInstanceUsersRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUsersRequest(arg0 *chimesdkidentity.ListAppInstanceUsersInput) (*request.Request, *chimesdkidentity.ListAppInstanceUsersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstanceUsersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.ListAppInstanceUsersOutput)
	return ret0, ret1
}

// ListAppInstanceUsersRequest indicates an expected call of ListAppInstanceUsersRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUsersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUsersRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUsersRequest), arg0)
}

// ListAppInstanceUsersWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstanceUsersWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstanceUsersInput, arg2 ...request.Option) (*chimesdkidentity.ListAppInstanceUsersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstanceUsersWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstanceUsersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstanceUsersWithContext indicates an expected call of ListAppInstanceUsersWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstanceUsersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstanceUsersWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstanceUsersWithContext), varargs...)
}

// ListAppInstances mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstances(arg0 *chimesdkidentity.ListAppInstancesInput) (*chimesdkidentity.ListAppInstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstances", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstances indicates an expected call of ListAppInstances.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstances", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstances), arg0)
}

// ListAppInstancesPages mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstancesPages(arg0 *chimesdkidentity.ListAppInstancesInput, arg1 func(*chimesdkidentity.ListAppInstancesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstancesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstancesPages indicates an expected call of ListAppInstancesPages.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstancesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstancesPages", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstancesPages), arg0, arg1)
}

// ListAppInstancesPagesWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstancesPagesWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstancesInput, arg2 func(*chimesdkidentity.ListAppInstancesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstancesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAppInstancesPagesWithContext indicates an expected call of ListAppInstancesPagesWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstancesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstancesPagesWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstancesPagesWithContext), varargs...)
}

// ListAppInstancesRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstancesRequest(arg0 *chimesdkidentity.ListAppInstancesInput) (*request.Request, *chimesdkidentity.ListAppInstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppInstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.ListAppInstancesOutput)
	return ret0, ret1
}

// ListAppInstancesRequest indicates an expected call of ListAppInstancesRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstancesRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstancesRequest), arg0)
}

// ListAppInstancesWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListAppInstancesWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListAppInstancesInput, arg2 ...request.Option) (*chimesdkidentity.ListAppInstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAppInstancesWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.ListAppInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppInstancesWithContext indicates an expected call of ListAppInstancesWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListAppInstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppInstancesWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListAppInstancesWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockChimeSDKIdentityAPI) ListTagsForResource(arg0 *chimesdkidentity.ListTagsForResourceInput) (*chimesdkidentity.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) ListTagsForResourceRequest(arg0 *chimesdkidentity.ListTagsForResourceInput) (*request.Request, *chimesdkidentity.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *chimesdkidentity.ListTagsForResourceInput, arg2 ...request.Option) (*chimesdkidentity.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutAppInstanceRetentionSettings mocks base method.
func (m *MockChimeSDKIdentityAPI) PutAppInstanceRetentionSettings(arg0 *chimesdkidentity.PutAppInstanceRetentionSettingsInput) (*chimesdkidentity.PutAppInstanceRetentionSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppInstanceRetentionSettings", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.PutAppInstanceRetentionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppInstanceRetentionSettings indicates an expected call of PutAppInstanceRetentionSettings.
func (mr *MockChimeSDKIdentityAPIMockRecorder) PutAppInstanceRetentionSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppInstanceRetentionSettings", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).PutAppInstanceRetentionSettings), arg0)
}

// PutAppInstanceRetentionSettingsRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) PutAppInstanceRetentionSettingsRequest(arg0 *chimesdkidentity.PutAppInstanceRetentionSettingsInput) (*request.Request, *chimesdkidentity.PutAppInstanceRetentionSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAppInstanceRetentionSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.PutAppInstanceRetentionSettingsOutput)
	return ret0, ret1
}

// PutAppInstanceRetentionSettingsRequest indicates an expected call of PutAppInstanceRetentionSettingsRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) PutAppInstanceRetentionSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppInstanceRetentionSettingsRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).PutAppInstanceRetentionSettingsRequest), arg0)
}

// PutAppInstanceRetentionSettingsWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) PutAppInstanceRetentionSettingsWithContext(arg0 context.Context, arg1 *chimesdkidentity.PutAppInstanceRetentionSettingsInput, arg2 ...request.Option) (*chimesdkidentity.PutAppInstanceRetentionSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutAppInstanceRetentionSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.PutAppInstanceRetentionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAppInstanceRetentionSettingsWithContext indicates an expected call of PutAppInstanceRetentionSettingsWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) PutAppInstanceRetentionSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAppInstanceRetentionSettingsWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).PutAppInstanceRetentionSettingsWithContext), varargs...)
}

// RegisterAppInstanceUserEndpoint mocks base method.
func (m *MockChimeSDKIdentityAPI) RegisterAppInstanceUserEndpoint(arg0 *chimesdkidentity.RegisterAppInstanceUserEndpointInput) (*chimesdkidentity.RegisterAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAppInstanceUserEndpoint", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.RegisterAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAppInstanceUserEndpoint indicates an expected call of RegisterAppInstanceUserEndpoint.
func (mr *MockChimeSDKIdentityAPIMockRecorder) RegisterAppInstanceUserEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAppInstanceUserEndpoint", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).RegisterAppInstanceUserEndpoint), arg0)
}

// RegisterAppInstanceUserEndpointRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) RegisterAppInstanceUserEndpointRequest(arg0 *chimesdkidentity.RegisterAppInstanceUserEndpointInput) (*request.Request, *chimesdkidentity.RegisterAppInstanceUserEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAppInstanceUserEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.RegisterAppInstanceUserEndpointOutput)
	return ret0, ret1
}

// RegisterAppInstanceUserEndpointRequest indicates an expected call of RegisterAppInstanceUserEndpointRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) RegisterAppInstanceUserEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAppInstanceUserEndpointRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).RegisterAppInstanceUserEndpointRequest), arg0)
}

// RegisterAppInstanceUserEndpointWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) RegisterAppInstanceUserEndpointWithContext(arg0 context.Context, arg1 *chimesdkidentity.RegisterAppInstanceUserEndpointInput, arg2 ...request.Option) (*chimesdkidentity.RegisterAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterAppInstanceUserEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.RegisterAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAppInstanceUserEndpointWithContext indicates an expected call of RegisterAppInstanceUserEndpointWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) RegisterAppInstanceUserEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAppInstanceUserEndpointWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).RegisterAppInstanceUserEndpointWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockChimeSDKIdentityAPI) TagResource(arg0 *chimesdkidentity.TagResourceInput) (*chimesdkidentity.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockChimeSDKIdentityAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) TagResourceRequest(arg0 *chimesdkidentity.TagResourceInput) (*request.Request, *chimesdkidentity.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) TagResourceWithContext(arg0 context.Context, arg1 *chimesdkidentity.TagResourceInput, arg2 ...request.Option) (*chimesdkidentity.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockChimeSDKIdentityAPI) UntagResource(arg0 *chimesdkidentity.UntagResourceInput) (*chimesdkidentity.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) UntagResourceRequest(arg0 *chimesdkidentity.UntagResourceInput) (*request.Request, *chimesdkidentity.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) UntagResourceWithContext(arg0 context.Context, arg1 *chimesdkidentity.UntagResourceInput, arg2 ...request.Option) (*chimesdkidentity.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAppInstance mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstance(arg0 *chimesdkidentity.UpdateAppInstanceInput) (*chimesdkidentity.UpdateAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppInstance", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.UpdateAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppInstance indicates an expected call of UpdateAppInstance.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstance", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstance), arg0)
}

// UpdateAppInstanceRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceRequest(arg0 *chimesdkidentity.UpdateAppInstanceInput) (*request.Request, *chimesdkidentity.UpdateAppInstanceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppInstanceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.UpdateAppInstanceOutput)
	return ret0, ret1
}

// UpdateAppInstanceRequest indicates an expected call of UpdateAppInstanceRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceRequest), arg0)
}

// UpdateAppInstanceUser mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceUser(arg0 *chimesdkidentity.UpdateAppInstanceUserInput) (*chimesdkidentity.UpdateAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppInstanceUser", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.UpdateAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppInstanceUser indicates an expected call of UpdateAppInstanceUser.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceUser", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceUser), arg0)
}

// UpdateAppInstanceUserEndpoint mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceUserEndpoint(arg0 *chimesdkidentity.UpdateAppInstanceUserEndpointInput) (*chimesdkidentity.UpdateAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppInstanceUserEndpoint", arg0)
	ret0, _ := ret[0].(*chimesdkidentity.UpdateAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppInstanceUserEndpoint indicates an expected call of UpdateAppInstanceUserEndpoint.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceUserEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceUserEndpoint", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceUserEndpoint), arg0)
}

// UpdateAppInstanceUserEndpointRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceUserEndpointRequest(arg0 *chimesdkidentity.UpdateAppInstanceUserEndpointInput) (*request.Request, *chimesdkidentity.UpdateAppInstanceUserEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppInstanceUserEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.UpdateAppInstanceUserEndpointOutput)
	return ret0, ret1
}

// UpdateAppInstanceUserEndpointRequest indicates an expected call of UpdateAppInstanceUserEndpointRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceUserEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceUserEndpointRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceUserEndpointRequest), arg0)
}

// UpdateAppInstanceUserEndpointWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceUserEndpointWithContext(arg0 context.Context, arg1 *chimesdkidentity.UpdateAppInstanceUserEndpointInput, arg2 ...request.Option) (*chimesdkidentity.UpdateAppInstanceUserEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppInstanceUserEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.UpdateAppInstanceUserEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppInstanceUserEndpointWithContext indicates an expected call of UpdateAppInstanceUserEndpointWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceUserEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceUserEndpointWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceUserEndpointWithContext), varargs...)
}

// UpdateAppInstanceUserRequest mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceUserRequest(arg0 *chimesdkidentity.UpdateAppInstanceUserInput) (*request.Request, *chimesdkidentity.UpdateAppInstanceUserOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppInstanceUserRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*chimesdkidentity.UpdateAppInstanceUserOutput)
	return ret0, ret1
}

// UpdateAppInstanceUserRequest indicates an expected call of UpdateAppInstanceUserRequest.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceUserRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceUserRequest", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceUserRequest), arg0)
}

// UpdateAppInstanceUserWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceUserWithContext(arg0 context.Context, arg1 *chimesdkidentity.UpdateAppInstanceUserInput, arg2 ...request.Option) (*chimesdkidentity.UpdateAppInstanceUserOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppInstanceUserWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.UpdateAppInstanceUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppInstanceUserWithContext indicates an expected call of UpdateAppInstanceUserWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceUserWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceUserWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceUserWithContext), varargs...)
}

// UpdateAppInstanceWithContext mocks base method.
func (m *MockChimeSDKIdentityAPI) UpdateAppInstanceWithContext(arg0 context.Context, arg1 *chimesdkidentity.UpdateAppInstanceInput, arg2 ...request.Option) (*chimesdkidentity.UpdateAppInstanceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAppInstanceWithContext", varargs...)
	ret0, _ := ret[0].(*chimesdkidentity.UpdateAppInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppInstanceWithContext indicates an expected call of UpdateAppInstanceWithContext.
func (mr *MockChimeSDKIdentityAPIMockRecorder) UpdateAppInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInstanceWithContext", reflect.TypeOf((*MockChimeSDKIdentityAPI)(nil).UpdateAppInstanceWithContext), varargs...)
}

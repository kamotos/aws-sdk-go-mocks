// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/redshiftdataapiservice/redshiftdataapiserviceiface (interfaces: RedshiftDataAPIServiceAPI)

// Package redshiftdataapiservicemock is a generated GoMock package.
package redshiftdataapiservicemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	redshiftdataapiservice "github.com/aws/aws-sdk-go/service/redshiftdataapiservice"
	gomock "github.com/golang/mock/gomock"
)

// MockRedshiftDataAPIServiceAPI is a mock of RedshiftDataAPIServiceAPI interface.
type MockRedshiftDataAPIServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRedshiftDataAPIServiceAPIMockRecorder
}

// MockRedshiftDataAPIServiceAPIMockRecorder is the mock recorder for MockRedshiftDataAPIServiceAPI.
type MockRedshiftDataAPIServiceAPIMockRecorder struct {
	mock *MockRedshiftDataAPIServiceAPI
}

// NewMockRedshiftDataAPIServiceAPI creates a new mock instance.
func NewMockRedshiftDataAPIServiceAPI(ctrl *gomock.Controller) *MockRedshiftDataAPIServiceAPI {
	mock := &MockRedshiftDataAPIServiceAPI{ctrl: ctrl}
	mock.recorder = &MockRedshiftDataAPIServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedshiftDataAPIServiceAPI) EXPECT() *MockRedshiftDataAPIServiceAPIMockRecorder {
	return m.recorder
}

// BatchExecuteStatement mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) BatchExecuteStatement(arg0 *redshiftdataapiservice.BatchExecuteStatementInput) (*redshiftdataapiservice.BatchExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchExecuteStatement", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.BatchExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchExecuteStatement indicates an expected call of BatchExecuteStatement.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) BatchExecuteStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchExecuteStatement", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).BatchExecuteStatement), arg0)
}

// BatchExecuteStatementRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) BatchExecuteStatementRequest(arg0 *redshiftdataapiservice.BatchExecuteStatementInput) (*request.Request, *redshiftdataapiservice.BatchExecuteStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchExecuteStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.BatchExecuteStatementOutput)
	return ret0, ret1
}

// BatchExecuteStatementRequest indicates an expected call of BatchExecuteStatementRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) BatchExecuteStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchExecuteStatementRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).BatchExecuteStatementRequest), arg0)
}

// BatchExecuteStatementWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) BatchExecuteStatementWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.BatchExecuteStatementInput, arg2 ...request.Option) (*redshiftdataapiservice.BatchExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchExecuteStatementWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.BatchExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchExecuteStatementWithContext indicates an expected call of BatchExecuteStatementWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) BatchExecuteStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchExecuteStatementWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).BatchExecuteStatementWithContext), varargs...)
}

// CancelStatement mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) CancelStatement(arg0 *redshiftdataapiservice.CancelStatementInput) (*redshiftdataapiservice.CancelStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelStatement", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.CancelStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStatement indicates an expected call of CancelStatement.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) CancelStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStatement", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).CancelStatement), arg0)
}

// CancelStatementRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) CancelStatementRequest(arg0 *redshiftdataapiservice.CancelStatementInput) (*request.Request, *redshiftdataapiservice.CancelStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.CancelStatementOutput)
	return ret0, ret1
}

// CancelStatementRequest indicates an expected call of CancelStatementRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) CancelStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStatementRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).CancelStatementRequest), arg0)
}

// CancelStatementWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) CancelStatementWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.CancelStatementInput, arg2 ...request.Option) (*redshiftdataapiservice.CancelStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelStatementWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.CancelStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStatementWithContext indicates an expected call of CancelStatementWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) CancelStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStatementWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).CancelStatementWithContext), varargs...)
}

// DescribeStatement mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeStatement(arg0 *redshiftdataapiservice.DescribeStatementInput) (*redshiftdataapiservice.DescribeStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStatement", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.DescribeStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStatement indicates an expected call of DescribeStatement.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStatement", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeStatement), arg0)
}

// DescribeStatementRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeStatementRequest(arg0 *redshiftdataapiservice.DescribeStatementInput) (*request.Request, *redshiftdataapiservice.DescribeStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.DescribeStatementOutput)
	return ret0, ret1
}

// DescribeStatementRequest indicates an expected call of DescribeStatementRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStatementRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeStatementRequest), arg0)
}

// DescribeStatementWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeStatementWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.DescribeStatementInput, arg2 ...request.Option) (*redshiftdataapiservice.DescribeStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStatementWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.DescribeStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStatementWithContext indicates an expected call of DescribeStatementWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStatementWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeStatementWithContext), varargs...)
}

// DescribeTable mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeTable(arg0 *redshiftdataapiservice.DescribeTableInput) (*redshiftdataapiservice.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTable", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeTable), arg0)
}

// DescribeTablePages mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeTablePages(arg0 *redshiftdataapiservice.DescribeTableInput, arg1 func(*redshiftdataapiservice.DescribeTableOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTablePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeTablePages indicates an expected call of DescribeTablePages.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeTablePages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTablePages", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeTablePages), arg0, arg1)
}

// DescribeTablePagesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeTablePagesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.DescribeTableInput, arg2 func(*redshiftdataapiservice.DescribeTableOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTablePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeTablePagesWithContext indicates an expected call of DescribeTablePagesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeTablePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTablePagesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeTablePagesWithContext), varargs...)
}

// DescribeTableRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeTableRequest(arg0 *redshiftdataapiservice.DescribeTableInput) (*request.Request, *redshiftdataapiservice.DescribeTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.DescribeTableOutput)
	return ret0, ret1
}

// DescribeTableRequest indicates an expected call of DescribeTableRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeTableRequest), arg0)
}

// DescribeTableWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) DescribeTableWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.DescribeTableInput, arg2 ...request.Option) (*redshiftdataapiservice.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableWithContext indicates an expected call of DescribeTableWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) DescribeTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).DescribeTableWithContext), varargs...)
}

// ExecuteStatement mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ExecuteStatement(arg0 *redshiftdataapiservice.ExecuteStatementInput) (*redshiftdataapiservice.ExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStatement", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.ExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStatement indicates an expected call of ExecuteStatement.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ExecuteStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatement", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ExecuteStatement), arg0)
}

// ExecuteStatementRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ExecuteStatementRequest(arg0 *redshiftdataapiservice.ExecuteStatementInput) (*request.Request, *redshiftdataapiservice.ExecuteStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.ExecuteStatementOutput)
	return ret0, ret1
}

// ExecuteStatementRequest indicates an expected call of ExecuteStatementRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ExecuteStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatementRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ExecuteStatementRequest), arg0)
}

// ExecuteStatementWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ExecuteStatementWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ExecuteStatementInput, arg2 ...request.Option) (*redshiftdataapiservice.ExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteStatementWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.ExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStatementWithContext indicates an expected call of ExecuteStatementWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ExecuteStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatementWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ExecuteStatementWithContext), varargs...)
}

// GetStatementResult mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) GetStatementResult(arg0 *redshiftdataapiservice.GetStatementResultInput) (*redshiftdataapiservice.GetStatementResultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResult", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.GetStatementResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResult indicates an expected call of GetStatementResult.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) GetStatementResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResult", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).GetStatementResult), arg0)
}

// GetStatementResultPages mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) GetStatementResultPages(arg0 *redshiftdataapiservice.GetStatementResultInput, arg1 func(*redshiftdataapiservice.GetStatementResultOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResultPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStatementResultPages indicates an expected call of GetStatementResultPages.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) GetStatementResultPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResultPages", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).GetStatementResultPages), arg0, arg1)
}

// GetStatementResultPagesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) GetStatementResultPagesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.GetStatementResultInput, arg2 func(*redshiftdataapiservice.GetStatementResultOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatementResultPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStatementResultPagesWithContext indicates an expected call of GetStatementResultPagesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) GetStatementResultPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResultPagesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).GetStatementResultPagesWithContext), varargs...)
}

// GetStatementResultRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) GetStatementResultRequest(arg0 *redshiftdataapiservice.GetStatementResultInput) (*request.Request, *redshiftdataapiservice.GetStatementResultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.GetStatementResultOutput)
	return ret0, ret1
}

// GetStatementResultRequest indicates an expected call of GetStatementResultRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) GetStatementResultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResultRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).GetStatementResultRequest), arg0)
}

// GetStatementResultWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) GetStatementResultWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.GetStatementResultInput, arg2 ...request.Option) (*redshiftdataapiservice.GetStatementResultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatementResultWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.GetStatementResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResultWithContext indicates an expected call of GetStatementResultWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) GetStatementResultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResultWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).GetStatementResultWithContext), varargs...)
}

// ListDatabases mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListDatabases(arg0 *redshiftdataapiservice.ListDatabasesInput) (*redshiftdataapiservice.ListDatabasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListDatabases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListDatabases), arg0)
}

// ListDatabasesPages mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListDatabasesPages(arg0 *redshiftdataapiservice.ListDatabasesInput, arg1 func(*redshiftdataapiservice.ListDatabasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatabasesPages indicates an expected call of ListDatabasesPages.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListDatabasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesPages", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListDatabasesPages), arg0, arg1)
}

// ListDatabasesPagesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListDatabasesPagesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListDatabasesInput, arg2 func(*redshiftdataapiservice.ListDatabasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatabasesPagesWithContext indicates an expected call of ListDatabasesPagesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListDatabasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesPagesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListDatabasesPagesWithContext), varargs...)
}

// ListDatabasesRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListDatabasesRequest(arg0 *redshiftdataapiservice.ListDatabasesInput) (*request.Request, *redshiftdataapiservice.ListDatabasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.ListDatabasesOutput)
	return ret0, ret1
}

// ListDatabasesRequest indicates an expected call of ListDatabasesRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListDatabasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListDatabasesRequest), arg0)
}

// ListDatabasesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListDatabasesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListDatabasesInput, arg2 ...request.Option) (*redshiftdataapiservice.ListDatabasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabasesWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabasesWithContext indicates an expected call of ListDatabasesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListDatabasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabasesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListDatabasesWithContext), varargs...)
}

// ListSchemas mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListSchemas(arg0 *redshiftdataapiservice.ListSchemasInput) (*redshiftdataapiservice.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemas", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemas indicates an expected call of ListSchemas.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemas", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListSchemas), arg0)
}

// ListSchemasPages mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListSchemasPages(arg0 *redshiftdataapiservice.ListSchemasInput, arg1 func(*redshiftdataapiservice.ListSchemasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPages indicates an expected call of ListSchemasPages.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListSchemasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPages", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListSchemasPages), arg0, arg1)
}

// ListSchemasPagesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListSchemasPagesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListSchemasInput, arg2 func(*redshiftdataapiservice.ListSchemasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPagesWithContext indicates an expected call of ListSchemasPagesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListSchemasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPagesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListSchemasPagesWithContext), varargs...)
}

// ListSchemasRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListSchemasRequest(arg0 *redshiftdataapiservice.ListSchemasInput) (*request.Request, *redshiftdataapiservice.ListSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.ListSchemasOutput)
	return ret0, ret1
}

// ListSchemasRequest indicates an expected call of ListSchemasRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListSchemasRequest), arg0)
}

// ListSchemasWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListSchemasWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListSchemasInput, arg2 ...request.Option) (*redshiftdataapiservice.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemasWithContext indicates an expected call of ListSchemasWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListSchemasWithContext), varargs...)
}

// ListStatements mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListStatements(arg0 *redshiftdataapiservice.ListStatementsInput) (*redshiftdataapiservice.ListStatementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatements", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListStatementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatements indicates an expected call of ListStatements.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListStatements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatements", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListStatements), arg0)
}

// ListStatementsPages mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListStatementsPages(arg0 *redshiftdataapiservice.ListStatementsInput, arg1 func(*redshiftdataapiservice.ListStatementsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatementsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStatementsPages indicates an expected call of ListStatementsPages.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListStatementsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatementsPages", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListStatementsPages), arg0, arg1)
}

// ListStatementsPagesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListStatementsPagesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListStatementsInput, arg2 func(*redshiftdataapiservice.ListStatementsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStatementsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStatementsPagesWithContext indicates an expected call of ListStatementsPagesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListStatementsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatementsPagesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListStatementsPagesWithContext), varargs...)
}

// ListStatementsRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListStatementsRequest(arg0 *redshiftdataapiservice.ListStatementsInput) (*request.Request, *redshiftdataapiservice.ListStatementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.ListStatementsOutput)
	return ret0, ret1
}

// ListStatementsRequest indicates an expected call of ListStatementsRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListStatementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatementsRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListStatementsRequest), arg0)
}

// ListStatementsWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListStatementsWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListStatementsInput, arg2 ...request.Option) (*redshiftdataapiservice.ListStatementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStatementsWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListStatementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatementsWithContext indicates an expected call of ListStatementsWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListStatementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatementsWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListStatementsWithContext), varargs...)
}

// ListTables mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListTables(arg0 *redshiftdataapiservice.ListTablesInput) (*redshiftdataapiservice.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", arg0)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListTables), arg0)
}

// ListTablesPages mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListTablesPages(arg0 *redshiftdataapiservice.ListTablesInput, arg1 func(*redshiftdataapiservice.ListTablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPages indicates an expected call of ListTablesPages.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListTablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPages", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListTablesPages), arg0, arg1)
}

// ListTablesPagesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListTablesPagesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListTablesInput, arg2 func(*redshiftdataapiservice.ListTablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPagesWithContext indicates an expected call of ListTablesPagesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListTablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPagesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListTablesPagesWithContext), varargs...)
}

// ListTablesRequest mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListTablesRequest(arg0 *redshiftdataapiservice.ListTablesInput) (*request.Request, *redshiftdataapiservice.ListTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*redshiftdataapiservice.ListTablesOutput)
	return ret0, ret1
}

// ListTablesRequest indicates an expected call of ListTablesRequest.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesRequest", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListTablesRequest), arg0)
}

// ListTablesWithContext mocks base method.
func (m *MockRedshiftDataAPIServiceAPI) ListTablesWithContext(arg0 context.Context, arg1 *redshiftdataapiservice.ListTablesInput, arg2 ...request.Option) (*redshiftdataapiservice.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesWithContext", varargs...)
	ret0, _ := ret[0].(*redshiftdataapiservice.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTablesWithContext indicates an expected call of ListTablesWithContext.
func (mr *MockRedshiftDataAPIServiceAPIMockRecorder) ListTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesWithContext", reflect.TypeOf((*MockRedshiftDataAPIServiceAPI)(nil).ListTablesWithContext), varargs...)
}

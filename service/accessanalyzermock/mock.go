// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/accessanalyzer/accessanalyzeriface (interfaces: AccessAnalyzerAPI)

// Package accessanalyzermock is a generated GoMock package.
package accessanalyzermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	accessanalyzer "github.com/aws/aws-sdk-go/service/accessanalyzer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccessAnalyzerAPI is a mock of AccessAnalyzerAPI interface
type MockAccessAnalyzerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAccessAnalyzerAPIMockRecorder
}

// MockAccessAnalyzerAPIMockRecorder is the mock recorder for MockAccessAnalyzerAPI
type MockAccessAnalyzerAPIMockRecorder struct {
	mock *MockAccessAnalyzerAPI
}

// NewMockAccessAnalyzerAPI creates a new mock instance
func NewMockAccessAnalyzerAPI(ctrl *gomock.Controller) *MockAccessAnalyzerAPI {
	mock := &MockAccessAnalyzerAPI{ctrl: ctrl}
	mock.recorder = &MockAccessAnalyzerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessAnalyzerAPI) EXPECT() *MockAccessAnalyzerAPIMockRecorder {
	return m.recorder
}

// ApplyArchiveRule mocks base method
func (m *MockAccessAnalyzerAPI) ApplyArchiveRule(arg0 *accessanalyzer.ApplyArchiveRuleInput) (*accessanalyzer.ApplyArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyArchiveRule", arg0)
	ret0, _ := ret[0].(*accessanalyzer.ApplyArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyArchiveRule indicates an expected call of ApplyArchiveRule
func (mr *MockAccessAnalyzerAPIMockRecorder) ApplyArchiveRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyArchiveRule", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ApplyArchiveRule), arg0)
}

// ApplyArchiveRuleRequest mocks base method
func (m *MockAccessAnalyzerAPI) ApplyArchiveRuleRequest(arg0 *accessanalyzer.ApplyArchiveRuleInput) (*request.Request, *accessanalyzer.ApplyArchiveRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyArchiveRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.ApplyArchiveRuleOutput)
	return ret0, ret1
}

// ApplyArchiveRuleRequest indicates an expected call of ApplyArchiveRuleRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) ApplyArchiveRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyArchiveRuleRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ApplyArchiveRuleRequest), arg0)
}

// ApplyArchiveRuleWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ApplyArchiveRuleWithContext(arg0 context.Context, arg1 *accessanalyzer.ApplyArchiveRuleInput, arg2 ...request.Option) (*accessanalyzer.ApplyArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyArchiveRuleWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.ApplyArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyArchiveRuleWithContext indicates an expected call of ApplyArchiveRuleWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ApplyArchiveRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyArchiveRuleWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ApplyArchiveRuleWithContext), varargs...)
}

// CreateAnalyzer mocks base method
func (m *MockAccessAnalyzerAPI) CreateAnalyzer(arg0 *accessanalyzer.CreateAnalyzerInput) (*accessanalyzer.CreateAnalyzerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnalyzer", arg0)
	ret0, _ := ret[0].(*accessanalyzer.CreateAnalyzerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyzer indicates an expected call of CreateAnalyzer
func (mr *MockAccessAnalyzerAPIMockRecorder) CreateAnalyzer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyzer", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).CreateAnalyzer), arg0)
}

// CreateAnalyzerRequest mocks base method
func (m *MockAccessAnalyzerAPI) CreateAnalyzerRequest(arg0 *accessanalyzer.CreateAnalyzerInput) (*request.Request, *accessanalyzer.CreateAnalyzerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnalyzerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.CreateAnalyzerOutput)
	return ret0, ret1
}

// CreateAnalyzerRequest indicates an expected call of CreateAnalyzerRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) CreateAnalyzerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyzerRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).CreateAnalyzerRequest), arg0)
}

// CreateAnalyzerWithContext mocks base method
func (m *MockAccessAnalyzerAPI) CreateAnalyzerWithContext(arg0 context.Context, arg1 *accessanalyzer.CreateAnalyzerInput, arg2 ...request.Option) (*accessanalyzer.CreateAnalyzerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyzerWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.CreateAnalyzerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyzerWithContext indicates an expected call of CreateAnalyzerWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) CreateAnalyzerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyzerWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).CreateAnalyzerWithContext), varargs...)
}

// CreateArchiveRule mocks base method
func (m *MockAccessAnalyzerAPI) CreateArchiveRule(arg0 *accessanalyzer.CreateArchiveRuleInput) (*accessanalyzer.CreateArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchiveRule", arg0)
	ret0, _ := ret[0].(*accessanalyzer.CreateArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArchiveRule indicates an expected call of CreateArchiveRule
func (mr *MockAccessAnalyzerAPIMockRecorder) CreateArchiveRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveRule", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).CreateArchiveRule), arg0)
}

// CreateArchiveRuleRequest mocks base method
func (m *MockAccessAnalyzerAPI) CreateArchiveRuleRequest(arg0 *accessanalyzer.CreateArchiveRuleInput) (*request.Request, *accessanalyzer.CreateArchiveRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArchiveRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.CreateArchiveRuleOutput)
	return ret0, ret1
}

// CreateArchiveRuleRequest indicates an expected call of CreateArchiveRuleRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) CreateArchiveRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveRuleRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).CreateArchiveRuleRequest), arg0)
}

// CreateArchiveRuleWithContext mocks base method
func (m *MockAccessAnalyzerAPI) CreateArchiveRuleWithContext(arg0 context.Context, arg1 *accessanalyzer.CreateArchiveRuleInput, arg2 ...request.Option) (*accessanalyzer.CreateArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateArchiveRuleWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.CreateArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArchiveRuleWithContext indicates an expected call of CreateArchiveRuleWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) CreateArchiveRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArchiveRuleWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).CreateArchiveRuleWithContext), varargs...)
}

// DeleteAnalyzer mocks base method
func (m *MockAccessAnalyzerAPI) DeleteAnalyzer(arg0 *accessanalyzer.DeleteAnalyzerInput) (*accessanalyzer.DeleteAnalyzerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnalyzer", arg0)
	ret0, _ := ret[0].(*accessanalyzer.DeleteAnalyzerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnalyzer indicates an expected call of DeleteAnalyzer
func (mr *MockAccessAnalyzerAPIMockRecorder) DeleteAnalyzer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnalyzer", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).DeleteAnalyzer), arg0)
}

// DeleteAnalyzerRequest mocks base method
func (m *MockAccessAnalyzerAPI) DeleteAnalyzerRequest(arg0 *accessanalyzer.DeleteAnalyzerInput) (*request.Request, *accessanalyzer.DeleteAnalyzerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnalyzerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.DeleteAnalyzerOutput)
	return ret0, ret1
}

// DeleteAnalyzerRequest indicates an expected call of DeleteAnalyzerRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) DeleteAnalyzerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnalyzerRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).DeleteAnalyzerRequest), arg0)
}

// DeleteAnalyzerWithContext mocks base method
func (m *MockAccessAnalyzerAPI) DeleteAnalyzerWithContext(arg0 context.Context, arg1 *accessanalyzer.DeleteAnalyzerInput, arg2 ...request.Option) (*accessanalyzer.DeleteAnalyzerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAnalyzerWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.DeleteAnalyzerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnalyzerWithContext indicates an expected call of DeleteAnalyzerWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) DeleteAnalyzerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnalyzerWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).DeleteAnalyzerWithContext), varargs...)
}

// DeleteArchiveRule mocks base method
func (m *MockAccessAnalyzerAPI) DeleteArchiveRule(arg0 *accessanalyzer.DeleteArchiveRuleInput) (*accessanalyzer.DeleteArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArchiveRule", arg0)
	ret0, _ := ret[0].(*accessanalyzer.DeleteArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArchiveRule indicates an expected call of DeleteArchiveRule
func (mr *MockAccessAnalyzerAPIMockRecorder) DeleteArchiveRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchiveRule", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).DeleteArchiveRule), arg0)
}

// DeleteArchiveRuleRequest mocks base method
func (m *MockAccessAnalyzerAPI) DeleteArchiveRuleRequest(arg0 *accessanalyzer.DeleteArchiveRuleInput) (*request.Request, *accessanalyzer.DeleteArchiveRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArchiveRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.DeleteArchiveRuleOutput)
	return ret0, ret1
}

// DeleteArchiveRuleRequest indicates an expected call of DeleteArchiveRuleRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) DeleteArchiveRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchiveRuleRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).DeleteArchiveRuleRequest), arg0)
}

// DeleteArchiveRuleWithContext mocks base method
func (m *MockAccessAnalyzerAPI) DeleteArchiveRuleWithContext(arg0 context.Context, arg1 *accessanalyzer.DeleteArchiveRuleInput, arg2 ...request.Option) (*accessanalyzer.DeleteArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteArchiveRuleWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.DeleteArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArchiveRuleWithContext indicates an expected call of DeleteArchiveRuleWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) DeleteArchiveRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArchiveRuleWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).DeleteArchiveRuleWithContext), varargs...)
}

// GetAnalyzedResource mocks base method
func (m *MockAccessAnalyzerAPI) GetAnalyzedResource(arg0 *accessanalyzer.GetAnalyzedResourceInput) (*accessanalyzer.GetAnalyzedResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalyzedResource", arg0)
	ret0, _ := ret[0].(*accessanalyzer.GetAnalyzedResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyzedResource indicates an expected call of GetAnalyzedResource
func (mr *MockAccessAnalyzerAPIMockRecorder) GetAnalyzedResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzedResource", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetAnalyzedResource), arg0)
}

// GetAnalyzedResourceRequest mocks base method
func (m *MockAccessAnalyzerAPI) GetAnalyzedResourceRequest(arg0 *accessanalyzer.GetAnalyzedResourceInput) (*request.Request, *accessanalyzer.GetAnalyzedResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalyzedResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.GetAnalyzedResourceOutput)
	return ret0, ret1
}

// GetAnalyzedResourceRequest indicates an expected call of GetAnalyzedResourceRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) GetAnalyzedResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzedResourceRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetAnalyzedResourceRequest), arg0)
}

// GetAnalyzedResourceWithContext mocks base method
func (m *MockAccessAnalyzerAPI) GetAnalyzedResourceWithContext(arg0 context.Context, arg1 *accessanalyzer.GetAnalyzedResourceInput, arg2 ...request.Option) (*accessanalyzer.GetAnalyzedResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnalyzedResourceWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.GetAnalyzedResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyzedResourceWithContext indicates an expected call of GetAnalyzedResourceWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) GetAnalyzedResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzedResourceWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetAnalyzedResourceWithContext), varargs...)
}

// GetAnalyzer mocks base method
func (m *MockAccessAnalyzerAPI) GetAnalyzer(arg0 *accessanalyzer.GetAnalyzerInput) (*accessanalyzer.GetAnalyzerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalyzer", arg0)
	ret0, _ := ret[0].(*accessanalyzer.GetAnalyzerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyzer indicates an expected call of GetAnalyzer
func (mr *MockAccessAnalyzerAPIMockRecorder) GetAnalyzer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzer", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetAnalyzer), arg0)
}

// GetAnalyzerRequest mocks base method
func (m *MockAccessAnalyzerAPI) GetAnalyzerRequest(arg0 *accessanalyzer.GetAnalyzerInput) (*request.Request, *accessanalyzer.GetAnalyzerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalyzerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.GetAnalyzerOutput)
	return ret0, ret1
}

// GetAnalyzerRequest indicates an expected call of GetAnalyzerRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) GetAnalyzerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzerRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetAnalyzerRequest), arg0)
}

// GetAnalyzerWithContext mocks base method
func (m *MockAccessAnalyzerAPI) GetAnalyzerWithContext(arg0 context.Context, arg1 *accessanalyzer.GetAnalyzerInput, arg2 ...request.Option) (*accessanalyzer.GetAnalyzerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnalyzerWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.GetAnalyzerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalyzerWithContext indicates an expected call of GetAnalyzerWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) GetAnalyzerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalyzerWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetAnalyzerWithContext), varargs...)
}

// GetArchiveRule mocks base method
func (m *MockAccessAnalyzerAPI) GetArchiveRule(arg0 *accessanalyzer.GetArchiveRuleInput) (*accessanalyzer.GetArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveRule", arg0)
	ret0, _ := ret[0].(*accessanalyzer.GetArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveRule indicates an expected call of GetArchiveRule
func (mr *MockAccessAnalyzerAPIMockRecorder) GetArchiveRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveRule", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetArchiveRule), arg0)
}

// GetArchiveRuleRequest mocks base method
func (m *MockAccessAnalyzerAPI) GetArchiveRuleRequest(arg0 *accessanalyzer.GetArchiveRuleInput) (*request.Request, *accessanalyzer.GetArchiveRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.GetArchiveRuleOutput)
	return ret0, ret1
}

// GetArchiveRuleRequest indicates an expected call of GetArchiveRuleRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) GetArchiveRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveRuleRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetArchiveRuleRequest), arg0)
}

// GetArchiveRuleWithContext mocks base method
func (m *MockAccessAnalyzerAPI) GetArchiveRuleWithContext(arg0 context.Context, arg1 *accessanalyzer.GetArchiveRuleInput, arg2 ...request.Option) (*accessanalyzer.GetArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiveRuleWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.GetArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveRuleWithContext indicates an expected call of GetArchiveRuleWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) GetArchiveRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveRuleWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetArchiveRuleWithContext), varargs...)
}

// GetFinding mocks base method
func (m *MockAccessAnalyzerAPI) GetFinding(arg0 *accessanalyzer.GetFindingInput) (*accessanalyzer.GetFindingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinding", arg0)
	ret0, _ := ret[0].(*accessanalyzer.GetFindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinding indicates an expected call of GetFinding
func (mr *MockAccessAnalyzerAPIMockRecorder) GetFinding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinding", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetFinding), arg0)
}

// GetFindingRequest mocks base method
func (m *MockAccessAnalyzerAPI) GetFindingRequest(arg0 *accessanalyzer.GetFindingInput) (*request.Request, *accessanalyzer.GetFindingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.GetFindingOutput)
	return ret0, ret1
}

// GetFindingRequest indicates an expected call of GetFindingRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) GetFindingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetFindingRequest), arg0)
}

// GetFindingWithContext mocks base method
func (m *MockAccessAnalyzerAPI) GetFindingWithContext(arg0 context.Context, arg1 *accessanalyzer.GetFindingInput, arg2 ...request.Option) (*accessanalyzer.GetFindingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.GetFindingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingWithContext indicates an expected call of GetFindingWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) GetFindingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).GetFindingWithContext), varargs...)
}

// ListAnalyzedResources mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzedResources(arg0 *accessanalyzer.ListAnalyzedResourcesInput) (*accessanalyzer.ListAnalyzedResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalyzedResources", arg0)
	ret0, _ := ret[0].(*accessanalyzer.ListAnalyzedResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnalyzedResources indicates an expected call of ListAnalyzedResources
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzedResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzedResources", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzedResources), arg0)
}

// ListAnalyzedResourcesPages mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzedResourcesPages(arg0 *accessanalyzer.ListAnalyzedResourcesInput, arg1 func(*accessanalyzer.ListAnalyzedResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalyzedResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnalyzedResourcesPages indicates an expected call of ListAnalyzedResourcesPages
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzedResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzedResourcesPages", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzedResourcesPages), arg0, arg1)
}

// ListAnalyzedResourcesPagesWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzedResourcesPagesWithContext(arg0 context.Context, arg1 *accessanalyzer.ListAnalyzedResourcesInput, arg2 func(*accessanalyzer.ListAnalyzedResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnalyzedResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnalyzedResourcesPagesWithContext indicates an expected call of ListAnalyzedResourcesPagesWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzedResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzedResourcesPagesWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzedResourcesPagesWithContext), varargs...)
}

// ListAnalyzedResourcesRequest mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzedResourcesRequest(arg0 *accessanalyzer.ListAnalyzedResourcesInput) (*request.Request, *accessanalyzer.ListAnalyzedResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalyzedResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.ListAnalyzedResourcesOutput)
	return ret0, ret1
}

// ListAnalyzedResourcesRequest indicates an expected call of ListAnalyzedResourcesRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzedResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzedResourcesRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzedResourcesRequest), arg0)
}

// ListAnalyzedResourcesWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzedResourcesWithContext(arg0 context.Context, arg1 *accessanalyzer.ListAnalyzedResourcesInput, arg2 ...request.Option) (*accessanalyzer.ListAnalyzedResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnalyzedResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.ListAnalyzedResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnalyzedResourcesWithContext indicates an expected call of ListAnalyzedResourcesWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzedResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzedResourcesWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzedResourcesWithContext), varargs...)
}

// ListAnalyzers mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzers(arg0 *accessanalyzer.ListAnalyzersInput) (*accessanalyzer.ListAnalyzersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalyzers", arg0)
	ret0, _ := ret[0].(*accessanalyzer.ListAnalyzersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnalyzers indicates an expected call of ListAnalyzers
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzers", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzers), arg0)
}

// ListAnalyzersPages mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzersPages(arg0 *accessanalyzer.ListAnalyzersInput, arg1 func(*accessanalyzer.ListAnalyzersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalyzersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnalyzersPages indicates an expected call of ListAnalyzersPages
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzersPages", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzersPages), arg0, arg1)
}

// ListAnalyzersPagesWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzersPagesWithContext(arg0 context.Context, arg1 *accessanalyzer.ListAnalyzersInput, arg2 func(*accessanalyzer.ListAnalyzersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnalyzersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAnalyzersPagesWithContext indicates an expected call of ListAnalyzersPagesWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzersPagesWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzersPagesWithContext), varargs...)
}

// ListAnalyzersRequest mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzersRequest(arg0 *accessanalyzer.ListAnalyzersInput) (*request.Request, *accessanalyzer.ListAnalyzersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalyzersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.ListAnalyzersOutput)
	return ret0, ret1
}

// ListAnalyzersRequest indicates an expected call of ListAnalyzersRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzersRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzersRequest), arg0)
}

// ListAnalyzersWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListAnalyzersWithContext(arg0 context.Context, arg1 *accessanalyzer.ListAnalyzersInput, arg2 ...request.Option) (*accessanalyzer.ListAnalyzersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnalyzersWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.ListAnalyzersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnalyzersWithContext indicates an expected call of ListAnalyzersWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListAnalyzersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalyzersWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListAnalyzersWithContext), varargs...)
}

// ListArchiveRules mocks base method
func (m *MockAccessAnalyzerAPI) ListArchiveRules(arg0 *accessanalyzer.ListArchiveRulesInput) (*accessanalyzer.ListArchiveRulesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveRules", arg0)
	ret0, _ := ret[0].(*accessanalyzer.ListArchiveRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchiveRules indicates an expected call of ListArchiveRules
func (mr *MockAccessAnalyzerAPIMockRecorder) ListArchiveRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveRules", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListArchiveRules), arg0)
}

// ListArchiveRulesPages mocks base method
func (m *MockAccessAnalyzerAPI) ListArchiveRulesPages(arg0 *accessanalyzer.ListArchiveRulesInput, arg1 func(*accessanalyzer.ListArchiveRulesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveRulesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchiveRulesPages indicates an expected call of ListArchiveRulesPages
func (mr *MockAccessAnalyzerAPIMockRecorder) ListArchiveRulesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveRulesPages", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListArchiveRulesPages), arg0, arg1)
}

// ListArchiveRulesPagesWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListArchiveRulesPagesWithContext(arg0 context.Context, arg1 *accessanalyzer.ListArchiveRulesInput, arg2 func(*accessanalyzer.ListArchiveRulesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchiveRulesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListArchiveRulesPagesWithContext indicates an expected call of ListArchiveRulesPagesWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListArchiveRulesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveRulesPagesWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListArchiveRulesPagesWithContext), varargs...)
}

// ListArchiveRulesRequest mocks base method
func (m *MockAccessAnalyzerAPI) ListArchiveRulesRequest(arg0 *accessanalyzer.ListArchiveRulesInput) (*request.Request, *accessanalyzer.ListArchiveRulesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchiveRulesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.ListArchiveRulesOutput)
	return ret0, ret1
}

// ListArchiveRulesRequest indicates an expected call of ListArchiveRulesRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) ListArchiveRulesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveRulesRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListArchiveRulesRequest), arg0)
}

// ListArchiveRulesWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListArchiveRulesWithContext(arg0 context.Context, arg1 *accessanalyzer.ListArchiveRulesInput, arg2 ...request.Option) (*accessanalyzer.ListArchiveRulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArchiveRulesWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.ListArchiveRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchiveRulesWithContext indicates an expected call of ListArchiveRulesWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListArchiveRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchiveRulesWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListArchiveRulesWithContext), varargs...)
}

// ListFindings mocks base method
func (m *MockAccessAnalyzerAPI) ListFindings(arg0 *accessanalyzer.ListFindingsInput) (*accessanalyzer.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindings", arg0)
	ret0, _ := ret[0].(*accessanalyzer.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindings indicates an expected call of ListFindings
func (mr *MockAccessAnalyzerAPIMockRecorder) ListFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindings", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListFindings), arg0)
}

// ListFindingsPages mocks base method
func (m *MockAccessAnalyzerAPI) ListFindingsPages(arg0 *accessanalyzer.ListFindingsInput, arg1 func(*accessanalyzer.ListFindingsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPages indicates an expected call of ListFindingsPages
func (mr *MockAccessAnalyzerAPIMockRecorder) ListFindingsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPages", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListFindingsPages), arg0, arg1)
}

// ListFindingsPagesWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListFindingsPagesWithContext(arg0 context.Context, arg1 *accessanalyzer.ListFindingsInput, arg2 func(*accessanalyzer.ListFindingsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsPagesWithContext indicates an expected call of ListFindingsPagesWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListFindingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsPagesWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListFindingsPagesWithContext), varargs...)
}

// ListFindingsRequest mocks base method
func (m *MockAccessAnalyzerAPI) ListFindingsRequest(arg0 *accessanalyzer.ListFindingsInput) (*request.Request, *accessanalyzer.ListFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.ListFindingsOutput)
	return ret0, ret1
}

// ListFindingsRequest indicates an expected call of ListFindingsRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) ListFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListFindingsRequest), arg0)
}

// ListFindingsWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListFindingsWithContext(arg0 context.Context, arg1 *accessanalyzer.ListFindingsInput, arg2 ...request.Option) (*accessanalyzer.ListFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.ListFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsWithContext indicates an expected call of ListFindingsWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListFindingsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockAccessAnalyzerAPI) ListTagsForResource(arg0 *accessanalyzer.ListTagsForResourceInput) (*accessanalyzer.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*accessanalyzer.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockAccessAnalyzerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockAccessAnalyzerAPI) ListTagsForResourceRequest(arg0 *accessanalyzer.ListTagsForResourceInput) (*request.Request, *accessanalyzer.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockAccessAnalyzerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *accessanalyzer.ListTagsForResourceInput, arg2 ...request.Option) (*accessanalyzer.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// StartResourceScan mocks base method
func (m *MockAccessAnalyzerAPI) StartResourceScan(arg0 *accessanalyzer.StartResourceScanInput) (*accessanalyzer.StartResourceScanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartResourceScan", arg0)
	ret0, _ := ret[0].(*accessanalyzer.StartResourceScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartResourceScan indicates an expected call of StartResourceScan
func (mr *MockAccessAnalyzerAPIMockRecorder) StartResourceScan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartResourceScan", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).StartResourceScan), arg0)
}

// StartResourceScanRequest mocks base method
func (m *MockAccessAnalyzerAPI) StartResourceScanRequest(arg0 *accessanalyzer.StartResourceScanInput) (*request.Request, *accessanalyzer.StartResourceScanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartResourceScanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.StartResourceScanOutput)
	return ret0, ret1
}

// StartResourceScanRequest indicates an expected call of StartResourceScanRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) StartResourceScanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartResourceScanRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).StartResourceScanRequest), arg0)
}

// StartResourceScanWithContext mocks base method
func (m *MockAccessAnalyzerAPI) StartResourceScanWithContext(arg0 context.Context, arg1 *accessanalyzer.StartResourceScanInput, arg2 ...request.Option) (*accessanalyzer.StartResourceScanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartResourceScanWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.StartResourceScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartResourceScanWithContext indicates an expected call of StartResourceScanWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) StartResourceScanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartResourceScanWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).StartResourceScanWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockAccessAnalyzerAPI) TagResource(arg0 *accessanalyzer.TagResourceInput) (*accessanalyzer.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*accessanalyzer.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockAccessAnalyzerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockAccessAnalyzerAPI) TagResourceRequest(arg0 *accessanalyzer.TagResourceInput) (*request.Request, *accessanalyzer.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockAccessAnalyzerAPI) TagResourceWithContext(arg0 context.Context, arg1 *accessanalyzer.TagResourceInput, arg2 ...request.Option) (*accessanalyzer.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockAccessAnalyzerAPI) UntagResource(arg0 *accessanalyzer.UntagResourceInput) (*accessanalyzer.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*accessanalyzer.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockAccessAnalyzerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockAccessAnalyzerAPI) UntagResourceRequest(arg0 *accessanalyzer.UntagResourceInput) (*request.Request, *accessanalyzer.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockAccessAnalyzerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *accessanalyzer.UntagResourceInput, arg2 ...request.Option) (*accessanalyzer.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateArchiveRule mocks base method
func (m *MockAccessAnalyzerAPI) UpdateArchiveRule(arg0 *accessanalyzer.UpdateArchiveRuleInput) (*accessanalyzer.UpdateArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArchiveRule", arg0)
	ret0, _ := ret[0].(*accessanalyzer.UpdateArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArchiveRule indicates an expected call of UpdateArchiveRule
func (mr *MockAccessAnalyzerAPIMockRecorder) UpdateArchiveRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchiveRule", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UpdateArchiveRule), arg0)
}

// UpdateArchiveRuleRequest mocks base method
func (m *MockAccessAnalyzerAPI) UpdateArchiveRuleRequest(arg0 *accessanalyzer.UpdateArchiveRuleInput) (*request.Request, *accessanalyzer.UpdateArchiveRuleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArchiveRuleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.UpdateArchiveRuleOutput)
	return ret0, ret1
}

// UpdateArchiveRuleRequest indicates an expected call of UpdateArchiveRuleRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) UpdateArchiveRuleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchiveRuleRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UpdateArchiveRuleRequest), arg0)
}

// UpdateArchiveRuleWithContext mocks base method
func (m *MockAccessAnalyzerAPI) UpdateArchiveRuleWithContext(arg0 context.Context, arg1 *accessanalyzer.UpdateArchiveRuleInput, arg2 ...request.Option) (*accessanalyzer.UpdateArchiveRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateArchiveRuleWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.UpdateArchiveRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArchiveRuleWithContext indicates an expected call of UpdateArchiveRuleWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) UpdateArchiveRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArchiveRuleWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UpdateArchiveRuleWithContext), varargs...)
}

// UpdateFindings mocks base method
func (m *MockAccessAnalyzerAPI) UpdateFindings(arg0 *accessanalyzer.UpdateFindingsInput) (*accessanalyzer.UpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindings", arg0)
	ret0, _ := ret[0].(*accessanalyzer.UpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindings indicates an expected call of UpdateFindings
func (mr *MockAccessAnalyzerAPIMockRecorder) UpdateFindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindings", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UpdateFindings), arg0)
}

// UpdateFindingsRequest mocks base method
func (m *MockAccessAnalyzerAPI) UpdateFindingsRequest(arg0 *accessanalyzer.UpdateFindingsInput) (*request.Request, *accessanalyzer.UpdateFindingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFindingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*accessanalyzer.UpdateFindingsOutput)
	return ret0, ret1
}

// UpdateFindingsRequest indicates an expected call of UpdateFindingsRequest
func (mr *MockAccessAnalyzerAPIMockRecorder) UpdateFindingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingsRequest", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UpdateFindingsRequest), arg0)
}

// UpdateFindingsWithContext mocks base method
func (m *MockAccessAnalyzerAPI) UpdateFindingsWithContext(arg0 context.Context, arg1 *accessanalyzer.UpdateFindingsInput, arg2 ...request.Option) (*accessanalyzer.UpdateFindingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFindingsWithContext", varargs...)
	ret0, _ := ret[0].(*accessanalyzer.UpdateFindingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFindingsWithContext indicates an expected call of UpdateFindingsWithContext
func (mr *MockAccessAnalyzerAPIMockRecorder) UpdateFindingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFindingsWithContext", reflect.TypeOf((*MockAccessAnalyzerAPI)(nil).UpdateFindingsWithContext), varargs...)
}

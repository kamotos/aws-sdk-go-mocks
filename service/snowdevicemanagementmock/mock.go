// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/snowdevicemanagement/snowdevicemanagementiface (interfaces: SnowDeviceManagementAPI)

// Package snowdevicemanagementmock is a generated GoMock package.
package snowdevicemanagementmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	snowdevicemanagement "github.com/aws/aws-sdk-go/service/snowdevicemanagement"
	gomock "github.com/golang/mock/gomock"
)

// MockSnowDeviceManagementAPI is a mock of SnowDeviceManagementAPI interface.
type MockSnowDeviceManagementAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSnowDeviceManagementAPIMockRecorder
}

// MockSnowDeviceManagementAPIMockRecorder is the mock recorder for MockSnowDeviceManagementAPI.
type MockSnowDeviceManagementAPIMockRecorder struct {
	mock *MockSnowDeviceManagementAPI
}

// NewMockSnowDeviceManagementAPI creates a new mock instance.
func NewMockSnowDeviceManagementAPI(ctrl *gomock.Controller) *MockSnowDeviceManagementAPI {
	mock := &MockSnowDeviceManagementAPI{ctrl: ctrl}
	mock.recorder = &MockSnowDeviceManagementAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnowDeviceManagementAPI) EXPECT() *MockSnowDeviceManagementAPIMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockSnowDeviceManagementAPI) CancelTask(arg0 *snowdevicemanagement.CancelTaskInput) (*snowdevicemanagement.CancelTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.CancelTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockSnowDeviceManagementAPIMockRecorder) CancelTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).CancelTask), arg0)
}

// CancelTaskRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) CancelTaskRequest(arg0 *snowdevicemanagement.CancelTaskInput) (*request.Request, *snowdevicemanagement.CancelTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.CancelTaskOutput)
	return ret0, ret1
}

// CancelTaskRequest indicates an expected call of CancelTaskRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) CancelTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTaskRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).CancelTaskRequest), arg0)
}

// CancelTaskWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) CancelTaskWithContext(arg0 context.Context, arg1 *snowdevicemanagement.CancelTaskInput, arg2 ...request.Option) (*snowdevicemanagement.CancelTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelTaskWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.CancelTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTaskWithContext indicates an expected call of CancelTaskWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) CancelTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTaskWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).CancelTaskWithContext), varargs...)
}

// CreateTask mocks base method.
func (m *MockSnowDeviceManagementAPI) CreateTask(arg0 *snowdevicemanagement.CreateTaskInput) (*snowdevicemanagement.CreateTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.CreateTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockSnowDeviceManagementAPIMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).CreateTask), arg0)
}

// CreateTaskRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) CreateTaskRequest(arg0 *snowdevicemanagement.CreateTaskInput) (*request.Request, *snowdevicemanagement.CreateTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.CreateTaskOutput)
	return ret0, ret1
}

// CreateTaskRequest indicates an expected call of CreateTaskRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) CreateTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).CreateTaskRequest), arg0)
}

// CreateTaskWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) CreateTaskWithContext(arg0 context.Context, arg1 *snowdevicemanagement.CreateTaskInput, arg2 ...request.Option) (*snowdevicemanagement.CreateTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTaskWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.CreateTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskWithContext indicates an expected call of CreateTaskWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) CreateTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).CreateTaskWithContext), varargs...)
}

// DescribeDevice mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeDevice(arg0 *snowdevicemanagement.DescribeDeviceInput) (*snowdevicemanagement.DescribeDeviceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDevice", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDevice indicates an expected call of DescribeDevice.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDevice", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeDevice), arg0)
}

// DescribeDeviceEc2Instances mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeDeviceEc2Instances(arg0 *snowdevicemanagement.DescribeDeviceEc2InstancesInput) (*snowdevicemanagement.DescribeDeviceEc2InstancesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeviceEc2Instances", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeDeviceEc2InstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeviceEc2Instances indicates an expected call of DescribeDeviceEc2Instances.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeDeviceEc2Instances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceEc2Instances", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeDeviceEc2Instances), arg0)
}

// DescribeDeviceEc2InstancesRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeDeviceEc2InstancesRequest(arg0 *snowdevicemanagement.DescribeDeviceEc2InstancesInput) (*request.Request, *snowdevicemanagement.DescribeDeviceEc2InstancesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeviceEc2InstancesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.DescribeDeviceEc2InstancesOutput)
	return ret0, ret1
}

// DescribeDeviceEc2InstancesRequest indicates an expected call of DescribeDeviceEc2InstancesRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeDeviceEc2InstancesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceEc2InstancesRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeDeviceEc2InstancesRequest), arg0)
}

// DescribeDeviceEc2InstancesWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeDeviceEc2InstancesWithContext(arg0 context.Context, arg1 *snowdevicemanagement.DescribeDeviceEc2InstancesInput, arg2 ...request.Option) (*snowdevicemanagement.DescribeDeviceEc2InstancesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeviceEc2InstancesWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeDeviceEc2InstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeviceEc2InstancesWithContext indicates an expected call of DescribeDeviceEc2InstancesWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeDeviceEc2InstancesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceEc2InstancesWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeDeviceEc2InstancesWithContext), varargs...)
}

// DescribeDeviceRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeDeviceRequest(arg0 *snowdevicemanagement.DescribeDeviceInput) (*request.Request, *snowdevicemanagement.DescribeDeviceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDeviceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.DescribeDeviceOutput)
	return ret0, ret1
}

// DescribeDeviceRequest indicates an expected call of DescribeDeviceRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeDeviceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeDeviceRequest), arg0)
}

// DescribeDeviceWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeDeviceWithContext(arg0 context.Context, arg1 *snowdevicemanagement.DescribeDeviceInput, arg2 ...request.Option) (*snowdevicemanagement.DescribeDeviceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDeviceWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeDeviceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDeviceWithContext indicates an expected call of DescribeDeviceWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeDeviceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDeviceWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeDeviceWithContext), varargs...)
}

// DescribeExecution mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeExecution(arg0 *snowdevicemanagement.DescribeExecutionInput) (*snowdevicemanagement.DescribeExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExecution", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecution indicates an expected call of DescribeExecution.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeExecution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecution", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeExecution), arg0)
}

// DescribeExecutionRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeExecutionRequest(arg0 *snowdevicemanagement.DescribeExecutionInput) (*request.Request, *snowdevicemanagement.DescribeExecutionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExecutionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.DescribeExecutionOutput)
	return ret0, ret1
}

// DescribeExecutionRequest indicates an expected call of DescribeExecutionRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeExecutionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecutionRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeExecutionRequest), arg0)
}

// DescribeExecutionWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeExecutionWithContext(arg0 context.Context, arg1 *snowdevicemanagement.DescribeExecutionInput, arg2 ...request.Option) (*snowdevicemanagement.DescribeExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExecutionWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecutionWithContext indicates an expected call of DescribeExecutionWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecutionWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeExecutionWithContext), varargs...)
}

// DescribeTask mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeTask(arg0 *snowdevicemanagement.DescribeTaskInput) (*snowdevicemanagement.DescribeTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTask", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTask indicates an expected call of DescribeTask.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTask", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeTask), arg0)
}

// DescribeTaskRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeTaskRequest(arg0 *snowdevicemanagement.DescribeTaskInput) (*request.Request, *snowdevicemanagement.DescribeTaskOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTaskRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.DescribeTaskOutput)
	return ret0, ret1
}

// DescribeTaskRequest indicates an expected call of DescribeTaskRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeTaskRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTaskRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeTaskRequest), arg0)
}

// DescribeTaskWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) DescribeTaskWithContext(arg0 context.Context, arg1 *snowdevicemanagement.DescribeTaskInput, arg2 ...request.Option) (*snowdevicemanagement.DescribeTaskOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTaskWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.DescribeTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTaskWithContext indicates an expected call of DescribeTaskWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) DescribeTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTaskWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).DescribeTaskWithContext), varargs...)
}

// ListDeviceResources mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDeviceResources(arg0 *snowdevicemanagement.ListDeviceResourcesInput) (*snowdevicemanagement.ListDeviceResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceResources", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.ListDeviceResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeviceResources indicates an expected call of ListDeviceResources.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDeviceResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceResources", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDeviceResources), arg0)
}

// ListDeviceResourcesPages mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDeviceResourcesPages(arg0 *snowdevicemanagement.ListDeviceResourcesInput, arg1 func(*snowdevicemanagement.ListDeviceResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeviceResourcesPages indicates an expected call of ListDeviceResourcesPages.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDeviceResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceResourcesPages", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDeviceResourcesPages), arg0, arg1)
}

// ListDeviceResourcesPagesWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDeviceResourcesPagesWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListDeviceResourcesInput, arg2 func(*snowdevicemanagement.ListDeviceResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeviceResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDeviceResourcesPagesWithContext indicates an expected call of ListDeviceResourcesPagesWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDeviceResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceResourcesPagesWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDeviceResourcesPagesWithContext), varargs...)
}

// ListDeviceResourcesRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDeviceResourcesRequest(arg0 *snowdevicemanagement.ListDeviceResourcesInput) (*request.Request, *snowdevicemanagement.ListDeviceResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeviceResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.ListDeviceResourcesOutput)
	return ret0, ret1
}

// ListDeviceResourcesRequest indicates an expected call of ListDeviceResourcesRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDeviceResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceResourcesRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDeviceResourcesRequest), arg0)
}

// ListDeviceResourcesWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDeviceResourcesWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListDeviceResourcesInput, arg2 ...request.Option) (*snowdevicemanagement.ListDeviceResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeviceResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.ListDeviceResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeviceResourcesWithContext indicates an expected call of ListDeviceResourcesWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDeviceResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeviceResourcesWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDeviceResourcesWithContext), varargs...)
}

// ListDevices mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDevices(arg0 *snowdevicemanagement.ListDevicesInput) (*snowdevicemanagement.ListDevicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDevices), arg0)
}

// ListDevicesPages mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDevicesPages(arg0 *snowdevicemanagement.ListDevicesInput, arg1 func(*snowdevicemanagement.ListDevicesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesPages indicates an expected call of ListDevicesPages.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDevicesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesPages", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDevicesPages), arg0, arg1)
}

// ListDevicesPagesWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDevicesPagesWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListDevicesInput, arg2 func(*snowdevicemanagement.ListDevicesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevicesPagesWithContext indicates an expected call of ListDevicesPagesWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDevicesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesPagesWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDevicesPagesWithContext), varargs...)
}

// ListDevicesRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDevicesRequest(arg0 *snowdevicemanagement.ListDevicesInput) (*request.Request, *snowdevicemanagement.ListDevicesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.ListDevicesOutput)
	return ret0, ret1
}

// ListDevicesRequest indicates an expected call of ListDevicesRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDevicesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDevicesRequest), arg0)
}

// ListDevicesWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListDevicesWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListDevicesInput, arg2 ...request.Option) (*snowdevicemanagement.ListDevicesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevicesWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.ListDevicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevicesWithContext indicates an expected call of ListDevicesWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListDevicesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListDevicesWithContext), varargs...)
}

// ListExecutions mocks base method.
func (m *MockSnowDeviceManagementAPI) ListExecutions(arg0 *snowdevicemanagement.ListExecutionsInput) (*snowdevicemanagement.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutions", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutions indicates an expected call of ListExecutions.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListExecutions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutions", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListExecutions), arg0)
}

// ListExecutionsPages mocks base method.
func (m *MockSnowDeviceManagementAPI) ListExecutionsPages(arg0 *snowdevicemanagement.ListExecutionsInput, arg1 func(*snowdevicemanagement.ListExecutionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPages indicates an expected call of ListExecutionsPages.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListExecutionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPages", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListExecutionsPages), arg0, arg1)
}

// ListExecutionsPagesWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListExecutionsPagesWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListExecutionsInput, arg2 func(*snowdevicemanagement.ListExecutionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExecutionsPagesWithContext indicates an expected call of ListExecutionsPagesWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListExecutionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsPagesWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListExecutionsPagesWithContext), varargs...)
}

// ListExecutionsRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) ListExecutionsRequest(arg0 *snowdevicemanagement.ListExecutionsInput) (*request.Request, *snowdevicemanagement.ListExecutionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExecutionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.ListExecutionsOutput)
	return ret0, ret1
}

// ListExecutionsRequest indicates an expected call of ListExecutionsRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListExecutionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListExecutionsRequest), arg0)
}

// ListExecutionsWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListExecutionsWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListExecutionsInput, arg2 ...request.Option) (*snowdevicemanagement.ListExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExecutionsWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.ListExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExecutionsWithContext indicates an expected call of ListExecutionsWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExecutionsWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListExecutionsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTagsForResource(arg0 *snowdevicemanagement.ListTagsForResourceInput) (*snowdevicemanagement.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTagsForResourceRequest(arg0 *snowdevicemanagement.ListTagsForResourceInput) (*request.Request, *snowdevicemanagement.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListTagsForResourceInput, arg2 ...request.Option) (*snowdevicemanagement.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTasks mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTasks(arg0 *snowdevicemanagement.ListTasksInput) (*snowdevicemanagement.ListTasksOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.ListTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTasks), arg0)
}

// ListTasksPages mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTasksPages(arg0 *snowdevicemanagement.ListTasksInput, arg1 func(*snowdevicemanagement.ListTasksOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTasksPages indicates an expected call of ListTasksPages.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTasksPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksPages", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTasksPages), arg0, arg1)
}

// ListTasksPagesWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTasksPagesWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListTasksInput, arg2 func(*snowdevicemanagement.ListTasksOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasksPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTasksPagesWithContext indicates an expected call of ListTasksPagesWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTasksPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksPagesWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTasksPagesWithContext), varargs...)
}

// ListTasksRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTasksRequest(arg0 *snowdevicemanagement.ListTasksInput) (*request.Request, *snowdevicemanagement.ListTasksOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.ListTasksOutput)
	return ret0, ret1
}

// ListTasksRequest indicates an expected call of ListTasksRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTasksRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTasksRequest), arg0)
}

// ListTasksWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) ListTasksWithContext(arg0 context.Context, arg1 *snowdevicemanagement.ListTasksInput, arg2 ...request.Option) (*snowdevicemanagement.ListTasksOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTasksWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.ListTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasksWithContext indicates an expected call of ListTasksWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) ListTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).ListTasksWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockSnowDeviceManagementAPI) TagResource(arg0 *snowdevicemanagement.TagResourceInput) (*snowdevicemanagement.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockSnowDeviceManagementAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) TagResourceRequest(arg0 *snowdevicemanagement.TagResourceInput) (*request.Request, *snowdevicemanagement.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) TagResourceWithContext(arg0 context.Context, arg1 *snowdevicemanagement.TagResourceInput, arg2 ...request.Option) (*snowdevicemanagement.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockSnowDeviceManagementAPI) UntagResource(arg0 *snowdevicemanagement.UntagResourceInput) (*snowdevicemanagement.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*snowdevicemanagement.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockSnowDeviceManagementAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockSnowDeviceManagementAPI) UntagResourceRequest(arg0 *snowdevicemanagement.UntagResourceInput) (*request.Request, *snowdevicemanagement.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*snowdevicemanagement.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockSnowDeviceManagementAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockSnowDeviceManagementAPI) UntagResourceWithContext(arg0 context.Context, arg1 *snowdevicemanagement.UntagResourceInput, arg2 ...request.Option) (*snowdevicemanagement.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*snowdevicemanagement.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockSnowDeviceManagementAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSnowDeviceManagementAPI)(nil).UntagResourceWithContext), varargs...)
}

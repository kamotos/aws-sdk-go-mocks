// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/ssmcontacts/ssmcontactsiface (interfaces: SSMContactsAPI)

// Package ssmcontactsmock is a generated GoMock package.
package ssmcontactsmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	ssmcontacts "github.com/aws/aws-sdk-go/service/ssmcontacts"
	gomock "github.com/golang/mock/gomock"
)

// MockSSMContactsAPI is a mock of SSMContactsAPI interface.
type MockSSMContactsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSMContactsAPIMockRecorder
}

// MockSSMContactsAPIMockRecorder is the mock recorder for MockSSMContactsAPI.
type MockSSMContactsAPIMockRecorder struct {
	mock *MockSSMContactsAPI
}

// NewMockSSMContactsAPI creates a new mock instance.
func NewMockSSMContactsAPI(ctrl *gomock.Controller) *MockSSMContactsAPI {
	mock := &MockSSMContactsAPI{ctrl: ctrl}
	mock.recorder = &MockSSMContactsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSMContactsAPI) EXPECT() *MockSSMContactsAPIMockRecorder {
	return m.recorder
}

// AcceptPage mocks base method.
func (m *MockSSMContactsAPI) AcceptPage(arg0 *ssmcontacts.AcceptPageInput) (*ssmcontacts.AcceptPageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptPage", arg0)
	ret0, _ := ret[0].(*ssmcontacts.AcceptPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptPage indicates an expected call of AcceptPage.
func (mr *MockSSMContactsAPIMockRecorder) AcceptPage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPage", reflect.TypeOf((*MockSSMContactsAPI)(nil).AcceptPage), arg0)
}

// AcceptPageRequest mocks base method.
func (m *MockSSMContactsAPI) AcceptPageRequest(arg0 *ssmcontacts.AcceptPageInput) (*request.Request, *ssmcontacts.AcceptPageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptPageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.AcceptPageOutput)
	return ret0, ret1
}

// AcceptPageRequest indicates an expected call of AcceptPageRequest.
func (mr *MockSSMContactsAPIMockRecorder) AcceptPageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPageRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).AcceptPageRequest), arg0)
}

// AcceptPageWithContext mocks base method.
func (m *MockSSMContactsAPI) AcceptPageWithContext(arg0 context.Context, arg1 *ssmcontacts.AcceptPageInput, arg2 ...request.Option) (*ssmcontacts.AcceptPageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptPageWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.AcceptPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptPageWithContext indicates an expected call of AcceptPageWithContext.
func (mr *MockSSMContactsAPIMockRecorder) AcceptPageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPageWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).AcceptPageWithContext), varargs...)
}

// ActivateContactChannel mocks base method.
func (m *MockSSMContactsAPI) ActivateContactChannel(arg0 *ssmcontacts.ActivateContactChannelInput) (*ssmcontacts.ActivateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateContactChannel", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ActivateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateContactChannel indicates an expected call of ActivateContactChannel.
func (mr *MockSSMContactsAPIMockRecorder) ActivateContactChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateContactChannel", reflect.TypeOf((*MockSSMContactsAPI)(nil).ActivateContactChannel), arg0)
}

// ActivateContactChannelRequest mocks base method.
func (m *MockSSMContactsAPI) ActivateContactChannelRequest(arg0 *ssmcontacts.ActivateContactChannelInput) (*request.Request, *ssmcontacts.ActivateContactChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateContactChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ActivateContactChannelOutput)
	return ret0, ret1
}

// ActivateContactChannelRequest indicates an expected call of ActivateContactChannelRequest.
func (mr *MockSSMContactsAPIMockRecorder) ActivateContactChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateContactChannelRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ActivateContactChannelRequest), arg0)
}

// ActivateContactChannelWithContext mocks base method.
func (m *MockSSMContactsAPI) ActivateContactChannelWithContext(arg0 context.Context, arg1 *ssmcontacts.ActivateContactChannelInput, arg2 ...request.Option) (*ssmcontacts.ActivateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateContactChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ActivateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateContactChannelWithContext indicates an expected call of ActivateContactChannelWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ActivateContactChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateContactChannelWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ActivateContactChannelWithContext), varargs...)
}

// CreateContact mocks base method.
func (m *MockSSMContactsAPI) CreateContact(arg0 *ssmcontacts.CreateContactInput) (*ssmcontacts.CreateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0)
	ret0, _ := ret[0].(*ssmcontacts.CreateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockSSMContactsAPIMockRecorder) CreateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockSSMContactsAPI)(nil).CreateContact), arg0)
}

// CreateContactChannel mocks base method.
func (m *MockSSMContactsAPI) CreateContactChannel(arg0 *ssmcontacts.CreateContactChannelInput) (*ssmcontacts.CreateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactChannel", arg0)
	ret0, _ := ret[0].(*ssmcontacts.CreateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactChannel indicates an expected call of CreateContactChannel.
func (mr *MockSSMContactsAPIMockRecorder) CreateContactChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactChannel", reflect.TypeOf((*MockSSMContactsAPI)(nil).CreateContactChannel), arg0)
}

// CreateContactChannelRequest mocks base method.
func (m *MockSSMContactsAPI) CreateContactChannelRequest(arg0 *ssmcontacts.CreateContactChannelInput) (*request.Request, *ssmcontacts.CreateContactChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.CreateContactChannelOutput)
	return ret0, ret1
}

// CreateContactChannelRequest indicates an expected call of CreateContactChannelRequest.
func (mr *MockSSMContactsAPIMockRecorder) CreateContactChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactChannelRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).CreateContactChannelRequest), arg0)
}

// CreateContactChannelWithContext mocks base method.
func (m *MockSSMContactsAPI) CreateContactChannelWithContext(arg0 context.Context, arg1 *ssmcontacts.CreateContactChannelInput, arg2 ...request.Option) (*ssmcontacts.CreateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContactChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.CreateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactChannelWithContext indicates an expected call of CreateContactChannelWithContext.
func (mr *MockSSMContactsAPIMockRecorder) CreateContactChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactChannelWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).CreateContactChannelWithContext), varargs...)
}

// CreateContactRequest mocks base method.
func (m *MockSSMContactsAPI) CreateContactRequest(arg0 *ssmcontacts.CreateContactInput) (*request.Request, *ssmcontacts.CreateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.CreateContactOutput)
	return ret0, ret1
}

// CreateContactRequest indicates an expected call of CreateContactRequest.
func (mr *MockSSMContactsAPIMockRecorder) CreateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).CreateContactRequest), arg0)
}

// CreateContactWithContext mocks base method.
func (m *MockSSMContactsAPI) CreateContactWithContext(arg0 context.Context, arg1 *ssmcontacts.CreateContactInput, arg2 ...request.Option) (*ssmcontacts.CreateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateContactWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.CreateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContactWithContext indicates an expected call of CreateContactWithContext.
func (mr *MockSSMContactsAPIMockRecorder) CreateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContactWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).CreateContactWithContext), varargs...)
}

// DeactivateContactChannel mocks base method.
func (m *MockSSMContactsAPI) DeactivateContactChannel(arg0 *ssmcontacts.DeactivateContactChannelInput) (*ssmcontacts.DeactivateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateContactChannel", arg0)
	ret0, _ := ret[0].(*ssmcontacts.DeactivateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateContactChannel indicates an expected call of DeactivateContactChannel.
func (mr *MockSSMContactsAPIMockRecorder) DeactivateContactChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateContactChannel", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeactivateContactChannel), arg0)
}

// DeactivateContactChannelRequest mocks base method.
func (m *MockSSMContactsAPI) DeactivateContactChannelRequest(arg0 *ssmcontacts.DeactivateContactChannelInput) (*request.Request, *ssmcontacts.DeactivateContactChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateContactChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.DeactivateContactChannelOutput)
	return ret0, ret1
}

// DeactivateContactChannelRequest indicates an expected call of DeactivateContactChannelRequest.
func (mr *MockSSMContactsAPIMockRecorder) DeactivateContactChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateContactChannelRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeactivateContactChannelRequest), arg0)
}

// DeactivateContactChannelWithContext mocks base method.
func (m *MockSSMContactsAPI) DeactivateContactChannelWithContext(arg0 context.Context, arg1 *ssmcontacts.DeactivateContactChannelInput, arg2 ...request.Option) (*ssmcontacts.DeactivateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivateContactChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.DeactivateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateContactChannelWithContext indicates an expected call of DeactivateContactChannelWithContext.
func (mr *MockSSMContactsAPIMockRecorder) DeactivateContactChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateContactChannelWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeactivateContactChannelWithContext), varargs...)
}

// DeleteContact mocks base method.
func (m *MockSSMContactsAPI) DeleteContact(arg0 *ssmcontacts.DeleteContactInput) (*ssmcontacts.DeleteContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0)
	ret0, _ := ret[0].(*ssmcontacts.DeleteContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockSSMContactsAPIMockRecorder) DeleteContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeleteContact), arg0)
}

// DeleteContactChannel mocks base method.
func (m *MockSSMContactsAPI) DeleteContactChannel(arg0 *ssmcontacts.DeleteContactChannelInput) (*ssmcontacts.DeleteContactChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactChannel", arg0)
	ret0, _ := ret[0].(*ssmcontacts.DeleteContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContactChannel indicates an expected call of DeleteContactChannel.
func (mr *MockSSMContactsAPIMockRecorder) DeleteContactChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactChannel", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeleteContactChannel), arg0)
}

// DeleteContactChannelRequest mocks base method.
func (m *MockSSMContactsAPI) DeleteContactChannelRequest(arg0 *ssmcontacts.DeleteContactChannelInput) (*request.Request, *ssmcontacts.DeleteContactChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.DeleteContactChannelOutput)
	return ret0, ret1
}

// DeleteContactChannelRequest indicates an expected call of DeleteContactChannelRequest.
func (mr *MockSSMContactsAPIMockRecorder) DeleteContactChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactChannelRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeleteContactChannelRequest), arg0)
}

// DeleteContactChannelWithContext mocks base method.
func (m *MockSSMContactsAPI) DeleteContactChannelWithContext(arg0 context.Context, arg1 *ssmcontacts.DeleteContactChannelInput, arg2 ...request.Option) (*ssmcontacts.DeleteContactChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContactChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.DeleteContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContactChannelWithContext indicates an expected call of DeleteContactChannelWithContext.
func (mr *MockSSMContactsAPIMockRecorder) DeleteContactChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactChannelWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeleteContactChannelWithContext), varargs...)
}

// DeleteContactRequest mocks base method.
func (m *MockSSMContactsAPI) DeleteContactRequest(arg0 *ssmcontacts.DeleteContactInput) (*request.Request, *ssmcontacts.DeleteContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.DeleteContactOutput)
	return ret0, ret1
}

// DeleteContactRequest indicates an expected call of DeleteContactRequest.
func (mr *MockSSMContactsAPIMockRecorder) DeleteContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeleteContactRequest), arg0)
}

// DeleteContactWithContext mocks base method.
func (m *MockSSMContactsAPI) DeleteContactWithContext(arg0 context.Context, arg1 *ssmcontacts.DeleteContactInput, arg2 ...request.Option) (*ssmcontacts.DeleteContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContactWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.DeleteContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContactWithContext indicates an expected call of DeleteContactWithContext.
func (mr *MockSSMContactsAPIMockRecorder) DeleteContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).DeleteContactWithContext), varargs...)
}

// DescribeEngagement mocks base method.
func (m *MockSSMContactsAPI) DescribeEngagement(arg0 *ssmcontacts.DescribeEngagementInput) (*ssmcontacts.DescribeEngagementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngagement", arg0)
	ret0, _ := ret[0].(*ssmcontacts.DescribeEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngagement indicates an expected call of DescribeEngagement.
func (mr *MockSSMContactsAPIMockRecorder) DescribeEngagement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngagement", reflect.TypeOf((*MockSSMContactsAPI)(nil).DescribeEngagement), arg0)
}

// DescribeEngagementRequest mocks base method.
func (m *MockSSMContactsAPI) DescribeEngagementRequest(arg0 *ssmcontacts.DescribeEngagementInput) (*request.Request, *ssmcontacts.DescribeEngagementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEngagementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.DescribeEngagementOutput)
	return ret0, ret1
}

// DescribeEngagementRequest indicates an expected call of DescribeEngagementRequest.
func (mr *MockSSMContactsAPIMockRecorder) DescribeEngagementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngagementRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).DescribeEngagementRequest), arg0)
}

// DescribeEngagementWithContext mocks base method.
func (m *MockSSMContactsAPI) DescribeEngagementWithContext(arg0 context.Context, arg1 *ssmcontacts.DescribeEngagementInput, arg2 ...request.Option) (*ssmcontacts.DescribeEngagementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEngagementWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.DescribeEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEngagementWithContext indicates an expected call of DescribeEngagementWithContext.
func (mr *MockSSMContactsAPIMockRecorder) DescribeEngagementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEngagementWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).DescribeEngagementWithContext), varargs...)
}

// DescribePage mocks base method.
func (m *MockSSMContactsAPI) DescribePage(arg0 *ssmcontacts.DescribePageInput) (*ssmcontacts.DescribePageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePage", arg0)
	ret0, _ := ret[0].(*ssmcontacts.DescribePageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePage indicates an expected call of DescribePage.
func (mr *MockSSMContactsAPIMockRecorder) DescribePage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePage", reflect.TypeOf((*MockSSMContactsAPI)(nil).DescribePage), arg0)
}

// DescribePageRequest mocks base method.
func (m *MockSSMContactsAPI) DescribePageRequest(arg0 *ssmcontacts.DescribePageInput) (*request.Request, *ssmcontacts.DescribePageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.DescribePageOutput)
	return ret0, ret1
}

// DescribePageRequest indicates an expected call of DescribePageRequest.
func (mr *MockSSMContactsAPIMockRecorder) DescribePageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePageRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).DescribePageRequest), arg0)
}

// DescribePageWithContext mocks base method.
func (m *MockSSMContactsAPI) DescribePageWithContext(arg0 context.Context, arg1 *ssmcontacts.DescribePageInput, arg2 ...request.Option) (*ssmcontacts.DescribePageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePageWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.DescribePageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePageWithContext indicates an expected call of DescribePageWithContext.
func (mr *MockSSMContactsAPIMockRecorder) DescribePageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePageWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).DescribePageWithContext), varargs...)
}

// GetContact mocks base method.
func (m *MockSSMContactsAPI) GetContact(arg0 *ssmcontacts.GetContactInput) (*ssmcontacts.GetContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(*ssmcontacts.GetContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockSSMContactsAPIMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContact), arg0)
}

// GetContactChannel mocks base method.
func (m *MockSSMContactsAPI) GetContactChannel(arg0 *ssmcontacts.GetContactChannelInput) (*ssmcontacts.GetContactChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactChannel", arg0)
	ret0, _ := ret[0].(*ssmcontacts.GetContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactChannel indicates an expected call of GetContactChannel.
func (mr *MockSSMContactsAPIMockRecorder) GetContactChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactChannel", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactChannel), arg0)
}

// GetContactChannelRequest mocks base method.
func (m *MockSSMContactsAPI) GetContactChannelRequest(arg0 *ssmcontacts.GetContactChannelInput) (*request.Request, *ssmcontacts.GetContactChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.GetContactChannelOutput)
	return ret0, ret1
}

// GetContactChannelRequest indicates an expected call of GetContactChannelRequest.
func (mr *MockSSMContactsAPIMockRecorder) GetContactChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactChannelRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactChannelRequest), arg0)
}

// GetContactChannelWithContext mocks base method.
func (m *MockSSMContactsAPI) GetContactChannelWithContext(arg0 context.Context, arg1 *ssmcontacts.GetContactChannelInput, arg2 ...request.Option) (*ssmcontacts.GetContactChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.GetContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactChannelWithContext indicates an expected call of GetContactChannelWithContext.
func (mr *MockSSMContactsAPIMockRecorder) GetContactChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactChannelWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactChannelWithContext), varargs...)
}

// GetContactPolicy mocks base method.
func (m *MockSSMContactsAPI) GetContactPolicy(arg0 *ssmcontacts.GetContactPolicyInput) (*ssmcontacts.GetContactPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactPolicy", arg0)
	ret0, _ := ret[0].(*ssmcontacts.GetContactPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactPolicy indicates an expected call of GetContactPolicy.
func (mr *MockSSMContactsAPIMockRecorder) GetContactPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactPolicy", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactPolicy), arg0)
}

// GetContactPolicyRequest mocks base method.
func (m *MockSSMContactsAPI) GetContactPolicyRequest(arg0 *ssmcontacts.GetContactPolicyInput) (*request.Request, *ssmcontacts.GetContactPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.GetContactPolicyOutput)
	return ret0, ret1
}

// GetContactPolicyRequest indicates an expected call of GetContactPolicyRequest.
func (mr *MockSSMContactsAPIMockRecorder) GetContactPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactPolicyRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactPolicyRequest), arg0)
}

// GetContactPolicyWithContext mocks base method.
func (m *MockSSMContactsAPI) GetContactPolicyWithContext(arg0 context.Context, arg1 *ssmcontacts.GetContactPolicyInput, arg2 ...request.Option) (*ssmcontacts.GetContactPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.GetContactPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactPolicyWithContext indicates an expected call of GetContactPolicyWithContext.
func (mr *MockSSMContactsAPIMockRecorder) GetContactPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactPolicyWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactPolicyWithContext), varargs...)
}

// GetContactRequest mocks base method.
func (m *MockSSMContactsAPI) GetContactRequest(arg0 *ssmcontacts.GetContactInput) (*request.Request, *ssmcontacts.GetContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.GetContactOutput)
	return ret0, ret1
}

// GetContactRequest indicates an expected call of GetContactRequest.
func (mr *MockSSMContactsAPIMockRecorder) GetContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactRequest), arg0)
}

// GetContactWithContext mocks base method.
func (m *MockSSMContactsAPI) GetContactWithContext(arg0 context.Context, arg1 *ssmcontacts.GetContactInput, arg2 ...request.Option) (*ssmcontacts.GetContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContactWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.GetContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactWithContext indicates an expected call of GetContactWithContext.
func (mr *MockSSMContactsAPIMockRecorder) GetContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).GetContactWithContext), varargs...)
}

// ListContactChannels mocks base method.
func (m *MockSSMContactsAPI) ListContactChannels(arg0 *ssmcontacts.ListContactChannelsInput) (*ssmcontacts.ListContactChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactChannels", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ListContactChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactChannels indicates an expected call of ListContactChannels.
func (mr *MockSSMContactsAPIMockRecorder) ListContactChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactChannels", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactChannels), arg0)
}

// ListContactChannelsPages mocks base method.
func (m *MockSSMContactsAPI) ListContactChannelsPages(arg0 *ssmcontacts.ListContactChannelsInput, arg1 func(*ssmcontacts.ListContactChannelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactChannelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactChannelsPages indicates an expected call of ListContactChannelsPages.
func (mr *MockSSMContactsAPIMockRecorder) ListContactChannelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactChannelsPages", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactChannelsPages), arg0, arg1)
}

// ListContactChannelsPagesWithContext mocks base method.
func (m *MockSSMContactsAPI) ListContactChannelsPagesWithContext(arg0 context.Context, arg1 *ssmcontacts.ListContactChannelsInput, arg2 func(*ssmcontacts.ListContactChannelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactChannelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactChannelsPagesWithContext indicates an expected call of ListContactChannelsPagesWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListContactChannelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactChannelsPagesWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactChannelsPagesWithContext), varargs...)
}

// ListContactChannelsRequest mocks base method.
func (m *MockSSMContactsAPI) ListContactChannelsRequest(arg0 *ssmcontacts.ListContactChannelsInput) (*request.Request, *ssmcontacts.ListContactChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ListContactChannelsOutput)
	return ret0, ret1
}

// ListContactChannelsRequest indicates an expected call of ListContactChannelsRequest.
func (mr *MockSSMContactsAPIMockRecorder) ListContactChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactChannelsRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactChannelsRequest), arg0)
}

// ListContactChannelsWithContext mocks base method.
func (m *MockSSMContactsAPI) ListContactChannelsWithContext(arg0 context.Context, arg1 *ssmcontacts.ListContactChannelsInput, arg2 ...request.Option) (*ssmcontacts.ListContactChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ListContactChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactChannelsWithContext indicates an expected call of ListContactChannelsWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListContactChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactChannelsWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactChannelsWithContext), varargs...)
}

// ListContacts mocks base method.
func (m *MockSSMContactsAPI) ListContacts(arg0 *ssmcontacts.ListContactsInput) (*ssmcontacts.ListContactsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ListContactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockSSMContactsAPIMockRecorder) ListContacts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContacts), arg0)
}

// ListContactsPages mocks base method.
func (m *MockSSMContactsAPI) ListContactsPages(arg0 *ssmcontacts.ListContactsInput, arg1 func(*ssmcontacts.ListContactsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactsPages indicates an expected call of ListContactsPages.
func (mr *MockSSMContactsAPIMockRecorder) ListContactsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsPages", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactsPages), arg0, arg1)
}

// ListContactsPagesWithContext mocks base method.
func (m *MockSSMContactsAPI) ListContactsPagesWithContext(arg0 context.Context, arg1 *ssmcontacts.ListContactsInput, arg2 func(*ssmcontacts.ListContactsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContactsPagesWithContext indicates an expected call of ListContactsPagesWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListContactsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsPagesWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactsPagesWithContext), varargs...)
}

// ListContactsRequest mocks base method.
func (m *MockSSMContactsAPI) ListContactsRequest(arg0 *ssmcontacts.ListContactsInput) (*request.Request, *ssmcontacts.ListContactsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContactsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ListContactsOutput)
	return ret0, ret1
}

// ListContactsRequest indicates an expected call of ListContactsRequest.
func (mr *MockSSMContactsAPIMockRecorder) ListContactsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactsRequest), arg0)
}

// ListContactsWithContext mocks base method.
func (m *MockSSMContactsAPI) ListContactsWithContext(arg0 context.Context, arg1 *ssmcontacts.ListContactsInput, arg2 ...request.Option) (*ssmcontacts.ListContactsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContactsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ListContactsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContactsWithContext indicates an expected call of ListContactsWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListContactsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContactsWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListContactsWithContext), varargs...)
}

// ListEngagements mocks base method.
func (m *MockSSMContactsAPI) ListEngagements(arg0 *ssmcontacts.ListEngagementsInput) (*ssmcontacts.ListEngagementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEngagements", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ListEngagementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEngagements indicates an expected call of ListEngagements.
func (mr *MockSSMContactsAPIMockRecorder) ListEngagements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngagements", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListEngagements), arg0)
}

// ListEngagementsPages mocks base method.
func (m *MockSSMContactsAPI) ListEngagementsPages(arg0 *ssmcontacts.ListEngagementsInput, arg1 func(*ssmcontacts.ListEngagementsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEngagementsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEngagementsPages indicates an expected call of ListEngagementsPages.
func (mr *MockSSMContactsAPIMockRecorder) ListEngagementsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngagementsPages", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListEngagementsPages), arg0, arg1)
}

// ListEngagementsPagesWithContext mocks base method.
func (m *MockSSMContactsAPI) ListEngagementsPagesWithContext(arg0 context.Context, arg1 *ssmcontacts.ListEngagementsInput, arg2 func(*ssmcontacts.ListEngagementsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEngagementsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEngagementsPagesWithContext indicates an expected call of ListEngagementsPagesWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListEngagementsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngagementsPagesWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListEngagementsPagesWithContext), varargs...)
}

// ListEngagementsRequest mocks base method.
func (m *MockSSMContactsAPI) ListEngagementsRequest(arg0 *ssmcontacts.ListEngagementsInput) (*request.Request, *ssmcontacts.ListEngagementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEngagementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ListEngagementsOutput)
	return ret0, ret1
}

// ListEngagementsRequest indicates an expected call of ListEngagementsRequest.
func (mr *MockSSMContactsAPIMockRecorder) ListEngagementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngagementsRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListEngagementsRequest), arg0)
}

// ListEngagementsWithContext mocks base method.
func (m *MockSSMContactsAPI) ListEngagementsWithContext(arg0 context.Context, arg1 *ssmcontacts.ListEngagementsInput, arg2 ...request.Option) (*ssmcontacts.ListEngagementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEngagementsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ListEngagementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEngagementsWithContext indicates an expected call of ListEngagementsWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListEngagementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngagementsWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListEngagementsWithContext), varargs...)
}

// ListPageReceipts mocks base method.
func (m *MockSSMContactsAPI) ListPageReceipts(arg0 *ssmcontacts.ListPageReceiptsInput) (*ssmcontacts.ListPageReceiptsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPageReceipts", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ListPageReceiptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPageReceipts indicates an expected call of ListPageReceipts.
func (mr *MockSSMContactsAPIMockRecorder) ListPageReceipts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageReceipts", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPageReceipts), arg0)
}

// ListPageReceiptsPages mocks base method.
func (m *MockSSMContactsAPI) ListPageReceiptsPages(arg0 *ssmcontacts.ListPageReceiptsInput, arg1 func(*ssmcontacts.ListPageReceiptsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPageReceiptsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPageReceiptsPages indicates an expected call of ListPageReceiptsPages.
func (mr *MockSSMContactsAPIMockRecorder) ListPageReceiptsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageReceiptsPages", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPageReceiptsPages), arg0, arg1)
}

// ListPageReceiptsPagesWithContext mocks base method.
func (m *MockSSMContactsAPI) ListPageReceiptsPagesWithContext(arg0 context.Context, arg1 *ssmcontacts.ListPageReceiptsInput, arg2 func(*ssmcontacts.ListPageReceiptsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPageReceiptsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPageReceiptsPagesWithContext indicates an expected call of ListPageReceiptsPagesWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListPageReceiptsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageReceiptsPagesWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPageReceiptsPagesWithContext), varargs...)
}

// ListPageReceiptsRequest mocks base method.
func (m *MockSSMContactsAPI) ListPageReceiptsRequest(arg0 *ssmcontacts.ListPageReceiptsInput) (*request.Request, *ssmcontacts.ListPageReceiptsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPageReceiptsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ListPageReceiptsOutput)
	return ret0, ret1
}

// ListPageReceiptsRequest indicates an expected call of ListPageReceiptsRequest.
func (mr *MockSSMContactsAPIMockRecorder) ListPageReceiptsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageReceiptsRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPageReceiptsRequest), arg0)
}

// ListPageReceiptsWithContext mocks base method.
func (m *MockSSMContactsAPI) ListPageReceiptsWithContext(arg0 context.Context, arg1 *ssmcontacts.ListPageReceiptsInput, arg2 ...request.Option) (*ssmcontacts.ListPageReceiptsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPageReceiptsWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ListPageReceiptsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPageReceiptsWithContext indicates an expected call of ListPageReceiptsWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListPageReceiptsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPageReceiptsWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPageReceiptsWithContext), varargs...)
}

// ListPagesByContact mocks base method.
func (m *MockSSMContactsAPI) ListPagesByContact(arg0 *ssmcontacts.ListPagesByContactInput) (*ssmcontacts.ListPagesByContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesByContact", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ListPagesByContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagesByContact indicates an expected call of ListPagesByContact.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByContact", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByContact), arg0)
}

// ListPagesByContactPages mocks base method.
func (m *MockSSMContactsAPI) ListPagesByContactPages(arg0 *ssmcontacts.ListPagesByContactInput, arg1 func(*ssmcontacts.ListPagesByContactOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesByContactPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPagesByContactPages indicates an expected call of ListPagesByContactPages.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByContactPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByContactPages", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByContactPages), arg0, arg1)
}

// ListPagesByContactPagesWithContext mocks base method.
func (m *MockSSMContactsAPI) ListPagesByContactPagesWithContext(arg0 context.Context, arg1 *ssmcontacts.ListPagesByContactInput, arg2 func(*ssmcontacts.ListPagesByContactOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPagesByContactPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPagesByContactPagesWithContext indicates an expected call of ListPagesByContactPagesWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByContactPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByContactPagesWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByContactPagesWithContext), varargs...)
}

// ListPagesByContactRequest mocks base method.
func (m *MockSSMContactsAPI) ListPagesByContactRequest(arg0 *ssmcontacts.ListPagesByContactInput) (*request.Request, *ssmcontacts.ListPagesByContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesByContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ListPagesByContactOutput)
	return ret0, ret1
}

// ListPagesByContactRequest indicates an expected call of ListPagesByContactRequest.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByContactRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByContactRequest), arg0)
}

// ListPagesByContactWithContext mocks base method.
func (m *MockSSMContactsAPI) ListPagesByContactWithContext(arg0 context.Context, arg1 *ssmcontacts.ListPagesByContactInput, arg2 ...request.Option) (*ssmcontacts.ListPagesByContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPagesByContactWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ListPagesByContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagesByContactWithContext indicates an expected call of ListPagesByContactWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByContactWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByContactWithContext), varargs...)
}

// ListPagesByEngagement mocks base method.
func (m *MockSSMContactsAPI) ListPagesByEngagement(arg0 *ssmcontacts.ListPagesByEngagementInput) (*ssmcontacts.ListPagesByEngagementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesByEngagement", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ListPagesByEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagesByEngagement indicates an expected call of ListPagesByEngagement.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByEngagement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByEngagement", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByEngagement), arg0)
}

// ListPagesByEngagementPages mocks base method.
func (m *MockSSMContactsAPI) ListPagesByEngagementPages(arg0 *ssmcontacts.ListPagesByEngagementInput, arg1 func(*ssmcontacts.ListPagesByEngagementOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesByEngagementPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPagesByEngagementPages indicates an expected call of ListPagesByEngagementPages.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByEngagementPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByEngagementPages", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByEngagementPages), arg0, arg1)
}

// ListPagesByEngagementPagesWithContext mocks base method.
func (m *MockSSMContactsAPI) ListPagesByEngagementPagesWithContext(arg0 context.Context, arg1 *ssmcontacts.ListPagesByEngagementInput, arg2 func(*ssmcontacts.ListPagesByEngagementOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPagesByEngagementPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPagesByEngagementPagesWithContext indicates an expected call of ListPagesByEngagementPagesWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByEngagementPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByEngagementPagesWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByEngagementPagesWithContext), varargs...)
}

// ListPagesByEngagementRequest mocks base method.
func (m *MockSSMContactsAPI) ListPagesByEngagementRequest(arg0 *ssmcontacts.ListPagesByEngagementInput) (*request.Request, *ssmcontacts.ListPagesByEngagementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPagesByEngagementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ListPagesByEngagementOutput)
	return ret0, ret1
}

// ListPagesByEngagementRequest indicates an expected call of ListPagesByEngagementRequest.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByEngagementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByEngagementRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByEngagementRequest), arg0)
}

// ListPagesByEngagementWithContext mocks base method.
func (m *MockSSMContactsAPI) ListPagesByEngagementWithContext(arg0 context.Context, arg1 *ssmcontacts.ListPagesByEngagementInput, arg2 ...request.Option) (*ssmcontacts.ListPagesByEngagementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPagesByEngagementWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ListPagesByEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPagesByEngagementWithContext indicates an expected call of ListPagesByEngagementWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListPagesByEngagementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesByEngagementWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListPagesByEngagementWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSSMContactsAPI) ListTagsForResource(arg0 *ssmcontacts.ListTagsForResourceInput) (*ssmcontacts.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*ssmcontacts.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSSMContactsAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockSSMContactsAPI) ListTagsForResourceRequest(arg0 *ssmcontacts.ListTagsForResourceInput) (*request.Request, *ssmcontacts.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockSSMContactsAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockSSMContactsAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *ssmcontacts.ListTagsForResourceInput, arg2 ...request.Option) (*ssmcontacts.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockSSMContactsAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutContactPolicy mocks base method.
func (m *MockSSMContactsAPI) PutContactPolicy(arg0 *ssmcontacts.PutContactPolicyInput) (*ssmcontacts.PutContactPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContactPolicy", arg0)
	ret0, _ := ret[0].(*ssmcontacts.PutContactPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContactPolicy indicates an expected call of PutContactPolicy.
func (mr *MockSSMContactsAPIMockRecorder) PutContactPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContactPolicy", reflect.TypeOf((*MockSSMContactsAPI)(nil).PutContactPolicy), arg0)
}

// PutContactPolicyRequest mocks base method.
func (m *MockSSMContactsAPI) PutContactPolicyRequest(arg0 *ssmcontacts.PutContactPolicyInput) (*request.Request, *ssmcontacts.PutContactPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContactPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.PutContactPolicyOutput)
	return ret0, ret1
}

// PutContactPolicyRequest indicates an expected call of PutContactPolicyRequest.
func (mr *MockSSMContactsAPIMockRecorder) PutContactPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContactPolicyRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).PutContactPolicyRequest), arg0)
}

// PutContactPolicyWithContext mocks base method.
func (m *MockSSMContactsAPI) PutContactPolicyWithContext(arg0 context.Context, arg1 *ssmcontacts.PutContactPolicyInput, arg2 ...request.Option) (*ssmcontacts.PutContactPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutContactPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.PutContactPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContactPolicyWithContext indicates an expected call of PutContactPolicyWithContext.
func (mr *MockSSMContactsAPIMockRecorder) PutContactPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContactPolicyWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).PutContactPolicyWithContext), varargs...)
}

// SendActivationCode mocks base method.
func (m *MockSSMContactsAPI) SendActivationCode(arg0 *ssmcontacts.SendActivationCodeInput) (*ssmcontacts.SendActivationCodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendActivationCode", arg0)
	ret0, _ := ret[0].(*ssmcontacts.SendActivationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendActivationCode indicates an expected call of SendActivationCode.
func (mr *MockSSMContactsAPIMockRecorder) SendActivationCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendActivationCode", reflect.TypeOf((*MockSSMContactsAPI)(nil).SendActivationCode), arg0)
}

// SendActivationCodeRequest mocks base method.
func (m *MockSSMContactsAPI) SendActivationCodeRequest(arg0 *ssmcontacts.SendActivationCodeInput) (*request.Request, *ssmcontacts.SendActivationCodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendActivationCodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.SendActivationCodeOutput)
	return ret0, ret1
}

// SendActivationCodeRequest indicates an expected call of SendActivationCodeRequest.
func (mr *MockSSMContactsAPIMockRecorder) SendActivationCodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendActivationCodeRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).SendActivationCodeRequest), arg0)
}

// SendActivationCodeWithContext mocks base method.
func (m *MockSSMContactsAPI) SendActivationCodeWithContext(arg0 context.Context, arg1 *ssmcontacts.SendActivationCodeInput, arg2 ...request.Option) (*ssmcontacts.SendActivationCodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendActivationCodeWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.SendActivationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendActivationCodeWithContext indicates an expected call of SendActivationCodeWithContext.
func (mr *MockSSMContactsAPIMockRecorder) SendActivationCodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendActivationCodeWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).SendActivationCodeWithContext), varargs...)
}

// StartEngagement mocks base method.
func (m *MockSSMContactsAPI) StartEngagement(arg0 *ssmcontacts.StartEngagementInput) (*ssmcontacts.StartEngagementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEngagement", arg0)
	ret0, _ := ret[0].(*ssmcontacts.StartEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEngagement indicates an expected call of StartEngagement.
func (mr *MockSSMContactsAPIMockRecorder) StartEngagement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEngagement", reflect.TypeOf((*MockSSMContactsAPI)(nil).StartEngagement), arg0)
}

// StartEngagementRequest mocks base method.
func (m *MockSSMContactsAPI) StartEngagementRequest(arg0 *ssmcontacts.StartEngagementInput) (*request.Request, *ssmcontacts.StartEngagementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEngagementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.StartEngagementOutput)
	return ret0, ret1
}

// StartEngagementRequest indicates an expected call of StartEngagementRequest.
func (mr *MockSSMContactsAPIMockRecorder) StartEngagementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEngagementRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).StartEngagementRequest), arg0)
}

// StartEngagementWithContext mocks base method.
func (m *MockSSMContactsAPI) StartEngagementWithContext(arg0 context.Context, arg1 *ssmcontacts.StartEngagementInput, arg2 ...request.Option) (*ssmcontacts.StartEngagementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartEngagementWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.StartEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEngagementWithContext indicates an expected call of StartEngagementWithContext.
func (mr *MockSSMContactsAPIMockRecorder) StartEngagementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEngagementWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).StartEngagementWithContext), varargs...)
}

// StopEngagement mocks base method.
func (m *MockSSMContactsAPI) StopEngagement(arg0 *ssmcontacts.StopEngagementInput) (*ssmcontacts.StopEngagementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEngagement", arg0)
	ret0, _ := ret[0].(*ssmcontacts.StopEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEngagement indicates an expected call of StopEngagement.
func (mr *MockSSMContactsAPIMockRecorder) StopEngagement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEngagement", reflect.TypeOf((*MockSSMContactsAPI)(nil).StopEngagement), arg0)
}

// StopEngagementRequest mocks base method.
func (m *MockSSMContactsAPI) StopEngagementRequest(arg0 *ssmcontacts.StopEngagementInput) (*request.Request, *ssmcontacts.StopEngagementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEngagementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.StopEngagementOutput)
	return ret0, ret1
}

// StopEngagementRequest indicates an expected call of StopEngagementRequest.
func (mr *MockSSMContactsAPIMockRecorder) StopEngagementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEngagementRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).StopEngagementRequest), arg0)
}

// StopEngagementWithContext mocks base method.
func (m *MockSSMContactsAPI) StopEngagementWithContext(arg0 context.Context, arg1 *ssmcontacts.StopEngagementInput, arg2 ...request.Option) (*ssmcontacts.StopEngagementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopEngagementWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.StopEngagementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEngagementWithContext indicates an expected call of StopEngagementWithContext.
func (mr *MockSSMContactsAPIMockRecorder) StopEngagementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEngagementWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).StopEngagementWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockSSMContactsAPI) TagResource(arg0 *ssmcontacts.TagResourceInput) (*ssmcontacts.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*ssmcontacts.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockSSMContactsAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSSMContactsAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockSSMContactsAPI) TagResourceRequest(arg0 *ssmcontacts.TagResourceInput) (*request.Request, *ssmcontacts.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockSSMContactsAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockSSMContactsAPI) TagResourceWithContext(arg0 context.Context, arg1 *ssmcontacts.TagResourceInput, arg2 ...request.Option) (*ssmcontacts.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockSSMContactsAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockSSMContactsAPI) UntagResource(arg0 *ssmcontacts.UntagResourceInput) (*ssmcontacts.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*ssmcontacts.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockSSMContactsAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockSSMContactsAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockSSMContactsAPI) UntagResourceRequest(arg0 *ssmcontacts.UntagResourceInput) (*request.Request, *ssmcontacts.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockSSMContactsAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockSSMContactsAPI) UntagResourceWithContext(arg0 context.Context, arg1 *ssmcontacts.UntagResourceInput, arg2 ...request.Option) (*ssmcontacts.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockSSMContactsAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateContact mocks base method.
func (m *MockSSMContactsAPI) UpdateContact(arg0 *ssmcontacts.UpdateContactInput) (*ssmcontacts.UpdateContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0)
	ret0, _ := ret[0].(*ssmcontacts.UpdateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockSSMContactsAPIMockRecorder) UpdateContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockSSMContactsAPI)(nil).UpdateContact), arg0)
}

// UpdateContactChannel mocks base method.
func (m *MockSSMContactsAPI) UpdateContactChannel(arg0 *ssmcontacts.UpdateContactChannelInput) (*ssmcontacts.UpdateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactChannel", arg0)
	ret0, _ := ret[0].(*ssmcontacts.UpdateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactChannel indicates an expected call of UpdateContactChannel.
func (mr *MockSSMContactsAPIMockRecorder) UpdateContactChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactChannel", reflect.TypeOf((*MockSSMContactsAPI)(nil).UpdateContactChannel), arg0)
}

// UpdateContactChannelRequest mocks base method.
func (m *MockSSMContactsAPI) UpdateContactChannelRequest(arg0 *ssmcontacts.UpdateContactChannelInput) (*request.Request, *ssmcontacts.UpdateContactChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.UpdateContactChannelOutput)
	return ret0, ret1
}

// UpdateContactChannelRequest indicates an expected call of UpdateContactChannelRequest.
func (mr *MockSSMContactsAPIMockRecorder) UpdateContactChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactChannelRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).UpdateContactChannelRequest), arg0)
}

// UpdateContactChannelWithContext mocks base method.
func (m *MockSSMContactsAPI) UpdateContactChannelWithContext(arg0 context.Context, arg1 *ssmcontacts.UpdateContactChannelInput, arg2 ...request.Option) (*ssmcontacts.UpdateContactChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactChannelWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.UpdateContactChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactChannelWithContext indicates an expected call of UpdateContactChannelWithContext.
func (mr *MockSSMContactsAPIMockRecorder) UpdateContactChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactChannelWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).UpdateContactChannelWithContext), varargs...)
}

// UpdateContactRequest mocks base method.
func (m *MockSSMContactsAPI) UpdateContactRequest(arg0 *ssmcontacts.UpdateContactInput) (*request.Request, *ssmcontacts.UpdateContactOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssmcontacts.UpdateContactOutput)
	return ret0, ret1
}

// UpdateContactRequest indicates an expected call of UpdateContactRequest.
func (mr *MockSSMContactsAPIMockRecorder) UpdateContactRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactRequest", reflect.TypeOf((*MockSSMContactsAPI)(nil).UpdateContactRequest), arg0)
}

// UpdateContactWithContext mocks base method.
func (m *MockSSMContactsAPI) UpdateContactWithContext(arg0 context.Context, arg1 *ssmcontacts.UpdateContactInput, arg2 ...request.Option) (*ssmcontacts.UpdateContactOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContactWithContext", varargs...)
	ret0, _ := ret[0].(*ssmcontacts.UpdateContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactWithContext indicates an expected call of UpdateContactWithContext.
func (mr *MockSSMContactsAPIMockRecorder) UpdateContactWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactWithContext", reflect.TypeOf((*MockSSMContactsAPI)(nil).UpdateContactWithContext), varargs...)
}

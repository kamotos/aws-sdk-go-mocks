// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/detective/detectiveiface (interfaces: DetectiveAPI)

// Package detectivemock is a generated GoMock package.
package detectivemock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	detective "github.com/aws/aws-sdk-go/service/detective"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDetectiveAPI is a mock of DetectiveAPI interface
type MockDetectiveAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDetectiveAPIMockRecorder
}

// MockDetectiveAPIMockRecorder is the mock recorder for MockDetectiveAPI
type MockDetectiveAPIMockRecorder struct {
	mock *MockDetectiveAPI
}

// NewMockDetectiveAPI creates a new mock instance
func NewMockDetectiveAPI(ctrl *gomock.Controller) *MockDetectiveAPI {
	mock := &MockDetectiveAPI{ctrl: ctrl}
	mock.recorder = &MockDetectiveAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDetectiveAPI) EXPECT() *MockDetectiveAPIMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method
func (m *MockDetectiveAPI) AcceptInvitation(arg0 *detective.AcceptInvitationInput) (*detective.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", arg0)
	ret0, _ := ret[0].(*detective.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitation indicates an expected call of AcceptInvitation
func (mr *MockDetectiveAPIMockRecorder) AcceptInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockDetectiveAPI)(nil).AcceptInvitation), arg0)
}

// AcceptInvitationRequest mocks base method
func (m *MockDetectiveAPI) AcceptInvitationRequest(arg0 *detective.AcceptInvitationInput) (*request.Request, *detective.AcceptInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.AcceptInvitationOutput)
	return ret0, ret1
}

// AcceptInvitationRequest indicates an expected call of AcceptInvitationRequest
func (mr *MockDetectiveAPIMockRecorder) AcceptInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).AcceptInvitationRequest), arg0)
}

// AcceptInvitationWithContext mocks base method
func (m *MockDetectiveAPI) AcceptInvitationWithContext(arg0 context.Context, arg1 *detective.AcceptInvitationInput, arg2 ...request.Option) (*detective.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*detective.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitationWithContext indicates an expected call of AcceptInvitationWithContext
func (mr *MockDetectiveAPIMockRecorder) AcceptInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).AcceptInvitationWithContext), varargs...)
}

// CreateGraph mocks base method
func (m *MockDetectiveAPI) CreateGraph(arg0 *detective.CreateGraphInput) (*detective.CreateGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraph", arg0)
	ret0, _ := ret[0].(*detective.CreateGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGraph indicates an expected call of CreateGraph
func (mr *MockDetectiveAPIMockRecorder) CreateGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraph", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateGraph), arg0)
}

// CreateGraphRequest mocks base method
func (m *MockDetectiveAPI) CreateGraphRequest(arg0 *detective.CreateGraphInput) (*request.Request, *detective.CreateGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.CreateGraphOutput)
	return ret0, ret1
}

// CreateGraphRequest indicates an expected call of CreateGraphRequest
func (mr *MockDetectiveAPIMockRecorder) CreateGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateGraphRequest), arg0)
}

// CreateGraphWithContext mocks base method
func (m *MockDetectiveAPI) CreateGraphWithContext(arg0 context.Context, arg1 *detective.CreateGraphInput, arg2 ...request.Option) (*detective.CreateGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphWithContext", varargs...)
	ret0, _ := ret[0].(*detective.CreateGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGraphWithContext indicates an expected call of CreateGraphWithContext
func (mr *MockDetectiveAPIMockRecorder) CreateGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateGraphWithContext), varargs...)
}

// CreateMembers mocks base method
func (m *MockDetectiveAPI) CreateMembers(arg0 *detective.CreateMembersInput) (*detective.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembers", arg0)
	ret0, _ := ret[0].(*detective.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembers indicates an expected call of CreateMembers
func (mr *MockDetectiveAPIMockRecorder) CreateMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateMembers), arg0)
}

// CreateMembersRequest mocks base method
func (m *MockDetectiveAPI) CreateMembersRequest(arg0 *detective.CreateMembersInput) (*request.Request, *detective.CreateMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.CreateMembersOutput)
	return ret0, ret1
}

// CreateMembersRequest indicates an expected call of CreateMembersRequest
func (mr *MockDetectiveAPIMockRecorder) CreateMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateMembersRequest), arg0)
}

// CreateMembersWithContext mocks base method
func (m *MockDetectiveAPI) CreateMembersWithContext(arg0 context.Context, arg1 *detective.CreateMembersInput, arg2 ...request.Option) (*detective.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembersWithContext indicates an expected call of CreateMembersWithContext
func (mr *MockDetectiveAPIMockRecorder) CreateMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateMembersWithContext), varargs...)
}

// DeleteGraph mocks base method
func (m *MockDetectiveAPI) DeleteGraph(arg0 *detective.DeleteGraphInput) (*detective.DeleteGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraph", arg0)
	ret0, _ := ret[0].(*detective.DeleteGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGraph indicates an expected call of DeleteGraph
func (mr *MockDetectiveAPIMockRecorder) DeleteGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraph", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteGraph), arg0)
}

// DeleteGraphRequest mocks base method
func (m *MockDetectiveAPI) DeleteGraphRequest(arg0 *detective.DeleteGraphInput) (*request.Request, *detective.DeleteGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DeleteGraphOutput)
	return ret0, ret1
}

// DeleteGraphRequest indicates an expected call of DeleteGraphRequest
func (mr *MockDetectiveAPIMockRecorder) DeleteGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteGraphRequest), arg0)
}

// DeleteGraphWithContext mocks base method
func (m *MockDetectiveAPI) DeleteGraphWithContext(arg0 context.Context, arg1 *detective.DeleteGraphInput, arg2 ...request.Option) (*detective.DeleteGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DeleteGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGraphWithContext indicates an expected call of DeleteGraphWithContext
func (mr *MockDetectiveAPIMockRecorder) DeleteGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteGraphWithContext), varargs...)
}

// DeleteMembers mocks base method
func (m *MockDetectiveAPI) DeleteMembers(arg0 *detective.DeleteMembersInput) (*detective.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembers", arg0)
	ret0, _ := ret[0].(*detective.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembers indicates an expected call of DeleteMembers
func (mr *MockDetectiveAPIMockRecorder) DeleteMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteMembers), arg0)
}

// DeleteMembersRequest mocks base method
func (m *MockDetectiveAPI) DeleteMembersRequest(arg0 *detective.DeleteMembersInput) (*request.Request, *detective.DeleteMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DeleteMembersOutput)
	return ret0, ret1
}

// DeleteMembersRequest indicates an expected call of DeleteMembersRequest
func (mr *MockDetectiveAPIMockRecorder) DeleteMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteMembersRequest), arg0)
}

// DeleteMembersWithContext mocks base method
func (m *MockDetectiveAPI) DeleteMembersWithContext(arg0 context.Context, arg1 *detective.DeleteMembersInput, arg2 ...request.Option) (*detective.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembersWithContext indicates an expected call of DeleteMembersWithContext
func (mr *MockDetectiveAPIMockRecorder) DeleteMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteMembersWithContext), varargs...)
}

// DisassociateMembership mocks base method
func (m *MockDetectiveAPI) DisassociateMembership(arg0 *detective.DisassociateMembershipInput) (*detective.DisassociateMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembership", arg0)
	ret0, _ := ret[0].(*detective.DisassociateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembership indicates an expected call of DisassociateMembership
func (mr *MockDetectiveAPIMockRecorder) DisassociateMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembership", reflect.TypeOf((*MockDetectiveAPI)(nil).DisassociateMembership), arg0)
}

// DisassociateMembershipRequest mocks base method
func (m *MockDetectiveAPI) DisassociateMembershipRequest(arg0 *detective.DisassociateMembershipInput) (*request.Request, *detective.DisassociateMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DisassociateMembershipOutput)
	return ret0, ret1
}

// DisassociateMembershipRequest indicates an expected call of DisassociateMembershipRequest
func (mr *MockDetectiveAPIMockRecorder) DisassociateMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembershipRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DisassociateMembershipRequest), arg0)
}

// DisassociateMembershipWithContext mocks base method
func (m *MockDetectiveAPI) DisassociateMembershipWithContext(arg0 context.Context, arg1 *detective.DisassociateMembershipInput, arg2 ...request.Option) (*detective.DisassociateMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DisassociateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembershipWithContext indicates an expected call of DisassociateMembershipWithContext
func (mr *MockDetectiveAPIMockRecorder) DisassociateMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembershipWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DisassociateMembershipWithContext), varargs...)
}

// GetMembers mocks base method
func (m *MockDetectiveAPI) GetMembers(arg0 *detective.GetMembersInput) (*detective.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", arg0)
	ret0, _ := ret[0].(*detective.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers
func (mr *MockDetectiveAPIMockRecorder) GetMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).GetMembers), arg0)
}

// GetMembersRequest mocks base method
func (m *MockDetectiveAPI) GetMembersRequest(arg0 *detective.GetMembersInput) (*request.Request, *detective.GetMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.GetMembersOutput)
	return ret0, ret1
}

// GetMembersRequest indicates an expected call of GetMembersRequest
func (mr *MockDetectiveAPIMockRecorder) GetMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).GetMembersRequest), arg0)
}

// GetMembersWithContext mocks base method
func (m *MockDetectiveAPI) GetMembersWithContext(arg0 context.Context, arg1 *detective.GetMembersInput, arg2 ...request.Option) (*detective.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersWithContext indicates an expected call of GetMembersWithContext
func (mr *MockDetectiveAPIMockRecorder) GetMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).GetMembersWithContext), varargs...)
}

// ListGraphs mocks base method
func (m *MockDetectiveAPI) ListGraphs(arg0 *detective.ListGraphsInput) (*detective.ListGraphsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphs", arg0)
	ret0, _ := ret[0].(*detective.ListGraphsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphs indicates an expected call of ListGraphs
func (mr *MockDetectiveAPIMockRecorder) ListGraphs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphs", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphs), arg0)
}

// ListGraphsPages mocks base method
func (m *MockDetectiveAPI) ListGraphsPages(arg0 *detective.ListGraphsInput, arg1 func(*detective.ListGraphsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGraphsPages indicates an expected call of ListGraphsPages
func (mr *MockDetectiveAPIMockRecorder) ListGraphsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsPages", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsPages), arg0, arg1)
}

// ListGraphsPagesWithContext mocks base method
func (m *MockDetectiveAPI) ListGraphsPagesWithContext(arg0 context.Context, arg1 *detective.ListGraphsInput, arg2 func(*detective.ListGraphsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGraphsPagesWithContext indicates an expected call of ListGraphsPagesWithContext
func (mr *MockDetectiveAPIMockRecorder) ListGraphsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsPagesWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsPagesWithContext), varargs...)
}

// ListGraphsRequest mocks base method
func (m *MockDetectiveAPI) ListGraphsRequest(arg0 *detective.ListGraphsInput) (*request.Request, *detective.ListGraphsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListGraphsOutput)
	return ret0, ret1
}

// ListGraphsRequest indicates an expected call of ListGraphsRequest
func (mr *MockDetectiveAPIMockRecorder) ListGraphsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsRequest), arg0)
}

// ListGraphsWithContext mocks base method
func (m *MockDetectiveAPI) ListGraphsWithContext(arg0 context.Context, arg1 *detective.ListGraphsInput, arg2 ...request.Option) (*detective.ListGraphsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphsWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListGraphsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphsWithContext indicates an expected call of ListGraphsWithContext
func (mr *MockDetectiveAPIMockRecorder) ListGraphsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsWithContext), varargs...)
}

// ListInvitations mocks base method
func (m *MockDetectiveAPI) ListInvitations(arg0 *detective.ListInvitationsInput) (*detective.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0)
	ret0, _ := ret[0].(*detective.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations
func (mr *MockDetectiveAPIMockRecorder) ListInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitations), arg0)
}

// ListInvitationsPages mocks base method
func (m *MockDetectiveAPI) ListInvitationsPages(arg0 *detective.ListInvitationsInput, arg1 func(*detective.ListInvitationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPages indicates an expected call of ListInvitationsPages
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPages", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsPages), arg0, arg1)
}

// ListInvitationsPagesWithContext mocks base method
func (m *MockDetectiveAPI) ListInvitationsPagesWithContext(arg0 context.Context, arg1 *detective.ListInvitationsInput, arg2 func(*detective.ListInvitationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPagesWithContext indicates an expected call of ListInvitationsPagesWithContext
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPagesWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsPagesWithContext), varargs...)
}

// ListInvitationsRequest mocks base method
func (m *MockDetectiveAPI) ListInvitationsRequest(arg0 *detective.ListInvitationsInput) (*request.Request, *detective.ListInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListInvitationsOutput)
	return ret0, ret1
}

// ListInvitationsRequest indicates an expected call of ListInvitationsRequest
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsRequest), arg0)
}

// ListInvitationsWithContext mocks base method
func (m *MockDetectiveAPI) ListInvitationsWithContext(arg0 context.Context, arg1 *detective.ListInvitationsInput, arg2 ...request.Option) (*detective.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitationsWithContext indicates an expected call of ListInvitationsWithContext
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsWithContext), varargs...)
}

// ListMembers mocks base method
func (m *MockDetectiveAPI) ListMembers(arg0 *detective.ListMembersInput) (*detective.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*detective.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers
func (mr *MockDetectiveAPIMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembers), arg0)
}

// ListMembersPages mocks base method
func (m *MockDetectiveAPI) ListMembersPages(arg0 *detective.ListMembersInput, arg1 func(*detective.ListMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPages indicates an expected call of ListMembersPages
func (mr *MockDetectiveAPIMockRecorder) ListMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPages", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersPages), arg0, arg1)
}

// ListMembersPagesWithContext mocks base method
func (m *MockDetectiveAPI) ListMembersPagesWithContext(arg0 context.Context, arg1 *detective.ListMembersInput, arg2 func(*detective.ListMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPagesWithContext indicates an expected call of ListMembersPagesWithContext
func (mr *MockDetectiveAPIMockRecorder) ListMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPagesWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersPagesWithContext), varargs...)
}

// ListMembersRequest mocks base method
func (m *MockDetectiveAPI) ListMembersRequest(arg0 *detective.ListMembersInput) (*request.Request, *detective.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest
func (mr *MockDetectiveAPIMockRecorder) ListMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method
func (m *MockDetectiveAPI) ListMembersWithContext(arg0 context.Context, arg1 *detective.ListMembersInput, arg2 ...request.Option) (*detective.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext
func (mr *MockDetectiveAPIMockRecorder) ListMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersWithContext), varargs...)
}

// RejectInvitation mocks base method
func (m *MockDetectiveAPI) RejectInvitation(arg0 *detective.RejectInvitationInput) (*detective.RejectInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvitation", arg0)
	ret0, _ := ret[0].(*detective.RejectInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvitation indicates an expected call of RejectInvitation
func (mr *MockDetectiveAPIMockRecorder) RejectInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitation", reflect.TypeOf((*MockDetectiveAPI)(nil).RejectInvitation), arg0)
}

// RejectInvitationRequest mocks base method
func (m *MockDetectiveAPI) RejectInvitationRequest(arg0 *detective.RejectInvitationInput) (*request.Request, *detective.RejectInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.RejectInvitationOutput)
	return ret0, ret1
}

// RejectInvitationRequest indicates an expected call of RejectInvitationRequest
func (mr *MockDetectiveAPIMockRecorder) RejectInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitationRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).RejectInvitationRequest), arg0)
}

// RejectInvitationWithContext mocks base method
func (m *MockDetectiveAPI) RejectInvitationWithContext(arg0 context.Context, arg1 *detective.RejectInvitationInput, arg2 ...request.Option) (*detective.RejectInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*detective.RejectInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvitationWithContext indicates an expected call of RejectInvitationWithContext
func (mr *MockDetectiveAPIMockRecorder) RejectInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitationWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).RejectInvitationWithContext), varargs...)
}

// StartMonitoringMember mocks base method
func (m *MockDetectiveAPI) StartMonitoringMember(arg0 *detective.StartMonitoringMemberInput) (*detective.StartMonitoringMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMonitoringMember", arg0)
	ret0, _ := ret[0].(*detective.StartMonitoringMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMonitoringMember indicates an expected call of StartMonitoringMember
func (mr *MockDetectiveAPIMockRecorder) StartMonitoringMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringMember", reflect.TypeOf((*MockDetectiveAPI)(nil).StartMonitoringMember), arg0)
}

// StartMonitoringMemberRequest mocks base method
func (m *MockDetectiveAPI) StartMonitoringMemberRequest(arg0 *detective.StartMonitoringMemberInput) (*request.Request, *detective.StartMonitoringMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMonitoringMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.StartMonitoringMemberOutput)
	return ret0, ret1
}

// StartMonitoringMemberRequest indicates an expected call of StartMonitoringMemberRequest
func (mr *MockDetectiveAPIMockRecorder) StartMonitoringMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringMemberRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).StartMonitoringMemberRequest), arg0)
}

// StartMonitoringMemberWithContext mocks base method
func (m *MockDetectiveAPI) StartMonitoringMemberWithContext(arg0 context.Context, arg1 *detective.StartMonitoringMemberInput, arg2 ...request.Option) (*detective.StartMonitoringMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMonitoringMemberWithContext", varargs...)
	ret0, _ := ret[0].(*detective.StartMonitoringMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMonitoringMemberWithContext indicates an expected call of StartMonitoringMemberWithContext
func (mr *MockDetectiveAPIMockRecorder) StartMonitoringMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringMemberWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).StartMonitoringMemberWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/detective/detectiveiface (interfaces: DetectiveAPI)

// Package detectivemock is a generated GoMock package.
package detectivemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	detective "github.com/aws/aws-sdk-go/service/detective"
	gomock "github.com/golang/mock/gomock"
)

// MockDetectiveAPI is a mock of DetectiveAPI interface.
type MockDetectiveAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDetectiveAPIMockRecorder
}

// MockDetectiveAPIMockRecorder is the mock recorder for MockDetectiveAPI.
type MockDetectiveAPIMockRecorder struct {
	mock *MockDetectiveAPI
}

// NewMockDetectiveAPI creates a new mock instance.
func NewMockDetectiveAPI(ctrl *gomock.Controller) *MockDetectiveAPI {
	mock := &MockDetectiveAPI{ctrl: ctrl}
	mock.recorder = &MockDetectiveAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetectiveAPI) EXPECT() *MockDetectiveAPIMockRecorder {
	return m.recorder
}

// AcceptInvitation mocks base method.
func (m *MockDetectiveAPI) AcceptInvitation(arg0 *detective.AcceptInvitationInput) (*detective.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitation", arg0)
	ret0, _ := ret[0].(*detective.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitation indicates an expected call of AcceptInvitation.
func (mr *MockDetectiveAPIMockRecorder) AcceptInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitation", reflect.TypeOf((*MockDetectiveAPI)(nil).AcceptInvitation), arg0)
}

// AcceptInvitationRequest mocks base method.
func (m *MockDetectiveAPI) AcceptInvitationRequest(arg0 *detective.AcceptInvitationInput) (*request.Request, *detective.AcceptInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.AcceptInvitationOutput)
	return ret0, ret1
}

// AcceptInvitationRequest indicates an expected call of AcceptInvitationRequest.
func (mr *MockDetectiveAPIMockRecorder) AcceptInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).AcceptInvitationRequest), arg0)
}

// AcceptInvitationWithContext mocks base method.
func (m *MockDetectiveAPI) AcceptInvitationWithContext(arg0 context.Context, arg1 *detective.AcceptInvitationInput, arg2 ...request.Option) (*detective.AcceptInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*detective.AcceptInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptInvitationWithContext indicates an expected call of AcceptInvitationWithContext.
func (mr *MockDetectiveAPIMockRecorder) AcceptInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvitationWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).AcceptInvitationWithContext), varargs...)
}

// CreateGraph mocks base method.
func (m *MockDetectiveAPI) CreateGraph(arg0 *detective.CreateGraphInput) (*detective.CreateGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraph", arg0)
	ret0, _ := ret[0].(*detective.CreateGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGraph indicates an expected call of CreateGraph.
func (mr *MockDetectiveAPIMockRecorder) CreateGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraph", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateGraph), arg0)
}

// CreateGraphRequest mocks base method.
func (m *MockDetectiveAPI) CreateGraphRequest(arg0 *detective.CreateGraphInput) (*request.Request, *detective.CreateGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.CreateGraphOutput)
	return ret0, ret1
}

// CreateGraphRequest indicates an expected call of CreateGraphRequest.
func (mr *MockDetectiveAPIMockRecorder) CreateGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateGraphRequest), arg0)
}

// CreateGraphWithContext mocks base method.
func (m *MockDetectiveAPI) CreateGraphWithContext(arg0 context.Context, arg1 *detective.CreateGraphInput, arg2 ...request.Option) (*detective.CreateGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGraphWithContext", varargs...)
	ret0, _ := ret[0].(*detective.CreateGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGraphWithContext indicates an expected call of CreateGraphWithContext.
func (mr *MockDetectiveAPIMockRecorder) CreateGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateGraphWithContext), varargs...)
}

// CreateMembers mocks base method.
func (m *MockDetectiveAPI) CreateMembers(arg0 *detective.CreateMembersInput) (*detective.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembers", arg0)
	ret0, _ := ret[0].(*detective.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembers indicates an expected call of CreateMembers.
func (mr *MockDetectiveAPIMockRecorder) CreateMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateMembers), arg0)
}

// CreateMembersRequest mocks base method.
func (m *MockDetectiveAPI) CreateMembersRequest(arg0 *detective.CreateMembersInput) (*request.Request, *detective.CreateMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.CreateMembersOutput)
	return ret0, ret1
}

// CreateMembersRequest indicates an expected call of CreateMembersRequest.
func (mr *MockDetectiveAPIMockRecorder) CreateMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateMembersRequest), arg0)
}

// CreateMembersWithContext mocks base method.
func (m *MockDetectiveAPI) CreateMembersWithContext(arg0 context.Context, arg1 *detective.CreateMembersInput, arg2 ...request.Option) (*detective.CreateMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.CreateMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMembersWithContext indicates an expected call of CreateMembersWithContext.
func (mr *MockDetectiveAPIMockRecorder) CreateMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).CreateMembersWithContext), varargs...)
}

// DeleteGraph mocks base method.
func (m *MockDetectiveAPI) DeleteGraph(arg0 *detective.DeleteGraphInput) (*detective.DeleteGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraph", arg0)
	ret0, _ := ret[0].(*detective.DeleteGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGraph indicates an expected call of DeleteGraph.
func (mr *MockDetectiveAPIMockRecorder) DeleteGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraph", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteGraph), arg0)
}

// DeleteGraphRequest mocks base method.
func (m *MockDetectiveAPI) DeleteGraphRequest(arg0 *detective.DeleteGraphInput) (*request.Request, *detective.DeleteGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DeleteGraphOutput)
	return ret0, ret1
}

// DeleteGraphRequest indicates an expected call of DeleteGraphRequest.
func (mr *MockDetectiveAPIMockRecorder) DeleteGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteGraphRequest), arg0)
}

// DeleteGraphWithContext mocks base method.
func (m *MockDetectiveAPI) DeleteGraphWithContext(arg0 context.Context, arg1 *detective.DeleteGraphInput, arg2 ...request.Option) (*detective.DeleteGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGraphWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DeleteGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGraphWithContext indicates an expected call of DeleteGraphWithContext.
func (mr *MockDetectiveAPIMockRecorder) DeleteGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGraphWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteGraphWithContext), varargs...)
}

// DeleteMembers mocks base method.
func (m *MockDetectiveAPI) DeleteMembers(arg0 *detective.DeleteMembersInput) (*detective.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembers", arg0)
	ret0, _ := ret[0].(*detective.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembers indicates an expected call of DeleteMembers.
func (mr *MockDetectiveAPIMockRecorder) DeleteMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteMembers), arg0)
}

// DeleteMembersRequest mocks base method.
func (m *MockDetectiveAPI) DeleteMembersRequest(arg0 *detective.DeleteMembersInput) (*request.Request, *detective.DeleteMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DeleteMembersOutput)
	return ret0, ret1
}

// DeleteMembersRequest indicates an expected call of DeleteMembersRequest.
func (mr *MockDetectiveAPIMockRecorder) DeleteMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteMembersRequest), arg0)
}

// DeleteMembersWithContext mocks base method.
func (m *MockDetectiveAPI) DeleteMembersWithContext(arg0 context.Context, arg1 *detective.DeleteMembersInput, arg2 ...request.Option) (*detective.DeleteMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DeleteMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMembersWithContext indicates an expected call of DeleteMembersWithContext.
func (mr *MockDetectiveAPIMockRecorder) DeleteMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DeleteMembersWithContext), varargs...)
}

// DescribeOrganizationConfiguration mocks base method.
func (m *MockDetectiveAPI) DescribeOrganizationConfiguration(arg0 *detective.DescribeOrganizationConfigurationInput) (*detective.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*detective.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfiguration indicates an expected call of DescribeOrganizationConfiguration.
func (mr *MockDetectiveAPIMockRecorder) DescribeOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfiguration", reflect.TypeOf((*MockDetectiveAPI)(nil).DescribeOrganizationConfiguration), arg0)
}

// DescribeOrganizationConfigurationRequest mocks base method.
func (m *MockDetectiveAPI) DescribeOrganizationConfigurationRequest(arg0 *detective.DescribeOrganizationConfigurationInput) (*request.Request, *detective.DescribeOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DescribeOrganizationConfigurationOutput)
	return ret0, ret1
}

// DescribeOrganizationConfigurationRequest indicates an expected call of DescribeOrganizationConfigurationRequest.
func (mr *MockDetectiveAPIMockRecorder) DescribeOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DescribeOrganizationConfigurationRequest), arg0)
}

// DescribeOrganizationConfigurationWithContext mocks base method.
func (m *MockDetectiveAPI) DescribeOrganizationConfigurationWithContext(arg0 context.Context, arg1 *detective.DescribeOrganizationConfigurationInput, arg2 ...request.Option) (*detective.DescribeOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DescribeOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOrganizationConfigurationWithContext indicates an expected call of DescribeOrganizationConfigurationWithContext.
func (mr *MockDetectiveAPIMockRecorder) DescribeOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOrganizationConfigurationWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DescribeOrganizationConfigurationWithContext), varargs...)
}

// DisableOrganizationAdminAccount mocks base method.
func (m *MockDetectiveAPI) DisableOrganizationAdminAccount(arg0 *detective.DisableOrganizationAdminAccountInput) (*detective.DisableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableOrganizationAdminAccount", arg0)
	ret0, _ := ret[0].(*detective.DisableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableOrganizationAdminAccount indicates an expected call of DisableOrganizationAdminAccount.
func (mr *MockDetectiveAPIMockRecorder) DisableOrganizationAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableOrganizationAdminAccount", reflect.TypeOf((*MockDetectiveAPI)(nil).DisableOrganizationAdminAccount), arg0)
}

// DisableOrganizationAdminAccountRequest mocks base method.
func (m *MockDetectiveAPI) DisableOrganizationAdminAccountRequest(arg0 *detective.DisableOrganizationAdminAccountInput) (*request.Request, *detective.DisableOrganizationAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableOrganizationAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DisableOrganizationAdminAccountOutput)
	return ret0, ret1
}

// DisableOrganizationAdminAccountRequest indicates an expected call of DisableOrganizationAdminAccountRequest.
func (mr *MockDetectiveAPIMockRecorder) DisableOrganizationAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableOrganizationAdminAccountRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DisableOrganizationAdminAccountRequest), arg0)
}

// DisableOrganizationAdminAccountWithContext mocks base method.
func (m *MockDetectiveAPI) DisableOrganizationAdminAccountWithContext(arg0 context.Context, arg1 *detective.DisableOrganizationAdminAccountInput, arg2 ...request.Option) (*detective.DisableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableOrganizationAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DisableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableOrganizationAdminAccountWithContext indicates an expected call of DisableOrganizationAdminAccountWithContext.
func (mr *MockDetectiveAPIMockRecorder) DisableOrganizationAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableOrganizationAdminAccountWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DisableOrganizationAdminAccountWithContext), varargs...)
}

// DisassociateMembership mocks base method.
func (m *MockDetectiveAPI) DisassociateMembership(arg0 *detective.DisassociateMembershipInput) (*detective.DisassociateMembershipOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembership", arg0)
	ret0, _ := ret[0].(*detective.DisassociateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembership indicates an expected call of DisassociateMembership.
func (mr *MockDetectiveAPIMockRecorder) DisassociateMembership(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembership", reflect.TypeOf((*MockDetectiveAPI)(nil).DisassociateMembership), arg0)
}

// DisassociateMembershipRequest mocks base method.
func (m *MockDetectiveAPI) DisassociateMembershipRequest(arg0 *detective.DisassociateMembershipInput) (*request.Request, *detective.DisassociateMembershipOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateMembershipRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.DisassociateMembershipOutput)
	return ret0, ret1
}

// DisassociateMembershipRequest indicates an expected call of DisassociateMembershipRequest.
func (mr *MockDetectiveAPIMockRecorder) DisassociateMembershipRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembershipRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).DisassociateMembershipRequest), arg0)
}

// DisassociateMembershipWithContext mocks base method.
func (m *MockDetectiveAPI) DisassociateMembershipWithContext(arg0 context.Context, arg1 *detective.DisassociateMembershipInput, arg2 ...request.Option) (*detective.DisassociateMembershipOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateMembershipWithContext", varargs...)
	ret0, _ := ret[0].(*detective.DisassociateMembershipOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateMembershipWithContext indicates an expected call of DisassociateMembershipWithContext.
func (mr *MockDetectiveAPIMockRecorder) DisassociateMembershipWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateMembershipWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).DisassociateMembershipWithContext), varargs...)
}

// EnableOrganizationAdminAccount mocks base method.
func (m *MockDetectiveAPI) EnableOrganizationAdminAccount(arg0 *detective.EnableOrganizationAdminAccountInput) (*detective.EnableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableOrganizationAdminAccount", arg0)
	ret0, _ := ret[0].(*detective.EnableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableOrganizationAdminAccount indicates an expected call of EnableOrganizationAdminAccount.
func (mr *MockDetectiveAPIMockRecorder) EnableOrganizationAdminAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOrganizationAdminAccount", reflect.TypeOf((*MockDetectiveAPI)(nil).EnableOrganizationAdminAccount), arg0)
}

// EnableOrganizationAdminAccountRequest mocks base method.
func (m *MockDetectiveAPI) EnableOrganizationAdminAccountRequest(arg0 *detective.EnableOrganizationAdminAccountInput) (*request.Request, *detective.EnableOrganizationAdminAccountOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableOrganizationAdminAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.EnableOrganizationAdminAccountOutput)
	return ret0, ret1
}

// EnableOrganizationAdminAccountRequest indicates an expected call of EnableOrganizationAdminAccountRequest.
func (mr *MockDetectiveAPIMockRecorder) EnableOrganizationAdminAccountRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOrganizationAdminAccountRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).EnableOrganizationAdminAccountRequest), arg0)
}

// EnableOrganizationAdminAccountWithContext mocks base method.
func (m *MockDetectiveAPI) EnableOrganizationAdminAccountWithContext(arg0 context.Context, arg1 *detective.EnableOrganizationAdminAccountInput, arg2 ...request.Option) (*detective.EnableOrganizationAdminAccountOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableOrganizationAdminAccountWithContext", varargs...)
	ret0, _ := ret[0].(*detective.EnableOrganizationAdminAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableOrganizationAdminAccountWithContext indicates an expected call of EnableOrganizationAdminAccountWithContext.
func (mr *MockDetectiveAPIMockRecorder) EnableOrganizationAdminAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOrganizationAdminAccountWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).EnableOrganizationAdminAccountWithContext), varargs...)
}

// GetMembers mocks base method.
func (m *MockDetectiveAPI) GetMembers(arg0 *detective.GetMembersInput) (*detective.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", arg0)
	ret0, _ := ret[0].(*detective.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockDetectiveAPIMockRecorder) GetMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).GetMembers), arg0)
}

// GetMembersRequest mocks base method.
func (m *MockDetectiveAPI) GetMembersRequest(arg0 *detective.GetMembersInput) (*request.Request, *detective.GetMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.GetMembersOutput)
	return ret0, ret1
}

// GetMembersRequest indicates an expected call of GetMembersRequest.
func (mr *MockDetectiveAPIMockRecorder) GetMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).GetMembersRequest), arg0)
}

// GetMembersWithContext mocks base method.
func (m *MockDetectiveAPI) GetMembersWithContext(arg0 context.Context, arg1 *detective.GetMembersInput, arg2 ...request.Option) (*detective.GetMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.GetMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersWithContext indicates an expected call of GetMembersWithContext.
func (mr *MockDetectiveAPIMockRecorder) GetMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).GetMembersWithContext), varargs...)
}

// ListGraphs mocks base method.
func (m *MockDetectiveAPI) ListGraphs(arg0 *detective.ListGraphsInput) (*detective.ListGraphsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphs", arg0)
	ret0, _ := ret[0].(*detective.ListGraphsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphs indicates an expected call of ListGraphs.
func (mr *MockDetectiveAPIMockRecorder) ListGraphs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphs", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphs), arg0)
}

// ListGraphsPages mocks base method.
func (m *MockDetectiveAPI) ListGraphsPages(arg0 *detective.ListGraphsInput, arg1 func(*detective.ListGraphsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGraphsPages indicates an expected call of ListGraphsPages.
func (mr *MockDetectiveAPIMockRecorder) ListGraphsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsPages", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsPages), arg0, arg1)
}

// ListGraphsPagesWithContext mocks base method.
func (m *MockDetectiveAPI) ListGraphsPagesWithContext(arg0 context.Context, arg1 *detective.ListGraphsInput, arg2 func(*detective.ListGraphsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListGraphsPagesWithContext indicates an expected call of ListGraphsPagesWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListGraphsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsPagesWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsPagesWithContext), varargs...)
}

// ListGraphsRequest mocks base method.
func (m *MockDetectiveAPI) ListGraphsRequest(arg0 *detective.ListGraphsInput) (*request.Request, *detective.ListGraphsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListGraphsOutput)
	return ret0, ret1
}

// ListGraphsRequest indicates an expected call of ListGraphsRequest.
func (mr *MockDetectiveAPIMockRecorder) ListGraphsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsRequest), arg0)
}

// ListGraphsWithContext mocks base method.
func (m *MockDetectiveAPI) ListGraphsWithContext(arg0 context.Context, arg1 *detective.ListGraphsInput, arg2 ...request.Option) (*detective.ListGraphsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGraphsWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListGraphsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGraphsWithContext indicates an expected call of ListGraphsWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListGraphsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphsWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListGraphsWithContext), varargs...)
}

// ListInvitations mocks base method.
func (m *MockDetectiveAPI) ListInvitations(arg0 *detective.ListInvitationsInput) (*detective.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitations", arg0)
	ret0, _ := ret[0].(*detective.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockDetectiveAPIMockRecorder) ListInvitations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitations), arg0)
}

// ListInvitationsPages mocks base method.
func (m *MockDetectiveAPI) ListInvitationsPages(arg0 *detective.ListInvitationsInput, arg1 func(*detective.ListInvitationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPages indicates an expected call of ListInvitationsPages.
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPages", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsPages), arg0, arg1)
}

// ListInvitationsPagesWithContext mocks base method.
func (m *MockDetectiveAPI) ListInvitationsPagesWithContext(arg0 context.Context, arg1 *detective.ListInvitationsInput, arg2 func(*detective.ListInvitationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListInvitationsPagesWithContext indicates an expected call of ListInvitationsPagesWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsPagesWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsPagesWithContext), varargs...)
}

// ListInvitationsRequest mocks base method.
func (m *MockDetectiveAPI) ListInvitationsRequest(arg0 *detective.ListInvitationsInput) (*request.Request, *detective.ListInvitationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListInvitationsOutput)
	return ret0, ret1
}

// ListInvitationsRequest indicates an expected call of ListInvitationsRequest.
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsRequest), arg0)
}

// ListInvitationsWithContext mocks base method.
func (m *MockDetectiveAPI) ListInvitationsWithContext(arg0 context.Context, arg1 *detective.ListInvitationsInput, arg2 ...request.Option) (*detective.ListInvitationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitationsWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListInvitationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitationsWithContext indicates an expected call of ListInvitationsWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListInvitationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListInvitationsWithContext), varargs...)
}

// ListMembers mocks base method.
func (m *MockDetectiveAPI) ListMembers(arg0 *detective.ListMembersInput) (*detective.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", arg0)
	ret0, _ := ret[0].(*detective.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockDetectiveAPIMockRecorder) ListMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembers), arg0)
}

// ListMembersPages mocks base method.
func (m *MockDetectiveAPI) ListMembersPages(arg0 *detective.ListMembersInput, arg1 func(*detective.ListMembersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPages indicates an expected call of ListMembersPages.
func (mr *MockDetectiveAPIMockRecorder) ListMembersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPages", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersPages), arg0, arg1)
}

// ListMembersPagesWithContext mocks base method.
func (m *MockDetectiveAPI) ListMembersPagesWithContext(arg0 context.Context, arg1 *detective.ListMembersInput, arg2 func(*detective.ListMembersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMembersPagesWithContext indicates an expected call of ListMembersPagesWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListMembersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersPagesWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersPagesWithContext), varargs...)
}

// ListMembersRequest mocks base method.
func (m *MockDetectiveAPI) ListMembersRequest(arg0 *detective.ListMembersInput) (*request.Request, *detective.ListMembersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListMembersOutput)
	return ret0, ret1
}

// ListMembersRequest indicates an expected call of ListMembersRequest.
func (mr *MockDetectiveAPIMockRecorder) ListMembersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersRequest), arg0)
}

// ListMembersWithContext mocks base method.
func (m *MockDetectiveAPI) ListMembersWithContext(arg0 context.Context, arg1 *detective.ListMembersInput, arg2 ...request.Option) (*detective.ListMembersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListMembersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithContext indicates an expected call of ListMembersWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListMembersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListMembersWithContext), varargs...)
}

// ListOrganizationAdminAccounts mocks base method.
func (m *MockDetectiveAPI) ListOrganizationAdminAccounts(arg0 *detective.ListOrganizationAdminAccountsInput) (*detective.ListOrganizationAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccounts", arg0)
	ret0, _ := ret[0].(*detective.ListOrganizationAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationAdminAccounts indicates an expected call of ListOrganizationAdminAccounts.
func (mr *MockDetectiveAPIMockRecorder) ListOrganizationAdminAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccounts", reflect.TypeOf((*MockDetectiveAPI)(nil).ListOrganizationAdminAccounts), arg0)
}

// ListOrganizationAdminAccountsPages mocks base method.
func (m *MockDetectiveAPI) ListOrganizationAdminAccountsPages(arg0 *detective.ListOrganizationAdminAccountsInput, arg1 func(*detective.ListOrganizationAdminAccountsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationAdminAccountsPages indicates an expected call of ListOrganizationAdminAccountsPages.
func (mr *MockDetectiveAPIMockRecorder) ListOrganizationAdminAccountsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsPages", reflect.TypeOf((*MockDetectiveAPI)(nil).ListOrganizationAdminAccountsPages), arg0, arg1)
}

// ListOrganizationAdminAccountsPagesWithContext mocks base method.
func (m *MockDetectiveAPI) ListOrganizationAdminAccountsPagesWithContext(arg0 context.Context, arg1 *detective.ListOrganizationAdminAccountsInput, arg2 func(*detective.ListOrganizationAdminAccountsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListOrganizationAdminAccountsPagesWithContext indicates an expected call of ListOrganizationAdminAccountsPagesWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListOrganizationAdminAccountsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsPagesWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListOrganizationAdminAccountsPagesWithContext), varargs...)
}

// ListOrganizationAdminAccountsRequest mocks base method.
func (m *MockDetectiveAPI) ListOrganizationAdminAccountsRequest(arg0 *detective.ListOrganizationAdminAccountsInput) (*request.Request, *detective.ListOrganizationAdminAccountsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListOrganizationAdminAccountsOutput)
	return ret0, ret1
}

// ListOrganizationAdminAccountsRequest indicates an expected call of ListOrganizationAdminAccountsRequest.
func (mr *MockDetectiveAPIMockRecorder) ListOrganizationAdminAccountsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListOrganizationAdminAccountsRequest), arg0)
}

// ListOrganizationAdminAccountsWithContext mocks base method.
func (m *MockDetectiveAPI) ListOrganizationAdminAccountsWithContext(arg0 context.Context, arg1 *detective.ListOrganizationAdminAccountsInput, arg2 ...request.Option) (*detective.ListOrganizationAdminAccountsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizationAdminAccountsWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListOrganizationAdminAccountsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationAdminAccountsWithContext indicates an expected call of ListOrganizationAdminAccountsWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListOrganizationAdminAccountsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationAdminAccountsWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListOrganizationAdminAccountsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDetectiveAPI) ListTagsForResource(arg0 *detective.ListTagsForResourceInput) (*detective.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*detective.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDetectiveAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDetectiveAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockDetectiveAPI) ListTagsForResourceRequest(arg0 *detective.ListTagsForResourceInput) (*request.Request, *detective.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockDetectiveAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockDetectiveAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *detective.ListTagsForResourceInput, arg2 ...request.Option) (*detective.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*detective.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockDetectiveAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RejectInvitation mocks base method.
func (m *MockDetectiveAPI) RejectInvitation(arg0 *detective.RejectInvitationInput) (*detective.RejectInvitationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvitation", arg0)
	ret0, _ := ret[0].(*detective.RejectInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvitation indicates an expected call of RejectInvitation.
func (mr *MockDetectiveAPIMockRecorder) RejectInvitation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitation", reflect.TypeOf((*MockDetectiveAPI)(nil).RejectInvitation), arg0)
}

// RejectInvitationRequest mocks base method.
func (m *MockDetectiveAPI) RejectInvitationRequest(arg0 *detective.RejectInvitationInput) (*request.Request, *detective.RejectInvitationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInvitationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.RejectInvitationOutput)
	return ret0, ret1
}

// RejectInvitationRequest indicates an expected call of RejectInvitationRequest.
func (mr *MockDetectiveAPIMockRecorder) RejectInvitationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitationRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).RejectInvitationRequest), arg0)
}

// RejectInvitationWithContext mocks base method.
func (m *MockDetectiveAPI) RejectInvitationWithContext(arg0 context.Context, arg1 *detective.RejectInvitationInput, arg2 ...request.Option) (*detective.RejectInvitationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectInvitationWithContext", varargs...)
	ret0, _ := ret[0].(*detective.RejectInvitationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectInvitationWithContext indicates an expected call of RejectInvitationWithContext.
func (mr *MockDetectiveAPIMockRecorder) RejectInvitationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInvitationWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).RejectInvitationWithContext), varargs...)
}

// StartMonitoringMember mocks base method.
func (m *MockDetectiveAPI) StartMonitoringMember(arg0 *detective.StartMonitoringMemberInput) (*detective.StartMonitoringMemberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMonitoringMember", arg0)
	ret0, _ := ret[0].(*detective.StartMonitoringMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMonitoringMember indicates an expected call of StartMonitoringMember.
func (mr *MockDetectiveAPIMockRecorder) StartMonitoringMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringMember", reflect.TypeOf((*MockDetectiveAPI)(nil).StartMonitoringMember), arg0)
}

// StartMonitoringMemberRequest mocks base method.
func (m *MockDetectiveAPI) StartMonitoringMemberRequest(arg0 *detective.StartMonitoringMemberInput) (*request.Request, *detective.StartMonitoringMemberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMonitoringMemberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.StartMonitoringMemberOutput)
	return ret0, ret1
}

// StartMonitoringMemberRequest indicates an expected call of StartMonitoringMemberRequest.
func (mr *MockDetectiveAPIMockRecorder) StartMonitoringMemberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringMemberRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).StartMonitoringMemberRequest), arg0)
}

// StartMonitoringMemberWithContext mocks base method.
func (m *MockDetectiveAPI) StartMonitoringMemberWithContext(arg0 context.Context, arg1 *detective.StartMonitoringMemberInput, arg2 ...request.Option) (*detective.StartMonitoringMemberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMonitoringMemberWithContext", varargs...)
	ret0, _ := ret[0].(*detective.StartMonitoringMemberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMonitoringMemberWithContext indicates an expected call of StartMonitoringMemberWithContext.
func (mr *MockDetectiveAPIMockRecorder) StartMonitoringMemberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMonitoringMemberWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).StartMonitoringMemberWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockDetectiveAPI) TagResource(arg0 *detective.TagResourceInput) (*detective.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*detective.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockDetectiveAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDetectiveAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockDetectiveAPI) TagResourceRequest(arg0 *detective.TagResourceInput) (*request.Request, *detective.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockDetectiveAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockDetectiveAPI) TagResourceWithContext(arg0 context.Context, arg1 *detective.TagResourceInput, arg2 ...request.Option) (*detective.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*detective.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockDetectiveAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockDetectiveAPI) UntagResource(arg0 *detective.UntagResourceInput) (*detective.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*detective.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockDetectiveAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDetectiveAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockDetectiveAPI) UntagResourceRequest(arg0 *detective.UntagResourceInput) (*request.Request, *detective.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockDetectiveAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockDetectiveAPI) UntagResourceWithContext(arg0 context.Context, arg1 *detective.UntagResourceInput, arg2 ...request.Option) (*detective.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*detective.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockDetectiveAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateOrganizationConfiguration mocks base method.
func (m *MockDetectiveAPI) UpdateOrganizationConfiguration(arg0 *detective.UpdateOrganizationConfigurationInput) (*detective.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfiguration", arg0)
	ret0, _ := ret[0].(*detective.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfiguration indicates an expected call of UpdateOrganizationConfiguration.
func (mr *MockDetectiveAPIMockRecorder) UpdateOrganizationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfiguration", reflect.TypeOf((*MockDetectiveAPI)(nil).UpdateOrganizationConfiguration), arg0)
}

// UpdateOrganizationConfigurationRequest mocks base method.
func (m *MockDetectiveAPI) UpdateOrganizationConfigurationRequest(arg0 *detective.UpdateOrganizationConfigurationInput) (*request.Request, *detective.UpdateOrganizationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*detective.UpdateOrganizationConfigurationOutput)
	return ret0, ret1
}

// UpdateOrganizationConfigurationRequest indicates an expected call of UpdateOrganizationConfigurationRequest.
func (mr *MockDetectiveAPIMockRecorder) UpdateOrganizationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationRequest", reflect.TypeOf((*MockDetectiveAPI)(nil).UpdateOrganizationConfigurationRequest), arg0)
}

// UpdateOrganizationConfigurationWithContext mocks base method.
func (m *MockDetectiveAPI) UpdateOrganizationConfigurationWithContext(arg0 context.Context, arg1 *detective.UpdateOrganizationConfigurationInput, arg2 ...request.Option) (*detective.UpdateOrganizationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*detective.UpdateOrganizationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationConfigurationWithContext indicates an expected call of UpdateOrganizationConfigurationWithContext.
func (mr *MockDetectiveAPIMockRecorder) UpdateOrganizationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationConfigurationWithContext", reflect.TypeOf((*MockDetectiveAPI)(nil).UpdateOrganizationConfigurationWithContext), varargs...)
}

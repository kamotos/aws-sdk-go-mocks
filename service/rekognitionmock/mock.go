// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/rekognition/rekognitioniface (interfaces: RekognitionAPI)

// Package rekognitionmock is a generated GoMock package.
package rekognitionmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	rekognition "github.com/aws/aws-sdk-go/service/rekognition"
	gomock "github.com/golang/mock/gomock"
)

// MockRekognitionAPI is a mock of RekognitionAPI interface.
type MockRekognitionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRekognitionAPIMockRecorder
}

// MockRekognitionAPIMockRecorder is the mock recorder for MockRekognitionAPI.
type MockRekognitionAPIMockRecorder struct {
	mock *MockRekognitionAPI
}

// NewMockRekognitionAPI creates a new mock instance.
func NewMockRekognitionAPI(ctrl *gomock.Controller) *MockRekognitionAPI {
	mock := &MockRekognitionAPI{ctrl: ctrl}
	mock.recorder = &MockRekognitionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRekognitionAPI) EXPECT() *MockRekognitionAPIMockRecorder {
	return m.recorder
}

// CompareFaces mocks base method.
func (m *MockRekognitionAPI) CompareFaces(arg0 *rekognition.CompareFacesInput) (*rekognition.CompareFacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareFaces", arg0)
	ret0, _ := ret[0].(*rekognition.CompareFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareFaces indicates an expected call of CompareFaces.
func (mr *MockRekognitionAPIMockRecorder) CompareFaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareFaces", reflect.TypeOf((*MockRekognitionAPI)(nil).CompareFaces), arg0)
}

// CompareFacesRequest mocks base method.
func (m *MockRekognitionAPI) CompareFacesRequest(arg0 *rekognition.CompareFacesInput) (*request.Request, *rekognition.CompareFacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareFacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.CompareFacesOutput)
	return ret0, ret1
}

// CompareFacesRequest indicates an expected call of CompareFacesRequest.
func (mr *MockRekognitionAPIMockRecorder) CompareFacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareFacesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).CompareFacesRequest), arg0)
}

// CompareFacesWithContext mocks base method.
func (m *MockRekognitionAPI) CompareFacesWithContext(arg0 context.Context, arg1 *rekognition.CompareFacesInput, arg2 ...request.Option) (*rekognition.CompareFacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompareFacesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.CompareFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareFacesWithContext indicates an expected call of CompareFacesWithContext.
func (mr *MockRekognitionAPIMockRecorder) CompareFacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareFacesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).CompareFacesWithContext), varargs...)
}

// CreateCollection mocks base method.
func (m *MockRekognitionAPI) CreateCollection(arg0 *rekognition.CreateCollectionInput) (*rekognition.CreateCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", arg0)
	ret0, _ := ret[0].(*rekognition.CreateCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockRekognitionAPIMockRecorder) CreateCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateCollection), arg0)
}

// CreateCollectionRequest mocks base method.
func (m *MockRekognitionAPI) CreateCollectionRequest(arg0 *rekognition.CreateCollectionInput) (*request.Request, *rekognition.CreateCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.CreateCollectionOutput)
	return ret0, ret1
}

// CreateCollectionRequest indicates an expected call of CreateCollectionRequest.
func (mr *MockRekognitionAPIMockRecorder) CreateCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateCollectionRequest), arg0)
}

// CreateCollectionWithContext mocks base method.
func (m *MockRekognitionAPI) CreateCollectionWithContext(arg0 context.Context, arg1 *rekognition.CreateCollectionInput, arg2 ...request.Option) (*rekognition.CreateCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.CreateCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithContext indicates an expected call of CreateCollectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) CreateCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateCollectionWithContext), varargs...)
}

// CreateDataset mocks base method.
func (m *MockRekognitionAPI) CreateDataset(arg0 *rekognition.CreateDatasetInput) (*rekognition.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0)
	ret0, _ := ret[0].(*rekognition.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockRekognitionAPIMockRecorder) CreateDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateDataset), arg0)
}

// CreateDatasetRequest mocks base method.
func (m *MockRekognitionAPI) CreateDatasetRequest(arg0 *rekognition.CreateDatasetInput) (*request.Request, *rekognition.CreateDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.CreateDatasetOutput)
	return ret0, ret1
}

// CreateDatasetRequest indicates an expected call of CreateDatasetRequest.
func (mr *MockRekognitionAPIMockRecorder) CreateDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateDatasetRequest), arg0)
}

// CreateDatasetWithContext mocks base method.
func (m *MockRekognitionAPI) CreateDatasetWithContext(arg0 context.Context, arg1 *rekognition.CreateDatasetInput, arg2 ...request.Option) (*rekognition.CreateDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.CreateDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetWithContext indicates an expected call of CreateDatasetWithContext.
func (mr *MockRekognitionAPIMockRecorder) CreateDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateDatasetWithContext), varargs...)
}

// CreateProject mocks base method.
func (m *MockRekognitionAPI) CreateProject(arg0 *rekognition.CreateProjectInput) (*rekognition.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0)
	ret0, _ := ret[0].(*rekognition.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockRekognitionAPIMockRecorder) CreateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateProject), arg0)
}

// CreateProjectRequest mocks base method.
func (m *MockRekognitionAPI) CreateProjectRequest(arg0 *rekognition.CreateProjectInput) (*request.Request, *rekognition.CreateProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.CreateProjectOutput)
	return ret0, ret1
}

// CreateProjectRequest indicates an expected call of CreateProjectRequest.
func (mr *MockRekognitionAPIMockRecorder) CreateProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateProjectRequest), arg0)
}

// CreateProjectVersion mocks base method.
func (m *MockRekognitionAPI) CreateProjectVersion(arg0 *rekognition.CreateProjectVersionInput) (*rekognition.CreateProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectVersion", arg0)
	ret0, _ := ret[0].(*rekognition.CreateProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectVersion indicates an expected call of CreateProjectVersion.
func (mr *MockRekognitionAPIMockRecorder) CreateProjectVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectVersion", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateProjectVersion), arg0)
}

// CreateProjectVersionRequest mocks base method.
func (m *MockRekognitionAPI) CreateProjectVersionRequest(arg0 *rekognition.CreateProjectVersionInput) (*request.Request, *rekognition.CreateProjectVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.CreateProjectVersionOutput)
	return ret0, ret1
}

// CreateProjectVersionRequest indicates an expected call of CreateProjectVersionRequest.
func (mr *MockRekognitionAPIMockRecorder) CreateProjectVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectVersionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateProjectVersionRequest), arg0)
}

// CreateProjectVersionWithContext mocks base method.
func (m *MockRekognitionAPI) CreateProjectVersionWithContext(arg0 context.Context, arg1 *rekognition.CreateProjectVersionInput, arg2 ...request.Option) (*rekognition.CreateProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectVersionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.CreateProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectVersionWithContext indicates an expected call of CreateProjectVersionWithContext.
func (mr *MockRekognitionAPIMockRecorder) CreateProjectVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectVersionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateProjectVersionWithContext), varargs...)
}

// CreateProjectWithContext mocks base method.
func (m *MockRekognitionAPI) CreateProjectWithContext(arg0 context.Context, arg1 *rekognition.CreateProjectInput, arg2 ...request.Option) (*rekognition.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectWithContext indicates an expected call of CreateProjectWithContext.
func (mr *MockRekognitionAPIMockRecorder) CreateProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateProjectWithContext), varargs...)
}

// CreateStreamProcessor mocks base method.
func (m *MockRekognitionAPI) CreateStreamProcessor(arg0 *rekognition.CreateStreamProcessorInput) (*rekognition.CreateStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamProcessor", arg0)
	ret0, _ := ret[0].(*rekognition.CreateStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamProcessor indicates an expected call of CreateStreamProcessor.
func (mr *MockRekognitionAPIMockRecorder) CreateStreamProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamProcessor", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateStreamProcessor), arg0)
}

// CreateStreamProcessorRequest mocks base method.
func (m *MockRekognitionAPI) CreateStreamProcessorRequest(arg0 *rekognition.CreateStreamProcessorInput) (*request.Request, *rekognition.CreateStreamProcessorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamProcessorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.CreateStreamProcessorOutput)
	return ret0, ret1
}

// CreateStreamProcessorRequest indicates an expected call of CreateStreamProcessorRequest.
func (mr *MockRekognitionAPIMockRecorder) CreateStreamProcessorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamProcessorRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateStreamProcessorRequest), arg0)
}

// CreateStreamProcessorWithContext mocks base method.
func (m *MockRekognitionAPI) CreateStreamProcessorWithContext(arg0 context.Context, arg1 *rekognition.CreateStreamProcessorInput, arg2 ...request.Option) (*rekognition.CreateStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamProcessorWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.CreateStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamProcessorWithContext indicates an expected call of CreateStreamProcessorWithContext.
func (mr *MockRekognitionAPIMockRecorder) CreateStreamProcessorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamProcessorWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).CreateStreamProcessorWithContext), varargs...)
}

// DeleteCollection mocks base method.
func (m *MockRekognitionAPI) DeleteCollection(arg0 *rekognition.DeleteCollectionInput) (*rekognition.DeleteCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0)
	ret0, _ := ret[0].(*rekognition.DeleteCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockRekognitionAPIMockRecorder) DeleteCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteCollection), arg0)
}

// DeleteCollectionRequest mocks base method.
func (m *MockRekognitionAPI) DeleteCollectionRequest(arg0 *rekognition.DeleteCollectionInput) (*request.Request, *rekognition.DeleteCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DeleteCollectionOutput)
	return ret0, ret1
}

// DeleteCollectionRequest indicates an expected call of DeleteCollectionRequest.
func (mr *MockRekognitionAPIMockRecorder) DeleteCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteCollectionRequest), arg0)
}

// DeleteCollectionWithContext mocks base method.
func (m *MockRekognitionAPI) DeleteCollectionWithContext(arg0 context.Context, arg1 *rekognition.DeleteCollectionInput, arg2 ...request.Option) (*rekognition.DeleteCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DeleteCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollectionWithContext indicates an expected call of DeleteCollectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) DeleteCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteCollectionWithContext), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockRekognitionAPI) DeleteDataset(arg0 *rekognition.DeleteDatasetInput) (*rekognition.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0)
	ret0, _ := ret[0].(*rekognition.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockRekognitionAPIMockRecorder) DeleteDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteDataset), arg0)
}

// DeleteDatasetRequest mocks base method.
func (m *MockRekognitionAPI) DeleteDatasetRequest(arg0 *rekognition.DeleteDatasetInput) (*request.Request, *rekognition.DeleteDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DeleteDatasetOutput)
	return ret0, ret1
}

// DeleteDatasetRequest indicates an expected call of DeleteDatasetRequest.
func (mr *MockRekognitionAPIMockRecorder) DeleteDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteDatasetRequest), arg0)
}

// DeleteDatasetWithContext mocks base method.
func (m *MockRekognitionAPI) DeleteDatasetWithContext(arg0 context.Context, arg1 *rekognition.DeleteDatasetInput, arg2 ...request.Option) (*rekognition.DeleteDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DeleteDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetWithContext indicates an expected call of DeleteDatasetWithContext.
func (mr *MockRekognitionAPIMockRecorder) DeleteDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteDatasetWithContext), varargs...)
}

// DeleteFaces mocks base method.
func (m *MockRekognitionAPI) DeleteFaces(arg0 *rekognition.DeleteFacesInput) (*rekognition.DeleteFacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFaces", arg0)
	ret0, _ := ret[0].(*rekognition.DeleteFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFaces indicates an expected call of DeleteFaces.
func (mr *MockRekognitionAPIMockRecorder) DeleteFaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFaces", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteFaces), arg0)
}

// DeleteFacesRequest mocks base method.
func (m *MockRekognitionAPI) DeleteFacesRequest(arg0 *rekognition.DeleteFacesInput) (*request.Request, *rekognition.DeleteFacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DeleteFacesOutput)
	return ret0, ret1
}

// DeleteFacesRequest indicates an expected call of DeleteFacesRequest.
func (mr *MockRekognitionAPIMockRecorder) DeleteFacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteFacesRequest), arg0)
}

// DeleteFacesWithContext mocks base method.
func (m *MockRekognitionAPI) DeleteFacesWithContext(arg0 context.Context, arg1 *rekognition.DeleteFacesInput, arg2 ...request.Option) (*rekognition.DeleteFacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFacesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DeleteFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFacesWithContext indicates an expected call of DeleteFacesWithContext.
func (mr *MockRekognitionAPIMockRecorder) DeleteFacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteFacesWithContext), varargs...)
}

// DeleteProject mocks base method.
func (m *MockRekognitionAPI) DeleteProject(arg0 *rekognition.DeleteProjectInput) (*rekognition.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(*rekognition.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockRekognitionAPIMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteProject), arg0)
}

// DeleteProjectRequest mocks base method.
func (m *MockRekognitionAPI) DeleteProjectRequest(arg0 *rekognition.DeleteProjectInput) (*request.Request, *rekognition.DeleteProjectOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DeleteProjectOutput)
	return ret0, ret1
}

// DeleteProjectRequest indicates an expected call of DeleteProjectRequest.
func (mr *MockRekognitionAPIMockRecorder) DeleteProjectRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteProjectRequest), arg0)
}

// DeleteProjectVersion mocks base method.
func (m *MockRekognitionAPI) DeleteProjectVersion(arg0 *rekognition.DeleteProjectVersionInput) (*rekognition.DeleteProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectVersion", arg0)
	ret0, _ := ret[0].(*rekognition.DeleteProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectVersion indicates an expected call of DeleteProjectVersion.
func (mr *MockRekognitionAPIMockRecorder) DeleteProjectVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectVersion", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteProjectVersion), arg0)
}

// DeleteProjectVersionRequest mocks base method.
func (m *MockRekognitionAPI) DeleteProjectVersionRequest(arg0 *rekognition.DeleteProjectVersionInput) (*request.Request, *rekognition.DeleteProjectVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DeleteProjectVersionOutput)
	return ret0, ret1
}

// DeleteProjectVersionRequest indicates an expected call of DeleteProjectVersionRequest.
func (mr *MockRekognitionAPIMockRecorder) DeleteProjectVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectVersionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteProjectVersionRequest), arg0)
}

// DeleteProjectVersionWithContext mocks base method.
func (m *MockRekognitionAPI) DeleteProjectVersionWithContext(arg0 context.Context, arg1 *rekognition.DeleteProjectVersionInput, arg2 ...request.Option) (*rekognition.DeleteProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectVersionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DeleteProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectVersionWithContext indicates an expected call of DeleteProjectVersionWithContext.
func (mr *MockRekognitionAPIMockRecorder) DeleteProjectVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectVersionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteProjectVersionWithContext), varargs...)
}

// DeleteProjectWithContext mocks base method.
func (m *MockRekognitionAPI) DeleteProjectWithContext(arg0 context.Context, arg1 *rekognition.DeleteProjectInput, arg2 ...request.Option) (*rekognition.DeleteProjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DeleteProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectWithContext indicates an expected call of DeleteProjectWithContext.
func (mr *MockRekognitionAPIMockRecorder) DeleteProjectWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteProjectWithContext), varargs...)
}

// DeleteStreamProcessor mocks base method.
func (m *MockRekognitionAPI) DeleteStreamProcessor(arg0 *rekognition.DeleteStreamProcessorInput) (*rekognition.DeleteStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamProcessor", arg0)
	ret0, _ := ret[0].(*rekognition.DeleteStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamProcessor indicates an expected call of DeleteStreamProcessor.
func (mr *MockRekognitionAPIMockRecorder) DeleteStreamProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamProcessor", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteStreamProcessor), arg0)
}

// DeleteStreamProcessorRequest mocks base method.
func (m *MockRekognitionAPI) DeleteStreamProcessorRequest(arg0 *rekognition.DeleteStreamProcessorInput) (*request.Request, *rekognition.DeleteStreamProcessorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStreamProcessorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DeleteStreamProcessorOutput)
	return ret0, ret1
}

// DeleteStreamProcessorRequest indicates an expected call of DeleteStreamProcessorRequest.
func (mr *MockRekognitionAPIMockRecorder) DeleteStreamProcessorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamProcessorRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteStreamProcessorRequest), arg0)
}

// DeleteStreamProcessorWithContext mocks base method.
func (m *MockRekognitionAPI) DeleteStreamProcessorWithContext(arg0 context.Context, arg1 *rekognition.DeleteStreamProcessorInput, arg2 ...request.Option) (*rekognition.DeleteStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStreamProcessorWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DeleteStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStreamProcessorWithContext indicates an expected call of DeleteStreamProcessorWithContext.
func (mr *MockRekognitionAPIMockRecorder) DeleteStreamProcessorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStreamProcessorWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DeleteStreamProcessorWithContext), varargs...)
}

// DescribeCollection mocks base method.
func (m *MockRekognitionAPI) DescribeCollection(arg0 *rekognition.DescribeCollectionInput) (*rekognition.DescribeCollectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCollection", arg0)
	ret0, _ := ret[0].(*rekognition.DescribeCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCollection indicates an expected call of DescribeCollection.
func (mr *MockRekognitionAPIMockRecorder) DescribeCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCollection", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeCollection), arg0)
}

// DescribeCollectionRequest mocks base method.
func (m *MockRekognitionAPI) DescribeCollectionRequest(arg0 *rekognition.DescribeCollectionInput) (*request.Request, *rekognition.DescribeCollectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCollectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DescribeCollectionOutput)
	return ret0, ret1
}

// DescribeCollectionRequest indicates an expected call of DescribeCollectionRequest.
func (mr *MockRekognitionAPIMockRecorder) DescribeCollectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCollectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeCollectionRequest), arg0)
}

// DescribeCollectionWithContext mocks base method.
func (m *MockRekognitionAPI) DescribeCollectionWithContext(arg0 context.Context, arg1 *rekognition.DescribeCollectionInput, arg2 ...request.Option) (*rekognition.DescribeCollectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCollectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DescribeCollectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCollectionWithContext indicates an expected call of DescribeCollectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) DescribeCollectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCollectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeCollectionWithContext), varargs...)
}

// DescribeDataset mocks base method.
func (m *MockRekognitionAPI) DescribeDataset(arg0 *rekognition.DescribeDatasetInput) (*rekognition.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDataset", arg0)
	ret0, _ := ret[0].(*rekognition.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDataset indicates an expected call of DescribeDataset.
func (mr *MockRekognitionAPIMockRecorder) DescribeDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDataset", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeDataset), arg0)
}

// DescribeDatasetRequest mocks base method.
func (m *MockRekognitionAPI) DescribeDatasetRequest(arg0 *rekognition.DescribeDatasetInput) (*request.Request, *rekognition.DescribeDatasetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeDatasetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DescribeDatasetOutput)
	return ret0, ret1
}

// DescribeDatasetRequest indicates an expected call of DescribeDatasetRequest.
func (mr *MockRekognitionAPIMockRecorder) DescribeDatasetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeDatasetRequest), arg0)
}

// DescribeDatasetWithContext mocks base method.
func (m *MockRekognitionAPI) DescribeDatasetWithContext(arg0 context.Context, arg1 *rekognition.DescribeDatasetInput, arg2 ...request.Option) (*rekognition.DescribeDatasetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeDatasetWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DescribeDatasetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDatasetWithContext indicates an expected call of DescribeDatasetWithContext.
func (mr *MockRekognitionAPIMockRecorder) DescribeDatasetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDatasetWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeDatasetWithContext), varargs...)
}

// DescribeProjectVersions mocks base method.
func (m *MockRekognitionAPI) DescribeProjectVersions(arg0 *rekognition.DescribeProjectVersionsInput) (*rekognition.DescribeProjectVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjectVersions", arg0)
	ret0, _ := ret[0].(*rekognition.DescribeProjectVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProjectVersions indicates an expected call of DescribeProjectVersions.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectVersions", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectVersions), arg0)
}

// DescribeProjectVersionsPages mocks base method.
func (m *MockRekognitionAPI) DescribeProjectVersionsPages(arg0 *rekognition.DescribeProjectVersionsInput, arg1 func(*rekognition.DescribeProjectVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjectVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProjectVersionsPages indicates an expected call of DescribeProjectVersionsPages.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectVersionsPages", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectVersionsPages), arg0, arg1)
}

// DescribeProjectVersionsPagesWithContext mocks base method.
func (m *MockRekognitionAPI) DescribeProjectVersionsPagesWithContext(arg0 context.Context, arg1 *rekognition.DescribeProjectVersionsInput, arg2 func(*rekognition.DescribeProjectVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProjectVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProjectVersionsPagesWithContext indicates an expected call of DescribeProjectVersionsPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectVersionsPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectVersionsPagesWithContext), varargs...)
}

// DescribeProjectVersionsRequest mocks base method.
func (m *MockRekognitionAPI) DescribeProjectVersionsRequest(arg0 *rekognition.DescribeProjectVersionsInput) (*request.Request, *rekognition.DescribeProjectVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjectVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DescribeProjectVersionsOutput)
	return ret0, ret1
}

// DescribeProjectVersionsRequest indicates an expected call of DescribeProjectVersionsRequest.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectVersionsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectVersionsRequest), arg0)
}

// DescribeProjectVersionsWithContext mocks base method.
func (m *MockRekognitionAPI) DescribeProjectVersionsWithContext(arg0 context.Context, arg1 *rekognition.DescribeProjectVersionsInput, arg2 ...request.Option) (*rekognition.DescribeProjectVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProjectVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DescribeProjectVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProjectVersionsWithContext indicates an expected call of DescribeProjectVersionsWithContext.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectVersionsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectVersionsWithContext), varargs...)
}

// DescribeProjects mocks base method.
func (m *MockRekognitionAPI) DescribeProjects(arg0 *rekognition.DescribeProjectsInput) (*rekognition.DescribeProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjects", arg0)
	ret0, _ := ret[0].(*rekognition.DescribeProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProjects indicates an expected call of DescribeProjects.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjects", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjects), arg0)
}

// DescribeProjectsPages mocks base method.
func (m *MockRekognitionAPI) DescribeProjectsPages(arg0 *rekognition.DescribeProjectsInput, arg1 func(*rekognition.DescribeProjectsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjectsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProjectsPages indicates an expected call of DescribeProjectsPages.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectsPages", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectsPages), arg0, arg1)
}

// DescribeProjectsPagesWithContext mocks base method.
func (m *MockRekognitionAPI) DescribeProjectsPagesWithContext(arg0 context.Context, arg1 *rekognition.DescribeProjectsInput, arg2 func(*rekognition.DescribeProjectsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProjectsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProjectsPagesWithContext indicates an expected call of DescribeProjectsPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectsPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectsPagesWithContext), varargs...)
}

// DescribeProjectsRequest mocks base method.
func (m *MockRekognitionAPI) DescribeProjectsRequest(arg0 *rekognition.DescribeProjectsInput) (*request.Request, *rekognition.DescribeProjectsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProjectsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DescribeProjectsOutput)
	return ret0, ret1
}

// DescribeProjectsRequest indicates an expected call of DescribeProjectsRequest.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectsRequest), arg0)
}

// DescribeProjectsWithContext mocks base method.
func (m *MockRekognitionAPI) DescribeProjectsWithContext(arg0 context.Context, arg1 *rekognition.DescribeProjectsInput, arg2 ...request.Option) (*rekognition.DescribeProjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProjectsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DescribeProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProjectsWithContext indicates an expected call of DescribeProjectsWithContext.
func (mr *MockRekognitionAPIMockRecorder) DescribeProjectsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProjectsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeProjectsWithContext), varargs...)
}

// DescribeStreamProcessor mocks base method.
func (m *MockRekognitionAPI) DescribeStreamProcessor(arg0 *rekognition.DescribeStreamProcessorInput) (*rekognition.DescribeStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStreamProcessor", arg0)
	ret0, _ := ret[0].(*rekognition.DescribeStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStreamProcessor indicates an expected call of DescribeStreamProcessor.
func (mr *MockRekognitionAPIMockRecorder) DescribeStreamProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStreamProcessor", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeStreamProcessor), arg0)
}

// DescribeStreamProcessorRequest mocks base method.
func (m *MockRekognitionAPI) DescribeStreamProcessorRequest(arg0 *rekognition.DescribeStreamProcessorInput) (*request.Request, *rekognition.DescribeStreamProcessorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStreamProcessorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DescribeStreamProcessorOutput)
	return ret0, ret1
}

// DescribeStreamProcessorRequest indicates an expected call of DescribeStreamProcessorRequest.
func (mr *MockRekognitionAPIMockRecorder) DescribeStreamProcessorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStreamProcessorRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeStreamProcessorRequest), arg0)
}

// DescribeStreamProcessorWithContext mocks base method.
func (m *MockRekognitionAPI) DescribeStreamProcessorWithContext(arg0 context.Context, arg1 *rekognition.DescribeStreamProcessorInput, arg2 ...request.Option) (*rekognition.DescribeStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStreamProcessorWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DescribeStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStreamProcessorWithContext indicates an expected call of DescribeStreamProcessorWithContext.
func (mr *MockRekognitionAPIMockRecorder) DescribeStreamProcessorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStreamProcessorWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DescribeStreamProcessorWithContext), varargs...)
}

// DetectCustomLabels mocks base method.
func (m *MockRekognitionAPI) DetectCustomLabels(arg0 *rekognition.DetectCustomLabelsInput) (*rekognition.DetectCustomLabelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCustomLabels", arg0)
	ret0, _ := ret[0].(*rekognition.DetectCustomLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCustomLabels indicates an expected call of DetectCustomLabels.
func (mr *MockRekognitionAPIMockRecorder) DetectCustomLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCustomLabels", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectCustomLabels), arg0)
}

// DetectCustomLabelsRequest mocks base method.
func (m *MockRekognitionAPI) DetectCustomLabelsRequest(arg0 *rekognition.DetectCustomLabelsInput) (*request.Request, *rekognition.DetectCustomLabelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCustomLabelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DetectCustomLabelsOutput)
	return ret0, ret1
}

// DetectCustomLabelsRequest indicates an expected call of DetectCustomLabelsRequest.
func (mr *MockRekognitionAPIMockRecorder) DetectCustomLabelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCustomLabelsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectCustomLabelsRequest), arg0)
}

// DetectCustomLabelsWithContext mocks base method.
func (m *MockRekognitionAPI) DetectCustomLabelsWithContext(arg0 context.Context, arg1 *rekognition.DetectCustomLabelsInput, arg2 ...request.Option) (*rekognition.DetectCustomLabelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectCustomLabelsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DetectCustomLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCustomLabelsWithContext indicates an expected call of DetectCustomLabelsWithContext.
func (mr *MockRekognitionAPIMockRecorder) DetectCustomLabelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCustomLabelsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectCustomLabelsWithContext), varargs...)
}

// DetectFaces mocks base method.
func (m *MockRekognitionAPI) DetectFaces(arg0 *rekognition.DetectFacesInput) (*rekognition.DetectFacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectFaces", arg0)
	ret0, _ := ret[0].(*rekognition.DetectFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectFaces indicates an expected call of DetectFaces.
func (mr *MockRekognitionAPIMockRecorder) DetectFaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectFaces", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectFaces), arg0)
}

// DetectFacesRequest mocks base method.
func (m *MockRekognitionAPI) DetectFacesRequest(arg0 *rekognition.DetectFacesInput) (*request.Request, *rekognition.DetectFacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectFacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DetectFacesOutput)
	return ret0, ret1
}

// DetectFacesRequest indicates an expected call of DetectFacesRequest.
func (mr *MockRekognitionAPIMockRecorder) DetectFacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectFacesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectFacesRequest), arg0)
}

// DetectFacesWithContext mocks base method.
func (m *MockRekognitionAPI) DetectFacesWithContext(arg0 context.Context, arg1 *rekognition.DetectFacesInput, arg2 ...request.Option) (*rekognition.DetectFacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectFacesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DetectFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectFacesWithContext indicates an expected call of DetectFacesWithContext.
func (mr *MockRekognitionAPIMockRecorder) DetectFacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectFacesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectFacesWithContext), varargs...)
}

// DetectLabels mocks base method.
func (m *MockRekognitionAPI) DetectLabels(arg0 *rekognition.DetectLabelsInput) (*rekognition.DetectLabelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectLabels", arg0)
	ret0, _ := ret[0].(*rekognition.DetectLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectLabels indicates an expected call of DetectLabels.
func (mr *MockRekognitionAPIMockRecorder) DetectLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectLabels", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectLabels), arg0)
}

// DetectLabelsRequest mocks base method.
func (m *MockRekognitionAPI) DetectLabelsRequest(arg0 *rekognition.DetectLabelsInput) (*request.Request, *rekognition.DetectLabelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectLabelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DetectLabelsOutput)
	return ret0, ret1
}

// DetectLabelsRequest indicates an expected call of DetectLabelsRequest.
func (mr *MockRekognitionAPIMockRecorder) DetectLabelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectLabelsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectLabelsRequest), arg0)
}

// DetectLabelsWithContext mocks base method.
func (m *MockRekognitionAPI) DetectLabelsWithContext(arg0 context.Context, arg1 *rekognition.DetectLabelsInput, arg2 ...request.Option) (*rekognition.DetectLabelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectLabelsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DetectLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectLabelsWithContext indicates an expected call of DetectLabelsWithContext.
func (mr *MockRekognitionAPIMockRecorder) DetectLabelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectLabelsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectLabelsWithContext), varargs...)
}

// DetectModerationLabels mocks base method.
func (m *MockRekognitionAPI) DetectModerationLabels(arg0 *rekognition.DetectModerationLabelsInput) (*rekognition.DetectModerationLabelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectModerationLabels", arg0)
	ret0, _ := ret[0].(*rekognition.DetectModerationLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectModerationLabels indicates an expected call of DetectModerationLabels.
func (mr *MockRekognitionAPIMockRecorder) DetectModerationLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectModerationLabels", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectModerationLabels), arg0)
}

// DetectModerationLabelsRequest mocks base method.
func (m *MockRekognitionAPI) DetectModerationLabelsRequest(arg0 *rekognition.DetectModerationLabelsInput) (*request.Request, *rekognition.DetectModerationLabelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectModerationLabelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DetectModerationLabelsOutput)
	return ret0, ret1
}

// DetectModerationLabelsRequest indicates an expected call of DetectModerationLabelsRequest.
func (mr *MockRekognitionAPIMockRecorder) DetectModerationLabelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectModerationLabelsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectModerationLabelsRequest), arg0)
}

// DetectModerationLabelsWithContext mocks base method.
func (m *MockRekognitionAPI) DetectModerationLabelsWithContext(arg0 context.Context, arg1 *rekognition.DetectModerationLabelsInput, arg2 ...request.Option) (*rekognition.DetectModerationLabelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectModerationLabelsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DetectModerationLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectModerationLabelsWithContext indicates an expected call of DetectModerationLabelsWithContext.
func (mr *MockRekognitionAPIMockRecorder) DetectModerationLabelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectModerationLabelsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectModerationLabelsWithContext), varargs...)
}

// DetectProtectiveEquipment mocks base method.
func (m *MockRekognitionAPI) DetectProtectiveEquipment(arg0 *rekognition.DetectProtectiveEquipmentInput) (*rekognition.DetectProtectiveEquipmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectProtectiveEquipment", arg0)
	ret0, _ := ret[0].(*rekognition.DetectProtectiveEquipmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectProtectiveEquipment indicates an expected call of DetectProtectiveEquipment.
func (mr *MockRekognitionAPIMockRecorder) DetectProtectiveEquipment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectProtectiveEquipment", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectProtectiveEquipment), arg0)
}

// DetectProtectiveEquipmentRequest mocks base method.
func (m *MockRekognitionAPI) DetectProtectiveEquipmentRequest(arg0 *rekognition.DetectProtectiveEquipmentInput) (*request.Request, *rekognition.DetectProtectiveEquipmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectProtectiveEquipmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DetectProtectiveEquipmentOutput)
	return ret0, ret1
}

// DetectProtectiveEquipmentRequest indicates an expected call of DetectProtectiveEquipmentRequest.
func (mr *MockRekognitionAPIMockRecorder) DetectProtectiveEquipmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectProtectiveEquipmentRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectProtectiveEquipmentRequest), arg0)
}

// DetectProtectiveEquipmentWithContext mocks base method.
func (m *MockRekognitionAPI) DetectProtectiveEquipmentWithContext(arg0 context.Context, arg1 *rekognition.DetectProtectiveEquipmentInput, arg2 ...request.Option) (*rekognition.DetectProtectiveEquipmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectProtectiveEquipmentWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DetectProtectiveEquipmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectProtectiveEquipmentWithContext indicates an expected call of DetectProtectiveEquipmentWithContext.
func (mr *MockRekognitionAPIMockRecorder) DetectProtectiveEquipmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectProtectiveEquipmentWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectProtectiveEquipmentWithContext), varargs...)
}

// DetectText mocks base method.
func (m *MockRekognitionAPI) DetectText(arg0 *rekognition.DetectTextInput) (*rekognition.DetectTextOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectText", arg0)
	ret0, _ := ret[0].(*rekognition.DetectTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectText indicates an expected call of DetectText.
func (mr *MockRekognitionAPIMockRecorder) DetectText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectText", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectText), arg0)
}

// DetectTextRequest mocks base method.
func (m *MockRekognitionAPI) DetectTextRequest(arg0 *rekognition.DetectTextInput) (*request.Request, *rekognition.DetectTextOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectTextRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DetectTextOutput)
	return ret0, ret1
}

// DetectTextRequest indicates an expected call of DetectTextRequest.
func (mr *MockRekognitionAPIMockRecorder) DetectTextRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectTextRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectTextRequest), arg0)
}

// DetectTextWithContext mocks base method.
func (m *MockRekognitionAPI) DetectTextWithContext(arg0 context.Context, arg1 *rekognition.DetectTextInput, arg2 ...request.Option) (*rekognition.DetectTextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectTextWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DetectTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectTextWithContext indicates an expected call of DetectTextWithContext.
func (mr *MockRekognitionAPIMockRecorder) DetectTextWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectTextWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DetectTextWithContext), varargs...)
}

// DistributeDatasetEntries mocks base method.
func (m *MockRekognitionAPI) DistributeDatasetEntries(arg0 *rekognition.DistributeDatasetEntriesInput) (*rekognition.DistributeDatasetEntriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributeDatasetEntries", arg0)
	ret0, _ := ret[0].(*rekognition.DistributeDatasetEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributeDatasetEntries indicates an expected call of DistributeDatasetEntries.
func (mr *MockRekognitionAPIMockRecorder) DistributeDatasetEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeDatasetEntries", reflect.TypeOf((*MockRekognitionAPI)(nil).DistributeDatasetEntries), arg0)
}

// DistributeDatasetEntriesRequest mocks base method.
func (m *MockRekognitionAPI) DistributeDatasetEntriesRequest(arg0 *rekognition.DistributeDatasetEntriesInput) (*request.Request, *rekognition.DistributeDatasetEntriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributeDatasetEntriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.DistributeDatasetEntriesOutput)
	return ret0, ret1
}

// DistributeDatasetEntriesRequest indicates an expected call of DistributeDatasetEntriesRequest.
func (mr *MockRekognitionAPIMockRecorder) DistributeDatasetEntriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeDatasetEntriesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).DistributeDatasetEntriesRequest), arg0)
}

// DistributeDatasetEntriesWithContext mocks base method.
func (m *MockRekognitionAPI) DistributeDatasetEntriesWithContext(arg0 context.Context, arg1 *rekognition.DistributeDatasetEntriesInput, arg2 ...request.Option) (*rekognition.DistributeDatasetEntriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeDatasetEntriesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.DistributeDatasetEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributeDatasetEntriesWithContext indicates an expected call of DistributeDatasetEntriesWithContext.
func (mr *MockRekognitionAPIMockRecorder) DistributeDatasetEntriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeDatasetEntriesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).DistributeDatasetEntriesWithContext), varargs...)
}

// GetCelebrityInfo mocks base method.
func (m *MockRekognitionAPI) GetCelebrityInfo(arg0 *rekognition.GetCelebrityInfoInput) (*rekognition.GetCelebrityInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCelebrityInfo", arg0)
	ret0, _ := ret[0].(*rekognition.GetCelebrityInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCelebrityInfo indicates an expected call of GetCelebrityInfo.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityInfo", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityInfo), arg0)
}

// GetCelebrityInfoRequest mocks base method.
func (m *MockRekognitionAPI) GetCelebrityInfoRequest(arg0 *rekognition.GetCelebrityInfoInput) (*request.Request, *rekognition.GetCelebrityInfoOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCelebrityInfoRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetCelebrityInfoOutput)
	return ret0, ret1
}

// GetCelebrityInfoRequest indicates an expected call of GetCelebrityInfoRequest.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityInfoRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityInfoRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityInfoRequest), arg0)
}

// GetCelebrityInfoWithContext mocks base method.
func (m *MockRekognitionAPI) GetCelebrityInfoWithContext(arg0 context.Context, arg1 *rekognition.GetCelebrityInfoInput, arg2 ...request.Option) (*rekognition.GetCelebrityInfoOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCelebrityInfoWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetCelebrityInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCelebrityInfoWithContext indicates an expected call of GetCelebrityInfoWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityInfoWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityInfoWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityInfoWithContext), varargs...)
}

// GetCelebrityRecognition mocks base method.
func (m *MockRekognitionAPI) GetCelebrityRecognition(arg0 *rekognition.GetCelebrityRecognitionInput) (*rekognition.GetCelebrityRecognitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCelebrityRecognition", arg0)
	ret0, _ := ret[0].(*rekognition.GetCelebrityRecognitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCelebrityRecognition indicates an expected call of GetCelebrityRecognition.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityRecognition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityRecognition", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityRecognition), arg0)
}

// GetCelebrityRecognitionPages mocks base method.
func (m *MockRekognitionAPI) GetCelebrityRecognitionPages(arg0 *rekognition.GetCelebrityRecognitionInput, arg1 func(*rekognition.GetCelebrityRecognitionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCelebrityRecognitionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCelebrityRecognitionPages indicates an expected call of GetCelebrityRecognitionPages.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityRecognitionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityRecognitionPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityRecognitionPages), arg0, arg1)
}

// GetCelebrityRecognitionPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetCelebrityRecognitionPagesWithContext(arg0 context.Context, arg1 *rekognition.GetCelebrityRecognitionInput, arg2 func(*rekognition.GetCelebrityRecognitionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCelebrityRecognitionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCelebrityRecognitionPagesWithContext indicates an expected call of GetCelebrityRecognitionPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityRecognitionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityRecognitionPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityRecognitionPagesWithContext), varargs...)
}

// GetCelebrityRecognitionRequest mocks base method.
func (m *MockRekognitionAPI) GetCelebrityRecognitionRequest(arg0 *rekognition.GetCelebrityRecognitionInput) (*request.Request, *rekognition.GetCelebrityRecognitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCelebrityRecognitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetCelebrityRecognitionOutput)
	return ret0, ret1
}

// GetCelebrityRecognitionRequest indicates an expected call of GetCelebrityRecognitionRequest.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityRecognitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityRecognitionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityRecognitionRequest), arg0)
}

// GetCelebrityRecognitionWithContext mocks base method.
func (m *MockRekognitionAPI) GetCelebrityRecognitionWithContext(arg0 context.Context, arg1 *rekognition.GetCelebrityRecognitionInput, arg2 ...request.Option) (*rekognition.GetCelebrityRecognitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCelebrityRecognitionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetCelebrityRecognitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCelebrityRecognitionWithContext indicates an expected call of GetCelebrityRecognitionWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetCelebrityRecognitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCelebrityRecognitionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetCelebrityRecognitionWithContext), varargs...)
}

// GetContentModeration mocks base method.
func (m *MockRekognitionAPI) GetContentModeration(arg0 *rekognition.GetContentModerationInput) (*rekognition.GetContentModerationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentModeration", arg0)
	ret0, _ := ret[0].(*rekognition.GetContentModerationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentModeration indicates an expected call of GetContentModeration.
func (mr *MockRekognitionAPIMockRecorder) GetContentModeration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentModeration", reflect.TypeOf((*MockRekognitionAPI)(nil).GetContentModeration), arg0)
}

// GetContentModerationPages mocks base method.
func (m *MockRekognitionAPI) GetContentModerationPages(arg0 *rekognition.GetContentModerationInput, arg1 func(*rekognition.GetContentModerationOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentModerationPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContentModerationPages indicates an expected call of GetContentModerationPages.
func (mr *MockRekognitionAPIMockRecorder) GetContentModerationPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentModerationPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetContentModerationPages), arg0, arg1)
}

// GetContentModerationPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetContentModerationPagesWithContext(arg0 context.Context, arg1 *rekognition.GetContentModerationInput, arg2 func(*rekognition.GetContentModerationOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentModerationPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContentModerationPagesWithContext indicates an expected call of GetContentModerationPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetContentModerationPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentModerationPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetContentModerationPagesWithContext), varargs...)
}

// GetContentModerationRequest mocks base method.
func (m *MockRekognitionAPI) GetContentModerationRequest(arg0 *rekognition.GetContentModerationInput) (*request.Request, *rekognition.GetContentModerationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentModerationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetContentModerationOutput)
	return ret0, ret1
}

// GetContentModerationRequest indicates an expected call of GetContentModerationRequest.
func (mr *MockRekognitionAPIMockRecorder) GetContentModerationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentModerationRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetContentModerationRequest), arg0)
}

// GetContentModerationWithContext mocks base method.
func (m *MockRekognitionAPI) GetContentModerationWithContext(arg0 context.Context, arg1 *rekognition.GetContentModerationInput, arg2 ...request.Option) (*rekognition.GetContentModerationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContentModerationWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetContentModerationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentModerationWithContext indicates an expected call of GetContentModerationWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetContentModerationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentModerationWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetContentModerationWithContext), varargs...)
}

// GetFaceDetection mocks base method.
func (m *MockRekognitionAPI) GetFaceDetection(arg0 *rekognition.GetFaceDetectionInput) (*rekognition.GetFaceDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaceDetection", arg0)
	ret0, _ := ret[0].(*rekognition.GetFaceDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaceDetection indicates an expected call of GetFaceDetection.
func (mr *MockRekognitionAPIMockRecorder) GetFaceDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceDetection), arg0)
}

// GetFaceDetectionPages mocks base method.
func (m *MockRekognitionAPI) GetFaceDetectionPages(arg0 *rekognition.GetFaceDetectionInput, arg1 func(*rekognition.GetFaceDetectionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaceDetectionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFaceDetectionPages indicates an expected call of GetFaceDetectionPages.
func (mr *MockRekognitionAPIMockRecorder) GetFaceDetectionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceDetectionPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceDetectionPages), arg0, arg1)
}

// GetFaceDetectionPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetFaceDetectionPagesWithContext(arg0 context.Context, arg1 *rekognition.GetFaceDetectionInput, arg2 func(*rekognition.GetFaceDetectionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFaceDetectionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFaceDetectionPagesWithContext indicates an expected call of GetFaceDetectionPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetFaceDetectionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceDetectionPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceDetectionPagesWithContext), varargs...)
}

// GetFaceDetectionRequest mocks base method.
func (m *MockRekognitionAPI) GetFaceDetectionRequest(arg0 *rekognition.GetFaceDetectionInput) (*request.Request, *rekognition.GetFaceDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaceDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetFaceDetectionOutput)
	return ret0, ret1
}

// GetFaceDetectionRequest indicates an expected call of GetFaceDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) GetFaceDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceDetectionRequest), arg0)
}

// GetFaceDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) GetFaceDetectionWithContext(arg0 context.Context, arg1 *rekognition.GetFaceDetectionInput, arg2 ...request.Option) (*rekognition.GetFaceDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFaceDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetFaceDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaceDetectionWithContext indicates an expected call of GetFaceDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetFaceDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceDetectionWithContext), varargs...)
}

// GetFaceSearch mocks base method.
func (m *MockRekognitionAPI) GetFaceSearch(arg0 *rekognition.GetFaceSearchInput) (*rekognition.GetFaceSearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaceSearch", arg0)
	ret0, _ := ret[0].(*rekognition.GetFaceSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaceSearch indicates an expected call of GetFaceSearch.
func (mr *MockRekognitionAPIMockRecorder) GetFaceSearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceSearch", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceSearch), arg0)
}

// GetFaceSearchPages mocks base method.
func (m *MockRekognitionAPI) GetFaceSearchPages(arg0 *rekognition.GetFaceSearchInput, arg1 func(*rekognition.GetFaceSearchOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaceSearchPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFaceSearchPages indicates an expected call of GetFaceSearchPages.
func (mr *MockRekognitionAPIMockRecorder) GetFaceSearchPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceSearchPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceSearchPages), arg0, arg1)
}

// GetFaceSearchPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetFaceSearchPagesWithContext(arg0 context.Context, arg1 *rekognition.GetFaceSearchInput, arg2 func(*rekognition.GetFaceSearchOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFaceSearchPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFaceSearchPagesWithContext indicates an expected call of GetFaceSearchPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetFaceSearchPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceSearchPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceSearchPagesWithContext), varargs...)
}

// GetFaceSearchRequest mocks base method.
func (m *MockRekognitionAPI) GetFaceSearchRequest(arg0 *rekognition.GetFaceSearchInput) (*request.Request, *rekognition.GetFaceSearchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaceSearchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetFaceSearchOutput)
	return ret0, ret1
}

// GetFaceSearchRequest indicates an expected call of GetFaceSearchRequest.
func (mr *MockRekognitionAPIMockRecorder) GetFaceSearchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceSearchRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceSearchRequest), arg0)
}

// GetFaceSearchWithContext mocks base method.
func (m *MockRekognitionAPI) GetFaceSearchWithContext(arg0 context.Context, arg1 *rekognition.GetFaceSearchInput, arg2 ...request.Option) (*rekognition.GetFaceSearchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFaceSearchWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetFaceSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaceSearchWithContext indicates an expected call of GetFaceSearchWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetFaceSearchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaceSearchWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetFaceSearchWithContext), varargs...)
}

// GetLabelDetection mocks base method.
func (m *MockRekognitionAPI) GetLabelDetection(arg0 *rekognition.GetLabelDetectionInput) (*rekognition.GetLabelDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelDetection", arg0)
	ret0, _ := ret[0].(*rekognition.GetLabelDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelDetection indicates an expected call of GetLabelDetection.
func (mr *MockRekognitionAPIMockRecorder) GetLabelDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).GetLabelDetection), arg0)
}

// GetLabelDetectionPages mocks base method.
func (m *MockRekognitionAPI) GetLabelDetectionPages(arg0 *rekognition.GetLabelDetectionInput, arg1 func(*rekognition.GetLabelDetectionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelDetectionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLabelDetectionPages indicates an expected call of GetLabelDetectionPages.
func (mr *MockRekognitionAPIMockRecorder) GetLabelDetectionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelDetectionPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetLabelDetectionPages), arg0, arg1)
}

// GetLabelDetectionPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetLabelDetectionPagesWithContext(arg0 context.Context, arg1 *rekognition.GetLabelDetectionInput, arg2 func(*rekognition.GetLabelDetectionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabelDetectionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLabelDetectionPagesWithContext indicates an expected call of GetLabelDetectionPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetLabelDetectionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelDetectionPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetLabelDetectionPagesWithContext), varargs...)
}

// GetLabelDetectionRequest mocks base method.
func (m *MockRekognitionAPI) GetLabelDetectionRequest(arg0 *rekognition.GetLabelDetectionInput) (*request.Request, *rekognition.GetLabelDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetLabelDetectionOutput)
	return ret0, ret1
}

// GetLabelDetectionRequest indicates an expected call of GetLabelDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) GetLabelDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetLabelDetectionRequest), arg0)
}

// GetLabelDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) GetLabelDetectionWithContext(arg0 context.Context, arg1 *rekognition.GetLabelDetectionInput, arg2 ...request.Option) (*rekognition.GetLabelDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabelDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetLabelDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelDetectionWithContext indicates an expected call of GetLabelDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetLabelDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetLabelDetectionWithContext), varargs...)
}

// GetPersonTracking mocks base method.
func (m *MockRekognitionAPI) GetPersonTracking(arg0 *rekognition.GetPersonTrackingInput) (*rekognition.GetPersonTrackingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonTracking", arg0)
	ret0, _ := ret[0].(*rekognition.GetPersonTrackingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonTracking indicates an expected call of GetPersonTracking.
func (mr *MockRekognitionAPIMockRecorder) GetPersonTracking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonTracking", reflect.TypeOf((*MockRekognitionAPI)(nil).GetPersonTracking), arg0)
}

// GetPersonTrackingPages mocks base method.
func (m *MockRekognitionAPI) GetPersonTrackingPages(arg0 *rekognition.GetPersonTrackingInput, arg1 func(*rekognition.GetPersonTrackingOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonTrackingPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPersonTrackingPages indicates an expected call of GetPersonTrackingPages.
func (mr *MockRekognitionAPIMockRecorder) GetPersonTrackingPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonTrackingPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetPersonTrackingPages), arg0, arg1)
}

// GetPersonTrackingPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetPersonTrackingPagesWithContext(arg0 context.Context, arg1 *rekognition.GetPersonTrackingInput, arg2 func(*rekognition.GetPersonTrackingOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPersonTrackingPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPersonTrackingPagesWithContext indicates an expected call of GetPersonTrackingPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetPersonTrackingPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonTrackingPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetPersonTrackingPagesWithContext), varargs...)
}

// GetPersonTrackingRequest mocks base method.
func (m *MockRekognitionAPI) GetPersonTrackingRequest(arg0 *rekognition.GetPersonTrackingInput) (*request.Request, *rekognition.GetPersonTrackingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonTrackingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetPersonTrackingOutput)
	return ret0, ret1
}

// GetPersonTrackingRequest indicates an expected call of GetPersonTrackingRequest.
func (mr *MockRekognitionAPIMockRecorder) GetPersonTrackingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonTrackingRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetPersonTrackingRequest), arg0)
}

// GetPersonTrackingWithContext mocks base method.
func (m *MockRekognitionAPI) GetPersonTrackingWithContext(arg0 context.Context, arg1 *rekognition.GetPersonTrackingInput, arg2 ...request.Option) (*rekognition.GetPersonTrackingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPersonTrackingWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetPersonTrackingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonTrackingWithContext indicates an expected call of GetPersonTrackingWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetPersonTrackingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonTrackingWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetPersonTrackingWithContext), varargs...)
}

// GetSegmentDetection mocks base method.
func (m *MockRekognitionAPI) GetSegmentDetection(arg0 *rekognition.GetSegmentDetectionInput) (*rekognition.GetSegmentDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentDetection", arg0)
	ret0, _ := ret[0].(*rekognition.GetSegmentDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentDetection indicates an expected call of GetSegmentDetection.
func (mr *MockRekognitionAPIMockRecorder) GetSegmentDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).GetSegmentDetection), arg0)
}

// GetSegmentDetectionPages mocks base method.
func (m *MockRekognitionAPI) GetSegmentDetectionPages(arg0 *rekognition.GetSegmentDetectionInput, arg1 func(*rekognition.GetSegmentDetectionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentDetectionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSegmentDetectionPages indicates an expected call of GetSegmentDetectionPages.
func (mr *MockRekognitionAPIMockRecorder) GetSegmentDetectionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentDetectionPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetSegmentDetectionPages), arg0, arg1)
}

// GetSegmentDetectionPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetSegmentDetectionPagesWithContext(arg0 context.Context, arg1 *rekognition.GetSegmentDetectionInput, arg2 func(*rekognition.GetSegmentDetectionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSegmentDetectionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSegmentDetectionPagesWithContext indicates an expected call of GetSegmentDetectionPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetSegmentDetectionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentDetectionPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetSegmentDetectionPagesWithContext), varargs...)
}

// GetSegmentDetectionRequest mocks base method.
func (m *MockRekognitionAPI) GetSegmentDetectionRequest(arg0 *rekognition.GetSegmentDetectionInput) (*request.Request, *rekognition.GetSegmentDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetSegmentDetectionOutput)
	return ret0, ret1
}

// GetSegmentDetectionRequest indicates an expected call of GetSegmentDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) GetSegmentDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetSegmentDetectionRequest), arg0)
}

// GetSegmentDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) GetSegmentDetectionWithContext(arg0 context.Context, arg1 *rekognition.GetSegmentDetectionInput, arg2 ...request.Option) (*rekognition.GetSegmentDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSegmentDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetSegmentDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentDetectionWithContext indicates an expected call of GetSegmentDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetSegmentDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetSegmentDetectionWithContext), varargs...)
}

// GetTextDetection mocks base method.
func (m *MockRekognitionAPI) GetTextDetection(arg0 *rekognition.GetTextDetectionInput) (*rekognition.GetTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDetection", arg0)
	ret0, _ := ret[0].(*rekognition.GetTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDetection indicates an expected call of GetTextDetection.
func (mr *MockRekognitionAPIMockRecorder) GetTextDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).GetTextDetection), arg0)
}

// GetTextDetectionPages mocks base method.
func (m *MockRekognitionAPI) GetTextDetectionPages(arg0 *rekognition.GetTextDetectionInput, arg1 func(*rekognition.GetTextDetectionOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDetectionPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTextDetectionPages indicates an expected call of GetTextDetectionPages.
func (mr *MockRekognitionAPIMockRecorder) GetTextDetectionPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDetectionPages", reflect.TypeOf((*MockRekognitionAPI)(nil).GetTextDetectionPages), arg0, arg1)
}

// GetTextDetectionPagesWithContext mocks base method.
func (m *MockRekognitionAPI) GetTextDetectionPagesWithContext(arg0 context.Context, arg1 *rekognition.GetTextDetectionInput, arg2 func(*rekognition.GetTextDetectionOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTextDetectionPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTextDetectionPagesWithContext indicates an expected call of GetTextDetectionPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetTextDetectionPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDetectionPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetTextDetectionPagesWithContext), varargs...)
}

// GetTextDetectionRequest mocks base method.
func (m *MockRekognitionAPI) GetTextDetectionRequest(arg0 *rekognition.GetTextDetectionInput) (*request.Request, *rekognition.GetTextDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.GetTextDetectionOutput)
	return ret0, ret1
}

// GetTextDetectionRequest indicates an expected call of GetTextDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) GetTextDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).GetTextDetectionRequest), arg0)
}

// GetTextDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) GetTextDetectionWithContext(arg0 context.Context, arg1 *rekognition.GetTextDetectionInput, arg2 ...request.Option) (*rekognition.GetTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTextDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.GetTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDetectionWithContext indicates an expected call of GetTextDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) GetTextDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).GetTextDetectionWithContext), varargs...)
}

// IndexFaces mocks base method.
func (m *MockRekognitionAPI) IndexFaces(arg0 *rekognition.IndexFacesInput) (*rekognition.IndexFacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexFaces", arg0)
	ret0, _ := ret[0].(*rekognition.IndexFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexFaces indicates an expected call of IndexFaces.
func (mr *MockRekognitionAPIMockRecorder) IndexFaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexFaces", reflect.TypeOf((*MockRekognitionAPI)(nil).IndexFaces), arg0)
}

// IndexFacesRequest mocks base method.
func (m *MockRekognitionAPI) IndexFacesRequest(arg0 *rekognition.IndexFacesInput) (*request.Request, *rekognition.IndexFacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexFacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.IndexFacesOutput)
	return ret0, ret1
}

// IndexFacesRequest indicates an expected call of IndexFacesRequest.
func (mr *MockRekognitionAPIMockRecorder) IndexFacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexFacesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).IndexFacesRequest), arg0)
}

// IndexFacesWithContext mocks base method.
func (m *MockRekognitionAPI) IndexFacesWithContext(arg0 context.Context, arg1 *rekognition.IndexFacesInput, arg2 ...request.Option) (*rekognition.IndexFacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexFacesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.IndexFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexFacesWithContext indicates an expected call of IndexFacesWithContext.
func (mr *MockRekognitionAPIMockRecorder) IndexFacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexFacesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).IndexFacesWithContext), varargs...)
}

// ListCollections mocks base method.
func (m *MockRekognitionAPI) ListCollections(arg0 *rekognition.ListCollectionsInput) (*rekognition.ListCollectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollections", arg0)
	ret0, _ := ret[0].(*rekognition.ListCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockRekognitionAPIMockRecorder) ListCollections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockRekognitionAPI)(nil).ListCollections), arg0)
}

// ListCollectionsPages mocks base method.
func (m *MockRekognitionAPI) ListCollectionsPages(arg0 *rekognition.ListCollectionsInput, arg1 func(*rekognition.ListCollectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollectionsPages indicates an expected call of ListCollectionsPages.
func (mr *MockRekognitionAPIMockRecorder) ListCollectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsPages", reflect.TypeOf((*MockRekognitionAPI)(nil).ListCollectionsPages), arg0, arg1)
}

// ListCollectionsPagesWithContext mocks base method.
func (m *MockRekognitionAPI) ListCollectionsPagesWithContext(arg0 context.Context, arg1 *rekognition.ListCollectionsInput, arg2 func(*rekognition.ListCollectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollectionsPagesWithContext indicates an expected call of ListCollectionsPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListCollectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListCollectionsPagesWithContext), varargs...)
}

// ListCollectionsRequest mocks base method.
func (m *MockRekognitionAPI) ListCollectionsRequest(arg0 *rekognition.ListCollectionsInput) (*request.Request, *rekognition.ListCollectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.ListCollectionsOutput)
	return ret0, ret1
}

// ListCollectionsRequest indicates an expected call of ListCollectionsRequest.
func (mr *MockRekognitionAPIMockRecorder) ListCollectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).ListCollectionsRequest), arg0)
}

// ListCollectionsWithContext mocks base method.
func (m *MockRekognitionAPI) ListCollectionsWithContext(arg0 context.Context, arg1 *rekognition.ListCollectionsInput, arg2 ...request.Option) (*rekognition.ListCollectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectionsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.ListCollectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectionsWithContext indicates an expected call of ListCollectionsWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListCollectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListCollectionsWithContext), varargs...)
}

// ListDatasetEntries mocks base method.
func (m *MockRekognitionAPI) ListDatasetEntries(arg0 *rekognition.ListDatasetEntriesInput) (*rekognition.ListDatasetEntriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetEntries", arg0)
	ret0, _ := ret[0].(*rekognition.ListDatasetEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetEntries indicates an expected call of ListDatasetEntries.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetEntries", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetEntries), arg0)
}

// ListDatasetEntriesPages mocks base method.
func (m *MockRekognitionAPI) ListDatasetEntriesPages(arg0 *rekognition.ListDatasetEntriesInput, arg1 func(*rekognition.ListDatasetEntriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetEntriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetEntriesPages indicates an expected call of ListDatasetEntriesPages.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetEntriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetEntriesPages", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetEntriesPages), arg0, arg1)
}

// ListDatasetEntriesPagesWithContext mocks base method.
func (m *MockRekognitionAPI) ListDatasetEntriesPagesWithContext(arg0 context.Context, arg1 *rekognition.ListDatasetEntriesInput, arg2 func(*rekognition.ListDatasetEntriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetEntriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetEntriesPagesWithContext indicates an expected call of ListDatasetEntriesPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetEntriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetEntriesPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetEntriesPagesWithContext), varargs...)
}

// ListDatasetEntriesRequest mocks base method.
func (m *MockRekognitionAPI) ListDatasetEntriesRequest(arg0 *rekognition.ListDatasetEntriesInput) (*request.Request, *rekognition.ListDatasetEntriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetEntriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.ListDatasetEntriesOutput)
	return ret0, ret1
}

// ListDatasetEntriesRequest indicates an expected call of ListDatasetEntriesRequest.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetEntriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetEntriesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetEntriesRequest), arg0)
}

// ListDatasetEntriesWithContext mocks base method.
func (m *MockRekognitionAPI) ListDatasetEntriesWithContext(arg0 context.Context, arg1 *rekognition.ListDatasetEntriesInput, arg2 ...request.Option) (*rekognition.ListDatasetEntriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetEntriesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.ListDatasetEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetEntriesWithContext indicates an expected call of ListDatasetEntriesWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetEntriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetEntriesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetEntriesWithContext), varargs...)
}

// ListDatasetLabels mocks base method.
func (m *MockRekognitionAPI) ListDatasetLabels(arg0 *rekognition.ListDatasetLabelsInput) (*rekognition.ListDatasetLabelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetLabels", arg0)
	ret0, _ := ret[0].(*rekognition.ListDatasetLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetLabels indicates an expected call of ListDatasetLabels.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetLabels", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetLabels), arg0)
}

// ListDatasetLabelsPages mocks base method.
func (m *MockRekognitionAPI) ListDatasetLabelsPages(arg0 *rekognition.ListDatasetLabelsInput, arg1 func(*rekognition.ListDatasetLabelsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetLabelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetLabelsPages indicates an expected call of ListDatasetLabelsPages.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetLabelsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetLabelsPages", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetLabelsPages), arg0, arg1)
}

// ListDatasetLabelsPagesWithContext mocks base method.
func (m *MockRekognitionAPI) ListDatasetLabelsPagesWithContext(arg0 context.Context, arg1 *rekognition.ListDatasetLabelsInput, arg2 func(*rekognition.ListDatasetLabelsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetLabelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDatasetLabelsPagesWithContext indicates an expected call of ListDatasetLabelsPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetLabelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetLabelsPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetLabelsPagesWithContext), varargs...)
}

// ListDatasetLabelsRequest mocks base method.
func (m *MockRekognitionAPI) ListDatasetLabelsRequest(arg0 *rekognition.ListDatasetLabelsInput) (*request.Request, *rekognition.ListDatasetLabelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetLabelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.ListDatasetLabelsOutput)
	return ret0, ret1
}

// ListDatasetLabelsRequest indicates an expected call of ListDatasetLabelsRequest.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetLabelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetLabelsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetLabelsRequest), arg0)
}

// ListDatasetLabelsWithContext mocks base method.
func (m *MockRekognitionAPI) ListDatasetLabelsWithContext(arg0 context.Context, arg1 *rekognition.ListDatasetLabelsInput, arg2 ...request.Option) (*rekognition.ListDatasetLabelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetLabelsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.ListDatasetLabelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetLabelsWithContext indicates an expected call of ListDatasetLabelsWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListDatasetLabelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetLabelsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListDatasetLabelsWithContext), varargs...)
}

// ListFaces mocks base method.
func (m *MockRekognitionAPI) ListFaces(arg0 *rekognition.ListFacesInput) (*rekognition.ListFacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFaces", arg0)
	ret0, _ := ret[0].(*rekognition.ListFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFaces indicates an expected call of ListFaces.
func (mr *MockRekognitionAPIMockRecorder) ListFaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFaces", reflect.TypeOf((*MockRekognitionAPI)(nil).ListFaces), arg0)
}

// ListFacesPages mocks base method.
func (m *MockRekognitionAPI) ListFacesPages(arg0 *rekognition.ListFacesInput, arg1 func(*rekognition.ListFacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFacesPages indicates an expected call of ListFacesPages.
func (mr *MockRekognitionAPIMockRecorder) ListFacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacesPages", reflect.TypeOf((*MockRekognitionAPI)(nil).ListFacesPages), arg0, arg1)
}

// ListFacesPagesWithContext mocks base method.
func (m *MockRekognitionAPI) ListFacesPagesWithContext(arg0 context.Context, arg1 *rekognition.ListFacesInput, arg2 func(*rekognition.ListFacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFacesPagesWithContext indicates an expected call of ListFacesPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListFacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacesPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListFacesPagesWithContext), varargs...)
}

// ListFacesRequest mocks base method.
func (m *MockRekognitionAPI) ListFacesRequest(arg0 *rekognition.ListFacesInput) (*request.Request, *rekognition.ListFacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.ListFacesOutput)
	return ret0, ret1
}

// ListFacesRequest indicates an expected call of ListFacesRequest.
func (mr *MockRekognitionAPIMockRecorder) ListFacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).ListFacesRequest), arg0)
}

// ListFacesWithContext mocks base method.
func (m *MockRekognitionAPI) ListFacesWithContext(arg0 context.Context, arg1 *rekognition.ListFacesInput, arg2 ...request.Option) (*rekognition.ListFacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFacesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.ListFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacesWithContext indicates an expected call of ListFacesWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListFacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListFacesWithContext), varargs...)
}

// ListStreamProcessors mocks base method.
func (m *MockRekognitionAPI) ListStreamProcessors(arg0 *rekognition.ListStreamProcessorsInput) (*rekognition.ListStreamProcessorsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamProcessors", arg0)
	ret0, _ := ret[0].(*rekognition.ListStreamProcessorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamProcessors indicates an expected call of ListStreamProcessors.
func (mr *MockRekognitionAPIMockRecorder) ListStreamProcessors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamProcessors", reflect.TypeOf((*MockRekognitionAPI)(nil).ListStreamProcessors), arg0)
}

// ListStreamProcessorsPages mocks base method.
func (m *MockRekognitionAPI) ListStreamProcessorsPages(arg0 *rekognition.ListStreamProcessorsInput, arg1 func(*rekognition.ListStreamProcessorsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamProcessorsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamProcessorsPages indicates an expected call of ListStreamProcessorsPages.
func (mr *MockRekognitionAPIMockRecorder) ListStreamProcessorsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamProcessorsPages", reflect.TypeOf((*MockRekognitionAPI)(nil).ListStreamProcessorsPages), arg0, arg1)
}

// ListStreamProcessorsPagesWithContext mocks base method.
func (m *MockRekognitionAPI) ListStreamProcessorsPagesWithContext(arg0 context.Context, arg1 *rekognition.ListStreamProcessorsInput, arg2 func(*rekognition.ListStreamProcessorsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamProcessorsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStreamProcessorsPagesWithContext indicates an expected call of ListStreamProcessorsPagesWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListStreamProcessorsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamProcessorsPagesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListStreamProcessorsPagesWithContext), varargs...)
}

// ListStreamProcessorsRequest mocks base method.
func (m *MockRekognitionAPI) ListStreamProcessorsRequest(arg0 *rekognition.ListStreamProcessorsInput) (*request.Request, *rekognition.ListStreamProcessorsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreamProcessorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.ListStreamProcessorsOutput)
	return ret0, ret1
}

// ListStreamProcessorsRequest indicates an expected call of ListStreamProcessorsRequest.
func (mr *MockRekognitionAPIMockRecorder) ListStreamProcessorsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamProcessorsRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).ListStreamProcessorsRequest), arg0)
}

// ListStreamProcessorsWithContext mocks base method.
func (m *MockRekognitionAPI) ListStreamProcessorsWithContext(arg0 context.Context, arg1 *rekognition.ListStreamProcessorsInput, arg2 ...request.Option) (*rekognition.ListStreamProcessorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStreamProcessorsWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.ListStreamProcessorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreamProcessorsWithContext indicates an expected call of ListStreamProcessorsWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListStreamProcessorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreamProcessorsWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListStreamProcessorsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRekognitionAPI) ListTagsForResource(arg0 *rekognition.ListTagsForResourceInput) (*rekognition.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*rekognition.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRekognitionAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRekognitionAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockRekognitionAPI) ListTagsForResourceRequest(arg0 *rekognition.ListTagsForResourceInput) (*request.Request, *rekognition.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockRekognitionAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockRekognitionAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *rekognition.ListTagsForResourceInput, arg2 ...request.Option) (*rekognition.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockRekognitionAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RecognizeCelebrities mocks base method.
func (m *MockRekognitionAPI) RecognizeCelebrities(arg0 *rekognition.RecognizeCelebritiesInput) (*rekognition.RecognizeCelebritiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecognizeCelebrities", arg0)
	ret0, _ := ret[0].(*rekognition.RecognizeCelebritiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecognizeCelebrities indicates an expected call of RecognizeCelebrities.
func (mr *MockRekognitionAPIMockRecorder) RecognizeCelebrities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecognizeCelebrities", reflect.TypeOf((*MockRekognitionAPI)(nil).RecognizeCelebrities), arg0)
}

// RecognizeCelebritiesRequest mocks base method.
func (m *MockRekognitionAPI) RecognizeCelebritiesRequest(arg0 *rekognition.RecognizeCelebritiesInput) (*request.Request, *rekognition.RecognizeCelebritiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecognizeCelebritiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.RecognizeCelebritiesOutput)
	return ret0, ret1
}

// RecognizeCelebritiesRequest indicates an expected call of RecognizeCelebritiesRequest.
func (mr *MockRekognitionAPIMockRecorder) RecognizeCelebritiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecognizeCelebritiesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).RecognizeCelebritiesRequest), arg0)
}

// RecognizeCelebritiesWithContext mocks base method.
func (m *MockRekognitionAPI) RecognizeCelebritiesWithContext(arg0 context.Context, arg1 *rekognition.RecognizeCelebritiesInput, arg2 ...request.Option) (*rekognition.RecognizeCelebritiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecognizeCelebritiesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.RecognizeCelebritiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecognizeCelebritiesWithContext indicates an expected call of RecognizeCelebritiesWithContext.
func (mr *MockRekognitionAPIMockRecorder) RecognizeCelebritiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecognizeCelebritiesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).RecognizeCelebritiesWithContext), varargs...)
}

// SearchFaces mocks base method.
func (m *MockRekognitionAPI) SearchFaces(arg0 *rekognition.SearchFacesInput) (*rekognition.SearchFacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFaces", arg0)
	ret0, _ := ret[0].(*rekognition.SearchFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFaces indicates an expected call of SearchFaces.
func (mr *MockRekognitionAPIMockRecorder) SearchFaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFaces", reflect.TypeOf((*MockRekognitionAPI)(nil).SearchFaces), arg0)
}

// SearchFacesByImage mocks base method.
func (m *MockRekognitionAPI) SearchFacesByImage(arg0 *rekognition.SearchFacesByImageInput) (*rekognition.SearchFacesByImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFacesByImage", arg0)
	ret0, _ := ret[0].(*rekognition.SearchFacesByImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFacesByImage indicates an expected call of SearchFacesByImage.
func (mr *MockRekognitionAPIMockRecorder) SearchFacesByImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFacesByImage", reflect.TypeOf((*MockRekognitionAPI)(nil).SearchFacesByImage), arg0)
}

// SearchFacesByImageRequest mocks base method.
func (m *MockRekognitionAPI) SearchFacesByImageRequest(arg0 *rekognition.SearchFacesByImageInput) (*request.Request, *rekognition.SearchFacesByImageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFacesByImageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.SearchFacesByImageOutput)
	return ret0, ret1
}

// SearchFacesByImageRequest indicates an expected call of SearchFacesByImageRequest.
func (mr *MockRekognitionAPIMockRecorder) SearchFacesByImageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFacesByImageRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).SearchFacesByImageRequest), arg0)
}

// SearchFacesByImageWithContext mocks base method.
func (m *MockRekognitionAPI) SearchFacesByImageWithContext(arg0 context.Context, arg1 *rekognition.SearchFacesByImageInput, arg2 ...request.Option) (*rekognition.SearchFacesByImageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchFacesByImageWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.SearchFacesByImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFacesByImageWithContext indicates an expected call of SearchFacesByImageWithContext.
func (mr *MockRekognitionAPIMockRecorder) SearchFacesByImageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFacesByImageWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).SearchFacesByImageWithContext), varargs...)
}

// SearchFacesRequest mocks base method.
func (m *MockRekognitionAPI) SearchFacesRequest(arg0 *rekognition.SearchFacesInput) (*request.Request, *rekognition.SearchFacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.SearchFacesOutput)
	return ret0, ret1
}

// SearchFacesRequest indicates an expected call of SearchFacesRequest.
func (mr *MockRekognitionAPIMockRecorder) SearchFacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFacesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).SearchFacesRequest), arg0)
}

// SearchFacesWithContext mocks base method.
func (m *MockRekognitionAPI) SearchFacesWithContext(arg0 context.Context, arg1 *rekognition.SearchFacesInput, arg2 ...request.Option) (*rekognition.SearchFacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchFacesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.SearchFacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFacesWithContext indicates an expected call of SearchFacesWithContext.
func (mr *MockRekognitionAPIMockRecorder) SearchFacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFacesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).SearchFacesWithContext), varargs...)
}

// StartCelebrityRecognition mocks base method.
func (m *MockRekognitionAPI) StartCelebrityRecognition(arg0 *rekognition.StartCelebrityRecognitionInput) (*rekognition.StartCelebrityRecognitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCelebrityRecognition", arg0)
	ret0, _ := ret[0].(*rekognition.StartCelebrityRecognitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCelebrityRecognition indicates an expected call of StartCelebrityRecognition.
func (mr *MockRekognitionAPIMockRecorder) StartCelebrityRecognition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCelebrityRecognition", reflect.TypeOf((*MockRekognitionAPI)(nil).StartCelebrityRecognition), arg0)
}

// StartCelebrityRecognitionRequest mocks base method.
func (m *MockRekognitionAPI) StartCelebrityRecognitionRequest(arg0 *rekognition.StartCelebrityRecognitionInput) (*request.Request, *rekognition.StartCelebrityRecognitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCelebrityRecognitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartCelebrityRecognitionOutput)
	return ret0, ret1
}

// StartCelebrityRecognitionRequest indicates an expected call of StartCelebrityRecognitionRequest.
func (mr *MockRekognitionAPIMockRecorder) StartCelebrityRecognitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCelebrityRecognitionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartCelebrityRecognitionRequest), arg0)
}

// StartCelebrityRecognitionWithContext mocks base method.
func (m *MockRekognitionAPI) StartCelebrityRecognitionWithContext(arg0 context.Context, arg1 *rekognition.StartCelebrityRecognitionInput, arg2 ...request.Option) (*rekognition.StartCelebrityRecognitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCelebrityRecognitionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartCelebrityRecognitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCelebrityRecognitionWithContext indicates an expected call of StartCelebrityRecognitionWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartCelebrityRecognitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCelebrityRecognitionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartCelebrityRecognitionWithContext), varargs...)
}

// StartContentModeration mocks base method.
func (m *MockRekognitionAPI) StartContentModeration(arg0 *rekognition.StartContentModerationInput) (*rekognition.StartContentModerationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContentModeration", arg0)
	ret0, _ := ret[0].(*rekognition.StartContentModerationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContentModeration indicates an expected call of StartContentModeration.
func (mr *MockRekognitionAPIMockRecorder) StartContentModeration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentModeration", reflect.TypeOf((*MockRekognitionAPI)(nil).StartContentModeration), arg0)
}

// StartContentModerationRequest mocks base method.
func (m *MockRekognitionAPI) StartContentModerationRequest(arg0 *rekognition.StartContentModerationInput) (*request.Request, *rekognition.StartContentModerationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContentModerationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartContentModerationOutput)
	return ret0, ret1
}

// StartContentModerationRequest indicates an expected call of StartContentModerationRequest.
func (mr *MockRekognitionAPIMockRecorder) StartContentModerationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentModerationRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartContentModerationRequest), arg0)
}

// StartContentModerationWithContext mocks base method.
func (m *MockRekognitionAPI) StartContentModerationWithContext(arg0 context.Context, arg1 *rekognition.StartContentModerationInput, arg2 ...request.Option) (*rekognition.StartContentModerationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartContentModerationWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartContentModerationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContentModerationWithContext indicates an expected call of StartContentModerationWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartContentModerationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContentModerationWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartContentModerationWithContext), varargs...)
}

// StartFaceDetection mocks base method.
func (m *MockRekognitionAPI) StartFaceDetection(arg0 *rekognition.StartFaceDetectionInput) (*rekognition.StartFaceDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFaceDetection", arg0)
	ret0, _ := ret[0].(*rekognition.StartFaceDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFaceDetection indicates an expected call of StartFaceDetection.
func (mr *MockRekognitionAPIMockRecorder) StartFaceDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFaceDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).StartFaceDetection), arg0)
}

// StartFaceDetectionRequest mocks base method.
func (m *MockRekognitionAPI) StartFaceDetectionRequest(arg0 *rekognition.StartFaceDetectionInput) (*request.Request, *rekognition.StartFaceDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFaceDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartFaceDetectionOutput)
	return ret0, ret1
}

// StartFaceDetectionRequest indicates an expected call of StartFaceDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) StartFaceDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFaceDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartFaceDetectionRequest), arg0)
}

// StartFaceDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) StartFaceDetectionWithContext(arg0 context.Context, arg1 *rekognition.StartFaceDetectionInput, arg2 ...request.Option) (*rekognition.StartFaceDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFaceDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartFaceDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFaceDetectionWithContext indicates an expected call of StartFaceDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartFaceDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFaceDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartFaceDetectionWithContext), varargs...)
}

// StartFaceSearch mocks base method.
func (m *MockRekognitionAPI) StartFaceSearch(arg0 *rekognition.StartFaceSearchInput) (*rekognition.StartFaceSearchOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFaceSearch", arg0)
	ret0, _ := ret[0].(*rekognition.StartFaceSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFaceSearch indicates an expected call of StartFaceSearch.
func (mr *MockRekognitionAPIMockRecorder) StartFaceSearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFaceSearch", reflect.TypeOf((*MockRekognitionAPI)(nil).StartFaceSearch), arg0)
}

// StartFaceSearchRequest mocks base method.
func (m *MockRekognitionAPI) StartFaceSearchRequest(arg0 *rekognition.StartFaceSearchInput) (*request.Request, *rekognition.StartFaceSearchOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFaceSearchRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartFaceSearchOutput)
	return ret0, ret1
}

// StartFaceSearchRequest indicates an expected call of StartFaceSearchRequest.
func (mr *MockRekognitionAPIMockRecorder) StartFaceSearchRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFaceSearchRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartFaceSearchRequest), arg0)
}

// StartFaceSearchWithContext mocks base method.
func (m *MockRekognitionAPI) StartFaceSearchWithContext(arg0 context.Context, arg1 *rekognition.StartFaceSearchInput, arg2 ...request.Option) (*rekognition.StartFaceSearchOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartFaceSearchWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartFaceSearchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFaceSearchWithContext indicates an expected call of StartFaceSearchWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartFaceSearchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFaceSearchWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartFaceSearchWithContext), varargs...)
}

// StartLabelDetection mocks base method.
func (m *MockRekognitionAPI) StartLabelDetection(arg0 *rekognition.StartLabelDetectionInput) (*rekognition.StartLabelDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLabelDetection", arg0)
	ret0, _ := ret[0].(*rekognition.StartLabelDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLabelDetection indicates an expected call of StartLabelDetection.
func (mr *MockRekognitionAPIMockRecorder) StartLabelDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLabelDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).StartLabelDetection), arg0)
}

// StartLabelDetectionRequest mocks base method.
func (m *MockRekognitionAPI) StartLabelDetectionRequest(arg0 *rekognition.StartLabelDetectionInput) (*request.Request, *rekognition.StartLabelDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartLabelDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartLabelDetectionOutput)
	return ret0, ret1
}

// StartLabelDetectionRequest indicates an expected call of StartLabelDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) StartLabelDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLabelDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartLabelDetectionRequest), arg0)
}

// StartLabelDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) StartLabelDetectionWithContext(arg0 context.Context, arg1 *rekognition.StartLabelDetectionInput, arg2 ...request.Option) (*rekognition.StartLabelDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartLabelDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartLabelDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartLabelDetectionWithContext indicates an expected call of StartLabelDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartLabelDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartLabelDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartLabelDetectionWithContext), varargs...)
}

// StartPersonTracking mocks base method.
func (m *MockRekognitionAPI) StartPersonTracking(arg0 *rekognition.StartPersonTrackingInput) (*rekognition.StartPersonTrackingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPersonTracking", arg0)
	ret0, _ := ret[0].(*rekognition.StartPersonTrackingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPersonTracking indicates an expected call of StartPersonTracking.
func (mr *MockRekognitionAPIMockRecorder) StartPersonTracking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPersonTracking", reflect.TypeOf((*MockRekognitionAPI)(nil).StartPersonTracking), arg0)
}

// StartPersonTrackingRequest mocks base method.
func (m *MockRekognitionAPI) StartPersonTrackingRequest(arg0 *rekognition.StartPersonTrackingInput) (*request.Request, *rekognition.StartPersonTrackingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPersonTrackingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartPersonTrackingOutput)
	return ret0, ret1
}

// StartPersonTrackingRequest indicates an expected call of StartPersonTrackingRequest.
func (mr *MockRekognitionAPIMockRecorder) StartPersonTrackingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPersonTrackingRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartPersonTrackingRequest), arg0)
}

// StartPersonTrackingWithContext mocks base method.
func (m *MockRekognitionAPI) StartPersonTrackingWithContext(arg0 context.Context, arg1 *rekognition.StartPersonTrackingInput, arg2 ...request.Option) (*rekognition.StartPersonTrackingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartPersonTrackingWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartPersonTrackingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPersonTrackingWithContext indicates an expected call of StartPersonTrackingWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartPersonTrackingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPersonTrackingWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartPersonTrackingWithContext), varargs...)
}

// StartProjectVersion mocks base method.
func (m *MockRekognitionAPI) StartProjectVersion(arg0 *rekognition.StartProjectVersionInput) (*rekognition.StartProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProjectVersion", arg0)
	ret0, _ := ret[0].(*rekognition.StartProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProjectVersion indicates an expected call of StartProjectVersion.
func (mr *MockRekognitionAPIMockRecorder) StartProjectVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProjectVersion", reflect.TypeOf((*MockRekognitionAPI)(nil).StartProjectVersion), arg0)
}

// StartProjectVersionRequest mocks base method.
func (m *MockRekognitionAPI) StartProjectVersionRequest(arg0 *rekognition.StartProjectVersionInput) (*request.Request, *rekognition.StartProjectVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProjectVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartProjectVersionOutput)
	return ret0, ret1
}

// StartProjectVersionRequest indicates an expected call of StartProjectVersionRequest.
func (mr *MockRekognitionAPIMockRecorder) StartProjectVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProjectVersionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartProjectVersionRequest), arg0)
}

// StartProjectVersionWithContext mocks base method.
func (m *MockRekognitionAPI) StartProjectVersionWithContext(arg0 context.Context, arg1 *rekognition.StartProjectVersionInput, arg2 ...request.Option) (*rekognition.StartProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartProjectVersionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProjectVersionWithContext indicates an expected call of StartProjectVersionWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartProjectVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProjectVersionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartProjectVersionWithContext), varargs...)
}

// StartSegmentDetection mocks base method.
func (m *MockRekognitionAPI) StartSegmentDetection(arg0 *rekognition.StartSegmentDetectionInput) (*rekognition.StartSegmentDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSegmentDetection", arg0)
	ret0, _ := ret[0].(*rekognition.StartSegmentDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSegmentDetection indicates an expected call of StartSegmentDetection.
func (mr *MockRekognitionAPIMockRecorder) StartSegmentDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSegmentDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).StartSegmentDetection), arg0)
}

// StartSegmentDetectionRequest mocks base method.
func (m *MockRekognitionAPI) StartSegmentDetectionRequest(arg0 *rekognition.StartSegmentDetectionInput) (*request.Request, *rekognition.StartSegmentDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSegmentDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartSegmentDetectionOutput)
	return ret0, ret1
}

// StartSegmentDetectionRequest indicates an expected call of StartSegmentDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) StartSegmentDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSegmentDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartSegmentDetectionRequest), arg0)
}

// StartSegmentDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) StartSegmentDetectionWithContext(arg0 context.Context, arg1 *rekognition.StartSegmentDetectionInput, arg2 ...request.Option) (*rekognition.StartSegmentDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSegmentDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartSegmentDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSegmentDetectionWithContext indicates an expected call of StartSegmentDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartSegmentDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSegmentDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartSegmentDetectionWithContext), varargs...)
}

// StartStreamProcessor mocks base method.
func (m *MockRekognitionAPI) StartStreamProcessor(arg0 *rekognition.StartStreamProcessorInput) (*rekognition.StartStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStreamProcessor", arg0)
	ret0, _ := ret[0].(*rekognition.StartStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStreamProcessor indicates an expected call of StartStreamProcessor.
func (mr *MockRekognitionAPIMockRecorder) StartStreamProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStreamProcessor", reflect.TypeOf((*MockRekognitionAPI)(nil).StartStreamProcessor), arg0)
}

// StartStreamProcessorRequest mocks base method.
func (m *MockRekognitionAPI) StartStreamProcessorRequest(arg0 *rekognition.StartStreamProcessorInput) (*request.Request, *rekognition.StartStreamProcessorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStreamProcessorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartStreamProcessorOutput)
	return ret0, ret1
}

// StartStreamProcessorRequest indicates an expected call of StartStreamProcessorRequest.
func (mr *MockRekognitionAPIMockRecorder) StartStreamProcessorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStreamProcessorRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartStreamProcessorRequest), arg0)
}

// StartStreamProcessorWithContext mocks base method.
func (m *MockRekognitionAPI) StartStreamProcessorWithContext(arg0 context.Context, arg1 *rekognition.StartStreamProcessorInput, arg2 ...request.Option) (*rekognition.StartStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartStreamProcessorWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartStreamProcessorWithContext indicates an expected call of StartStreamProcessorWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartStreamProcessorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStreamProcessorWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartStreamProcessorWithContext), varargs...)
}

// StartTextDetection mocks base method.
func (m *MockRekognitionAPI) StartTextDetection(arg0 *rekognition.StartTextDetectionInput) (*rekognition.StartTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTextDetection", arg0)
	ret0, _ := ret[0].(*rekognition.StartTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTextDetection indicates an expected call of StartTextDetection.
func (mr *MockRekognitionAPIMockRecorder) StartTextDetection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTextDetection", reflect.TypeOf((*MockRekognitionAPI)(nil).StartTextDetection), arg0)
}

// StartTextDetectionRequest mocks base method.
func (m *MockRekognitionAPI) StartTextDetectionRequest(arg0 *rekognition.StartTextDetectionInput) (*request.Request, *rekognition.StartTextDetectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTextDetectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StartTextDetectionOutput)
	return ret0, ret1
}

// StartTextDetectionRequest indicates an expected call of StartTextDetectionRequest.
func (mr *MockRekognitionAPIMockRecorder) StartTextDetectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTextDetectionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StartTextDetectionRequest), arg0)
}

// StartTextDetectionWithContext mocks base method.
func (m *MockRekognitionAPI) StartTextDetectionWithContext(arg0 context.Context, arg1 *rekognition.StartTextDetectionInput, arg2 ...request.Option) (*rekognition.StartTextDetectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTextDetectionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StartTextDetectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTextDetectionWithContext indicates an expected call of StartTextDetectionWithContext.
func (mr *MockRekognitionAPIMockRecorder) StartTextDetectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTextDetectionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StartTextDetectionWithContext), varargs...)
}

// StopProjectVersion mocks base method.
func (m *MockRekognitionAPI) StopProjectVersion(arg0 *rekognition.StopProjectVersionInput) (*rekognition.StopProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopProjectVersion", arg0)
	ret0, _ := ret[0].(*rekognition.StopProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopProjectVersion indicates an expected call of StopProjectVersion.
func (mr *MockRekognitionAPIMockRecorder) StopProjectVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProjectVersion", reflect.TypeOf((*MockRekognitionAPI)(nil).StopProjectVersion), arg0)
}

// StopProjectVersionRequest mocks base method.
func (m *MockRekognitionAPI) StopProjectVersionRequest(arg0 *rekognition.StopProjectVersionInput) (*request.Request, *rekognition.StopProjectVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopProjectVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StopProjectVersionOutput)
	return ret0, ret1
}

// StopProjectVersionRequest indicates an expected call of StopProjectVersionRequest.
func (mr *MockRekognitionAPIMockRecorder) StopProjectVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProjectVersionRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StopProjectVersionRequest), arg0)
}

// StopProjectVersionWithContext mocks base method.
func (m *MockRekognitionAPI) StopProjectVersionWithContext(arg0 context.Context, arg1 *rekognition.StopProjectVersionInput, arg2 ...request.Option) (*rekognition.StopProjectVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopProjectVersionWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StopProjectVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopProjectVersionWithContext indicates an expected call of StopProjectVersionWithContext.
func (mr *MockRekognitionAPIMockRecorder) StopProjectVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProjectVersionWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StopProjectVersionWithContext), varargs...)
}

// StopStreamProcessor mocks base method.
func (m *MockRekognitionAPI) StopStreamProcessor(arg0 *rekognition.StopStreamProcessorInput) (*rekognition.StopStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStreamProcessor", arg0)
	ret0, _ := ret[0].(*rekognition.StopStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStreamProcessor indicates an expected call of StopStreamProcessor.
func (mr *MockRekognitionAPIMockRecorder) StopStreamProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStreamProcessor", reflect.TypeOf((*MockRekognitionAPI)(nil).StopStreamProcessor), arg0)
}

// StopStreamProcessorRequest mocks base method.
func (m *MockRekognitionAPI) StopStreamProcessorRequest(arg0 *rekognition.StopStreamProcessorInput) (*request.Request, *rekognition.StopStreamProcessorOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStreamProcessorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.StopStreamProcessorOutput)
	return ret0, ret1
}

// StopStreamProcessorRequest indicates an expected call of StopStreamProcessorRequest.
func (mr *MockRekognitionAPIMockRecorder) StopStreamProcessorRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStreamProcessorRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).StopStreamProcessorRequest), arg0)
}

// StopStreamProcessorWithContext mocks base method.
func (m *MockRekognitionAPI) StopStreamProcessorWithContext(arg0 context.Context, arg1 *rekognition.StopStreamProcessorInput, arg2 ...request.Option) (*rekognition.StopStreamProcessorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopStreamProcessorWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.StopStreamProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStreamProcessorWithContext indicates an expected call of StopStreamProcessorWithContext.
func (mr *MockRekognitionAPIMockRecorder) StopStreamProcessorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStreamProcessorWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).StopStreamProcessorWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockRekognitionAPI) TagResource(arg0 *rekognition.TagResourceInput) (*rekognition.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*rekognition.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockRekognitionAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRekognitionAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockRekognitionAPI) TagResourceRequest(arg0 *rekognition.TagResourceInput) (*request.Request, *rekognition.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockRekognitionAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockRekognitionAPI) TagResourceWithContext(arg0 context.Context, arg1 *rekognition.TagResourceInput, arg2 ...request.Option) (*rekognition.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockRekognitionAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockRekognitionAPI) UntagResource(arg0 *rekognition.UntagResourceInput) (*rekognition.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*rekognition.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockRekognitionAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRekognitionAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockRekognitionAPI) UntagResourceRequest(arg0 *rekognition.UntagResourceInput) (*request.Request, *rekognition.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockRekognitionAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockRekognitionAPI) UntagResourceWithContext(arg0 context.Context, arg1 *rekognition.UntagResourceInput, arg2 ...request.Option) (*rekognition.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockRekognitionAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateDatasetEntries mocks base method.
func (m *MockRekognitionAPI) UpdateDatasetEntries(arg0 *rekognition.UpdateDatasetEntriesInput) (*rekognition.UpdateDatasetEntriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetEntries", arg0)
	ret0, _ := ret[0].(*rekognition.UpdateDatasetEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetEntries indicates an expected call of UpdateDatasetEntries.
func (mr *MockRekognitionAPIMockRecorder) UpdateDatasetEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetEntries", reflect.TypeOf((*MockRekognitionAPI)(nil).UpdateDatasetEntries), arg0)
}

// UpdateDatasetEntriesRequest mocks base method.
func (m *MockRekognitionAPI) UpdateDatasetEntriesRequest(arg0 *rekognition.UpdateDatasetEntriesInput) (*request.Request, *rekognition.UpdateDatasetEntriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetEntriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*rekognition.UpdateDatasetEntriesOutput)
	return ret0, ret1
}

// UpdateDatasetEntriesRequest indicates an expected call of UpdateDatasetEntriesRequest.
func (mr *MockRekognitionAPIMockRecorder) UpdateDatasetEntriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetEntriesRequest", reflect.TypeOf((*MockRekognitionAPI)(nil).UpdateDatasetEntriesRequest), arg0)
}

// UpdateDatasetEntriesWithContext mocks base method.
func (m *MockRekognitionAPI) UpdateDatasetEntriesWithContext(arg0 context.Context, arg1 *rekognition.UpdateDatasetEntriesInput, arg2 ...request.Option) (*rekognition.UpdateDatasetEntriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatasetEntriesWithContext", varargs...)
	ret0, _ := ret[0].(*rekognition.UpdateDatasetEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetEntriesWithContext indicates an expected call of UpdateDatasetEntriesWithContext.
func (mr *MockRekognitionAPIMockRecorder) UpdateDatasetEntriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetEntriesWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).UpdateDatasetEntriesWithContext), varargs...)
}

// WaitUntilProjectVersionRunning mocks base method.
func (m *MockRekognitionAPI) WaitUntilProjectVersionRunning(arg0 *rekognition.DescribeProjectVersionsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilProjectVersionRunning", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilProjectVersionRunning indicates an expected call of WaitUntilProjectVersionRunning.
func (mr *MockRekognitionAPIMockRecorder) WaitUntilProjectVersionRunning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilProjectVersionRunning", reflect.TypeOf((*MockRekognitionAPI)(nil).WaitUntilProjectVersionRunning), arg0)
}

// WaitUntilProjectVersionRunningWithContext mocks base method.
func (m *MockRekognitionAPI) WaitUntilProjectVersionRunningWithContext(arg0 context.Context, arg1 *rekognition.DescribeProjectVersionsInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilProjectVersionRunningWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilProjectVersionRunningWithContext indicates an expected call of WaitUntilProjectVersionRunningWithContext.
func (mr *MockRekognitionAPIMockRecorder) WaitUntilProjectVersionRunningWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilProjectVersionRunningWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).WaitUntilProjectVersionRunningWithContext), varargs...)
}

// WaitUntilProjectVersionTrainingCompleted mocks base method.
func (m *MockRekognitionAPI) WaitUntilProjectVersionTrainingCompleted(arg0 *rekognition.DescribeProjectVersionsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilProjectVersionTrainingCompleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilProjectVersionTrainingCompleted indicates an expected call of WaitUntilProjectVersionTrainingCompleted.
func (mr *MockRekognitionAPIMockRecorder) WaitUntilProjectVersionTrainingCompleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilProjectVersionTrainingCompleted", reflect.TypeOf((*MockRekognitionAPI)(nil).WaitUntilProjectVersionTrainingCompleted), arg0)
}

// WaitUntilProjectVersionTrainingCompletedWithContext mocks base method.
func (m *MockRekognitionAPI) WaitUntilProjectVersionTrainingCompletedWithContext(arg0 context.Context, arg1 *rekognition.DescribeProjectVersionsInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilProjectVersionTrainingCompletedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilProjectVersionTrainingCompletedWithContext indicates an expected call of WaitUntilProjectVersionTrainingCompletedWithContext.
func (mr *MockRekognitionAPIMockRecorder) WaitUntilProjectVersionTrainingCompletedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilProjectVersionTrainingCompletedWithContext", reflect.TypeOf((*MockRekognitionAPI)(nil).WaitUntilProjectVersionTrainingCompletedWithContext), varargs...)
}

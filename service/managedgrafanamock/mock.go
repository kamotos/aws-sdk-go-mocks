// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/managedgrafana/managedgrafanaiface (interfaces: ManagedGrafanaAPI)

// Package managedgrafanamock is a generated GoMock package.
package managedgrafanamock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	managedgrafana "github.com/aws/aws-sdk-go/service/managedgrafana"
	gomock "github.com/golang/mock/gomock"
)

// MockManagedGrafanaAPI is a mock of ManagedGrafanaAPI interface.
type MockManagedGrafanaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockManagedGrafanaAPIMockRecorder
}

// MockManagedGrafanaAPIMockRecorder is the mock recorder for MockManagedGrafanaAPI.
type MockManagedGrafanaAPIMockRecorder struct {
	mock *MockManagedGrafanaAPI
}

// NewMockManagedGrafanaAPI creates a new mock instance.
func NewMockManagedGrafanaAPI(ctrl *gomock.Controller) *MockManagedGrafanaAPI {
	mock := &MockManagedGrafanaAPI{ctrl: ctrl}
	mock.recorder = &MockManagedGrafanaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedGrafanaAPI) EXPECT() *MockManagedGrafanaAPIMockRecorder {
	return m.recorder
}

// AssociateLicense mocks base method.
func (m *MockManagedGrafanaAPI) AssociateLicense(arg0 *managedgrafana.AssociateLicenseInput) (*managedgrafana.AssociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLicense", arg0)
	ret0, _ := ret[0].(*managedgrafana.AssociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLicense indicates an expected call of AssociateLicense.
func (mr *MockManagedGrafanaAPIMockRecorder) AssociateLicense(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLicense", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).AssociateLicense), arg0)
}

// AssociateLicenseRequest mocks base method.
func (m *MockManagedGrafanaAPI) AssociateLicenseRequest(arg0 *managedgrafana.AssociateLicenseInput) (*request.Request, *managedgrafana.AssociateLicenseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateLicenseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.AssociateLicenseOutput)
	return ret0, ret1
}

// AssociateLicenseRequest indicates an expected call of AssociateLicenseRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) AssociateLicenseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLicenseRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).AssociateLicenseRequest), arg0)
}

// AssociateLicenseWithContext mocks base method.
func (m *MockManagedGrafanaAPI) AssociateLicenseWithContext(arg0 context.Context, arg1 *managedgrafana.AssociateLicenseInput, arg2 ...request.Option) (*managedgrafana.AssociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateLicenseWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.AssociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateLicenseWithContext indicates an expected call of AssociateLicenseWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) AssociateLicenseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateLicenseWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).AssociateLicenseWithContext), varargs...)
}

// CreateWorkspace mocks base method.
func (m *MockManagedGrafanaAPI) CreateWorkspace(arg0 *managedgrafana.CreateWorkspaceInput) (*managedgrafana.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspace), arg0)
}

// CreateWorkspaceRequest mocks base method.
func (m *MockManagedGrafanaAPI) CreateWorkspaceRequest(arg0 *managedgrafana.CreateWorkspaceInput) (*request.Request, *managedgrafana.CreateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.CreateWorkspaceOutput)
	return ret0, ret1
}

// CreateWorkspaceRequest indicates an expected call of CreateWorkspaceRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceRequest), arg0)
}

// CreateWorkspaceWithContext mocks base method.
func (m *MockManagedGrafanaAPI) CreateWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.CreateWorkspaceInput, arg2 ...request.Option) (*managedgrafana.CreateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.CreateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceWithContext indicates an expected call of CreateWorkspaceWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) CreateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).CreateWorkspaceWithContext), varargs...)
}

// DeleteWorkspace mocks base method.
func (m *MockManagedGrafanaAPI) DeleteWorkspace(arg0 *managedgrafana.DeleteWorkspaceInput) (*managedgrafana.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspace), arg0)
}

// DeleteWorkspaceRequest mocks base method.
func (m *MockManagedGrafanaAPI) DeleteWorkspaceRequest(arg0 *managedgrafana.DeleteWorkspaceInput) (*request.Request, *managedgrafana.DeleteWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DeleteWorkspaceOutput)
	return ret0, ret1
}

// DeleteWorkspaceRequest indicates an expected call of DeleteWorkspaceRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceRequest), arg0)
}

// DeleteWorkspaceWithContext mocks base method.
func (m *MockManagedGrafanaAPI) DeleteWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.DeleteWorkspaceInput, arg2 ...request.Option) (*managedgrafana.DeleteWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DeleteWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkspaceWithContext indicates an expected call of DeleteWorkspaceWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) DeleteWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DeleteWorkspaceWithContext), varargs...)
}

// DescribeWorkspace mocks base method.
func (m *MockManagedGrafanaAPI) DescribeWorkspace(arg0 *managedgrafana.DescribeWorkspaceInput) (*managedgrafana.DescribeWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspace indicates an expected call of DescribeWorkspace.
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspace), arg0)
}

// DescribeWorkspaceAuthentication mocks base method.
func (m *MockManagedGrafanaAPI) DescribeWorkspaceAuthentication(arg0 *managedgrafana.DescribeWorkspaceAuthenticationInput) (*managedgrafana.DescribeWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceAuthentication", arg0)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceAuthentication indicates an expected call of DescribeWorkspaceAuthentication.
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceAuthentication", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceAuthentication), arg0)
}

// DescribeWorkspaceAuthenticationRequest mocks base method.
func (m *MockManagedGrafanaAPI) DescribeWorkspaceAuthenticationRequest(arg0 *managedgrafana.DescribeWorkspaceAuthenticationInput) (*request.Request, *managedgrafana.DescribeWorkspaceAuthenticationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceAuthenticationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DescribeWorkspaceAuthenticationOutput)
	return ret0, ret1
}

// DescribeWorkspaceAuthenticationRequest indicates an expected call of DescribeWorkspaceAuthenticationRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceAuthenticationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceAuthenticationRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceAuthenticationRequest), arg0)
}

// DescribeWorkspaceAuthenticationWithContext mocks base method.
func (m *MockManagedGrafanaAPI) DescribeWorkspaceAuthenticationWithContext(arg0 context.Context, arg1 *managedgrafana.DescribeWorkspaceAuthenticationInput, arg2 ...request.Option) (*managedgrafana.DescribeWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceAuthenticationWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceAuthenticationWithContext indicates an expected call of DescribeWorkspaceAuthenticationWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceAuthenticationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceAuthenticationWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceAuthenticationWithContext), varargs...)
}

// DescribeWorkspaceRequest mocks base method.
func (m *MockManagedGrafanaAPI) DescribeWorkspaceRequest(arg0 *managedgrafana.DescribeWorkspaceInput) (*request.Request, *managedgrafana.DescribeWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DescribeWorkspaceOutput)
	return ret0, ret1
}

// DescribeWorkspaceRequest indicates an expected call of DescribeWorkspaceRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceRequest), arg0)
}

// DescribeWorkspaceWithContext mocks base method.
func (m *MockManagedGrafanaAPI) DescribeWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.DescribeWorkspaceInput, arg2 ...request.Option) (*managedgrafana.DescribeWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DescribeWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeWorkspaceWithContext indicates an expected call of DescribeWorkspaceWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) DescribeWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DescribeWorkspaceWithContext), varargs...)
}

// DisassociateLicense mocks base method.
func (m *MockManagedGrafanaAPI) DisassociateLicense(arg0 *managedgrafana.DisassociateLicenseInput) (*managedgrafana.DisassociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLicense", arg0)
	ret0, _ := ret[0].(*managedgrafana.DisassociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLicense indicates an expected call of DisassociateLicense.
func (mr *MockManagedGrafanaAPIMockRecorder) DisassociateLicense(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLicense", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DisassociateLicense), arg0)
}

// DisassociateLicenseRequest mocks base method.
func (m *MockManagedGrafanaAPI) DisassociateLicenseRequest(arg0 *managedgrafana.DisassociateLicenseInput) (*request.Request, *managedgrafana.DisassociateLicenseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateLicenseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.DisassociateLicenseOutput)
	return ret0, ret1
}

// DisassociateLicenseRequest indicates an expected call of DisassociateLicenseRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) DisassociateLicenseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLicenseRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DisassociateLicenseRequest), arg0)
}

// DisassociateLicenseWithContext mocks base method.
func (m *MockManagedGrafanaAPI) DisassociateLicenseWithContext(arg0 context.Context, arg1 *managedgrafana.DisassociateLicenseInput, arg2 ...request.Option) (*managedgrafana.DisassociateLicenseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateLicenseWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.DisassociateLicenseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateLicenseWithContext indicates an expected call of DisassociateLicenseWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) DisassociateLicenseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateLicenseWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).DisassociateLicenseWithContext), varargs...)
}

// ListPermissions mocks base method.
func (m *MockManagedGrafanaAPI) ListPermissions(arg0 *managedgrafana.ListPermissionsInput) (*managedgrafana.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissions), arg0)
}

// ListPermissionsPages mocks base method.
func (m *MockManagedGrafanaAPI) ListPermissionsPages(arg0 *managedgrafana.ListPermissionsInput, arg1 func(*managedgrafana.ListPermissionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPages indicates an expected call of ListPermissionsPages.
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPages", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsPages), arg0, arg1)
}

// ListPermissionsPagesWithContext mocks base method.
func (m *MockManagedGrafanaAPI) ListPermissionsPagesWithContext(arg0 context.Context, arg1 *managedgrafana.ListPermissionsInput, arg2 func(*managedgrafana.ListPermissionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPermissionsPagesWithContext indicates an expected call of ListPermissionsPagesWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsPagesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsPagesWithContext), varargs...)
}

// ListPermissionsRequest mocks base method.
func (m *MockManagedGrafanaAPI) ListPermissionsRequest(arg0 *managedgrafana.ListPermissionsInput) (*request.Request, *managedgrafana.ListPermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListPermissionsOutput)
	return ret0, ret1
}

// ListPermissionsRequest indicates an expected call of ListPermissionsRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsRequest), arg0)
}

// ListPermissionsWithContext mocks base method.
func (m *MockManagedGrafanaAPI) ListPermissionsWithContext(arg0 context.Context, arg1 *managedgrafana.ListPermissionsInput, arg2 ...request.Option) (*managedgrafana.ListPermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListPermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissionsWithContext indicates an expected call of ListPermissionsWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) ListPermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissionsWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListPermissionsWithContext), varargs...)
}

// ListWorkspaces mocks base method.
func (m *MockManagedGrafanaAPI) ListWorkspaces(arg0 *managedgrafana.ListWorkspacesInput) (*managedgrafana.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaces", arg0)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaces indicates an expected call of ListWorkspaces.
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaces", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspaces), arg0)
}

// ListWorkspacesPages mocks base method.
func (m *MockManagedGrafanaAPI) ListWorkspacesPages(arg0 *managedgrafana.ListWorkspacesInput, arg1 func(*managedgrafana.ListWorkspacesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPages indicates an expected call of ListWorkspacesPages.
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPages", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesPages), arg0, arg1)
}

// ListWorkspacesPagesWithContext mocks base method.
func (m *MockManagedGrafanaAPI) ListWorkspacesPagesWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspacesInput, arg2 func(*managedgrafana.ListWorkspacesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkspacesPagesWithContext indicates an expected call of ListWorkspacesPagesWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesPagesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesPagesWithContext), varargs...)
}

// ListWorkspacesRequest mocks base method.
func (m *MockManagedGrafanaAPI) ListWorkspacesRequest(arg0 *managedgrafana.ListWorkspacesInput) (*request.Request, *managedgrafana.ListWorkspacesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.ListWorkspacesOutput)
	return ret0, ret1
}

// ListWorkspacesRequest indicates an expected call of ListWorkspacesRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesRequest), arg0)
}

// ListWorkspacesWithContext mocks base method.
func (m *MockManagedGrafanaAPI) ListWorkspacesWithContext(arg0 context.Context, arg1 *managedgrafana.ListWorkspacesInput, arg2 ...request.Option) (*managedgrafana.ListWorkspacesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkspacesWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.ListWorkspacesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacesWithContext indicates an expected call of ListWorkspacesWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) ListWorkspacesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).ListWorkspacesWithContext), varargs...)
}

// UpdatePermissions mocks base method.
func (m *MockManagedGrafanaAPI) UpdatePermissions(arg0 *managedgrafana.UpdatePermissionsInput) (*managedgrafana.UpdatePermissionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissions", arg0)
	ret0, _ := ret[0].(*managedgrafana.UpdatePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissions indicates an expected call of UpdatePermissions.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdatePermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissions", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdatePermissions), arg0)
}

// UpdatePermissionsRequest mocks base method.
func (m *MockManagedGrafanaAPI) UpdatePermissionsRequest(arg0 *managedgrafana.UpdatePermissionsInput) (*request.Request, *managedgrafana.UpdatePermissionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UpdatePermissionsOutput)
	return ret0, ret1
}

// UpdatePermissionsRequest indicates an expected call of UpdatePermissionsRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdatePermissionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionsRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdatePermissionsRequest), arg0)
}

// UpdatePermissionsWithContext mocks base method.
func (m *MockManagedGrafanaAPI) UpdatePermissionsWithContext(arg0 context.Context, arg1 *managedgrafana.UpdatePermissionsInput, arg2 ...request.Option) (*managedgrafana.UpdatePermissionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermissionsWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UpdatePermissionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissionsWithContext indicates an expected call of UpdatePermissionsWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdatePermissionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissionsWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdatePermissionsWithContext), varargs...)
}

// UpdateWorkspace mocks base method.
func (m *MockManagedGrafanaAPI) UpdateWorkspace(arg0 *managedgrafana.UpdateWorkspaceInput) (*managedgrafana.UpdateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", arg0)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspace), arg0)
}

// UpdateWorkspaceAuthentication mocks base method.
func (m *MockManagedGrafanaAPI) UpdateWorkspaceAuthentication(arg0 *managedgrafana.UpdateWorkspaceAuthenticationInput) (*managedgrafana.UpdateWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceAuthentication", arg0)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceAuthentication indicates an expected call of UpdateWorkspaceAuthentication.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceAuthentication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAuthentication", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceAuthentication), arg0)
}

// UpdateWorkspaceAuthenticationRequest mocks base method.
func (m *MockManagedGrafanaAPI) UpdateWorkspaceAuthenticationRequest(arg0 *managedgrafana.UpdateWorkspaceAuthenticationInput) (*request.Request, *managedgrafana.UpdateWorkspaceAuthenticationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceAuthenticationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UpdateWorkspaceAuthenticationOutput)
	return ret0, ret1
}

// UpdateWorkspaceAuthenticationRequest indicates an expected call of UpdateWorkspaceAuthenticationRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceAuthenticationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAuthenticationRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceAuthenticationRequest), arg0)
}

// UpdateWorkspaceAuthenticationWithContext mocks base method.
func (m *MockManagedGrafanaAPI) UpdateWorkspaceAuthenticationWithContext(arg0 context.Context, arg1 *managedgrafana.UpdateWorkspaceAuthenticationInput, arg2 ...request.Option) (*managedgrafana.UpdateWorkspaceAuthenticationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceAuthenticationWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceAuthenticationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceAuthenticationWithContext indicates an expected call of UpdateWorkspaceAuthenticationWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceAuthenticationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceAuthenticationWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceAuthenticationWithContext), varargs...)
}

// UpdateWorkspaceRequest mocks base method.
func (m *MockManagedGrafanaAPI) UpdateWorkspaceRequest(arg0 *managedgrafana.UpdateWorkspaceInput) (*request.Request, *managedgrafana.UpdateWorkspaceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*managedgrafana.UpdateWorkspaceOutput)
	return ret0, ret1
}

// UpdateWorkspaceRequest indicates an expected call of UpdateWorkspaceRequest.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceRequest", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceRequest), arg0)
}

// UpdateWorkspaceWithContext mocks base method.
func (m *MockManagedGrafanaAPI) UpdateWorkspaceWithContext(arg0 context.Context, arg1 *managedgrafana.UpdateWorkspaceInput, arg2 ...request.Option) (*managedgrafana.UpdateWorkspaceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkspaceWithContext", varargs...)
	ret0, _ := ret[0].(*managedgrafana.UpdateWorkspaceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceWithContext indicates an expected call of UpdateWorkspaceWithContext.
func (mr *MockManagedGrafanaAPIMockRecorder) UpdateWorkspaceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceWithContext", reflect.TypeOf((*MockManagedGrafanaAPI)(nil).UpdateWorkspaceWithContext), varargs...)
}

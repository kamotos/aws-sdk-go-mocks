// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/iotdeviceadvisor/iotdeviceadvisoriface (interfaces: IoTDeviceAdvisorAPI)

// Package iotdeviceadvisormock is a generated GoMock package.
package iotdeviceadvisormock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	iotdeviceadvisor "github.com/aws/aws-sdk-go/service/iotdeviceadvisor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIoTDeviceAdvisorAPI is a mock of IoTDeviceAdvisorAPI interface
type MockIoTDeviceAdvisorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIoTDeviceAdvisorAPIMockRecorder
}

// MockIoTDeviceAdvisorAPIMockRecorder is the mock recorder for MockIoTDeviceAdvisorAPI
type MockIoTDeviceAdvisorAPIMockRecorder struct {
	mock *MockIoTDeviceAdvisorAPI
}

// NewMockIoTDeviceAdvisorAPI creates a new mock instance
func NewMockIoTDeviceAdvisorAPI(ctrl *gomock.Controller) *MockIoTDeviceAdvisorAPI {
	mock := &MockIoTDeviceAdvisorAPI{ctrl: ctrl}
	mock.recorder = &MockIoTDeviceAdvisorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIoTDeviceAdvisorAPI) EXPECT() *MockIoTDeviceAdvisorAPIMockRecorder {
	return m.recorder
}

// CreateSuiteDefinition mocks base method
func (m *MockIoTDeviceAdvisorAPI) CreateSuiteDefinition(arg0 *iotdeviceadvisor.CreateSuiteDefinitionInput) (*iotdeviceadvisor.CreateSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSuiteDefinition", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.CreateSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSuiteDefinition indicates an expected call of CreateSuiteDefinition
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) CreateSuiteDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSuiteDefinition", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).CreateSuiteDefinition), arg0)
}

// CreateSuiteDefinitionRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) CreateSuiteDefinitionRequest(arg0 *iotdeviceadvisor.CreateSuiteDefinitionInput) (*request.Request, *iotdeviceadvisor.CreateSuiteDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSuiteDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.CreateSuiteDefinitionOutput)
	return ret0, ret1
}

// CreateSuiteDefinitionRequest indicates an expected call of CreateSuiteDefinitionRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) CreateSuiteDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSuiteDefinitionRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).CreateSuiteDefinitionRequest), arg0)
}

// CreateSuiteDefinitionWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) CreateSuiteDefinitionWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.CreateSuiteDefinitionInput, arg2 ...request.Option) (*iotdeviceadvisor.CreateSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSuiteDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.CreateSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSuiteDefinitionWithContext indicates an expected call of CreateSuiteDefinitionWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) CreateSuiteDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSuiteDefinitionWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).CreateSuiteDefinitionWithContext), varargs...)
}

// DeleteSuiteDefinition mocks base method
func (m *MockIoTDeviceAdvisorAPI) DeleteSuiteDefinition(arg0 *iotdeviceadvisor.DeleteSuiteDefinitionInput) (*iotdeviceadvisor.DeleteSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuiteDefinition", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.DeleteSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSuiteDefinition indicates an expected call of DeleteSuiteDefinition
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) DeleteSuiteDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuiteDefinition", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).DeleteSuiteDefinition), arg0)
}

// DeleteSuiteDefinitionRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) DeleteSuiteDefinitionRequest(arg0 *iotdeviceadvisor.DeleteSuiteDefinitionInput) (*request.Request, *iotdeviceadvisor.DeleteSuiteDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuiteDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.DeleteSuiteDefinitionOutput)
	return ret0, ret1
}

// DeleteSuiteDefinitionRequest indicates an expected call of DeleteSuiteDefinitionRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) DeleteSuiteDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuiteDefinitionRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).DeleteSuiteDefinitionRequest), arg0)
}

// DeleteSuiteDefinitionWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) DeleteSuiteDefinitionWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.DeleteSuiteDefinitionInput, arg2 ...request.Option) (*iotdeviceadvisor.DeleteSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSuiteDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.DeleteSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSuiteDefinitionWithContext indicates an expected call of DeleteSuiteDefinitionWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) DeleteSuiteDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuiteDefinitionWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).DeleteSuiteDefinitionWithContext), varargs...)
}

// GetSuiteDefinition mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteDefinition(arg0 *iotdeviceadvisor.GetSuiteDefinitionInput) (*iotdeviceadvisor.GetSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuiteDefinition", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.GetSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuiteDefinition indicates an expected call of GetSuiteDefinition
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteDefinition", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteDefinition), arg0)
}

// GetSuiteDefinitionRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteDefinitionRequest(arg0 *iotdeviceadvisor.GetSuiteDefinitionInput) (*request.Request, *iotdeviceadvisor.GetSuiteDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuiteDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.GetSuiteDefinitionOutput)
	return ret0, ret1
}

// GetSuiteDefinitionRequest indicates an expected call of GetSuiteDefinitionRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteDefinitionRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteDefinitionRequest), arg0)
}

// GetSuiteDefinitionWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteDefinitionWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.GetSuiteDefinitionInput, arg2 ...request.Option) (*iotdeviceadvisor.GetSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuiteDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.GetSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuiteDefinitionWithContext indicates an expected call of GetSuiteDefinitionWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteDefinitionWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteDefinitionWithContext), varargs...)
}

// GetSuiteRun mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteRun(arg0 *iotdeviceadvisor.GetSuiteRunInput) (*iotdeviceadvisor.GetSuiteRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuiteRun", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.GetSuiteRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuiteRun indicates an expected call of GetSuiteRun
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteRun", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteRun), arg0)
}

// GetSuiteRunReport mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteRunReport(arg0 *iotdeviceadvisor.GetSuiteRunReportInput) (*iotdeviceadvisor.GetSuiteRunReportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuiteRunReport", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.GetSuiteRunReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuiteRunReport indicates an expected call of GetSuiteRunReport
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteRunReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteRunReport", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteRunReport), arg0)
}

// GetSuiteRunReportRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteRunReportRequest(arg0 *iotdeviceadvisor.GetSuiteRunReportInput) (*request.Request, *iotdeviceadvisor.GetSuiteRunReportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuiteRunReportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.GetSuiteRunReportOutput)
	return ret0, ret1
}

// GetSuiteRunReportRequest indicates an expected call of GetSuiteRunReportRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteRunReportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteRunReportRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteRunReportRequest), arg0)
}

// GetSuiteRunReportWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteRunReportWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.GetSuiteRunReportInput, arg2 ...request.Option) (*iotdeviceadvisor.GetSuiteRunReportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuiteRunReportWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.GetSuiteRunReportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuiteRunReportWithContext indicates an expected call of GetSuiteRunReportWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteRunReportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteRunReportWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteRunReportWithContext), varargs...)
}

// GetSuiteRunRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteRunRequest(arg0 *iotdeviceadvisor.GetSuiteRunInput) (*request.Request, *iotdeviceadvisor.GetSuiteRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuiteRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.GetSuiteRunOutput)
	return ret0, ret1
}

// GetSuiteRunRequest indicates an expected call of GetSuiteRunRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteRunRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteRunRequest), arg0)
}

// GetSuiteRunWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) GetSuiteRunWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.GetSuiteRunInput, arg2 ...request.Option) (*iotdeviceadvisor.GetSuiteRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuiteRunWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.GetSuiteRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuiteRunWithContext indicates an expected call of GetSuiteRunWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) GetSuiteRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuiteRunWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).GetSuiteRunWithContext), varargs...)
}

// ListSuiteDefinitions mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteDefinitions(arg0 *iotdeviceadvisor.ListSuiteDefinitionsInput) (*iotdeviceadvisor.ListSuiteDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuiteDefinitions", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListSuiteDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuiteDefinitions indicates an expected call of ListSuiteDefinitions
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteDefinitions", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteDefinitions), arg0)
}

// ListSuiteDefinitionsPages mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteDefinitionsPages(arg0 *iotdeviceadvisor.ListSuiteDefinitionsInput, arg1 func(*iotdeviceadvisor.ListSuiteDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuiteDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuiteDefinitionsPages indicates an expected call of ListSuiteDefinitionsPages
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteDefinitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteDefinitionsPages", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteDefinitionsPages), arg0, arg1)
}

// ListSuiteDefinitionsPagesWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteDefinitionsPagesWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.ListSuiteDefinitionsInput, arg2 func(*iotdeviceadvisor.ListSuiteDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuiteDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuiteDefinitionsPagesWithContext indicates an expected call of ListSuiteDefinitionsPagesWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteDefinitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteDefinitionsPagesWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteDefinitionsPagesWithContext), varargs...)
}

// ListSuiteDefinitionsRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteDefinitionsRequest(arg0 *iotdeviceadvisor.ListSuiteDefinitionsInput) (*request.Request, *iotdeviceadvisor.ListSuiteDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuiteDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.ListSuiteDefinitionsOutput)
	return ret0, ret1
}

// ListSuiteDefinitionsRequest indicates an expected call of ListSuiteDefinitionsRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteDefinitionsRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteDefinitionsRequest), arg0)
}

// ListSuiteDefinitionsWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteDefinitionsWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.ListSuiteDefinitionsInput, arg2 ...request.Option) (*iotdeviceadvisor.ListSuiteDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuiteDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListSuiteDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuiteDefinitionsWithContext indicates an expected call of ListSuiteDefinitionsWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteDefinitionsWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteDefinitionsWithContext), varargs...)
}

// ListSuiteRuns mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteRuns(arg0 *iotdeviceadvisor.ListSuiteRunsInput) (*iotdeviceadvisor.ListSuiteRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuiteRuns", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListSuiteRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuiteRuns indicates an expected call of ListSuiteRuns
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteRuns", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteRuns), arg0)
}

// ListSuiteRunsPages mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteRunsPages(arg0 *iotdeviceadvisor.ListSuiteRunsInput, arg1 func(*iotdeviceadvisor.ListSuiteRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuiteRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuiteRunsPages indicates an expected call of ListSuiteRunsPages
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteRunsPages", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteRunsPages), arg0, arg1)
}

// ListSuiteRunsPagesWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteRunsPagesWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.ListSuiteRunsInput, arg2 func(*iotdeviceadvisor.ListSuiteRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuiteRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSuiteRunsPagesWithContext indicates an expected call of ListSuiteRunsPagesWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteRunsPagesWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteRunsPagesWithContext), varargs...)
}

// ListSuiteRunsRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteRunsRequest(arg0 *iotdeviceadvisor.ListSuiteRunsInput) (*request.Request, *iotdeviceadvisor.ListSuiteRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSuiteRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.ListSuiteRunsOutput)
	return ret0, ret1
}

// ListSuiteRunsRequest indicates an expected call of ListSuiteRunsRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteRunsRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteRunsRequest), arg0)
}

// ListSuiteRunsWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListSuiteRunsWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.ListSuiteRunsInput, arg2 ...request.Option) (*iotdeviceadvisor.ListSuiteRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSuiteRunsWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListSuiteRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSuiteRunsWithContext indicates an expected call of ListSuiteRunsWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListSuiteRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSuiteRunsWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListSuiteRunsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTagsForResource(arg0 *iotdeviceadvisor.ListTagsForResourceInput) (*iotdeviceadvisor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTagsForResourceRequest(arg0 *iotdeviceadvisor.ListTagsForResourceInput) (*request.Request, *iotdeviceadvisor.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.ListTagsForResourceInput, arg2 ...request.Option) (*iotdeviceadvisor.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListTestCases mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTestCases(arg0 *iotdeviceadvisor.ListTestCasesInput) (*iotdeviceadvisor.ListTestCasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCases", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListTestCasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCases indicates an expected call of ListTestCases
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTestCases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCases", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTestCases), arg0)
}

// ListTestCasesPages mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTestCasesPages(arg0 *iotdeviceadvisor.ListTestCasesInput, arg1 func(*iotdeviceadvisor.ListTestCasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTestCasesPages indicates an expected call of ListTestCasesPages
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTestCasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCasesPages", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTestCasesPages), arg0, arg1)
}

// ListTestCasesPagesWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTestCasesPagesWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.ListTestCasesInput, arg2 func(*iotdeviceadvisor.ListTestCasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTestCasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTestCasesPagesWithContext indicates an expected call of ListTestCasesPagesWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTestCasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCasesPagesWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTestCasesPagesWithContext), varargs...)
}

// ListTestCasesRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTestCasesRequest(arg0 *iotdeviceadvisor.ListTestCasesInput) (*request.Request, *iotdeviceadvisor.ListTestCasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.ListTestCasesOutput)
	return ret0, ret1
}

// ListTestCasesRequest indicates an expected call of ListTestCasesRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTestCasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCasesRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTestCasesRequest), arg0)
}

// ListTestCasesWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) ListTestCasesWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.ListTestCasesInput, arg2 ...request.Option) (*iotdeviceadvisor.ListTestCasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTestCasesWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.ListTestCasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCasesWithContext indicates an expected call of ListTestCasesWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) ListTestCasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCasesWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).ListTestCasesWithContext), varargs...)
}

// StartSuiteRun mocks base method
func (m *MockIoTDeviceAdvisorAPI) StartSuiteRun(arg0 *iotdeviceadvisor.StartSuiteRunInput) (*iotdeviceadvisor.StartSuiteRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSuiteRun", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.StartSuiteRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSuiteRun indicates an expected call of StartSuiteRun
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) StartSuiteRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSuiteRun", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).StartSuiteRun), arg0)
}

// StartSuiteRunRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) StartSuiteRunRequest(arg0 *iotdeviceadvisor.StartSuiteRunInput) (*request.Request, *iotdeviceadvisor.StartSuiteRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSuiteRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.StartSuiteRunOutput)
	return ret0, ret1
}

// StartSuiteRunRequest indicates an expected call of StartSuiteRunRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) StartSuiteRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSuiteRunRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).StartSuiteRunRequest), arg0)
}

// StartSuiteRunWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) StartSuiteRunWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.StartSuiteRunInput, arg2 ...request.Option) (*iotdeviceadvisor.StartSuiteRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSuiteRunWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.StartSuiteRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSuiteRunWithContext indicates an expected call of StartSuiteRunWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) StartSuiteRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSuiteRunWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).StartSuiteRunWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockIoTDeviceAdvisorAPI) TagResource(arg0 *iotdeviceadvisor.TagResourceInput) (*iotdeviceadvisor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) TagResourceRequest(arg0 *iotdeviceadvisor.TagResourceInput) (*request.Request, *iotdeviceadvisor.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) TagResourceWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.TagResourceInput, arg2 ...request.Option) (*iotdeviceadvisor.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockIoTDeviceAdvisorAPI) UntagResource(arg0 *iotdeviceadvisor.UntagResourceInput) (*iotdeviceadvisor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) UntagResourceRequest(arg0 *iotdeviceadvisor.UntagResourceInput) (*request.Request, *iotdeviceadvisor.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) UntagResourceWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.UntagResourceInput, arg2 ...request.Option) (*iotdeviceadvisor.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateSuiteDefinition mocks base method
func (m *MockIoTDeviceAdvisorAPI) UpdateSuiteDefinition(arg0 *iotdeviceadvisor.UpdateSuiteDefinitionInput) (*iotdeviceadvisor.UpdateSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSuiteDefinition", arg0)
	ret0, _ := ret[0].(*iotdeviceadvisor.UpdateSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSuiteDefinition indicates an expected call of UpdateSuiteDefinition
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) UpdateSuiteDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuiteDefinition", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).UpdateSuiteDefinition), arg0)
}

// UpdateSuiteDefinitionRequest mocks base method
func (m *MockIoTDeviceAdvisorAPI) UpdateSuiteDefinitionRequest(arg0 *iotdeviceadvisor.UpdateSuiteDefinitionInput) (*request.Request, *iotdeviceadvisor.UpdateSuiteDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSuiteDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*iotdeviceadvisor.UpdateSuiteDefinitionOutput)
	return ret0, ret1
}

// UpdateSuiteDefinitionRequest indicates an expected call of UpdateSuiteDefinitionRequest
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) UpdateSuiteDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuiteDefinitionRequest", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).UpdateSuiteDefinitionRequest), arg0)
}

// UpdateSuiteDefinitionWithContext mocks base method
func (m *MockIoTDeviceAdvisorAPI) UpdateSuiteDefinitionWithContext(arg0 context.Context, arg1 *iotdeviceadvisor.UpdateSuiteDefinitionInput, arg2 ...request.Option) (*iotdeviceadvisor.UpdateSuiteDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSuiteDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*iotdeviceadvisor.UpdateSuiteDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSuiteDefinitionWithContext indicates an expected call of UpdateSuiteDefinitionWithContext
func (mr *MockIoTDeviceAdvisorAPIMockRecorder) UpdateSuiteDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuiteDefinitionWithContext", reflect.TypeOf((*MockIoTDeviceAdvisorAPI)(nil).UpdateSuiteDefinitionWithContext), varargs...)
}

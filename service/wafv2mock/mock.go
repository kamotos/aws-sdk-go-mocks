// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/wafv2/wafv2iface (interfaces: WAFV2API)

// Package wafv2mock is a generated GoMock package.
package wafv2mock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	wafv2 "github.com/aws/aws-sdk-go/service/wafv2"
	gomock "github.com/golang/mock/gomock"
)

// MockWAFV2API is a mock of WAFV2API interface.
type MockWAFV2API struct {
	ctrl     *gomock.Controller
	recorder *MockWAFV2APIMockRecorder
}

// MockWAFV2APIMockRecorder is the mock recorder for MockWAFV2API.
type MockWAFV2APIMockRecorder struct {
	mock *MockWAFV2API
}

// NewMockWAFV2API creates a new mock instance.
func NewMockWAFV2API(ctrl *gomock.Controller) *MockWAFV2API {
	mock := &MockWAFV2API{ctrl: ctrl}
	mock.recorder = &MockWAFV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAFV2API) EXPECT() *MockWAFV2APIMockRecorder {
	return m.recorder
}

// AssociateWebACL mocks base method.
func (m *MockWAFV2API) AssociateWebACL(arg0 *wafv2.AssociateWebACLInput) (*wafv2.AssociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWebACL", arg0)
	ret0, _ := ret[0].(*wafv2.AssociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWebACL indicates an expected call of AssociateWebACL.
func (mr *MockWAFV2APIMockRecorder) AssociateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACL", reflect.TypeOf((*MockWAFV2API)(nil).AssociateWebACL), arg0)
}

// AssociateWebACLRequest mocks base method.
func (m *MockWAFV2API) AssociateWebACLRequest(arg0 *wafv2.AssociateWebACLInput) (*request.Request, *wafv2.AssociateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.AssociateWebACLOutput)
	return ret0, ret1
}

// AssociateWebACLRequest indicates an expected call of AssociateWebACLRequest.
func (mr *MockWAFV2APIMockRecorder) AssociateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACLRequest", reflect.TypeOf((*MockWAFV2API)(nil).AssociateWebACLRequest), arg0)
}

// AssociateWebACLWithContext mocks base method.
func (m *MockWAFV2API) AssociateWebACLWithContext(arg0 context.Context, arg1 *wafv2.AssociateWebACLInput, arg2 ...request.Option) (*wafv2.AssociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.AssociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateWebACLWithContext indicates an expected call of AssociateWebACLWithContext.
func (mr *MockWAFV2APIMockRecorder) AssociateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateWebACLWithContext", reflect.TypeOf((*MockWAFV2API)(nil).AssociateWebACLWithContext), varargs...)
}

// CheckCapacity mocks base method.
func (m *MockWAFV2API) CheckCapacity(arg0 *wafv2.CheckCapacityInput) (*wafv2.CheckCapacityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCapacity", arg0)
	ret0, _ := ret[0].(*wafv2.CheckCapacityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCapacity indicates an expected call of CheckCapacity.
func (mr *MockWAFV2APIMockRecorder) CheckCapacity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCapacity", reflect.TypeOf((*MockWAFV2API)(nil).CheckCapacity), arg0)
}

// CheckCapacityRequest mocks base method.
func (m *MockWAFV2API) CheckCapacityRequest(arg0 *wafv2.CheckCapacityInput) (*request.Request, *wafv2.CheckCapacityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCapacityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.CheckCapacityOutput)
	return ret0, ret1
}

// CheckCapacityRequest indicates an expected call of CheckCapacityRequest.
func (mr *MockWAFV2APIMockRecorder) CheckCapacityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCapacityRequest", reflect.TypeOf((*MockWAFV2API)(nil).CheckCapacityRequest), arg0)
}

// CheckCapacityWithContext mocks base method.
func (m *MockWAFV2API) CheckCapacityWithContext(arg0 context.Context, arg1 *wafv2.CheckCapacityInput, arg2 ...request.Option) (*wafv2.CheckCapacityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckCapacityWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.CheckCapacityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCapacityWithContext indicates an expected call of CheckCapacityWithContext.
func (mr *MockWAFV2APIMockRecorder) CheckCapacityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCapacityWithContext", reflect.TypeOf((*MockWAFV2API)(nil).CheckCapacityWithContext), varargs...)
}

// CreateIPSet mocks base method.
func (m *MockWAFV2API) CreateIPSet(arg0 *wafv2.CreateIPSetInput) (*wafv2.CreateIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPSet", arg0)
	ret0, _ := ret[0].(*wafv2.CreateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPSet indicates an expected call of CreateIPSet.
func (mr *MockWAFV2APIMockRecorder) CreateIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSet", reflect.TypeOf((*MockWAFV2API)(nil).CreateIPSet), arg0)
}

// CreateIPSetRequest mocks base method.
func (m *MockWAFV2API) CreateIPSetRequest(arg0 *wafv2.CreateIPSetInput) (*request.Request, *wafv2.CreateIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.CreateIPSetOutput)
	return ret0, ret1
}

// CreateIPSetRequest indicates an expected call of CreateIPSetRequest.
func (mr *MockWAFV2APIMockRecorder) CreateIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).CreateIPSetRequest), arg0)
}

// CreateIPSetWithContext mocks base method.
func (m *MockWAFV2API) CreateIPSetWithContext(arg0 context.Context, arg1 *wafv2.CreateIPSetInput, arg2 ...request.Option) (*wafv2.CreateIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.CreateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIPSetWithContext indicates an expected call of CreateIPSetWithContext.
func (mr *MockWAFV2APIMockRecorder) CreateIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).CreateIPSetWithContext), varargs...)
}

// CreateRegexPatternSet mocks base method.
func (m *MockWAFV2API) CreateRegexPatternSet(arg0 *wafv2.CreateRegexPatternSetInput) (*wafv2.CreateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexPatternSet", arg0)
	ret0, _ := ret[0].(*wafv2.CreateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexPatternSet indicates an expected call of CreateRegexPatternSet.
func (mr *MockWAFV2APIMockRecorder) CreateRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSet", reflect.TypeOf((*MockWAFV2API)(nil).CreateRegexPatternSet), arg0)
}

// CreateRegexPatternSetRequest mocks base method.
func (m *MockWAFV2API) CreateRegexPatternSetRequest(arg0 *wafv2.CreateRegexPatternSetInput) (*request.Request, *wafv2.CreateRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.CreateRegexPatternSetOutput)
	return ret0, ret1
}

// CreateRegexPatternSetRequest indicates an expected call of CreateRegexPatternSetRequest.
func (mr *MockWAFV2APIMockRecorder) CreateRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).CreateRegexPatternSetRequest), arg0)
}

// CreateRegexPatternSetWithContext mocks base method.
func (m *MockWAFV2API) CreateRegexPatternSetWithContext(arg0 context.Context, arg1 *wafv2.CreateRegexPatternSetInput, arg2 ...request.Option) (*wafv2.CreateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.CreateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegexPatternSetWithContext indicates an expected call of CreateRegexPatternSetWithContext.
func (mr *MockWAFV2APIMockRecorder) CreateRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegexPatternSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).CreateRegexPatternSetWithContext), varargs...)
}

// CreateRuleGroup mocks base method.
func (m *MockWAFV2API) CreateRuleGroup(arg0 *wafv2.CreateRuleGroupInput) (*wafv2.CreateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroup", arg0)
	ret0, _ := ret[0].(*wafv2.CreateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroup indicates an expected call of CreateRuleGroup.
func (mr *MockWAFV2APIMockRecorder) CreateRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroup", reflect.TypeOf((*MockWAFV2API)(nil).CreateRuleGroup), arg0)
}

// CreateRuleGroupRequest mocks base method.
func (m *MockWAFV2API) CreateRuleGroupRequest(arg0 *wafv2.CreateRuleGroupInput) (*request.Request, *wafv2.CreateRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.CreateRuleGroupOutput)
	return ret0, ret1
}

// CreateRuleGroupRequest indicates an expected call of CreateRuleGroupRequest.
func (mr *MockWAFV2APIMockRecorder) CreateRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupRequest", reflect.TypeOf((*MockWAFV2API)(nil).CreateRuleGroupRequest), arg0)
}

// CreateRuleGroupWithContext mocks base method.
func (m *MockWAFV2API) CreateRuleGroupWithContext(arg0 context.Context, arg1 *wafv2.CreateRuleGroupInput, arg2 ...request.Option) (*wafv2.CreateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.CreateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuleGroupWithContext indicates an expected call of CreateRuleGroupWithContext.
func (mr *MockWAFV2APIMockRecorder) CreateRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuleGroupWithContext", reflect.TypeOf((*MockWAFV2API)(nil).CreateRuleGroupWithContext), varargs...)
}

// CreateWebACL mocks base method.
func (m *MockWAFV2API) CreateWebACL(arg0 *wafv2.CreateWebACLInput) (*wafv2.CreateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACL", arg0)
	ret0, _ := ret[0].(*wafv2.CreateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACL indicates an expected call of CreateWebACL.
func (mr *MockWAFV2APIMockRecorder) CreateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACL", reflect.TypeOf((*MockWAFV2API)(nil).CreateWebACL), arg0)
}

// CreateWebACLRequest mocks base method.
func (m *MockWAFV2API) CreateWebACLRequest(arg0 *wafv2.CreateWebACLInput) (*request.Request, *wafv2.CreateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.CreateWebACLOutput)
	return ret0, ret1
}

// CreateWebACLRequest indicates an expected call of CreateWebACLRequest.
func (mr *MockWAFV2APIMockRecorder) CreateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLRequest", reflect.TypeOf((*MockWAFV2API)(nil).CreateWebACLRequest), arg0)
}

// CreateWebACLWithContext mocks base method.
func (m *MockWAFV2API) CreateWebACLWithContext(arg0 context.Context, arg1 *wafv2.CreateWebACLInput, arg2 ...request.Option) (*wafv2.CreateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.CreateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebACLWithContext indicates an expected call of CreateWebACLWithContext.
func (mr *MockWAFV2APIMockRecorder) CreateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebACLWithContext", reflect.TypeOf((*MockWAFV2API)(nil).CreateWebACLWithContext), varargs...)
}

// DeleteFirewallManagerRuleGroups mocks base method.
func (m *MockWAFV2API) DeleteFirewallManagerRuleGroups(arg0 *wafv2.DeleteFirewallManagerRuleGroupsInput) (*wafv2.DeleteFirewallManagerRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallManagerRuleGroups", arg0)
	ret0, _ := ret[0].(*wafv2.DeleteFirewallManagerRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFirewallManagerRuleGroups indicates an expected call of DeleteFirewallManagerRuleGroups.
func (mr *MockWAFV2APIMockRecorder) DeleteFirewallManagerRuleGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallManagerRuleGroups", reflect.TypeOf((*MockWAFV2API)(nil).DeleteFirewallManagerRuleGroups), arg0)
}

// DeleteFirewallManagerRuleGroupsRequest mocks base method.
func (m *MockWAFV2API) DeleteFirewallManagerRuleGroupsRequest(arg0 *wafv2.DeleteFirewallManagerRuleGroupsInput) (*request.Request, *wafv2.DeleteFirewallManagerRuleGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewallManagerRuleGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DeleteFirewallManagerRuleGroupsOutput)
	return ret0, ret1
}

// DeleteFirewallManagerRuleGroupsRequest indicates an expected call of DeleteFirewallManagerRuleGroupsRequest.
func (mr *MockWAFV2APIMockRecorder) DeleteFirewallManagerRuleGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallManagerRuleGroupsRequest", reflect.TypeOf((*MockWAFV2API)(nil).DeleteFirewallManagerRuleGroupsRequest), arg0)
}

// DeleteFirewallManagerRuleGroupsWithContext mocks base method.
func (m *MockWAFV2API) DeleteFirewallManagerRuleGroupsWithContext(arg0 context.Context, arg1 *wafv2.DeleteFirewallManagerRuleGroupsInput, arg2 ...request.Option) (*wafv2.DeleteFirewallManagerRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFirewallManagerRuleGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DeleteFirewallManagerRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFirewallManagerRuleGroupsWithContext indicates an expected call of DeleteFirewallManagerRuleGroupsWithContext.
func (mr *MockWAFV2APIMockRecorder) DeleteFirewallManagerRuleGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewallManagerRuleGroupsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DeleteFirewallManagerRuleGroupsWithContext), varargs...)
}

// DeleteIPSet mocks base method.
func (m *MockWAFV2API) DeleteIPSet(arg0 *wafv2.DeleteIPSetInput) (*wafv2.DeleteIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPSet", arg0)
	ret0, _ := ret[0].(*wafv2.DeleteIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPSet indicates an expected call of DeleteIPSet.
func (mr *MockWAFV2APIMockRecorder) DeleteIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSet", reflect.TypeOf((*MockWAFV2API)(nil).DeleteIPSet), arg0)
}

// DeleteIPSetRequest mocks base method.
func (m *MockWAFV2API) DeleteIPSetRequest(arg0 *wafv2.DeleteIPSetInput) (*request.Request, *wafv2.DeleteIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DeleteIPSetOutput)
	return ret0, ret1
}

// DeleteIPSetRequest indicates an expected call of DeleteIPSetRequest.
func (mr *MockWAFV2APIMockRecorder) DeleteIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).DeleteIPSetRequest), arg0)
}

// DeleteIPSetWithContext mocks base method.
func (m *MockWAFV2API) DeleteIPSetWithContext(arg0 context.Context, arg1 *wafv2.DeleteIPSetInput, arg2 ...request.Option) (*wafv2.DeleteIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DeleteIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPSetWithContext indicates an expected call of DeleteIPSetWithContext.
func (mr *MockWAFV2APIMockRecorder) DeleteIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DeleteIPSetWithContext), varargs...)
}

// DeleteLoggingConfiguration mocks base method.
func (m *MockWAFV2API) DeleteLoggingConfiguration(arg0 *wafv2.DeleteLoggingConfigurationInput) (*wafv2.DeleteLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*wafv2.DeleteLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoggingConfiguration indicates an expected call of DeleteLoggingConfiguration.
func (mr *MockWAFV2APIMockRecorder) DeleteLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfiguration", reflect.TypeOf((*MockWAFV2API)(nil).DeleteLoggingConfiguration), arg0)
}

// DeleteLoggingConfigurationRequest mocks base method.
func (m *MockWAFV2API) DeleteLoggingConfigurationRequest(arg0 *wafv2.DeleteLoggingConfigurationInput) (*request.Request, *wafv2.DeleteLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DeleteLoggingConfigurationOutput)
	return ret0, ret1
}

// DeleteLoggingConfigurationRequest indicates an expected call of DeleteLoggingConfigurationRequest.
func (mr *MockWAFV2APIMockRecorder) DeleteLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfigurationRequest", reflect.TypeOf((*MockWAFV2API)(nil).DeleteLoggingConfigurationRequest), arg0)
}

// DeleteLoggingConfigurationWithContext mocks base method.
func (m *MockWAFV2API) DeleteLoggingConfigurationWithContext(arg0 context.Context, arg1 *wafv2.DeleteLoggingConfigurationInput, arg2 ...request.Option) (*wafv2.DeleteLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DeleteLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoggingConfigurationWithContext indicates an expected call of DeleteLoggingConfigurationWithContext.
func (mr *MockWAFV2APIMockRecorder) DeleteLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DeleteLoggingConfigurationWithContext), varargs...)
}

// DeletePermissionPolicy mocks base method.
func (m *MockWAFV2API) DeletePermissionPolicy(arg0 *wafv2.DeletePermissionPolicyInput) (*wafv2.DeletePermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionPolicy", arg0)
	ret0, _ := ret[0].(*wafv2.DeletePermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionPolicy indicates an expected call of DeletePermissionPolicy.
func (mr *MockWAFV2APIMockRecorder) DeletePermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicy", reflect.TypeOf((*MockWAFV2API)(nil).DeletePermissionPolicy), arg0)
}

// DeletePermissionPolicyRequest mocks base method.
func (m *MockWAFV2API) DeletePermissionPolicyRequest(arg0 *wafv2.DeletePermissionPolicyInput) (*request.Request, *wafv2.DeletePermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DeletePermissionPolicyOutput)
	return ret0, ret1
}

// DeletePermissionPolicyRequest indicates an expected call of DeletePermissionPolicyRequest.
func (mr *MockWAFV2APIMockRecorder) DeletePermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicyRequest", reflect.TypeOf((*MockWAFV2API)(nil).DeletePermissionPolicyRequest), arg0)
}

// DeletePermissionPolicyWithContext mocks base method.
func (m *MockWAFV2API) DeletePermissionPolicyWithContext(arg0 context.Context, arg1 *wafv2.DeletePermissionPolicyInput, arg2 ...request.Option) (*wafv2.DeletePermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DeletePermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermissionPolicyWithContext indicates an expected call of DeletePermissionPolicyWithContext.
func (mr *MockWAFV2APIMockRecorder) DeletePermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermissionPolicyWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DeletePermissionPolicyWithContext), varargs...)
}

// DeleteRegexPatternSet mocks base method.
func (m *MockWAFV2API) DeleteRegexPatternSet(arg0 *wafv2.DeleteRegexPatternSetInput) (*wafv2.DeleteRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexPatternSet", arg0)
	ret0, _ := ret[0].(*wafv2.DeleteRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexPatternSet indicates an expected call of DeleteRegexPatternSet.
func (mr *MockWAFV2APIMockRecorder) DeleteRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSet", reflect.TypeOf((*MockWAFV2API)(nil).DeleteRegexPatternSet), arg0)
}

// DeleteRegexPatternSetRequest mocks base method.
func (m *MockWAFV2API) DeleteRegexPatternSetRequest(arg0 *wafv2.DeleteRegexPatternSetInput) (*request.Request, *wafv2.DeleteRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DeleteRegexPatternSetOutput)
	return ret0, ret1
}

// DeleteRegexPatternSetRequest indicates an expected call of DeleteRegexPatternSetRequest.
func (mr *MockWAFV2APIMockRecorder) DeleteRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).DeleteRegexPatternSetRequest), arg0)
}

// DeleteRegexPatternSetWithContext mocks base method.
func (m *MockWAFV2API) DeleteRegexPatternSetWithContext(arg0 context.Context, arg1 *wafv2.DeleteRegexPatternSetInput, arg2 ...request.Option) (*wafv2.DeleteRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DeleteRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegexPatternSetWithContext indicates an expected call of DeleteRegexPatternSetWithContext.
func (mr *MockWAFV2APIMockRecorder) DeleteRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegexPatternSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DeleteRegexPatternSetWithContext), varargs...)
}

// DeleteRuleGroup mocks base method.
func (m *MockWAFV2API) DeleteRuleGroup(arg0 *wafv2.DeleteRuleGroupInput) (*wafv2.DeleteRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroup", arg0)
	ret0, _ := ret[0].(*wafv2.DeleteRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroup indicates an expected call of DeleteRuleGroup.
func (mr *MockWAFV2APIMockRecorder) DeleteRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroup", reflect.TypeOf((*MockWAFV2API)(nil).DeleteRuleGroup), arg0)
}

// DeleteRuleGroupRequest mocks base method.
func (m *MockWAFV2API) DeleteRuleGroupRequest(arg0 *wafv2.DeleteRuleGroupInput) (*request.Request, *wafv2.DeleteRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DeleteRuleGroupOutput)
	return ret0, ret1
}

// DeleteRuleGroupRequest indicates an expected call of DeleteRuleGroupRequest.
func (mr *MockWAFV2APIMockRecorder) DeleteRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupRequest", reflect.TypeOf((*MockWAFV2API)(nil).DeleteRuleGroupRequest), arg0)
}

// DeleteRuleGroupWithContext mocks base method.
func (m *MockWAFV2API) DeleteRuleGroupWithContext(arg0 context.Context, arg1 *wafv2.DeleteRuleGroupInput, arg2 ...request.Option) (*wafv2.DeleteRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DeleteRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleGroupWithContext indicates an expected call of DeleteRuleGroupWithContext.
func (mr *MockWAFV2APIMockRecorder) DeleteRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleGroupWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DeleteRuleGroupWithContext), varargs...)
}

// DeleteWebACL mocks base method.
func (m *MockWAFV2API) DeleteWebACL(arg0 *wafv2.DeleteWebACLInput) (*wafv2.DeleteWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebACL", arg0)
	ret0, _ := ret[0].(*wafv2.DeleteWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebACL indicates an expected call of DeleteWebACL.
func (mr *MockWAFV2APIMockRecorder) DeleteWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACL", reflect.TypeOf((*MockWAFV2API)(nil).DeleteWebACL), arg0)
}

// DeleteWebACLRequest mocks base method.
func (m *MockWAFV2API) DeleteWebACLRequest(arg0 *wafv2.DeleteWebACLInput) (*request.Request, *wafv2.DeleteWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DeleteWebACLOutput)
	return ret0, ret1
}

// DeleteWebACLRequest indicates an expected call of DeleteWebACLRequest.
func (mr *MockWAFV2APIMockRecorder) DeleteWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACLRequest", reflect.TypeOf((*MockWAFV2API)(nil).DeleteWebACLRequest), arg0)
}

// DeleteWebACLWithContext mocks base method.
func (m *MockWAFV2API) DeleteWebACLWithContext(arg0 context.Context, arg1 *wafv2.DeleteWebACLInput, arg2 ...request.Option) (*wafv2.DeleteWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DeleteWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebACLWithContext indicates an expected call of DeleteWebACLWithContext.
func (mr *MockWAFV2APIMockRecorder) DeleteWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebACLWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DeleteWebACLWithContext), varargs...)
}

// DescribeManagedRuleGroup mocks base method.
func (m *MockWAFV2API) DescribeManagedRuleGroup(arg0 *wafv2.DescribeManagedRuleGroupInput) (*wafv2.DescribeManagedRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeManagedRuleGroup", arg0)
	ret0, _ := ret[0].(*wafv2.DescribeManagedRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeManagedRuleGroup indicates an expected call of DescribeManagedRuleGroup.
func (mr *MockWAFV2APIMockRecorder) DescribeManagedRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeManagedRuleGroup", reflect.TypeOf((*MockWAFV2API)(nil).DescribeManagedRuleGroup), arg0)
}

// DescribeManagedRuleGroupRequest mocks base method.
func (m *MockWAFV2API) DescribeManagedRuleGroupRequest(arg0 *wafv2.DescribeManagedRuleGroupInput) (*request.Request, *wafv2.DescribeManagedRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeManagedRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DescribeManagedRuleGroupOutput)
	return ret0, ret1
}

// DescribeManagedRuleGroupRequest indicates an expected call of DescribeManagedRuleGroupRequest.
func (mr *MockWAFV2APIMockRecorder) DescribeManagedRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeManagedRuleGroupRequest", reflect.TypeOf((*MockWAFV2API)(nil).DescribeManagedRuleGroupRequest), arg0)
}

// DescribeManagedRuleGroupWithContext mocks base method.
func (m *MockWAFV2API) DescribeManagedRuleGroupWithContext(arg0 context.Context, arg1 *wafv2.DescribeManagedRuleGroupInput, arg2 ...request.Option) (*wafv2.DescribeManagedRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeManagedRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DescribeManagedRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeManagedRuleGroupWithContext indicates an expected call of DescribeManagedRuleGroupWithContext.
func (mr *MockWAFV2APIMockRecorder) DescribeManagedRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeManagedRuleGroupWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DescribeManagedRuleGroupWithContext), varargs...)
}

// DisassociateWebACL mocks base method.
func (m *MockWAFV2API) DisassociateWebACL(arg0 *wafv2.DisassociateWebACLInput) (*wafv2.DisassociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWebACL", arg0)
	ret0, _ := ret[0].(*wafv2.DisassociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWebACL indicates an expected call of DisassociateWebACL.
func (mr *MockWAFV2APIMockRecorder) DisassociateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACL", reflect.TypeOf((*MockWAFV2API)(nil).DisassociateWebACL), arg0)
}

// DisassociateWebACLRequest mocks base method.
func (m *MockWAFV2API) DisassociateWebACLRequest(arg0 *wafv2.DisassociateWebACLInput) (*request.Request, *wafv2.DisassociateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.DisassociateWebACLOutput)
	return ret0, ret1
}

// DisassociateWebACLRequest indicates an expected call of DisassociateWebACLRequest.
func (mr *MockWAFV2APIMockRecorder) DisassociateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACLRequest", reflect.TypeOf((*MockWAFV2API)(nil).DisassociateWebACLRequest), arg0)
}

// DisassociateWebACLWithContext mocks base method.
func (m *MockWAFV2API) DisassociateWebACLWithContext(arg0 context.Context, arg1 *wafv2.DisassociateWebACLInput, arg2 ...request.Option) (*wafv2.DisassociateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.DisassociateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateWebACLWithContext indicates an expected call of DisassociateWebACLWithContext.
func (mr *MockWAFV2APIMockRecorder) DisassociateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateWebACLWithContext", reflect.TypeOf((*MockWAFV2API)(nil).DisassociateWebACLWithContext), varargs...)
}

// GetIPSet mocks base method.
func (m *MockWAFV2API) GetIPSet(arg0 *wafv2.GetIPSetInput) (*wafv2.GetIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSet", arg0)
	ret0, _ := ret[0].(*wafv2.GetIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSet indicates an expected call of GetIPSet.
func (mr *MockWAFV2APIMockRecorder) GetIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSet", reflect.TypeOf((*MockWAFV2API)(nil).GetIPSet), arg0)
}

// GetIPSetRequest mocks base method.
func (m *MockWAFV2API) GetIPSetRequest(arg0 *wafv2.GetIPSetInput) (*request.Request, *wafv2.GetIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetIPSetOutput)
	return ret0, ret1
}

// GetIPSetRequest indicates an expected call of GetIPSetRequest.
func (mr *MockWAFV2APIMockRecorder) GetIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetIPSetRequest), arg0)
}

// GetIPSetWithContext mocks base method.
func (m *MockWAFV2API) GetIPSetWithContext(arg0 context.Context, arg1 *wafv2.GetIPSetInput, arg2 ...request.Option) (*wafv2.GetIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSetWithContext indicates an expected call of GetIPSetWithContext.
func (mr *MockWAFV2APIMockRecorder) GetIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetIPSetWithContext), varargs...)
}

// GetLoggingConfiguration mocks base method.
func (m *MockWAFV2API) GetLoggingConfiguration(arg0 *wafv2.GetLoggingConfigurationInput) (*wafv2.GetLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*wafv2.GetLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingConfiguration indicates an expected call of GetLoggingConfiguration.
func (mr *MockWAFV2APIMockRecorder) GetLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfiguration", reflect.TypeOf((*MockWAFV2API)(nil).GetLoggingConfiguration), arg0)
}

// GetLoggingConfigurationRequest mocks base method.
func (m *MockWAFV2API) GetLoggingConfigurationRequest(arg0 *wafv2.GetLoggingConfigurationInput) (*request.Request, *wafv2.GetLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetLoggingConfigurationOutput)
	return ret0, ret1
}

// GetLoggingConfigurationRequest indicates an expected call of GetLoggingConfigurationRequest.
func (mr *MockWAFV2APIMockRecorder) GetLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfigurationRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetLoggingConfigurationRequest), arg0)
}

// GetLoggingConfigurationWithContext mocks base method.
func (m *MockWAFV2API) GetLoggingConfigurationWithContext(arg0 context.Context, arg1 *wafv2.GetLoggingConfigurationInput, arg2 ...request.Option) (*wafv2.GetLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingConfigurationWithContext indicates an expected call of GetLoggingConfigurationWithContext.
func (mr *MockWAFV2APIMockRecorder) GetLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetLoggingConfigurationWithContext), varargs...)
}

// GetPermissionPolicy mocks base method.
func (m *MockWAFV2API) GetPermissionPolicy(arg0 *wafv2.GetPermissionPolicyInput) (*wafv2.GetPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionPolicy", arg0)
	ret0, _ := ret[0].(*wafv2.GetPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionPolicy indicates an expected call of GetPermissionPolicy.
func (mr *MockWAFV2APIMockRecorder) GetPermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicy", reflect.TypeOf((*MockWAFV2API)(nil).GetPermissionPolicy), arg0)
}

// GetPermissionPolicyRequest mocks base method.
func (m *MockWAFV2API) GetPermissionPolicyRequest(arg0 *wafv2.GetPermissionPolicyInput) (*request.Request, *wafv2.GetPermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetPermissionPolicyOutput)
	return ret0, ret1
}

// GetPermissionPolicyRequest indicates an expected call of GetPermissionPolicyRequest.
func (mr *MockWAFV2APIMockRecorder) GetPermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicyRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetPermissionPolicyRequest), arg0)
}

// GetPermissionPolicyWithContext mocks base method.
func (m *MockWAFV2API) GetPermissionPolicyWithContext(arg0 context.Context, arg1 *wafv2.GetPermissionPolicyInput, arg2 ...request.Option) (*wafv2.GetPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionPolicyWithContext indicates an expected call of GetPermissionPolicyWithContext.
func (mr *MockWAFV2APIMockRecorder) GetPermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionPolicyWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetPermissionPolicyWithContext), varargs...)
}

// GetRateBasedStatementManagedKeys mocks base method.
func (m *MockWAFV2API) GetRateBasedStatementManagedKeys(arg0 *wafv2.GetRateBasedStatementManagedKeysInput) (*wafv2.GetRateBasedStatementManagedKeysOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedStatementManagedKeys", arg0)
	ret0, _ := ret[0].(*wafv2.GetRateBasedStatementManagedKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedStatementManagedKeys indicates an expected call of GetRateBasedStatementManagedKeys.
func (mr *MockWAFV2APIMockRecorder) GetRateBasedStatementManagedKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedStatementManagedKeys", reflect.TypeOf((*MockWAFV2API)(nil).GetRateBasedStatementManagedKeys), arg0)
}

// GetRateBasedStatementManagedKeysRequest mocks base method.
func (m *MockWAFV2API) GetRateBasedStatementManagedKeysRequest(arg0 *wafv2.GetRateBasedStatementManagedKeysInput) (*request.Request, *wafv2.GetRateBasedStatementManagedKeysOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateBasedStatementManagedKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetRateBasedStatementManagedKeysOutput)
	return ret0, ret1
}

// GetRateBasedStatementManagedKeysRequest indicates an expected call of GetRateBasedStatementManagedKeysRequest.
func (mr *MockWAFV2APIMockRecorder) GetRateBasedStatementManagedKeysRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedStatementManagedKeysRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetRateBasedStatementManagedKeysRequest), arg0)
}

// GetRateBasedStatementManagedKeysWithContext mocks base method.
func (m *MockWAFV2API) GetRateBasedStatementManagedKeysWithContext(arg0 context.Context, arg1 *wafv2.GetRateBasedStatementManagedKeysInput, arg2 ...request.Option) (*wafv2.GetRateBasedStatementManagedKeysOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRateBasedStatementManagedKeysWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetRateBasedStatementManagedKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateBasedStatementManagedKeysWithContext indicates an expected call of GetRateBasedStatementManagedKeysWithContext.
func (mr *MockWAFV2APIMockRecorder) GetRateBasedStatementManagedKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateBasedStatementManagedKeysWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetRateBasedStatementManagedKeysWithContext), varargs...)
}

// GetRegexPatternSet mocks base method.
func (m *MockWAFV2API) GetRegexPatternSet(arg0 *wafv2.GetRegexPatternSetInput) (*wafv2.GetRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexPatternSet", arg0)
	ret0, _ := ret[0].(*wafv2.GetRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexPatternSet indicates an expected call of GetRegexPatternSet.
func (mr *MockWAFV2APIMockRecorder) GetRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSet", reflect.TypeOf((*MockWAFV2API)(nil).GetRegexPatternSet), arg0)
}

// GetRegexPatternSetRequest mocks base method.
func (m *MockWAFV2API) GetRegexPatternSetRequest(arg0 *wafv2.GetRegexPatternSetInput) (*request.Request, *wafv2.GetRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetRegexPatternSetOutput)
	return ret0, ret1
}

// GetRegexPatternSetRequest indicates an expected call of GetRegexPatternSetRequest.
func (mr *MockWAFV2APIMockRecorder) GetRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetRegexPatternSetRequest), arg0)
}

// GetRegexPatternSetWithContext mocks base method.
func (m *MockWAFV2API) GetRegexPatternSetWithContext(arg0 context.Context, arg1 *wafv2.GetRegexPatternSetInput, arg2 ...request.Option) (*wafv2.GetRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegexPatternSetWithContext indicates an expected call of GetRegexPatternSetWithContext.
func (mr *MockWAFV2APIMockRecorder) GetRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegexPatternSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetRegexPatternSetWithContext), varargs...)
}

// GetRuleGroup mocks base method.
func (m *MockWAFV2API) GetRuleGroup(arg0 *wafv2.GetRuleGroupInput) (*wafv2.GetRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleGroup", arg0)
	ret0, _ := ret[0].(*wafv2.GetRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleGroup indicates an expected call of GetRuleGroup.
func (mr *MockWAFV2APIMockRecorder) GetRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroup", reflect.TypeOf((*MockWAFV2API)(nil).GetRuleGroup), arg0)
}

// GetRuleGroupRequest mocks base method.
func (m *MockWAFV2API) GetRuleGroupRequest(arg0 *wafv2.GetRuleGroupInput) (*request.Request, *wafv2.GetRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetRuleGroupOutput)
	return ret0, ret1
}

// GetRuleGroupRequest indicates an expected call of GetRuleGroupRequest.
func (mr *MockWAFV2APIMockRecorder) GetRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroupRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetRuleGroupRequest), arg0)
}

// GetRuleGroupWithContext mocks base method.
func (m *MockWAFV2API) GetRuleGroupWithContext(arg0 context.Context, arg1 *wafv2.GetRuleGroupInput, arg2 ...request.Option) (*wafv2.GetRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuleGroupWithContext indicates an expected call of GetRuleGroupWithContext.
func (mr *MockWAFV2APIMockRecorder) GetRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuleGroupWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetRuleGroupWithContext), varargs...)
}

// GetSampledRequests mocks base method.
func (m *MockWAFV2API) GetSampledRequests(arg0 *wafv2.GetSampledRequestsInput) (*wafv2.GetSampledRequestsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampledRequests", arg0)
	ret0, _ := ret[0].(*wafv2.GetSampledRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampledRequests indicates an expected call of GetSampledRequests.
func (mr *MockWAFV2APIMockRecorder) GetSampledRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequests", reflect.TypeOf((*MockWAFV2API)(nil).GetSampledRequests), arg0)
}

// GetSampledRequestsRequest mocks base method.
func (m *MockWAFV2API) GetSampledRequestsRequest(arg0 *wafv2.GetSampledRequestsInput) (*request.Request, *wafv2.GetSampledRequestsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampledRequestsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetSampledRequestsOutput)
	return ret0, ret1
}

// GetSampledRequestsRequest indicates an expected call of GetSampledRequestsRequest.
func (mr *MockWAFV2APIMockRecorder) GetSampledRequestsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequestsRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetSampledRequestsRequest), arg0)
}

// GetSampledRequestsWithContext mocks base method.
func (m *MockWAFV2API) GetSampledRequestsWithContext(arg0 context.Context, arg1 *wafv2.GetSampledRequestsInput, arg2 ...request.Option) (*wafv2.GetSampledRequestsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSampledRequestsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetSampledRequestsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSampledRequestsWithContext indicates an expected call of GetSampledRequestsWithContext.
func (mr *MockWAFV2APIMockRecorder) GetSampledRequestsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampledRequestsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetSampledRequestsWithContext), varargs...)
}

// GetWebACL mocks base method.
func (m *MockWAFV2API) GetWebACL(arg0 *wafv2.GetWebACLInput) (*wafv2.GetWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACL", arg0)
	ret0, _ := ret[0].(*wafv2.GetWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACL indicates an expected call of GetWebACL.
func (mr *MockWAFV2APIMockRecorder) GetWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACL", reflect.TypeOf((*MockWAFV2API)(nil).GetWebACL), arg0)
}

// GetWebACLForResource mocks base method.
func (m *MockWAFV2API) GetWebACLForResource(arg0 *wafv2.GetWebACLForResourceInput) (*wafv2.GetWebACLForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLForResource", arg0)
	ret0, _ := ret[0].(*wafv2.GetWebACLForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLForResource indicates an expected call of GetWebACLForResource.
func (mr *MockWAFV2APIMockRecorder) GetWebACLForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResource", reflect.TypeOf((*MockWAFV2API)(nil).GetWebACLForResource), arg0)
}

// GetWebACLForResourceRequest mocks base method.
func (m *MockWAFV2API) GetWebACLForResourceRequest(arg0 *wafv2.GetWebACLForResourceInput) (*request.Request, *wafv2.GetWebACLForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetWebACLForResourceOutput)
	return ret0, ret1
}

// GetWebACLForResourceRequest indicates an expected call of GetWebACLForResourceRequest.
func (mr *MockWAFV2APIMockRecorder) GetWebACLForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResourceRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetWebACLForResourceRequest), arg0)
}

// GetWebACLForResourceWithContext mocks base method.
func (m *MockWAFV2API) GetWebACLForResourceWithContext(arg0 context.Context, arg1 *wafv2.GetWebACLForResourceInput, arg2 ...request.Option) (*wafv2.GetWebACLForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWebACLForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetWebACLForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLForResourceWithContext indicates an expected call of GetWebACLForResourceWithContext.
func (mr *MockWAFV2APIMockRecorder) GetWebACLForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLForResourceWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetWebACLForResourceWithContext), varargs...)
}

// GetWebACLRequest mocks base method.
func (m *MockWAFV2API) GetWebACLRequest(arg0 *wafv2.GetWebACLInput) (*request.Request, *wafv2.GetWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.GetWebACLOutput)
	return ret0, ret1
}

// GetWebACLRequest indicates an expected call of GetWebACLRequest.
func (mr *MockWAFV2APIMockRecorder) GetWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLRequest", reflect.TypeOf((*MockWAFV2API)(nil).GetWebACLRequest), arg0)
}

// GetWebACLWithContext mocks base method.
func (m *MockWAFV2API) GetWebACLWithContext(arg0 context.Context, arg1 *wafv2.GetWebACLInput, arg2 ...request.Option) (*wafv2.GetWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.GetWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebACLWithContext indicates an expected call of GetWebACLWithContext.
func (mr *MockWAFV2APIMockRecorder) GetWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebACLWithContext", reflect.TypeOf((*MockWAFV2API)(nil).GetWebACLWithContext), varargs...)
}

// ListAvailableManagedRuleGroups mocks base method.
func (m *MockWAFV2API) ListAvailableManagedRuleGroups(arg0 *wafv2.ListAvailableManagedRuleGroupsInput) (*wafv2.ListAvailableManagedRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableManagedRuleGroups", arg0)
	ret0, _ := ret[0].(*wafv2.ListAvailableManagedRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableManagedRuleGroups indicates an expected call of ListAvailableManagedRuleGroups.
func (mr *MockWAFV2APIMockRecorder) ListAvailableManagedRuleGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagedRuleGroups", reflect.TypeOf((*MockWAFV2API)(nil).ListAvailableManagedRuleGroups), arg0)
}

// ListAvailableManagedRuleGroupsRequest mocks base method.
func (m *MockWAFV2API) ListAvailableManagedRuleGroupsRequest(arg0 *wafv2.ListAvailableManagedRuleGroupsInput) (*request.Request, *wafv2.ListAvailableManagedRuleGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableManagedRuleGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListAvailableManagedRuleGroupsOutput)
	return ret0, ret1
}

// ListAvailableManagedRuleGroupsRequest indicates an expected call of ListAvailableManagedRuleGroupsRequest.
func (mr *MockWAFV2APIMockRecorder) ListAvailableManagedRuleGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagedRuleGroupsRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListAvailableManagedRuleGroupsRequest), arg0)
}

// ListAvailableManagedRuleGroupsWithContext mocks base method.
func (m *MockWAFV2API) ListAvailableManagedRuleGroupsWithContext(arg0 context.Context, arg1 *wafv2.ListAvailableManagedRuleGroupsInput, arg2 ...request.Option) (*wafv2.ListAvailableManagedRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAvailableManagedRuleGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListAvailableManagedRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableManagedRuleGroupsWithContext indicates an expected call of ListAvailableManagedRuleGroupsWithContext.
func (mr *MockWAFV2APIMockRecorder) ListAvailableManagedRuleGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableManagedRuleGroupsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListAvailableManagedRuleGroupsWithContext), varargs...)
}

// ListIPSets mocks base method.
func (m *MockWAFV2API) ListIPSets(arg0 *wafv2.ListIPSetsInput) (*wafv2.ListIPSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPSets", arg0)
	ret0, _ := ret[0].(*wafv2.ListIPSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPSets indicates an expected call of ListIPSets.
func (mr *MockWAFV2APIMockRecorder) ListIPSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSets", reflect.TypeOf((*MockWAFV2API)(nil).ListIPSets), arg0)
}

// ListIPSetsRequest mocks base method.
func (m *MockWAFV2API) ListIPSetsRequest(arg0 *wafv2.ListIPSetsInput) (*request.Request, *wafv2.ListIPSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListIPSetsOutput)
	return ret0, ret1
}

// ListIPSetsRequest indicates an expected call of ListIPSetsRequest.
func (mr *MockWAFV2APIMockRecorder) ListIPSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSetsRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListIPSetsRequest), arg0)
}

// ListIPSetsWithContext mocks base method.
func (m *MockWAFV2API) ListIPSetsWithContext(arg0 context.Context, arg1 *wafv2.ListIPSetsInput, arg2 ...request.Option) (*wafv2.ListIPSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPSetsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListIPSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPSetsWithContext indicates an expected call of ListIPSetsWithContext.
func (mr *MockWAFV2APIMockRecorder) ListIPSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPSetsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListIPSetsWithContext), varargs...)
}

// ListLoggingConfigurations mocks base method.
func (m *MockWAFV2API) ListLoggingConfigurations(arg0 *wafv2.ListLoggingConfigurationsInput) (*wafv2.ListLoggingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoggingConfigurations", arg0)
	ret0, _ := ret[0].(*wafv2.ListLoggingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoggingConfigurations indicates an expected call of ListLoggingConfigurations.
func (mr *MockWAFV2APIMockRecorder) ListLoggingConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurations", reflect.TypeOf((*MockWAFV2API)(nil).ListLoggingConfigurations), arg0)
}

// ListLoggingConfigurationsRequest mocks base method.
func (m *MockWAFV2API) ListLoggingConfigurationsRequest(arg0 *wafv2.ListLoggingConfigurationsInput) (*request.Request, *wafv2.ListLoggingConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoggingConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListLoggingConfigurationsOutput)
	return ret0, ret1
}

// ListLoggingConfigurationsRequest indicates an expected call of ListLoggingConfigurationsRequest.
func (mr *MockWAFV2APIMockRecorder) ListLoggingConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurationsRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListLoggingConfigurationsRequest), arg0)
}

// ListLoggingConfigurationsWithContext mocks base method.
func (m *MockWAFV2API) ListLoggingConfigurationsWithContext(arg0 context.Context, arg1 *wafv2.ListLoggingConfigurationsInput, arg2 ...request.Option) (*wafv2.ListLoggingConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLoggingConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListLoggingConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoggingConfigurationsWithContext indicates an expected call of ListLoggingConfigurationsWithContext.
func (mr *MockWAFV2APIMockRecorder) ListLoggingConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoggingConfigurationsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListLoggingConfigurationsWithContext), varargs...)
}

// ListRegexPatternSets mocks base method.
func (m *MockWAFV2API) ListRegexPatternSets(arg0 *wafv2.ListRegexPatternSetsInput) (*wafv2.ListRegexPatternSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexPatternSets", arg0)
	ret0, _ := ret[0].(*wafv2.ListRegexPatternSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexPatternSets indicates an expected call of ListRegexPatternSets.
func (mr *MockWAFV2APIMockRecorder) ListRegexPatternSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSets", reflect.TypeOf((*MockWAFV2API)(nil).ListRegexPatternSets), arg0)
}

// ListRegexPatternSetsRequest mocks base method.
func (m *MockWAFV2API) ListRegexPatternSetsRequest(arg0 *wafv2.ListRegexPatternSetsInput) (*request.Request, *wafv2.ListRegexPatternSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegexPatternSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListRegexPatternSetsOutput)
	return ret0, ret1
}

// ListRegexPatternSetsRequest indicates an expected call of ListRegexPatternSetsRequest.
func (mr *MockWAFV2APIMockRecorder) ListRegexPatternSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSetsRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListRegexPatternSetsRequest), arg0)
}

// ListRegexPatternSetsWithContext mocks base method.
func (m *MockWAFV2API) ListRegexPatternSetsWithContext(arg0 context.Context, arg1 *wafv2.ListRegexPatternSetsInput, arg2 ...request.Option) (*wafv2.ListRegexPatternSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegexPatternSetsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListRegexPatternSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegexPatternSetsWithContext indicates an expected call of ListRegexPatternSetsWithContext.
func (mr *MockWAFV2APIMockRecorder) ListRegexPatternSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegexPatternSetsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListRegexPatternSetsWithContext), varargs...)
}

// ListResourcesForWebACL mocks base method.
func (m *MockWAFV2API) ListResourcesForWebACL(arg0 *wafv2.ListResourcesForWebACLInput) (*wafv2.ListResourcesForWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesForWebACL", arg0)
	ret0, _ := ret[0].(*wafv2.ListResourcesForWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesForWebACL indicates an expected call of ListResourcesForWebACL.
func (mr *MockWAFV2APIMockRecorder) ListResourcesForWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForWebACL", reflect.TypeOf((*MockWAFV2API)(nil).ListResourcesForWebACL), arg0)
}

// ListResourcesForWebACLRequest mocks base method.
func (m *MockWAFV2API) ListResourcesForWebACLRequest(arg0 *wafv2.ListResourcesForWebACLInput) (*request.Request, *wafv2.ListResourcesForWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesForWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListResourcesForWebACLOutput)
	return ret0, ret1
}

// ListResourcesForWebACLRequest indicates an expected call of ListResourcesForWebACLRequest.
func (mr *MockWAFV2APIMockRecorder) ListResourcesForWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForWebACLRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListResourcesForWebACLRequest), arg0)
}

// ListResourcesForWebACLWithContext mocks base method.
func (m *MockWAFV2API) ListResourcesForWebACLWithContext(arg0 context.Context, arg1 *wafv2.ListResourcesForWebACLInput, arg2 ...request.Option) (*wafv2.ListResourcesForWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourcesForWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListResourcesForWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesForWebACLWithContext indicates an expected call of ListResourcesForWebACLWithContext.
func (mr *MockWAFV2APIMockRecorder) ListResourcesForWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesForWebACLWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListResourcesForWebACLWithContext), varargs...)
}

// ListRuleGroups mocks base method.
func (m *MockWAFV2API) ListRuleGroups(arg0 *wafv2.ListRuleGroupsInput) (*wafv2.ListRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroups", arg0)
	ret0, _ := ret[0].(*wafv2.ListRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroups indicates an expected call of ListRuleGroups.
func (mr *MockWAFV2APIMockRecorder) ListRuleGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroups", reflect.TypeOf((*MockWAFV2API)(nil).ListRuleGroups), arg0)
}

// ListRuleGroupsRequest mocks base method.
func (m *MockWAFV2API) ListRuleGroupsRequest(arg0 *wafv2.ListRuleGroupsInput) (*request.Request, *wafv2.ListRuleGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuleGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListRuleGroupsOutput)
	return ret0, ret1
}

// ListRuleGroupsRequest indicates an expected call of ListRuleGroupsRequest.
func (mr *MockWAFV2APIMockRecorder) ListRuleGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListRuleGroupsRequest), arg0)
}

// ListRuleGroupsWithContext mocks base method.
func (m *MockWAFV2API) ListRuleGroupsWithContext(arg0 context.Context, arg1 *wafv2.ListRuleGroupsInput, arg2 ...request.Option) (*wafv2.ListRuleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListRuleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleGroupsWithContext indicates an expected call of ListRuleGroupsWithContext.
func (mr *MockWAFV2APIMockRecorder) ListRuleGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleGroupsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListRuleGroupsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockWAFV2API) ListTagsForResource(arg0 *wafv2.ListTagsForResourceInput) (*wafv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*wafv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockWAFV2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockWAFV2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockWAFV2API) ListTagsForResourceRequest(arg0 *wafv2.ListTagsForResourceInput) (*request.Request, *wafv2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockWAFV2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockWAFV2API) ListTagsForResourceWithContext(arg0 context.Context, arg1 *wafv2.ListTagsForResourceInput, arg2 ...request.Option) (*wafv2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockWAFV2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// ListWebACLs mocks base method.
func (m *MockWAFV2API) ListWebACLs(arg0 *wafv2.ListWebACLsInput) (*wafv2.ListWebACLsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebACLs", arg0)
	ret0, _ := ret[0].(*wafv2.ListWebACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebACLs indicates an expected call of ListWebACLs.
func (mr *MockWAFV2APIMockRecorder) ListWebACLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLs", reflect.TypeOf((*MockWAFV2API)(nil).ListWebACLs), arg0)
}

// ListWebACLsRequest mocks base method.
func (m *MockWAFV2API) ListWebACLsRequest(arg0 *wafv2.ListWebACLsInput) (*request.Request, *wafv2.ListWebACLsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebACLsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.ListWebACLsOutput)
	return ret0, ret1
}

// ListWebACLsRequest indicates an expected call of ListWebACLsRequest.
func (mr *MockWAFV2APIMockRecorder) ListWebACLsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLsRequest", reflect.TypeOf((*MockWAFV2API)(nil).ListWebACLsRequest), arg0)
}

// ListWebACLsWithContext mocks base method.
func (m *MockWAFV2API) ListWebACLsWithContext(arg0 context.Context, arg1 *wafv2.ListWebACLsInput, arg2 ...request.Option) (*wafv2.ListWebACLsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWebACLsWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.ListWebACLsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebACLsWithContext indicates an expected call of ListWebACLsWithContext.
func (mr *MockWAFV2APIMockRecorder) ListWebACLsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebACLsWithContext", reflect.TypeOf((*MockWAFV2API)(nil).ListWebACLsWithContext), varargs...)
}

// PutLoggingConfiguration mocks base method.
func (m *MockWAFV2API) PutLoggingConfiguration(arg0 *wafv2.PutLoggingConfigurationInput) (*wafv2.PutLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingConfiguration", arg0)
	ret0, _ := ret[0].(*wafv2.PutLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingConfiguration indicates an expected call of PutLoggingConfiguration.
func (mr *MockWAFV2APIMockRecorder) PutLoggingConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfiguration", reflect.TypeOf((*MockWAFV2API)(nil).PutLoggingConfiguration), arg0)
}

// PutLoggingConfigurationRequest mocks base method.
func (m *MockWAFV2API) PutLoggingConfigurationRequest(arg0 *wafv2.PutLoggingConfigurationInput) (*request.Request, *wafv2.PutLoggingConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLoggingConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.PutLoggingConfigurationOutput)
	return ret0, ret1
}

// PutLoggingConfigurationRequest indicates an expected call of PutLoggingConfigurationRequest.
func (mr *MockWAFV2APIMockRecorder) PutLoggingConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfigurationRequest", reflect.TypeOf((*MockWAFV2API)(nil).PutLoggingConfigurationRequest), arg0)
}

// PutLoggingConfigurationWithContext mocks base method.
func (m *MockWAFV2API) PutLoggingConfigurationWithContext(arg0 context.Context, arg1 *wafv2.PutLoggingConfigurationInput, arg2 ...request.Option) (*wafv2.PutLoggingConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutLoggingConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.PutLoggingConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLoggingConfigurationWithContext indicates an expected call of PutLoggingConfigurationWithContext.
func (mr *MockWAFV2APIMockRecorder) PutLoggingConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLoggingConfigurationWithContext", reflect.TypeOf((*MockWAFV2API)(nil).PutLoggingConfigurationWithContext), varargs...)
}

// PutPermissionPolicy mocks base method.
func (m *MockWAFV2API) PutPermissionPolicy(arg0 *wafv2.PutPermissionPolicyInput) (*wafv2.PutPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionPolicy", arg0)
	ret0, _ := ret[0].(*wafv2.PutPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionPolicy indicates an expected call of PutPermissionPolicy.
func (mr *MockWAFV2APIMockRecorder) PutPermissionPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicy", reflect.TypeOf((*MockWAFV2API)(nil).PutPermissionPolicy), arg0)
}

// PutPermissionPolicyRequest mocks base method.
func (m *MockWAFV2API) PutPermissionPolicyRequest(arg0 *wafv2.PutPermissionPolicyInput) (*request.Request, *wafv2.PutPermissionPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.PutPermissionPolicyOutput)
	return ret0, ret1
}

// PutPermissionPolicyRequest indicates an expected call of PutPermissionPolicyRequest.
func (mr *MockWAFV2APIMockRecorder) PutPermissionPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicyRequest", reflect.TypeOf((*MockWAFV2API)(nil).PutPermissionPolicyRequest), arg0)
}

// PutPermissionPolicyWithContext mocks base method.
func (m *MockWAFV2API) PutPermissionPolicyWithContext(arg0 context.Context, arg1 *wafv2.PutPermissionPolicyInput, arg2 ...request.Option) (*wafv2.PutPermissionPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPermissionPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.PutPermissionPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionPolicyWithContext indicates an expected call of PutPermissionPolicyWithContext.
func (mr *MockWAFV2APIMockRecorder) PutPermissionPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionPolicyWithContext", reflect.TypeOf((*MockWAFV2API)(nil).PutPermissionPolicyWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockWAFV2API) TagResource(arg0 *wafv2.TagResourceInput) (*wafv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*wafv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockWAFV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockWAFV2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockWAFV2API) TagResourceRequest(arg0 *wafv2.TagResourceInput) (*request.Request, *wafv2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockWAFV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockWAFV2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockWAFV2API) TagResourceWithContext(arg0 context.Context, arg1 *wafv2.TagResourceInput, arg2 ...request.Option) (*wafv2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockWAFV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockWAFV2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockWAFV2API) UntagResource(arg0 *wafv2.UntagResourceInput) (*wafv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*wafv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockWAFV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockWAFV2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockWAFV2API) UntagResourceRequest(arg0 *wafv2.UntagResourceInput) (*request.Request, *wafv2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockWAFV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockWAFV2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockWAFV2API) UntagResourceWithContext(arg0 context.Context, arg1 *wafv2.UntagResourceInput, arg2 ...request.Option) (*wafv2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockWAFV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockWAFV2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateIPSet mocks base method.
func (m *MockWAFV2API) UpdateIPSet(arg0 *wafv2.UpdateIPSetInput) (*wafv2.UpdateIPSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSet", arg0)
	ret0, _ := ret[0].(*wafv2.UpdateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSet indicates an expected call of UpdateIPSet.
func (mr *MockWAFV2APIMockRecorder) UpdateIPSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSet", reflect.TypeOf((*MockWAFV2API)(nil).UpdateIPSet), arg0)
}

// UpdateIPSetRequest mocks base method.
func (m *MockWAFV2API) UpdateIPSetRequest(arg0 *wafv2.UpdateIPSetInput) (*request.Request, *wafv2.UpdateIPSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.UpdateIPSetOutput)
	return ret0, ret1
}

// UpdateIPSetRequest indicates an expected call of UpdateIPSetRequest.
func (mr *MockWAFV2APIMockRecorder) UpdateIPSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).UpdateIPSetRequest), arg0)
}

// UpdateIPSetWithContext mocks base method.
func (m *MockWAFV2API) UpdateIPSetWithContext(arg0 context.Context, arg1 *wafv2.UpdateIPSetInput, arg2 ...request.Option) (*wafv2.UpdateIPSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIPSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.UpdateIPSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIPSetWithContext indicates an expected call of UpdateIPSetWithContext.
func (mr *MockWAFV2APIMockRecorder) UpdateIPSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).UpdateIPSetWithContext), varargs...)
}

// UpdateRegexPatternSet mocks base method.
func (m *MockWAFV2API) UpdateRegexPatternSet(arg0 *wafv2.UpdateRegexPatternSetInput) (*wafv2.UpdateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexPatternSet", arg0)
	ret0, _ := ret[0].(*wafv2.UpdateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexPatternSet indicates an expected call of UpdateRegexPatternSet.
func (mr *MockWAFV2APIMockRecorder) UpdateRegexPatternSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSet", reflect.TypeOf((*MockWAFV2API)(nil).UpdateRegexPatternSet), arg0)
}

// UpdateRegexPatternSetRequest mocks base method.
func (m *MockWAFV2API) UpdateRegexPatternSetRequest(arg0 *wafv2.UpdateRegexPatternSetInput) (*request.Request, *wafv2.UpdateRegexPatternSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegexPatternSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.UpdateRegexPatternSetOutput)
	return ret0, ret1
}

// UpdateRegexPatternSetRequest indicates an expected call of UpdateRegexPatternSetRequest.
func (mr *MockWAFV2APIMockRecorder) UpdateRegexPatternSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSetRequest", reflect.TypeOf((*MockWAFV2API)(nil).UpdateRegexPatternSetRequest), arg0)
}

// UpdateRegexPatternSetWithContext mocks base method.
func (m *MockWAFV2API) UpdateRegexPatternSetWithContext(arg0 context.Context, arg1 *wafv2.UpdateRegexPatternSetInput, arg2 ...request.Option) (*wafv2.UpdateRegexPatternSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegexPatternSetWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.UpdateRegexPatternSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegexPatternSetWithContext indicates an expected call of UpdateRegexPatternSetWithContext.
func (mr *MockWAFV2APIMockRecorder) UpdateRegexPatternSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegexPatternSetWithContext", reflect.TypeOf((*MockWAFV2API)(nil).UpdateRegexPatternSetWithContext), varargs...)
}

// UpdateRuleGroup mocks base method.
func (m *MockWAFV2API) UpdateRuleGroup(arg0 *wafv2.UpdateRuleGroupInput) (*wafv2.UpdateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleGroup", arg0)
	ret0, _ := ret[0].(*wafv2.UpdateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleGroup indicates an expected call of UpdateRuleGroup.
func (mr *MockWAFV2APIMockRecorder) UpdateRuleGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroup", reflect.TypeOf((*MockWAFV2API)(nil).UpdateRuleGroup), arg0)
}

// UpdateRuleGroupRequest mocks base method.
func (m *MockWAFV2API) UpdateRuleGroupRequest(arg0 *wafv2.UpdateRuleGroupInput) (*request.Request, *wafv2.UpdateRuleGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRuleGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.UpdateRuleGroupOutput)
	return ret0, ret1
}

// UpdateRuleGroupRequest indicates an expected call of UpdateRuleGroupRequest.
func (mr *MockWAFV2APIMockRecorder) UpdateRuleGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroupRequest", reflect.TypeOf((*MockWAFV2API)(nil).UpdateRuleGroupRequest), arg0)
}

// UpdateRuleGroupWithContext mocks base method.
func (m *MockWAFV2API) UpdateRuleGroupWithContext(arg0 context.Context, arg1 *wafv2.UpdateRuleGroupInput, arg2 ...request.Option) (*wafv2.UpdateRuleGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRuleGroupWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.UpdateRuleGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleGroupWithContext indicates an expected call of UpdateRuleGroupWithContext.
func (mr *MockWAFV2APIMockRecorder) UpdateRuleGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleGroupWithContext", reflect.TypeOf((*MockWAFV2API)(nil).UpdateRuleGroupWithContext), varargs...)
}

// UpdateWebACL mocks base method.
func (m *MockWAFV2API) UpdateWebACL(arg0 *wafv2.UpdateWebACLInput) (*wafv2.UpdateWebACLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebACL", arg0)
	ret0, _ := ret[0].(*wafv2.UpdateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebACL indicates an expected call of UpdateWebACL.
func (mr *MockWAFV2APIMockRecorder) UpdateWebACL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACL", reflect.TypeOf((*MockWAFV2API)(nil).UpdateWebACL), arg0)
}

// UpdateWebACLRequest mocks base method.
func (m *MockWAFV2API) UpdateWebACLRequest(arg0 *wafv2.UpdateWebACLInput) (*request.Request, *wafv2.UpdateWebACLOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebACLRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*wafv2.UpdateWebACLOutput)
	return ret0, ret1
}

// UpdateWebACLRequest indicates an expected call of UpdateWebACLRequest.
func (mr *MockWAFV2APIMockRecorder) UpdateWebACLRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACLRequest", reflect.TypeOf((*MockWAFV2API)(nil).UpdateWebACLRequest), arg0)
}

// UpdateWebACLWithContext mocks base method.
func (m *MockWAFV2API) UpdateWebACLWithContext(arg0 context.Context, arg1 *wafv2.UpdateWebACLInput, arg2 ...request.Option) (*wafv2.UpdateWebACLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWebACLWithContext", varargs...)
	ret0, _ := ret[0].(*wafv2.UpdateWebACLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebACLWithContext indicates an expected call of UpdateWebACLWithContext.
func (mr *MockWAFV2APIMockRecorder) UpdateWebACLWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebACLWithContext", reflect.TypeOf((*MockWAFV2API)(nil).UpdateWebACLWithContext), varargs...)
}

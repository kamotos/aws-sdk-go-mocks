// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/comprehendmedical/comprehendmedicaliface (interfaces: ComprehendMedicalAPI)

// Package comprehendmedicalmock is a generated GoMock package.
package comprehendmedicalmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	comprehendmedical "github.com/aws/aws-sdk-go/service/comprehendmedical"
	gomock "github.com/golang/mock/gomock"
)

// MockComprehendMedicalAPI is a mock of ComprehendMedicalAPI interface.
type MockComprehendMedicalAPI struct {
	ctrl     *gomock.Controller
	recorder *MockComprehendMedicalAPIMockRecorder
}

// MockComprehendMedicalAPIMockRecorder is the mock recorder for MockComprehendMedicalAPI.
type MockComprehendMedicalAPIMockRecorder struct {
	mock *MockComprehendMedicalAPI
}

// NewMockComprehendMedicalAPI creates a new mock instance.
func NewMockComprehendMedicalAPI(ctrl *gomock.Controller) *MockComprehendMedicalAPI {
	mock := &MockComprehendMedicalAPI{ctrl: ctrl}
	mock.recorder = &MockComprehendMedicalAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComprehendMedicalAPI) EXPECT() *MockComprehendMedicalAPIMockRecorder {
	return m.recorder
}

// DescribeEntitiesDetectionV2Job mocks base method.
func (m *MockComprehendMedicalAPI) DescribeEntitiesDetectionV2Job(arg0 *comprehendmedical.DescribeEntitiesDetectionV2JobInput) (*comprehendmedical.DescribeEntitiesDetectionV2JobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEntitiesDetectionV2Job", arg0)
	ret0, _ := ret[0].(*comprehendmedical.DescribeEntitiesDetectionV2JobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEntitiesDetectionV2Job indicates an expected call of DescribeEntitiesDetectionV2Job.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeEntitiesDetectionV2Job(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntitiesDetectionV2Job", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeEntitiesDetectionV2Job), arg0)
}

// DescribeEntitiesDetectionV2JobRequest mocks base method.
func (m *MockComprehendMedicalAPI) DescribeEntitiesDetectionV2JobRequest(arg0 *comprehendmedical.DescribeEntitiesDetectionV2JobInput) (*request.Request, *comprehendmedical.DescribeEntitiesDetectionV2JobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEntitiesDetectionV2JobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.DescribeEntitiesDetectionV2JobOutput)
	return ret0, ret1
}

// DescribeEntitiesDetectionV2JobRequest indicates an expected call of DescribeEntitiesDetectionV2JobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeEntitiesDetectionV2JobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntitiesDetectionV2JobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeEntitiesDetectionV2JobRequest), arg0)
}

// DescribeEntitiesDetectionV2JobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) DescribeEntitiesDetectionV2JobWithContext(arg0 context.Context, arg1 *comprehendmedical.DescribeEntitiesDetectionV2JobInput, arg2 ...request.Option) (*comprehendmedical.DescribeEntitiesDetectionV2JobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEntitiesDetectionV2JobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.DescribeEntitiesDetectionV2JobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEntitiesDetectionV2JobWithContext indicates an expected call of DescribeEntitiesDetectionV2JobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeEntitiesDetectionV2JobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntitiesDetectionV2JobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeEntitiesDetectionV2JobWithContext), varargs...)
}

// DescribeICD10CMInferenceJob mocks base method.
func (m *MockComprehendMedicalAPI) DescribeICD10CMInferenceJob(arg0 *comprehendmedical.DescribeICD10CMInferenceJobInput) (*comprehendmedical.DescribeICD10CMInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeICD10CMInferenceJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.DescribeICD10CMInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeICD10CMInferenceJob indicates an expected call of DescribeICD10CMInferenceJob.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeICD10CMInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeICD10CMInferenceJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeICD10CMInferenceJob), arg0)
}

// DescribeICD10CMInferenceJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) DescribeICD10CMInferenceJobRequest(arg0 *comprehendmedical.DescribeICD10CMInferenceJobInput) (*request.Request, *comprehendmedical.DescribeICD10CMInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeICD10CMInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.DescribeICD10CMInferenceJobOutput)
	return ret0, ret1
}

// DescribeICD10CMInferenceJobRequest indicates an expected call of DescribeICD10CMInferenceJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeICD10CMInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeICD10CMInferenceJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeICD10CMInferenceJobRequest), arg0)
}

// DescribeICD10CMInferenceJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) DescribeICD10CMInferenceJobWithContext(arg0 context.Context, arg1 *comprehendmedical.DescribeICD10CMInferenceJobInput, arg2 ...request.Option) (*comprehendmedical.DescribeICD10CMInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeICD10CMInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.DescribeICD10CMInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeICD10CMInferenceJobWithContext indicates an expected call of DescribeICD10CMInferenceJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeICD10CMInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeICD10CMInferenceJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeICD10CMInferenceJobWithContext), varargs...)
}

// DescribePHIDetectionJob mocks base method.
func (m *MockComprehendMedicalAPI) DescribePHIDetectionJob(arg0 *comprehendmedical.DescribePHIDetectionJobInput) (*comprehendmedical.DescribePHIDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePHIDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.DescribePHIDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePHIDetectionJob indicates an expected call of DescribePHIDetectionJob.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribePHIDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePHIDetectionJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribePHIDetectionJob), arg0)
}

// DescribePHIDetectionJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) DescribePHIDetectionJobRequest(arg0 *comprehendmedical.DescribePHIDetectionJobInput) (*request.Request, *comprehendmedical.DescribePHIDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePHIDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.DescribePHIDetectionJobOutput)
	return ret0, ret1
}

// DescribePHIDetectionJobRequest indicates an expected call of DescribePHIDetectionJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribePHIDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePHIDetectionJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribePHIDetectionJobRequest), arg0)
}

// DescribePHIDetectionJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) DescribePHIDetectionJobWithContext(arg0 context.Context, arg1 *comprehendmedical.DescribePHIDetectionJobInput, arg2 ...request.Option) (*comprehendmedical.DescribePHIDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePHIDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.DescribePHIDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePHIDetectionJobWithContext indicates an expected call of DescribePHIDetectionJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribePHIDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePHIDetectionJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribePHIDetectionJobWithContext), varargs...)
}

// DescribeRxNormInferenceJob mocks base method.
func (m *MockComprehendMedicalAPI) DescribeRxNormInferenceJob(arg0 *comprehendmedical.DescribeRxNormInferenceJobInput) (*comprehendmedical.DescribeRxNormInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRxNormInferenceJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.DescribeRxNormInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRxNormInferenceJob indicates an expected call of DescribeRxNormInferenceJob.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeRxNormInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRxNormInferenceJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeRxNormInferenceJob), arg0)
}

// DescribeRxNormInferenceJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) DescribeRxNormInferenceJobRequest(arg0 *comprehendmedical.DescribeRxNormInferenceJobInput) (*request.Request, *comprehendmedical.DescribeRxNormInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRxNormInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.DescribeRxNormInferenceJobOutput)
	return ret0, ret1
}

// DescribeRxNormInferenceJobRequest indicates an expected call of DescribeRxNormInferenceJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeRxNormInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRxNormInferenceJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeRxNormInferenceJobRequest), arg0)
}

// DescribeRxNormInferenceJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) DescribeRxNormInferenceJobWithContext(arg0 context.Context, arg1 *comprehendmedical.DescribeRxNormInferenceJobInput, arg2 ...request.Option) (*comprehendmedical.DescribeRxNormInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRxNormInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.DescribeRxNormInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRxNormInferenceJobWithContext indicates an expected call of DescribeRxNormInferenceJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) DescribeRxNormInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRxNormInferenceJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DescribeRxNormInferenceJobWithContext), varargs...)
}

// DetectEntities mocks base method.
func (m *MockComprehendMedicalAPI) DetectEntities(arg0 *comprehendmedical.DetectEntitiesInput) (*comprehendmedical.DetectEntitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectEntities", arg0)
	ret0, _ := ret[0].(*comprehendmedical.DetectEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectEntities indicates an expected call of DetectEntities.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectEntities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntities", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectEntities), arg0)
}

// DetectEntitiesRequest mocks base method.
func (m *MockComprehendMedicalAPI) DetectEntitiesRequest(arg0 *comprehendmedical.DetectEntitiesInput) (*request.Request, *comprehendmedical.DetectEntitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectEntitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.DetectEntitiesOutput)
	return ret0, ret1
}

// DetectEntitiesRequest indicates an expected call of DetectEntitiesRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectEntitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntitiesRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectEntitiesRequest), arg0)
}

// DetectEntitiesV2 mocks base method.
func (m *MockComprehendMedicalAPI) DetectEntitiesV2(arg0 *comprehendmedical.DetectEntitiesV2Input) (*comprehendmedical.DetectEntitiesV2Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectEntitiesV2", arg0)
	ret0, _ := ret[0].(*comprehendmedical.DetectEntitiesV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectEntitiesV2 indicates an expected call of DetectEntitiesV2.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectEntitiesV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntitiesV2", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectEntitiesV2), arg0)
}

// DetectEntitiesV2Request mocks base method.
func (m *MockComprehendMedicalAPI) DetectEntitiesV2Request(arg0 *comprehendmedical.DetectEntitiesV2Input) (*request.Request, *comprehendmedical.DetectEntitiesV2Output) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectEntitiesV2Request", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.DetectEntitiesV2Output)
	return ret0, ret1
}

// DetectEntitiesV2Request indicates an expected call of DetectEntitiesV2Request.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectEntitiesV2Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntitiesV2Request", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectEntitiesV2Request), arg0)
}

// DetectEntitiesV2WithContext mocks base method.
func (m *MockComprehendMedicalAPI) DetectEntitiesV2WithContext(arg0 context.Context, arg1 *comprehendmedical.DetectEntitiesV2Input, arg2 ...request.Option) (*comprehendmedical.DetectEntitiesV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectEntitiesV2WithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.DetectEntitiesV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectEntitiesV2WithContext indicates an expected call of DetectEntitiesV2WithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectEntitiesV2WithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntitiesV2WithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectEntitiesV2WithContext), varargs...)
}

// DetectEntitiesWithContext mocks base method.
func (m *MockComprehendMedicalAPI) DetectEntitiesWithContext(arg0 context.Context, arg1 *comprehendmedical.DetectEntitiesInput, arg2 ...request.Option) (*comprehendmedical.DetectEntitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectEntitiesWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.DetectEntitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectEntitiesWithContext indicates an expected call of DetectEntitiesWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectEntitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectEntitiesWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectEntitiesWithContext), varargs...)
}

// DetectPHI mocks base method.
func (m *MockComprehendMedicalAPI) DetectPHI(arg0 *comprehendmedical.DetectPHIInput) (*comprehendmedical.DetectPHIOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectPHI", arg0)
	ret0, _ := ret[0].(*comprehendmedical.DetectPHIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectPHI indicates an expected call of DetectPHI.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectPHI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectPHI", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectPHI), arg0)
}

// DetectPHIRequest mocks base method.
func (m *MockComprehendMedicalAPI) DetectPHIRequest(arg0 *comprehendmedical.DetectPHIInput) (*request.Request, *comprehendmedical.DetectPHIOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectPHIRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.DetectPHIOutput)
	return ret0, ret1
}

// DetectPHIRequest indicates an expected call of DetectPHIRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectPHIRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectPHIRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectPHIRequest), arg0)
}

// DetectPHIWithContext mocks base method.
func (m *MockComprehendMedicalAPI) DetectPHIWithContext(arg0 context.Context, arg1 *comprehendmedical.DetectPHIInput, arg2 ...request.Option) (*comprehendmedical.DetectPHIOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectPHIWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.DetectPHIOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectPHIWithContext indicates an expected call of DetectPHIWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) DetectPHIWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectPHIWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).DetectPHIWithContext), varargs...)
}

// InferICD10CM mocks base method.
func (m *MockComprehendMedicalAPI) InferICD10CM(arg0 *comprehendmedical.InferICD10CMInput) (*comprehendmedical.InferICD10CMOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferICD10CM", arg0)
	ret0, _ := ret[0].(*comprehendmedical.InferICD10CMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferICD10CM indicates an expected call of InferICD10CM.
func (mr *MockComprehendMedicalAPIMockRecorder) InferICD10CM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferICD10CM", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).InferICD10CM), arg0)
}

// InferICD10CMRequest mocks base method.
func (m *MockComprehendMedicalAPI) InferICD10CMRequest(arg0 *comprehendmedical.InferICD10CMInput) (*request.Request, *comprehendmedical.InferICD10CMOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferICD10CMRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.InferICD10CMOutput)
	return ret0, ret1
}

// InferICD10CMRequest indicates an expected call of InferICD10CMRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) InferICD10CMRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferICD10CMRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).InferICD10CMRequest), arg0)
}

// InferICD10CMWithContext mocks base method.
func (m *MockComprehendMedicalAPI) InferICD10CMWithContext(arg0 context.Context, arg1 *comprehendmedical.InferICD10CMInput, arg2 ...request.Option) (*comprehendmedical.InferICD10CMOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InferICD10CMWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.InferICD10CMOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferICD10CMWithContext indicates an expected call of InferICD10CMWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) InferICD10CMWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferICD10CMWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).InferICD10CMWithContext), varargs...)
}

// InferRxNorm mocks base method.
func (m *MockComprehendMedicalAPI) InferRxNorm(arg0 *comprehendmedical.InferRxNormInput) (*comprehendmedical.InferRxNormOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferRxNorm", arg0)
	ret0, _ := ret[0].(*comprehendmedical.InferRxNormOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferRxNorm indicates an expected call of InferRxNorm.
func (mr *MockComprehendMedicalAPIMockRecorder) InferRxNorm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferRxNorm", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).InferRxNorm), arg0)
}

// InferRxNormRequest mocks base method.
func (m *MockComprehendMedicalAPI) InferRxNormRequest(arg0 *comprehendmedical.InferRxNormInput) (*request.Request, *comprehendmedical.InferRxNormOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferRxNormRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.InferRxNormOutput)
	return ret0, ret1
}

// InferRxNormRequest indicates an expected call of InferRxNormRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) InferRxNormRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferRxNormRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).InferRxNormRequest), arg0)
}

// InferRxNormWithContext mocks base method.
func (m *MockComprehendMedicalAPI) InferRxNormWithContext(arg0 context.Context, arg1 *comprehendmedical.InferRxNormInput, arg2 ...request.Option) (*comprehendmedical.InferRxNormOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InferRxNormWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.InferRxNormOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferRxNormWithContext indicates an expected call of InferRxNormWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) InferRxNormWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferRxNormWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).InferRxNormWithContext), varargs...)
}

// ListEntitiesDetectionV2Jobs mocks base method.
func (m *MockComprehendMedicalAPI) ListEntitiesDetectionV2Jobs(arg0 *comprehendmedical.ListEntitiesDetectionV2JobsInput) (*comprehendmedical.ListEntitiesDetectionV2JobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitiesDetectionV2Jobs", arg0)
	ret0, _ := ret[0].(*comprehendmedical.ListEntitiesDetectionV2JobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitiesDetectionV2Jobs indicates an expected call of ListEntitiesDetectionV2Jobs.
func (mr *MockComprehendMedicalAPIMockRecorder) ListEntitiesDetectionV2Jobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionV2Jobs", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListEntitiesDetectionV2Jobs), arg0)
}

// ListEntitiesDetectionV2JobsRequest mocks base method.
func (m *MockComprehendMedicalAPI) ListEntitiesDetectionV2JobsRequest(arg0 *comprehendmedical.ListEntitiesDetectionV2JobsInput) (*request.Request, *comprehendmedical.ListEntitiesDetectionV2JobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntitiesDetectionV2JobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.ListEntitiesDetectionV2JobsOutput)
	return ret0, ret1
}

// ListEntitiesDetectionV2JobsRequest indicates an expected call of ListEntitiesDetectionV2JobsRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) ListEntitiesDetectionV2JobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionV2JobsRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListEntitiesDetectionV2JobsRequest), arg0)
}

// ListEntitiesDetectionV2JobsWithContext mocks base method.
func (m *MockComprehendMedicalAPI) ListEntitiesDetectionV2JobsWithContext(arg0 context.Context, arg1 *comprehendmedical.ListEntitiesDetectionV2JobsInput, arg2 ...request.Option) (*comprehendmedical.ListEntitiesDetectionV2JobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitiesDetectionV2JobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.ListEntitiesDetectionV2JobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitiesDetectionV2JobsWithContext indicates an expected call of ListEntitiesDetectionV2JobsWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) ListEntitiesDetectionV2JobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesDetectionV2JobsWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListEntitiesDetectionV2JobsWithContext), varargs...)
}

// ListICD10CMInferenceJobs mocks base method.
func (m *MockComprehendMedicalAPI) ListICD10CMInferenceJobs(arg0 *comprehendmedical.ListICD10CMInferenceJobsInput) (*comprehendmedical.ListICD10CMInferenceJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListICD10CMInferenceJobs", arg0)
	ret0, _ := ret[0].(*comprehendmedical.ListICD10CMInferenceJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListICD10CMInferenceJobs indicates an expected call of ListICD10CMInferenceJobs.
func (mr *MockComprehendMedicalAPIMockRecorder) ListICD10CMInferenceJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListICD10CMInferenceJobs", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListICD10CMInferenceJobs), arg0)
}

// ListICD10CMInferenceJobsRequest mocks base method.
func (m *MockComprehendMedicalAPI) ListICD10CMInferenceJobsRequest(arg0 *comprehendmedical.ListICD10CMInferenceJobsInput) (*request.Request, *comprehendmedical.ListICD10CMInferenceJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListICD10CMInferenceJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.ListICD10CMInferenceJobsOutput)
	return ret0, ret1
}

// ListICD10CMInferenceJobsRequest indicates an expected call of ListICD10CMInferenceJobsRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) ListICD10CMInferenceJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListICD10CMInferenceJobsRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListICD10CMInferenceJobsRequest), arg0)
}

// ListICD10CMInferenceJobsWithContext mocks base method.
func (m *MockComprehendMedicalAPI) ListICD10CMInferenceJobsWithContext(arg0 context.Context, arg1 *comprehendmedical.ListICD10CMInferenceJobsInput, arg2 ...request.Option) (*comprehendmedical.ListICD10CMInferenceJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListICD10CMInferenceJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.ListICD10CMInferenceJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListICD10CMInferenceJobsWithContext indicates an expected call of ListICD10CMInferenceJobsWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) ListICD10CMInferenceJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListICD10CMInferenceJobsWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListICD10CMInferenceJobsWithContext), varargs...)
}

// ListPHIDetectionJobs mocks base method.
func (m *MockComprehendMedicalAPI) ListPHIDetectionJobs(arg0 *comprehendmedical.ListPHIDetectionJobsInput) (*comprehendmedical.ListPHIDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPHIDetectionJobs", arg0)
	ret0, _ := ret[0].(*comprehendmedical.ListPHIDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPHIDetectionJobs indicates an expected call of ListPHIDetectionJobs.
func (mr *MockComprehendMedicalAPIMockRecorder) ListPHIDetectionJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPHIDetectionJobs", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListPHIDetectionJobs), arg0)
}

// ListPHIDetectionJobsRequest mocks base method.
func (m *MockComprehendMedicalAPI) ListPHIDetectionJobsRequest(arg0 *comprehendmedical.ListPHIDetectionJobsInput) (*request.Request, *comprehendmedical.ListPHIDetectionJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPHIDetectionJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.ListPHIDetectionJobsOutput)
	return ret0, ret1
}

// ListPHIDetectionJobsRequest indicates an expected call of ListPHIDetectionJobsRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) ListPHIDetectionJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPHIDetectionJobsRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListPHIDetectionJobsRequest), arg0)
}

// ListPHIDetectionJobsWithContext mocks base method.
func (m *MockComprehendMedicalAPI) ListPHIDetectionJobsWithContext(arg0 context.Context, arg1 *comprehendmedical.ListPHIDetectionJobsInput, arg2 ...request.Option) (*comprehendmedical.ListPHIDetectionJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPHIDetectionJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.ListPHIDetectionJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPHIDetectionJobsWithContext indicates an expected call of ListPHIDetectionJobsWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) ListPHIDetectionJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPHIDetectionJobsWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListPHIDetectionJobsWithContext), varargs...)
}

// ListRxNormInferenceJobs mocks base method.
func (m *MockComprehendMedicalAPI) ListRxNormInferenceJobs(arg0 *comprehendmedical.ListRxNormInferenceJobsInput) (*comprehendmedical.ListRxNormInferenceJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRxNormInferenceJobs", arg0)
	ret0, _ := ret[0].(*comprehendmedical.ListRxNormInferenceJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRxNormInferenceJobs indicates an expected call of ListRxNormInferenceJobs.
func (mr *MockComprehendMedicalAPIMockRecorder) ListRxNormInferenceJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRxNormInferenceJobs", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListRxNormInferenceJobs), arg0)
}

// ListRxNormInferenceJobsRequest mocks base method.
func (m *MockComprehendMedicalAPI) ListRxNormInferenceJobsRequest(arg0 *comprehendmedical.ListRxNormInferenceJobsInput) (*request.Request, *comprehendmedical.ListRxNormInferenceJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRxNormInferenceJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.ListRxNormInferenceJobsOutput)
	return ret0, ret1
}

// ListRxNormInferenceJobsRequest indicates an expected call of ListRxNormInferenceJobsRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) ListRxNormInferenceJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRxNormInferenceJobsRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListRxNormInferenceJobsRequest), arg0)
}

// ListRxNormInferenceJobsWithContext mocks base method.
func (m *MockComprehendMedicalAPI) ListRxNormInferenceJobsWithContext(arg0 context.Context, arg1 *comprehendmedical.ListRxNormInferenceJobsInput, arg2 ...request.Option) (*comprehendmedical.ListRxNormInferenceJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRxNormInferenceJobsWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.ListRxNormInferenceJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRxNormInferenceJobsWithContext indicates an expected call of ListRxNormInferenceJobsWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) ListRxNormInferenceJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRxNormInferenceJobsWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).ListRxNormInferenceJobsWithContext), varargs...)
}

// StartEntitiesDetectionV2Job mocks base method.
func (m *MockComprehendMedicalAPI) StartEntitiesDetectionV2Job(arg0 *comprehendmedical.StartEntitiesDetectionV2JobInput) (*comprehendmedical.StartEntitiesDetectionV2JobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEntitiesDetectionV2Job", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StartEntitiesDetectionV2JobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEntitiesDetectionV2Job indicates an expected call of StartEntitiesDetectionV2Job.
func (mr *MockComprehendMedicalAPIMockRecorder) StartEntitiesDetectionV2Job(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEntitiesDetectionV2Job", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartEntitiesDetectionV2Job), arg0)
}

// StartEntitiesDetectionV2JobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StartEntitiesDetectionV2JobRequest(arg0 *comprehendmedical.StartEntitiesDetectionV2JobInput) (*request.Request, *comprehendmedical.StartEntitiesDetectionV2JobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEntitiesDetectionV2JobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StartEntitiesDetectionV2JobOutput)
	return ret0, ret1
}

// StartEntitiesDetectionV2JobRequest indicates an expected call of StartEntitiesDetectionV2JobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StartEntitiesDetectionV2JobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEntitiesDetectionV2JobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartEntitiesDetectionV2JobRequest), arg0)
}

// StartEntitiesDetectionV2JobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StartEntitiesDetectionV2JobWithContext(arg0 context.Context, arg1 *comprehendmedical.StartEntitiesDetectionV2JobInput, arg2 ...request.Option) (*comprehendmedical.StartEntitiesDetectionV2JobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartEntitiesDetectionV2JobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StartEntitiesDetectionV2JobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartEntitiesDetectionV2JobWithContext indicates an expected call of StartEntitiesDetectionV2JobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StartEntitiesDetectionV2JobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEntitiesDetectionV2JobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartEntitiesDetectionV2JobWithContext), varargs...)
}

// StartICD10CMInferenceJob mocks base method.
func (m *MockComprehendMedicalAPI) StartICD10CMInferenceJob(arg0 *comprehendmedical.StartICD10CMInferenceJobInput) (*comprehendmedical.StartICD10CMInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartICD10CMInferenceJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StartICD10CMInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartICD10CMInferenceJob indicates an expected call of StartICD10CMInferenceJob.
func (mr *MockComprehendMedicalAPIMockRecorder) StartICD10CMInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartICD10CMInferenceJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartICD10CMInferenceJob), arg0)
}

// StartICD10CMInferenceJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StartICD10CMInferenceJobRequest(arg0 *comprehendmedical.StartICD10CMInferenceJobInput) (*request.Request, *comprehendmedical.StartICD10CMInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartICD10CMInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StartICD10CMInferenceJobOutput)
	return ret0, ret1
}

// StartICD10CMInferenceJobRequest indicates an expected call of StartICD10CMInferenceJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StartICD10CMInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartICD10CMInferenceJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartICD10CMInferenceJobRequest), arg0)
}

// StartICD10CMInferenceJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StartICD10CMInferenceJobWithContext(arg0 context.Context, arg1 *comprehendmedical.StartICD10CMInferenceJobInput, arg2 ...request.Option) (*comprehendmedical.StartICD10CMInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartICD10CMInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StartICD10CMInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartICD10CMInferenceJobWithContext indicates an expected call of StartICD10CMInferenceJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StartICD10CMInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartICD10CMInferenceJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartICD10CMInferenceJobWithContext), varargs...)
}

// StartPHIDetectionJob mocks base method.
func (m *MockComprehendMedicalAPI) StartPHIDetectionJob(arg0 *comprehendmedical.StartPHIDetectionJobInput) (*comprehendmedical.StartPHIDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPHIDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StartPHIDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPHIDetectionJob indicates an expected call of StartPHIDetectionJob.
func (mr *MockComprehendMedicalAPIMockRecorder) StartPHIDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPHIDetectionJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartPHIDetectionJob), arg0)
}

// StartPHIDetectionJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StartPHIDetectionJobRequest(arg0 *comprehendmedical.StartPHIDetectionJobInput) (*request.Request, *comprehendmedical.StartPHIDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPHIDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StartPHIDetectionJobOutput)
	return ret0, ret1
}

// StartPHIDetectionJobRequest indicates an expected call of StartPHIDetectionJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StartPHIDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPHIDetectionJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartPHIDetectionJobRequest), arg0)
}

// StartPHIDetectionJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StartPHIDetectionJobWithContext(arg0 context.Context, arg1 *comprehendmedical.StartPHIDetectionJobInput, arg2 ...request.Option) (*comprehendmedical.StartPHIDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartPHIDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StartPHIDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPHIDetectionJobWithContext indicates an expected call of StartPHIDetectionJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StartPHIDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPHIDetectionJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartPHIDetectionJobWithContext), varargs...)
}

// StartRxNormInferenceJob mocks base method.
func (m *MockComprehendMedicalAPI) StartRxNormInferenceJob(arg0 *comprehendmedical.StartRxNormInferenceJobInput) (*comprehendmedical.StartRxNormInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRxNormInferenceJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StartRxNormInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRxNormInferenceJob indicates an expected call of StartRxNormInferenceJob.
func (mr *MockComprehendMedicalAPIMockRecorder) StartRxNormInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRxNormInferenceJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartRxNormInferenceJob), arg0)
}

// StartRxNormInferenceJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StartRxNormInferenceJobRequest(arg0 *comprehendmedical.StartRxNormInferenceJobInput) (*request.Request, *comprehendmedical.StartRxNormInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRxNormInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StartRxNormInferenceJobOutput)
	return ret0, ret1
}

// StartRxNormInferenceJobRequest indicates an expected call of StartRxNormInferenceJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StartRxNormInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRxNormInferenceJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartRxNormInferenceJobRequest), arg0)
}

// StartRxNormInferenceJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StartRxNormInferenceJobWithContext(arg0 context.Context, arg1 *comprehendmedical.StartRxNormInferenceJobInput, arg2 ...request.Option) (*comprehendmedical.StartRxNormInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartRxNormInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StartRxNormInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRxNormInferenceJobWithContext indicates an expected call of StartRxNormInferenceJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StartRxNormInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRxNormInferenceJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StartRxNormInferenceJobWithContext), varargs...)
}

// StopEntitiesDetectionV2Job mocks base method.
func (m *MockComprehendMedicalAPI) StopEntitiesDetectionV2Job(arg0 *comprehendmedical.StopEntitiesDetectionV2JobInput) (*comprehendmedical.StopEntitiesDetectionV2JobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEntitiesDetectionV2Job", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StopEntitiesDetectionV2JobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEntitiesDetectionV2Job indicates an expected call of StopEntitiesDetectionV2Job.
func (mr *MockComprehendMedicalAPIMockRecorder) StopEntitiesDetectionV2Job(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEntitiesDetectionV2Job", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopEntitiesDetectionV2Job), arg0)
}

// StopEntitiesDetectionV2JobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StopEntitiesDetectionV2JobRequest(arg0 *comprehendmedical.StopEntitiesDetectionV2JobInput) (*request.Request, *comprehendmedical.StopEntitiesDetectionV2JobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopEntitiesDetectionV2JobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StopEntitiesDetectionV2JobOutput)
	return ret0, ret1
}

// StopEntitiesDetectionV2JobRequest indicates an expected call of StopEntitiesDetectionV2JobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StopEntitiesDetectionV2JobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEntitiesDetectionV2JobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopEntitiesDetectionV2JobRequest), arg0)
}

// StopEntitiesDetectionV2JobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StopEntitiesDetectionV2JobWithContext(arg0 context.Context, arg1 *comprehendmedical.StopEntitiesDetectionV2JobInput, arg2 ...request.Option) (*comprehendmedical.StopEntitiesDetectionV2JobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopEntitiesDetectionV2JobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StopEntitiesDetectionV2JobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopEntitiesDetectionV2JobWithContext indicates an expected call of StopEntitiesDetectionV2JobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StopEntitiesDetectionV2JobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEntitiesDetectionV2JobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopEntitiesDetectionV2JobWithContext), varargs...)
}

// StopICD10CMInferenceJob mocks base method.
func (m *MockComprehendMedicalAPI) StopICD10CMInferenceJob(arg0 *comprehendmedical.StopICD10CMInferenceJobInput) (*comprehendmedical.StopICD10CMInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopICD10CMInferenceJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StopICD10CMInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopICD10CMInferenceJob indicates an expected call of StopICD10CMInferenceJob.
func (mr *MockComprehendMedicalAPIMockRecorder) StopICD10CMInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopICD10CMInferenceJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopICD10CMInferenceJob), arg0)
}

// StopICD10CMInferenceJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StopICD10CMInferenceJobRequest(arg0 *comprehendmedical.StopICD10CMInferenceJobInput) (*request.Request, *comprehendmedical.StopICD10CMInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopICD10CMInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StopICD10CMInferenceJobOutput)
	return ret0, ret1
}

// StopICD10CMInferenceJobRequest indicates an expected call of StopICD10CMInferenceJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StopICD10CMInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopICD10CMInferenceJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopICD10CMInferenceJobRequest), arg0)
}

// StopICD10CMInferenceJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StopICD10CMInferenceJobWithContext(arg0 context.Context, arg1 *comprehendmedical.StopICD10CMInferenceJobInput, arg2 ...request.Option) (*comprehendmedical.StopICD10CMInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopICD10CMInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StopICD10CMInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopICD10CMInferenceJobWithContext indicates an expected call of StopICD10CMInferenceJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StopICD10CMInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopICD10CMInferenceJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopICD10CMInferenceJobWithContext), varargs...)
}

// StopPHIDetectionJob mocks base method.
func (m *MockComprehendMedicalAPI) StopPHIDetectionJob(arg0 *comprehendmedical.StopPHIDetectionJobInput) (*comprehendmedical.StopPHIDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPHIDetectionJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StopPHIDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPHIDetectionJob indicates an expected call of StopPHIDetectionJob.
func (mr *MockComprehendMedicalAPIMockRecorder) StopPHIDetectionJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPHIDetectionJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopPHIDetectionJob), arg0)
}

// StopPHIDetectionJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StopPHIDetectionJobRequest(arg0 *comprehendmedical.StopPHIDetectionJobInput) (*request.Request, *comprehendmedical.StopPHIDetectionJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPHIDetectionJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StopPHIDetectionJobOutput)
	return ret0, ret1
}

// StopPHIDetectionJobRequest indicates an expected call of StopPHIDetectionJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StopPHIDetectionJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPHIDetectionJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopPHIDetectionJobRequest), arg0)
}

// StopPHIDetectionJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StopPHIDetectionJobWithContext(arg0 context.Context, arg1 *comprehendmedical.StopPHIDetectionJobInput, arg2 ...request.Option) (*comprehendmedical.StopPHIDetectionJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopPHIDetectionJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StopPHIDetectionJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopPHIDetectionJobWithContext indicates an expected call of StopPHIDetectionJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StopPHIDetectionJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPHIDetectionJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopPHIDetectionJobWithContext), varargs...)
}

// StopRxNormInferenceJob mocks base method.
func (m *MockComprehendMedicalAPI) StopRxNormInferenceJob(arg0 *comprehendmedical.StopRxNormInferenceJobInput) (*comprehendmedical.StopRxNormInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRxNormInferenceJob", arg0)
	ret0, _ := ret[0].(*comprehendmedical.StopRxNormInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopRxNormInferenceJob indicates an expected call of StopRxNormInferenceJob.
func (mr *MockComprehendMedicalAPIMockRecorder) StopRxNormInferenceJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRxNormInferenceJob", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopRxNormInferenceJob), arg0)
}

// StopRxNormInferenceJobRequest mocks base method.
func (m *MockComprehendMedicalAPI) StopRxNormInferenceJobRequest(arg0 *comprehendmedical.StopRxNormInferenceJobInput) (*request.Request, *comprehendmedical.StopRxNormInferenceJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRxNormInferenceJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*comprehendmedical.StopRxNormInferenceJobOutput)
	return ret0, ret1
}

// StopRxNormInferenceJobRequest indicates an expected call of StopRxNormInferenceJobRequest.
func (mr *MockComprehendMedicalAPIMockRecorder) StopRxNormInferenceJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRxNormInferenceJobRequest", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopRxNormInferenceJobRequest), arg0)
}

// StopRxNormInferenceJobWithContext mocks base method.
func (m *MockComprehendMedicalAPI) StopRxNormInferenceJobWithContext(arg0 context.Context, arg1 *comprehendmedical.StopRxNormInferenceJobInput, arg2 ...request.Option) (*comprehendmedical.StopRxNormInferenceJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopRxNormInferenceJobWithContext", varargs...)
	ret0, _ := ret[0].(*comprehendmedical.StopRxNormInferenceJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopRxNormInferenceJobWithContext indicates an expected call of StopRxNormInferenceJobWithContext.
func (mr *MockComprehendMedicalAPIMockRecorder) StopRxNormInferenceJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRxNormInferenceJobWithContext", reflect.TypeOf((*MockComprehendMedicalAPI)(nil).StopRxNormInferenceJobWithContext), varargs...)
}

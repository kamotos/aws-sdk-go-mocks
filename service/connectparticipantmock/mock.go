// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/connectparticipant/connectparticipantiface (interfaces: ConnectParticipantAPI)

// Package connectparticipantmock is a generated GoMock package.
package connectparticipantmock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	connectparticipant "github.com/aws/aws-sdk-go/service/connectparticipant"
	gomock "github.com/golang/mock/gomock"
)

// MockConnectParticipantAPI is a mock of ConnectParticipantAPI interface.
type MockConnectParticipantAPI struct {
	ctrl     *gomock.Controller
	recorder *MockConnectParticipantAPIMockRecorder
}

// MockConnectParticipantAPIMockRecorder is the mock recorder for MockConnectParticipantAPI.
type MockConnectParticipantAPIMockRecorder struct {
	mock *MockConnectParticipantAPI
}

// NewMockConnectParticipantAPI creates a new mock instance.
func NewMockConnectParticipantAPI(ctrl *gomock.Controller) *MockConnectParticipantAPI {
	mock := &MockConnectParticipantAPI{ctrl: ctrl}
	mock.recorder = &MockConnectParticipantAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectParticipantAPI) EXPECT() *MockConnectParticipantAPIMockRecorder {
	return m.recorder
}

// CompleteAttachmentUpload mocks base method.
func (m *MockConnectParticipantAPI) CompleteAttachmentUpload(arg0 *connectparticipant.CompleteAttachmentUploadInput) (*connectparticipant.CompleteAttachmentUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteAttachmentUpload", arg0)
	ret0, _ := ret[0].(*connectparticipant.CompleteAttachmentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteAttachmentUpload indicates an expected call of CompleteAttachmentUpload.
func (mr *MockConnectParticipantAPIMockRecorder) CompleteAttachmentUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteAttachmentUpload", reflect.TypeOf((*MockConnectParticipantAPI)(nil).CompleteAttachmentUpload), arg0)
}

// CompleteAttachmentUploadRequest mocks base method.
func (m *MockConnectParticipantAPI) CompleteAttachmentUploadRequest(arg0 *connectparticipant.CompleteAttachmentUploadInput) (*request.Request, *connectparticipant.CompleteAttachmentUploadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteAttachmentUploadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.CompleteAttachmentUploadOutput)
	return ret0, ret1
}

// CompleteAttachmentUploadRequest indicates an expected call of CompleteAttachmentUploadRequest.
func (mr *MockConnectParticipantAPIMockRecorder) CompleteAttachmentUploadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteAttachmentUploadRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).CompleteAttachmentUploadRequest), arg0)
}

// CompleteAttachmentUploadWithContext mocks base method.
func (m *MockConnectParticipantAPI) CompleteAttachmentUploadWithContext(arg0 context.Context, arg1 *connectparticipant.CompleteAttachmentUploadInput, arg2 ...request.Option) (*connectparticipant.CompleteAttachmentUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteAttachmentUploadWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.CompleteAttachmentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteAttachmentUploadWithContext indicates an expected call of CompleteAttachmentUploadWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) CompleteAttachmentUploadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteAttachmentUploadWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).CompleteAttachmentUploadWithContext), varargs...)
}

// CreateParticipantConnection mocks base method.
func (m *MockConnectParticipantAPI) CreateParticipantConnection(arg0 *connectparticipant.CreateParticipantConnectionInput) (*connectparticipant.CreateParticipantConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParticipantConnection", arg0)
	ret0, _ := ret[0].(*connectparticipant.CreateParticipantConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParticipantConnection indicates an expected call of CreateParticipantConnection.
func (mr *MockConnectParticipantAPIMockRecorder) CreateParticipantConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipantConnection", reflect.TypeOf((*MockConnectParticipantAPI)(nil).CreateParticipantConnection), arg0)
}

// CreateParticipantConnectionRequest mocks base method.
func (m *MockConnectParticipantAPI) CreateParticipantConnectionRequest(arg0 *connectparticipant.CreateParticipantConnectionInput) (*request.Request, *connectparticipant.CreateParticipantConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParticipantConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.CreateParticipantConnectionOutput)
	return ret0, ret1
}

// CreateParticipantConnectionRequest indicates an expected call of CreateParticipantConnectionRequest.
func (mr *MockConnectParticipantAPIMockRecorder) CreateParticipantConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipantConnectionRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).CreateParticipantConnectionRequest), arg0)
}

// CreateParticipantConnectionWithContext mocks base method.
func (m *MockConnectParticipantAPI) CreateParticipantConnectionWithContext(arg0 context.Context, arg1 *connectparticipant.CreateParticipantConnectionInput, arg2 ...request.Option) (*connectparticipant.CreateParticipantConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateParticipantConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.CreateParticipantConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParticipantConnectionWithContext indicates an expected call of CreateParticipantConnectionWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) CreateParticipantConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipantConnectionWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).CreateParticipantConnectionWithContext), varargs...)
}

// DisconnectParticipant mocks base method.
func (m *MockConnectParticipantAPI) DisconnectParticipant(arg0 *connectparticipant.DisconnectParticipantInput) (*connectparticipant.DisconnectParticipantOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectParticipant", arg0)
	ret0, _ := ret[0].(*connectparticipant.DisconnectParticipantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectParticipant indicates an expected call of DisconnectParticipant.
func (mr *MockConnectParticipantAPIMockRecorder) DisconnectParticipant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectParticipant", reflect.TypeOf((*MockConnectParticipantAPI)(nil).DisconnectParticipant), arg0)
}

// DisconnectParticipantRequest mocks base method.
func (m *MockConnectParticipantAPI) DisconnectParticipantRequest(arg0 *connectparticipant.DisconnectParticipantInput) (*request.Request, *connectparticipant.DisconnectParticipantOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectParticipantRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.DisconnectParticipantOutput)
	return ret0, ret1
}

// DisconnectParticipantRequest indicates an expected call of DisconnectParticipantRequest.
func (mr *MockConnectParticipantAPIMockRecorder) DisconnectParticipantRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectParticipantRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).DisconnectParticipantRequest), arg0)
}

// DisconnectParticipantWithContext mocks base method.
func (m *MockConnectParticipantAPI) DisconnectParticipantWithContext(arg0 context.Context, arg1 *connectparticipant.DisconnectParticipantInput, arg2 ...request.Option) (*connectparticipant.DisconnectParticipantOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectParticipantWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.DisconnectParticipantOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectParticipantWithContext indicates an expected call of DisconnectParticipantWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) DisconnectParticipantWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectParticipantWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).DisconnectParticipantWithContext), varargs...)
}

// GetAttachment mocks base method.
func (m *MockConnectParticipantAPI) GetAttachment(arg0 *connectparticipant.GetAttachmentInput) (*connectparticipant.GetAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachment", arg0)
	ret0, _ := ret[0].(*connectparticipant.GetAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachment indicates an expected call of GetAttachment.
func (mr *MockConnectParticipantAPIMockRecorder) GetAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachment", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetAttachment), arg0)
}

// GetAttachmentRequest mocks base method.
func (m *MockConnectParticipantAPI) GetAttachmentRequest(arg0 *connectparticipant.GetAttachmentInput) (*request.Request, *connectparticipant.GetAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.GetAttachmentOutput)
	return ret0, ret1
}

// GetAttachmentRequest indicates an expected call of GetAttachmentRequest.
func (mr *MockConnectParticipantAPIMockRecorder) GetAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetAttachmentRequest), arg0)
}

// GetAttachmentWithContext mocks base method.
func (m *MockConnectParticipantAPI) GetAttachmentWithContext(arg0 context.Context, arg1 *connectparticipant.GetAttachmentInput, arg2 ...request.Option) (*connectparticipant.GetAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.GetAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachmentWithContext indicates an expected call of GetAttachmentWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) GetAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetAttachmentWithContext), varargs...)
}

// GetTranscript mocks base method.
func (m *MockConnectParticipantAPI) GetTranscript(arg0 *connectparticipant.GetTranscriptInput) (*connectparticipant.GetTranscriptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranscript", arg0)
	ret0, _ := ret[0].(*connectparticipant.GetTranscriptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranscript indicates an expected call of GetTranscript.
func (mr *MockConnectParticipantAPIMockRecorder) GetTranscript(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscript", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetTranscript), arg0)
}

// GetTranscriptPages mocks base method.
func (m *MockConnectParticipantAPI) GetTranscriptPages(arg0 *connectparticipant.GetTranscriptInput, arg1 func(*connectparticipant.GetTranscriptOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranscriptPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTranscriptPages indicates an expected call of GetTranscriptPages.
func (mr *MockConnectParticipantAPIMockRecorder) GetTranscriptPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscriptPages", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetTranscriptPages), arg0, arg1)
}

// GetTranscriptPagesWithContext mocks base method.
func (m *MockConnectParticipantAPI) GetTranscriptPagesWithContext(arg0 context.Context, arg1 *connectparticipant.GetTranscriptInput, arg2 func(*connectparticipant.GetTranscriptOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTranscriptPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTranscriptPagesWithContext indicates an expected call of GetTranscriptPagesWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) GetTranscriptPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscriptPagesWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetTranscriptPagesWithContext), varargs...)
}

// GetTranscriptRequest mocks base method.
func (m *MockConnectParticipantAPI) GetTranscriptRequest(arg0 *connectparticipant.GetTranscriptInput) (*request.Request, *connectparticipant.GetTranscriptOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranscriptRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.GetTranscriptOutput)
	return ret0, ret1
}

// GetTranscriptRequest indicates an expected call of GetTranscriptRequest.
func (mr *MockConnectParticipantAPIMockRecorder) GetTranscriptRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscriptRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetTranscriptRequest), arg0)
}

// GetTranscriptWithContext mocks base method.
func (m *MockConnectParticipantAPI) GetTranscriptWithContext(arg0 context.Context, arg1 *connectparticipant.GetTranscriptInput, arg2 ...request.Option) (*connectparticipant.GetTranscriptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTranscriptWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.GetTranscriptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranscriptWithContext indicates an expected call of GetTranscriptWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) GetTranscriptWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranscriptWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).GetTranscriptWithContext), varargs...)
}

// SendEvent mocks base method.
func (m *MockConnectParticipantAPI) SendEvent(arg0 *connectparticipant.SendEventInput) (*connectparticipant.SendEventOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", arg0)
	ret0, _ := ret[0].(*connectparticipant.SendEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockConnectParticipantAPIMockRecorder) SendEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockConnectParticipantAPI)(nil).SendEvent), arg0)
}

// SendEventRequest mocks base method.
func (m *MockConnectParticipantAPI) SendEventRequest(arg0 *connectparticipant.SendEventInput) (*request.Request, *connectparticipant.SendEventOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEventRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.SendEventOutput)
	return ret0, ret1
}

// SendEventRequest indicates an expected call of SendEventRequest.
func (mr *MockConnectParticipantAPIMockRecorder) SendEventRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).SendEventRequest), arg0)
}

// SendEventWithContext mocks base method.
func (m *MockConnectParticipantAPI) SendEventWithContext(arg0 context.Context, arg1 *connectparticipant.SendEventInput, arg2 ...request.Option) (*connectparticipant.SendEventOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEventWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.SendEventOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEventWithContext indicates an expected call of SendEventWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) SendEventWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEventWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).SendEventWithContext), varargs...)
}

// SendMessage mocks base method.
func (m *MockConnectParticipantAPI) SendMessage(arg0 *connectparticipant.SendMessageInput) (*connectparticipant.SendMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(*connectparticipant.SendMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockConnectParticipantAPIMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockConnectParticipantAPI)(nil).SendMessage), arg0)
}

// SendMessageRequest mocks base method.
func (m *MockConnectParticipantAPI) SendMessageRequest(arg0 *connectparticipant.SendMessageInput) (*request.Request, *connectparticipant.SendMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.SendMessageOutput)
	return ret0, ret1
}

// SendMessageRequest indicates an expected call of SendMessageRequest.
func (mr *MockConnectParticipantAPIMockRecorder) SendMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).SendMessageRequest), arg0)
}

// SendMessageWithContext mocks base method.
func (m *MockConnectParticipantAPI) SendMessageWithContext(arg0 context.Context, arg1 *connectparticipant.SendMessageInput, arg2 ...request.Option) (*connectparticipant.SendMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.SendMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageWithContext indicates an expected call of SendMessageWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) SendMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).SendMessageWithContext), varargs...)
}

// StartAttachmentUpload mocks base method.
func (m *MockConnectParticipantAPI) StartAttachmentUpload(arg0 *connectparticipant.StartAttachmentUploadInput) (*connectparticipant.StartAttachmentUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAttachmentUpload", arg0)
	ret0, _ := ret[0].(*connectparticipant.StartAttachmentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAttachmentUpload indicates an expected call of StartAttachmentUpload.
func (mr *MockConnectParticipantAPIMockRecorder) StartAttachmentUpload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAttachmentUpload", reflect.TypeOf((*MockConnectParticipantAPI)(nil).StartAttachmentUpload), arg0)
}

// StartAttachmentUploadRequest mocks base method.
func (m *MockConnectParticipantAPI) StartAttachmentUploadRequest(arg0 *connectparticipant.StartAttachmentUploadInput) (*request.Request, *connectparticipant.StartAttachmentUploadOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAttachmentUploadRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*connectparticipant.StartAttachmentUploadOutput)
	return ret0, ret1
}

// StartAttachmentUploadRequest indicates an expected call of StartAttachmentUploadRequest.
func (mr *MockConnectParticipantAPIMockRecorder) StartAttachmentUploadRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAttachmentUploadRequest", reflect.TypeOf((*MockConnectParticipantAPI)(nil).StartAttachmentUploadRequest), arg0)
}

// StartAttachmentUploadWithContext mocks base method.
func (m *MockConnectParticipantAPI) StartAttachmentUploadWithContext(arg0 context.Context, arg1 *connectparticipant.StartAttachmentUploadInput, arg2 ...request.Option) (*connectparticipant.StartAttachmentUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAttachmentUploadWithContext", varargs...)
	ret0, _ := ret[0].(*connectparticipant.StartAttachmentUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAttachmentUploadWithContext indicates an expected call of StartAttachmentUploadWithContext.
func (mr *MockConnectParticipantAPIMockRecorder) StartAttachmentUploadWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAttachmentUploadWithContext", reflect.TypeOf((*MockConnectParticipantAPI)(nil).StartAttachmentUploadWithContext), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/codeguruprofiler/codeguruprofileriface (interfaces: CodeGuruProfilerAPI)

// Package codeguruprofilermock is a generated GoMock package.
package codeguruprofilermock

import (
	context "context"
	request "github.com/aws/aws-sdk-go/aws/request"
	codeguruprofiler "github.com/aws/aws-sdk-go/service/codeguruprofiler"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCodeGuruProfilerAPI is a mock of CodeGuruProfilerAPI interface
type MockCodeGuruProfilerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGuruProfilerAPIMockRecorder
}

// MockCodeGuruProfilerAPIMockRecorder is the mock recorder for MockCodeGuruProfilerAPI
type MockCodeGuruProfilerAPIMockRecorder struct {
	mock *MockCodeGuruProfilerAPI
}

// NewMockCodeGuruProfilerAPI creates a new mock instance
func NewMockCodeGuruProfilerAPI(ctrl *gomock.Controller) *MockCodeGuruProfilerAPI {
	mock := &MockCodeGuruProfilerAPI{ctrl: ctrl}
	mock.recorder = &MockCodeGuruProfilerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeGuruProfilerAPI) EXPECT() *MockCodeGuruProfilerAPIMockRecorder {
	return m.recorder
}

// AddNotificationChannels mocks base method
func (m *MockCodeGuruProfilerAPI) AddNotificationChannels(arg0 *codeguruprofiler.AddNotificationChannelsInput) (*codeguruprofiler.AddNotificationChannelsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotificationChannels", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.AddNotificationChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNotificationChannels indicates an expected call of AddNotificationChannels
func (mr *MockCodeGuruProfilerAPIMockRecorder) AddNotificationChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotificationChannels", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).AddNotificationChannels), arg0)
}

// AddNotificationChannelsRequest mocks base method
func (m *MockCodeGuruProfilerAPI) AddNotificationChannelsRequest(arg0 *codeguruprofiler.AddNotificationChannelsInput) (*request.Request, *codeguruprofiler.AddNotificationChannelsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotificationChannelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.AddNotificationChannelsOutput)
	return ret0, ret1
}

// AddNotificationChannelsRequest indicates an expected call of AddNotificationChannelsRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) AddNotificationChannelsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotificationChannelsRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).AddNotificationChannelsRequest), arg0)
}

// AddNotificationChannelsWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) AddNotificationChannelsWithContext(arg0 context.Context, arg1 *codeguruprofiler.AddNotificationChannelsInput, arg2 ...request.Option) (*codeguruprofiler.AddNotificationChannelsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNotificationChannelsWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.AddNotificationChannelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNotificationChannelsWithContext indicates an expected call of AddNotificationChannelsWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) AddNotificationChannelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotificationChannelsWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).AddNotificationChannelsWithContext), varargs...)
}

// BatchGetFrameMetricData mocks base method
func (m *MockCodeGuruProfilerAPI) BatchGetFrameMetricData(arg0 *codeguruprofiler.BatchGetFrameMetricDataInput) (*codeguruprofiler.BatchGetFrameMetricDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFrameMetricData", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.BatchGetFrameMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFrameMetricData indicates an expected call of BatchGetFrameMetricData
func (mr *MockCodeGuruProfilerAPIMockRecorder) BatchGetFrameMetricData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFrameMetricData", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).BatchGetFrameMetricData), arg0)
}

// BatchGetFrameMetricDataRequest mocks base method
func (m *MockCodeGuruProfilerAPI) BatchGetFrameMetricDataRequest(arg0 *codeguruprofiler.BatchGetFrameMetricDataInput) (*request.Request, *codeguruprofiler.BatchGetFrameMetricDataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetFrameMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.BatchGetFrameMetricDataOutput)
	return ret0, ret1
}

// BatchGetFrameMetricDataRequest indicates an expected call of BatchGetFrameMetricDataRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) BatchGetFrameMetricDataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFrameMetricDataRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).BatchGetFrameMetricDataRequest), arg0)
}

// BatchGetFrameMetricDataWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) BatchGetFrameMetricDataWithContext(arg0 context.Context, arg1 *codeguruprofiler.BatchGetFrameMetricDataInput, arg2 ...request.Option) (*codeguruprofiler.BatchGetFrameMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetFrameMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.BatchGetFrameMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetFrameMetricDataWithContext indicates an expected call of BatchGetFrameMetricDataWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) BatchGetFrameMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetFrameMetricDataWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).BatchGetFrameMetricDataWithContext), varargs...)
}

// ConfigureAgent mocks base method
func (m *MockCodeGuruProfilerAPI) ConfigureAgent(arg0 *codeguruprofiler.ConfigureAgentInput) (*codeguruprofiler.ConfigureAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureAgent", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.ConfigureAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureAgent indicates an expected call of ConfigureAgent
func (mr *MockCodeGuruProfilerAPIMockRecorder) ConfigureAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureAgent", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ConfigureAgent), arg0)
}

// ConfigureAgentRequest mocks base method
func (m *MockCodeGuruProfilerAPI) ConfigureAgentRequest(arg0 *codeguruprofiler.ConfigureAgentInput) (*request.Request, *codeguruprofiler.ConfigureAgentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureAgentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.ConfigureAgentOutput)
	return ret0, ret1
}

// ConfigureAgentRequest indicates an expected call of ConfigureAgentRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) ConfigureAgentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureAgentRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ConfigureAgentRequest), arg0)
}

// ConfigureAgentWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ConfigureAgentWithContext(arg0 context.Context, arg1 *codeguruprofiler.ConfigureAgentInput, arg2 ...request.Option) (*codeguruprofiler.ConfigureAgentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureAgentWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.ConfigureAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureAgentWithContext indicates an expected call of ConfigureAgentWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ConfigureAgentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureAgentWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ConfigureAgentWithContext), varargs...)
}

// CreateProfilingGroup mocks base method
func (m *MockCodeGuruProfilerAPI) CreateProfilingGroup(arg0 *codeguruprofiler.CreateProfilingGroupInput) (*codeguruprofiler.CreateProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfilingGroup", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.CreateProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfilingGroup indicates an expected call of CreateProfilingGroup
func (mr *MockCodeGuruProfilerAPIMockRecorder) CreateProfilingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfilingGroup", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).CreateProfilingGroup), arg0)
}

// CreateProfilingGroupRequest mocks base method
func (m *MockCodeGuruProfilerAPI) CreateProfilingGroupRequest(arg0 *codeguruprofiler.CreateProfilingGroupInput) (*request.Request, *codeguruprofiler.CreateProfilingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfilingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.CreateProfilingGroupOutput)
	return ret0, ret1
}

// CreateProfilingGroupRequest indicates an expected call of CreateProfilingGroupRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) CreateProfilingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfilingGroupRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).CreateProfilingGroupRequest), arg0)
}

// CreateProfilingGroupWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) CreateProfilingGroupWithContext(arg0 context.Context, arg1 *codeguruprofiler.CreateProfilingGroupInput, arg2 ...request.Option) (*codeguruprofiler.CreateProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfilingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.CreateProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfilingGroupWithContext indicates an expected call of CreateProfilingGroupWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) CreateProfilingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfilingGroupWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).CreateProfilingGroupWithContext), varargs...)
}

// DeleteProfilingGroup mocks base method
func (m *MockCodeGuruProfilerAPI) DeleteProfilingGroup(arg0 *codeguruprofiler.DeleteProfilingGroupInput) (*codeguruprofiler.DeleteProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilingGroup", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.DeleteProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfilingGroup indicates an expected call of DeleteProfilingGroup
func (mr *MockCodeGuruProfilerAPIMockRecorder) DeleteProfilingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilingGroup", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).DeleteProfilingGroup), arg0)
}

// DeleteProfilingGroupRequest mocks base method
func (m *MockCodeGuruProfilerAPI) DeleteProfilingGroupRequest(arg0 *codeguruprofiler.DeleteProfilingGroupInput) (*request.Request, *codeguruprofiler.DeleteProfilingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.DeleteProfilingGroupOutput)
	return ret0, ret1
}

// DeleteProfilingGroupRequest indicates an expected call of DeleteProfilingGroupRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) DeleteProfilingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilingGroupRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).DeleteProfilingGroupRequest), arg0)
}

// DeleteProfilingGroupWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) DeleteProfilingGroupWithContext(arg0 context.Context, arg1 *codeguruprofiler.DeleteProfilingGroupInput, arg2 ...request.Option) (*codeguruprofiler.DeleteProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfilingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.DeleteProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfilingGroupWithContext indicates an expected call of DeleteProfilingGroupWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) DeleteProfilingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilingGroupWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).DeleteProfilingGroupWithContext), varargs...)
}

// DescribeProfilingGroup mocks base method
func (m *MockCodeGuruProfilerAPI) DescribeProfilingGroup(arg0 *codeguruprofiler.DescribeProfilingGroupInput) (*codeguruprofiler.DescribeProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProfilingGroup", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.DescribeProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProfilingGroup indicates an expected call of DescribeProfilingGroup
func (mr *MockCodeGuruProfilerAPIMockRecorder) DescribeProfilingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProfilingGroup", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).DescribeProfilingGroup), arg0)
}

// DescribeProfilingGroupRequest mocks base method
func (m *MockCodeGuruProfilerAPI) DescribeProfilingGroupRequest(arg0 *codeguruprofiler.DescribeProfilingGroupInput) (*request.Request, *codeguruprofiler.DescribeProfilingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProfilingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.DescribeProfilingGroupOutput)
	return ret0, ret1
}

// DescribeProfilingGroupRequest indicates an expected call of DescribeProfilingGroupRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) DescribeProfilingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProfilingGroupRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).DescribeProfilingGroupRequest), arg0)
}

// DescribeProfilingGroupWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) DescribeProfilingGroupWithContext(arg0 context.Context, arg1 *codeguruprofiler.DescribeProfilingGroupInput, arg2 ...request.Option) (*codeguruprofiler.DescribeProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProfilingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.DescribeProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProfilingGroupWithContext indicates an expected call of DescribeProfilingGroupWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) DescribeProfilingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProfilingGroupWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).DescribeProfilingGroupWithContext), varargs...)
}

// GetFindingsReportAccountSummary mocks base method
func (m *MockCodeGuruProfilerAPI) GetFindingsReportAccountSummary(arg0 *codeguruprofiler.GetFindingsReportAccountSummaryInput) (*codeguruprofiler.GetFindingsReportAccountSummaryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsReportAccountSummary", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.GetFindingsReportAccountSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsReportAccountSummary indicates an expected call of GetFindingsReportAccountSummary
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetFindingsReportAccountSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportAccountSummary", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetFindingsReportAccountSummary), arg0)
}

// GetFindingsReportAccountSummaryPages mocks base method
func (m *MockCodeGuruProfilerAPI) GetFindingsReportAccountSummaryPages(arg0 *codeguruprofiler.GetFindingsReportAccountSummaryInput, arg1 func(*codeguruprofiler.GetFindingsReportAccountSummaryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsReportAccountSummaryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsReportAccountSummaryPages indicates an expected call of GetFindingsReportAccountSummaryPages
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetFindingsReportAccountSummaryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportAccountSummaryPages", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetFindingsReportAccountSummaryPages), arg0, arg1)
}

// GetFindingsReportAccountSummaryPagesWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) GetFindingsReportAccountSummaryPagesWithContext(arg0 context.Context, arg1 *codeguruprofiler.GetFindingsReportAccountSummaryInput, arg2 func(*codeguruprofiler.GetFindingsReportAccountSummaryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsReportAccountSummaryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFindingsReportAccountSummaryPagesWithContext indicates an expected call of GetFindingsReportAccountSummaryPagesWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetFindingsReportAccountSummaryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportAccountSummaryPagesWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetFindingsReportAccountSummaryPagesWithContext), varargs...)
}

// GetFindingsReportAccountSummaryRequest mocks base method
func (m *MockCodeGuruProfilerAPI) GetFindingsReportAccountSummaryRequest(arg0 *codeguruprofiler.GetFindingsReportAccountSummaryInput) (*request.Request, *codeguruprofiler.GetFindingsReportAccountSummaryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFindingsReportAccountSummaryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.GetFindingsReportAccountSummaryOutput)
	return ret0, ret1
}

// GetFindingsReportAccountSummaryRequest indicates an expected call of GetFindingsReportAccountSummaryRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetFindingsReportAccountSummaryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportAccountSummaryRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetFindingsReportAccountSummaryRequest), arg0)
}

// GetFindingsReportAccountSummaryWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) GetFindingsReportAccountSummaryWithContext(arg0 context.Context, arg1 *codeguruprofiler.GetFindingsReportAccountSummaryInput, arg2 ...request.Option) (*codeguruprofiler.GetFindingsReportAccountSummaryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFindingsReportAccountSummaryWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.GetFindingsReportAccountSummaryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFindingsReportAccountSummaryWithContext indicates an expected call of GetFindingsReportAccountSummaryWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetFindingsReportAccountSummaryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFindingsReportAccountSummaryWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetFindingsReportAccountSummaryWithContext), varargs...)
}

// GetNotificationConfiguration mocks base method
func (m *MockCodeGuruProfilerAPI) GetNotificationConfiguration(arg0 *codeguruprofiler.GetNotificationConfigurationInput) (*codeguruprofiler.GetNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationConfiguration", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.GetNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationConfiguration indicates an expected call of GetNotificationConfiguration
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetNotificationConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationConfiguration", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetNotificationConfiguration), arg0)
}

// GetNotificationConfigurationRequest mocks base method
func (m *MockCodeGuruProfilerAPI) GetNotificationConfigurationRequest(arg0 *codeguruprofiler.GetNotificationConfigurationInput) (*request.Request, *codeguruprofiler.GetNotificationConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.GetNotificationConfigurationOutput)
	return ret0, ret1
}

// GetNotificationConfigurationRequest indicates an expected call of GetNotificationConfigurationRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetNotificationConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationConfigurationRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetNotificationConfigurationRequest), arg0)
}

// GetNotificationConfigurationWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) GetNotificationConfigurationWithContext(arg0 context.Context, arg1 *codeguruprofiler.GetNotificationConfigurationInput, arg2 ...request.Option) (*codeguruprofiler.GetNotificationConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNotificationConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.GetNotificationConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationConfigurationWithContext indicates an expected call of GetNotificationConfigurationWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetNotificationConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationConfigurationWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetNotificationConfigurationWithContext), varargs...)
}

// GetPolicy mocks base method
func (m *MockCodeGuruProfilerAPI) GetPolicy(arg0 *codeguruprofiler.GetPolicyInput) (*codeguruprofiler.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetPolicy), arg0)
}

// GetPolicyRequest mocks base method
func (m *MockCodeGuruProfilerAPI) GetPolicyRequest(arg0 *codeguruprofiler.GetPolicyInput) (*request.Request, *codeguruprofiler.GetPolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.GetPolicyOutput)
	return ret0, ret1
}

// GetPolicyRequest indicates an expected call of GetPolicyRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetPolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetPolicyRequest), arg0)
}

// GetPolicyWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) GetPolicyWithContext(arg0 context.Context, arg1 *codeguruprofiler.GetPolicyInput, arg2 ...request.Option) (*codeguruprofiler.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyWithContext indicates an expected call of GetPolicyWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetPolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetPolicyWithContext), varargs...)
}

// GetProfile mocks base method
func (m *MockCodeGuruProfilerAPI) GetProfile(arg0 *codeguruprofiler.GetProfileInput) (*codeguruprofiler.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetProfile), arg0)
}

// GetProfileRequest mocks base method
func (m *MockCodeGuruProfilerAPI) GetProfileRequest(arg0 *codeguruprofiler.GetProfileInput) (*request.Request, *codeguruprofiler.GetProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.GetProfileOutput)
	return ret0, ret1
}

// GetProfileRequest indicates an expected call of GetProfileRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetProfileRequest), arg0)
}

// GetProfileWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) GetProfileWithContext(arg0 context.Context, arg1 *codeguruprofiler.GetProfileInput, arg2 ...request.Option) (*codeguruprofiler.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfileWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileWithContext indicates an expected call of GetProfileWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetProfileWithContext), varargs...)
}

// GetRecommendations mocks base method
func (m *MockCodeGuruProfilerAPI) GetRecommendations(arg0 *codeguruprofiler.GetRecommendationsInput) (*codeguruprofiler.GetRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendations", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.GetRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendations indicates an expected call of GetRecommendations
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetRecommendations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendations", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetRecommendations), arg0)
}

// GetRecommendationsRequest mocks base method
func (m *MockCodeGuruProfilerAPI) GetRecommendationsRequest(arg0 *codeguruprofiler.GetRecommendationsInput) (*request.Request, *codeguruprofiler.GetRecommendationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.GetRecommendationsOutput)
	return ret0, ret1
}

// GetRecommendationsRequest indicates an expected call of GetRecommendationsRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetRecommendationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetRecommendationsRequest), arg0)
}

// GetRecommendationsWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) GetRecommendationsWithContext(arg0 context.Context, arg1 *codeguruprofiler.GetRecommendationsInput, arg2 ...request.Option) (*codeguruprofiler.GetRecommendationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecommendationsWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.GetRecommendationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationsWithContext indicates an expected call of GetRecommendationsWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) GetRecommendationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).GetRecommendationsWithContext), varargs...)
}

// ListFindingsReports mocks base method
func (m *MockCodeGuruProfilerAPI) ListFindingsReports(arg0 *codeguruprofiler.ListFindingsReportsInput) (*codeguruprofiler.ListFindingsReportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsReports", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.ListFindingsReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsReports indicates an expected call of ListFindingsReports
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListFindingsReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsReports", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListFindingsReports), arg0)
}

// ListFindingsReportsPages mocks base method
func (m *MockCodeGuruProfilerAPI) ListFindingsReportsPages(arg0 *codeguruprofiler.ListFindingsReportsInput, arg1 func(*codeguruprofiler.ListFindingsReportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsReportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsReportsPages indicates an expected call of ListFindingsReportsPages
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListFindingsReportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsReportsPages", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListFindingsReportsPages), arg0, arg1)
}

// ListFindingsReportsPagesWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ListFindingsReportsPagesWithContext(arg0 context.Context, arg1 *codeguruprofiler.ListFindingsReportsInput, arg2 func(*codeguruprofiler.ListFindingsReportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsReportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFindingsReportsPagesWithContext indicates an expected call of ListFindingsReportsPagesWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListFindingsReportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsReportsPagesWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListFindingsReportsPagesWithContext), varargs...)
}

// ListFindingsReportsRequest mocks base method
func (m *MockCodeGuruProfilerAPI) ListFindingsReportsRequest(arg0 *codeguruprofiler.ListFindingsReportsInput) (*request.Request, *codeguruprofiler.ListFindingsReportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFindingsReportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.ListFindingsReportsOutput)
	return ret0, ret1
}

// ListFindingsReportsRequest indicates an expected call of ListFindingsReportsRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListFindingsReportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsReportsRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListFindingsReportsRequest), arg0)
}

// ListFindingsReportsWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ListFindingsReportsWithContext(arg0 context.Context, arg1 *codeguruprofiler.ListFindingsReportsInput, arg2 ...request.Option) (*codeguruprofiler.ListFindingsReportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFindingsReportsWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.ListFindingsReportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFindingsReportsWithContext indicates an expected call of ListFindingsReportsWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListFindingsReportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFindingsReportsWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListFindingsReportsWithContext), varargs...)
}

// ListProfileTimes mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfileTimes(arg0 *codeguruprofiler.ListProfileTimesInput) (*codeguruprofiler.ListProfileTimesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileTimes", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.ListProfileTimesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileTimes indicates an expected call of ListProfileTimes
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfileTimes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileTimes", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfileTimes), arg0)
}

// ListProfileTimesPages mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfileTimesPages(arg0 *codeguruprofiler.ListProfileTimesInput, arg1 func(*codeguruprofiler.ListProfileTimesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileTimesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfileTimesPages indicates an expected call of ListProfileTimesPages
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfileTimesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileTimesPages", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfileTimesPages), arg0, arg1)
}

// ListProfileTimesPagesWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfileTimesPagesWithContext(arg0 context.Context, arg1 *codeguruprofiler.ListProfileTimesInput, arg2 func(*codeguruprofiler.ListProfileTimesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileTimesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfileTimesPagesWithContext indicates an expected call of ListProfileTimesPagesWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfileTimesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileTimesPagesWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfileTimesPagesWithContext), varargs...)
}

// ListProfileTimesRequest mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfileTimesRequest(arg0 *codeguruprofiler.ListProfileTimesInput) (*request.Request, *codeguruprofiler.ListProfileTimesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileTimesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.ListProfileTimesOutput)
	return ret0, ret1
}

// ListProfileTimesRequest indicates an expected call of ListProfileTimesRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfileTimesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileTimesRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfileTimesRequest), arg0)
}

// ListProfileTimesWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfileTimesWithContext(arg0 context.Context, arg1 *codeguruprofiler.ListProfileTimesInput, arg2 ...request.Option) (*codeguruprofiler.ListProfileTimesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfileTimesWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.ListProfileTimesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileTimesWithContext indicates an expected call of ListProfileTimesWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfileTimesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileTimesWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfileTimesWithContext), varargs...)
}

// ListProfilingGroups mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfilingGroups(arg0 *codeguruprofiler.ListProfilingGroupsInput) (*codeguruprofiler.ListProfilingGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilingGroups", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.ListProfilingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilingGroups indicates an expected call of ListProfilingGroups
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfilingGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilingGroups", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfilingGroups), arg0)
}

// ListProfilingGroupsPages mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfilingGroupsPages(arg0 *codeguruprofiler.ListProfilingGroupsInput, arg1 func(*codeguruprofiler.ListProfilingGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilingGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilingGroupsPages indicates an expected call of ListProfilingGroupsPages
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfilingGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilingGroupsPages", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfilingGroupsPages), arg0, arg1)
}

// ListProfilingGroupsPagesWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfilingGroupsPagesWithContext(arg0 context.Context, arg1 *codeguruprofiler.ListProfilingGroupsInput, arg2 func(*codeguruprofiler.ListProfilingGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilingGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProfilingGroupsPagesWithContext indicates an expected call of ListProfilingGroupsPagesWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfilingGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilingGroupsPagesWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfilingGroupsPagesWithContext), varargs...)
}

// ListProfilingGroupsRequest mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfilingGroupsRequest(arg0 *codeguruprofiler.ListProfilingGroupsInput) (*request.Request, *codeguruprofiler.ListProfilingGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfilingGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.ListProfilingGroupsOutput)
	return ret0, ret1
}

// ListProfilingGroupsRequest indicates an expected call of ListProfilingGroupsRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfilingGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilingGroupsRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfilingGroupsRequest), arg0)
}

// ListProfilingGroupsWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ListProfilingGroupsWithContext(arg0 context.Context, arg1 *codeguruprofiler.ListProfilingGroupsInput, arg2 ...request.Option) (*codeguruprofiler.ListProfilingGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfilingGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.ListProfilingGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfilingGroupsWithContext indicates an expected call of ListProfilingGroupsWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListProfilingGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfilingGroupsWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListProfilingGroupsWithContext), varargs...)
}

// ListTagsForResource mocks base method
func (m *MockCodeGuruProfilerAPI) ListTagsForResource(arg0 *codeguruprofiler.ListTagsForResourceInput) (*codeguruprofiler.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method
func (m *MockCodeGuruProfilerAPI) ListTagsForResourceRequest(arg0 *codeguruprofiler.ListTagsForResourceInput) (*request.Request, *codeguruprofiler.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *codeguruprofiler.ListTagsForResourceInput, arg2 ...request.Option) (*codeguruprofiler.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// PostAgentProfile mocks base method
func (m *MockCodeGuruProfilerAPI) PostAgentProfile(arg0 *codeguruprofiler.PostAgentProfileInput) (*codeguruprofiler.PostAgentProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAgentProfile", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.PostAgentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAgentProfile indicates an expected call of PostAgentProfile
func (mr *MockCodeGuruProfilerAPIMockRecorder) PostAgentProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAgentProfile", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).PostAgentProfile), arg0)
}

// PostAgentProfileRequest mocks base method
func (m *MockCodeGuruProfilerAPI) PostAgentProfileRequest(arg0 *codeguruprofiler.PostAgentProfileInput) (*request.Request, *codeguruprofiler.PostAgentProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAgentProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.PostAgentProfileOutput)
	return ret0, ret1
}

// PostAgentProfileRequest indicates an expected call of PostAgentProfileRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) PostAgentProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAgentProfileRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).PostAgentProfileRequest), arg0)
}

// PostAgentProfileWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) PostAgentProfileWithContext(arg0 context.Context, arg1 *codeguruprofiler.PostAgentProfileInput, arg2 ...request.Option) (*codeguruprofiler.PostAgentProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAgentProfileWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.PostAgentProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAgentProfileWithContext indicates an expected call of PostAgentProfileWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) PostAgentProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAgentProfileWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).PostAgentProfileWithContext), varargs...)
}

// PutPermission mocks base method
func (m *MockCodeGuruProfilerAPI) PutPermission(arg0 *codeguruprofiler.PutPermissionInput) (*codeguruprofiler.PutPermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermission", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.PutPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermission indicates an expected call of PutPermission
func (mr *MockCodeGuruProfilerAPIMockRecorder) PutPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermission", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).PutPermission), arg0)
}

// PutPermissionRequest mocks base method
func (m *MockCodeGuruProfilerAPI) PutPermissionRequest(arg0 *codeguruprofiler.PutPermissionInput) (*request.Request, *codeguruprofiler.PutPermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.PutPermissionOutput)
	return ret0, ret1
}

// PutPermissionRequest indicates an expected call of PutPermissionRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) PutPermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).PutPermissionRequest), arg0)
}

// PutPermissionWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) PutPermissionWithContext(arg0 context.Context, arg1 *codeguruprofiler.PutPermissionInput, arg2 ...request.Option) (*codeguruprofiler.PutPermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPermissionWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.PutPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPermissionWithContext indicates an expected call of PutPermissionWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) PutPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPermissionWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).PutPermissionWithContext), varargs...)
}

// RemoveNotificationChannel mocks base method
func (m *MockCodeGuruProfilerAPI) RemoveNotificationChannel(arg0 *codeguruprofiler.RemoveNotificationChannelInput) (*codeguruprofiler.RemoveNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotificationChannel", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.RemoveNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNotificationChannel indicates an expected call of RemoveNotificationChannel
func (mr *MockCodeGuruProfilerAPIMockRecorder) RemoveNotificationChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotificationChannel", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).RemoveNotificationChannel), arg0)
}

// RemoveNotificationChannelRequest mocks base method
func (m *MockCodeGuruProfilerAPI) RemoveNotificationChannelRequest(arg0 *codeguruprofiler.RemoveNotificationChannelInput) (*request.Request, *codeguruprofiler.RemoveNotificationChannelOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotificationChannelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.RemoveNotificationChannelOutput)
	return ret0, ret1
}

// RemoveNotificationChannelRequest indicates an expected call of RemoveNotificationChannelRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) RemoveNotificationChannelRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotificationChannelRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).RemoveNotificationChannelRequest), arg0)
}

// RemoveNotificationChannelWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) RemoveNotificationChannelWithContext(arg0 context.Context, arg1 *codeguruprofiler.RemoveNotificationChannelInput, arg2 ...request.Option) (*codeguruprofiler.RemoveNotificationChannelOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveNotificationChannelWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.RemoveNotificationChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNotificationChannelWithContext indicates an expected call of RemoveNotificationChannelWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) RemoveNotificationChannelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotificationChannelWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).RemoveNotificationChannelWithContext), varargs...)
}

// RemovePermission mocks base method
func (m *MockCodeGuruProfilerAPI) RemovePermission(arg0 *codeguruprofiler.RemovePermissionInput) (*codeguruprofiler.RemovePermissionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermission", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermission indicates an expected call of RemovePermission
func (mr *MockCodeGuruProfilerAPIMockRecorder) RemovePermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermission", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).RemovePermission), arg0)
}

// RemovePermissionRequest mocks base method
func (m *MockCodeGuruProfilerAPI) RemovePermissionRequest(arg0 *codeguruprofiler.RemovePermissionInput) (*request.Request, *codeguruprofiler.RemovePermissionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.RemovePermissionOutput)
	return ret0, ret1
}

// RemovePermissionRequest indicates an expected call of RemovePermissionRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) RemovePermissionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).RemovePermissionRequest), arg0)
}

// RemovePermissionWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) RemovePermissionWithContext(arg0 context.Context, arg1 *codeguruprofiler.RemovePermissionInput, arg2 ...request.Option) (*codeguruprofiler.RemovePermissionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePermissionWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePermissionWithContext indicates an expected call of RemovePermissionWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) RemovePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).RemovePermissionWithContext), varargs...)
}

// SubmitFeedback mocks base method
func (m *MockCodeGuruProfilerAPI) SubmitFeedback(arg0 *codeguruprofiler.SubmitFeedbackInput) (*codeguruprofiler.SubmitFeedbackOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitFeedback", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.SubmitFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitFeedback indicates an expected call of SubmitFeedback
func (mr *MockCodeGuruProfilerAPIMockRecorder) SubmitFeedback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitFeedback", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).SubmitFeedback), arg0)
}

// SubmitFeedbackRequest mocks base method
func (m *MockCodeGuruProfilerAPI) SubmitFeedbackRequest(arg0 *codeguruprofiler.SubmitFeedbackInput) (*request.Request, *codeguruprofiler.SubmitFeedbackOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitFeedbackRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.SubmitFeedbackOutput)
	return ret0, ret1
}

// SubmitFeedbackRequest indicates an expected call of SubmitFeedbackRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) SubmitFeedbackRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitFeedbackRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).SubmitFeedbackRequest), arg0)
}

// SubmitFeedbackWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) SubmitFeedbackWithContext(arg0 context.Context, arg1 *codeguruprofiler.SubmitFeedbackInput, arg2 ...request.Option) (*codeguruprofiler.SubmitFeedbackOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitFeedbackWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.SubmitFeedbackOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitFeedbackWithContext indicates an expected call of SubmitFeedbackWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) SubmitFeedbackWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitFeedbackWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).SubmitFeedbackWithContext), varargs...)
}

// TagResource mocks base method
func (m *MockCodeGuruProfilerAPI) TagResource(arg0 *codeguruprofiler.TagResourceInput) (*codeguruprofiler.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource
func (mr *MockCodeGuruProfilerAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method
func (m *MockCodeGuruProfilerAPI) TagResourceRequest(arg0 *codeguruprofiler.TagResourceInput) (*request.Request, *codeguruprofiler.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) TagResourceWithContext(arg0 context.Context, arg1 *codeguruprofiler.TagResourceInput, arg2 ...request.Option) (*codeguruprofiler.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method
func (m *MockCodeGuruProfilerAPI) UntagResource(arg0 *codeguruprofiler.UntagResourceInput) (*codeguruprofiler.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource
func (mr *MockCodeGuruProfilerAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method
func (m *MockCodeGuruProfilerAPI) UntagResourceRequest(arg0 *codeguruprofiler.UntagResourceInput) (*request.Request, *codeguruprofiler.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) UntagResourceWithContext(arg0 context.Context, arg1 *codeguruprofiler.UntagResourceInput, arg2 ...request.Option) (*codeguruprofiler.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateProfilingGroup mocks base method
func (m *MockCodeGuruProfilerAPI) UpdateProfilingGroup(arg0 *codeguruprofiler.UpdateProfilingGroupInput) (*codeguruprofiler.UpdateProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilingGroup", arg0)
	ret0, _ := ret[0].(*codeguruprofiler.UpdateProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfilingGroup indicates an expected call of UpdateProfilingGroup
func (mr *MockCodeGuruProfilerAPIMockRecorder) UpdateProfilingGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilingGroup", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).UpdateProfilingGroup), arg0)
}

// UpdateProfilingGroupRequest mocks base method
func (m *MockCodeGuruProfilerAPI) UpdateProfilingGroupRequest(arg0 *codeguruprofiler.UpdateProfilingGroupInput) (*request.Request, *codeguruprofiler.UpdateProfilingGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfilingGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*codeguruprofiler.UpdateProfilingGroupOutput)
	return ret0, ret1
}

// UpdateProfilingGroupRequest indicates an expected call of UpdateProfilingGroupRequest
func (mr *MockCodeGuruProfilerAPIMockRecorder) UpdateProfilingGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilingGroupRequest", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).UpdateProfilingGroupRequest), arg0)
}

// UpdateProfilingGroupWithContext mocks base method
func (m *MockCodeGuruProfilerAPI) UpdateProfilingGroupWithContext(arg0 context.Context, arg1 *codeguruprofiler.UpdateProfilingGroupInput, arg2 ...request.Option) (*codeguruprofiler.UpdateProfilingGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfilingGroupWithContext", varargs...)
	ret0, _ := ret[0].(*codeguruprofiler.UpdateProfilingGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfilingGroupWithContext indicates an expected call of UpdateProfilingGroupWithContext
func (mr *MockCodeGuruProfilerAPIMockRecorder) UpdateProfilingGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfilingGroupWithContext", reflect.TypeOf((*MockCodeGuruProfilerAPI)(nil).UpdateProfilingGroupWithContext), varargs...)
}

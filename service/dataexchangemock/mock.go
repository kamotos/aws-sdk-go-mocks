// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/dataexchange/dataexchangeiface (interfaces: DataExchangeAPI)

// Package dataexchangemock is a generated GoMock package.
package dataexchangemock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	dataexchange "github.com/aws/aws-sdk-go/service/dataexchange"
	gomock "github.com/golang/mock/gomock"
)

// MockDataExchangeAPI is a mock of DataExchangeAPI interface.
type MockDataExchangeAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDataExchangeAPIMockRecorder
}

// MockDataExchangeAPIMockRecorder is the mock recorder for MockDataExchangeAPI.
type MockDataExchangeAPIMockRecorder struct {
	mock *MockDataExchangeAPI
}

// NewMockDataExchangeAPI creates a new mock instance.
func NewMockDataExchangeAPI(ctrl *gomock.Controller) *MockDataExchangeAPI {
	mock := &MockDataExchangeAPI{ctrl: ctrl}
	mock.recorder = &MockDataExchangeAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataExchangeAPI) EXPECT() *MockDataExchangeAPIMockRecorder {
	return m.recorder
}

// CancelJob mocks base method.
func (m *MockDataExchangeAPI) CancelJob(arg0 *dataexchange.CancelJobInput) (*dataexchange.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJob", arg0)
	ret0, _ := ret[0].(*dataexchange.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJob indicates an expected call of CancelJob.
func (mr *MockDataExchangeAPIMockRecorder) CancelJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJob", reflect.TypeOf((*MockDataExchangeAPI)(nil).CancelJob), arg0)
}

// CancelJobRequest mocks base method.
func (m *MockDataExchangeAPI) CancelJobRequest(arg0 *dataexchange.CancelJobInput) (*request.Request, *dataexchange.CancelJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.CancelJobOutput)
	return ret0, ret1
}

// CancelJobRequest indicates an expected call of CancelJobRequest.
func (mr *MockDataExchangeAPIMockRecorder) CancelJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).CancelJobRequest), arg0)
}

// CancelJobWithContext mocks base method.
func (m *MockDataExchangeAPI) CancelJobWithContext(arg0 context.Context, arg1 *dataexchange.CancelJobInput, arg2 ...request.Option) (*dataexchange.CancelJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelJobWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.CancelJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelJobWithContext indicates an expected call of CancelJobWithContext.
func (mr *MockDataExchangeAPIMockRecorder) CancelJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelJobWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).CancelJobWithContext), varargs...)
}

// CreateDataSet mocks base method.
func (m *MockDataExchangeAPI) CreateDataSet(arg0 *dataexchange.CreateDataSetInput) (*dataexchange.CreateDataSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSet", arg0)
	ret0, _ := ret[0].(*dataexchange.CreateDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSet indicates an expected call of CreateDataSet.
func (mr *MockDataExchangeAPIMockRecorder) CreateDataSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSet", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateDataSet), arg0)
}

// CreateDataSetRequest mocks base method.
func (m *MockDataExchangeAPI) CreateDataSetRequest(arg0 *dataexchange.CreateDataSetInput) (*request.Request, *dataexchange.CreateDataSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.CreateDataSetOutput)
	return ret0, ret1
}

// CreateDataSetRequest indicates an expected call of CreateDataSetRequest.
func (mr *MockDataExchangeAPIMockRecorder) CreateDataSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateDataSetRequest), arg0)
}

// CreateDataSetWithContext mocks base method.
func (m *MockDataExchangeAPI) CreateDataSetWithContext(arg0 context.Context, arg1 *dataexchange.CreateDataSetInput, arg2 ...request.Option) (*dataexchange.CreateDataSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataSetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.CreateDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSetWithContext indicates an expected call of CreateDataSetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) CreateDataSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataSetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateDataSetWithContext), varargs...)
}

// CreateEventAction mocks base method.
func (m *MockDataExchangeAPI) CreateEventAction(arg0 *dataexchange.CreateEventActionInput) (*dataexchange.CreateEventActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventAction", arg0)
	ret0, _ := ret[0].(*dataexchange.CreateEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventAction indicates an expected call of CreateEventAction.
func (mr *MockDataExchangeAPIMockRecorder) CreateEventAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventAction", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateEventAction), arg0)
}

// CreateEventActionRequest mocks base method.
func (m *MockDataExchangeAPI) CreateEventActionRequest(arg0 *dataexchange.CreateEventActionInput) (*request.Request, *dataexchange.CreateEventActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.CreateEventActionOutput)
	return ret0, ret1
}

// CreateEventActionRequest indicates an expected call of CreateEventActionRequest.
func (mr *MockDataExchangeAPIMockRecorder) CreateEventActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventActionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateEventActionRequest), arg0)
}

// CreateEventActionWithContext mocks base method.
func (m *MockDataExchangeAPI) CreateEventActionWithContext(arg0 context.Context, arg1 *dataexchange.CreateEventActionInput, arg2 ...request.Option) (*dataexchange.CreateEventActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventActionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.CreateEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventActionWithContext indicates an expected call of CreateEventActionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) CreateEventActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventActionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateEventActionWithContext), varargs...)
}

// CreateJob mocks base method.
func (m *MockDataExchangeAPI) CreateJob(arg0 *dataexchange.CreateJobInput) (*dataexchange.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*dataexchange.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockDataExchangeAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method.
func (m *MockDataExchangeAPI) CreateJobRequest(arg0 *dataexchange.CreateJobInput) (*request.Request, *dataexchange.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest.
func (mr *MockDataExchangeAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobWithContext mocks base method.
func (m *MockDataExchangeAPI) CreateJobWithContext(arg0 context.Context, arg1 *dataexchange.CreateJobInput, arg2 ...request.Option) (*dataexchange.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext.
func (mr *MockDataExchangeAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateJobWithContext), varargs...)
}

// CreateRevision mocks base method.
func (m *MockDataExchangeAPI) CreateRevision(arg0 *dataexchange.CreateRevisionInput) (*dataexchange.CreateRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevision", arg0)
	ret0, _ := ret[0].(*dataexchange.CreateRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRevision indicates an expected call of CreateRevision.
func (mr *MockDataExchangeAPIMockRecorder) CreateRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevision", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateRevision), arg0)
}

// CreateRevisionRequest mocks base method.
func (m *MockDataExchangeAPI) CreateRevisionRequest(arg0 *dataexchange.CreateRevisionInput) (*request.Request, *dataexchange.CreateRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.CreateRevisionOutput)
	return ret0, ret1
}

// CreateRevisionRequest indicates an expected call of CreateRevisionRequest.
func (mr *MockDataExchangeAPIMockRecorder) CreateRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevisionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateRevisionRequest), arg0)
}

// CreateRevisionWithContext mocks base method.
func (m *MockDataExchangeAPI) CreateRevisionWithContext(arg0 context.Context, arg1 *dataexchange.CreateRevisionInput, arg2 ...request.Option) (*dataexchange.CreateRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.CreateRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRevisionWithContext indicates an expected call of CreateRevisionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) CreateRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRevisionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).CreateRevisionWithContext), varargs...)
}

// DeleteAsset mocks base method.
func (m *MockDataExchangeAPI) DeleteAsset(arg0 *dataexchange.DeleteAssetInput) (*dataexchange.DeleteAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", arg0)
	ret0, _ := ret[0].(*dataexchange.DeleteAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockDataExchangeAPIMockRecorder) DeleteAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteAsset), arg0)
}

// DeleteAssetRequest mocks base method.
func (m *MockDataExchangeAPI) DeleteAssetRequest(arg0 *dataexchange.DeleteAssetInput) (*request.Request, *dataexchange.DeleteAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.DeleteAssetOutput)
	return ret0, ret1
}

// DeleteAssetRequest indicates an expected call of DeleteAssetRequest.
func (mr *MockDataExchangeAPIMockRecorder) DeleteAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteAssetRequest), arg0)
}

// DeleteAssetWithContext mocks base method.
func (m *MockDataExchangeAPI) DeleteAssetWithContext(arg0 context.Context, arg1 *dataexchange.DeleteAssetInput, arg2 ...request.Option) (*dataexchange.DeleteAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAssetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.DeleteAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssetWithContext indicates an expected call of DeleteAssetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) DeleteAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteAssetWithContext), varargs...)
}

// DeleteDataSet mocks base method.
func (m *MockDataExchangeAPI) DeleteDataSet(arg0 *dataexchange.DeleteDataSetInput) (*dataexchange.DeleteDataSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSet", arg0)
	ret0, _ := ret[0].(*dataexchange.DeleteDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSet indicates an expected call of DeleteDataSet.
func (mr *MockDataExchangeAPIMockRecorder) DeleteDataSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSet", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteDataSet), arg0)
}

// DeleteDataSetRequest mocks base method.
func (m *MockDataExchangeAPI) DeleteDataSetRequest(arg0 *dataexchange.DeleteDataSetInput) (*request.Request, *dataexchange.DeleteDataSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.DeleteDataSetOutput)
	return ret0, ret1
}

// DeleteDataSetRequest indicates an expected call of DeleteDataSetRequest.
func (mr *MockDataExchangeAPIMockRecorder) DeleteDataSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteDataSetRequest), arg0)
}

// DeleteDataSetWithContext mocks base method.
func (m *MockDataExchangeAPI) DeleteDataSetWithContext(arg0 context.Context, arg1 *dataexchange.DeleteDataSetInput, arg2 ...request.Option) (*dataexchange.DeleteDataSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataSetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.DeleteDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataSetWithContext indicates an expected call of DeleteDataSetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) DeleteDataSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataSetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteDataSetWithContext), varargs...)
}

// DeleteEventAction mocks base method.
func (m *MockDataExchangeAPI) DeleteEventAction(arg0 *dataexchange.DeleteEventActionInput) (*dataexchange.DeleteEventActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventAction", arg0)
	ret0, _ := ret[0].(*dataexchange.DeleteEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventAction indicates an expected call of DeleteEventAction.
func (mr *MockDataExchangeAPIMockRecorder) DeleteEventAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventAction", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteEventAction), arg0)
}

// DeleteEventActionRequest mocks base method.
func (m *MockDataExchangeAPI) DeleteEventActionRequest(arg0 *dataexchange.DeleteEventActionInput) (*request.Request, *dataexchange.DeleteEventActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.DeleteEventActionOutput)
	return ret0, ret1
}

// DeleteEventActionRequest indicates an expected call of DeleteEventActionRequest.
func (mr *MockDataExchangeAPIMockRecorder) DeleteEventActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventActionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteEventActionRequest), arg0)
}

// DeleteEventActionWithContext mocks base method.
func (m *MockDataExchangeAPI) DeleteEventActionWithContext(arg0 context.Context, arg1 *dataexchange.DeleteEventActionInput, arg2 ...request.Option) (*dataexchange.DeleteEventActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventActionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.DeleteEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventActionWithContext indicates an expected call of DeleteEventActionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) DeleteEventActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventActionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteEventActionWithContext), varargs...)
}

// DeleteRevision mocks base method.
func (m *MockDataExchangeAPI) DeleteRevision(arg0 *dataexchange.DeleteRevisionInput) (*dataexchange.DeleteRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRevision", arg0)
	ret0, _ := ret[0].(*dataexchange.DeleteRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRevision indicates an expected call of DeleteRevision.
func (mr *MockDataExchangeAPIMockRecorder) DeleteRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRevision", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteRevision), arg0)
}

// DeleteRevisionRequest mocks base method.
func (m *MockDataExchangeAPI) DeleteRevisionRequest(arg0 *dataexchange.DeleteRevisionInput) (*request.Request, *dataexchange.DeleteRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.DeleteRevisionOutput)
	return ret0, ret1
}

// DeleteRevisionRequest indicates an expected call of DeleteRevisionRequest.
func (mr *MockDataExchangeAPIMockRecorder) DeleteRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRevisionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteRevisionRequest), arg0)
}

// DeleteRevisionWithContext mocks base method.
func (m *MockDataExchangeAPI) DeleteRevisionWithContext(arg0 context.Context, arg1 *dataexchange.DeleteRevisionInput, arg2 ...request.Option) (*dataexchange.DeleteRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.DeleteRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRevisionWithContext indicates an expected call of DeleteRevisionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) DeleteRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRevisionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).DeleteRevisionWithContext), varargs...)
}

// GetAsset mocks base method.
func (m *MockDataExchangeAPI) GetAsset(arg0 *dataexchange.GetAssetInput) (*dataexchange.GetAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", arg0)
	ret0, _ := ret[0].(*dataexchange.GetAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockDataExchangeAPIMockRecorder) GetAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetAsset), arg0)
}

// GetAssetRequest mocks base method.
func (m *MockDataExchangeAPI) GetAssetRequest(arg0 *dataexchange.GetAssetInput) (*request.Request, *dataexchange.GetAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.GetAssetOutput)
	return ret0, ret1
}

// GetAssetRequest indicates an expected call of GetAssetRequest.
func (mr *MockDataExchangeAPIMockRecorder) GetAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetAssetRequest), arg0)
}

// GetAssetWithContext mocks base method.
func (m *MockDataExchangeAPI) GetAssetWithContext(arg0 context.Context, arg1 *dataexchange.GetAssetInput, arg2 ...request.Option) (*dataexchange.GetAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.GetAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetWithContext indicates an expected call of GetAssetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) GetAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetAssetWithContext), varargs...)
}

// GetDataSet mocks base method.
func (m *MockDataExchangeAPI) GetDataSet(arg0 *dataexchange.GetDataSetInput) (*dataexchange.GetDataSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSet", arg0)
	ret0, _ := ret[0].(*dataexchange.GetDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSet indicates an expected call of GetDataSet.
func (mr *MockDataExchangeAPIMockRecorder) GetDataSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSet", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetDataSet), arg0)
}

// GetDataSetRequest mocks base method.
func (m *MockDataExchangeAPI) GetDataSetRequest(arg0 *dataexchange.GetDataSetInput) (*request.Request, *dataexchange.GetDataSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.GetDataSetOutput)
	return ret0, ret1
}

// GetDataSetRequest indicates an expected call of GetDataSetRequest.
func (mr *MockDataExchangeAPIMockRecorder) GetDataSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetDataSetRequest), arg0)
}

// GetDataSetWithContext mocks base method.
func (m *MockDataExchangeAPI) GetDataSetWithContext(arg0 context.Context, arg1 *dataexchange.GetDataSetInput, arg2 ...request.Option) (*dataexchange.GetDataSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataSetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.GetDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSetWithContext indicates an expected call of GetDataSetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) GetDataSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetDataSetWithContext), varargs...)
}

// GetEventAction mocks base method.
func (m *MockDataExchangeAPI) GetEventAction(arg0 *dataexchange.GetEventActionInput) (*dataexchange.GetEventActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventAction", arg0)
	ret0, _ := ret[0].(*dataexchange.GetEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventAction indicates an expected call of GetEventAction.
func (mr *MockDataExchangeAPIMockRecorder) GetEventAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventAction", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetEventAction), arg0)
}

// GetEventActionRequest mocks base method.
func (m *MockDataExchangeAPI) GetEventActionRequest(arg0 *dataexchange.GetEventActionInput) (*request.Request, *dataexchange.GetEventActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.GetEventActionOutput)
	return ret0, ret1
}

// GetEventActionRequest indicates an expected call of GetEventActionRequest.
func (mr *MockDataExchangeAPIMockRecorder) GetEventActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventActionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetEventActionRequest), arg0)
}

// GetEventActionWithContext mocks base method.
func (m *MockDataExchangeAPI) GetEventActionWithContext(arg0 context.Context, arg1 *dataexchange.GetEventActionInput, arg2 ...request.Option) (*dataexchange.GetEventActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventActionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.GetEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventActionWithContext indicates an expected call of GetEventActionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) GetEventActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventActionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetEventActionWithContext), varargs...)
}

// GetJob mocks base method.
func (m *MockDataExchangeAPI) GetJob(arg0 *dataexchange.GetJobInput) (*dataexchange.GetJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*dataexchange.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockDataExchangeAPIMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetJob), arg0)
}

// GetJobRequest mocks base method.
func (m *MockDataExchangeAPI) GetJobRequest(arg0 *dataexchange.GetJobInput) (*request.Request, *dataexchange.GetJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.GetJobOutput)
	return ret0, ret1
}

// GetJobRequest indicates an expected call of GetJobRequest.
func (mr *MockDataExchangeAPIMockRecorder) GetJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetJobRequest), arg0)
}

// GetJobWithContext mocks base method.
func (m *MockDataExchangeAPI) GetJobWithContext(arg0 context.Context, arg1 *dataexchange.GetJobInput, arg2 ...request.Option) (*dataexchange.GetJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobWithContext indicates an expected call of GetJobWithContext.
func (mr *MockDataExchangeAPIMockRecorder) GetJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetJobWithContext), varargs...)
}

// GetRevision mocks base method.
func (m *MockDataExchangeAPI) GetRevision(arg0 *dataexchange.GetRevisionInput) (*dataexchange.GetRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", arg0)
	ret0, _ := ret[0].(*dataexchange.GetRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockDataExchangeAPIMockRecorder) GetRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetRevision), arg0)
}

// GetRevisionRequest mocks base method.
func (m *MockDataExchangeAPI) GetRevisionRequest(arg0 *dataexchange.GetRevisionInput) (*request.Request, *dataexchange.GetRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.GetRevisionOutput)
	return ret0, ret1
}

// GetRevisionRequest indicates an expected call of GetRevisionRequest.
func (mr *MockDataExchangeAPIMockRecorder) GetRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetRevisionRequest), arg0)
}

// GetRevisionWithContext mocks base method.
func (m *MockDataExchangeAPI) GetRevisionWithContext(arg0 context.Context, arg1 *dataexchange.GetRevisionInput, arg2 ...request.Option) (*dataexchange.GetRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.GetRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisionWithContext indicates an expected call of GetRevisionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) GetRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).GetRevisionWithContext), varargs...)
}

// ListDataSetRevisions mocks base method.
func (m *MockDataExchangeAPI) ListDataSetRevisions(arg0 *dataexchange.ListDataSetRevisionsInput) (*dataexchange.ListDataSetRevisionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetRevisions", arg0)
	ret0, _ := ret[0].(*dataexchange.ListDataSetRevisionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSetRevisions indicates an expected call of ListDataSetRevisions.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetRevisions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetRevisions", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetRevisions), arg0)
}

// ListDataSetRevisionsPages mocks base method.
func (m *MockDataExchangeAPI) ListDataSetRevisionsPages(arg0 *dataexchange.ListDataSetRevisionsInput, arg1 func(*dataexchange.ListDataSetRevisionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetRevisionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetRevisionsPages indicates an expected call of ListDataSetRevisionsPages.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetRevisionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetRevisionsPages", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetRevisionsPages), arg0, arg1)
}

// ListDataSetRevisionsPagesWithContext mocks base method.
func (m *MockDataExchangeAPI) ListDataSetRevisionsPagesWithContext(arg0 context.Context, arg1 *dataexchange.ListDataSetRevisionsInput, arg2 func(*dataexchange.ListDataSetRevisionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetRevisionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetRevisionsPagesWithContext indicates an expected call of ListDataSetRevisionsPagesWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetRevisionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetRevisionsPagesWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetRevisionsPagesWithContext), varargs...)
}

// ListDataSetRevisionsRequest mocks base method.
func (m *MockDataExchangeAPI) ListDataSetRevisionsRequest(arg0 *dataexchange.ListDataSetRevisionsInput) (*request.Request, *dataexchange.ListDataSetRevisionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetRevisionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.ListDataSetRevisionsOutput)
	return ret0, ret1
}

// ListDataSetRevisionsRequest indicates an expected call of ListDataSetRevisionsRequest.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetRevisionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetRevisionsRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetRevisionsRequest), arg0)
}

// ListDataSetRevisionsWithContext mocks base method.
func (m *MockDataExchangeAPI) ListDataSetRevisionsWithContext(arg0 context.Context, arg1 *dataexchange.ListDataSetRevisionsInput, arg2 ...request.Option) (*dataexchange.ListDataSetRevisionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetRevisionsWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.ListDataSetRevisionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSetRevisionsWithContext indicates an expected call of ListDataSetRevisionsWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetRevisionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetRevisionsWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetRevisionsWithContext), varargs...)
}

// ListDataSets mocks base method.
func (m *MockDataExchangeAPI) ListDataSets(arg0 *dataexchange.ListDataSetsInput) (*dataexchange.ListDataSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSets", arg0)
	ret0, _ := ret[0].(*dataexchange.ListDataSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSets indicates an expected call of ListDataSets.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSets", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSets), arg0)
}

// ListDataSetsPages mocks base method.
func (m *MockDataExchangeAPI) ListDataSetsPages(arg0 *dataexchange.ListDataSetsInput, arg1 func(*dataexchange.ListDataSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetsPages indicates an expected call of ListDataSetsPages.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsPages", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetsPages), arg0, arg1)
}

// ListDataSetsPagesWithContext mocks base method.
func (m *MockDataExchangeAPI) ListDataSetsPagesWithContext(arg0 context.Context, arg1 *dataexchange.ListDataSetsInput, arg2 func(*dataexchange.ListDataSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataSetsPagesWithContext indicates an expected call of ListDataSetsPagesWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsPagesWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetsPagesWithContext), varargs...)
}

// ListDataSetsRequest mocks base method.
func (m *MockDataExchangeAPI) ListDataSetsRequest(arg0 *dataexchange.ListDataSetsInput) (*request.Request, *dataexchange.ListDataSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.ListDataSetsOutput)
	return ret0, ret1
}

// ListDataSetsRequest indicates an expected call of ListDataSetsRequest.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetsRequest), arg0)
}

// ListDataSetsWithContext mocks base method.
func (m *MockDataExchangeAPI) ListDataSetsWithContext(arg0 context.Context, arg1 *dataexchange.ListDataSetsInput, arg2 ...request.Option) (*dataexchange.ListDataSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataSetsWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.ListDataSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataSetsWithContext indicates an expected call of ListDataSetsWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListDataSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataSetsWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListDataSetsWithContext), varargs...)
}

// ListEventActions mocks base method.
func (m *MockDataExchangeAPI) ListEventActions(arg0 *dataexchange.ListEventActionsInput) (*dataexchange.ListEventActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventActions", arg0)
	ret0, _ := ret[0].(*dataexchange.ListEventActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventActions indicates an expected call of ListEventActions.
func (mr *MockDataExchangeAPIMockRecorder) ListEventActions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventActions", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListEventActions), arg0)
}

// ListEventActionsPages mocks base method.
func (m *MockDataExchangeAPI) ListEventActionsPages(arg0 *dataexchange.ListEventActionsInput, arg1 func(*dataexchange.ListEventActionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventActionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventActionsPages indicates an expected call of ListEventActionsPages.
func (mr *MockDataExchangeAPIMockRecorder) ListEventActionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventActionsPages", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListEventActionsPages), arg0, arg1)
}

// ListEventActionsPagesWithContext mocks base method.
func (m *MockDataExchangeAPI) ListEventActionsPagesWithContext(arg0 context.Context, arg1 *dataexchange.ListEventActionsInput, arg2 func(*dataexchange.ListEventActionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventActionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEventActionsPagesWithContext indicates an expected call of ListEventActionsPagesWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListEventActionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventActionsPagesWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListEventActionsPagesWithContext), varargs...)
}

// ListEventActionsRequest mocks base method.
func (m *MockDataExchangeAPI) ListEventActionsRequest(arg0 *dataexchange.ListEventActionsInput) (*request.Request, *dataexchange.ListEventActionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.ListEventActionsOutput)
	return ret0, ret1
}

// ListEventActionsRequest indicates an expected call of ListEventActionsRequest.
func (mr *MockDataExchangeAPIMockRecorder) ListEventActionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventActionsRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListEventActionsRequest), arg0)
}

// ListEventActionsWithContext mocks base method.
func (m *MockDataExchangeAPI) ListEventActionsWithContext(arg0 context.Context, arg1 *dataexchange.ListEventActionsInput, arg2 ...request.Option) (*dataexchange.ListEventActionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEventActionsWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.ListEventActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventActionsWithContext indicates an expected call of ListEventActionsWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListEventActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventActionsWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListEventActionsWithContext), varargs...)
}

// ListJobs mocks base method.
func (m *MockDataExchangeAPI) ListJobs(arg0 *dataexchange.ListJobsInput) (*dataexchange.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*dataexchange.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockDataExchangeAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListJobs), arg0)
}

// ListJobsPages mocks base method.
func (m *MockDataExchangeAPI) ListJobsPages(arg0 *dataexchange.ListJobsInput, arg1 func(*dataexchange.ListJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPages indicates an expected call of ListJobsPages.
func (mr *MockDataExchangeAPIMockRecorder) ListJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPages", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListJobsPages), arg0, arg1)
}

// ListJobsPagesWithContext mocks base method.
func (m *MockDataExchangeAPI) ListJobsPagesWithContext(arg0 context.Context, arg1 *dataexchange.ListJobsInput, arg2 func(*dataexchange.ListJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPagesWithContext indicates an expected call of ListJobsPagesWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPagesWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListJobsPagesWithContext), varargs...)
}

// ListJobsRequest mocks base method.
func (m *MockDataExchangeAPI) ListJobsRequest(arg0 *dataexchange.ListJobsInput) (*request.Request, *dataexchange.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest.
func (mr *MockDataExchangeAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method.
func (m *MockDataExchangeAPI) ListJobsWithContext(arg0 context.Context, arg1 *dataexchange.ListJobsInput, arg2 ...request.Option) (*dataexchange.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListJobsWithContext), varargs...)
}

// ListRevisionAssets mocks base method.
func (m *MockDataExchangeAPI) ListRevisionAssets(arg0 *dataexchange.ListRevisionAssetsInput) (*dataexchange.ListRevisionAssetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevisionAssets", arg0)
	ret0, _ := ret[0].(*dataexchange.ListRevisionAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRevisionAssets indicates an expected call of ListRevisionAssets.
func (mr *MockDataExchangeAPIMockRecorder) ListRevisionAssets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevisionAssets", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListRevisionAssets), arg0)
}

// ListRevisionAssetsPages mocks base method.
func (m *MockDataExchangeAPI) ListRevisionAssetsPages(arg0 *dataexchange.ListRevisionAssetsInput, arg1 func(*dataexchange.ListRevisionAssetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevisionAssetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRevisionAssetsPages indicates an expected call of ListRevisionAssetsPages.
func (mr *MockDataExchangeAPIMockRecorder) ListRevisionAssetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevisionAssetsPages", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListRevisionAssetsPages), arg0, arg1)
}

// ListRevisionAssetsPagesWithContext mocks base method.
func (m *MockDataExchangeAPI) ListRevisionAssetsPagesWithContext(arg0 context.Context, arg1 *dataexchange.ListRevisionAssetsInput, arg2 func(*dataexchange.ListRevisionAssetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRevisionAssetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRevisionAssetsPagesWithContext indicates an expected call of ListRevisionAssetsPagesWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListRevisionAssetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevisionAssetsPagesWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListRevisionAssetsPagesWithContext), varargs...)
}

// ListRevisionAssetsRequest mocks base method.
func (m *MockDataExchangeAPI) ListRevisionAssetsRequest(arg0 *dataexchange.ListRevisionAssetsInput) (*request.Request, *dataexchange.ListRevisionAssetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevisionAssetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.ListRevisionAssetsOutput)
	return ret0, ret1
}

// ListRevisionAssetsRequest indicates an expected call of ListRevisionAssetsRequest.
func (mr *MockDataExchangeAPIMockRecorder) ListRevisionAssetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevisionAssetsRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListRevisionAssetsRequest), arg0)
}

// ListRevisionAssetsWithContext mocks base method.
func (m *MockDataExchangeAPI) ListRevisionAssetsWithContext(arg0 context.Context, arg1 *dataexchange.ListRevisionAssetsInput, arg2 ...request.Option) (*dataexchange.ListRevisionAssetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRevisionAssetsWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.ListRevisionAssetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRevisionAssetsWithContext indicates an expected call of ListRevisionAssetsWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListRevisionAssetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevisionAssetsWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListRevisionAssetsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockDataExchangeAPI) ListTagsForResource(arg0 *dataexchange.ListTagsForResourceInput) (*dataexchange.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*dataexchange.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockDataExchangeAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockDataExchangeAPI) ListTagsForResourceRequest(arg0 *dataexchange.ListTagsForResourceInput) (*request.Request, *dataexchange.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockDataExchangeAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockDataExchangeAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *dataexchange.ListTagsForResourceInput, arg2 ...request.Option) (*dataexchange.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockDataExchangeAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// RevokeRevision mocks base method.
func (m *MockDataExchangeAPI) RevokeRevision(arg0 *dataexchange.RevokeRevisionInput) (*dataexchange.RevokeRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRevision", arg0)
	ret0, _ := ret[0].(*dataexchange.RevokeRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeRevision indicates an expected call of RevokeRevision.
func (mr *MockDataExchangeAPIMockRecorder) RevokeRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRevision", reflect.TypeOf((*MockDataExchangeAPI)(nil).RevokeRevision), arg0)
}

// RevokeRevisionRequest mocks base method.
func (m *MockDataExchangeAPI) RevokeRevisionRequest(arg0 *dataexchange.RevokeRevisionInput) (*request.Request, *dataexchange.RevokeRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.RevokeRevisionOutput)
	return ret0, ret1
}

// RevokeRevisionRequest indicates an expected call of RevokeRevisionRequest.
func (mr *MockDataExchangeAPIMockRecorder) RevokeRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRevisionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).RevokeRevisionRequest), arg0)
}

// RevokeRevisionWithContext mocks base method.
func (m *MockDataExchangeAPI) RevokeRevisionWithContext(arg0 context.Context, arg1 *dataexchange.RevokeRevisionInput, arg2 ...request.Option) (*dataexchange.RevokeRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.RevokeRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeRevisionWithContext indicates an expected call of RevokeRevisionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) RevokeRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRevisionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).RevokeRevisionWithContext), varargs...)
}

// SendApiAsset mocks base method.
func (m *MockDataExchangeAPI) SendApiAsset(arg0 *dataexchange.SendApiAssetInput) (*dataexchange.SendApiAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendApiAsset", arg0)
	ret0, _ := ret[0].(*dataexchange.SendApiAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendApiAsset indicates an expected call of SendApiAsset.
func (mr *MockDataExchangeAPIMockRecorder) SendApiAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendApiAsset", reflect.TypeOf((*MockDataExchangeAPI)(nil).SendApiAsset), arg0)
}

// SendApiAssetRequest mocks base method.
func (m *MockDataExchangeAPI) SendApiAssetRequest(arg0 *dataexchange.SendApiAssetInput) (*request.Request, *dataexchange.SendApiAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendApiAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.SendApiAssetOutput)
	return ret0, ret1
}

// SendApiAssetRequest indicates an expected call of SendApiAssetRequest.
func (mr *MockDataExchangeAPIMockRecorder) SendApiAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendApiAssetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).SendApiAssetRequest), arg0)
}

// SendApiAssetWithContext mocks base method.
func (m *MockDataExchangeAPI) SendApiAssetWithContext(arg0 context.Context, arg1 *dataexchange.SendApiAssetInput, arg2 ...request.Option) (*dataexchange.SendApiAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendApiAssetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.SendApiAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendApiAssetWithContext indicates an expected call of SendApiAssetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) SendApiAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendApiAssetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).SendApiAssetWithContext), varargs...)
}

// StartJob mocks base method.
func (m *MockDataExchangeAPI) StartJob(arg0 *dataexchange.StartJobInput) (*dataexchange.StartJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", arg0)
	ret0, _ := ret[0].(*dataexchange.StartJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJob indicates an expected call of StartJob.
func (mr *MockDataExchangeAPIMockRecorder) StartJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockDataExchangeAPI)(nil).StartJob), arg0)
}

// StartJobRequest mocks base method.
func (m *MockDataExchangeAPI) StartJobRequest(arg0 *dataexchange.StartJobInput) (*request.Request, *dataexchange.StartJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.StartJobOutput)
	return ret0, ret1
}

// StartJobRequest indicates an expected call of StartJobRequest.
func (mr *MockDataExchangeAPIMockRecorder) StartJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).StartJobRequest), arg0)
}

// StartJobWithContext mocks base method.
func (m *MockDataExchangeAPI) StartJobWithContext(arg0 context.Context, arg1 *dataexchange.StartJobInput, arg2 ...request.Option) (*dataexchange.StartJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJobWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.StartJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobWithContext indicates an expected call of StartJobWithContext.
func (mr *MockDataExchangeAPIMockRecorder) StartJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).StartJobWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockDataExchangeAPI) TagResource(arg0 *dataexchange.TagResourceInput) (*dataexchange.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*dataexchange.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockDataExchangeAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDataExchangeAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockDataExchangeAPI) TagResourceRequest(arg0 *dataexchange.TagResourceInput) (*request.Request, *dataexchange.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockDataExchangeAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockDataExchangeAPI) TagResourceWithContext(arg0 context.Context, arg1 *dataexchange.TagResourceInput, arg2 ...request.Option) (*dataexchange.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockDataExchangeAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockDataExchangeAPI) UntagResource(arg0 *dataexchange.UntagResourceInput) (*dataexchange.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*dataexchange.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockDataExchangeAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDataExchangeAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockDataExchangeAPI) UntagResourceRequest(arg0 *dataexchange.UntagResourceInput) (*request.Request, *dataexchange.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockDataExchangeAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockDataExchangeAPI) UntagResourceWithContext(arg0 context.Context, arg1 *dataexchange.UntagResourceInput, arg2 ...request.Option) (*dataexchange.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockDataExchangeAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateAsset mocks base method.
func (m *MockDataExchangeAPI) UpdateAsset(arg0 *dataexchange.UpdateAssetInput) (*dataexchange.UpdateAssetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", arg0)
	ret0, _ := ret[0].(*dataexchange.UpdateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockDataExchangeAPIMockRecorder) UpdateAsset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateAsset), arg0)
}

// UpdateAssetRequest mocks base method.
func (m *MockDataExchangeAPI) UpdateAssetRequest(arg0 *dataexchange.UpdateAssetInput) (*request.Request, *dataexchange.UpdateAssetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.UpdateAssetOutput)
	return ret0, ret1
}

// UpdateAssetRequest indicates an expected call of UpdateAssetRequest.
func (mr *MockDataExchangeAPIMockRecorder) UpdateAssetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateAssetRequest), arg0)
}

// UpdateAssetWithContext mocks base method.
func (m *MockDataExchangeAPI) UpdateAssetWithContext(arg0 context.Context, arg1 *dataexchange.UpdateAssetInput, arg2 ...request.Option) (*dataexchange.UpdateAssetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.UpdateAssetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetWithContext indicates an expected call of UpdateAssetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) UpdateAssetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateAssetWithContext), varargs...)
}

// UpdateDataSet mocks base method.
func (m *MockDataExchangeAPI) UpdateDataSet(arg0 *dataexchange.UpdateDataSetInput) (*dataexchange.UpdateDataSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSet", arg0)
	ret0, _ := ret[0].(*dataexchange.UpdateDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSet indicates an expected call of UpdateDataSet.
func (mr *MockDataExchangeAPIMockRecorder) UpdateDataSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSet", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateDataSet), arg0)
}

// UpdateDataSetRequest mocks base method.
func (m *MockDataExchangeAPI) UpdateDataSetRequest(arg0 *dataexchange.UpdateDataSetInput) (*request.Request, *dataexchange.UpdateDataSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.UpdateDataSetOutput)
	return ret0, ret1
}

// UpdateDataSetRequest indicates an expected call of UpdateDataSetRequest.
func (mr *MockDataExchangeAPIMockRecorder) UpdateDataSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSetRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateDataSetRequest), arg0)
}

// UpdateDataSetWithContext mocks base method.
func (m *MockDataExchangeAPI) UpdateDataSetWithContext(arg0 context.Context, arg1 *dataexchange.UpdateDataSetInput, arg2 ...request.Option) (*dataexchange.UpdateDataSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataSetWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.UpdateDataSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataSetWithContext indicates an expected call of UpdateDataSetWithContext.
func (mr *MockDataExchangeAPIMockRecorder) UpdateDataSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataSetWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateDataSetWithContext), varargs...)
}

// UpdateEventAction mocks base method.
func (m *MockDataExchangeAPI) UpdateEventAction(arg0 *dataexchange.UpdateEventActionInput) (*dataexchange.UpdateEventActionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventAction", arg0)
	ret0, _ := ret[0].(*dataexchange.UpdateEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventAction indicates an expected call of UpdateEventAction.
func (mr *MockDataExchangeAPIMockRecorder) UpdateEventAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventAction", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateEventAction), arg0)
}

// UpdateEventActionRequest mocks base method.
func (m *MockDataExchangeAPI) UpdateEventActionRequest(arg0 *dataexchange.UpdateEventActionInput) (*request.Request, *dataexchange.UpdateEventActionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventActionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.UpdateEventActionOutput)
	return ret0, ret1
}

// UpdateEventActionRequest indicates an expected call of UpdateEventActionRequest.
func (mr *MockDataExchangeAPIMockRecorder) UpdateEventActionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventActionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateEventActionRequest), arg0)
}

// UpdateEventActionWithContext mocks base method.
func (m *MockDataExchangeAPI) UpdateEventActionWithContext(arg0 context.Context, arg1 *dataexchange.UpdateEventActionInput, arg2 ...request.Option) (*dataexchange.UpdateEventActionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEventActionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.UpdateEventActionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventActionWithContext indicates an expected call of UpdateEventActionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) UpdateEventActionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventActionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateEventActionWithContext), varargs...)
}

// UpdateRevision mocks base method.
func (m *MockDataExchangeAPI) UpdateRevision(arg0 *dataexchange.UpdateRevisionInput) (*dataexchange.UpdateRevisionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevision", arg0)
	ret0, _ := ret[0].(*dataexchange.UpdateRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRevision indicates an expected call of UpdateRevision.
func (mr *MockDataExchangeAPIMockRecorder) UpdateRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevision", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateRevision), arg0)
}

// UpdateRevisionRequest mocks base method.
func (m *MockDataExchangeAPI) UpdateRevisionRequest(arg0 *dataexchange.UpdateRevisionInput) (*request.Request, *dataexchange.UpdateRevisionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevisionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dataexchange.UpdateRevisionOutput)
	return ret0, ret1
}

// UpdateRevisionRequest indicates an expected call of UpdateRevisionRequest.
func (mr *MockDataExchangeAPIMockRecorder) UpdateRevisionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevisionRequest", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateRevisionRequest), arg0)
}

// UpdateRevisionWithContext mocks base method.
func (m *MockDataExchangeAPI) UpdateRevisionWithContext(arg0 context.Context, arg1 *dataexchange.UpdateRevisionInput, arg2 ...request.Option) (*dataexchange.UpdateRevisionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRevisionWithContext", varargs...)
	ret0, _ := ret[0].(*dataexchange.UpdateRevisionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRevisionWithContext indicates an expected call of UpdateRevisionWithContext.
func (mr *MockDataExchangeAPIMockRecorder) UpdateRevisionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevisionWithContext", reflect.TypeOf((*MockDataExchangeAPI)(nil).UpdateRevisionWithContext), varargs...)
}

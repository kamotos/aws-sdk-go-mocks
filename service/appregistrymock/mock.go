// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/appregistry/appregistryiface (interfaces: AppRegistryAPI)

// Package appregistrymock is a generated GoMock package.
package appregistrymock

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	appregistry "github.com/aws/aws-sdk-go/service/appregistry"
	gomock "github.com/golang/mock/gomock"
)

// MockAppRegistryAPI is a mock of AppRegistryAPI interface.
type MockAppRegistryAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAppRegistryAPIMockRecorder
}

// MockAppRegistryAPIMockRecorder is the mock recorder for MockAppRegistryAPI.
type MockAppRegistryAPIMockRecorder struct {
	mock *MockAppRegistryAPI
}

// NewMockAppRegistryAPI creates a new mock instance.
func NewMockAppRegistryAPI(ctrl *gomock.Controller) *MockAppRegistryAPI {
	mock := &MockAppRegistryAPI{ctrl: ctrl}
	mock.recorder = &MockAppRegistryAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRegistryAPI) EXPECT() *MockAppRegistryAPIMockRecorder {
	return m.recorder
}

// AssociateAttributeGroup mocks base method.
func (m *MockAppRegistryAPI) AssociateAttributeGroup(arg0 *appregistry.AssociateAttributeGroupInput) (*appregistry.AssociateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAttributeGroup", arg0)
	ret0, _ := ret[0].(*appregistry.AssociateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAttributeGroup indicates an expected call of AssociateAttributeGroup.
func (mr *MockAppRegistryAPIMockRecorder) AssociateAttributeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAttributeGroup", reflect.TypeOf((*MockAppRegistryAPI)(nil).AssociateAttributeGroup), arg0)
}

// AssociateAttributeGroupRequest mocks base method.
func (m *MockAppRegistryAPI) AssociateAttributeGroupRequest(arg0 *appregistry.AssociateAttributeGroupInput) (*request.Request, *appregistry.AssociateAttributeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAttributeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.AssociateAttributeGroupOutput)
	return ret0, ret1
}

// AssociateAttributeGroupRequest indicates an expected call of AssociateAttributeGroupRequest.
func (mr *MockAppRegistryAPIMockRecorder) AssociateAttributeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAttributeGroupRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).AssociateAttributeGroupRequest), arg0)
}

// AssociateAttributeGroupWithContext mocks base method.
func (m *MockAppRegistryAPI) AssociateAttributeGroupWithContext(arg0 context.Context, arg1 *appregistry.AssociateAttributeGroupInput, arg2 ...request.Option) (*appregistry.AssociateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateAttributeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.AssociateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAttributeGroupWithContext indicates an expected call of AssociateAttributeGroupWithContext.
func (mr *MockAppRegistryAPIMockRecorder) AssociateAttributeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAttributeGroupWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).AssociateAttributeGroupWithContext), varargs...)
}

// AssociateResource mocks base method.
func (m *MockAppRegistryAPI) AssociateResource(arg0 *appregistry.AssociateResourceInput) (*appregistry.AssociateResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResource", arg0)
	ret0, _ := ret[0].(*appregistry.AssociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResource indicates an expected call of AssociateResource.
func (mr *MockAppRegistryAPIMockRecorder) AssociateResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResource", reflect.TypeOf((*MockAppRegistryAPI)(nil).AssociateResource), arg0)
}

// AssociateResourceRequest mocks base method.
func (m *MockAppRegistryAPI) AssociateResourceRequest(arg0 *appregistry.AssociateResourceInput) (*request.Request, *appregistry.AssociateResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.AssociateResourceOutput)
	return ret0, ret1
}

// AssociateResourceRequest indicates an expected call of AssociateResourceRequest.
func (mr *MockAppRegistryAPIMockRecorder) AssociateResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResourceRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).AssociateResourceRequest), arg0)
}

// AssociateResourceWithContext mocks base method.
func (m *MockAppRegistryAPI) AssociateResourceWithContext(arg0 context.Context, arg1 *appregistry.AssociateResourceInput, arg2 ...request.Option) (*appregistry.AssociateResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.AssociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateResourceWithContext indicates an expected call of AssociateResourceWithContext.
func (mr *MockAppRegistryAPIMockRecorder) AssociateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateResourceWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).AssociateResourceWithContext), varargs...)
}

// CreateApplication mocks base method.
func (m *MockAppRegistryAPI) CreateApplication(arg0 *appregistry.CreateApplicationInput) (*appregistry.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*appregistry.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockAppRegistryAPIMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockAppRegistryAPI)(nil).CreateApplication), arg0)
}

// CreateApplicationRequest mocks base method.
func (m *MockAppRegistryAPI) CreateApplicationRequest(arg0 *appregistry.CreateApplicationInput) (*request.Request, *appregistry.CreateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.CreateApplicationOutput)
	return ret0, ret1
}

// CreateApplicationRequest indicates an expected call of CreateApplicationRequest.
func (mr *MockAppRegistryAPIMockRecorder) CreateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).CreateApplicationRequest), arg0)
}

// CreateApplicationWithContext mocks base method.
func (m *MockAppRegistryAPI) CreateApplicationWithContext(arg0 context.Context, arg1 *appregistry.CreateApplicationInput, arg2 ...request.Option) (*appregistry.CreateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.CreateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithContext indicates an expected call of CreateApplicationWithContext.
func (mr *MockAppRegistryAPIMockRecorder) CreateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).CreateApplicationWithContext), varargs...)
}

// CreateAttributeGroup mocks base method.
func (m *MockAppRegistryAPI) CreateAttributeGroup(arg0 *appregistry.CreateAttributeGroupInput) (*appregistry.CreateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttributeGroup", arg0)
	ret0, _ := ret[0].(*appregistry.CreateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttributeGroup indicates an expected call of CreateAttributeGroup.
func (mr *MockAppRegistryAPIMockRecorder) CreateAttributeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttributeGroup", reflect.TypeOf((*MockAppRegistryAPI)(nil).CreateAttributeGroup), arg0)
}

// CreateAttributeGroupRequest mocks base method.
func (m *MockAppRegistryAPI) CreateAttributeGroupRequest(arg0 *appregistry.CreateAttributeGroupInput) (*request.Request, *appregistry.CreateAttributeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttributeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.CreateAttributeGroupOutput)
	return ret0, ret1
}

// CreateAttributeGroupRequest indicates an expected call of CreateAttributeGroupRequest.
func (mr *MockAppRegistryAPIMockRecorder) CreateAttributeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttributeGroupRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).CreateAttributeGroupRequest), arg0)
}

// CreateAttributeGroupWithContext mocks base method.
func (m *MockAppRegistryAPI) CreateAttributeGroupWithContext(arg0 context.Context, arg1 *appregistry.CreateAttributeGroupInput, arg2 ...request.Option) (*appregistry.CreateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAttributeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.CreateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttributeGroupWithContext indicates an expected call of CreateAttributeGroupWithContext.
func (mr *MockAppRegistryAPIMockRecorder) CreateAttributeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttributeGroupWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).CreateAttributeGroupWithContext), varargs...)
}

// DeleteApplication mocks base method.
func (m *MockAppRegistryAPI) DeleteApplication(arg0 *appregistry.DeleteApplicationInput) (*appregistry.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0)
	ret0, _ := ret[0].(*appregistry.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockAppRegistryAPIMockRecorder) DeleteApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockAppRegistryAPI)(nil).DeleteApplication), arg0)
}

// DeleteApplicationRequest mocks base method.
func (m *MockAppRegistryAPI) DeleteApplicationRequest(arg0 *appregistry.DeleteApplicationInput) (*request.Request, *appregistry.DeleteApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.DeleteApplicationOutput)
	return ret0, ret1
}

// DeleteApplicationRequest indicates an expected call of DeleteApplicationRequest.
func (mr *MockAppRegistryAPIMockRecorder) DeleteApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).DeleteApplicationRequest), arg0)
}

// DeleteApplicationWithContext mocks base method.
func (m *MockAppRegistryAPI) DeleteApplicationWithContext(arg0 context.Context, arg1 *appregistry.DeleteApplicationInput, arg2 ...request.Option) (*appregistry.DeleteApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.DeleteApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithContext indicates an expected call of DeleteApplicationWithContext.
func (mr *MockAppRegistryAPIMockRecorder) DeleteApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).DeleteApplicationWithContext), varargs...)
}

// DeleteAttributeGroup mocks base method.
func (m *MockAppRegistryAPI) DeleteAttributeGroup(arg0 *appregistry.DeleteAttributeGroupInput) (*appregistry.DeleteAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttributeGroup", arg0)
	ret0, _ := ret[0].(*appregistry.DeleteAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttributeGroup indicates an expected call of DeleteAttributeGroup.
func (mr *MockAppRegistryAPIMockRecorder) DeleteAttributeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributeGroup", reflect.TypeOf((*MockAppRegistryAPI)(nil).DeleteAttributeGroup), arg0)
}

// DeleteAttributeGroupRequest mocks base method.
func (m *MockAppRegistryAPI) DeleteAttributeGroupRequest(arg0 *appregistry.DeleteAttributeGroupInput) (*request.Request, *appregistry.DeleteAttributeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttributeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.DeleteAttributeGroupOutput)
	return ret0, ret1
}

// DeleteAttributeGroupRequest indicates an expected call of DeleteAttributeGroupRequest.
func (mr *MockAppRegistryAPIMockRecorder) DeleteAttributeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributeGroupRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).DeleteAttributeGroupRequest), arg0)
}

// DeleteAttributeGroupWithContext mocks base method.
func (m *MockAppRegistryAPI) DeleteAttributeGroupWithContext(arg0 context.Context, arg1 *appregistry.DeleteAttributeGroupInput, arg2 ...request.Option) (*appregistry.DeleteAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAttributeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.DeleteAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttributeGroupWithContext indicates an expected call of DeleteAttributeGroupWithContext.
func (mr *MockAppRegistryAPIMockRecorder) DeleteAttributeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttributeGroupWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).DeleteAttributeGroupWithContext), varargs...)
}

// DisassociateAttributeGroup mocks base method.
func (m *MockAppRegistryAPI) DisassociateAttributeGroup(arg0 *appregistry.DisassociateAttributeGroupInput) (*appregistry.DisassociateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAttributeGroup", arg0)
	ret0, _ := ret[0].(*appregistry.DisassociateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAttributeGroup indicates an expected call of DisassociateAttributeGroup.
func (mr *MockAppRegistryAPIMockRecorder) DisassociateAttributeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAttributeGroup", reflect.TypeOf((*MockAppRegistryAPI)(nil).DisassociateAttributeGroup), arg0)
}

// DisassociateAttributeGroupRequest mocks base method.
func (m *MockAppRegistryAPI) DisassociateAttributeGroupRequest(arg0 *appregistry.DisassociateAttributeGroupInput) (*request.Request, *appregistry.DisassociateAttributeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateAttributeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.DisassociateAttributeGroupOutput)
	return ret0, ret1
}

// DisassociateAttributeGroupRequest indicates an expected call of DisassociateAttributeGroupRequest.
func (mr *MockAppRegistryAPIMockRecorder) DisassociateAttributeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAttributeGroupRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).DisassociateAttributeGroupRequest), arg0)
}

// DisassociateAttributeGroupWithContext mocks base method.
func (m *MockAppRegistryAPI) DisassociateAttributeGroupWithContext(arg0 context.Context, arg1 *appregistry.DisassociateAttributeGroupInput, arg2 ...request.Option) (*appregistry.DisassociateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateAttributeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.DisassociateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateAttributeGroupWithContext indicates an expected call of DisassociateAttributeGroupWithContext.
func (mr *MockAppRegistryAPIMockRecorder) DisassociateAttributeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateAttributeGroupWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).DisassociateAttributeGroupWithContext), varargs...)
}

// DisassociateResource mocks base method.
func (m *MockAppRegistryAPI) DisassociateResource(arg0 *appregistry.DisassociateResourceInput) (*appregistry.DisassociateResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResource", arg0)
	ret0, _ := ret[0].(*appregistry.DisassociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResource indicates an expected call of DisassociateResource.
func (mr *MockAppRegistryAPIMockRecorder) DisassociateResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResource", reflect.TypeOf((*MockAppRegistryAPI)(nil).DisassociateResource), arg0)
}

// DisassociateResourceRequest mocks base method.
func (m *MockAppRegistryAPI) DisassociateResourceRequest(arg0 *appregistry.DisassociateResourceInput) (*request.Request, *appregistry.DisassociateResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.DisassociateResourceOutput)
	return ret0, ret1
}

// DisassociateResourceRequest indicates an expected call of DisassociateResourceRequest.
func (mr *MockAppRegistryAPIMockRecorder) DisassociateResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResourceRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).DisassociateResourceRequest), arg0)
}

// DisassociateResourceWithContext mocks base method.
func (m *MockAppRegistryAPI) DisassociateResourceWithContext(arg0 context.Context, arg1 *appregistry.DisassociateResourceInput, arg2 ...request.Option) (*appregistry.DisassociateResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.DisassociateResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateResourceWithContext indicates an expected call of DisassociateResourceWithContext.
func (mr *MockAppRegistryAPIMockRecorder) DisassociateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateResourceWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).DisassociateResourceWithContext), varargs...)
}

// GetApplication mocks base method.
func (m *MockAppRegistryAPI) GetApplication(arg0 *appregistry.GetApplicationInput) (*appregistry.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0)
	ret0, _ := ret[0].(*appregistry.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockAppRegistryAPIMockRecorder) GetApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockAppRegistryAPI)(nil).GetApplication), arg0)
}

// GetApplicationRequest mocks base method.
func (m *MockAppRegistryAPI) GetApplicationRequest(arg0 *appregistry.GetApplicationInput) (*request.Request, *appregistry.GetApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.GetApplicationOutput)
	return ret0, ret1
}

// GetApplicationRequest indicates an expected call of GetApplicationRequest.
func (mr *MockAppRegistryAPIMockRecorder) GetApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).GetApplicationRequest), arg0)
}

// GetApplicationWithContext mocks base method.
func (m *MockAppRegistryAPI) GetApplicationWithContext(arg0 context.Context, arg1 *appregistry.GetApplicationInput, arg2 ...request.Option) (*appregistry.GetApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.GetApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationWithContext indicates an expected call of GetApplicationWithContext.
func (mr *MockAppRegistryAPIMockRecorder) GetApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).GetApplicationWithContext), varargs...)
}

// GetAttributeGroup mocks base method.
func (m *MockAppRegistryAPI) GetAttributeGroup(arg0 *appregistry.GetAttributeGroupInput) (*appregistry.GetAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeGroup", arg0)
	ret0, _ := ret[0].(*appregistry.GetAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeGroup indicates an expected call of GetAttributeGroup.
func (mr *MockAppRegistryAPIMockRecorder) GetAttributeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeGroup", reflect.TypeOf((*MockAppRegistryAPI)(nil).GetAttributeGroup), arg0)
}

// GetAttributeGroupRequest mocks base method.
func (m *MockAppRegistryAPI) GetAttributeGroupRequest(arg0 *appregistry.GetAttributeGroupInput) (*request.Request, *appregistry.GetAttributeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.GetAttributeGroupOutput)
	return ret0, ret1
}

// GetAttributeGroupRequest indicates an expected call of GetAttributeGroupRequest.
func (mr *MockAppRegistryAPIMockRecorder) GetAttributeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeGroupRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).GetAttributeGroupRequest), arg0)
}

// GetAttributeGroupWithContext mocks base method.
func (m *MockAppRegistryAPI) GetAttributeGroupWithContext(arg0 context.Context, arg1 *appregistry.GetAttributeGroupInput, arg2 ...request.Option) (*appregistry.GetAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttributeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.GetAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeGroupWithContext indicates an expected call of GetAttributeGroupWithContext.
func (mr *MockAppRegistryAPIMockRecorder) GetAttributeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeGroupWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).GetAttributeGroupWithContext), varargs...)
}

// ListApplications mocks base method.
func (m *MockAppRegistryAPI) ListApplications(arg0 *appregistry.ListApplicationsInput) (*appregistry.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].(*appregistry.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockAppRegistryAPIMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListApplications), arg0)
}

// ListApplicationsPages mocks base method.
func (m *MockAppRegistryAPI) ListApplicationsPages(arg0 *appregistry.ListApplicationsInput, arg1 func(*appregistry.ListApplicationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPages indicates an expected call of ListApplicationsPages.
func (mr *MockAppRegistryAPIMockRecorder) ListApplicationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPages", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListApplicationsPages), arg0, arg1)
}

// ListApplicationsPagesWithContext mocks base method.
func (m *MockAppRegistryAPI) ListApplicationsPagesWithContext(arg0 context.Context, arg1 *appregistry.ListApplicationsInput, arg2 func(*appregistry.ListApplicationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListApplicationsPagesWithContext indicates an expected call of ListApplicationsPagesWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListApplicationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsPagesWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListApplicationsPagesWithContext), varargs...)
}

// ListApplicationsRequest mocks base method.
func (m *MockAppRegistryAPI) ListApplicationsRequest(arg0 *appregistry.ListApplicationsInput) (*request.Request, *appregistry.ListApplicationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.ListApplicationsOutput)
	return ret0, ret1
}

// ListApplicationsRequest indicates an expected call of ListApplicationsRequest.
func (mr *MockAppRegistryAPIMockRecorder) ListApplicationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListApplicationsRequest), arg0)
}

// ListApplicationsWithContext mocks base method.
func (m *MockAppRegistryAPI) ListApplicationsWithContext(arg0 context.Context, arg1 *appregistry.ListApplicationsInput, arg2 ...request.Option) (*appregistry.ListApplicationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplicationsWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.ListApplicationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationsWithContext indicates an expected call of ListApplicationsWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListApplicationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationsWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListApplicationsWithContext), varargs...)
}

// ListAssociatedAttributeGroups mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedAttributeGroups(arg0 *appregistry.ListAssociatedAttributeGroupsInput) (*appregistry.ListAssociatedAttributeGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedAttributeGroups", arg0)
	ret0, _ := ret[0].(*appregistry.ListAssociatedAttributeGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedAttributeGroups indicates an expected call of ListAssociatedAttributeGroups.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedAttributeGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAttributeGroups", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedAttributeGroups), arg0)
}

// ListAssociatedAttributeGroupsPages mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedAttributeGroupsPages(arg0 *appregistry.ListAssociatedAttributeGroupsInput, arg1 func(*appregistry.ListAssociatedAttributeGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedAttributeGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedAttributeGroupsPages indicates an expected call of ListAssociatedAttributeGroupsPages.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedAttributeGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAttributeGroupsPages", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedAttributeGroupsPages), arg0, arg1)
}

// ListAssociatedAttributeGroupsPagesWithContext mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedAttributeGroupsPagesWithContext(arg0 context.Context, arg1 *appregistry.ListAssociatedAttributeGroupsInput, arg2 func(*appregistry.ListAssociatedAttributeGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedAttributeGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedAttributeGroupsPagesWithContext indicates an expected call of ListAssociatedAttributeGroupsPagesWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedAttributeGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAttributeGroupsPagesWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedAttributeGroupsPagesWithContext), varargs...)
}

// ListAssociatedAttributeGroupsRequest mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedAttributeGroupsRequest(arg0 *appregistry.ListAssociatedAttributeGroupsInput) (*request.Request, *appregistry.ListAssociatedAttributeGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedAttributeGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.ListAssociatedAttributeGroupsOutput)
	return ret0, ret1
}

// ListAssociatedAttributeGroupsRequest indicates an expected call of ListAssociatedAttributeGroupsRequest.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedAttributeGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAttributeGroupsRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedAttributeGroupsRequest), arg0)
}

// ListAssociatedAttributeGroupsWithContext mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedAttributeGroupsWithContext(arg0 context.Context, arg1 *appregistry.ListAssociatedAttributeGroupsInput, arg2 ...request.Option) (*appregistry.ListAssociatedAttributeGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedAttributeGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.ListAssociatedAttributeGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedAttributeGroupsWithContext indicates an expected call of ListAssociatedAttributeGroupsWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedAttributeGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedAttributeGroupsWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedAttributeGroupsWithContext), varargs...)
}

// ListAssociatedResources mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedResources(arg0 *appregistry.ListAssociatedResourcesInput) (*appregistry.ListAssociatedResourcesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedResources", arg0)
	ret0, _ := ret[0].(*appregistry.ListAssociatedResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedResources indicates an expected call of ListAssociatedResources.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResources", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedResources), arg0)
}

// ListAssociatedResourcesPages mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedResourcesPages(arg0 *appregistry.ListAssociatedResourcesInput, arg1 func(*appregistry.ListAssociatedResourcesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedResourcesPages indicates an expected call of ListAssociatedResourcesPages.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResourcesPages", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedResourcesPages), arg0, arg1)
}

// ListAssociatedResourcesPagesWithContext mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedResourcesPagesWithContext(arg0 context.Context, arg1 *appregistry.ListAssociatedResourcesInput, arg2 func(*appregistry.ListAssociatedResourcesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAssociatedResourcesPagesWithContext indicates an expected call of ListAssociatedResourcesPagesWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResourcesPagesWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedResourcesPagesWithContext), varargs...)
}

// ListAssociatedResourcesRequest mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedResourcesRequest(arg0 *appregistry.ListAssociatedResourcesInput) (*request.Request, *appregistry.ListAssociatedResourcesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssociatedResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.ListAssociatedResourcesOutput)
	return ret0, ret1
}

// ListAssociatedResourcesRequest indicates an expected call of ListAssociatedResourcesRequest.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedResourcesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResourcesRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedResourcesRequest), arg0)
}

// ListAssociatedResourcesWithContext mocks base method.
func (m *MockAppRegistryAPI) ListAssociatedResourcesWithContext(arg0 context.Context, arg1 *appregistry.ListAssociatedResourcesInput, arg2 ...request.Option) (*appregistry.ListAssociatedResourcesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssociatedResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.ListAssociatedResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssociatedResourcesWithContext indicates an expected call of ListAssociatedResourcesWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListAssociatedResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssociatedResourcesWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAssociatedResourcesWithContext), varargs...)
}

// ListAttributeGroups mocks base method.
func (m *MockAppRegistryAPI) ListAttributeGroups(arg0 *appregistry.ListAttributeGroupsInput) (*appregistry.ListAttributeGroupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttributeGroups", arg0)
	ret0, _ := ret[0].(*appregistry.ListAttributeGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttributeGroups indicates an expected call of ListAttributeGroups.
func (mr *MockAppRegistryAPIMockRecorder) ListAttributeGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttributeGroups", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAttributeGroups), arg0)
}

// ListAttributeGroupsPages mocks base method.
func (m *MockAppRegistryAPI) ListAttributeGroupsPages(arg0 *appregistry.ListAttributeGroupsInput, arg1 func(*appregistry.ListAttributeGroupsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttributeGroupsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttributeGroupsPages indicates an expected call of ListAttributeGroupsPages.
func (mr *MockAppRegistryAPIMockRecorder) ListAttributeGroupsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttributeGroupsPages", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAttributeGroupsPages), arg0, arg1)
}

// ListAttributeGroupsPagesWithContext mocks base method.
func (m *MockAppRegistryAPI) ListAttributeGroupsPagesWithContext(arg0 context.Context, arg1 *appregistry.ListAttributeGroupsInput, arg2 func(*appregistry.ListAttributeGroupsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttributeGroupsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAttributeGroupsPagesWithContext indicates an expected call of ListAttributeGroupsPagesWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListAttributeGroupsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttributeGroupsPagesWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAttributeGroupsPagesWithContext), varargs...)
}

// ListAttributeGroupsRequest mocks base method.
func (m *MockAppRegistryAPI) ListAttributeGroupsRequest(arg0 *appregistry.ListAttributeGroupsInput) (*request.Request, *appregistry.ListAttributeGroupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttributeGroupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.ListAttributeGroupsOutput)
	return ret0, ret1
}

// ListAttributeGroupsRequest indicates an expected call of ListAttributeGroupsRequest.
func (mr *MockAppRegistryAPIMockRecorder) ListAttributeGroupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttributeGroupsRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAttributeGroupsRequest), arg0)
}

// ListAttributeGroupsWithContext mocks base method.
func (m *MockAppRegistryAPI) ListAttributeGroupsWithContext(arg0 context.Context, arg1 *appregistry.ListAttributeGroupsInput, arg2 ...request.Option) (*appregistry.ListAttributeGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttributeGroupsWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.ListAttributeGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttributeGroupsWithContext indicates an expected call of ListAttributeGroupsWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListAttributeGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttributeGroupsWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListAttributeGroupsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockAppRegistryAPI) ListTagsForResource(arg0 *appregistry.ListTagsForResourceInput) (*appregistry.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*appregistry.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockAppRegistryAPIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockAppRegistryAPI) ListTagsForResourceRequest(arg0 *appregistry.ListTagsForResourceInput) (*request.Request, *appregistry.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockAppRegistryAPIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockAppRegistryAPI) ListTagsForResourceWithContext(arg0 context.Context, arg1 *appregistry.ListTagsForResourceInput, arg2 ...request.Option) (*appregistry.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockAppRegistryAPIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).ListTagsForResourceWithContext), varargs...)
}

// SyncResource mocks base method.
func (m *MockAppRegistryAPI) SyncResource(arg0 *appregistry.SyncResourceInput) (*appregistry.SyncResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncResource", arg0)
	ret0, _ := ret[0].(*appregistry.SyncResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncResource indicates an expected call of SyncResource.
func (mr *MockAppRegistryAPIMockRecorder) SyncResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncResource", reflect.TypeOf((*MockAppRegistryAPI)(nil).SyncResource), arg0)
}

// SyncResourceRequest mocks base method.
func (m *MockAppRegistryAPI) SyncResourceRequest(arg0 *appregistry.SyncResourceInput) (*request.Request, *appregistry.SyncResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.SyncResourceOutput)
	return ret0, ret1
}

// SyncResourceRequest indicates an expected call of SyncResourceRequest.
func (mr *MockAppRegistryAPIMockRecorder) SyncResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncResourceRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).SyncResourceRequest), arg0)
}

// SyncResourceWithContext mocks base method.
func (m *MockAppRegistryAPI) SyncResourceWithContext(arg0 context.Context, arg1 *appregistry.SyncResourceInput, arg2 ...request.Option) (*appregistry.SyncResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.SyncResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncResourceWithContext indicates an expected call of SyncResourceWithContext.
func (mr *MockAppRegistryAPIMockRecorder) SyncResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncResourceWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).SyncResourceWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockAppRegistryAPI) TagResource(arg0 *appregistry.TagResourceInput) (*appregistry.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*appregistry.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockAppRegistryAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockAppRegistryAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockAppRegistryAPI) TagResourceRequest(arg0 *appregistry.TagResourceInput) (*request.Request, *appregistry.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockAppRegistryAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockAppRegistryAPI) TagResourceWithContext(arg0 context.Context, arg1 *appregistry.TagResourceInput, arg2 ...request.Option) (*appregistry.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockAppRegistryAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockAppRegistryAPI) UntagResource(arg0 *appregistry.UntagResourceInput) (*appregistry.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*appregistry.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockAppRegistryAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockAppRegistryAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockAppRegistryAPI) UntagResourceRequest(arg0 *appregistry.UntagResourceInput) (*request.Request, *appregistry.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockAppRegistryAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockAppRegistryAPI) UntagResourceWithContext(arg0 context.Context, arg1 *appregistry.UntagResourceInput, arg2 ...request.Option) (*appregistry.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockAppRegistryAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateApplication mocks base method.
func (m *MockAppRegistryAPI) UpdateApplication(arg0 *appregistry.UpdateApplicationInput) (*appregistry.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0)
	ret0, _ := ret[0].(*appregistry.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockAppRegistryAPIMockRecorder) UpdateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockAppRegistryAPI)(nil).UpdateApplication), arg0)
}

// UpdateApplicationRequest mocks base method.
func (m *MockAppRegistryAPI) UpdateApplicationRequest(arg0 *appregistry.UpdateApplicationInput) (*request.Request, *appregistry.UpdateApplicationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.UpdateApplicationOutput)
	return ret0, ret1
}

// UpdateApplicationRequest indicates an expected call of UpdateApplicationRequest.
func (mr *MockAppRegistryAPIMockRecorder) UpdateApplicationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).UpdateApplicationRequest), arg0)
}

// UpdateApplicationWithContext mocks base method.
func (m *MockAppRegistryAPI) UpdateApplicationWithContext(arg0 context.Context, arg1 *appregistry.UpdateApplicationInput, arg2 ...request.Option) (*appregistry.UpdateApplicationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.UpdateApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithContext indicates an expected call of UpdateApplicationWithContext.
func (mr *MockAppRegistryAPIMockRecorder) UpdateApplicationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).UpdateApplicationWithContext), varargs...)
}

// UpdateAttributeGroup mocks base method.
func (m *MockAppRegistryAPI) UpdateAttributeGroup(arg0 *appregistry.UpdateAttributeGroupInput) (*appregistry.UpdateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttributeGroup", arg0)
	ret0, _ := ret[0].(*appregistry.UpdateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttributeGroup indicates an expected call of UpdateAttributeGroup.
func (mr *MockAppRegistryAPIMockRecorder) UpdateAttributeGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeGroup", reflect.TypeOf((*MockAppRegistryAPI)(nil).UpdateAttributeGroup), arg0)
}

// UpdateAttributeGroupRequest mocks base method.
func (m *MockAppRegistryAPI) UpdateAttributeGroupRequest(arg0 *appregistry.UpdateAttributeGroupInput) (*request.Request, *appregistry.UpdateAttributeGroupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttributeGroupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*appregistry.UpdateAttributeGroupOutput)
	return ret0, ret1
}

// UpdateAttributeGroupRequest indicates an expected call of UpdateAttributeGroupRequest.
func (mr *MockAppRegistryAPIMockRecorder) UpdateAttributeGroupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeGroupRequest", reflect.TypeOf((*MockAppRegistryAPI)(nil).UpdateAttributeGroupRequest), arg0)
}

// UpdateAttributeGroupWithContext mocks base method.
func (m *MockAppRegistryAPI) UpdateAttributeGroupWithContext(arg0 context.Context, arg1 *appregistry.UpdateAttributeGroupInput, arg2 ...request.Option) (*appregistry.UpdateAttributeGroupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAttributeGroupWithContext", varargs...)
	ret0, _ := ret[0].(*appregistry.UpdateAttributeGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttributeGroupWithContext indicates an expected call of UpdateAttributeGroupWithContext.
func (mr *MockAppRegistryAPIMockRecorder) UpdateAttributeGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeGroupWithContext", reflect.TypeOf((*MockAppRegistryAPI)(nil).UpdateAttributeGroupWithContext), varargs...)
}
